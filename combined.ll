; ModuleID = 'header.cpp'
source_filename = "header.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

%class.hamt = type { [7 x %class.KV], i64 }
%class.KV = type { %"union.KV<c_d, c_d, 0>::Key", %"union.KV<c_d, c_d, 0>::Val" }
%"union.KV<c_d, c_d, 0>::Key" = type { i64 }
%"union.KV<c_d, c_d, 0>::Val" = type { %class.KV.0* }
%class.KV.0 = type { %"union.KV<c_d, c_d, 1>::Key", %"union.KV<c_d, c_d, 1>::Val" }
%"union.KV<c_d, c_d, 1>::Key" = type { i64 }
%"union.KV<c_d, c_d, 1>::Val" = type { %class.KV.2* }
%class.KV.2 = type { %"union.KV<c_d, c_d, 2>::Key", %"union.KV<c_d, c_d, 2>::Val" }
%"union.KV<c_d, c_d, 2>::Key" = type { i64 }
%"union.KV<c_d, c_d, 2>::Val" = type { %class.KV.3* }
%class.KV.3 = type { %"union.KV<c_d, c_d, 3>::Key", %"union.KV<c_d, c_d, 3>::Val" }
%"union.KV<c_d, c_d, 3>::Key" = type { i64 }
%"union.KV<c_d, c_d, 3>::Val" = type { %class.KV.4* }
%class.KV.4 = type { %"union.KV<c_d, c_d, 4>::Key", %"union.KV<c_d, c_d, 4>::Val" }
%"union.KV<c_d, c_d, 4>::Key" = type { i64 }
%"union.KV<c_d, c_d, 4>::Val" = type { %class.KV.5* }
%class.KV.5 = type { %"union.KV<c_d, c_d, 5>::Key", %"union.KV<c_d, c_d, 5>::Val" }
%"union.KV<c_d, c_d, 5>::Key" = type { i64 }
%"union.KV<c_d, c_d, 5>::Val" = type { %class.KV.6* }
%class.KV.6 = type { %"union.KV<c_d, c_d, 6>::Key", %"union.KV<c_d, c_d, 6>::Val" }
%"union.KV<c_d, c_d, 6>::Key" = type { i64 }
%"union.KV<c_d, c_d, 6>::Val" = type { %class.KV.7* }
%class.KV.7 = type { %"union.KV<c_d, c_d, 7>::Key", %"union.KV<c_d, c_d, 7>::Val" }
%"union.KV<c_d, c_d, 7>::Key" = type { i64 }
%"union.KV<c_d, c_d, 7>::Val" = type { %class.KV.8* }
%class.KV.8 = type { %"union.KV<c_d, c_d, 8>::Key", %"union.KV<c_d, c_d, 8>::Val" }
%"union.KV<c_d, c_d, 8>::Key" = type { i64 }
%"union.KV<c_d, c_d, 8>::Val" = type { %class.KV.9* }
%class.KV.9 = type { %"union.KV<c_d, c_d, 9>::Key", %"union.KV<c_d, c_d, 9>::Val" }
%"union.KV<c_d, c_d, 9>::Key" = type { i64 }
%"union.KV<c_d, c_d, 9>::Val" = type { %class.KV.10* }
%class.KV.10 = type { %"union.KV<c_d, c_d, 10>::Key", %"union.KV<c_d, c_d, 10>::Val" }
%"union.KV<c_d, c_d, 10>::Key" = type { i64 }
%"union.KV<c_d, c_d, 10>::Val" = type { %class.LL* }
%class.LL = type { %class.c_d*, %class.c_d*, %class.LL* }
%class.c_d = type { i64 }
%class.hamt.1 = type opaque

@current_memory = global i64 0, align 8
@.str = private unnamed_addr constant [25 x i8] c"library run-time error: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"Ran out of memory.\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%llu\0A\00", align 1
@.str.5 = private unnamed_addr constant [68 x i8] c"Expected value: null (in expect_args0). Prim cannot take arguments.\00", align 1
@.str.6 = private unnamed_addr constant [79 x i8] c"Expected cons value (in expect_args1). Prim applied on an empty argument list.\00", align 1
@.str.7 = private unnamed_addr constant [70 x i8] c"Expected null value (in expect_args1). Prim can only take 1 argument.\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"Expected a cons value. (expect_cons)\00", align 1
@.str.9 = private unnamed_addr constant [51 x i8] c"Expected a vector or special value. (expect_other)\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"#<procedure>\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c" . \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"\22%s\22\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"#(\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.19 = private unnamed_addr constant [37 x i8] c"(print.. v); unrecognized value %llu\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"'()\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"'(\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"'%s\00", align 1
@.str.23 = private unnamed_addr constant [35 x i8] c"(print v); unrecognized value %llu\00", align 1
@.str.24 = private unnamed_addr constant [49 x i8] c"first argument to make-vector must be an integer\00", align 1
@.str.25 = private unnamed_addr constant [39 x i8] c"prim applied on more than 2 arguments.\00", align 1
@.str.26 = private unnamed_addr constant [49 x i8] c"second argument to vector-ref must be an integer\00", align 1
@.str.27 = private unnamed_addr constant [46 x i8] c"first argument to vector-ref must be a vector\00", align 1
@.str.28 = private unnamed_addr constant [46 x i8] c"vector-ref not given a properly formed vector\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"index out of bounds exception\00", align 1
@.str.30 = private unnamed_addr constant [48 x i8] c"first argument to vector-ref must be an integer\00", align 1
@.str.31 = private unnamed_addr constant [34 x i8] c"(prim + a b); a is not an integer\00", align 1
@.str.32 = private unnamed_addr constant [34 x i8] c"(prim + a b); b is not an integer\00", align 1
@.str.33 = private unnamed_addr constant [36 x i8] c"Tried to apply + on non list value.\00", align 1
@.str.34 = private unnamed_addr constant [34 x i8] c"(prim - a b); b is not an integer\00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"(prim * a b); a is not an integer\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"(prim * a b); b is not an integer\00", align 1
@.str.37 = private unnamed_addr constant [34 x i8] c"(prim / a b); a is not an integer\00", align 1
@.str.38 = private unnamed_addr constant [34 x i8] c"(prim / a b); b is not an integer\00", align 1
@.str.39 = private unnamed_addr constant [34 x i8] c"(prim = a b); a is not an integer\00", align 1
@.str.40 = private unnamed_addr constant [34 x i8] c"(prim = a b); b is not an integer\00", align 1
@.str.41 = private unnamed_addr constant [34 x i8] c"(prim < a b); a is not an integer\00", align 1
@.str.42 = private unnamed_addr constant [34 x i8] c"(prim < a b); b is not an integer\00", align 1
@.str.43 = private unnamed_addr constant [35 x i8] c"(prim <= a b); a is not an integer\00", align 1
@.str.44 = private unnamed_addr constant [35 x i8] c"(prim <= a b); b is not an integer\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"key does not exist in hash\00", align 1

; Function Attrs: ssp uwtable
define void @fatal_err(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  %4 = load i8*, i8** %2, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %4)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable
                                                  ; No predecessors!
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

; Function Attrs: ssp uwtable
define i64* @alloc(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* @current_memory, align 8
  %4 = load i64, i64* %2, align 8
  %5 = add i64 %3, %4
  store i64 %5, i64* @current_memory, align 8
  %6 = load i64, i64* @current_memory, align 8
  %7 = icmp ugt i64 %6, 250000000
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %1
  %10 = load i64, i64* %2, align 8
  %11 = call i8* @malloc(i64 %10)
  %12 = bitcast i8* %11 to i64*
  ret i64* %12
}

declare i8* @malloc(i64) #1

; Function Attrs: ssp uwtable
define void @print_u64(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i64 %3)
  ret void
}

; Function Attrs: ssp uwtable
define i64 @expect_args0(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.5, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %5, %1
  ret i64 0
}

; Function Attrs: ssp uwtable
define i64 @expect_args1(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = and i64 %4, 7
  %6 = icmp ne i64 %5, 1
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.6, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %1
  %9 = load i64, i64* %2, align 8
  %10 = and i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64* %11, i64** %3, align 8
  %12 = load i64*, i64** %3, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7, i32 0, i32 0))
  br label %17

; <label>:17                                      ; preds = %16, %8
  %18 = load i64*, i64** %3, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: ssp uwtable
define i64 @expect_cons(i64, i64*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 1
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64* %13, i64** %5, align 8
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load i64*, i64** %4, align 8
  store i64 %16, i64* %17, align 8
  %18 = load i64*, i64** %5, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: ssp uwtable
define i64 @expect_other(i64, i64*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 6
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.9, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64* %13, i64** %5, align 8
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load i64*, i64** %4, align 8
  store i64 %16, i64* %17, align 8
  %18 = load i64*, i64** %5, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_int(i64) #3 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = zext i32 %4 to i64
  %6 = shl i64 %5, 32
  %7 = or i64 %6, 2
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_void() #3 {
  ret i64 39
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_null() #3 {
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_true() #3 {
  ret i64 31
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_false() #3 {
  ret i64 15
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_string(i8*) #3 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = or i64 %4, 3
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_symbol(i8*) #3 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = or i64 %4, 4
  ret i64 %5
}

; Function Attrs: ssp uwtable
define i64 @prim_print_aux(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %113

; <label>:11                                      ; preds = %1
  %12 = load i64, i64* %2, align 8
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %11
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0))
  br label %112

; <label>:17                                      ; preds = %11
  %18 = load i64, i64* %2, align 8
  %19 = and i64 %18, 7
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %21, label %36

; <label>:21                                      ; preds = %17
  %22 = load i64, i64* %2, align 8
  %23 = and i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64* %24, i64** %3, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  %26 = load i64*, i64** %3, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 0
  %28 = load i64, i64* %27, align 8
  %29 = call i64 @prim_print_aux(i64 %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  %31 = load i64*, i64** %3, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = call i64 @prim_print_aux(i64 %33)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %111

; <label>:36                                      ; preds = %17
  %37 = load i64, i64* %2, align 8
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 2
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %36
  %41 = load i64, i64* %2, align 8
  %42 = lshr i64 %41, 32
  %43 = trunc i64 %42 to i32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 %43)
  br label %110

; <label>:45                                      ; preds = %36
  %46 = load i64, i64* %2, align 8
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 3
  br i1 %48, label %49, label %54

; <label>:49                                      ; preds = %45
  %50 = load i64, i64* %2, align 8
  %51 = and i64 %50, -8
  %52 = inttoptr i64 %51 to i8*
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* %52)
  br label %109

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %2, align 8
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 4
  br i1 %57, label %58, label %63

; <label>:58                                      ; preds = %54
  %59 = load i64, i64* %2, align 8
  %60 = and i64 %59, -8
  %61 = inttoptr i64 %60 to i8*
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %61)
  br label %108

; <label>:63                                      ; preds = %54
  %64 = load i64, i64* %2, align 8
  %65 = and i64 %64, 7
  %66 = icmp eq i64 %65, 6
  br i1 %66, label %67, label %104

; <label>:67                                      ; preds = %63
  %68 = load i64, i64* %2, align 8
  %69 = and i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  %71 = getelementptr inbounds i64, i64* %70, i64 0
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 7
  %74 = icmp eq i64 1, %73
  br i1 %74, label %75, label %104

; <label>:75                                      ; preds = %67
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  %77 = load i64, i64* %2, align 8
  %78 = and i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64* %79, i64** %4, align 8
  %80 = load i64*, i64** %4, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 0
  %82 = load i64, i64* %81, align 8
  %83 = lshr i64 %82, 3
  store i64 %83, i64* %5, align 8
  %84 = load i64*, i64** %4, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 1
  %86 = load i64, i64* %85, align 8
  %87 = call i64 @prim_print_aux(i64 %86)
  store i64 2, i64* %6, align 8
  br label %88

; <label>:88                                      ; preds = %99, %75
  %89 = load i64, i64* %6, align 8
  %90 = load i64, i64* %5, align 8
  %91 = icmp ule i64 %89, %90
  br i1 %91, label %92, label %102

; <label>:92                                      ; preds = %88
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  %94 = load i64, i64* %6, align 8
  %95 = load i64*, i64** %4, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 %94
  %97 = load i64, i64* %96, align 8
  %98 = call i64 @prim_print_aux(i64 %97)
  br label %99

; <label>:99                                      ; preds = %92
  %100 = load i64, i64* %6, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %6, align 8
  br label %88

; <label>:102                                     ; preds = %88
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %107

; <label>:104                                     ; preds = %67, %63
  %105 = load i64, i64* %2, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.19, i32 0, i32 0), i64 %105)
  br label %107

; <label>:107                                     ; preds = %104, %102
  br label %108

; <label>:108                                     ; preds = %107, %58
  br label %109

; <label>:109                                     ; preds = %108, %49
  br label %110

; <label>:110                                     ; preds = %109, %40
  br label %111

; <label>:111                                     ; preds = %110, %21
  br label %112

; <label>:112                                     ; preds = %111, %15
  br label %113

; <label>:113                                     ; preds = %112, %9
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @prim_print(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0))
  br label %113

; <label>:11                                      ; preds = %1
  %12 = load i64, i64* %2, align 8
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %11
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0))
  br label %112

; <label>:17                                      ; preds = %11
  %18 = load i64, i64* %2, align 8
  %19 = and i64 %18, 7
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %21, label %36

; <label>:21                                      ; preds = %17
  %22 = load i64, i64* %2, align 8
  %23 = and i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64* %24, i64** %3, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0))
  %26 = load i64*, i64** %3, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 0
  %28 = load i64, i64* %27, align 8
  %29 = call i64 @prim_print_aux(i64 %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  %31 = load i64*, i64** %3, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = call i64 @prim_print_aux(i64 %33)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %111

; <label>:36                                      ; preds = %17
  %37 = load i64, i64* %2, align 8
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 2
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %36
  %41 = load i64, i64* %2, align 8
  %42 = lshr i64 %41, 32
  %43 = trunc i64 %42 to i32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 %43)
  br label %110

; <label>:45                                      ; preds = %36
  %46 = load i64, i64* %2, align 8
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 3
  br i1 %48, label %49, label %54

; <label>:49                                      ; preds = %45
  %50 = load i64, i64* %2, align 8
  %51 = and i64 %50, -8
  %52 = inttoptr i64 %51 to i8*
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* %52)
  br label %109

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %2, align 8
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 4
  br i1 %57, label %58, label %63

; <label>:58                                      ; preds = %54
  %59 = load i64, i64* %2, align 8
  %60 = and i64 %59, -8
  %61 = inttoptr i64 %60 to i8*
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), i8* %61)
  br label %108

; <label>:63                                      ; preds = %54
  %64 = load i64, i64* %2, align 8
  %65 = and i64 %64, 7
  %66 = icmp eq i64 %65, 6
  br i1 %66, label %67, label %104

; <label>:67                                      ; preds = %63
  %68 = load i64, i64* %2, align 8
  %69 = and i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  %71 = getelementptr inbounds i64, i64* %70, i64 0
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 7
  %74 = icmp eq i64 1, %73
  br i1 %74, label %75, label %104

; <label>:75                                      ; preds = %67
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  %77 = load i64, i64* %2, align 8
  %78 = and i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64* %79, i64** %4, align 8
  %80 = load i64*, i64** %4, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 0
  %82 = load i64, i64* %81, align 8
  %83 = lshr i64 %82, 3
  store i64 %83, i64* %5, align 8
  %84 = load i64*, i64** %4, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 1
  %86 = load i64, i64* %85, align 8
  %87 = call i64 @prim_print(i64 %86)
  store i64 2, i64* %6, align 8
  br label %88

; <label>:88                                      ; preds = %99, %75
  %89 = load i64, i64* %6, align 8
  %90 = load i64, i64* %5, align 8
  %91 = icmp ule i64 %89, %90
  br i1 %91, label %92, label %102

; <label>:92                                      ; preds = %88
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  %94 = load i64, i64* %6, align 8
  %95 = load i64*, i64** %4, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 %94
  %97 = load i64, i64* %96, align 8
  %98 = call i64 @prim_print(i64 %97)
  br label %99

; <label>:99                                      ; preds = %92
  %100 = load i64, i64* %6, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %6, align 8
  br label %88

; <label>:102                                     ; preds = %88
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %107

; <label>:104                                     ; preds = %67, %63
  %105 = load i64, i64* %2, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.23, i32 0, i32 0), i64 %105)
  br label %107

; <label>:107                                     ; preds = %104, %102
  br label %108

; <label>:108                                     ; preds = %107, %58
  br label %109

; <label>:109                                     ; preds = %108, %49
  br label %110

; <label>:110                                     ; preds = %109, %40
  br label %111

; <label>:111                                     ; preds = %110, %21
  br label %112

; <label>:112                                     ; preds = %111, %15
  br label %113

; <label>:113                                     ; preds = %112, %9
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @applyprim_print(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_print(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_halt(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = call i64 @prim_print(i64 %4)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 0) #7
  unreachable
                                                  ; No predecessors!
  %8 = load i64, i64* %2, align 8
  ret i64 %8
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 4096
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = icmp ugt i64 %9, 250000000
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %12

; <label>:12                                      ; preds = %11, %1
  %13 = call i8* @malloc(i64 4096)
  %14 = bitcast i8* %13 to i64*
  store i64* %14, i64** %3, align 8
  store i64 0, i64* %4, align 8
  br label %15

; <label>:15                                      ; preds = %24, %12
  %16 = load i64, i64* %2, align 8
  %17 = and i64 %16, 7
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %15
  %20 = load i64, i64* %4, align 8
  %21 = icmp ult i64 %20, 512
  br label %22

; <label>:22                                      ; preds = %19, %15
  %23 = phi i1 [ false, %15 ], [ %21, %19 ]
  br i1 %23, label %24, label %31

; <label>:24                                      ; preds = %22
  %25 = load i64, i64* %2, align 8
  %26 = call i64 @expect_cons(i64 %25, i64* %2)
  %27 = load i64, i64* %4, align 8
  %28 = add i64 %27, 1
  store i64 %28, i64* %4, align 8
  %29 = load i64*, i64** %3, align 8
  %30 = getelementptr inbounds i64, i64* %29, i64 %27
  store i64 %26, i64* %30, align 8
  br label %15

; <label>:31                                      ; preds = %22
  %32 = load i64, i64* %4, align 8
  %33 = add i64 %32, 1
  %34 = mul i64 %33, 8
  %35 = call i64* @alloc(i64 %34)
  store i64* %35, i64** %5, align 8
  %36 = load i64, i64* %4, align 8
  %37 = shl i64 %36, 3
  %38 = or i64 %37, 1
  %39 = load i64*, i64** %5, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 0
  store i64 %38, i64* %40, align 8
  store i64 0, i64* %6, align 8
  br label %41

; <label>:41                                      ; preds = %54, %31
  %42 = load i64, i64* %6, align 8
  %43 = load i64, i64* %4, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %57

; <label>:45                                      ; preds = %41
  %46 = load i64, i64* %6, align 8
  %47 = load i64*, i64** %3, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 %46
  %49 = load i64, i64* %48, align 8
  %50 = load i64, i64* %6, align 8
  %51 = add i64 %50, 1
  %52 = load i64*, i64** %5, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 %51
  store i64 %49, i64* %53, align 8
  br label %54

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %6, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %6, align 8
  br label %41

; <label>:57                                      ; preds = %41
  %58 = load i64*, i64** %3, align 8
  %59 = icmp eq i64* %58, null
  br i1 %59, label %62, label %60

; <label>:60                                      ; preds = %57
  %61 = bitcast i64* %58 to i8*
  call void @_ZdaPv(i8* %61) #8
  br label %62

; <label>:62                                      ; preds = %60, %57
  %63 = load i64*, i64** %5, align 8
  %64 = ptrtoint i64* %63 to i64
  %65 = or i64 %64, 6
  ret i64 %65
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #4

; Function Attrs: ssp uwtable
define i64 @prim_make_45vector(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = and i64 %8, 7
  %10 = icmp ne i64 %9, 2
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.24, i32 0, i32 0))
  br label %12

; <label>:12                                      ; preds = %11, %2
  %13 = load i64, i64* %3, align 8
  %14 = and i64 %13, -8
  %15 = lshr i64 %14, 32
  %16 = trunc i64 %15 to i32
  %17 = sext i32 %16 to i64
  store i64 %17, i64* %5, align 8
  %18 = load i64, i64* %5, align 8
  %19 = add i64 %18, 1
  %20 = mul i64 %19, 8
  %21 = call i64* @alloc(i64 %20)
  store i64* %21, i64** %6, align 8
  %22 = load i64, i64* %5, align 8
  %23 = shl i64 %22, 3
  %24 = or i64 %23, 1
  %25 = load i64*, i64** %6, align 8
  %26 = getelementptr inbounds i64, i64* %25, i64 0
  store i64 %24, i64* %26, align 8
  store i64 1, i64* %7, align 8
  br label %27

; <label>:27                                      ; preds = %36, %12
  %28 = load i64, i64* %7, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp ule i64 %28, %29
  br i1 %30, label %31, label %39

; <label>:31                                      ; preds = %27
  %32 = load i64, i64* %4, align 8
  %33 = load i64, i64* %7, align 8
  %34 = load i64*, i64** %6, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 %33
  store i64 %32, i64* %35, align 8
  br label %36

; <label>:36                                      ; preds = %31
  %37 = load i64, i64* %7, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %7, align 8
  br label %27

; <label>:39                                      ; preds = %27
  %40 = load i64*, i64** %6, align 8
  %41 = ptrtoint i64* %40 to i64
  %42 = or i64 %41, 6
  ret i64 %42
}

; Function Attrs: ssp uwtable
define i64 @applyprim_make_45vector(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_make_45vector(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_vector_45ref(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.26, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %3, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 6
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.27, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 7
  %21 = icmp ne i64 %20, 1
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %14
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.28, i32 0, i32 0))
  br label %23

; <label>:23                                      ; preds = %22, %14
  %24 = load i64, i64* %4, align 8
  %25 = and i64 %24, -8
  %26 = lshr i64 %25, 32
  %27 = trunc i64 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = load i64, i64* %3, align 8
  %30 = and i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  %32 = getelementptr inbounds i64, i64* %31, i64 0
  %33 = load i64, i64* %32, align 8
  %34 = lshr i64 %33, 3
  %35 = icmp uge i64 %28, %34
  br i1 %35, label %36, label %37

; <label>:36                                      ; preds = %23
  call void @fatal_err(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i32 0, i32 0))
  br label %37

; <label>:37                                      ; preds = %36, %23
  %38 = load i64, i64* %4, align 8
  %39 = and i64 %38, -8
  %40 = lshr i64 %39, 32
  %41 = trunc i64 %40 to i32
  %42 = add nsw i32 1, %41
  %43 = sext i32 %42 to i64
  %44 = load i64, i64* %3, align 8
  %45 = and i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = getelementptr inbounds i64, i64* %46, i64 %43
  %48 = load i64, i64* %47, align 8
  ret i64 %48
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector_45ref(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_vector_45ref(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_vector_45set_33(i64, i64, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = and i64 %7, 7
  %9 = icmp ne i64 %8, 2
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %3
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.26, i32 0, i32 0))
  br label %11

; <label>:11                                      ; preds = %10, %3
  %12 = load i64, i64* %4, align 8
  %13 = and i64 %12, 7
  %14 = icmp ne i64 %13, 6
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %11
  call void @fatal_err(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.30, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %11
  %17 = load i64, i64* %4, align 8
  %18 = and i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  %20 = getelementptr inbounds i64, i64* %19, i64 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, 7
  %23 = icmp ne i64 %22, 1
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %16
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.28, i32 0, i32 0))
  br label %25

; <label>:25                                      ; preds = %24, %16
  %26 = load i64, i64* %5, align 8
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = load i64, i64* %4, align 8
  %32 = and i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = lshr i64 %35, 3
  %37 = icmp uge i64 %30, %36
  br i1 %37, label %38, label %39

; <label>:38                                      ; preds = %25
  call void @fatal_err(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i32 0, i32 0))
  br label %39

; <label>:39                                      ; preds = %38, %25
  %40 = load i64, i64* %6, align 8
  %41 = load i64, i64* %5, align 8
  %42 = and i64 %41, -8
  %43 = lshr i64 %42, 32
  %44 = trunc i64 %43 to i32
  %45 = add nsw i32 1, %44
  %46 = sext i32 %45 to i64
  %47 = load i64, i64* %4, align 8
  %48 = and i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  %50 = getelementptr inbounds i64, i64* %49, i64 %46
  store i64 %40, i64* %50, align 8
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector_45set_33(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = call i64 @expect_cons(i64 %7, i64* %3)
  store i64 %8, i64* %4, align 8
  %9 = load i64, i64* %3, align 8
  %10 = call i64 @expect_cons(i64 %9, i64* %3)
  store i64 %10, i64* %5, align 8
  %11 = load i64, i64* %3, align 8
  %12 = call i64 @expect_cons(i64 %11, i64* %3)
  store i64 %12, i64* %6, align 8
  %13 = load i64, i64* %3, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %1
  %17 = load i64, i64* %4, align 8
  %18 = load i64, i64* %5, align 8
  %19 = load i64, i64* %6, align 8
  %20 = call i64 @prim_vector_45set_33(i64 %17, i64 %18, i64 %19)
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_void() #3 {
  ret i64 39
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_eq_63(i64, i64) #3 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  store i64 31, i64* %3, align 8
  br label %11

; <label>:10                                      ; preds = %2
  store i64 15, i64* %3, align 8
  br label %11

; <label>:11                                      ; preds = %10, %9
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: ssp uwtable
define i64 @applyprim_eq_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_eq_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_eqv_63(i64, i64) #3 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  store i64 31, i64* %3, align 8
  br label %11

; <label>:10                                      ; preds = %2
  store i64 15, i64* %3, align 8
  br label %11

; <label>:11                                      ; preds = %10, %9
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: ssp uwtable
define i64 @applyprim_eqv_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_eqv_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_number_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_number_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_number_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_integer_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_integer_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_integer_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_void_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 39
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_void_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_void_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_procedure_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_procedure_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_procedure_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_null_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_null_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_null_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_cons_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cons_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_cons_63(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_cons(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = call i64* @alloc(i64 16)
  store i64* %6, i64** %5, align 8
  %7 = load i64, i64* %3, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = getelementptr inbounds i64, i64* %8, i64 0
  store i64 %7, i64* %9, align 8
  %10 = load i64, i64* %4, align 8
  %11 = load i64*, i64** %5, align 8
  %12 = getelementptr inbounds i64, i64* %11, i64 1
  store i64 %10, i64* %12, align 8
  %13 = load i64*, i64** %5, align 8
  %14 = ptrtoint i64* %13 to i64
  %15 = or i64 %14, 1
  ret i64 %15
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cons(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_cons(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_car(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = call i64 @expect_cons(i64 %5, i64* %3)
  store i64 %6, i64* %4, align 8
  %7 = load i64, i64* %4, align 8
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @applyprim_car(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_car(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_cdr(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = call i64 @expect_cons(i64 %5, i64* %3)
  store i64 %6, i64* %4, align 8
  %7 = load i64, i64* %3, align 8
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cdr(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_cdr(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim__43(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.31, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.32, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = add nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__43(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 2, i64* %2, align 8
  br label %34

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = load i64*, i64** %4, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @applyprim__43(i64 %25)
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = add nsw i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 32
  %33 = or i64 %32, 2
  store i64 %33, i64* %2, align 8
  br label %34

; <label>:34                                      ; preds = %13, %7
  %35 = load i64, i64* %2, align 8
  ret i64 %35
}

; Function Attrs: ssp uwtable
define i64 @prim__45(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.31, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.34, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = sub nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__45(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 2, i64* %2, align 8
  br label %50

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %32

; <label>:21                                      ; preds = %13
  %22 = load i64*, i64** %4, align 8
  %23 = getelementptr inbounds i64, i64* %22, i64 0
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, -8
  %26 = lshr i64 %25, 32
  %27 = trunc i64 %26 to i32
  %28 = sub nsw i32 0, %27
  %29 = zext i32 %28 to i64
  %30 = shl i64 %29, 32
  %31 = or i64 %30, 2
  store i64 %31, i64* %2, align 8
  br label %50

; <label>:32                                      ; preds = %13
  %33 = load i64*, i64** %4, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = and i64 %35, -8
  %37 = lshr i64 %36, 32
  %38 = trunc i64 %37 to i32
  %39 = load i64*, i64** %4, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 1
  %41 = load i64, i64* %40, align 8
  %42 = call i64 @applyprim__43(i64 %41)
  %43 = and i64 %42, -8
  %44 = lshr i64 %43, 32
  %45 = trunc i64 %44 to i32
  %46 = sub nsw i32 %38, %45
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 32
  %49 = or i64 %48, 2
  store i64 %49, i64* %2, align 8
  br label %50

; <label>:50                                      ; preds = %32, %21, %7
  %51 = load i64, i64* %2, align 8
  ret i64 %51
}

; Function Attrs: ssp uwtable
define i64 @prim__42(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = mul nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__42(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 4294967298, i64* %2, align 8
  br label %34

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = load i64*, i64** %4, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @applyprim__42(i64 %25)
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = mul nsw i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 32
  %33 = or i64 %32, 2
  store i64 %33, i64* %2, align 8
  br label %34

; <label>:34                                      ; preds = %13, %7
  %35 = load i64, i64* %2, align 8
  ret i64 %35
}

; Function Attrs: ssp uwtable
define i64 @prim__47(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.38, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = sdiv i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @prim__61(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.40, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp eq i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: ssp uwtable
define i64 @prim__60(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.41, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.42, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: ssp uwtable
define i64 @prim__60_61(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.43, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.44, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp sle i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_not(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 15
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_not(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_not(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_hash() #0 {
  %1 = alloca %class.hamt*, align 8
  %2 = load i64, i64* @current_memory, align 8
  %3 = add i64 %2, 120
  store i64 %3, i64* @current_memory, align 8
  %4 = load i64, i64* @current_memory, align 8
  %5 = add i64 %4, 120
  %6 = icmp ugt i64 %5, 250000000
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %0
  %9 = call i8* @malloc(i64 120)
  %10 = bitcast i8* %9 to %class.hamt.1*
  %11 = bitcast %class.hamt.1* %10 to i8*
  %12 = bitcast i8* %11 to %class.hamt*
  call void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt* %12)
  store %class.hamt* %12, %class.hamt** %1, align 8
  %13 = load %class.hamt*, %class.hamt** %1, align 8
  %14 = ptrtoint %class.hamt* %13 to i64
  ret i64 %14
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt*) unnamed_addr #0 align 2 {
  %2 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %2, align 8
  %3 = load %class.hamt*, %class.hamt** %2, align 8
  call void @_ZN4hamtI3c_dS0_EC2Ev(%class.hamt* %3)
  ret void
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45ref(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  %21 = load %class.c_d*, %class.c_d** %5, align 8
  %22 = call %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt* %20, %class.c_d* %21)
  store %class.c_d* %22, %class.c_d** %6, align 8
  %23 = load %class.c_d*, %class.c_d** %6, align 8
  %24 = icmp eq %class.c_d* %23, null
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %13
  call void @fatal_err(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i32 0, i32 0))
  br label %26

; <label>:26                                      ; preds = %25, %13
  %27 = load %class.c_d*, %class.c_d** %6, align 8
  %28 = getelementptr inbounds %class.c_d, %class.c_d* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  ret i64 %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN3c_dC1Ey(%class.c_d*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca i64, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN3c_dC2Ey(%class.c_d* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %8 = load %class.hamt*, %class.hamt** %4, align 8
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  %10 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %9)
  store i64 %10, i64* %6, align 8
  %11 = load i64, i64* %6, align 8
  %12 = and i64 %11, 15
  %13 = urem i64 %12, 7
  store i64 %13, i64* %7, align 8
  %14 = load i64, i64* %7, align 8
  %15 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %16 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %15, i64 0, i64 %14
  %17 = getelementptr inbounds %class.KV, %class.KV* %16, i32 0, i32 0
  %18 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %2
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %56

; <label>:22                                      ; preds = %2
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %25 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %24, i64 0, i64 %23
  %26 = getelementptr inbounds %class.KV, %class.KV* %25, i32 0, i32 0
  %27 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %48

; <label>:31                                      ; preds = %22
  %32 = load i64, i64* %7, align 8
  %33 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %34 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %33, i64 0, i64 %32
  %35 = getelementptr inbounds %class.KV, %class.KV* %34, i32 0, i32 0
  %36 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %35 to %class.c_d**
  %37 = load %class.c_d*, %class.c_d** %36, align 8
  %38 = load %class.c_d*, %class.c_d** %5, align 8
  %39 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %37, %class.c_d* dereferenceable(8) %38)
  br i1 %39, label %40, label %47

; <label>:40                                      ; preds = %31
  %41 = load i64, i64* %7, align 8
  %42 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %43 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %42, i64 0, i64 %41
  %44 = getelementptr inbounds %class.KV, %class.KV* %43, i32 0, i32 1
  %45 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %44 to %class.c_d**
  %46 = load %class.c_d*, %class.c_d** %45, align 8
  store %class.c_d* %46, %class.c_d** %3, align 8
  br label %56

; <label>:47                                      ; preds = %31
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %56

; <label>:48                                      ; preds = %22
  %49 = load i64, i64* %7, align 8
  %50 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %51 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %50, i64 0, i64 %49
  %52 = load i64, i64* %6, align 8
  %53 = lshr i64 %52, 4
  %54 = load %class.c_d*, %class.c_d** %5, align 8
  %55 = call %class.c_d* @_ZN2KVI3c_dS0_Lj0EE10inner_findERKS1_yPKS0_(%class.KV* dereferenceable(16) %51, i64 %53, %class.c_d* %54)
  store %class.c_d* %55, %class.c_d** %3, align 8
  br label %56

; <label>:56                                      ; preds = %48, %47, %40, %21
  %57 = load %class.c_d*, %class.c_d** %3, align 8
  ret %class.c_d* %57
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45set(i64, i64, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca %class.hamt*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %10 = load i64, i64* @current_memory, align 8
  %11 = add i64 %10, 16
  store i64 %11, i64* @current_memory, align 8
  %12 = load i64, i64* @current_memory, align 8
  %13 = add i64 %12, 16
  %14 = icmp ugt i64 %13, 250000000
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %3
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %3
  %17 = call i8* @malloc(i64 8)
  %18 = bitcast i8* %17 to %class.c_d*
  %19 = bitcast %class.c_d* %18 to i8*
  %20 = bitcast i8* %19 to %class.c_d*
  %21 = load i64, i64* %5, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %20, i64 %21)
  store %class.c_d* %20, %class.c_d** %7, align 8
  %22 = call i8* @malloc(i64 8)
  %23 = bitcast i8* %22 to %class.c_d*
  %24 = bitcast %class.c_d* %23 to i8*
  %25 = bitcast i8* %24 to %class.c_d*
  %26 = load i64, i64* %6, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %25, i64 %26)
  store %class.c_d* %25, %class.c_d** %8, align 8
  %27 = load i64, i64* %4, align 8
  %28 = inttoptr i64 %27 to %class.hamt*
  store %class.hamt* %28, %class.hamt** %9, align 8
  %29 = load %class.hamt*, %class.hamt** %9, align 8
  %30 = load %class.c_d*, %class.c_d** %7, align 8
  %31 = load %class.c_d*, %class.c_d** %8, align 8
  %32 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt* %29, %class.c_d* %30, %class.c_d* %31)
  %33 = ptrtoint %class.hamt* %32 to i64
  ret i64 %33
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt*, %class.c_d*, %class.c_d*) #0 align 2 {
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %10 = load %class.hamt*, %class.hamt** %4, align 8
  %11 = load %class.c_d*, %class.c_d** %5, align 8
  %12 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %11)
  store i64 %12, i64* %7, align 8
  %13 = load i64, i64* %7, align 8
  %14 = and i64 %13, 15
  %15 = urem i64 %14, 7
  store i64 %15, i64* %8, align 8
  %16 = call i8* @malloc(i64 120)
  %17 = bitcast i8* %16 to %class.hamt*
  store %class.hamt* %17, %class.hamt** %9, align 8
  %18 = load %class.hamt*, %class.hamt** %9, align 8
  %19 = bitcast %class.hamt* %18 to i8*
  %20 = bitcast %class.hamt* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 120, i32 8, i1 false)
  %21 = load i64, i64* %8, align 8
  %22 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %23 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %22, i64 0, i64 %21
  %24 = getelementptr inbounds %class.KV, %class.KV* %23, i32 0, i32 0
  %25 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %41

; <label>:28                                      ; preds = %3
  %29 = load i64, i64* %8, align 8
  %30 = load %class.hamt*, %class.hamt** %9, align 8
  %31 = getelementptr inbounds %class.hamt, %class.hamt* %30, i32 0, i32 0
  %32 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %31, i64 0, i64 %29
  %33 = bitcast %class.KV* %32 to i8*
  %34 = bitcast i8* %33 to %class.KV*
  %35 = load %class.c_d*, %class.c_d** %5, align 8
  %36 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %34, %class.c_d* %35, %class.c_d* %36)
  %37 = load %class.hamt*, %class.hamt** %9, align 8
  %38 = getelementptr inbounds %class.hamt, %class.hamt* %37, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %38, align 8
  br label %121

; <label>:41                                      ; preds = %3
  %42 = load i64, i64* %8, align 8
  %43 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %44 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %43, i64 0, i64 %42
  %45 = getelementptr inbounds %class.KV, %class.KV* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %104

; <label>:50                                      ; preds = %41
  %51 = load i64, i64* %8, align 8
  %52 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %53 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %52, i64 0, i64 %51
  %54 = getelementptr inbounds %class.KV, %class.KV* %53, i32 0, i32 0
  %55 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %54 to %class.c_d**
  %56 = load %class.c_d*, %class.c_d** %55, align 8
  %57 = load %class.c_d*, %class.c_d** %5, align 8
  %58 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %56, %class.c_d* dereferenceable(8) %57)
  br i1 %58, label %59, label %68

; <label>:59                                      ; preds = %50
  %60 = load i64, i64* %8, align 8
  %61 = load %class.hamt*, %class.hamt** %9, align 8
  %62 = getelementptr inbounds %class.hamt, %class.hamt* %61, i32 0, i32 0
  %63 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %62, i64 0, i64 %60
  %64 = bitcast %class.KV* %63 to i8*
  %65 = bitcast i8* %64 to %class.KV*
  %66 = load %class.c_d*, %class.c_d** %5, align 8
  %67 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %65, %class.c_d* %66, %class.c_d* %67)
  br label %103

; <label>:68                                      ; preds = %50
  %69 = load %class.hamt*, %class.hamt** %9, align 8
  %70 = getelementptr inbounds %class.hamt, %class.hamt* %69, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %70, align 8
  %73 = load i64, i64* %8, align 8
  %74 = load %class.hamt*, %class.hamt** %9, align 8
  %75 = getelementptr inbounds %class.hamt, %class.hamt* %74, i32 0, i32 0
  %76 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %75, i64 0, i64 %73
  %77 = bitcast %class.KV* %76 to i8*
  %78 = bitcast i8* %77 to %class.KV*
  %79 = load i64, i64* %8, align 8
  %80 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %81 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %80, i64 0, i64 %79
  %82 = getelementptr inbounds %class.KV, %class.KV* %81, i32 0, i32 0
  %83 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %82 to %class.c_d**
  %84 = load %class.c_d*, %class.c_d** %83, align 8
  %85 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %84)
  %86 = lshr i64 %85, 4
  %87 = load i64, i64* %8, align 8
  %88 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %89 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %88, i64 0, i64 %87
  %90 = getelementptr inbounds %class.KV, %class.KV* %89, i32 0, i32 0
  %91 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %90 to %class.c_d**
  %92 = load %class.c_d*, %class.c_d** %91, align 8
  %93 = load i64, i64* %8, align 8
  %94 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %95 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %94, i64 0, i64 %93
  %96 = getelementptr inbounds %class.KV, %class.KV* %95, i32 0, i32 1
  %97 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %96 to %class.c_d**
  %98 = load %class.c_d*, %class.c_d** %97, align 8
  %99 = load i64, i64* %7, align 8
  %100 = lshr i64 %99, 4
  %101 = load %class.c_d*, %class.c_d** %5, align 8
  %102 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV* sret %78, i64 %86, %class.c_d* %92, %class.c_d* %98, i64 %100, %class.c_d* %101, %class.c_d* %102)
  br label %103

; <label>:103                                     ; preds = %68, %59
  br label %120

; <label>:104                                     ; preds = %41
  %105 = load i64, i64* %8, align 8
  %106 = load %class.hamt*, %class.hamt** %9, align 8
  %107 = getelementptr inbounds %class.hamt, %class.hamt* %106, i32 0, i32 0
  %108 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %107, i64 0, i64 %105
  %109 = bitcast %class.KV* %108 to i8*
  %110 = bitcast i8* %109 to %class.KV*
  %111 = load i64, i64* %8, align 8
  %112 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %113 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %112, i64 0, i64 %111
  %114 = load i64, i64* %7, align 8
  %115 = lshr i64 %114, 4
  %116 = load %class.c_d*, %class.c_d** %5, align 8
  %117 = load %class.c_d*, %class.c_d** %6, align 8
  %118 = load %class.hamt*, %class.hamt** %9, align 8
  %119 = getelementptr inbounds %class.hamt, %class.hamt* %118, i32 0, i32 1
  call void @_ZN2KVI3c_dS0_Lj0EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV* sret %110, %class.KV* dereferenceable(16) %113, i64 %115, %class.c_d* %116, %class.c_d* %117, i64* %119)
  br label %120

; <label>:120                                     ; preds = %104, %103
  br label %121

; <label>:121                                     ; preds = %120, %28
  %122 = load %class.hamt*, %class.hamt** %9, align 8
  ret %class.hamt* %122
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45remove(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  store %class.hamt* %20, %class.hamt** %6, align 8
  %21 = load %class.hamt*, %class.hamt** %6, align 8
  %22 = load %class.c_d*, %class.c_d** %5, align 8
  %23 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt* %21, %class.c_d* %22)
  %24 = ptrtoint %class.hamt* %23 to i64
  ret i64 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.hamt*, align 8
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.hamt*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.KV, align 8
  %11 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %12 = load %class.hamt*, %class.hamt** %4, align 8
  %13 = load %class.c_d*, %class.c_d** %5, align 8
  %14 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %13)
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = and i64 %15, 15
  %17 = urem i64 %16, 7
  store i64 %17, i64* %7, align 8
  %18 = load i64, i64* %7, align 8
  %19 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %20 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %19, i64 0, i64 %18
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %2
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:26                                      ; preds = %2
  %27 = load i64, i64* %7, align 8
  %28 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %29 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %28, i64 0, i64 %27
  %30 = getelementptr inbounds %class.KV, %class.KV* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %61

; <label>:35                                      ; preds = %26
  %36 = load i64, i64* %7, align 8
  %37 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %38 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %37, i64 0, i64 %36
  %39 = getelementptr inbounds %class.KV, %class.KV* %38, i32 0, i32 0
  %40 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %39 to %class.c_d**
  %41 = load %class.c_d*, %class.c_d** %40, align 8
  %42 = load %class.c_d*, %class.c_d** %5, align 8
  %43 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %41, %class.c_d* dereferenceable(8) %42)
  br i1 %43, label %44, label %60

; <label>:44                                      ; preds = %35
  %45 = call i8* @malloc(i64 120)
  %46 = bitcast i8* %45 to %class.hamt*
  store %class.hamt* %46, %class.hamt** %8, align 8
  %47 = load %class.hamt*, %class.hamt** %8, align 8
  %48 = bitcast %class.hamt* %47 to i8*
  %49 = bitcast %class.hamt* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 120, i32 8, i1 false)
  %50 = load i64, i64* %7, align 8
  %51 = load %class.hamt*, %class.hamt** %8, align 8
  %52 = getelementptr inbounds %class.hamt, %class.hamt* %51, i64 %50
  %53 = bitcast %class.hamt* %52 to i8*
  %54 = bitcast i8* %53 to %class.KV*
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %54, %class.c_d* null, %class.c_d* null)
  %55 = load %class.hamt*, %class.hamt** %8, align 8
  %56 = getelementptr inbounds %class.hamt, %class.hamt* %55, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, -1
  store i64 %58, i64* %56, align 8
  %59 = load %class.hamt*, %class.hamt** %8, align 8
  store %class.hamt* %59, %class.hamt** %3, align 8
  br label %91

; <label>:60                                      ; preds = %35
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:61                                      ; preds = %26
  %62 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %9, align 8
  %64 = load i64, i64* %7, align 8
  %65 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %66 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %65, i64 0, i64 %64
  %67 = load i64, i64* %6, align 8
  %68 = lshr i64 %67, 4
  %69 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE12remove_innerERKS1_yPKS0_Py(%class.KV* sret %10, %class.KV* dereferenceable(16) %66, i64 %68, %class.c_d* %69, i64* %9)
  %70 = load i64, i64* %7, align 8
  %71 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %72 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %71, i64 0, i64 %70
  %73 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj0EEeqERKS1_(%class.KV* %10, %class.KV* dereferenceable(16) %72)
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %61
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:75                                      ; preds = %61
  %76 = call i8* @malloc(i64 120)
  %77 = bitcast i8* %76 to %class.hamt*
  store %class.hamt* %77, %class.hamt** %11, align 8
  %78 = load %class.hamt*, %class.hamt** %11, align 8
  %79 = bitcast %class.hamt* %78 to i8*
  %80 = bitcast %class.hamt* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 120, i32 8, i1 false)
  %81 = load i64, i64* %7, align 8
  %82 = load %class.hamt*, %class.hamt** %11, align 8
  %83 = getelementptr inbounds %class.hamt, %class.hamt* %82, i32 0, i32 0
  %84 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %83, i64 0, i64 %81
  %85 = bitcast %class.KV* %84 to i8*
  %86 = bitcast i8* %85 to %class.KV*
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %86, %class.KV* dereferenceable(16) %10)
  %87 = load i64, i64* %9, align 8
  %88 = load %class.hamt*, %class.hamt** %11, align 8
  %89 = getelementptr inbounds %class.hamt, %class.hamt* %88, i32 0, i32 1
  store i64 %87, i64* %89, align 8
  %90 = load %class.hamt*, %class.hamt** %11, align 8
  store %class.hamt* %90, %class.hamt** %3, align 8
  br label %91

; <label>:91                                      ; preds = %75, %74, %60, %44, %25
  %92 = load %class.hamt*, %class.hamt** %3, align 8
  ret %class.hamt* %92
}

; Function Attrs: ssp uwtable
define i64 @prim_set() #0 {
  %1 = alloca %class.hamt*, align 8
  %2 = load i64, i64* @current_memory, align 8
  %3 = add i64 %2, 120
  store i64 %3, i64* @current_memory, align 8
  %4 = load i64, i64* @current_memory, align 8
  %5 = add i64 %4, 120
  %6 = icmp ugt i64 %5, 250000000
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %0
  %9 = call i8* @malloc(i64 120)
  %10 = bitcast i8* %9 to %class.hamt.1*
  %11 = bitcast %class.hamt.1* %10 to i8*
  %12 = bitcast i8* %11 to %class.hamt*
  call void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt* %12)
  store %class.hamt* %12, %class.hamt** %1, align 8
  %13 = load %class.hamt*, %class.hamt** %1, align 8
  %14 = ptrtoint %class.hamt* %13 to i64
  ret i64 %14
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45add(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* @current_memory, align 8
  %9 = add i64 %8, 16
  store i64 %9, i64* @current_memory, align 8
  %10 = load i64, i64* @current_memory, align 8
  %11 = add i64 %10, 16
  %12 = icmp ugt i64 %11, 250000000
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %2
  %15 = call i8* @malloc(i64 8)
  %16 = bitcast i8* %15 to %class.c_d*
  %17 = bitcast %class.c_d* %16 to i8*
  %18 = bitcast i8* %17 to %class.c_d*
  %19 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %18, i64 %19)
  store %class.c_d* %18, %class.c_d** %5, align 8
  %20 = call i8* @malloc(i64 8)
  %21 = bitcast i8* %20 to %class.c_d*
  %22 = bitcast %class.c_d* %21 to i8*
  %23 = bitcast i8* %22 to %class.c_d*
  %24 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %23, i64 %24)
  store %class.c_d* %23, %class.c_d** %6, align 8
  %25 = load i64, i64* %3, align 8
  %26 = inttoptr i64 %25 to %class.hamt*
  store %class.hamt* %26, %class.hamt** %7, align 8
  %27 = load %class.hamt*, %class.hamt** %7, align 8
  %28 = load %class.c_d*, %class.c_d** %5, align 8
  %29 = load %class.c_d*, %class.c_d** %6, align 8
  %30 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt* %27, %class.c_d* %28, %class.c_d* %29)
  %31 = ptrtoint %class.hamt* %30 to i64
  ret i64 %31
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45remove(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  store %class.hamt* %20, %class.hamt** %6, align 8
  %21 = load %class.hamt*, %class.hamt** %6, align 8
  %22 = load %class.c_d*, %class.c_d** %5, align 8
  %23 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt* %21, %class.c_d* %22)
  %24 = ptrtoint %class.hamt* %23 to i64
  ret i64 %24
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45member_63(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.hamt*, align 8
  %8 = alloca %class.c_d*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  store i64 %10, i64* @current_memory, align 8
  %11 = load i64, i64* @current_memory, align 8
  %12 = add i64 %11, 8
  %13 = icmp ugt i64 %12, 250000000
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %2
  %16 = call i8* @malloc(i64 8)
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = bitcast %class.c_d* %17 to i8*
  %19 = bitcast i8* %18 to %class.c_d*
  %20 = load i64, i64* %5, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %19, i64 %20)
  store %class.c_d* %19, %class.c_d** %6, align 8
  %21 = load i64, i64* %4, align 8
  %22 = inttoptr i64 %21 to %class.hamt*
  store %class.hamt* %22, %class.hamt** %7, align 8
  %23 = load %class.hamt*, %class.hamt** %7, align 8
  %24 = load %class.c_d*, %class.c_d** %6, align 8
  %25 = call %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt* %23, %class.c_d* %24)
  store %class.c_d* %25, %class.c_d** %8, align 8
  %26 = load %class.c_d*, %class.c_d** %8, align 8
  %27 = icmp eq %class.c_d* %26, null
  br i1 %27, label %28, label %29

; <label>:28                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %30

; <label>:29                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %30

; <label>:30                                      ; preds = %29, %28
  %31 = load i64, i64* %3, align 8
  ret i64 %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN3c_dC2Ey(%class.c_d*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca i64, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = getelementptr inbounds %class.c_d, %class.c_d* %5, i32 0, i32 0
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN4hamtI3c_dS0_EC2Ev(%class.hamt*) unnamed_addr #0 align 2 {
  %2 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %2, align 8
  %3 = load %class.hamt*, %class.hamt** %2, align 8
  %4 = getelementptr inbounds %class.hamt, %class.hamt* %3, i32 0, i32 0
  %5 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %4, i32 0, i32 0
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i64 7
  br label %7

; <label>:7                                       ; preds = %7, %1
  %8 = phi %class.KV* [ %5, %1 ], [ %9, %7 ]
  call void @_ZN2KVI3c_dS0_Lj0EEC1Ev(%class.KV* %8)
  %9 = getelementptr inbounds %class.KV, %class.KV* %8, i64 1
  %10 = icmp eq %class.KV* %9, %6
  br i1 %10, label %11, label %7

; <label>:11                                      ; preds = %7
  %12 = getelementptr inbounds %class.hamt, %class.hamt* %3, i32 0, i32 1
  store i64 0, i64* %12, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1Ev(%class.KV*) unnamed_addr #0 align 2 {
  %2 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %2, align 8
  %3 = load %class.KV*, %class.KV** %2, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2Ev(%class.KV* %3)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2Ev(%class.KV*) unnamed_addr #0 align 2 {
  %2 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %2, align 8
  %3 = load %class.KV*, %class.KV** %2, align 8
  %4 = getelementptr inbounds %class.KV, %class.KV* %3, i32 0, i32 0
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"* %4, i64 0)
  %5 = getelementptr inbounds %class.KV, %class.KV* %3, i32 0, i32 1
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.c_d* null)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC2Ey(%"union.KV<c_d, c_d, 0>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC2Ey(%"union.KV<c_d, c_d, 0>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 0>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i64 @_ZNK3c_d4hashEv(%class.c_d*) #3 align 2 {
  %2 = alloca %class.c_d*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store %class.c_d* %0, %class.c_d** %2, align 8
  %6 = load %class.c_d*, %class.c_d** %2, align 8
  %7 = bitcast %class.c_d* %6 to i8*
  store i8* %7, i8** %3, align 8
  store i64 -3750763034362895579, i64* %4, align 8
  store i32 0, i32* %5, align 4
  br label %8

; <label>:8                                       ; preds = %28, %1
  %9 = load i32, i32* %5, align 4
  %10 = zext i32 %9 to i64
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %12, label %30

; <label>:12                                      ; preds = %8
  %13 = load i64, i64* %4, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = xor i64 %13, %16
  store i64 %17, i64* %4, align 8
  %18 = load i64, i64* %4, align 8
  %19 = mul i64 %18, 1099511628211
  store i64 %19, i64* %4, align 8
  br label %20

; <label>:20                                      ; preds = %12
  %21 = load i32, i32* %5, align 4
  %22 = add i32 %21, 1
  store i32 %22, i32* %5, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %20
  %25 = load i8*, i8** %3, align 8
  %26 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %26, i8** %3, align 8
  %27 = icmp ne i8* %26, null
  br label %28

; <label>:28                                      ; preds = %24, %20
  %29 = phi i1 [ false, %20 ], [ %27, %24 ]
  br label %8

; <label>:30                                      ; preds = %8
  %31 = load i64, i64* %4, align 8
  ret i64 %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK3c_deqERKS_(%class.c_d*, %class.c_d* dereferenceable(8)) #3 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.c_d*, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  %7 = getelementptr inbounds %class.c_d, %class.c_d* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.c_d, %class.c_d* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  ret i1 %11
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj0EE10inner_findERKS1_yPKS0_(%class.KV* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.0*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV* %0, %class.KV** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV*, %class.KV** %5, align 8
  %17 = getelementptr inbounds %class.KV, %class.KV* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %17 to %class.KV.0**
  %19 = load %class.KV.0*, %class.KV.0** %18, align 8
  store %class.KV.0* %19, %class.KV.0** %9, align 8
  %20 = load %class.KV*, %class.KV** %5, align 8
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.0*, %class.KV.0** %9, align 8
  %44 = getelementptr inbounds %class.KV.0, %class.KV.0* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.0, %class.KV.0* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.0*, %class.KV.0** %9, align 8
  %54 = getelementptr inbounds %class.KV.0, %class.KV.0* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.0, %class.KV.0* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.0*, %class.KV.0** %9, align 8
  %64 = getelementptr inbounds %class.KV.0, %class.KV.0* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.0*, %class.KV.0** %9, align 8
  %73 = getelementptr inbounds %class.KV.0, %class.KV.0* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj1EE10inner_findERKS1_yPKS0_(%class.KV.0* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: nounwind readnone
declare i64 @llvm.ctpop.i64(i64) #5

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj1EE10inner_findERKS1_yPKS0_(%class.KV.0* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.0*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.2*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.0* %0, %class.KV.0** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.0*, %class.KV.0** %5, align 8
  %17 = getelementptr inbounds %class.KV.0, %class.KV.0* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %17 to %class.KV.2**
  %19 = load %class.KV.2*, %class.KV.2** %18, align 8
  store %class.KV.2* %19, %class.KV.2** %9, align 8
  %20 = load %class.KV.0*, %class.KV.0** %5, align 8
  %21 = getelementptr inbounds %class.KV.0, %class.KV.0* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.2*, %class.KV.2** %9, align 8
  %44 = getelementptr inbounds %class.KV.2, %class.KV.2* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.2, %class.KV.2* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.2*, %class.KV.2** %9, align 8
  %54 = getelementptr inbounds %class.KV.2, %class.KV.2* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.2, %class.KV.2* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.2*, %class.KV.2** %9, align 8
  %64 = getelementptr inbounds %class.KV.2, %class.KV.2* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.2*, %class.KV.2** %9, align 8
  %73 = getelementptr inbounds %class.KV.2, %class.KV.2* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj2EE10inner_findERKS1_yPKS0_(%class.KV.2* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj2EE10inner_findERKS1_yPKS0_(%class.KV.2* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.2*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.3*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.2* %0, %class.KV.2** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.2*, %class.KV.2** %5, align 8
  %17 = getelementptr inbounds %class.KV.2, %class.KV.2* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %17 to %class.KV.3**
  %19 = load %class.KV.3*, %class.KV.3** %18, align 8
  store %class.KV.3* %19, %class.KV.3** %9, align 8
  %20 = load %class.KV.2*, %class.KV.2** %5, align 8
  %21 = getelementptr inbounds %class.KV.2, %class.KV.2* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.3*, %class.KV.3** %9, align 8
  %44 = getelementptr inbounds %class.KV.3, %class.KV.3* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.3, %class.KV.3* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.3*, %class.KV.3** %9, align 8
  %54 = getelementptr inbounds %class.KV.3, %class.KV.3* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.3, %class.KV.3* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.3*, %class.KV.3** %9, align 8
  %64 = getelementptr inbounds %class.KV.3, %class.KV.3* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.3*, %class.KV.3** %9, align 8
  %73 = getelementptr inbounds %class.KV.3, %class.KV.3* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj3EE10inner_findERKS1_yPKS0_(%class.KV.3* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj3EE10inner_findERKS1_yPKS0_(%class.KV.3* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.3*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.4*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.3* %0, %class.KV.3** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.3*, %class.KV.3** %5, align 8
  %17 = getelementptr inbounds %class.KV.3, %class.KV.3* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %17 to %class.KV.4**
  %19 = load %class.KV.4*, %class.KV.4** %18, align 8
  store %class.KV.4* %19, %class.KV.4** %9, align 8
  %20 = load %class.KV.3*, %class.KV.3** %5, align 8
  %21 = getelementptr inbounds %class.KV.3, %class.KV.3* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.4*, %class.KV.4** %9, align 8
  %44 = getelementptr inbounds %class.KV.4, %class.KV.4* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.4, %class.KV.4* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.4*, %class.KV.4** %9, align 8
  %54 = getelementptr inbounds %class.KV.4, %class.KV.4* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.4, %class.KV.4* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.4*, %class.KV.4** %9, align 8
  %64 = getelementptr inbounds %class.KV.4, %class.KV.4* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.4*, %class.KV.4** %9, align 8
  %73 = getelementptr inbounds %class.KV.4, %class.KV.4* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj4EE10inner_findERKS1_yPKS0_(%class.KV.4* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj4EE10inner_findERKS1_yPKS0_(%class.KV.4* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.4*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.5*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.4* %0, %class.KV.4** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.4*, %class.KV.4** %5, align 8
  %17 = getelementptr inbounds %class.KV.4, %class.KV.4* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %17 to %class.KV.5**
  %19 = load %class.KV.5*, %class.KV.5** %18, align 8
  store %class.KV.5* %19, %class.KV.5** %9, align 8
  %20 = load %class.KV.4*, %class.KV.4** %5, align 8
  %21 = getelementptr inbounds %class.KV.4, %class.KV.4* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.5*, %class.KV.5** %9, align 8
  %44 = getelementptr inbounds %class.KV.5, %class.KV.5* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.5, %class.KV.5* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.5*, %class.KV.5** %9, align 8
  %54 = getelementptr inbounds %class.KV.5, %class.KV.5* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.5, %class.KV.5* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.5*, %class.KV.5** %9, align 8
  %64 = getelementptr inbounds %class.KV.5, %class.KV.5* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.5*, %class.KV.5** %9, align 8
  %73 = getelementptr inbounds %class.KV.5, %class.KV.5* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj5EE10inner_findERKS1_yPKS0_(%class.KV.5* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj5EE10inner_findERKS1_yPKS0_(%class.KV.5* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.5*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.6*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.5* %0, %class.KV.5** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.5*, %class.KV.5** %5, align 8
  %17 = getelementptr inbounds %class.KV.5, %class.KV.5* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %17 to %class.KV.6**
  %19 = load %class.KV.6*, %class.KV.6** %18, align 8
  store %class.KV.6* %19, %class.KV.6** %9, align 8
  %20 = load %class.KV.5*, %class.KV.5** %5, align 8
  %21 = getelementptr inbounds %class.KV.5, %class.KV.5* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.6*, %class.KV.6** %9, align 8
  %44 = getelementptr inbounds %class.KV.6, %class.KV.6* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.6, %class.KV.6* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.6*, %class.KV.6** %9, align 8
  %54 = getelementptr inbounds %class.KV.6, %class.KV.6* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.6, %class.KV.6* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.6*, %class.KV.6** %9, align 8
  %64 = getelementptr inbounds %class.KV.6, %class.KV.6* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.6*, %class.KV.6** %9, align 8
  %73 = getelementptr inbounds %class.KV.6, %class.KV.6* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj6EE10inner_findERKS1_yPKS0_(%class.KV.6* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj6EE10inner_findERKS1_yPKS0_(%class.KV.6* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.6*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.7*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.6* %0, %class.KV.6** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.6*, %class.KV.6** %5, align 8
  %17 = getelementptr inbounds %class.KV.6, %class.KV.6* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %17 to %class.KV.7**
  %19 = load %class.KV.7*, %class.KV.7** %18, align 8
  store %class.KV.7* %19, %class.KV.7** %9, align 8
  %20 = load %class.KV.6*, %class.KV.6** %5, align 8
  %21 = getelementptr inbounds %class.KV.6, %class.KV.6* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.7*, %class.KV.7** %9, align 8
  %44 = getelementptr inbounds %class.KV.7, %class.KV.7* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.7, %class.KV.7* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.7*, %class.KV.7** %9, align 8
  %54 = getelementptr inbounds %class.KV.7, %class.KV.7* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.7, %class.KV.7* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.7*, %class.KV.7** %9, align 8
  %64 = getelementptr inbounds %class.KV.7, %class.KV.7* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.7*, %class.KV.7** %9, align 8
  %73 = getelementptr inbounds %class.KV.7, %class.KV.7* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj7EE10inner_findERKS1_yPKS0_(%class.KV.7* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj7EE10inner_findERKS1_yPKS0_(%class.KV.7* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.7*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.7* %0, %class.KV.7** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.7*, %class.KV.7** %5, align 8
  %17 = getelementptr inbounds %class.KV.7, %class.KV.7* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %17 to %class.KV.8**
  %19 = load %class.KV.8*, %class.KV.8** %18, align 8
  store %class.KV.8* %19, %class.KV.8** %9, align 8
  %20 = load %class.KV.7*, %class.KV.7** %5, align 8
  %21 = getelementptr inbounds %class.KV.7, %class.KV.7* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.8*, %class.KV.8** %9, align 8
  %44 = getelementptr inbounds %class.KV.8, %class.KV.8* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.8, %class.KV.8* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.8*, %class.KV.8** %9, align 8
  %54 = getelementptr inbounds %class.KV.8, %class.KV.8* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.8, %class.KV.8* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.8*, %class.KV.8** %9, align 8
  %64 = getelementptr inbounds %class.KV.8, %class.KV.8* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.8*, %class.KV.8** %9, align 8
  %73 = getelementptr inbounds %class.KV.8, %class.KV.8* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj8EE10inner_findERKS1_yPKS0_(%class.KV.8* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj8EE10inner_findERKS1_yPKS0_(%class.KV.8* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.9*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.8* %0, %class.KV.8** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.8*, %class.KV.8** %5, align 8
  %17 = getelementptr inbounds %class.KV.8, %class.KV.8* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %17 to %class.KV.9**
  %19 = load %class.KV.9*, %class.KV.9** %18, align 8
  store %class.KV.9* %19, %class.KV.9** %9, align 8
  %20 = load %class.KV.8*, %class.KV.8** %5, align 8
  %21 = getelementptr inbounds %class.KV.8, %class.KV.8* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.9*, %class.KV.9** %9, align 8
  %44 = getelementptr inbounds %class.KV.9, %class.KV.9* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.9, %class.KV.9* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.9*, %class.KV.9** %9, align 8
  %54 = getelementptr inbounds %class.KV.9, %class.KV.9* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.9, %class.KV.9* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.9*, %class.KV.9** %9, align 8
  %64 = getelementptr inbounds %class.KV.9, %class.KV.9* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.9*, %class.KV.9** %9, align 8
  %73 = getelementptr inbounds %class.KV.9, %class.KV.9* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj9EE10inner_findERKS1_yPKS0_(%class.KV.9* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj9EE10inner_findERKS1_yPKS0_(%class.KV.9* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.9*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.10*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.9* %0, %class.KV.9** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.9*, %class.KV.9** %5, align 8
  %17 = getelementptr inbounds %class.KV.9, %class.KV.9* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %17 to %class.KV.10**
  %19 = load %class.KV.10*, %class.KV.10** %18, align 8
  store %class.KV.10* %19, %class.KV.10** %9, align 8
  %20 = load %class.KV.9*, %class.KV.9** %5, align 8
  %21 = getelementptr inbounds %class.KV.9, %class.KV.9* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.10*, %class.KV.10** %9, align 8
  %44 = getelementptr inbounds %class.KV.10, %class.KV.10* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.10, %class.KV.10* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.10*, %class.KV.10** %9, align 8
  %54 = getelementptr inbounds %class.KV.10, %class.KV.10* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.10, %class.KV.10* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.10*, %class.KV.10** %9, align 8
  %64 = getelementptr inbounds %class.KV.10, %class.KV.10* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.10, %class.KV.10* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.10*, %class.KV.10** %9, align 8
  %73 = getelementptr inbounds %class.KV.10, %class.KV.10* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj10EE10inner_findERKS1_yPKS0_(%class.KV.10* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj10EE10inner_findERKS1_yPKS0_(%class.KV.10* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.10*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %8 = load %class.KV.10*, %class.KV.10** %5, align 8
  %9 = getelementptr inbounds %class.KV.10, %class.KV.10* %8, i32 0, i32 1
  %10 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %9 to %class.LL**
  %11 = load %class.LL*, %class.LL** %10, align 8
  %12 = icmp ne %class.LL* %11, null
  br i1 %12, label %13, label %20

; <label>:13                                      ; preds = %3
  %14 = load %class.KV.10*, %class.KV.10** %5, align 8
  %15 = getelementptr inbounds %class.KV.10, %class.KV.10* %14, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %15 to %class.LL**
  %17 = load %class.LL*, %class.LL** %16, align 8
  %18 = load %class.c_d*, %class.c_d** %7, align 8
  %19 = call %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL* %17, %class.c_d* %18)
  store %class.c_d* %19, %class.c_d** %4, align 8
  br label %21

; <label>:20                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %21

; <label>:21                                      ; preds = %20, %13
  %22 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %22
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.LL*, align 8
  %5 = alloca %class.c_d*, align 8
  store %class.LL* %0, %class.LL** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %6 = load %class.LL*, %class.LL** %4, align 8
  %7 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 0
  %8 = load %class.c_d*, %class.c_d** %7, align 8
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  %10 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %8, %class.c_d* dereferenceable(8) %9)
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %2
  %12 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 1
  %13 = load %class.c_d*, %class.c_d** %12, align 8
  store %class.c_d* %13, %class.c_d** %3, align 8
  br label %24

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 2
  %16 = load %class.LL*, %class.LL** %15, align 8
  %17 = icmp ne %class.LL* %16, null
  br i1 %17, label %18, label %23

; <label>:18                                      ; preds = %14
  %19 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 2
  %20 = load %class.LL*, %class.LL** %19, align 8
  %21 = load %class.c_d*, %class.c_d** %5, align 8
  %22 = call %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL* %20, %class.c_d* %21)
  store %class.c_d* %22, %class.c_d** %3, align 8
  br label %24

; <label>:23                                      ; preds = %14
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %24

; <label>:24                                      ; preds = %23, %18, %11
  %25 = load %class.c_d*, %class.c_d** %3, align 8
  ret %class.c_d* %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2EPKS0_S3_(%class.KV* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.0, align 8
  %17 = alloca %class.KV.0*, align 8
  %18 = alloca %class.KV.0*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.0*
  store %class.KV.0* %40, %class.KV.0** %17, align 8
  %41 = load %class.KV.0*, %class.KV.0** %17, align 8
  %42 = getelementptr inbounds %class.KV.0, %class.KV.0* %41, i64 0
  %43 = bitcast %class.KV.0* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.0*
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %44, %class.KV.0* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.0*, %class.KV.0** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %49, %class.KV.0* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.0*
  store %class.KV.0* %53, %class.KV.0** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.0*, %class.KV.0** %18, align 8
  %59 = getelementptr inbounds %class.KV.0, %class.KV.0* %58, i64 0
  %60 = bitcast %class.KV.0* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.0*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.0*, %class.KV.0** %18, align 8
  %65 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i64 1
  %66 = bitcast %class.KV.0* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.0*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.0*, %class.KV.0** %18, align 8
  %72 = getelementptr inbounds %class.KV.0, %class.KV.0* %71, i64 0
  %73 = bitcast %class.KV.0* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.0*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.0*, %class.KV.0** %18, align 8
  %78 = getelementptr inbounds %class.KV.0, %class.KV.0* %77, i64 1
  %79 = bitcast %class.KV.0* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.0*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.0*, %class.KV.0** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %92, %class.KV.0* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV* noalias sret, %class.KV* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.0*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.0*, align 8
  %19 = alloca %class.KV.0, align 8
  %20 = alloca %class.KV.0, align 8
  %21 = alloca %class.KV.0*, align 8
  %22 = alloca %class.KV.0, align 8
  %23 = alloca %class.KV.0*, align 8
  %24 = alloca %class.KV.0*, align 8
  store %class.KV* %1, %class.KV** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV*, %class.KV** %7, align 8
  %26 = getelementptr inbounds %class.KV, %class.KV* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %26 to %class.KV.0**
  %28 = load %class.KV.0*, %class.KV.0** %27, align 8
  store %class.KV.0* %28, %class.KV.0** %12, align 8
  %29 = load %class.KV*, %class.KV** %7, align 8
  %30 = getelementptr inbounds %class.KV, %class.KV* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.0*, %class.KV.0** %12, align 8
  %62 = getelementptr inbounds %class.KV.0, %class.KV.0* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.0, %class.KV.0* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.0*, %class.KV.0** %12, align 8
  %72 = getelementptr inbounds %class.KV.0, %class.KV.0* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.0, %class.KV.0* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.0*, %class.KV.0** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %79, i32 %80, i32 %81, %class.KV.0* dereferenceable(16) %19)
  store %class.KV.0* %84, %class.KV.0** %18, align 8
  %85 = load %class.KV*, %class.KV** %7, align 8
  %86 = getelementptr inbounds %class.KV, %class.KV* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.0*, %class.KV.0** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %88, %class.KV.0* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.0*, %class.KV.0** %12, align 8
  %97 = getelementptr inbounds %class.KV.0, %class.KV.0* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.0, %class.KV.0* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 10
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.0*, %class.KV.0** %12, align 8
  %106 = getelementptr inbounds %class.KV.0, %class.KV.0* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.0, %class.KV.0* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.0*, %class.KV.0** %12, align 8
  %113 = getelementptr inbounds %class.KV.0, %class.KV.0* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.0, %class.KV.0* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.0*, %class.KV.0** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %121, i32 %122, i32 %123, %class.KV.0* dereferenceable(16) %20)
  store %class.KV.0* %124, %class.KV.0** %21, align 8
  %125 = load %class.KV*, %class.KV** %7, align 8
  %126 = getelementptr inbounds %class.KV, %class.KV* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.0*, %class.KV.0** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %128, %class.KV.0* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.0*, %class.KV.0** %12, align 8
  %134 = getelementptr inbounds %class.KV.0, %class.KV.0* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.0* sret %22, %class.KV.0* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.0*, %class.KV.0** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %140, i32 %141, i32 %142, %class.KV.0* dereferenceable(16) %22)
  store %class.KV.0* %143, %class.KV.0** %23, align 8
  %144 = load %class.KV*, %class.KV** %7, align 8
  %145 = getelementptr inbounds %class.KV, %class.KV* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.0*, %class.KV.0** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %147, %class.KV.0* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.0*
  store %class.KV.0* %158, %class.KV.0** %24, align 8
  %159 = load %class.KV.0*, %class.KV.0** %24, align 8
  %160 = bitcast %class.KV.0* %159 to i8*
  %161 = load %class.KV.0*, %class.KV.0** %12, align 8
  %162 = bitcast %class.KV.0* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.0*, %class.KV.0** %24, align 8
  %170 = getelementptr inbounds %class.KV.0, %class.KV.0* %169, i64 %168
  %171 = bitcast %class.KV.0* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.0*, %class.KV.0** %12, align 8
  %175 = getelementptr inbounds %class.KV.0, %class.KV.0* %174, i64 %173
  %176 = bitcast %class.KV.0* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.0*, %class.KV.0** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.0, %class.KV.0* %182, i64 %184
  %186 = bitcast %class.KV.0* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.0*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.0*, %class.KV.0** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %196, %class.KV.0* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2EPKS0_S3_(%class.KV*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 0>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 0>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 0>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 0>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.2, align 8
  %17 = alloca %class.KV.2*, align 8
  %18 = alloca %class.KV.2*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.2*
  store %class.KV.2* %40, %class.KV.2** %17, align 8
  %41 = load %class.KV.2*, %class.KV.2** %17, align 8
  %42 = getelementptr inbounds %class.KV.2, %class.KV.2* %41, i64 0
  %43 = bitcast %class.KV.2* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.2*
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %44, %class.KV.2* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.2*, %class.KV.2** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %49, %class.KV.2* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.2*
  store %class.KV.2* %53, %class.KV.2** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.2*, %class.KV.2** %18, align 8
  %59 = getelementptr inbounds %class.KV.2, %class.KV.2* %58, i64 0
  %60 = bitcast %class.KV.2* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.2*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.2*, %class.KV.2** %18, align 8
  %65 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i64 1
  %66 = bitcast %class.KV.2* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.2*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.2*, %class.KV.2** %18, align 8
  %72 = getelementptr inbounds %class.KV.2, %class.KV.2* %71, i64 0
  %73 = bitcast %class.KV.2* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.2*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.2*, %class.KV.2** %18, align 8
  %78 = getelementptr inbounds %class.KV.2, %class.KV.2* %77, i64 1
  %79 = bitcast %class.KV.2* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.2*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.2*, %class.KV.2** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %92, %class.KV.2* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = load %class.KV.0*, %class.KV.0** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2ERKS1_(%class.KV.0* %5, %class.KV.0* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV*, i64, %class.KV.0*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.0*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.0* %2, %class.KV.0** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2EyPKS_IS0_S0_Lj1EE(%class.KV* %7, i64 %8, %class.KV.0* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.3, align 8
  %17 = alloca %class.KV.3*, align 8
  %18 = alloca %class.KV.3*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.3*
  store %class.KV.3* %40, %class.KV.3** %17, align 8
  %41 = load %class.KV.3*, %class.KV.3** %17, align 8
  %42 = getelementptr inbounds %class.KV.3, %class.KV.3* %41, i64 0
  %43 = bitcast %class.KV.3* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.3*
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %44, %class.KV.3* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.3*, %class.KV.3** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %49, %class.KV.3* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.3*
  store %class.KV.3* %53, %class.KV.3** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.3*, %class.KV.3** %18, align 8
  %59 = getelementptr inbounds %class.KV.3, %class.KV.3* %58, i64 0
  %60 = bitcast %class.KV.3* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.3*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.3*, %class.KV.3** %18, align 8
  %65 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i64 1
  %66 = bitcast %class.KV.3* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.3*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.3*, %class.KV.3** %18, align 8
  %72 = getelementptr inbounds %class.KV.3, %class.KV.3* %71, i64 0
  %73 = bitcast %class.KV.3* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.3*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.3*, %class.KV.3** %18, align 8
  %78 = getelementptr inbounds %class.KV.3, %class.KV.3* %77, i64 1
  %79 = bitcast %class.KV.3* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.3*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.3*, %class.KV.3** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %92, %class.KV.3* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = load %class.KV.2*, %class.KV.2** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2ERKS1_(%class.KV.2* %5, %class.KV.2* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0*, i64, %class.KV.2*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.2*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.2* %2, %class.KV.2** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2EyPKS_IS0_S0_Lj2EE(%class.KV.0* %7, i64 %8, %class.KV.2* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2EPKS0_S3_(%class.KV.2* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.4, align 8
  %17 = alloca %class.KV.4*, align 8
  %18 = alloca %class.KV.4*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.4*
  store %class.KV.4* %40, %class.KV.4** %17, align 8
  %41 = load %class.KV.4*, %class.KV.4** %17, align 8
  %42 = getelementptr inbounds %class.KV.4, %class.KV.4* %41, i64 0
  %43 = bitcast %class.KV.4* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.4*
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %44, %class.KV.4* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.4*, %class.KV.4** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %49, %class.KV.4* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.4*
  store %class.KV.4* %53, %class.KV.4** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.4*, %class.KV.4** %18, align 8
  %59 = getelementptr inbounds %class.KV.4, %class.KV.4* %58, i64 0
  %60 = bitcast %class.KV.4* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.4*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.4*, %class.KV.4** %18, align 8
  %65 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i64 1
  %66 = bitcast %class.KV.4* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.4*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.4*, %class.KV.4** %18, align 8
  %72 = getelementptr inbounds %class.KV.4, %class.KV.4* %71, i64 0
  %73 = bitcast %class.KV.4* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.4*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.4*, %class.KV.4** %18, align 8
  %78 = getelementptr inbounds %class.KV.4, %class.KV.4* %77, i64 1
  %79 = bitcast %class.KV.4* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.4*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.4*, %class.KV.4** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %92, %class.KV.4* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = load %class.KV.3*, %class.KV.3** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2ERKS1_(%class.KV.3* %5, %class.KV.3* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2*, i64, %class.KV.3*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.3*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.3* %2, %class.KV.3** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2EyPKS_IS0_S0_Lj3EE(%class.KV.2* %7, i64 %8, %class.KV.3* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2EPKS0_S3_(%class.KV.3* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.5, align 8
  %17 = alloca %class.KV.5*, align 8
  %18 = alloca %class.KV.5*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.5*
  store %class.KV.5* %40, %class.KV.5** %17, align 8
  %41 = load %class.KV.5*, %class.KV.5** %17, align 8
  %42 = getelementptr inbounds %class.KV.5, %class.KV.5* %41, i64 0
  %43 = bitcast %class.KV.5* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.5*
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %44, %class.KV.5* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.5*, %class.KV.5** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %49, %class.KV.5* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.5*
  store %class.KV.5* %53, %class.KV.5** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.5*, %class.KV.5** %18, align 8
  %59 = getelementptr inbounds %class.KV.5, %class.KV.5* %58, i64 0
  %60 = bitcast %class.KV.5* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.5*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.5*, %class.KV.5** %18, align 8
  %65 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i64 1
  %66 = bitcast %class.KV.5* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.5*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.5*, %class.KV.5** %18, align 8
  %72 = getelementptr inbounds %class.KV.5, %class.KV.5* %71, i64 0
  %73 = bitcast %class.KV.5* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.5*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.5*, %class.KV.5** %18, align 8
  %78 = getelementptr inbounds %class.KV.5, %class.KV.5* %77, i64 1
  %79 = bitcast %class.KV.5* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.5*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.5*, %class.KV.5** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %92, %class.KV.5* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = load %class.KV.4*, %class.KV.4** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2ERKS1_(%class.KV.4* %5, %class.KV.4* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3*, i64, %class.KV.4*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.4*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.4* %2, %class.KV.4** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2EyPKS_IS0_S0_Lj4EE(%class.KV.3* %7, i64 %8, %class.KV.4* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2EPKS0_S3_(%class.KV.4* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.6, align 8
  %17 = alloca %class.KV.6*, align 8
  %18 = alloca %class.KV.6*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.6*
  store %class.KV.6* %40, %class.KV.6** %17, align 8
  %41 = load %class.KV.6*, %class.KV.6** %17, align 8
  %42 = getelementptr inbounds %class.KV.6, %class.KV.6* %41, i64 0
  %43 = bitcast %class.KV.6* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.6*
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %44, %class.KV.6* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.6*, %class.KV.6** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %49, %class.KV.6* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.6*
  store %class.KV.6* %53, %class.KV.6** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.6*, %class.KV.6** %18, align 8
  %59 = getelementptr inbounds %class.KV.6, %class.KV.6* %58, i64 0
  %60 = bitcast %class.KV.6* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.6*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.6*, %class.KV.6** %18, align 8
  %65 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i64 1
  %66 = bitcast %class.KV.6* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.6*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.6*, %class.KV.6** %18, align 8
  %72 = getelementptr inbounds %class.KV.6, %class.KV.6* %71, i64 0
  %73 = bitcast %class.KV.6* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.6*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.6*, %class.KV.6** %18, align 8
  %78 = getelementptr inbounds %class.KV.6, %class.KV.6* %77, i64 1
  %79 = bitcast %class.KV.6* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.6*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.6*, %class.KV.6** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %92, %class.KV.6* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = load %class.KV.5*, %class.KV.5** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2ERKS1_(%class.KV.5* %5, %class.KV.5* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4*, i64, %class.KV.5*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.5*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.5* %2, %class.KV.5** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2EyPKS_IS0_S0_Lj5EE(%class.KV.4* %7, i64 %8, %class.KV.5* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2EPKS0_S3_(%class.KV.5* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.7, align 8
  %17 = alloca %class.KV.7*, align 8
  %18 = alloca %class.KV.7*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.7*
  store %class.KV.7* %40, %class.KV.7** %17, align 8
  %41 = load %class.KV.7*, %class.KV.7** %17, align 8
  %42 = getelementptr inbounds %class.KV.7, %class.KV.7* %41, i64 0
  %43 = bitcast %class.KV.7* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.7*
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %44, %class.KV.7* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.7*, %class.KV.7** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %49, %class.KV.7* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.7*
  store %class.KV.7* %53, %class.KV.7** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.7*, %class.KV.7** %18, align 8
  %59 = getelementptr inbounds %class.KV.7, %class.KV.7* %58, i64 0
  %60 = bitcast %class.KV.7* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.7*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.7*, %class.KV.7** %18, align 8
  %65 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i64 1
  %66 = bitcast %class.KV.7* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.7*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.7*, %class.KV.7** %18, align 8
  %72 = getelementptr inbounds %class.KV.7, %class.KV.7* %71, i64 0
  %73 = bitcast %class.KV.7* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.7*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.7*, %class.KV.7** %18, align 8
  %78 = getelementptr inbounds %class.KV.7, %class.KV.7* %77, i64 1
  %79 = bitcast %class.KV.7* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.7*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.7*, %class.KV.7** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %92, %class.KV.7* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = load %class.KV.6*, %class.KV.6** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2ERKS1_(%class.KV.6* %5, %class.KV.6* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5*, i64, %class.KV.6*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.6*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.6* %2, %class.KV.6** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2EyPKS_IS0_S0_Lj6EE(%class.KV.5* %7, i64 %8, %class.KV.6* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2EPKS0_S3_(%class.KV.6* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.8, align 8
  %17 = alloca %class.KV.8*, align 8
  %18 = alloca %class.KV.8*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.8*
  store %class.KV.8* %40, %class.KV.8** %17, align 8
  %41 = load %class.KV.8*, %class.KV.8** %17, align 8
  %42 = getelementptr inbounds %class.KV.8, %class.KV.8* %41, i64 0
  %43 = bitcast %class.KV.8* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.8*
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %44, %class.KV.8* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.8*, %class.KV.8** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %49, %class.KV.8* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.8*
  store %class.KV.8* %53, %class.KV.8** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.8*, %class.KV.8** %18, align 8
  %59 = getelementptr inbounds %class.KV.8, %class.KV.8* %58, i64 0
  %60 = bitcast %class.KV.8* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.8*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.8*, %class.KV.8** %18, align 8
  %65 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i64 1
  %66 = bitcast %class.KV.8* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.8*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.8*, %class.KV.8** %18, align 8
  %72 = getelementptr inbounds %class.KV.8, %class.KV.8* %71, i64 0
  %73 = bitcast %class.KV.8* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.8*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.8*, %class.KV.8** %18, align 8
  %78 = getelementptr inbounds %class.KV.8, %class.KV.8* %77, i64 1
  %79 = bitcast %class.KV.8* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.8*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.8*, %class.KV.8** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %92, %class.KV.8* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = load %class.KV.7*, %class.KV.7** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2ERKS1_(%class.KV.7* %5, %class.KV.7* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6*, i64, %class.KV.7*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.7*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.7* %2, %class.KV.7** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2EyPKS_IS0_S0_Lj7EE(%class.KV.6* %7, i64 %8, %class.KV.7* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2EPKS0_S3_(%class.KV.7* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.9, align 8
  %17 = alloca %class.KV.9*, align 8
  %18 = alloca %class.KV.9*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.9*
  store %class.KV.9* %40, %class.KV.9** %17, align 8
  %41 = load %class.KV.9*, %class.KV.9** %17, align 8
  %42 = getelementptr inbounds %class.KV.9, %class.KV.9* %41, i64 0
  %43 = bitcast %class.KV.9* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.9*
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %44, %class.KV.9* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.9*, %class.KV.9** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %49, %class.KV.9* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.9*
  store %class.KV.9* %53, %class.KV.9** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.9*, %class.KV.9** %18, align 8
  %59 = getelementptr inbounds %class.KV.9, %class.KV.9* %58, i64 0
  %60 = bitcast %class.KV.9* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.9*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.9*, %class.KV.9** %18, align 8
  %65 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i64 1
  %66 = bitcast %class.KV.9* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.9*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.9*, %class.KV.9** %18, align 8
  %72 = getelementptr inbounds %class.KV.9, %class.KV.9* %71, i64 0
  %73 = bitcast %class.KV.9* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.9*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.9*, %class.KV.9** %18, align 8
  %78 = getelementptr inbounds %class.KV.9, %class.KV.9* %77, i64 1
  %79 = bitcast %class.KV.9* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.9*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.9*, %class.KV.9** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %92, %class.KV.9* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = load %class.KV.8*, %class.KV.8** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2ERKS1_(%class.KV.8* %5, %class.KV.8* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7*, i64, %class.KV.8*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.8*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.8* %2, %class.KV.8** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2EyPKS_IS0_S0_Lj8EE(%class.KV.7* %7, i64 %8, %class.KV.8* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2EPKS0_S3_(%class.KV.8* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.10, align 8
  %17 = alloca %class.KV.10*, align 8
  %18 = alloca %class.KV.10*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.10*
  store %class.KV.10* %40, %class.KV.10** %17, align 8
  %41 = load %class.KV.10*, %class.KV.10** %17, align 8
  %42 = getelementptr inbounds %class.KV.10, %class.KV.10* %41, i64 0
  %43 = bitcast %class.KV.10* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.10*
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %44, %class.KV.10* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.10*, %class.KV.10** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %49, %class.KV.10* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.10*
  store %class.KV.10* %53, %class.KV.10** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.10*, %class.KV.10** %18, align 8
  %59 = getelementptr inbounds %class.KV.10, %class.KV.10* %58, i64 0
  %60 = bitcast %class.KV.10* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.10*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.10*, %class.KV.10** %18, align 8
  %65 = getelementptr inbounds %class.KV.10, %class.KV.10* %64, i64 1
  %66 = bitcast %class.KV.10* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.10*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.10*, %class.KV.10** %18, align 8
  %72 = getelementptr inbounds %class.KV.10, %class.KV.10* %71, i64 0
  %73 = bitcast %class.KV.10* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.10*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.10*, %class.KV.10** %18, align 8
  %78 = getelementptr inbounds %class.KV.10, %class.KV.10* %77, i64 1
  %79 = bitcast %class.KV.10* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.10*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.10*, %class.KV.10** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %92, %class.KV.10* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = load %class.KV.9*, %class.KV.9** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2ERKS1_(%class.KV.9* %5, %class.KV.9* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8*, i64, %class.KV.9*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.9*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.9* %2, %class.KV.9** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2EyPKS_IS0_S0_Lj9EE(%class.KV.8* %7, i64 %8, %class.KV.9* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2EPKS0_S3_(%class.KV.9* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca %class.LL*, align 8
  %15 = alloca %class.LL*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %16 = call i8* @malloc(i64 24)
  %17 = bitcast i8* %16 to %class.LL*
  %18 = bitcast %class.LL* %17 to i8*
  %19 = bitcast i8* %18 to %class.LL*
  %20 = load %class.c_d*, %class.c_d** %9, align 8
  %21 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %19, %class.c_d* %20, %class.c_d* %21, %class.LL* null)
  store %class.LL* %19, %class.LL** %14, align 8
  %22 = call i8* @malloc(i64 24)
  %23 = bitcast i8* %22 to %class.LL*
  %24 = bitcast %class.LL* %23 to i8*
  %25 = bitcast i8* %24 to %class.LL*
  %26 = load %class.c_d*, %class.c_d** %12, align 8
  %27 = load %class.c_d*, %class.c_d** %13, align 8
  %28 = load %class.LL*, %class.LL** %14, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %25, %class.c_d* %26, %class.c_d* %27, %class.LL* %28)
  store %class.LL* %25, %class.LL** %15, align 8
  %29 = load %class.LL*, %class.LL** %15, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %29)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = load %class.KV.10*, %class.KV.10** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2ERKS1_(%class.KV.10* %5, %class.KV.10* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9*, i64, %class.KV.10*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.10*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.10* %2, %class.KV.10** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2EyPKS_IS0_S0_Lj10EE(%class.KV.9* %7, i64 %8, %class.KV.10* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2EPKS0_S3_(%class.KV.10* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL*, %class.c_d*, %class.c_d*, %class.LL*) unnamed_addr #0 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  store %class.LL* %3, %class.LL** %8, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = load %class.c_d*, %class.c_d** %6, align 8
  %11 = load %class.c_d*, %class.c_d** %7, align 8
  %12 = load %class.LL*, %class.LL** %8, align 8
  call void @_ZN2LLI3c_dS0_EC2EPKS0_S3_PKS1_(%class.LL* %9, %class.c_d* %10, %class.c_d* %11, %class.LL* %12)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10*, i64, %class.LL*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.LL*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.LL* %2, %class.LL** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.LL*, %class.LL** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2EyPK2LLIS0_S0_E(%class.KV.10* %7, i64 %8, %class.LL* %9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2LLI3c_dS0_EC2EPKS0_S3_PKS1_(%class.LL*, %class.c_d*, %class.c_d*, %class.LL*) unnamed_addr #3 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  store %class.LL* %3, %class.LL** %8, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  store %class.c_d* %11, %class.c_d** %10, align 8
  %12 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 1
  %13 = load %class.c_d*, %class.c_d** %7, align 8
  store %class.c_d* %13, %class.c_d** %12, align 8
  %14 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %15 = load %class.LL*, %class.LL** %8, align 8
  store %class.LL* %15, %class.LL** %14, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2EyPK2LLIS0_S0_E(%class.KV.10*, i64, %class.LL*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.LL*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.LL* %2, %class.LL** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC1Ey(%"union.KV<c_d, c_d, 10>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 1
  %11 = load %class.LL*, %class.LL** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"* %10, %class.LL* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC1Ey(%"union.KV<c_d, c_d, 10>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC2Ey(%"union.KV<c_d, c_d, 10>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"*, %class.LL*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.LL*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.LL* %1, %class.LL** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = load %class.LL*, %class.LL** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"* %5, %class.LL* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC2Ey(%"union.KV<c_d, c_d, 10>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"*, %class.LL*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.LL*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.LL* %1, %class.LL** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %5 to %class.LL**
  %7 = load %class.LL*, %class.LL** %4, align 8
  store %class.LL* %7, %class.LL** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2ERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 0
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 1
  %12 = load %class.KV.10*, %class.KV.10** %4, align 8
  %13 = getelementptr inbounds %class.KV.10, %class.KV.10* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2EyPKS_IS0_S0_Lj10EE(%class.KV.9*, i64, %class.KV.10*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.10*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.10* %2, %class.KV.10** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC1Ey(%"union.KV<c_d, c_d, 9>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 1
  %11 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"* %10, %class.KV.10* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC1Ey(%"union.KV<c_d, c_d, 9>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC2Ey(%"union.KV<c_d, c_d, 9>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"*, %class.KV.10*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = load %class.KV.10*, %class.KV.10** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"* %5, %class.KV.10* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC2Ey(%"union.KV<c_d, c_d, 9>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"*, %class.KV.10*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %5 to %class.KV.10**
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  store %class.KV.10* %7, %class.KV.10** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2EPKS0_S3_(%class.KV.10*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 10>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 10>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 10>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 10>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 10>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 10>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 10>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 10>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2ERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 0
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 1
  %12 = load %class.KV.9*, %class.KV.9** %4, align 8
  %13 = getelementptr inbounds %class.KV.9, %class.KV.9* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2EyPKS_IS0_S0_Lj9EE(%class.KV.8*, i64, %class.KV.9*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.9*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.9* %2, %class.KV.9** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC1Ey(%"union.KV<c_d, c_d, 8>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 1
  %11 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"* %10, %class.KV.9* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC1Ey(%"union.KV<c_d, c_d, 8>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC2Ey(%"union.KV<c_d, c_d, 8>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"*, %class.KV.9*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = load %class.KV.9*, %class.KV.9** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"* %5, %class.KV.9* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC2Ey(%"union.KV<c_d, c_d, 8>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"*, %class.KV.9*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %5 to %class.KV.9**
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  store %class.KV.9* %7, %class.KV.9** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2EPKS0_S3_(%class.KV.9*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 9>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 9>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 9>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 9>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 9>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 9>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 9>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 9>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2ERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 0
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 1
  %12 = load %class.KV.8*, %class.KV.8** %4, align 8
  %13 = getelementptr inbounds %class.KV.8, %class.KV.8* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2EyPKS_IS0_S0_Lj8EE(%class.KV.7*, i64, %class.KV.8*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.8*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.8* %2, %class.KV.8** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC1Ey(%"union.KV<c_d, c_d, 7>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 1
  %11 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"* %10, %class.KV.8* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC1Ey(%"union.KV<c_d, c_d, 7>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC2Ey(%"union.KV<c_d, c_d, 7>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"*, %class.KV.8*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = load %class.KV.8*, %class.KV.8** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"* %5, %class.KV.8* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC2Ey(%"union.KV<c_d, c_d, 7>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"*, %class.KV.8*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %5 to %class.KV.8**
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  store %class.KV.8* %7, %class.KV.8** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2EPKS0_S3_(%class.KV.8*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 8>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 8>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 8>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 8>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 8>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 8>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 8>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 8>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2ERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 0
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 1
  %12 = load %class.KV.7*, %class.KV.7** %4, align 8
  %13 = getelementptr inbounds %class.KV.7, %class.KV.7* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2EyPKS_IS0_S0_Lj7EE(%class.KV.6*, i64, %class.KV.7*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.7*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.7* %2, %class.KV.7** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC1Ey(%"union.KV<c_d, c_d, 6>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 1
  %11 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"* %10, %class.KV.7* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC1Ey(%"union.KV<c_d, c_d, 6>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC2Ey(%"union.KV<c_d, c_d, 6>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"*, %class.KV.7*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = load %class.KV.7*, %class.KV.7** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"* %5, %class.KV.7* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC2Ey(%"union.KV<c_d, c_d, 6>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"*, %class.KV.7*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %5 to %class.KV.7**
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  store %class.KV.7* %7, %class.KV.7** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2EPKS0_S3_(%class.KV.7*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 7>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 7>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 7>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 7>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 7>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 7>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 7>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 7>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2ERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 0
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 1
  %12 = load %class.KV.6*, %class.KV.6** %4, align 8
  %13 = getelementptr inbounds %class.KV.6, %class.KV.6* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2EyPKS_IS0_S0_Lj6EE(%class.KV.5*, i64, %class.KV.6*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.6*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.6* %2, %class.KV.6** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC1Ey(%"union.KV<c_d, c_d, 5>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 1
  %11 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"* %10, %class.KV.6* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC1Ey(%"union.KV<c_d, c_d, 5>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC2Ey(%"union.KV<c_d, c_d, 5>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"*, %class.KV.6*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = load %class.KV.6*, %class.KV.6** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"* %5, %class.KV.6* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC2Ey(%"union.KV<c_d, c_d, 5>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"*, %class.KV.6*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %5 to %class.KV.6**
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  store %class.KV.6* %7, %class.KV.6** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2EPKS0_S3_(%class.KV.6*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 6>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 6>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 6>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 6>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 6>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 6>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 6>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 6>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2ERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 0
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 1
  %12 = load %class.KV.5*, %class.KV.5** %4, align 8
  %13 = getelementptr inbounds %class.KV.5, %class.KV.5* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2EyPKS_IS0_S0_Lj5EE(%class.KV.4*, i64, %class.KV.5*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.5*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.5* %2, %class.KV.5** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC1Ey(%"union.KV<c_d, c_d, 4>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 1
  %11 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"* %10, %class.KV.5* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC1Ey(%"union.KV<c_d, c_d, 4>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC2Ey(%"union.KV<c_d, c_d, 4>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"*, %class.KV.5*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = load %class.KV.5*, %class.KV.5** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"* %5, %class.KV.5* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC2Ey(%"union.KV<c_d, c_d, 4>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"*, %class.KV.5*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %5 to %class.KV.5**
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  store %class.KV.5* %7, %class.KV.5** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2EPKS0_S3_(%class.KV.5*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 5>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 5>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 5>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 5>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 5>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 5>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 5>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 5>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2ERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 0
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 1
  %12 = load %class.KV.4*, %class.KV.4** %4, align 8
  %13 = getelementptr inbounds %class.KV.4, %class.KV.4* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2EyPKS_IS0_S0_Lj4EE(%class.KV.3*, i64, %class.KV.4*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.4*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.4* %2, %class.KV.4** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC1Ey(%"union.KV<c_d, c_d, 3>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 1
  %11 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"* %10, %class.KV.4* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC1Ey(%"union.KV<c_d, c_d, 3>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC2Ey(%"union.KV<c_d, c_d, 3>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"*, %class.KV.4*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = load %class.KV.4*, %class.KV.4** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"* %5, %class.KV.4* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC2Ey(%"union.KV<c_d, c_d, 3>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"*, %class.KV.4*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %5 to %class.KV.4**
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  store %class.KV.4* %7, %class.KV.4** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2EPKS0_S3_(%class.KV.4*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 4>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 4>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 4>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 4>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 4>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 4>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 4>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 4>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2ERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 0
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 1
  %12 = load %class.KV.3*, %class.KV.3** %4, align 8
  %13 = getelementptr inbounds %class.KV.3, %class.KV.3* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2EyPKS_IS0_S0_Lj3EE(%class.KV.2*, i64, %class.KV.3*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.3*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.3* %2, %class.KV.3** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC1Ey(%"union.KV<c_d, c_d, 2>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 1
  %11 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"* %10, %class.KV.3* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC1Ey(%"union.KV<c_d, c_d, 2>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC2Ey(%"union.KV<c_d, c_d, 2>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"*, %class.KV.3*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = load %class.KV.3*, %class.KV.3** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"* %5, %class.KV.3* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC2Ey(%"union.KV<c_d, c_d, 2>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"*, %class.KV.3*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %5 to %class.KV.3**
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  store %class.KV.3* %7, %class.KV.3** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2EPKS0_S3_(%class.KV.3*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 3>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 3>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 3>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 3>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 3>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 3>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 3>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 3>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2ERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 0
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 1
  %12 = load %class.KV.2*, %class.KV.2** %4, align 8
  %13 = getelementptr inbounds %class.KV.2, %class.KV.2* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2EyPKS_IS0_S0_Lj2EE(%class.KV.0*, i64, %class.KV.2*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.2*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.2* %2, %class.KV.2** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC1Ey(%"union.KV<c_d, c_d, 1>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 1
  %11 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"* %10, %class.KV.2* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC1Ey(%"union.KV<c_d, c_d, 1>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC2Ey(%"union.KV<c_d, c_d, 1>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"*, %class.KV.2*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = load %class.KV.2*, %class.KV.2** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"* %5, %class.KV.2* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC2Ey(%"union.KV<c_d, c_d, 1>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"*, %class.KV.2*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %5 to %class.KV.2**
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  store %class.KV.2* %7, %class.KV.2** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2EPKS0_S3_(%class.KV.2*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 2>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 2>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 2>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 2>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 2>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 2>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 2>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 2>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2ERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 0
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 1
  %12 = load %class.KV.0*, %class.KV.0** %4, align 8
  %13 = getelementptr inbounds %class.KV.0, %class.KV.0* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2EyPKS_IS0_S0_Lj1EE(%class.KV*, i64, %class.KV.0*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.0*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.0* %2, %class.KV.0** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 1
  %11 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"* %10, %class.KV.0* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"*, %class.KV.0*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = load %class.KV.0*, %class.KV.0** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.KV.0* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"*, %class.KV.0*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %5 to %class.KV.0**
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  store %class.KV.0* %7, %class.KV.0** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2EPKS0_S3_(%class.KV.0*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 1>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 1>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 1>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 1>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 1>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 1>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 1>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 1>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0*, i32, i32, %class.KV.0* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.0*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.0*, align 8
  %9 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.0* %3, %class.KV.0** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.0*
  store %class.KV.0* %14, %class.KV.0** %9, align 8
  %15 = load %class.KV.0*, %class.KV.0** %9, align 8
  %16 = bitcast %class.KV.0* %15 to i8*
  %17 = load %class.KV.0*, %class.KV.0** %5, align 8
  %18 = bitcast %class.KV.0* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.0*, %class.KV.0** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.0, %class.KV.0* %22, i64 %24
  %26 = bitcast %class.KV.0* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.0*
  %28 = load %class.KV.0*, %class.KV.0** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %27, %class.KV.0* dereferenceable(16) %28)
  %29 = load %class.KV.0*, %class.KV.0** %9, align 8
  ret %class.KV.0* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.0* noalias sret, %class.KV.0* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.0*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.2*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.2*, align 8
  %19 = alloca %class.KV.2, align 8
  %20 = alloca %class.KV.2, align 8
  %21 = alloca %class.KV.2*, align 8
  %22 = alloca %class.KV.2, align 8
  %23 = alloca %class.KV.2*, align 8
  %24 = alloca %class.KV.2*, align 8
  store %class.KV.0* %1, %class.KV.0** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.0*, %class.KV.0** %7, align 8
  %26 = getelementptr inbounds %class.KV.0, %class.KV.0* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %26 to %class.KV.2**
  %28 = load %class.KV.2*, %class.KV.2** %27, align 8
  store %class.KV.2* %28, %class.KV.2** %12, align 8
  %29 = load %class.KV.0*, %class.KV.0** %7, align 8
  %30 = getelementptr inbounds %class.KV.0, %class.KV.0* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.2*, %class.KV.2** %12, align 8
  %62 = getelementptr inbounds %class.KV.2, %class.KV.2* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.2, %class.KV.2* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.2*, %class.KV.2** %12, align 8
  %72 = getelementptr inbounds %class.KV.2, %class.KV.2* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.2, %class.KV.2* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.2*, %class.KV.2** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %79, i32 %80, i32 %81, %class.KV.2* dereferenceable(16) %19)
  store %class.KV.2* %84, %class.KV.2** %18, align 8
  %85 = load %class.KV.0*, %class.KV.0** %7, align 8
  %86 = getelementptr inbounds %class.KV.0, %class.KV.0* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.2*, %class.KV.2** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %88, %class.KV.2* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.2*, %class.KV.2** %12, align 8
  %97 = getelementptr inbounds %class.KV.2, %class.KV.2* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.2, %class.KV.2* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 16
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.2*, %class.KV.2** %12, align 8
  %106 = getelementptr inbounds %class.KV.2, %class.KV.2* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.2, %class.KV.2* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.2*, %class.KV.2** %12, align 8
  %113 = getelementptr inbounds %class.KV.2, %class.KV.2* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.2, %class.KV.2* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.2*, %class.KV.2** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %121, i32 %122, i32 %123, %class.KV.2* dereferenceable(16) %20)
  store %class.KV.2* %124, %class.KV.2** %21, align 8
  %125 = load %class.KV.0*, %class.KV.0** %7, align 8
  %126 = getelementptr inbounds %class.KV.0, %class.KV.0* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.2*, %class.KV.2** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %128, %class.KV.2* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.2*, %class.KV.2** %12, align 8
  %134 = getelementptr inbounds %class.KV.2, %class.KV.2* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.2* sret %22, %class.KV.2* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.2*, %class.KV.2** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %140, i32 %141, i32 %142, %class.KV.2* dereferenceable(16) %22)
  store %class.KV.2* %143, %class.KV.2** %23, align 8
  %144 = load %class.KV.0*, %class.KV.0** %7, align 8
  %145 = getelementptr inbounds %class.KV.0, %class.KV.0* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.2*, %class.KV.2** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %147, %class.KV.2* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.2*
  store %class.KV.2* %158, %class.KV.2** %24, align 8
  %159 = load %class.KV.2*, %class.KV.2** %24, align 8
  %160 = bitcast %class.KV.2* %159 to i8*
  %161 = load %class.KV.2*, %class.KV.2** %12, align 8
  %162 = bitcast %class.KV.2* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.2*, %class.KV.2** %24, align 8
  %170 = getelementptr inbounds %class.KV.2, %class.KV.2* %169, i64 %168
  %171 = bitcast %class.KV.2* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.2*, %class.KV.2** %12, align 8
  %175 = getelementptr inbounds %class.KV.2, %class.KV.2* %174, i64 %173
  %176 = bitcast %class.KV.2* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.2*, %class.KV.2** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.2, %class.KV.2* %182, i64 %184
  %186 = bitcast %class.KV.2* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.2*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.2*, %class.KV.2** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %196, %class.KV.2* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2*, i32, i32, %class.KV.2* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.2*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.2*, align 8
  %9 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.2* %3, %class.KV.2** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.2*
  store %class.KV.2* %14, %class.KV.2** %9, align 8
  %15 = load %class.KV.2*, %class.KV.2** %9, align 8
  %16 = bitcast %class.KV.2* %15 to i8*
  %17 = load %class.KV.2*, %class.KV.2** %5, align 8
  %18 = bitcast %class.KV.2* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.2*, %class.KV.2** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.2, %class.KV.2* %22, i64 %24
  %26 = bitcast %class.KV.2* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.2*
  %28 = load %class.KV.2*, %class.KV.2** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %27, %class.KV.2* dereferenceable(16) %28)
  %29 = load %class.KV.2*, %class.KV.2** %9, align 8
  ret %class.KV.2* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.2* noalias sret, %class.KV.2* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.2*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.3*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.3*, align 8
  %19 = alloca %class.KV.3, align 8
  %20 = alloca %class.KV.3, align 8
  %21 = alloca %class.KV.3*, align 8
  %22 = alloca %class.KV.3, align 8
  %23 = alloca %class.KV.3*, align 8
  %24 = alloca %class.KV.3*, align 8
  store %class.KV.2* %1, %class.KV.2** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.2*, %class.KV.2** %7, align 8
  %26 = getelementptr inbounds %class.KV.2, %class.KV.2* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %26 to %class.KV.3**
  %28 = load %class.KV.3*, %class.KV.3** %27, align 8
  store %class.KV.3* %28, %class.KV.3** %12, align 8
  %29 = load %class.KV.2*, %class.KV.2** %7, align 8
  %30 = getelementptr inbounds %class.KV.2, %class.KV.2* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.3*, %class.KV.3** %12, align 8
  %62 = getelementptr inbounds %class.KV.3, %class.KV.3* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.3, %class.KV.3* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.3*, %class.KV.3** %12, align 8
  %72 = getelementptr inbounds %class.KV.3, %class.KV.3* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.3, %class.KV.3* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.3*, %class.KV.3** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %79, i32 %80, i32 %81, %class.KV.3* dereferenceable(16) %19)
  store %class.KV.3* %84, %class.KV.3** %18, align 8
  %85 = load %class.KV.2*, %class.KV.2** %7, align 8
  %86 = getelementptr inbounds %class.KV.2, %class.KV.2* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.3*, %class.KV.3** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %88, %class.KV.3* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.3*, %class.KV.3** %12, align 8
  %97 = getelementptr inbounds %class.KV.3, %class.KV.3* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.3, %class.KV.3* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 22
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.3*, %class.KV.3** %12, align 8
  %106 = getelementptr inbounds %class.KV.3, %class.KV.3* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.3, %class.KV.3* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.3*, %class.KV.3** %12, align 8
  %113 = getelementptr inbounds %class.KV.3, %class.KV.3* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.3, %class.KV.3* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.3*, %class.KV.3** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %121, i32 %122, i32 %123, %class.KV.3* dereferenceable(16) %20)
  store %class.KV.3* %124, %class.KV.3** %21, align 8
  %125 = load %class.KV.2*, %class.KV.2** %7, align 8
  %126 = getelementptr inbounds %class.KV.2, %class.KV.2* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.3*, %class.KV.3** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %128, %class.KV.3* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.3*, %class.KV.3** %12, align 8
  %134 = getelementptr inbounds %class.KV.3, %class.KV.3* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.3* sret %22, %class.KV.3* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.3*, %class.KV.3** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %140, i32 %141, i32 %142, %class.KV.3* dereferenceable(16) %22)
  store %class.KV.3* %143, %class.KV.3** %23, align 8
  %144 = load %class.KV.2*, %class.KV.2** %7, align 8
  %145 = getelementptr inbounds %class.KV.2, %class.KV.2* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.3*, %class.KV.3** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %147, %class.KV.3* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.3*
  store %class.KV.3* %158, %class.KV.3** %24, align 8
  %159 = load %class.KV.3*, %class.KV.3** %24, align 8
  %160 = bitcast %class.KV.3* %159 to i8*
  %161 = load %class.KV.3*, %class.KV.3** %12, align 8
  %162 = bitcast %class.KV.3* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.3*, %class.KV.3** %24, align 8
  %170 = getelementptr inbounds %class.KV.3, %class.KV.3* %169, i64 %168
  %171 = bitcast %class.KV.3* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.3*, %class.KV.3** %12, align 8
  %175 = getelementptr inbounds %class.KV.3, %class.KV.3* %174, i64 %173
  %176 = bitcast %class.KV.3* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.3*, %class.KV.3** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.3, %class.KV.3* %182, i64 %184
  %186 = bitcast %class.KV.3* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.3*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.3*, %class.KV.3** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %196, %class.KV.3* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3*, i32, i32, %class.KV.3* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.3*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.3*, align 8
  %9 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.3* %3, %class.KV.3** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.3*
  store %class.KV.3* %14, %class.KV.3** %9, align 8
  %15 = load %class.KV.3*, %class.KV.3** %9, align 8
  %16 = bitcast %class.KV.3* %15 to i8*
  %17 = load %class.KV.3*, %class.KV.3** %5, align 8
  %18 = bitcast %class.KV.3* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.3*, %class.KV.3** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.3, %class.KV.3* %22, i64 %24
  %26 = bitcast %class.KV.3* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.3*
  %28 = load %class.KV.3*, %class.KV.3** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %27, %class.KV.3* dereferenceable(16) %28)
  %29 = load %class.KV.3*, %class.KV.3** %9, align 8
  ret %class.KV.3* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.3* noalias sret, %class.KV.3* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.3*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.4*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.4*, align 8
  %19 = alloca %class.KV.4, align 8
  %20 = alloca %class.KV.4, align 8
  %21 = alloca %class.KV.4*, align 8
  %22 = alloca %class.KV.4, align 8
  %23 = alloca %class.KV.4*, align 8
  %24 = alloca %class.KV.4*, align 8
  store %class.KV.3* %1, %class.KV.3** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.3*, %class.KV.3** %7, align 8
  %26 = getelementptr inbounds %class.KV.3, %class.KV.3* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %26 to %class.KV.4**
  %28 = load %class.KV.4*, %class.KV.4** %27, align 8
  store %class.KV.4* %28, %class.KV.4** %12, align 8
  %29 = load %class.KV.3*, %class.KV.3** %7, align 8
  %30 = getelementptr inbounds %class.KV.3, %class.KV.3* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.4*, %class.KV.4** %12, align 8
  %62 = getelementptr inbounds %class.KV.4, %class.KV.4* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.4, %class.KV.4* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.4*, %class.KV.4** %12, align 8
  %72 = getelementptr inbounds %class.KV.4, %class.KV.4* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.4, %class.KV.4* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.4*, %class.KV.4** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %79, i32 %80, i32 %81, %class.KV.4* dereferenceable(16) %19)
  store %class.KV.4* %84, %class.KV.4** %18, align 8
  %85 = load %class.KV.3*, %class.KV.3** %7, align 8
  %86 = getelementptr inbounds %class.KV.3, %class.KV.3* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.4*, %class.KV.4** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %88, %class.KV.4* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.4*, %class.KV.4** %12, align 8
  %97 = getelementptr inbounds %class.KV.4, %class.KV.4* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.4, %class.KV.4* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 28
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.4*, %class.KV.4** %12, align 8
  %106 = getelementptr inbounds %class.KV.4, %class.KV.4* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.4, %class.KV.4* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.4*, %class.KV.4** %12, align 8
  %113 = getelementptr inbounds %class.KV.4, %class.KV.4* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.4, %class.KV.4* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.4*, %class.KV.4** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %121, i32 %122, i32 %123, %class.KV.4* dereferenceable(16) %20)
  store %class.KV.4* %124, %class.KV.4** %21, align 8
  %125 = load %class.KV.3*, %class.KV.3** %7, align 8
  %126 = getelementptr inbounds %class.KV.3, %class.KV.3* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.4*, %class.KV.4** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %128, %class.KV.4* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.4*, %class.KV.4** %12, align 8
  %134 = getelementptr inbounds %class.KV.4, %class.KV.4* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.4* sret %22, %class.KV.4* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.4*, %class.KV.4** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %140, i32 %141, i32 %142, %class.KV.4* dereferenceable(16) %22)
  store %class.KV.4* %143, %class.KV.4** %23, align 8
  %144 = load %class.KV.3*, %class.KV.3** %7, align 8
  %145 = getelementptr inbounds %class.KV.3, %class.KV.3* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.4*, %class.KV.4** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %147, %class.KV.4* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.4*
  store %class.KV.4* %158, %class.KV.4** %24, align 8
  %159 = load %class.KV.4*, %class.KV.4** %24, align 8
  %160 = bitcast %class.KV.4* %159 to i8*
  %161 = load %class.KV.4*, %class.KV.4** %12, align 8
  %162 = bitcast %class.KV.4* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.4*, %class.KV.4** %24, align 8
  %170 = getelementptr inbounds %class.KV.4, %class.KV.4* %169, i64 %168
  %171 = bitcast %class.KV.4* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.4*, %class.KV.4** %12, align 8
  %175 = getelementptr inbounds %class.KV.4, %class.KV.4* %174, i64 %173
  %176 = bitcast %class.KV.4* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.4*, %class.KV.4** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.4, %class.KV.4* %182, i64 %184
  %186 = bitcast %class.KV.4* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.4*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.4*, %class.KV.4** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %196, %class.KV.4* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4*, i32, i32, %class.KV.4* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.4*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.4*, align 8
  %9 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.4* %3, %class.KV.4** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.4*
  store %class.KV.4* %14, %class.KV.4** %9, align 8
  %15 = load %class.KV.4*, %class.KV.4** %9, align 8
  %16 = bitcast %class.KV.4* %15 to i8*
  %17 = load %class.KV.4*, %class.KV.4** %5, align 8
  %18 = bitcast %class.KV.4* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.4*, %class.KV.4** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.4, %class.KV.4* %22, i64 %24
  %26 = bitcast %class.KV.4* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.4*
  %28 = load %class.KV.4*, %class.KV.4** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %27, %class.KV.4* dereferenceable(16) %28)
  %29 = load %class.KV.4*, %class.KV.4** %9, align 8
  ret %class.KV.4* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.4* noalias sret, %class.KV.4* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.4*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.5*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.5*, align 8
  %19 = alloca %class.KV.5, align 8
  %20 = alloca %class.KV.5, align 8
  %21 = alloca %class.KV.5*, align 8
  %22 = alloca %class.KV.5, align 8
  %23 = alloca %class.KV.5*, align 8
  %24 = alloca %class.KV.5*, align 8
  store %class.KV.4* %1, %class.KV.4** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.4*, %class.KV.4** %7, align 8
  %26 = getelementptr inbounds %class.KV.4, %class.KV.4* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %26 to %class.KV.5**
  %28 = load %class.KV.5*, %class.KV.5** %27, align 8
  store %class.KV.5* %28, %class.KV.5** %12, align 8
  %29 = load %class.KV.4*, %class.KV.4** %7, align 8
  %30 = getelementptr inbounds %class.KV.4, %class.KV.4* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.5*, %class.KV.5** %12, align 8
  %62 = getelementptr inbounds %class.KV.5, %class.KV.5* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.5, %class.KV.5* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.5*, %class.KV.5** %12, align 8
  %72 = getelementptr inbounds %class.KV.5, %class.KV.5* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.5, %class.KV.5* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.5*, %class.KV.5** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %79, i32 %80, i32 %81, %class.KV.5* dereferenceable(16) %19)
  store %class.KV.5* %84, %class.KV.5** %18, align 8
  %85 = load %class.KV.4*, %class.KV.4** %7, align 8
  %86 = getelementptr inbounds %class.KV.4, %class.KV.4* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.5*, %class.KV.5** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %88, %class.KV.5* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.5*, %class.KV.5** %12, align 8
  %97 = getelementptr inbounds %class.KV.5, %class.KV.5* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.5, %class.KV.5* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 34
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.5*, %class.KV.5** %12, align 8
  %106 = getelementptr inbounds %class.KV.5, %class.KV.5* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.5, %class.KV.5* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.5*, %class.KV.5** %12, align 8
  %113 = getelementptr inbounds %class.KV.5, %class.KV.5* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.5, %class.KV.5* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.5*, %class.KV.5** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %121, i32 %122, i32 %123, %class.KV.5* dereferenceable(16) %20)
  store %class.KV.5* %124, %class.KV.5** %21, align 8
  %125 = load %class.KV.4*, %class.KV.4** %7, align 8
  %126 = getelementptr inbounds %class.KV.4, %class.KV.4* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.5*, %class.KV.5** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %128, %class.KV.5* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.5*, %class.KV.5** %12, align 8
  %134 = getelementptr inbounds %class.KV.5, %class.KV.5* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.5* sret %22, %class.KV.5* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.5*, %class.KV.5** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %140, i32 %141, i32 %142, %class.KV.5* dereferenceable(16) %22)
  store %class.KV.5* %143, %class.KV.5** %23, align 8
  %144 = load %class.KV.4*, %class.KV.4** %7, align 8
  %145 = getelementptr inbounds %class.KV.4, %class.KV.4* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.5*, %class.KV.5** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %147, %class.KV.5* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.5*
  store %class.KV.5* %158, %class.KV.5** %24, align 8
  %159 = load %class.KV.5*, %class.KV.5** %24, align 8
  %160 = bitcast %class.KV.5* %159 to i8*
  %161 = load %class.KV.5*, %class.KV.5** %12, align 8
  %162 = bitcast %class.KV.5* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.5*, %class.KV.5** %24, align 8
  %170 = getelementptr inbounds %class.KV.5, %class.KV.5* %169, i64 %168
  %171 = bitcast %class.KV.5* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.5*, %class.KV.5** %12, align 8
  %175 = getelementptr inbounds %class.KV.5, %class.KV.5* %174, i64 %173
  %176 = bitcast %class.KV.5* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.5*, %class.KV.5** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.5, %class.KV.5* %182, i64 %184
  %186 = bitcast %class.KV.5* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.5*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.5*, %class.KV.5** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %196, %class.KV.5* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5*, i32, i32, %class.KV.5* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.5*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.5*, align 8
  %9 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.5* %3, %class.KV.5** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.5*
  store %class.KV.5* %14, %class.KV.5** %9, align 8
  %15 = load %class.KV.5*, %class.KV.5** %9, align 8
  %16 = bitcast %class.KV.5* %15 to i8*
  %17 = load %class.KV.5*, %class.KV.5** %5, align 8
  %18 = bitcast %class.KV.5* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.5*, %class.KV.5** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.5, %class.KV.5* %22, i64 %24
  %26 = bitcast %class.KV.5* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.5*
  %28 = load %class.KV.5*, %class.KV.5** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %27, %class.KV.5* dereferenceable(16) %28)
  %29 = load %class.KV.5*, %class.KV.5** %9, align 8
  ret %class.KV.5* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.5* noalias sret, %class.KV.5* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.5*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.6*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.6*, align 8
  %19 = alloca %class.KV.6, align 8
  %20 = alloca %class.KV.6, align 8
  %21 = alloca %class.KV.6*, align 8
  %22 = alloca %class.KV.6, align 8
  %23 = alloca %class.KV.6*, align 8
  %24 = alloca %class.KV.6*, align 8
  store %class.KV.5* %1, %class.KV.5** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.5*, %class.KV.5** %7, align 8
  %26 = getelementptr inbounds %class.KV.5, %class.KV.5* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %26 to %class.KV.6**
  %28 = load %class.KV.6*, %class.KV.6** %27, align 8
  store %class.KV.6* %28, %class.KV.6** %12, align 8
  %29 = load %class.KV.5*, %class.KV.5** %7, align 8
  %30 = getelementptr inbounds %class.KV.5, %class.KV.5* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.6*, %class.KV.6** %12, align 8
  %62 = getelementptr inbounds %class.KV.6, %class.KV.6* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.6, %class.KV.6* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.6*, %class.KV.6** %12, align 8
  %72 = getelementptr inbounds %class.KV.6, %class.KV.6* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.6, %class.KV.6* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.6*, %class.KV.6** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %79, i32 %80, i32 %81, %class.KV.6* dereferenceable(16) %19)
  store %class.KV.6* %84, %class.KV.6** %18, align 8
  %85 = load %class.KV.5*, %class.KV.5** %7, align 8
  %86 = getelementptr inbounds %class.KV.5, %class.KV.5* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.6*, %class.KV.6** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %88, %class.KV.6* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.6*, %class.KV.6** %12, align 8
  %97 = getelementptr inbounds %class.KV.6, %class.KV.6* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.6, %class.KV.6* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 40
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.6*, %class.KV.6** %12, align 8
  %106 = getelementptr inbounds %class.KV.6, %class.KV.6* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.6, %class.KV.6* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.6*, %class.KV.6** %12, align 8
  %113 = getelementptr inbounds %class.KV.6, %class.KV.6* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.6, %class.KV.6* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.6*, %class.KV.6** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %121, i32 %122, i32 %123, %class.KV.6* dereferenceable(16) %20)
  store %class.KV.6* %124, %class.KV.6** %21, align 8
  %125 = load %class.KV.5*, %class.KV.5** %7, align 8
  %126 = getelementptr inbounds %class.KV.5, %class.KV.5* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.6*, %class.KV.6** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %128, %class.KV.6* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.6*, %class.KV.6** %12, align 8
  %134 = getelementptr inbounds %class.KV.6, %class.KV.6* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.6* sret %22, %class.KV.6* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.6*, %class.KV.6** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %140, i32 %141, i32 %142, %class.KV.6* dereferenceable(16) %22)
  store %class.KV.6* %143, %class.KV.6** %23, align 8
  %144 = load %class.KV.5*, %class.KV.5** %7, align 8
  %145 = getelementptr inbounds %class.KV.5, %class.KV.5* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.6*, %class.KV.6** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %147, %class.KV.6* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.6*
  store %class.KV.6* %158, %class.KV.6** %24, align 8
  %159 = load %class.KV.6*, %class.KV.6** %24, align 8
  %160 = bitcast %class.KV.6* %159 to i8*
  %161 = load %class.KV.6*, %class.KV.6** %12, align 8
  %162 = bitcast %class.KV.6* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.6*, %class.KV.6** %24, align 8
  %170 = getelementptr inbounds %class.KV.6, %class.KV.6* %169, i64 %168
  %171 = bitcast %class.KV.6* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.6*, %class.KV.6** %12, align 8
  %175 = getelementptr inbounds %class.KV.6, %class.KV.6* %174, i64 %173
  %176 = bitcast %class.KV.6* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.6*, %class.KV.6** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.6, %class.KV.6* %182, i64 %184
  %186 = bitcast %class.KV.6* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.6*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.6*, %class.KV.6** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %196, %class.KV.6* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6*, i32, i32, %class.KV.6* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.6*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.6*, align 8
  %9 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.6* %3, %class.KV.6** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.6*
  store %class.KV.6* %14, %class.KV.6** %9, align 8
  %15 = load %class.KV.6*, %class.KV.6** %9, align 8
  %16 = bitcast %class.KV.6* %15 to i8*
  %17 = load %class.KV.6*, %class.KV.6** %5, align 8
  %18 = bitcast %class.KV.6* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.6*, %class.KV.6** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.6, %class.KV.6* %22, i64 %24
  %26 = bitcast %class.KV.6* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.6*
  %28 = load %class.KV.6*, %class.KV.6** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %27, %class.KV.6* dereferenceable(16) %28)
  %29 = load %class.KV.6*, %class.KV.6** %9, align 8
  ret %class.KV.6* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.6* noalias sret, %class.KV.6* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.6*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.7*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.7*, align 8
  %19 = alloca %class.KV.7, align 8
  %20 = alloca %class.KV.7, align 8
  %21 = alloca %class.KV.7*, align 8
  %22 = alloca %class.KV.7, align 8
  %23 = alloca %class.KV.7*, align 8
  %24 = alloca %class.KV.7*, align 8
  store %class.KV.6* %1, %class.KV.6** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.6*, %class.KV.6** %7, align 8
  %26 = getelementptr inbounds %class.KV.6, %class.KV.6* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %26 to %class.KV.7**
  %28 = load %class.KV.7*, %class.KV.7** %27, align 8
  store %class.KV.7* %28, %class.KV.7** %12, align 8
  %29 = load %class.KV.6*, %class.KV.6** %7, align 8
  %30 = getelementptr inbounds %class.KV.6, %class.KV.6* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.7*, %class.KV.7** %12, align 8
  %62 = getelementptr inbounds %class.KV.7, %class.KV.7* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.7, %class.KV.7* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.7*, %class.KV.7** %12, align 8
  %72 = getelementptr inbounds %class.KV.7, %class.KV.7* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.7, %class.KV.7* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.7*, %class.KV.7** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %79, i32 %80, i32 %81, %class.KV.7* dereferenceable(16) %19)
  store %class.KV.7* %84, %class.KV.7** %18, align 8
  %85 = load %class.KV.6*, %class.KV.6** %7, align 8
  %86 = getelementptr inbounds %class.KV.6, %class.KV.6* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.7*, %class.KV.7** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %88, %class.KV.7* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.7*, %class.KV.7** %12, align 8
  %97 = getelementptr inbounds %class.KV.7, %class.KV.7* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.7, %class.KV.7* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 46
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.7*, %class.KV.7** %12, align 8
  %106 = getelementptr inbounds %class.KV.7, %class.KV.7* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.7, %class.KV.7* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.7*, %class.KV.7** %12, align 8
  %113 = getelementptr inbounds %class.KV.7, %class.KV.7* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.7, %class.KV.7* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.7*, %class.KV.7** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %121, i32 %122, i32 %123, %class.KV.7* dereferenceable(16) %20)
  store %class.KV.7* %124, %class.KV.7** %21, align 8
  %125 = load %class.KV.6*, %class.KV.6** %7, align 8
  %126 = getelementptr inbounds %class.KV.6, %class.KV.6* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.7*, %class.KV.7** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %128, %class.KV.7* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.7*, %class.KV.7** %12, align 8
  %134 = getelementptr inbounds %class.KV.7, %class.KV.7* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.7* sret %22, %class.KV.7* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.7*, %class.KV.7** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %140, i32 %141, i32 %142, %class.KV.7* dereferenceable(16) %22)
  store %class.KV.7* %143, %class.KV.7** %23, align 8
  %144 = load %class.KV.6*, %class.KV.6** %7, align 8
  %145 = getelementptr inbounds %class.KV.6, %class.KV.6* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.7*, %class.KV.7** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %147, %class.KV.7* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.7*
  store %class.KV.7* %158, %class.KV.7** %24, align 8
  %159 = load %class.KV.7*, %class.KV.7** %24, align 8
  %160 = bitcast %class.KV.7* %159 to i8*
  %161 = load %class.KV.7*, %class.KV.7** %12, align 8
  %162 = bitcast %class.KV.7* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.7*, %class.KV.7** %24, align 8
  %170 = getelementptr inbounds %class.KV.7, %class.KV.7* %169, i64 %168
  %171 = bitcast %class.KV.7* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.7*, %class.KV.7** %12, align 8
  %175 = getelementptr inbounds %class.KV.7, %class.KV.7* %174, i64 %173
  %176 = bitcast %class.KV.7* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.7*, %class.KV.7** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.7, %class.KV.7* %182, i64 %184
  %186 = bitcast %class.KV.7* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.7*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.7*, %class.KV.7** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %196, %class.KV.7* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7*, i32, i32, %class.KV.7* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.7*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.7*, align 8
  %9 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.7* %3, %class.KV.7** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.7*
  store %class.KV.7* %14, %class.KV.7** %9, align 8
  %15 = load %class.KV.7*, %class.KV.7** %9, align 8
  %16 = bitcast %class.KV.7* %15 to i8*
  %17 = load %class.KV.7*, %class.KV.7** %5, align 8
  %18 = bitcast %class.KV.7* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.7*, %class.KV.7** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.7, %class.KV.7* %22, i64 %24
  %26 = bitcast %class.KV.7* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.7*
  %28 = load %class.KV.7*, %class.KV.7** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %27, %class.KV.7* dereferenceable(16) %28)
  %29 = load %class.KV.7*, %class.KV.7** %9, align 8
  ret %class.KV.7* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.7* noalias sret, %class.KV.7* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.7*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.8*, align 8
  %19 = alloca %class.KV.8, align 8
  %20 = alloca %class.KV.8, align 8
  %21 = alloca %class.KV.8*, align 8
  %22 = alloca %class.KV.8, align 8
  %23 = alloca %class.KV.8*, align 8
  %24 = alloca %class.KV.8*, align 8
  store %class.KV.7* %1, %class.KV.7** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.7*, %class.KV.7** %7, align 8
  %26 = getelementptr inbounds %class.KV.7, %class.KV.7* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %26 to %class.KV.8**
  %28 = load %class.KV.8*, %class.KV.8** %27, align 8
  store %class.KV.8* %28, %class.KV.8** %12, align 8
  %29 = load %class.KV.7*, %class.KV.7** %7, align 8
  %30 = getelementptr inbounds %class.KV.7, %class.KV.7* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.8*, %class.KV.8** %12, align 8
  %62 = getelementptr inbounds %class.KV.8, %class.KV.8* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.8, %class.KV.8* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.8*, %class.KV.8** %12, align 8
  %72 = getelementptr inbounds %class.KV.8, %class.KV.8* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.8, %class.KV.8* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.8*, %class.KV.8** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %79, i32 %80, i32 %81, %class.KV.8* dereferenceable(16) %19)
  store %class.KV.8* %84, %class.KV.8** %18, align 8
  %85 = load %class.KV.7*, %class.KV.7** %7, align 8
  %86 = getelementptr inbounds %class.KV.7, %class.KV.7* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.8*, %class.KV.8** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %88, %class.KV.8* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.8*, %class.KV.8** %12, align 8
  %97 = getelementptr inbounds %class.KV.8, %class.KV.8* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.8, %class.KV.8* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 52
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.8*, %class.KV.8** %12, align 8
  %106 = getelementptr inbounds %class.KV.8, %class.KV.8* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.8, %class.KV.8* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.8*, %class.KV.8** %12, align 8
  %113 = getelementptr inbounds %class.KV.8, %class.KV.8* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.8, %class.KV.8* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.8*, %class.KV.8** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %121, i32 %122, i32 %123, %class.KV.8* dereferenceable(16) %20)
  store %class.KV.8* %124, %class.KV.8** %21, align 8
  %125 = load %class.KV.7*, %class.KV.7** %7, align 8
  %126 = getelementptr inbounds %class.KV.7, %class.KV.7* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.8*, %class.KV.8** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %128, %class.KV.8* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.8*, %class.KV.8** %12, align 8
  %134 = getelementptr inbounds %class.KV.8, %class.KV.8* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.8* sret %22, %class.KV.8* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.8*, %class.KV.8** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %140, i32 %141, i32 %142, %class.KV.8* dereferenceable(16) %22)
  store %class.KV.8* %143, %class.KV.8** %23, align 8
  %144 = load %class.KV.7*, %class.KV.7** %7, align 8
  %145 = getelementptr inbounds %class.KV.7, %class.KV.7* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.8*, %class.KV.8** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %147, %class.KV.8* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.8*
  store %class.KV.8* %158, %class.KV.8** %24, align 8
  %159 = load %class.KV.8*, %class.KV.8** %24, align 8
  %160 = bitcast %class.KV.8* %159 to i8*
  %161 = load %class.KV.8*, %class.KV.8** %12, align 8
  %162 = bitcast %class.KV.8* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.8*, %class.KV.8** %24, align 8
  %170 = getelementptr inbounds %class.KV.8, %class.KV.8* %169, i64 %168
  %171 = bitcast %class.KV.8* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.8*, %class.KV.8** %12, align 8
  %175 = getelementptr inbounds %class.KV.8, %class.KV.8* %174, i64 %173
  %176 = bitcast %class.KV.8* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.8*, %class.KV.8** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.8, %class.KV.8* %182, i64 %184
  %186 = bitcast %class.KV.8* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.8*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.8*, %class.KV.8** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %196, %class.KV.8* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8*, i32, i32, %class.KV.8* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.8*, align 8
  %9 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.8* %3, %class.KV.8** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.8*
  store %class.KV.8* %14, %class.KV.8** %9, align 8
  %15 = load %class.KV.8*, %class.KV.8** %9, align 8
  %16 = bitcast %class.KV.8* %15 to i8*
  %17 = load %class.KV.8*, %class.KV.8** %5, align 8
  %18 = bitcast %class.KV.8* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.8*, %class.KV.8** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.8, %class.KV.8* %22, i64 %24
  %26 = bitcast %class.KV.8* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.8*
  %28 = load %class.KV.8*, %class.KV.8** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %27, %class.KV.8* dereferenceable(16) %28)
  %29 = load %class.KV.8*, %class.KV.8** %9, align 8
  ret %class.KV.8* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.8* noalias sret, %class.KV.8* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.9*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.9*, align 8
  %19 = alloca %class.KV.9, align 8
  %20 = alloca %class.KV.9, align 8
  %21 = alloca %class.KV.9*, align 8
  %22 = alloca %class.KV.9, align 8
  %23 = alloca %class.KV.9*, align 8
  %24 = alloca %class.KV.9*, align 8
  store %class.KV.8* %1, %class.KV.8** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.8*, %class.KV.8** %7, align 8
  %26 = getelementptr inbounds %class.KV.8, %class.KV.8* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %26 to %class.KV.9**
  %28 = load %class.KV.9*, %class.KV.9** %27, align 8
  store %class.KV.9* %28, %class.KV.9** %12, align 8
  %29 = load %class.KV.8*, %class.KV.8** %7, align 8
  %30 = getelementptr inbounds %class.KV.8, %class.KV.8* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.9*, %class.KV.9** %12, align 8
  %62 = getelementptr inbounds %class.KV.9, %class.KV.9* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.9, %class.KV.9* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.9*, %class.KV.9** %12, align 8
  %72 = getelementptr inbounds %class.KV.9, %class.KV.9* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.9, %class.KV.9* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.9*, %class.KV.9** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %79, i32 %80, i32 %81, %class.KV.9* dereferenceable(16) %19)
  store %class.KV.9* %84, %class.KV.9** %18, align 8
  %85 = load %class.KV.8*, %class.KV.8** %7, align 8
  %86 = getelementptr inbounds %class.KV.8, %class.KV.8* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.9*, %class.KV.9** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %88, %class.KV.9* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.9*, %class.KV.9** %12, align 8
  %97 = getelementptr inbounds %class.KV.9, %class.KV.9* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.9, %class.KV.9* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 58
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.9*, %class.KV.9** %12, align 8
  %106 = getelementptr inbounds %class.KV.9, %class.KV.9* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.9, %class.KV.9* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.9*, %class.KV.9** %12, align 8
  %113 = getelementptr inbounds %class.KV.9, %class.KV.9* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.9, %class.KV.9* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.9*, %class.KV.9** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %121, i32 %122, i32 %123, %class.KV.9* dereferenceable(16) %20)
  store %class.KV.9* %124, %class.KV.9** %21, align 8
  %125 = load %class.KV.8*, %class.KV.8** %7, align 8
  %126 = getelementptr inbounds %class.KV.8, %class.KV.8* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.9*, %class.KV.9** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %128, %class.KV.9* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.9*, %class.KV.9** %12, align 8
  %134 = getelementptr inbounds %class.KV.9, %class.KV.9* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.9* sret %22, %class.KV.9* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.9*, %class.KV.9** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %140, i32 %141, i32 %142, %class.KV.9* dereferenceable(16) %22)
  store %class.KV.9* %143, %class.KV.9** %23, align 8
  %144 = load %class.KV.8*, %class.KV.8** %7, align 8
  %145 = getelementptr inbounds %class.KV.8, %class.KV.8* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.9*, %class.KV.9** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %147, %class.KV.9* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.9*
  store %class.KV.9* %158, %class.KV.9** %24, align 8
  %159 = load %class.KV.9*, %class.KV.9** %24, align 8
  %160 = bitcast %class.KV.9* %159 to i8*
  %161 = load %class.KV.9*, %class.KV.9** %12, align 8
  %162 = bitcast %class.KV.9* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.9*, %class.KV.9** %24, align 8
  %170 = getelementptr inbounds %class.KV.9, %class.KV.9* %169, i64 %168
  %171 = bitcast %class.KV.9* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.9*, %class.KV.9** %12, align 8
  %175 = getelementptr inbounds %class.KV.9, %class.KV.9* %174, i64 %173
  %176 = bitcast %class.KV.9* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.9*, %class.KV.9** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.9, %class.KV.9* %182, i64 %184
  %186 = bitcast %class.KV.9* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.9*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.9*, %class.KV.9** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %196, %class.KV.9* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9*, i32, i32, %class.KV.9* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.9*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.9*, align 8
  %9 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.9* %3, %class.KV.9** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.9*
  store %class.KV.9* %14, %class.KV.9** %9, align 8
  %15 = load %class.KV.9*, %class.KV.9** %9, align 8
  %16 = bitcast %class.KV.9* %15 to i8*
  %17 = load %class.KV.9*, %class.KV.9** %5, align 8
  %18 = bitcast %class.KV.9* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.9*, %class.KV.9** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.9, %class.KV.9* %22, i64 %24
  %26 = bitcast %class.KV.9* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.9*
  %28 = load %class.KV.9*, %class.KV.9** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %27, %class.KV.9* dereferenceable(16) %28)
  %29 = load %class.KV.9*, %class.KV.9** %9, align 8
  ret %class.KV.9* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.9* noalias sret, %class.KV.9* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.9*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.10*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.10*, align 8
  %19 = alloca %class.KV.10, align 8
  %20 = alloca %class.KV.10, align 8
  %21 = alloca %class.KV.10*, align 8
  %22 = alloca %class.KV.10, align 8
  %23 = alloca %class.KV.10*, align 8
  %24 = alloca %class.KV.10*, align 8
  store %class.KV.9* %1, %class.KV.9** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.9*, %class.KV.9** %7, align 8
  %26 = getelementptr inbounds %class.KV.9, %class.KV.9* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %26 to %class.KV.10**
  %28 = load %class.KV.10*, %class.KV.10** %27, align 8
  store %class.KV.10* %28, %class.KV.10** %12, align 8
  %29 = load %class.KV.9*, %class.KV.9** %7, align 8
  %30 = getelementptr inbounds %class.KV.9, %class.KV.9* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.10*, %class.KV.10** %12, align 8
  %62 = getelementptr inbounds %class.KV.10, %class.KV.10* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.10, %class.KV.10* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.10*, %class.KV.10** %12, align 8
  %72 = getelementptr inbounds %class.KV.10, %class.KV.10* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.10, %class.KV.10* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.10*, %class.KV.10** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %79, i32 %80, i32 %81, %class.KV.10* dereferenceable(16) %19)
  store %class.KV.10* %84, %class.KV.10** %18, align 8
  %85 = load %class.KV.9*, %class.KV.9** %7, align 8
  %86 = getelementptr inbounds %class.KV.9, %class.KV.9* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.10*, %class.KV.10** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %88, %class.KV.10* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.10*, %class.KV.10** %12, align 8
  %97 = getelementptr inbounds %class.KV.10, %class.KV.10* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.10, %class.KV.10* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 0
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.10*, %class.KV.10** %12, align 8
  %106 = getelementptr inbounds %class.KV.10, %class.KV.10* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.10, %class.KV.10* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.10*, %class.KV.10** %12, align 8
  %113 = getelementptr inbounds %class.KV.10, %class.KV.10* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.10, %class.KV.10* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.10*, %class.KV.10** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %121, i32 %122, i32 %123, %class.KV.10* dereferenceable(16) %20)
  store %class.KV.10* %124, %class.KV.10** %21, align 8
  %125 = load %class.KV.9*, %class.KV.9** %7, align 8
  %126 = getelementptr inbounds %class.KV.9, %class.KV.9* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.10*, %class.KV.10** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %128, %class.KV.10* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.10*, %class.KV.10** %12, align 8
  %134 = getelementptr inbounds %class.KV.10, %class.KV.10* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.10* sret %22, %class.KV.10* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.10*, %class.KV.10** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %140, i32 %141, i32 %142, %class.KV.10* dereferenceable(16) %22)
  store %class.KV.10* %143, %class.KV.10** %23, align 8
  %144 = load %class.KV.9*, %class.KV.9** %7, align 8
  %145 = getelementptr inbounds %class.KV.9, %class.KV.9* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.10*, %class.KV.10** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %147, %class.KV.10* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.10*
  store %class.KV.10* %158, %class.KV.10** %24, align 8
  %159 = load %class.KV.10*, %class.KV.10** %24, align 8
  %160 = bitcast %class.KV.10* %159 to i8*
  %161 = load %class.KV.10*, %class.KV.10** %12, align 8
  %162 = bitcast %class.KV.10* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.10*, %class.KV.10** %24, align 8
  %170 = getelementptr inbounds %class.KV.10, %class.KV.10* %169, i64 %168
  %171 = bitcast %class.KV.10* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.10*, %class.KV.10** %12, align 8
  %175 = getelementptr inbounds %class.KV.10, %class.KV.10* %174, i64 %173
  %176 = bitcast %class.KV.10* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.10*, %class.KV.10** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.10, %class.KV.10* %182, i64 %184
  %186 = bitcast %class.KV.10* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.10*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.10*, %class.KV.10** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %196, %class.KV.10* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10*, i32, i32, %class.KV.10* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.10*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.10*, align 8
  %9 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.10* %3, %class.KV.10** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.10*
  store %class.KV.10* %14, %class.KV.10** %9, align 8
  %15 = load %class.KV.10*, %class.KV.10** %9, align 8
  %16 = bitcast %class.KV.10* %15 to i8*
  %17 = load %class.KV.10*, %class.KV.10** %5, align 8
  %18 = bitcast %class.KV.10* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.10*, %class.KV.10** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.10, %class.KV.10* %22, i64 %24
  %26 = bitcast %class.KV.10* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.10*
  %28 = load %class.KV.10*, %class.KV.10** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %27, %class.KV.10* dereferenceable(16) %28)
  %29 = load %class.KV.10*, %class.KV.10** %9, align 8
  ret %class.KV.10* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.10* noalias sret, %class.KV.10* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.10*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.LL*, align 8
  %13 = alloca %class.LL*, align 8
  %14 = alloca %class.LL*, align 8
  store %class.KV.10* %1, %class.KV.10** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %15 = load %class.KV.10*, %class.KV.10** %7, align 8
  %16 = getelementptr inbounds %class.KV.10, %class.KV.10* %15, i32 0, i32 0
  %17 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %58

; <label>:21                                      ; preds = %6
  %22 = load %class.KV.10*, %class.KV.10** %7, align 8
  %23 = getelementptr inbounds %class.KV.10, %class.KV.10* %22, i32 0, i32 0
  %24 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %23 to %class.c_d**
  %25 = load %class.c_d*, %class.c_d** %24, align 8
  %26 = load %class.c_d*, %class.c_d** %9, align 8
  %27 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %25, %class.c_d* dereferenceable(8) %26)
  br i1 %27, label %28, label %34

; <label>:28                                      ; preds = %21
  %29 = load %class.KV.10*, %class.KV.10** %7, align 8
  %30 = getelementptr inbounds %class.KV.10, %class.KV.10* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %30 to %class.c_d**
  %32 = load %class.c_d*, %class.c_d** %31, align 8
  %33 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %0, %class.c_d* %32, %class.c_d* %33)
  br label %84

; <label>:34                                      ; preds = %21
  %35 = load i64*, i64** %11, align 8
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %35, align 8
  %38 = call i8* @malloc(i64 24)
  %39 = bitcast i8* %38 to %class.LL*
  %40 = bitcast %class.LL* %39 to i8*
  %41 = bitcast i8* %40 to %class.LL*
  %42 = load %class.c_d*, %class.c_d** %9, align 8
  %43 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %41, %class.c_d* %42, %class.c_d* %43, %class.LL* null)
  store %class.LL* %41, %class.LL** %12, align 8
  %44 = call i8* @malloc(i64 24)
  %45 = bitcast i8* %44 to %class.LL*
  %46 = bitcast %class.LL* %45 to i8*
  %47 = bitcast i8* %46 to %class.LL*
  %48 = load %class.KV.10*, %class.KV.10** %7, align 8
  %49 = getelementptr inbounds %class.KV.10, %class.KV.10* %48, i32 0, i32 0
  %50 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %49 to %class.c_d**
  %51 = load %class.c_d*, %class.c_d** %50, align 8
  %52 = load %class.KV.10*, %class.KV.10** %7, align 8
  %53 = getelementptr inbounds %class.KV.10, %class.KV.10* %52, i32 0, i32 1
  %54 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %53 to %class.c_d**
  %55 = load %class.c_d*, %class.c_d** %54, align 8
  %56 = load %class.LL*, %class.LL** %12, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %47, %class.c_d* %51, %class.c_d* %55, %class.LL* %56)
  store %class.LL* %47, %class.LL** %13, align 8
  %57 = load %class.LL*, %class.LL** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %57)
  br label %84

; <label>:58                                      ; preds = %6
  %59 = load %class.KV.10*, %class.KV.10** %7, align 8
  %60 = getelementptr inbounds %class.KV.10, %class.KV.10* %59, i32 0, i32 1
  %61 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %60 to %class.LL**
  %62 = load %class.LL*, %class.LL** %61, align 8
  %63 = icmp ne %class.LL* %62, null
  br i1 %63, label %64, label %73

; <label>:64                                      ; preds = %58
  %65 = load %class.KV.10*, %class.KV.10** %7, align 8
  %66 = getelementptr inbounds %class.KV.10, %class.KV.10* %65, i32 0, i32 1
  %67 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %66 to %class.LL**
  %68 = load %class.LL*, %class.LL** %67, align 8
  %69 = load %class.c_d*, %class.c_d** %9, align 8
  %70 = load %class.c_d*, %class.c_d** %10, align 8
  %71 = load i64*, i64** %11, align 8
  %72 = call %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL* %68, %class.c_d* %69, %class.c_d* %70, i64* %71)
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %72)
  br label %84

; <label>:73                                      ; preds = %58
  %74 = load i64*, i64** %11, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  %77 = call i8* @malloc(i64 24)
  %78 = bitcast i8* %77 to %class.LL*
  %79 = bitcast %class.LL* %78 to i8*
  %80 = bitcast i8* %79 to %class.LL*
  %81 = load %class.c_d*, %class.c_d** %9, align 8
  %82 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %80, %class.c_d* %81, %class.c_d* %82, %class.LL* null)
  store %class.LL* %80, %class.LL** %14, align 8
  %83 = load %class.LL*, %class.LL** %14, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %83)
  br label %84

; <label>:84                                      ; preds = %73, %64, %34, %28
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL*, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.LL*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.LL*, align 8
  %11 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %6, align 8
  store %class.c_d* %1, %class.c_d** %7, align 8
  store %class.c_d* %2, %class.c_d** %8, align 8
  store i64* %3, i64** %9, align 8
  %12 = load %class.LL*, %class.LL** %6, align 8
  %13 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %14 = load %class.c_d*, %class.c_d** %13, align 8
  %15 = load %class.c_d*, %class.c_d** %7, align 8
  %16 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %14, %class.c_d* dereferenceable(8) %15)
  br i1 %16, label %17, label %27

; <label>:17                                      ; preds = %4
  %18 = call i8* @malloc(i64 24)
  %19 = bitcast i8* %18 to %class.LL*
  %20 = bitcast %class.LL* %19 to i8*
  %21 = bitcast i8* %20 to %class.LL*
  %22 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %23 = load %class.c_d*, %class.c_d** %22, align 8
  %24 = load %class.c_d*, %class.c_d** %8, align 8
  %25 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %26 = load %class.LL*, %class.LL** %25, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %21, %class.c_d* %23, %class.c_d* %24, %class.LL* %26)
  store %class.LL* %21, %class.LL** %5, align 8
  br label %66

; <label>:27                                      ; preds = %4
  %28 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %29 = load %class.LL*, %class.LL** %28, align 8
  %30 = icmp ne %class.LL* %29, null
  br i1 %30, label %31, label %46

; <label>:31                                      ; preds = %27
  %32 = call i8* @malloc(i64 24)
  %33 = bitcast i8* %32 to %class.LL*
  %34 = bitcast %class.LL* %33 to i8*
  %35 = bitcast i8* %34 to %class.LL*
  %36 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %37 = load %class.c_d*, %class.c_d** %36, align 8
  %38 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 1
  %39 = load %class.c_d*, %class.c_d** %38, align 8
  %40 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %41 = load %class.LL*, %class.LL** %40, align 8
  %42 = load %class.c_d*, %class.c_d** %7, align 8
  %43 = load %class.c_d*, %class.c_d** %8, align 8
  %44 = load i64*, i64** %9, align 8
  %45 = call %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL* %41, %class.c_d* %42, %class.c_d* %43, i64* %44)
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %35, %class.c_d* %37, %class.c_d* %39, %class.LL* %45)
  store %class.LL* %35, %class.LL** %5, align 8
  br label %66

; <label>:46                                      ; preds = %27
  %47 = load i64*, i64** %9, align 8
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %47, align 8
  %50 = call i8* @malloc(i64 24)
  %51 = bitcast i8* %50 to %class.LL*
  %52 = bitcast %class.LL* %51 to i8*
  %53 = bitcast i8* %52 to %class.LL*
  %54 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %55 = load %class.c_d*, %class.c_d** %54, align 8
  %56 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 1
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %53, %class.c_d* %55, %class.c_d* %57, %class.LL* null)
  store %class.LL* %53, %class.LL** %10, align 8
  %58 = call i8* @malloc(i64 24)
  %59 = bitcast i8* %58 to %class.LL*
  %60 = bitcast %class.LL* %59 to i8*
  %61 = bitcast i8* %60 to %class.LL*
  %62 = load %class.c_d*, %class.c_d** %7, align 8
  %63 = load %class.c_d*, %class.c_d** %8, align 8
  %64 = load %class.LL*, %class.LL** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %61, %class.c_d* %62, %class.c_d* %63, %class.LL* %64)
  store %class.LL* %61, %class.LL** %11, align 8
  %65 = load %class.LL*, %class.LL** %11, align 8
  store %class.LL* %65, %class.LL** %5, align 8
  br label %66

; <label>:66                                      ; preds = %46, %31, %17
  %67 = load %class.LL*, %class.LL** %5, align 8
  ret %class.LL* %67
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE12remove_innerERKS1_yPKS0_Py(%class.KV* noalias sret, %class.KV* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.0*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.0*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.0, align 8
  %19 = alloca %class.KV.0*, align 8
  store %class.KV* %1, %class.KV** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV*, %class.KV** %6, align 8
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %21 to %class.KV.0**
  %23 = load %class.KV.0*, %class.KV.0** %22, align 8
  store %class.KV.0* %23, %class.KV.0** %10, align 8
  %24 = load %class.KV*, %class.KV** %6, align 8
  %25 = getelementptr inbounds %class.KV, %class.KV* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.0*, %class.KV.0** %10, align 8
  %57 = getelementptr inbounds %class.KV.0, %class.KV.0* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.0, %class.KV.0* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.0*, %class.KV.0** %10, align 8
  %67 = getelementptr inbounds %class.KV.0, %class.KV.0* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.0, %class.KV.0* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.0*
  store %class.KV.0* %82, %class.KV.0** %16, align 8
  %83 = load %class.KV.0*, %class.KV.0** %16, align 8
  %84 = bitcast %class.KV.0* %83 to i8*
  %85 = load %class.KV.0*, %class.KV.0** %10, align 8
  %86 = bitcast %class.KV.0* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.0*, %class.KV.0** %16, align 8
  %93 = getelementptr inbounds %class.KV.0, %class.KV.0* %92, i64 %91
  %94 = bitcast %class.KV.0* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.0*, %class.KV.0** %10, align 8
  %99 = getelementptr inbounds %class.KV.0, %class.KV.0* %98, i64 %97
  %100 = bitcast %class.KV.0* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.0*, %class.KV.0** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %115, %class.KV.0* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.0*, %class.KV.0** %10, align 8
  %123 = getelementptr inbounds %class.KV.0, %class.KV.0* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE12remove_innerERKS1_yPKS0_Py(%class.KV.0* sret %18, %class.KV.0* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.0*, %class.KV.0** %10, align 8
  %131 = getelementptr inbounds %class.KV.0, %class.KV.0* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj1EEeqERKS1_(%class.KV.0* %18, %class.KV.0* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.0*, %class.KV.0** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %136, i32 %137, i32 %138, %class.KV.0* dereferenceable(16) %18)
  store %class.KV.0* %139, %class.KV.0** %19, align 8
  %140 = load %class.KV*, %class.KV** %6, align 8
  %141 = getelementptr inbounds %class.KV, %class.KV* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.0*, %class.KV.0** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %143, %class.KV.0* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj0EEeqERKS1_(%class.KV*, %class.KV* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV*, %class.KV** %4, align 8
  %10 = getelementptr inbounds %class.KV, %class.KV* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %15 to %class.KV.0**
  %17 = load %class.KV.0*, %class.KV.0** %16, align 8
  %18 = load %class.KV*, %class.KV** %4, align 8
  %19 = getelementptr inbounds %class.KV, %class.KV* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %19 to %class.KV.0**
  %21 = load %class.KV.0*, %class.KV.0** %20, align 8
  %22 = icmp eq %class.KV.0* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV*, %class.KV* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = load %class.KV*, %class.KV** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2ERKS1_(%class.KV* %5, %class.KV* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE12remove_innerERKS1_yPKS0_Py(%class.KV.0* noalias sret, %class.KV.0* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.0*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.2*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.2*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.2, align 8
  %19 = alloca %class.KV.2*, align 8
  store %class.KV.0* %1, %class.KV.0** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.0*, %class.KV.0** %6, align 8
  %21 = getelementptr inbounds %class.KV.0, %class.KV.0* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %21 to %class.KV.2**
  %23 = load %class.KV.2*, %class.KV.2** %22, align 8
  store %class.KV.2* %23, %class.KV.2** %10, align 8
  %24 = load %class.KV.0*, %class.KV.0** %6, align 8
  %25 = getelementptr inbounds %class.KV.0, %class.KV.0* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.2*, %class.KV.2** %10, align 8
  %57 = getelementptr inbounds %class.KV.2, %class.KV.2* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.2, %class.KV.2* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.2*, %class.KV.2** %10, align 8
  %67 = getelementptr inbounds %class.KV.2, %class.KV.2* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.2, %class.KV.2* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.2*
  store %class.KV.2* %82, %class.KV.2** %16, align 8
  %83 = load %class.KV.2*, %class.KV.2** %16, align 8
  %84 = bitcast %class.KV.2* %83 to i8*
  %85 = load %class.KV.2*, %class.KV.2** %10, align 8
  %86 = bitcast %class.KV.2* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.2*, %class.KV.2** %16, align 8
  %93 = getelementptr inbounds %class.KV.2, %class.KV.2* %92, i64 %91
  %94 = bitcast %class.KV.2* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.2*, %class.KV.2** %10, align 8
  %99 = getelementptr inbounds %class.KV.2, %class.KV.2* %98, i64 %97
  %100 = bitcast %class.KV.2* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.2*, %class.KV.2** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %115, %class.KV.2* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.2*, %class.KV.2** %10, align 8
  %123 = getelementptr inbounds %class.KV.2, %class.KV.2* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE12remove_innerERKS1_yPKS0_Py(%class.KV.2* sret %18, %class.KV.2* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.2*, %class.KV.2** %10, align 8
  %131 = getelementptr inbounds %class.KV.2, %class.KV.2* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj2EEeqERKS1_(%class.KV.2* %18, %class.KV.2* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.2*, %class.KV.2** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %136, i32 %137, i32 %138, %class.KV.2* dereferenceable(16) %18)
  store %class.KV.2* %139, %class.KV.2** %19, align 8
  %140 = load %class.KV.0*, %class.KV.0** %6, align 8
  %141 = getelementptr inbounds %class.KV.0, %class.KV.0* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.2*, %class.KV.2** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %143, %class.KV.2* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj1EEeqERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.0*, %class.KV.0** %4, align 8
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %15 to %class.KV.2**
  %17 = load %class.KV.2*, %class.KV.2** %16, align 8
  %18 = load %class.KV.0*, %class.KV.0** %4, align 8
  %19 = getelementptr inbounds %class.KV.0, %class.KV.0* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %19 to %class.KV.2**
  %21 = load %class.KV.2*, %class.KV.2** %20, align 8
  %22 = icmp eq %class.KV.2* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE12remove_innerERKS1_yPKS0_Py(%class.KV.2* noalias sret, %class.KV.2* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.2*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.3*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.3*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.3, align 8
  %19 = alloca %class.KV.3*, align 8
  store %class.KV.2* %1, %class.KV.2** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.2*, %class.KV.2** %6, align 8
  %21 = getelementptr inbounds %class.KV.2, %class.KV.2* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %21 to %class.KV.3**
  %23 = load %class.KV.3*, %class.KV.3** %22, align 8
  store %class.KV.3* %23, %class.KV.3** %10, align 8
  %24 = load %class.KV.2*, %class.KV.2** %6, align 8
  %25 = getelementptr inbounds %class.KV.2, %class.KV.2* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.3*, %class.KV.3** %10, align 8
  %57 = getelementptr inbounds %class.KV.3, %class.KV.3* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.3, %class.KV.3* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.3*, %class.KV.3** %10, align 8
  %67 = getelementptr inbounds %class.KV.3, %class.KV.3* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.3, %class.KV.3* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.3*
  store %class.KV.3* %82, %class.KV.3** %16, align 8
  %83 = load %class.KV.3*, %class.KV.3** %16, align 8
  %84 = bitcast %class.KV.3* %83 to i8*
  %85 = load %class.KV.3*, %class.KV.3** %10, align 8
  %86 = bitcast %class.KV.3* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.3*, %class.KV.3** %16, align 8
  %93 = getelementptr inbounds %class.KV.3, %class.KV.3* %92, i64 %91
  %94 = bitcast %class.KV.3* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.3*, %class.KV.3** %10, align 8
  %99 = getelementptr inbounds %class.KV.3, %class.KV.3* %98, i64 %97
  %100 = bitcast %class.KV.3* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.3*, %class.KV.3** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %115, %class.KV.3* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.3*, %class.KV.3** %10, align 8
  %123 = getelementptr inbounds %class.KV.3, %class.KV.3* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE12remove_innerERKS1_yPKS0_Py(%class.KV.3* sret %18, %class.KV.3* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.3*, %class.KV.3** %10, align 8
  %131 = getelementptr inbounds %class.KV.3, %class.KV.3* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj3EEeqERKS1_(%class.KV.3* %18, %class.KV.3* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.3*, %class.KV.3** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %136, i32 %137, i32 %138, %class.KV.3* dereferenceable(16) %18)
  store %class.KV.3* %139, %class.KV.3** %19, align 8
  %140 = load %class.KV.2*, %class.KV.2** %6, align 8
  %141 = getelementptr inbounds %class.KV.2, %class.KV.2* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.3*, %class.KV.3** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %143, %class.KV.3* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj2EEeqERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.2*, %class.KV.2** %4, align 8
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %15 to %class.KV.3**
  %17 = load %class.KV.3*, %class.KV.3** %16, align 8
  %18 = load %class.KV.2*, %class.KV.2** %4, align 8
  %19 = getelementptr inbounds %class.KV.2, %class.KV.2* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %19 to %class.KV.3**
  %21 = load %class.KV.3*, %class.KV.3** %20, align 8
  %22 = icmp eq %class.KV.3* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE12remove_innerERKS1_yPKS0_Py(%class.KV.3* noalias sret, %class.KV.3* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.3*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.4*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.4*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.4, align 8
  %19 = alloca %class.KV.4*, align 8
  store %class.KV.3* %1, %class.KV.3** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.3*, %class.KV.3** %6, align 8
  %21 = getelementptr inbounds %class.KV.3, %class.KV.3* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %21 to %class.KV.4**
  %23 = load %class.KV.4*, %class.KV.4** %22, align 8
  store %class.KV.4* %23, %class.KV.4** %10, align 8
  %24 = load %class.KV.3*, %class.KV.3** %6, align 8
  %25 = getelementptr inbounds %class.KV.3, %class.KV.3* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.4*, %class.KV.4** %10, align 8
  %57 = getelementptr inbounds %class.KV.4, %class.KV.4* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.4, %class.KV.4* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.4*, %class.KV.4** %10, align 8
  %67 = getelementptr inbounds %class.KV.4, %class.KV.4* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.4, %class.KV.4* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.4*
  store %class.KV.4* %82, %class.KV.4** %16, align 8
  %83 = load %class.KV.4*, %class.KV.4** %16, align 8
  %84 = bitcast %class.KV.4* %83 to i8*
  %85 = load %class.KV.4*, %class.KV.4** %10, align 8
  %86 = bitcast %class.KV.4* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.4*, %class.KV.4** %16, align 8
  %93 = getelementptr inbounds %class.KV.4, %class.KV.4* %92, i64 %91
  %94 = bitcast %class.KV.4* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.4*, %class.KV.4** %10, align 8
  %99 = getelementptr inbounds %class.KV.4, %class.KV.4* %98, i64 %97
  %100 = bitcast %class.KV.4* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.4*, %class.KV.4** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %115, %class.KV.4* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.4*, %class.KV.4** %10, align 8
  %123 = getelementptr inbounds %class.KV.4, %class.KV.4* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE12remove_innerERKS1_yPKS0_Py(%class.KV.4* sret %18, %class.KV.4* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.4*, %class.KV.4** %10, align 8
  %131 = getelementptr inbounds %class.KV.4, %class.KV.4* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj4EEeqERKS1_(%class.KV.4* %18, %class.KV.4* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.4*, %class.KV.4** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %136, i32 %137, i32 %138, %class.KV.4* dereferenceable(16) %18)
  store %class.KV.4* %139, %class.KV.4** %19, align 8
  %140 = load %class.KV.3*, %class.KV.3** %6, align 8
  %141 = getelementptr inbounds %class.KV.3, %class.KV.3* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.4*, %class.KV.4** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %143, %class.KV.4* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj3EEeqERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.3*, %class.KV.3** %4, align 8
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %15 to %class.KV.4**
  %17 = load %class.KV.4*, %class.KV.4** %16, align 8
  %18 = load %class.KV.3*, %class.KV.3** %4, align 8
  %19 = getelementptr inbounds %class.KV.3, %class.KV.3* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %19 to %class.KV.4**
  %21 = load %class.KV.4*, %class.KV.4** %20, align 8
  %22 = icmp eq %class.KV.4* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE12remove_innerERKS1_yPKS0_Py(%class.KV.4* noalias sret, %class.KV.4* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.4*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.5*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.5*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.5, align 8
  %19 = alloca %class.KV.5*, align 8
  store %class.KV.4* %1, %class.KV.4** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.4*, %class.KV.4** %6, align 8
  %21 = getelementptr inbounds %class.KV.4, %class.KV.4* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %21 to %class.KV.5**
  %23 = load %class.KV.5*, %class.KV.5** %22, align 8
  store %class.KV.5* %23, %class.KV.5** %10, align 8
  %24 = load %class.KV.4*, %class.KV.4** %6, align 8
  %25 = getelementptr inbounds %class.KV.4, %class.KV.4* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.5*, %class.KV.5** %10, align 8
  %57 = getelementptr inbounds %class.KV.5, %class.KV.5* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.5, %class.KV.5* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.5*, %class.KV.5** %10, align 8
  %67 = getelementptr inbounds %class.KV.5, %class.KV.5* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.5, %class.KV.5* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.5*
  store %class.KV.5* %82, %class.KV.5** %16, align 8
  %83 = load %class.KV.5*, %class.KV.5** %16, align 8
  %84 = bitcast %class.KV.5* %83 to i8*
  %85 = load %class.KV.5*, %class.KV.5** %10, align 8
  %86 = bitcast %class.KV.5* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.5*, %class.KV.5** %16, align 8
  %93 = getelementptr inbounds %class.KV.5, %class.KV.5* %92, i64 %91
  %94 = bitcast %class.KV.5* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.5*, %class.KV.5** %10, align 8
  %99 = getelementptr inbounds %class.KV.5, %class.KV.5* %98, i64 %97
  %100 = bitcast %class.KV.5* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.5*, %class.KV.5** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %115, %class.KV.5* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.5*, %class.KV.5** %10, align 8
  %123 = getelementptr inbounds %class.KV.5, %class.KV.5* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE12remove_innerERKS1_yPKS0_Py(%class.KV.5* sret %18, %class.KV.5* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.5*, %class.KV.5** %10, align 8
  %131 = getelementptr inbounds %class.KV.5, %class.KV.5* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj5EEeqERKS1_(%class.KV.5* %18, %class.KV.5* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.5*, %class.KV.5** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %136, i32 %137, i32 %138, %class.KV.5* dereferenceable(16) %18)
  store %class.KV.5* %139, %class.KV.5** %19, align 8
  %140 = load %class.KV.4*, %class.KV.4** %6, align 8
  %141 = getelementptr inbounds %class.KV.4, %class.KV.4* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.5*, %class.KV.5** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %143, %class.KV.5* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj4EEeqERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.4*, %class.KV.4** %4, align 8
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %15 to %class.KV.5**
  %17 = load %class.KV.5*, %class.KV.5** %16, align 8
  %18 = load %class.KV.4*, %class.KV.4** %4, align 8
  %19 = getelementptr inbounds %class.KV.4, %class.KV.4* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %19 to %class.KV.5**
  %21 = load %class.KV.5*, %class.KV.5** %20, align 8
  %22 = icmp eq %class.KV.5* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE12remove_innerERKS1_yPKS0_Py(%class.KV.5* noalias sret, %class.KV.5* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.5*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.6*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.6*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.6, align 8
  %19 = alloca %class.KV.6*, align 8
  store %class.KV.5* %1, %class.KV.5** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.5*, %class.KV.5** %6, align 8
  %21 = getelementptr inbounds %class.KV.5, %class.KV.5* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %21 to %class.KV.6**
  %23 = load %class.KV.6*, %class.KV.6** %22, align 8
  store %class.KV.6* %23, %class.KV.6** %10, align 8
  %24 = load %class.KV.5*, %class.KV.5** %6, align 8
  %25 = getelementptr inbounds %class.KV.5, %class.KV.5* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.6*, %class.KV.6** %10, align 8
  %57 = getelementptr inbounds %class.KV.6, %class.KV.6* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.6, %class.KV.6* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.6*, %class.KV.6** %10, align 8
  %67 = getelementptr inbounds %class.KV.6, %class.KV.6* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.6, %class.KV.6* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.6*
  store %class.KV.6* %82, %class.KV.6** %16, align 8
  %83 = load %class.KV.6*, %class.KV.6** %16, align 8
  %84 = bitcast %class.KV.6* %83 to i8*
  %85 = load %class.KV.6*, %class.KV.6** %10, align 8
  %86 = bitcast %class.KV.6* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.6*, %class.KV.6** %16, align 8
  %93 = getelementptr inbounds %class.KV.6, %class.KV.6* %92, i64 %91
  %94 = bitcast %class.KV.6* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.6*, %class.KV.6** %10, align 8
  %99 = getelementptr inbounds %class.KV.6, %class.KV.6* %98, i64 %97
  %100 = bitcast %class.KV.6* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.6*, %class.KV.6** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %115, %class.KV.6* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.6*, %class.KV.6** %10, align 8
  %123 = getelementptr inbounds %class.KV.6, %class.KV.6* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE12remove_innerERKS1_yPKS0_Py(%class.KV.6* sret %18, %class.KV.6* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.6*, %class.KV.6** %10, align 8
  %131 = getelementptr inbounds %class.KV.6, %class.KV.6* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj6EEeqERKS1_(%class.KV.6* %18, %class.KV.6* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.6*, %class.KV.6** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %136, i32 %137, i32 %138, %class.KV.6* dereferenceable(16) %18)
  store %class.KV.6* %139, %class.KV.6** %19, align 8
  %140 = load %class.KV.5*, %class.KV.5** %6, align 8
  %141 = getelementptr inbounds %class.KV.5, %class.KV.5* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.6*, %class.KV.6** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %143, %class.KV.6* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj5EEeqERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.5*, %class.KV.5** %4, align 8
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %15 to %class.KV.6**
  %17 = load %class.KV.6*, %class.KV.6** %16, align 8
  %18 = load %class.KV.5*, %class.KV.5** %4, align 8
  %19 = getelementptr inbounds %class.KV.5, %class.KV.5* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %19 to %class.KV.6**
  %21 = load %class.KV.6*, %class.KV.6** %20, align 8
  %22 = icmp eq %class.KV.6* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE12remove_innerERKS1_yPKS0_Py(%class.KV.6* noalias sret, %class.KV.6* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.6*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.7*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.7*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.7, align 8
  %19 = alloca %class.KV.7*, align 8
  store %class.KV.6* %1, %class.KV.6** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.6*, %class.KV.6** %6, align 8
  %21 = getelementptr inbounds %class.KV.6, %class.KV.6* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %21 to %class.KV.7**
  %23 = load %class.KV.7*, %class.KV.7** %22, align 8
  store %class.KV.7* %23, %class.KV.7** %10, align 8
  %24 = load %class.KV.6*, %class.KV.6** %6, align 8
  %25 = getelementptr inbounds %class.KV.6, %class.KV.6* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.7*, %class.KV.7** %10, align 8
  %57 = getelementptr inbounds %class.KV.7, %class.KV.7* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.7, %class.KV.7* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.7*, %class.KV.7** %10, align 8
  %67 = getelementptr inbounds %class.KV.7, %class.KV.7* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.7, %class.KV.7* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.7*
  store %class.KV.7* %82, %class.KV.7** %16, align 8
  %83 = load %class.KV.7*, %class.KV.7** %16, align 8
  %84 = bitcast %class.KV.7* %83 to i8*
  %85 = load %class.KV.7*, %class.KV.7** %10, align 8
  %86 = bitcast %class.KV.7* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.7*, %class.KV.7** %16, align 8
  %93 = getelementptr inbounds %class.KV.7, %class.KV.7* %92, i64 %91
  %94 = bitcast %class.KV.7* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.7*, %class.KV.7** %10, align 8
  %99 = getelementptr inbounds %class.KV.7, %class.KV.7* %98, i64 %97
  %100 = bitcast %class.KV.7* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.7*, %class.KV.7** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %115, %class.KV.7* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.7*, %class.KV.7** %10, align 8
  %123 = getelementptr inbounds %class.KV.7, %class.KV.7* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE12remove_innerERKS1_yPKS0_Py(%class.KV.7* sret %18, %class.KV.7* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.7*, %class.KV.7** %10, align 8
  %131 = getelementptr inbounds %class.KV.7, %class.KV.7* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj7EEeqERKS1_(%class.KV.7* %18, %class.KV.7* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.7*, %class.KV.7** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %136, i32 %137, i32 %138, %class.KV.7* dereferenceable(16) %18)
  store %class.KV.7* %139, %class.KV.7** %19, align 8
  %140 = load %class.KV.6*, %class.KV.6** %6, align 8
  %141 = getelementptr inbounds %class.KV.6, %class.KV.6* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.7*, %class.KV.7** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %143, %class.KV.7* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj6EEeqERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.6*, %class.KV.6** %4, align 8
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %15 to %class.KV.7**
  %17 = load %class.KV.7*, %class.KV.7** %16, align 8
  %18 = load %class.KV.6*, %class.KV.6** %4, align 8
  %19 = getelementptr inbounds %class.KV.6, %class.KV.6* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %19 to %class.KV.7**
  %21 = load %class.KV.7*, %class.KV.7** %20, align 8
  %22 = icmp eq %class.KV.7* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE12remove_innerERKS1_yPKS0_Py(%class.KV.7* noalias sret, %class.KV.7* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.7*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.8, align 8
  %19 = alloca %class.KV.8*, align 8
  store %class.KV.7* %1, %class.KV.7** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.7*, %class.KV.7** %6, align 8
  %21 = getelementptr inbounds %class.KV.7, %class.KV.7* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %21 to %class.KV.8**
  %23 = load %class.KV.8*, %class.KV.8** %22, align 8
  store %class.KV.8* %23, %class.KV.8** %10, align 8
  %24 = load %class.KV.7*, %class.KV.7** %6, align 8
  %25 = getelementptr inbounds %class.KV.7, %class.KV.7* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.8*, %class.KV.8** %10, align 8
  %57 = getelementptr inbounds %class.KV.8, %class.KV.8* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.8, %class.KV.8* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.8*, %class.KV.8** %10, align 8
  %67 = getelementptr inbounds %class.KV.8, %class.KV.8* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.8, %class.KV.8* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.8*
  store %class.KV.8* %82, %class.KV.8** %16, align 8
  %83 = load %class.KV.8*, %class.KV.8** %16, align 8
  %84 = bitcast %class.KV.8* %83 to i8*
  %85 = load %class.KV.8*, %class.KV.8** %10, align 8
  %86 = bitcast %class.KV.8* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.8*, %class.KV.8** %16, align 8
  %93 = getelementptr inbounds %class.KV.8, %class.KV.8* %92, i64 %91
  %94 = bitcast %class.KV.8* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.8*, %class.KV.8** %10, align 8
  %99 = getelementptr inbounds %class.KV.8, %class.KV.8* %98, i64 %97
  %100 = bitcast %class.KV.8* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.8*, %class.KV.8** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %115, %class.KV.8* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.8*, %class.KV.8** %10, align 8
  %123 = getelementptr inbounds %class.KV.8, %class.KV.8* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE12remove_innerERKS1_yPKS0_Py(%class.KV.8* sret %18, %class.KV.8* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.8*, %class.KV.8** %10, align 8
  %131 = getelementptr inbounds %class.KV.8, %class.KV.8* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj8EEeqERKS1_(%class.KV.8* %18, %class.KV.8* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.8*, %class.KV.8** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %136, i32 %137, i32 %138, %class.KV.8* dereferenceable(16) %18)
  store %class.KV.8* %139, %class.KV.8** %19, align 8
  %140 = load %class.KV.7*, %class.KV.7** %6, align 8
  %141 = getelementptr inbounds %class.KV.7, %class.KV.7* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.8*, %class.KV.8** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %143, %class.KV.8* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj7EEeqERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.7*, %class.KV.7** %4, align 8
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %15 to %class.KV.8**
  %17 = load %class.KV.8*, %class.KV.8** %16, align 8
  %18 = load %class.KV.7*, %class.KV.7** %4, align 8
  %19 = getelementptr inbounds %class.KV.7, %class.KV.7* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %19 to %class.KV.8**
  %21 = load %class.KV.8*, %class.KV.8** %20, align 8
  %22 = icmp eq %class.KV.8* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE12remove_innerERKS1_yPKS0_Py(%class.KV.8* noalias sret, %class.KV.8* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.9*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.9*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.9, align 8
  %19 = alloca %class.KV.9*, align 8
  store %class.KV.8* %1, %class.KV.8** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.8*, %class.KV.8** %6, align 8
  %21 = getelementptr inbounds %class.KV.8, %class.KV.8* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %21 to %class.KV.9**
  %23 = load %class.KV.9*, %class.KV.9** %22, align 8
  store %class.KV.9* %23, %class.KV.9** %10, align 8
  %24 = load %class.KV.8*, %class.KV.8** %6, align 8
  %25 = getelementptr inbounds %class.KV.8, %class.KV.8* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.9*, %class.KV.9** %10, align 8
  %57 = getelementptr inbounds %class.KV.9, %class.KV.9* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.9, %class.KV.9* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.9*, %class.KV.9** %10, align 8
  %67 = getelementptr inbounds %class.KV.9, %class.KV.9* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.9, %class.KV.9* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.9*
  store %class.KV.9* %82, %class.KV.9** %16, align 8
  %83 = load %class.KV.9*, %class.KV.9** %16, align 8
  %84 = bitcast %class.KV.9* %83 to i8*
  %85 = load %class.KV.9*, %class.KV.9** %10, align 8
  %86 = bitcast %class.KV.9* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.9*, %class.KV.9** %16, align 8
  %93 = getelementptr inbounds %class.KV.9, %class.KV.9* %92, i64 %91
  %94 = bitcast %class.KV.9* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.9*, %class.KV.9** %10, align 8
  %99 = getelementptr inbounds %class.KV.9, %class.KV.9* %98, i64 %97
  %100 = bitcast %class.KV.9* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.9*, %class.KV.9** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %115, %class.KV.9* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.9*, %class.KV.9** %10, align 8
  %123 = getelementptr inbounds %class.KV.9, %class.KV.9* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE12remove_innerERKS1_yPKS0_Py(%class.KV.9* sret %18, %class.KV.9* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.9*, %class.KV.9** %10, align 8
  %131 = getelementptr inbounds %class.KV.9, %class.KV.9* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj9EEeqERKS1_(%class.KV.9* %18, %class.KV.9* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.9*, %class.KV.9** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %136, i32 %137, i32 %138, %class.KV.9* dereferenceable(16) %18)
  store %class.KV.9* %139, %class.KV.9** %19, align 8
  %140 = load %class.KV.8*, %class.KV.8** %6, align 8
  %141 = getelementptr inbounds %class.KV.8, %class.KV.8* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.9*, %class.KV.9** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %143, %class.KV.9* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj8EEeqERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.8*, %class.KV.8** %4, align 8
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %15 to %class.KV.9**
  %17 = load %class.KV.9*, %class.KV.9** %16, align 8
  %18 = load %class.KV.8*, %class.KV.8** %4, align 8
  %19 = getelementptr inbounds %class.KV.8, %class.KV.8* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %19 to %class.KV.9**
  %21 = load %class.KV.9*, %class.KV.9** %20, align 8
  %22 = icmp eq %class.KV.9* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE12remove_innerERKS1_yPKS0_Py(%class.KV.9* noalias sret, %class.KV.9* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.9*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.10*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.10*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.10, align 8
  %19 = alloca %class.KV.10*, align 8
  store %class.KV.9* %1, %class.KV.9** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.9*, %class.KV.9** %6, align 8
  %21 = getelementptr inbounds %class.KV.9, %class.KV.9* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %21 to %class.KV.10**
  %23 = load %class.KV.10*, %class.KV.10** %22, align 8
  store %class.KV.10* %23, %class.KV.10** %10, align 8
  %24 = load %class.KV.9*, %class.KV.9** %6, align 8
  %25 = getelementptr inbounds %class.KV.9, %class.KV.9* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.10*, %class.KV.10** %10, align 8
  %57 = getelementptr inbounds %class.KV.10, %class.KV.10* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.10, %class.KV.10* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.10*, %class.KV.10** %10, align 8
  %67 = getelementptr inbounds %class.KV.10, %class.KV.10* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.10, %class.KV.10* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.10*
  store %class.KV.10* %82, %class.KV.10** %16, align 8
  %83 = load %class.KV.10*, %class.KV.10** %16, align 8
  %84 = bitcast %class.KV.10* %83 to i8*
  %85 = load %class.KV.10*, %class.KV.10** %10, align 8
  %86 = bitcast %class.KV.10* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.10*, %class.KV.10** %16, align 8
  %93 = getelementptr inbounds %class.KV.10, %class.KV.10* %92, i64 %91
  %94 = bitcast %class.KV.10* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.10*, %class.KV.10** %10, align 8
  %99 = getelementptr inbounds %class.KV.10, %class.KV.10* %98, i64 %97
  %100 = bitcast %class.KV.10* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.10*, %class.KV.10** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %115, %class.KV.10* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.10*, %class.KV.10** %10, align 8
  %123 = getelementptr inbounds %class.KV.10, %class.KV.10* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE12remove_innerERKS1_yPKS0_Py(%class.KV.10* sret %18, %class.KV.10* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.10*, %class.KV.10** %10, align 8
  %131 = getelementptr inbounds %class.KV.10, %class.KV.10* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj10EEeqERKS1_(%class.KV.10* %18, %class.KV.10* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.10*, %class.KV.10** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %136, i32 %137, i32 %138, %class.KV.10* dereferenceable(16) %18)
  store %class.KV.10* %139, %class.KV.10** %19, align 8
  %140 = load %class.KV.9*, %class.KV.9** %6, align 8
  %141 = getelementptr inbounds %class.KV.9, %class.KV.9* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.10*, %class.KV.10** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %143, %class.KV.10* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj9EEeqERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.9*, %class.KV.9** %4, align 8
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %15 to %class.KV.10**
  %17 = load %class.KV.10*, %class.KV.10** %16, align 8
  %18 = load %class.KV.9*, %class.KV.9** %4, align 8
  %19 = getelementptr inbounds %class.KV.9, %class.KV.9* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %19 to %class.KV.10**
  %21 = load %class.KV.10*, %class.KV.10** %20, align 8
  %22 = icmp eq %class.KV.10* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE12remove_innerERKS1_yPKS0_Py(%class.KV.10* noalias sret, %class.KV.10* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.10*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.LL*, align 8
  store %class.KV.10* %1, %class.KV.10** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %11 = load %class.KV.10*, %class.KV.10** %6, align 8
  %12 = getelementptr inbounds %class.KV.10, %class.KV.10* %11, i32 0, i32 1
  %13 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %12 to %class.LL**
  %14 = load %class.LL*, %class.LL** %13, align 8
  %15 = icmp ne %class.LL* %14, null
  br i1 %15, label %16, label %34

; <label>:16                                      ; preds = %5
  %17 = load %class.KV.10*, %class.KV.10** %6, align 8
  %18 = getelementptr inbounds %class.KV.10, %class.KV.10* %17, i32 0, i32 1
  %19 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %18 to %class.LL**
  %20 = load %class.LL*, %class.LL** %19, align 8
  %21 = load %class.c_d*, %class.c_d** %8, align 8
  %22 = load i64*, i64** %9, align 8
  %23 = call %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL* %20, %class.c_d* %21, i64* %22)
  store %class.LL* %23, %class.LL** %10, align 8
  %24 = load %class.LL*, %class.LL** %10, align 8
  %25 = load %class.KV.10*, %class.KV.10** %6, align 8
  %26 = getelementptr inbounds %class.KV.10, %class.KV.10* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %26 to %class.LL**
  %28 = load %class.LL*, %class.LL** %27, align 8
  %29 = icmp eq %class.LL* %24, %28
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %16
  %31 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %0, %class.KV.10* dereferenceable(16) %31)
  br label %36

; <label>:32                                      ; preds = %16
  %33 = load %class.LL*, %class.LL** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %33)
  br label %36

; <label>:34                                      ; preds = %5
  %35 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %0, %class.KV.10* dereferenceable(16) %35)
  br label %36

; <label>:36                                      ; preds = %34, %32, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj10EEeqERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.10*, %class.KV.10** %4, align 8
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %15 to %class.c_d**
  %17 = load %class.c_d*, %class.c_d** %16, align 8
  %18 = load %class.KV.10*, %class.KV.10** %4, align 8
  %19 = getelementptr inbounds %class.KV.10, %class.KV.10* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %19 to %class.c_d**
  %21 = load %class.c_d*, %class.c_d** %20, align 8
  %22 = icmp eq %class.c_d* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL*, %class.c_d*, i64*) #0 align 2 {
  %4 = alloca %class.LL*, align 8
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store i64* %2, i64** %7, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %11 = load %class.c_d*, %class.c_d** %10, align 8
  %12 = load %class.c_d*, %class.c_d** %6, align 8
  %13 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %11, %class.c_d* dereferenceable(8) %12)
  br i1 %13, label %14, label %20

; <label>:14                                      ; preds = %3
  %15 = load i64*, i64** %7, align 8
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, -1
  store i64 %17, i64* %15, align 8
  %18 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %19 = load %class.LL*, %class.LL** %18, align 8
  store %class.LL* %19, %class.LL** %4, align 8
  br label %46

; <label>:20                                      ; preds = %3
  %21 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %22 = load %class.LL*, %class.LL** %21, align 8
  %23 = icmp ne %class.LL* %22, null
  br i1 %23, label %24, label %45

; <label>:24                                      ; preds = %20
  %25 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %26 = load %class.LL*, %class.LL** %25, align 8
  %27 = load %class.c_d*, %class.c_d** %6, align 8
  %28 = load i64*, i64** %7, align 8
  %29 = call %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL* %26, %class.c_d* %27, i64* %28)
  store %class.LL* %29, %class.LL** %8, align 8
  %30 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %31 = load %class.LL*, %class.LL** %30, align 8
  %32 = load %class.LL*, %class.LL** %8, align 8
  %33 = icmp eq %class.LL* %31, %32
  br i1 %33, label %34, label %35

; <label>:34                                      ; preds = %24
  store %class.LL* %9, %class.LL** %4, align 8
  br label %46

; <label>:35                                      ; preds = %24
  %36 = call i8* @malloc(i64 24)
  %37 = bitcast i8* %36 to %class.LL*
  %38 = bitcast %class.LL* %37 to i8*
  %39 = bitcast i8* %38 to %class.LL*
  %40 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %41 = load %class.c_d*, %class.c_d** %40, align 8
  %42 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 1
  %43 = load %class.c_d*, %class.c_d** %42, align 8
  %44 = load %class.LL*, %class.LL** %8, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %39, %class.c_d* %41, %class.c_d* %43, %class.LL* %44)
  store %class.LL* %39, %class.LL** %4, align 8
  br label %46

; <label>:45                                      ; preds = %20
  store %class.LL* %9, %class.LL** %4, align 8
  br label %46

; <label>:46                                      ; preds = %45, %35, %34, %14
  %47 = load %class.LL*, %class.LL** %4, align 8
  ret %class.LL* %47
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2ERKS1_(%class.KV*, %class.KV* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 0
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 1
  %12 = load %class.KV*, %class.KV** %4, align 8
  %13 = getelementptr inbounds %class.KV, %class.KV* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

attributes #0 = { ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noreturn }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"Apple LLVM version 8.0.0 (clang-800.0.38)"}


;;;;;;

define void @proc_main() {
  %cloptr8092650 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092651 = getelementptr inbounds i64, i64* %cloptr8092650, i64 0              ; &cloptr8092650[0]
  %f8092652 = ptrtoint void(i64,i64)* @lam8092648 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092652, i64* %eptr8092651                                             ; store fptr
  %arg8086207 = ptrtoint i64* %cloptr8092650 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092653 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092654 = getelementptr inbounds i64, i64* %cloptr8092653, i64 0              ; &cloptr8092653[0]
  %f8092655 = ptrtoint void(i64,i64)* @lam8092645 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092655, i64* %eptr8092654                                             ; store fptr
  %arg8086206 = ptrtoint i64* %cloptr8092653 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092656 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092657 = getelementptr inbounds i64, i64* %cloptr8092656, i64 0              ; &cloptr8092656[0]
  %f8092658 = ptrtoint void(i64,i64)* @lam8091015 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092658, i64* %eptr8092657                                             ; store fptr
  %arg8086205 = ptrtoint i64* %cloptr8092656 to i64                                  ; closure cast; i64* -> i64
  %rva8091000 = add i64 0, 0                                                         ; quoted ()
  %rva8090999 = call i64 @prim_cons(i64 %arg8086205, i64 %rva8091000)                ; call prim_cons
  %rva8090998 = call i64 @prim_cons(i64 %arg8086206, i64 %rva8090999)                ; call prim_cons
  %cloptr8092659 = inttoptr i64 %arg8086207 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8092660 = getelementptr inbounds i64, i64* %cloptr8092659, i64 0             ; &cloptr8092659[0]
  %f8092662 = load i64, i64* %i0ptr8092660, align 8                                  ; load; *i0ptr8092660
  %fptr8092661 = inttoptr i64 %f8092662 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092661(i64 %arg8086207, i64 %rva8090998)           ; tail call
  ret void
}


define i32 @main() {
  call fastcc void @proc_main()
  ret i32 0
}



define void @lam8092648(i64 %env8092649, i64 %rvp8088602) {
  %cont8086197 = call i64 @prim_car(i64 %rvp8088602)                                 ; call prim_car
  %rvp8088601 = call i64 @prim_cdr(i64 %rvp8088602)                                  ; call prim_cdr
  %d1b$yu = call i64 @prim_car(i64 %rvp8088601)                                      ; call prim_car
  %na8088597 = call i64 @prim_cdr(i64 %rvp8088601)                                   ; call prim_cdr
  %rva8088600 = add i64 0, 0                                                         ; quoted ()
  %rva8088599 = call i64 @prim_cons(i64 %d1b$yu, i64 %rva8088600)                    ; call prim_cons
  %rva8088598 = call i64 @prim_cons(i64 %cont8086197, i64 %rva8088599)               ; call prim_cons
  %cloptr8092663 = inttoptr i64 %d1b$yu to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8092664 = getelementptr inbounds i64, i64* %cloptr8092663, i64 0             ; &cloptr8092663[0]
  %f8092666 = load i64, i64* %i0ptr8092664, align 8                                  ; load; *i0ptr8092664
  %fptr8092665 = inttoptr i64 %f8092666 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092665(i64 %d1b$yu, i64 %rva8088598)               ; tail call
  ret void
}


define void @lam8092645(i64 %env8092646, i64 %rvp8090969) {
  %_958085927 = call i64 @prim_car(i64 %rvp8090969)                                  ; call prim_car
  %rvp8090968 = call i64 @prim_cdr(i64 %rvp8090969)                                  ; call prim_cdr
  %P1m$Ycmb = call i64 @prim_car(i64 %rvp8090968)                                    ; call prim_car
  %na8088604 = call i64 @prim_cdr(i64 %rvp8090968)                                   ; call prim_cdr
  %cloptr8092667 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8092669 = getelementptr inbounds i64, i64* %cloptr8092667, i64 1              ; &eptr8092669[1]
  store i64 %P1m$Ycmb, i64* %eptr8092669                                             ; *eptr8092669 = %P1m$Ycmb
  %eptr8092668 = getelementptr inbounds i64, i64* %cloptr8092667, i64 0              ; &cloptr8092667[0]
  %f8092670 = ptrtoint void(i64,i64)* @lam8092643 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092670, i64* %eptr8092668                                             ; store fptr
  %arg8086212 = ptrtoint i64* %cloptr8092667 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092671 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092672 = getelementptr inbounds i64, i64* %cloptr8092671, i64 0              ; &cloptr8092671[0]
  %f8092673 = ptrtoint void(i64,i64)* @lam8091028 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092673, i64* %eptr8092672                                             ; store fptr
  %arg8086211 = ptrtoint i64* %cloptr8092671 to i64                                  ; closure cast; i64* -> i64
  %rva8090967 = add i64 0, 0                                                         ; quoted ()
  %rva8090966 = call i64 @prim_cons(i64 %arg8086211, i64 %rva8090967)                ; call prim_cons
  %rva8090965 = call i64 @prim_cons(i64 %arg8086212, i64 %rva8090966)                ; call prim_cons
  %cloptr8092674 = inttoptr i64 %P1m$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8092675 = getelementptr inbounds i64, i64* %cloptr8092674, i64 0             ; &cloptr8092674[0]
  %f8092677 = load i64, i64* %i0ptr8092675, align 8                                  ; load; *i0ptr8092675
  %fptr8092676 = inttoptr i64 %f8092677 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092676(i64 %P1m$Ycmb, i64 %rva8090965)             ; tail call
  ret void
}


define void @lam8092643(i64 %env8092644, i64 %rvp8090935) {
  %envptr8092678 = inttoptr i64 %env8092644 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092679 = getelementptr inbounds i64, i64* %envptr8092678, i64 1            ; &envptr8092678[1]
  %P1m$Ycmb = load i64, i64* %envptr8092679, align 8                                 ; load; *envptr8092679
  %_958085928 = call i64 @prim_car(i64 %rvp8090935)                                  ; call prim_car
  %rvp8090934 = call i64 @prim_cdr(i64 %rvp8090935)                                  ; call prim_cdr
  %hHO$_37foldr1 = call i64 @prim_car(i64 %rvp8090934)                               ; call prim_car
  %na8088606 = call i64 @prim_cdr(i64 %rvp8090934)                                   ; call prim_cdr
  %cloptr8092680 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8092682 = getelementptr inbounds i64, i64* %cloptr8092680, i64 1              ; &eptr8092682[1]
  %eptr8092683 = getelementptr inbounds i64, i64* %cloptr8092680, i64 2              ; &eptr8092683[2]
  store i64 %P1m$Ycmb, i64* %eptr8092682                                             ; *eptr8092682 = %P1m$Ycmb
  store i64 %hHO$_37foldr1, i64* %eptr8092683                                        ; *eptr8092683 = %hHO$_37foldr1
  %eptr8092681 = getelementptr inbounds i64, i64* %cloptr8092680, i64 0              ; &cloptr8092680[0]
  %f8092684 = ptrtoint void(i64,i64)* @lam8092641 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092684, i64* %eptr8092681                                             ; store fptr
  %arg8086215 = ptrtoint i64* %cloptr8092680 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092685 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092686 = getelementptr inbounds i64, i64* %cloptr8092685, i64 0              ; &cloptr8092685[0]
  %f8092687 = ptrtoint void(i64,i64)* @lam8091046 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092687, i64* %eptr8092686                                             ; store fptr
  %arg8086214 = ptrtoint i64* %cloptr8092685 to i64                                  ; closure cast; i64* -> i64
  %rva8090933 = add i64 0, 0                                                         ; quoted ()
  %rva8090932 = call i64 @prim_cons(i64 %arg8086214, i64 %rva8090933)                ; call prim_cons
  %rva8090931 = call i64 @prim_cons(i64 %arg8086215, i64 %rva8090932)                ; call prim_cons
  %cloptr8092688 = inttoptr i64 %P1m$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8092689 = getelementptr inbounds i64, i64* %cloptr8092688, i64 0             ; &cloptr8092688[0]
  %f8092691 = load i64, i64* %i0ptr8092689, align 8                                  ; load; *i0ptr8092689
  %fptr8092690 = inttoptr i64 %f8092691 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092690(i64 %P1m$Ycmb, i64 %rva8090931)             ; tail call
  ret void
}


define void @lam8092641(i64 %env8092642, i64 %rvp8090897) {
  %envptr8092692 = inttoptr i64 %env8092642 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092693 = getelementptr inbounds i64, i64* %envptr8092692, i64 2            ; &envptr8092692[2]
  %hHO$_37foldr1 = load i64, i64* %envptr8092693, align 8                            ; load; *envptr8092693
  %envptr8092694 = inttoptr i64 %env8092642 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092695 = getelementptr inbounds i64, i64* %envptr8092694, i64 1            ; &envptr8092694[1]
  %P1m$Ycmb = load i64, i64* %envptr8092695, align 8                                 ; load; *envptr8092695
  %_958085929 = call i64 @prim_car(i64 %rvp8090897)                                  ; call prim_car
  %rvp8090896 = call i64 @prim_cdr(i64 %rvp8090897)                                  ; call prim_cdr
  %C1x$_37map1 = call i64 @prim_car(i64 %rvp8090896)                                 ; call prim_car
  %na8088608 = call i64 @prim_cdr(i64 %rvp8090896)                                   ; call prim_cdr
  %cloptr8092696 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8092698 = getelementptr inbounds i64, i64* %cloptr8092696, i64 1              ; &eptr8092698[1]
  %eptr8092699 = getelementptr inbounds i64, i64* %cloptr8092696, i64 2              ; &eptr8092699[2]
  %eptr8092700 = getelementptr inbounds i64, i64* %cloptr8092696, i64 3              ; &eptr8092700[3]
  store i64 %P1m$Ycmb, i64* %eptr8092698                                             ; *eptr8092698 = %P1m$Ycmb
  store i64 %hHO$_37foldr1, i64* %eptr8092699                                        ; *eptr8092699 = %hHO$_37foldr1
  store i64 %C1x$_37map1, i64* %eptr8092700                                          ; *eptr8092700 = %C1x$_37map1
  %eptr8092697 = getelementptr inbounds i64, i64* %cloptr8092696, i64 0              ; &cloptr8092696[0]
  %f8092701 = ptrtoint void(i64,i64)* @lam8092639 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092701, i64* %eptr8092697                                             ; store fptr
  %arg8086218 = ptrtoint i64* %cloptr8092696 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092702 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092703 = getelementptr inbounds i64, i64* %cloptr8092702, i64 0              ; &cloptr8092702[0]
  %f8092704 = ptrtoint void(i64,i64)* @lam8091066 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092704, i64* %eptr8092703                                             ; store fptr
  %arg8086217 = ptrtoint i64* %cloptr8092702 to i64                                  ; closure cast; i64* -> i64
  %rva8090895 = add i64 0, 0                                                         ; quoted ()
  %rva8090894 = call i64 @prim_cons(i64 %arg8086217, i64 %rva8090895)                ; call prim_cons
  %rva8090893 = call i64 @prim_cons(i64 %arg8086218, i64 %rva8090894)                ; call prim_cons
  %cloptr8092705 = inttoptr i64 %P1m$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8092706 = getelementptr inbounds i64, i64* %cloptr8092705, i64 0             ; &cloptr8092705[0]
  %f8092708 = load i64, i64* %i0ptr8092706, align 8                                  ; load; *i0ptr8092706
  %fptr8092707 = inttoptr i64 %f8092708 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092707(i64 %P1m$Ycmb, i64 %rva8090893)             ; tail call
  ret void
}


define void @lam8092639(i64 %env8092640, i64 %rvp8090863) {
  %envptr8092709 = inttoptr i64 %env8092640 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092710 = getelementptr inbounds i64, i64* %envptr8092709, i64 3            ; &envptr8092709[3]
  %C1x$_37map1 = load i64, i64* %envptr8092710, align 8                              ; load; *envptr8092710
  %envptr8092711 = inttoptr i64 %env8092640 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092712 = getelementptr inbounds i64, i64* %envptr8092711, i64 2            ; &envptr8092711[2]
  %hHO$_37foldr1 = load i64, i64* %envptr8092712, align 8                            ; load; *envptr8092712
  %envptr8092713 = inttoptr i64 %env8092640 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092714 = getelementptr inbounds i64, i64* %envptr8092713, i64 1            ; &envptr8092713[1]
  %P1m$Ycmb = load i64, i64* %envptr8092714, align 8                                 ; load; *envptr8092714
  %_958085930 = call i64 @prim_car(i64 %rvp8090863)                                  ; call prim_car
  %rvp8090862 = call i64 @prim_cdr(i64 %rvp8090863)                                  ; call prim_cdr
  %ine$_37take = call i64 @prim_car(i64 %rvp8090862)                                 ; call prim_car
  %na8088610 = call i64 @prim_cdr(i64 %rvp8090862)                                   ; call prim_cdr
  %cloptr8092715 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8092717 = getelementptr inbounds i64, i64* %cloptr8092715, i64 1              ; &eptr8092717[1]
  %eptr8092718 = getelementptr inbounds i64, i64* %cloptr8092715, i64 2              ; &eptr8092718[2]
  %eptr8092719 = getelementptr inbounds i64, i64* %cloptr8092715, i64 3              ; &eptr8092719[3]
  %eptr8092720 = getelementptr inbounds i64, i64* %cloptr8092715, i64 4              ; &eptr8092720[4]
  store i64 %P1m$Ycmb, i64* %eptr8092717                                             ; *eptr8092717 = %P1m$Ycmb
  store i64 %hHO$_37foldr1, i64* %eptr8092718                                        ; *eptr8092718 = %hHO$_37foldr1
  store i64 %ine$_37take, i64* %eptr8092719                                          ; *eptr8092719 = %ine$_37take
  store i64 %C1x$_37map1, i64* %eptr8092720                                          ; *eptr8092720 = %C1x$_37map1
  %eptr8092716 = getelementptr inbounds i64, i64* %cloptr8092715, i64 0              ; &cloptr8092715[0]
  %f8092721 = ptrtoint void(i64,i64)* @lam8092637 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092721, i64* %eptr8092716                                             ; store fptr
  %arg8086221 = ptrtoint i64* %cloptr8092715 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092722 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092723 = getelementptr inbounds i64, i64* %cloptr8092722, i64 0              ; &cloptr8092722[0]
  %f8092724 = ptrtoint void(i64,i64)* @lam8091082 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092724, i64* %eptr8092723                                             ; store fptr
  %arg8086220 = ptrtoint i64* %cloptr8092722 to i64                                  ; closure cast; i64* -> i64
  %rva8090861 = add i64 0, 0                                                         ; quoted ()
  %rva8090860 = call i64 @prim_cons(i64 %arg8086220, i64 %rva8090861)                ; call prim_cons
  %rva8090859 = call i64 @prim_cons(i64 %arg8086221, i64 %rva8090860)                ; call prim_cons
  %cloptr8092725 = inttoptr i64 %P1m$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8092726 = getelementptr inbounds i64, i64* %cloptr8092725, i64 0             ; &cloptr8092725[0]
  %f8092728 = load i64, i64* %i0ptr8092726, align 8                                  ; load; *i0ptr8092726
  %fptr8092727 = inttoptr i64 %f8092728 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092727(i64 %P1m$Ycmb, i64 %rva8090859)             ; tail call
  ret void
}


define void @lam8092637(i64 %env8092638, i64 %rvp8090834) {
  %envptr8092729 = inttoptr i64 %env8092638 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092730 = getelementptr inbounds i64, i64* %envptr8092729, i64 4            ; &envptr8092729[4]
  %C1x$_37map1 = load i64, i64* %envptr8092730, align 8                              ; load; *envptr8092730
  %envptr8092731 = inttoptr i64 %env8092638 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092732 = getelementptr inbounds i64, i64* %envptr8092731, i64 3            ; &envptr8092731[3]
  %ine$_37take = load i64, i64* %envptr8092732, align 8                              ; load; *envptr8092732
  %envptr8092733 = inttoptr i64 %env8092638 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092734 = getelementptr inbounds i64, i64* %envptr8092733, i64 2            ; &envptr8092733[2]
  %hHO$_37foldr1 = load i64, i64* %envptr8092734, align 8                            ; load; *envptr8092734
  %envptr8092735 = inttoptr i64 %env8092638 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092736 = getelementptr inbounds i64, i64* %envptr8092735, i64 1            ; &envptr8092735[1]
  %P1m$Ycmb = load i64, i64* %envptr8092736, align 8                                 ; load; *envptr8092736
  %_958085931 = call i64 @prim_car(i64 %rvp8090834)                                  ; call prim_car
  %rvp8090833 = call i64 @prim_cdr(i64 %rvp8090834)                                  ; call prim_cdr
  %XOr$_37length = call i64 @prim_car(i64 %rvp8090833)                               ; call prim_car
  %na8088612 = call i64 @prim_cdr(i64 %rvp8090833)                                   ; call prim_cdr
  %cloptr8092737 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr8092739 = getelementptr inbounds i64, i64* %cloptr8092737, i64 1              ; &eptr8092739[1]
  %eptr8092740 = getelementptr inbounds i64, i64* %cloptr8092737, i64 2              ; &eptr8092740[2]
  %eptr8092741 = getelementptr inbounds i64, i64* %cloptr8092737, i64 3              ; &eptr8092741[3]
  %eptr8092742 = getelementptr inbounds i64, i64* %cloptr8092737, i64 4              ; &eptr8092742[4]
  %eptr8092743 = getelementptr inbounds i64, i64* %cloptr8092737, i64 5              ; &eptr8092743[5]
  store i64 %P1m$Ycmb, i64* %eptr8092739                                             ; *eptr8092739 = %P1m$Ycmb
  store i64 %hHO$_37foldr1, i64* %eptr8092740                                        ; *eptr8092740 = %hHO$_37foldr1
  store i64 %ine$_37take, i64* %eptr8092741                                          ; *eptr8092741 = %ine$_37take
  store i64 %XOr$_37length, i64* %eptr8092742                                        ; *eptr8092742 = %XOr$_37length
  store i64 %C1x$_37map1, i64* %eptr8092743                                          ; *eptr8092743 = %C1x$_37map1
  %eptr8092738 = getelementptr inbounds i64, i64* %cloptr8092737, i64 0              ; &cloptr8092737[0]
  %f8092744 = ptrtoint void(i64,i64)* @lam8092635 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092744, i64* %eptr8092738                                             ; store fptr
  %arg8086224 = ptrtoint i64* %cloptr8092737 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092745 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092746 = getelementptr inbounds i64, i64* %cloptr8092745, i64 0              ; &cloptr8092745[0]
  %f8092747 = ptrtoint void(i64,i64)* @lam8091095 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092747, i64* %eptr8092746                                             ; store fptr
  %arg8086223 = ptrtoint i64* %cloptr8092745 to i64                                  ; closure cast; i64* -> i64
  %rva8090832 = add i64 0, 0                                                         ; quoted ()
  %rva8090831 = call i64 @prim_cons(i64 %arg8086223, i64 %rva8090832)                ; call prim_cons
  %rva8090830 = call i64 @prim_cons(i64 %arg8086224, i64 %rva8090831)                ; call prim_cons
  %cloptr8092748 = inttoptr i64 %P1m$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8092749 = getelementptr inbounds i64, i64* %cloptr8092748, i64 0             ; &cloptr8092748[0]
  %f8092751 = load i64, i64* %i0ptr8092749, align 8                                  ; load; *i0ptr8092749
  %fptr8092750 = inttoptr i64 %f8092751 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092750(i64 %P1m$Ycmb, i64 %rva8090830)             ; tail call
  ret void
}


define void @lam8092635(i64 %env8092636, i64 %rvp8090800) {
  %envptr8092752 = inttoptr i64 %env8092636 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092753 = getelementptr inbounds i64, i64* %envptr8092752, i64 5            ; &envptr8092752[5]
  %C1x$_37map1 = load i64, i64* %envptr8092753, align 8                              ; load; *envptr8092753
  %envptr8092754 = inttoptr i64 %env8092636 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092755 = getelementptr inbounds i64, i64* %envptr8092754, i64 4            ; &envptr8092754[4]
  %XOr$_37length = load i64, i64* %envptr8092755, align 8                            ; load; *envptr8092755
  %envptr8092756 = inttoptr i64 %env8092636 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092757 = getelementptr inbounds i64, i64* %envptr8092756, i64 3            ; &envptr8092756[3]
  %ine$_37take = load i64, i64* %envptr8092757, align 8                              ; load; *envptr8092757
  %envptr8092758 = inttoptr i64 %env8092636 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092759 = getelementptr inbounds i64, i64* %envptr8092758, i64 2            ; &envptr8092758[2]
  %hHO$_37foldr1 = load i64, i64* %envptr8092759, align 8                            ; load; *envptr8092759
  %envptr8092760 = inttoptr i64 %env8092636 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092761 = getelementptr inbounds i64, i64* %envptr8092760, i64 1            ; &envptr8092760[1]
  %P1m$Ycmb = load i64, i64* %envptr8092761, align 8                                 ; load; *envptr8092761
  %_958085932 = call i64 @prim_car(i64 %rvp8090800)                                  ; call prim_car
  %rvp8090799 = call i64 @prim_cdr(i64 %rvp8090800)                                  ; call prim_cdr
  %EvB$_37foldl1 = call i64 @prim_car(i64 %rvp8090799)                               ; call prim_car
  %na8088614 = call i64 @prim_cdr(i64 %rvp8090799)                                   ; call prim_cdr
  %cloptr8092762 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8092764 = getelementptr inbounds i64, i64* %cloptr8092762, i64 1              ; &eptr8092764[1]
  store i64 %EvB$_37foldl1, i64* %eptr8092764                                        ; *eptr8092764 = %EvB$_37foldl1
  %eptr8092763 = getelementptr inbounds i64, i64* %cloptr8092762, i64 0              ; &cloptr8092762[0]
  %f8092765 = ptrtoint void(i64,i64)* @lam8092633 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092765, i64* %eptr8092763                                             ; store fptr
  %EaL$_37last = ptrtoint i64* %cloptr8092762 to i64                                 ; closure cast; i64* -> i64
  %cloptr8092766 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8092768 = getelementptr inbounds i64, i64* %cloptr8092766, i64 1              ; &eptr8092768[1]
  %eptr8092769 = getelementptr inbounds i64, i64* %cloptr8092766, i64 2              ; &eptr8092769[2]
  store i64 %ine$_37take, i64* %eptr8092768                                          ; *eptr8092768 = %ine$_37take
  store i64 %XOr$_37length, i64* %eptr8092769                                        ; *eptr8092769 = %XOr$_37length
  %eptr8092767 = getelementptr inbounds i64, i64* %cloptr8092766, i64 0              ; &cloptr8092766[0]
  %f8092770 = ptrtoint void(i64,i64)* @lam8092625 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092770, i64* %eptr8092767                                             ; store fptr
  %OWP$_37drop_45right = ptrtoint i64* %cloptr8092766 to i64                         ; closure cast; i64* -> i64
  %cloptr8092771 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8092773 = getelementptr inbounds i64, i64* %cloptr8092771, i64 1              ; &eptr8092773[1]
  %eptr8092774 = getelementptr inbounds i64, i64* %cloptr8092771, i64 2              ; &eptr8092774[2]
  %eptr8092775 = getelementptr inbounds i64, i64* %cloptr8092771, i64 3              ; &eptr8092775[3]
  %eptr8092776 = getelementptr inbounds i64, i64* %cloptr8092771, i64 4              ; &eptr8092776[4]
  %eptr8092777 = getelementptr inbounds i64, i64* %cloptr8092771, i64 5              ; &eptr8092777[5]
  %eptr8092778 = getelementptr inbounds i64, i64* %cloptr8092771, i64 6              ; &eptr8092778[6]
  store i64 %P1m$Ycmb, i64* %eptr8092773                                             ; *eptr8092773 = %P1m$Ycmb
  store i64 %EvB$_37foldl1, i64* %eptr8092774                                        ; *eptr8092774 = %EvB$_37foldl1
  store i64 %hHO$_37foldr1, i64* %eptr8092775                                        ; *eptr8092775 = %hHO$_37foldr1
  store i64 %EaL$_37last, i64* %eptr8092776                                          ; *eptr8092776 = %EaL$_37last
  store i64 %OWP$_37drop_45right, i64* %eptr8092777                                  ; *eptr8092777 = %OWP$_37drop_45right
  store i64 %XOr$_37length, i64* %eptr8092778                                        ; *eptr8092778 = %XOr$_37length
  %eptr8092772 = getelementptr inbounds i64, i64* %cloptr8092771, i64 0              ; &cloptr8092771[0]
  %f8092779 = ptrtoint void(i64,i64)* @lam8092619 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092779, i64* %eptr8092772                                             ; store fptr
  %arg8086244 = ptrtoint i64* %cloptr8092771 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092780 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8092782 = getelementptr inbounds i64, i64* %cloptr8092780, i64 1              ; &eptr8092782[1]
  %eptr8092783 = getelementptr inbounds i64, i64* %cloptr8092780, i64 2              ; &eptr8092783[2]
  store i64 %hHO$_37foldr1, i64* %eptr8092782                                        ; *eptr8092782 = %hHO$_37foldr1
  store i64 %C1x$_37map1, i64* %eptr8092783                                          ; *eptr8092783 = %C1x$_37map1
  %eptr8092781 = getelementptr inbounds i64, i64* %cloptr8092780, i64 0              ; &cloptr8092780[0]
  %f8092784 = ptrtoint void(i64,i64)* @lam8091146 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092784, i64* %eptr8092781                                             ; store fptr
  %arg8086243 = ptrtoint i64* %cloptr8092780 to i64                                  ; closure cast; i64* -> i64
  %rva8090798 = add i64 0, 0                                                         ; quoted ()
  %rva8090797 = call i64 @prim_cons(i64 %arg8086243, i64 %rva8090798)                ; call prim_cons
  %rva8090796 = call i64 @prim_cons(i64 %arg8086244, i64 %rva8090797)                ; call prim_cons
  %cloptr8092785 = inttoptr i64 %P1m$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8092786 = getelementptr inbounds i64, i64* %cloptr8092785, i64 0             ; &cloptr8092785[0]
  %f8092788 = load i64, i64* %i0ptr8092786, align 8                                  ; load; *i0ptr8092786
  %fptr8092787 = inttoptr i64 %f8092788 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092787(i64 %P1m$Ycmb, i64 %rva8090796)             ; tail call
  ret void
}


define void @lam8092633(i64 %env8092634, i64 %rvp8088631) {
  %envptr8092789 = inttoptr i64 %env8092634 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092790 = getelementptr inbounds i64, i64* %envptr8092789, i64 1            ; &envptr8092789[1]
  %EvB$_37foldl1 = load i64, i64* %envptr8092790, align 8                            ; load; *envptr8092790
  %cont8085933 = call i64 @prim_car(i64 %rvp8088631)                                 ; call prim_car
  %rvp8088630 = call i64 @prim_cdr(i64 %rvp8088631)                                  ; call prim_cdr
  %jCr$lst = call i64 @prim_car(i64 %rvp8088630)                                     ; call prim_car
  %na8088616 = call i64 @prim_cdr(i64 %rvp8088630)                                   ; call prim_cdr
  %cloptr8092791 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092792 = getelementptr inbounds i64, i64* %cloptr8092791, i64 0              ; &cloptr8092791[0]
  %f8092793 = ptrtoint void(i64,i64)* @lam8092631 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092793, i64* %eptr8092792                                             ; store fptr
  %arg8086228 = ptrtoint i64* %cloptr8092791 to i64                                  ; closure cast; i64* -> i64
  %arg8086227 = add i64 0, 0                                                         ; quoted ()
  %rva8088629 = add i64 0, 0                                                         ; quoted ()
  %rva8088628 = call i64 @prim_cons(i64 %jCr$lst, i64 %rva8088629)                   ; call prim_cons
  %rva8088627 = call i64 @prim_cons(i64 %arg8086227, i64 %rva8088628)                ; call prim_cons
  %rva8088626 = call i64 @prim_cons(i64 %arg8086228, i64 %rva8088627)                ; call prim_cons
  %rva8088625 = call i64 @prim_cons(i64 %cont8085933, i64 %rva8088626)               ; call prim_cons
  %cloptr8092794 = inttoptr i64 %EvB$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8092795 = getelementptr inbounds i64, i64* %cloptr8092794, i64 0             ; &cloptr8092794[0]
  %f8092797 = load i64, i64* %i0ptr8092795, align 8                                  ; load; *i0ptr8092795
  %fptr8092796 = inttoptr i64 %f8092797 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092796(i64 %EvB$_37foldl1, i64 %rva8088625)        ; tail call
  ret void
}


define void @lam8092631(i64 %env8092632, i64 %rvp8088624) {
  %cont8085934 = call i64 @prim_car(i64 %rvp8088624)                                 ; call prim_car
  %rvp8088623 = call i64 @prim_cdr(i64 %rvp8088624)                                  ; call prim_cdr
  %puQ$x = call i64 @prim_car(i64 %rvp8088623)                                       ; call prim_car
  %rvp8088622 = call i64 @prim_cdr(i64 %rvp8088623)                                  ; call prim_cdr
  %snO$y = call i64 @prim_car(i64 %rvp8088622)                                       ; call prim_car
  %na8088618 = call i64 @prim_cdr(i64 %rvp8088622)                                   ; call prim_cdr
  %arg8086232 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088621 = add i64 0, 0                                                         ; quoted ()
  %rva8088620 = call i64 @prim_cons(i64 %puQ$x, i64 %rva8088621)                     ; call prim_cons
  %rva8088619 = call i64 @prim_cons(i64 %arg8086232, i64 %rva8088620)                ; call prim_cons
  %cloptr8092798 = inttoptr i64 %cont8085934 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8092799 = getelementptr inbounds i64, i64* %cloptr8092798, i64 0             ; &cloptr8092798[0]
  %f8092801 = load i64, i64* %i0ptr8092799, align 8                                  ; load; *i0ptr8092799
  %fptr8092800 = inttoptr i64 %f8092801 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092800(i64 %cont8085934, i64 %rva8088619)          ; tail call
  ret void
}


define void @lam8092625(i64 %env8092626, i64 %rvp8088647) {
  %envptr8092802 = inttoptr i64 %env8092626 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092803 = getelementptr inbounds i64, i64* %envptr8092802, i64 2            ; &envptr8092802[2]
  %XOr$_37length = load i64, i64* %envptr8092803, align 8                            ; load; *envptr8092803
  %envptr8092804 = inttoptr i64 %env8092626 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092805 = getelementptr inbounds i64, i64* %envptr8092804, i64 1            ; &envptr8092804[1]
  %ine$_37take = load i64, i64* %envptr8092805, align 8                              ; load; *envptr8092805
  %cont8085935 = call i64 @prim_car(i64 %rvp8088647)                                 ; call prim_car
  %rvp8088646 = call i64 @prim_cdr(i64 %rvp8088647)                                  ; call prim_cdr
  %WdA$lst = call i64 @prim_car(i64 %rvp8088646)                                     ; call prim_car
  %rvp8088645 = call i64 @prim_cdr(i64 %rvp8088646)                                  ; call prim_cdr
  %B3F$n = call i64 @prim_car(i64 %rvp8088645)                                       ; call prim_car
  %na8088633 = call i64 @prim_cdr(i64 %rvp8088645)                                   ; call prim_cdr
  %cloptr8092806 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8092808 = getelementptr inbounds i64, i64* %cloptr8092806, i64 1              ; &eptr8092808[1]
  %eptr8092809 = getelementptr inbounds i64, i64* %cloptr8092806, i64 2              ; &eptr8092809[2]
  %eptr8092810 = getelementptr inbounds i64, i64* %cloptr8092806, i64 3              ; &eptr8092810[3]
  %eptr8092811 = getelementptr inbounds i64, i64* %cloptr8092806, i64 4              ; &eptr8092811[4]
  store i64 %B3F$n, i64* %eptr8092808                                                ; *eptr8092808 = %B3F$n
  store i64 %WdA$lst, i64* %eptr8092809                                              ; *eptr8092809 = %WdA$lst
  store i64 %ine$_37take, i64* %eptr8092810                                          ; *eptr8092810 = %ine$_37take
  store i64 %cont8085935, i64* %eptr8092811                                          ; *eptr8092811 = %cont8085935
  %eptr8092807 = getelementptr inbounds i64, i64* %cloptr8092806, i64 0              ; &cloptr8092806[0]
  %f8092812 = ptrtoint void(i64,i64)* @lam8092623 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092812, i64* %eptr8092807                                             ; store fptr
  %arg8086235 = ptrtoint i64* %cloptr8092806 to i64                                  ; closure cast; i64* -> i64
  %rva8088644 = add i64 0, 0                                                         ; quoted ()
  %rva8088643 = call i64 @prim_cons(i64 %WdA$lst, i64 %rva8088644)                   ; call prim_cons
  %rva8088642 = call i64 @prim_cons(i64 %arg8086235, i64 %rva8088643)                ; call prim_cons
  %cloptr8092813 = inttoptr i64 %XOr$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8092814 = getelementptr inbounds i64, i64* %cloptr8092813, i64 0             ; &cloptr8092813[0]
  %f8092816 = load i64, i64* %i0ptr8092814, align 8                                  ; load; *i0ptr8092814
  %fptr8092815 = inttoptr i64 %f8092816 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092815(i64 %XOr$_37length, i64 %rva8088642)        ; tail call
  ret void
}


define void @lam8092623(i64 %env8092624, i64 %rvp8088641) {
  %envptr8092817 = inttoptr i64 %env8092624 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092818 = getelementptr inbounds i64, i64* %envptr8092817, i64 4            ; &envptr8092817[4]
  %cont8085935 = load i64, i64* %envptr8092818, align 8                              ; load; *envptr8092818
  %envptr8092819 = inttoptr i64 %env8092624 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092820 = getelementptr inbounds i64, i64* %envptr8092819, i64 3            ; &envptr8092819[3]
  %ine$_37take = load i64, i64* %envptr8092820, align 8                              ; load; *envptr8092820
  %envptr8092821 = inttoptr i64 %env8092624 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092822 = getelementptr inbounds i64, i64* %envptr8092821, i64 2            ; &envptr8092821[2]
  %WdA$lst = load i64, i64* %envptr8092822, align 8                                  ; load; *envptr8092822
  %envptr8092823 = inttoptr i64 %env8092624 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092824 = getelementptr inbounds i64, i64* %envptr8092823, i64 1            ; &envptr8092823[1]
  %B3F$n = load i64, i64* %envptr8092824, align 8                                    ; load; *envptr8092824
  %_958085936 = call i64 @prim_car(i64 %rvp8088641)                                  ; call prim_car
  %rvp8088640 = call i64 @prim_cdr(i64 %rvp8088641)                                  ; call prim_cdr
  %a8085737 = call i64 @prim_car(i64 %rvp8088640)                                    ; call prim_car
  %na8088635 = call i64 @prim_cdr(i64 %rvp8088640)                                   ; call prim_cdr
  %a8085738 = call i64 @prim__45(i64 %a8085737, i64 %B3F$n)                          ; call prim__45
  %rva8088639 = add i64 0, 0                                                         ; quoted ()
  %rva8088638 = call i64 @prim_cons(i64 %a8085738, i64 %rva8088639)                  ; call prim_cons
  %rva8088637 = call i64 @prim_cons(i64 %WdA$lst, i64 %rva8088638)                   ; call prim_cons
  %rva8088636 = call i64 @prim_cons(i64 %cont8085935, i64 %rva8088637)               ; call prim_cons
  %cloptr8092825 = inttoptr i64 %ine$_37take to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8092826 = getelementptr inbounds i64, i64* %cloptr8092825, i64 0             ; &cloptr8092825[0]
  %f8092828 = load i64, i64* %i0ptr8092826, align 8                                  ; load; *i0ptr8092826
  %fptr8092827 = inttoptr i64 %f8092828 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092827(i64 %ine$_37take, i64 %rva8088636)          ; tail call
  ret void
}


define void @lam8092619(i64 %env8092620, i64 %rvp8090700) {
  %envptr8092829 = inttoptr i64 %env8092620 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092830 = getelementptr inbounds i64, i64* %envptr8092829, i64 6            ; &envptr8092829[6]
  %XOr$_37length = load i64, i64* %envptr8092830, align 8                            ; load; *envptr8092830
  %envptr8092831 = inttoptr i64 %env8092620 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092832 = getelementptr inbounds i64, i64* %envptr8092831, i64 5            ; &envptr8092831[5]
  %OWP$_37drop_45right = load i64, i64* %envptr8092832, align 8                      ; load; *envptr8092832
  %envptr8092833 = inttoptr i64 %env8092620 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092834 = getelementptr inbounds i64, i64* %envptr8092833, i64 4            ; &envptr8092833[4]
  %EaL$_37last = load i64, i64* %envptr8092834, align 8                              ; load; *envptr8092834
  %envptr8092835 = inttoptr i64 %env8092620 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092836 = getelementptr inbounds i64, i64* %envptr8092835, i64 3            ; &envptr8092835[3]
  %hHO$_37foldr1 = load i64, i64* %envptr8092836, align 8                            ; load; *envptr8092836
  %envptr8092837 = inttoptr i64 %env8092620 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092838 = getelementptr inbounds i64, i64* %envptr8092837, i64 2            ; &envptr8092837[2]
  %EvB$_37foldl1 = load i64, i64* %envptr8092838, align 8                            ; load; *envptr8092838
  %envptr8092839 = inttoptr i64 %env8092620 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092840 = getelementptr inbounds i64, i64* %envptr8092839, i64 1            ; &envptr8092839[1]
  %P1m$Ycmb = load i64, i64* %envptr8092840, align 8                                 ; load; *envptr8092840
  %_958085937 = call i64 @prim_car(i64 %rvp8090700)                                  ; call prim_car
  %rvp8090699 = call i64 @prim_cdr(i64 %rvp8090700)                                  ; call prim_cdr
  %eoK$_37foldr = call i64 @prim_car(i64 %rvp8090699)                                ; call prim_car
  %na8088649 = call i64 @prim_cdr(i64 %rvp8090699)                                   ; call prim_cdr
  %cloptr8092841 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8092843 = getelementptr inbounds i64, i64* %cloptr8092841, i64 1              ; &eptr8092843[1]
  store i64 %hHO$_37foldr1, i64* %eptr8092843                                        ; *eptr8092843 = %hHO$_37foldr1
  %eptr8092842 = getelementptr inbounds i64, i64* %cloptr8092841, i64 0              ; &cloptr8092841[0]
  %f8092844 = ptrtoint void(i64,i64)* @lam8092617 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092844, i64* %eptr8092842                                             ; store fptr
  %HSO$_37map1 = ptrtoint i64* %cloptr8092841 to i64                                 ; closure cast; i64* -> i64
  %cloptr8092845 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8092847 = getelementptr inbounds i64, i64* %cloptr8092845, i64 1              ; &eptr8092847[1]
  %eptr8092848 = getelementptr inbounds i64, i64* %cloptr8092845, i64 2              ; &eptr8092848[2]
  %eptr8092849 = getelementptr inbounds i64, i64* %cloptr8092845, i64 3              ; &eptr8092849[3]
  store i64 %eoK$_37foldr, i64* %eptr8092847                                         ; *eptr8092847 = %eoK$_37foldr
  store i64 %EaL$_37last, i64* %eptr8092848                                          ; *eptr8092848 = %EaL$_37last
  store i64 %OWP$_37drop_45right, i64* %eptr8092849                                  ; *eptr8092849 = %OWP$_37drop_45right
  %eptr8092846 = getelementptr inbounds i64, i64* %cloptr8092845, i64 0              ; &cloptr8092845[0]
  %f8092850 = ptrtoint void(i64,i64)* @lam8092606 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092850, i64* %eptr8092846                                             ; store fptr
  %TwN$_37map = ptrtoint i64* %cloptr8092845 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092851 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8092853 = getelementptr inbounds i64, i64* %cloptr8092851, i64 1              ; &eptr8092853[1]
  %eptr8092854 = getelementptr inbounds i64, i64* %cloptr8092851, i64 2              ; &eptr8092854[2]
  store i64 %EvB$_37foldl1, i64* %eptr8092853                                        ; *eptr8092853 = %EvB$_37foldl1
  store i64 %XOr$_37length, i64* %eptr8092854                                        ; *eptr8092854 = %XOr$_37length
  %eptr8092852 = getelementptr inbounds i64, i64* %cloptr8092851, i64 0              ; &cloptr8092851[0]
  %f8092855 = ptrtoint void(i64,i64)* @lam8092590 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092855, i64* %eptr8092852                                             ; store fptr
  %arg8086286 = ptrtoint i64* %cloptr8092851 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092856 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8092858 = getelementptr inbounds i64, i64* %cloptr8092856, i64 1              ; &eptr8092858[1]
  %eptr8092859 = getelementptr inbounds i64, i64* %cloptr8092856, i64 2              ; &eptr8092859[2]
  %eptr8092860 = getelementptr inbounds i64, i64* %cloptr8092856, i64 3              ; &eptr8092860[3]
  store i64 %hHO$_37foldr1, i64* %eptr8092858                                        ; *eptr8092858 = %hHO$_37foldr1
  store i64 %HSO$_37map1, i64* %eptr8092859                                          ; *eptr8092859 = %HSO$_37map1
  store i64 %eoK$_37foldr, i64* %eptr8092860                                         ; *eptr8092860 = %eoK$_37foldr
  %eptr8092857 = getelementptr inbounds i64, i64* %cloptr8092856, i64 0              ; &cloptr8092856[0]
  %f8092861 = ptrtoint void(i64,i64)* @lam8091197 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092861, i64* %eptr8092857                                             ; store fptr
  %arg8086285 = ptrtoint i64* %cloptr8092856 to i64                                  ; closure cast; i64* -> i64
  %rva8090698 = add i64 0, 0                                                         ; quoted ()
  %rva8090697 = call i64 @prim_cons(i64 %arg8086285, i64 %rva8090698)                ; call prim_cons
  %rva8090696 = call i64 @prim_cons(i64 %arg8086286, i64 %rva8090697)                ; call prim_cons
  %cloptr8092862 = inttoptr i64 %P1m$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8092863 = getelementptr inbounds i64, i64* %cloptr8092862, i64 0             ; &cloptr8092862[0]
  %f8092865 = load i64, i64* %i0ptr8092863, align 8                                  ; load; *i0ptr8092863
  %fptr8092864 = inttoptr i64 %f8092865 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092864(i64 %P1m$Ycmb, i64 %rva8090696)             ; tail call
  ret void
}


define void @lam8092617(i64 %env8092618, i64 %rvp8088674) {
  %envptr8092866 = inttoptr i64 %env8092618 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092867 = getelementptr inbounds i64, i64* %envptr8092866, i64 1            ; &envptr8092866[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8092867, align 8                            ; load; *envptr8092867
  %cont8085938 = call i64 @prim_car(i64 %rvp8088674)                                 ; call prim_car
  %rvp8088673 = call i64 @prim_cdr(i64 %rvp8088674)                                  ; call prim_cdr
  %ZuR$f = call i64 @prim_car(i64 %rvp8088673)                                       ; call prim_car
  %rvp8088672 = call i64 @prim_cdr(i64 %rvp8088673)                                  ; call prim_cdr
  %lZF$lst = call i64 @prim_car(i64 %rvp8088672)                                     ; call prim_car
  %na8088651 = call i64 @prim_cdr(i64 %rvp8088672)                                   ; call prim_cdr
  %cloptr8092868 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8092870 = getelementptr inbounds i64, i64* %cloptr8092868, i64 1              ; &eptr8092870[1]
  store i64 %ZuR$f, i64* %eptr8092870                                                ; *eptr8092870 = %ZuR$f
  %eptr8092869 = getelementptr inbounds i64, i64* %cloptr8092868, i64 0              ; &cloptr8092868[0]
  %f8092871 = ptrtoint void(i64,i64)* @lam8092615 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092871, i64* %eptr8092869                                             ; store fptr
  %arg8086248 = ptrtoint i64* %cloptr8092868 to i64                                  ; closure cast; i64* -> i64
  %arg8086247 = add i64 0, 0                                                         ; quoted ()
  %rva8088671 = add i64 0, 0                                                         ; quoted ()
  %rva8088670 = call i64 @prim_cons(i64 %lZF$lst, i64 %rva8088671)                   ; call prim_cons
  %rva8088669 = call i64 @prim_cons(i64 %arg8086247, i64 %rva8088670)                ; call prim_cons
  %rva8088668 = call i64 @prim_cons(i64 %arg8086248, i64 %rva8088669)                ; call prim_cons
  %rva8088667 = call i64 @prim_cons(i64 %cont8085938, i64 %rva8088668)               ; call prim_cons
  %cloptr8092872 = inttoptr i64 %hHO$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8092873 = getelementptr inbounds i64, i64* %cloptr8092872, i64 0             ; &cloptr8092872[0]
  %f8092875 = load i64, i64* %i0ptr8092873, align 8                                  ; load; *i0ptr8092873
  %fptr8092874 = inttoptr i64 %f8092875 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092874(i64 %hHO$_37foldr1, i64 %rva8088667)        ; tail call
  ret void
}


define void @lam8092615(i64 %env8092616, i64 %rvp8088666) {
  %envptr8092876 = inttoptr i64 %env8092616 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092877 = getelementptr inbounds i64, i64* %envptr8092876, i64 1            ; &envptr8092876[1]
  %ZuR$f = load i64, i64* %envptr8092877, align 8                                    ; load; *envptr8092877
  %cont8085939 = call i64 @prim_car(i64 %rvp8088666)                                 ; call prim_car
  %rvp8088665 = call i64 @prim_cdr(i64 %rvp8088666)                                  ; call prim_cdr
  %JAB$v = call i64 @prim_car(i64 %rvp8088665)                                       ; call prim_car
  %rvp8088664 = call i64 @prim_cdr(i64 %rvp8088665)                                  ; call prim_cdr
  %NWT$r = call i64 @prim_car(i64 %rvp8088664)                                       ; call prim_car
  %na8088653 = call i64 @prim_cdr(i64 %rvp8088664)                                   ; call prim_cdr
  %cloptr8092878 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8092880 = getelementptr inbounds i64, i64* %cloptr8092878, i64 1              ; &eptr8092880[1]
  %eptr8092881 = getelementptr inbounds i64, i64* %cloptr8092878, i64 2              ; &eptr8092881[2]
  store i64 %NWT$r, i64* %eptr8092880                                                ; *eptr8092880 = %NWT$r
  store i64 %cont8085939, i64* %eptr8092881                                          ; *eptr8092881 = %cont8085939
  %eptr8092879 = getelementptr inbounds i64, i64* %cloptr8092878, i64 0              ; &cloptr8092878[0]
  %f8092882 = ptrtoint void(i64,i64)* @lam8092613 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092882, i64* %eptr8092879                                             ; store fptr
  %arg8086252 = ptrtoint i64* %cloptr8092878 to i64                                  ; closure cast; i64* -> i64
  %rva8088663 = add i64 0, 0                                                         ; quoted ()
  %rva8088662 = call i64 @prim_cons(i64 %JAB$v, i64 %rva8088663)                     ; call prim_cons
  %rva8088661 = call i64 @prim_cons(i64 %arg8086252, i64 %rva8088662)                ; call prim_cons
  %cloptr8092883 = inttoptr i64 %ZuR$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8092884 = getelementptr inbounds i64, i64* %cloptr8092883, i64 0             ; &cloptr8092883[0]
  %f8092886 = load i64, i64* %i0ptr8092884, align 8                                  ; load; *i0ptr8092884
  %fptr8092885 = inttoptr i64 %f8092886 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092885(i64 %ZuR$f, i64 %rva8088661)                ; tail call
  ret void
}


define void @lam8092613(i64 %env8092614, i64 %rvp8088660) {
  %envptr8092887 = inttoptr i64 %env8092614 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092888 = getelementptr inbounds i64, i64* %envptr8092887, i64 2            ; &envptr8092887[2]
  %cont8085939 = load i64, i64* %envptr8092888, align 8                              ; load; *envptr8092888
  %envptr8092889 = inttoptr i64 %env8092614 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092890 = getelementptr inbounds i64, i64* %envptr8092889, i64 1            ; &envptr8092889[1]
  %NWT$r = load i64, i64* %envptr8092890, align 8                                    ; load; *envptr8092890
  %_958085940 = call i64 @prim_car(i64 %rvp8088660)                                  ; call prim_car
  %rvp8088659 = call i64 @prim_cdr(i64 %rvp8088660)                                  ; call prim_cdr
  %a8085747 = call i64 @prim_car(i64 %rvp8088659)                                    ; call prim_car
  %na8088655 = call i64 @prim_cdr(i64 %rvp8088659)                                   ; call prim_cdr
  %retprim8085941 = call i64 @prim_cons(i64 %a8085747, i64 %NWT$r)                   ; call prim_cons
  %arg8086257 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088658 = add i64 0, 0                                                         ; quoted ()
  %rva8088657 = call i64 @prim_cons(i64 %retprim8085941, i64 %rva8088658)            ; call prim_cons
  %rva8088656 = call i64 @prim_cons(i64 %arg8086257, i64 %rva8088657)                ; call prim_cons
  %cloptr8092891 = inttoptr i64 %cont8085939 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8092892 = getelementptr inbounds i64, i64* %cloptr8092891, i64 0             ; &cloptr8092891[0]
  %f8092894 = load i64, i64* %i0ptr8092892, align 8                                  ; load; *i0ptr8092892
  %fptr8092893 = inttoptr i64 %f8092894 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092893(i64 %cont8085939, i64 %rva8088656)          ; tail call
  ret void
}


define void @lam8092606(i64 %env8092607, i64 %lIh$args8085943) {
  %envptr8092895 = inttoptr i64 %env8092607 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092896 = getelementptr inbounds i64, i64* %envptr8092895, i64 3            ; &envptr8092895[3]
  %OWP$_37drop_45right = load i64, i64* %envptr8092896, align 8                      ; load; *envptr8092896
  %envptr8092897 = inttoptr i64 %env8092607 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092898 = getelementptr inbounds i64, i64* %envptr8092897, i64 2            ; &envptr8092897[2]
  %EaL$_37last = load i64, i64* %envptr8092898, align 8                              ; load; *envptr8092898
  %envptr8092899 = inttoptr i64 %env8092607 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092900 = getelementptr inbounds i64, i64* %envptr8092899, i64 1            ; &envptr8092899[1]
  %eoK$_37foldr = load i64, i64* %envptr8092900, align 8                             ; load; *envptr8092900
  %cont8085942 = call i64 @prim_car(i64 %lIh$args8085943)                            ; call prim_car
  %lIh$args = call i64 @prim_cdr(i64 %lIh$args8085943)                               ; call prim_cdr
  %dwR$f = call i64 @prim_car(i64 %lIh$args)                                         ; call prim_car
  %s7G$lsts = call i64 @prim_cdr(i64 %lIh$args)                                      ; call prim_cdr
  %arg8086264 = add i64 0, 0                                                         ; quoted ()
  %a8085751 = call i64 @prim_cons(i64 %arg8086264, i64 %s7G$lsts)                    ; call prim_cons
  %cloptr8092901 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8092903 = getelementptr inbounds i64, i64* %cloptr8092901, i64 1              ; &eptr8092903[1]
  %eptr8092904 = getelementptr inbounds i64, i64* %cloptr8092901, i64 2              ; &eptr8092904[2]
  %eptr8092905 = getelementptr inbounds i64, i64* %cloptr8092901, i64 3              ; &eptr8092905[3]
  store i64 %EaL$_37last, i64* %eptr8092903                                          ; *eptr8092903 = %EaL$_37last
  store i64 %OWP$_37drop_45right, i64* %eptr8092904                                  ; *eptr8092904 = %OWP$_37drop_45right
  store i64 %dwR$f, i64* %eptr8092905                                                ; *eptr8092905 = %dwR$f
  %eptr8092902 = getelementptr inbounds i64, i64* %cloptr8092901, i64 0              ; &cloptr8092901[0]
  %f8092906 = ptrtoint void(i64,i64)* @lam8092603 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092906, i64* %eptr8092902                                             ; store fptr
  %arg8086266 = ptrtoint i64* %cloptr8092901 to i64                                  ; closure cast; i64* -> i64
  %a8085752 = call i64 @prim_cons(i64 %arg8086266, i64 %a8085751)                    ; call prim_cons
  %cps_45lst8085951 = call i64 @prim_cons(i64 %cont8085942, i64 %a8085752)           ; call prim_cons
  %cloptr8092907 = inttoptr i64 %eoK$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr8092908 = getelementptr inbounds i64, i64* %cloptr8092907, i64 0             ; &cloptr8092907[0]
  %f8092910 = load i64, i64* %i0ptr8092908, align 8                                  ; load; *i0ptr8092908
  %fptr8092909 = inttoptr i64 %f8092910 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092909(i64 %eoK$_37foldr, i64 %cps_45lst8085951)   ; tail call
  ret void
}


define void @lam8092603(i64 %env8092604, i64 %zwp$fargs8085945) {
  %envptr8092911 = inttoptr i64 %env8092604 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092912 = getelementptr inbounds i64, i64* %envptr8092911, i64 3            ; &envptr8092911[3]
  %dwR$f = load i64, i64* %envptr8092912, align 8                                    ; load; *envptr8092912
  %envptr8092913 = inttoptr i64 %env8092604 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092914 = getelementptr inbounds i64, i64* %envptr8092913, i64 2            ; &envptr8092913[2]
  %OWP$_37drop_45right = load i64, i64* %envptr8092914, align 8                      ; load; *envptr8092914
  %envptr8092915 = inttoptr i64 %env8092604 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092916 = getelementptr inbounds i64, i64* %envptr8092915, i64 1            ; &envptr8092915[1]
  %EaL$_37last = load i64, i64* %envptr8092916, align 8                              ; load; *envptr8092916
  %cont8085944 = call i64 @prim_car(i64 %zwp$fargs8085945)                           ; call prim_car
  %zwp$fargs = call i64 @prim_cdr(i64 %zwp$fargs8085945)                             ; call prim_cdr
  %cloptr8092917 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8092919 = getelementptr inbounds i64, i64* %cloptr8092917, i64 1              ; &eptr8092919[1]
  %eptr8092920 = getelementptr inbounds i64, i64* %cloptr8092917, i64 2              ; &eptr8092920[2]
  %eptr8092921 = getelementptr inbounds i64, i64* %cloptr8092917, i64 3              ; &eptr8092921[3]
  %eptr8092922 = getelementptr inbounds i64, i64* %cloptr8092917, i64 4              ; &eptr8092922[4]
  store i64 %cont8085944, i64* %eptr8092919                                          ; *eptr8092919 = %cont8085944
  store i64 %EaL$_37last, i64* %eptr8092920                                          ; *eptr8092920 = %EaL$_37last
  store i64 %zwp$fargs, i64* %eptr8092921                                            ; *eptr8092921 = %zwp$fargs
  store i64 %dwR$f, i64* %eptr8092922                                                ; *eptr8092922 = %dwR$f
  %eptr8092918 = getelementptr inbounds i64, i64* %cloptr8092917, i64 0              ; &cloptr8092917[0]
  %f8092923 = ptrtoint void(i64,i64)* @lam8092601 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092923, i64* %eptr8092918                                             ; store fptr
  %arg8086271 = ptrtoint i64* %cloptr8092917 to i64                                  ; closure cast; i64* -> i64
  %arg8086269 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva8088696 = add i64 0, 0                                                         ; quoted ()
  %rva8088695 = call i64 @prim_cons(i64 %arg8086269, i64 %rva8088696)                ; call prim_cons
  %rva8088694 = call i64 @prim_cons(i64 %zwp$fargs, i64 %rva8088695)                 ; call prim_cons
  %rva8088693 = call i64 @prim_cons(i64 %arg8086271, i64 %rva8088694)                ; call prim_cons
  %cloptr8092924 = inttoptr i64 %OWP$_37drop_45right to i64*                         ; closure/env cast; i64 -> i64*
  %i0ptr8092925 = getelementptr inbounds i64, i64* %cloptr8092924, i64 0             ; &cloptr8092924[0]
  %f8092927 = load i64, i64* %i0ptr8092925, align 8                                  ; load; *i0ptr8092925
  %fptr8092926 = inttoptr i64 %f8092927 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092926(i64 %OWP$_37drop_45right, i64 %rva8088693)  ; tail call
  ret void
}


define void @lam8092601(i64 %env8092602, i64 %rvp8088692) {
  %envptr8092928 = inttoptr i64 %env8092602 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092929 = getelementptr inbounds i64, i64* %envptr8092928, i64 4            ; &envptr8092928[4]
  %dwR$f = load i64, i64* %envptr8092929, align 8                                    ; load; *envptr8092929
  %envptr8092930 = inttoptr i64 %env8092602 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092931 = getelementptr inbounds i64, i64* %envptr8092930, i64 3            ; &envptr8092930[3]
  %zwp$fargs = load i64, i64* %envptr8092931, align 8                                ; load; *envptr8092931
  %envptr8092932 = inttoptr i64 %env8092602 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092933 = getelementptr inbounds i64, i64* %envptr8092932, i64 2            ; &envptr8092932[2]
  %EaL$_37last = load i64, i64* %envptr8092933, align 8                              ; load; *envptr8092933
  %envptr8092934 = inttoptr i64 %env8092602 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092935 = getelementptr inbounds i64, i64* %envptr8092934, i64 1            ; &envptr8092934[1]
  %cont8085944 = load i64, i64* %envptr8092935, align 8                              ; load; *envptr8092935
  %_958085946 = call i64 @prim_car(i64 %rvp8088692)                                  ; call prim_car
  %rvp8088691 = call i64 @prim_cdr(i64 %rvp8088692)                                  ; call prim_cdr
  %a8085748 = call i64 @prim_car(i64 %rvp8088691)                                    ; call prim_car
  %na8088676 = call i64 @prim_cdr(i64 %rvp8088691)                                   ; call prim_cdr
  %cloptr8092936 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8092938 = getelementptr inbounds i64, i64* %cloptr8092936, i64 1              ; &eptr8092938[1]
  %eptr8092939 = getelementptr inbounds i64, i64* %cloptr8092936, i64 2              ; &eptr8092939[2]
  %eptr8092940 = getelementptr inbounds i64, i64* %cloptr8092936, i64 3              ; &eptr8092940[3]
  store i64 %cont8085944, i64* %eptr8092938                                          ; *eptr8092938 = %cont8085944
  store i64 %EaL$_37last, i64* %eptr8092939                                          ; *eptr8092939 = %EaL$_37last
  store i64 %zwp$fargs, i64* %eptr8092940                                            ; *eptr8092940 = %zwp$fargs
  %eptr8092937 = getelementptr inbounds i64, i64* %cloptr8092936, i64 0              ; &cloptr8092936[0]
  %f8092941 = ptrtoint void(i64,i64)* @lam8092599 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092941, i64* %eptr8092937                                             ; store fptr
  %arg8086274 = ptrtoint i64* %cloptr8092936 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst8085950 = call i64 @prim_cons(i64 %arg8086274, i64 %a8085748)            ; call prim_cons
  %cloptr8092942 = inttoptr i64 %dwR$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8092943 = getelementptr inbounds i64, i64* %cloptr8092942, i64 0             ; &cloptr8092942[0]
  %f8092945 = load i64, i64* %i0ptr8092943, align 8                                  ; load; *i0ptr8092943
  %fptr8092944 = inttoptr i64 %f8092945 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092944(i64 %dwR$f, i64 %cps_45lst8085950)          ; tail call
  ret void
}


define void @lam8092599(i64 %env8092600, i64 %rvp8088690) {
  %envptr8092946 = inttoptr i64 %env8092600 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092947 = getelementptr inbounds i64, i64* %envptr8092946, i64 3            ; &envptr8092946[3]
  %zwp$fargs = load i64, i64* %envptr8092947, align 8                                ; load; *envptr8092947
  %envptr8092948 = inttoptr i64 %env8092600 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092949 = getelementptr inbounds i64, i64* %envptr8092948, i64 2            ; &envptr8092948[2]
  %EaL$_37last = load i64, i64* %envptr8092949, align 8                              ; load; *envptr8092949
  %envptr8092950 = inttoptr i64 %env8092600 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092951 = getelementptr inbounds i64, i64* %envptr8092950, i64 1            ; &envptr8092950[1]
  %cont8085944 = load i64, i64* %envptr8092951, align 8                              ; load; *envptr8092951
  %_958085947 = call i64 @prim_car(i64 %rvp8088690)                                  ; call prim_car
  %rvp8088689 = call i64 @prim_cdr(i64 %rvp8088690)                                  ; call prim_cdr
  %a8085749 = call i64 @prim_car(i64 %rvp8088689)                                    ; call prim_car
  %na8088678 = call i64 @prim_cdr(i64 %rvp8088689)                                   ; call prim_cdr
  %cloptr8092952 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8092954 = getelementptr inbounds i64, i64* %cloptr8092952, i64 1              ; &eptr8092954[1]
  %eptr8092955 = getelementptr inbounds i64, i64* %cloptr8092952, i64 2              ; &eptr8092955[2]
  store i64 %cont8085944, i64* %eptr8092954                                          ; *eptr8092954 = %cont8085944
  store i64 %a8085749, i64* %eptr8092955                                             ; *eptr8092955 = %a8085749
  %eptr8092953 = getelementptr inbounds i64, i64* %cloptr8092952, i64 0              ; &cloptr8092952[0]
  %f8092956 = ptrtoint void(i64,i64)* @lam8092597 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092956, i64* %eptr8092953                                             ; store fptr
  %arg8086276 = ptrtoint i64* %cloptr8092952 to i64                                  ; closure cast; i64* -> i64
  %rva8088688 = add i64 0, 0                                                         ; quoted ()
  %rva8088687 = call i64 @prim_cons(i64 %zwp$fargs, i64 %rva8088688)                 ; call prim_cons
  %rva8088686 = call i64 @prim_cons(i64 %arg8086276, i64 %rva8088687)                ; call prim_cons
  %cloptr8092957 = inttoptr i64 %EaL$_37last to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8092958 = getelementptr inbounds i64, i64* %cloptr8092957, i64 0             ; &cloptr8092957[0]
  %f8092960 = load i64, i64* %i0ptr8092958, align 8                                  ; load; *i0ptr8092958
  %fptr8092959 = inttoptr i64 %f8092960 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092959(i64 %EaL$_37last, i64 %rva8088686)          ; tail call
  ret void
}


define void @lam8092597(i64 %env8092598, i64 %rvp8088685) {
  %envptr8092961 = inttoptr i64 %env8092598 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092962 = getelementptr inbounds i64, i64* %envptr8092961, i64 2            ; &envptr8092961[2]
  %a8085749 = load i64, i64* %envptr8092962, align 8                                 ; load; *envptr8092962
  %envptr8092963 = inttoptr i64 %env8092598 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092964 = getelementptr inbounds i64, i64* %envptr8092963, i64 1            ; &envptr8092963[1]
  %cont8085944 = load i64, i64* %envptr8092964, align 8                              ; load; *envptr8092964
  %_958085948 = call i64 @prim_car(i64 %rvp8088685)                                  ; call prim_car
  %rvp8088684 = call i64 @prim_cdr(i64 %rvp8088685)                                  ; call prim_cdr
  %a8085750 = call i64 @prim_car(i64 %rvp8088684)                                    ; call prim_car
  %na8088680 = call i64 @prim_cdr(i64 %rvp8088684)                                   ; call prim_cdr
  %retprim8085949 = call i64 @prim_cons(i64 %a8085749, i64 %a8085750)                ; call prim_cons
  %arg8086281 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088683 = add i64 0, 0                                                         ; quoted ()
  %rva8088682 = call i64 @prim_cons(i64 %retprim8085949, i64 %rva8088683)            ; call prim_cons
  %rva8088681 = call i64 @prim_cons(i64 %arg8086281, i64 %rva8088682)                ; call prim_cons
  %cloptr8092965 = inttoptr i64 %cont8085944 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8092966 = getelementptr inbounds i64, i64* %cloptr8092965, i64 0             ; &cloptr8092965[0]
  %f8092968 = load i64, i64* %i0ptr8092966, align 8                                  ; load; *i0ptr8092966
  %fptr8092967 = inttoptr i64 %f8092968 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092967(i64 %cont8085944, i64 %rva8088681)          ; tail call
  ret void
}


define void @lam8092590(i64 %env8092591, i64 %rvp8090600) {
  %envptr8092969 = inttoptr i64 %env8092591 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092970 = getelementptr inbounds i64, i64* %envptr8092969, i64 2            ; &envptr8092969[2]
  %XOr$_37length = load i64, i64* %envptr8092970, align 8                            ; load; *envptr8092970
  %envptr8092971 = inttoptr i64 %env8092591 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8092972 = getelementptr inbounds i64, i64* %envptr8092971, i64 1            ; &envptr8092971[1]
  %EvB$_37foldl1 = load i64, i64* %envptr8092972, align 8                            ; load; *envptr8092972
  %_958085952 = call i64 @prim_car(i64 %rvp8090600)                                  ; call prim_car
  %rvp8090599 = call i64 @prim_cdr(i64 %rvp8090600)                                  ; call prim_cdr
  %uko$_37foldl = call i64 @prim_car(i64 %rvp8090599)                                ; call prim_car
  %na8088698 = call i64 @prim_cdr(i64 %rvp8090599)                                   ; call prim_cdr
  %cloptr8092973 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092974 = getelementptr inbounds i64, i64* %cloptr8092973, i64 0              ; &cloptr8092973[0]
  %f8092975 = ptrtoint void(i64,i64)* @lam8092588 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092975, i64* %eptr8092974                                             ; store fptr
  %fqW$_37_62 = ptrtoint i64* %cloptr8092973 to i64                                  ; closure cast; i64* -> i64
  %cloptr8092976 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8092977 = getelementptr inbounds i64, i64* %cloptr8092976, i64 0              ; &cloptr8092976[0]
  %f8092978 = ptrtoint void(i64,i64)* @lam8092584 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092978, i64* %eptr8092977                                             ; store fptr
  %iS8$_37_62_61 = ptrtoint i64* %cloptr8092976 to i64                               ; closure cast; i64* -> i64
  %arg8086301 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %arg8086300 = add i64 0, 0                                                         ; quoted ()
  %q5W$_37append = call i64 @prim_make_45vector(i64 %arg8086301, i64 %arg8086300)    ; call prim_make_45vector
  %arg8086303 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8092979 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8092981 = getelementptr inbounds i64, i64* %cloptr8092979, i64 1              ; &eptr8092981[1]
  store i64 %q5W$_37append, i64* %eptr8092981                                        ; *eptr8092981 = %q5W$_37append
  %eptr8092980 = getelementptr inbounds i64, i64* %cloptr8092979, i64 0              ; &cloptr8092979[0]
  %f8092982 = ptrtoint void(i64,i64)* @lam8092577 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092982, i64* %eptr8092980                                             ; store fptr
  %arg8086302 = ptrtoint i64* %cloptr8092979 to i64                                  ; closure cast; i64* -> i64
  %phw$_950 = call i64 @prim_vector_45set_33(i64 %q5W$_37append, i64 %arg8086303, i64 %arg8086302); call prim_vector_45set_33
  %arg8086322 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086133 = call i64 @prim_vector_45ref(i64 %q5W$_37append, i64 %arg8086322) ; call prim_vector_45ref
  %cloptr8092983 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8092985 = getelementptr inbounds i64, i64* %cloptr8092983, i64 1              ; &eptr8092985[1]
  %eptr8092986 = getelementptr inbounds i64, i64* %cloptr8092983, i64 2              ; &eptr8092986[2]
  %eptr8092987 = getelementptr inbounds i64, i64* %cloptr8092983, i64 3              ; &eptr8092987[3]
  store i64 %EvB$_37foldl1, i64* %eptr8092985                                        ; *eptr8092985 = %EvB$_37foldl1
  store i64 %fqW$_37_62, i64* %eptr8092986                                           ; *eptr8092986 = %fqW$_37_62
  store i64 %XOr$_37length, i64* %eptr8092987                                        ; *eptr8092987 = %XOr$_37length
  %eptr8092984 = getelementptr inbounds i64, i64* %cloptr8092983, i64 0              ; &cloptr8092983[0]
  %f8092988 = ptrtoint void(i64,i64)* @lam8092566 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8092988, i64* %eptr8092984                                             ; store fptr
  %arg8086326 = ptrtoint i64* %cloptr8092983 to i64                                  ; closure cast; i64* -> i64
  %arg8086325 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090598 = add i64 0, 0                                                         ; quoted ()
  %rva8090597 = call i64 @prim_cons(i64 %retprim8086133, i64 %rva8090598)            ; call prim_cons
  %rva8090596 = call i64 @prim_cons(i64 %arg8086325, i64 %rva8090597)                ; call prim_cons
  %cloptr8092989 = inttoptr i64 %arg8086326 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8092990 = getelementptr inbounds i64, i64* %cloptr8092989, i64 0             ; &cloptr8092989[0]
  %f8092992 = load i64, i64* %i0ptr8092990, align 8                                  ; load; *i0ptr8092990
  %fptr8092991 = inttoptr i64 %f8092992 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092991(i64 %arg8086326, i64 %rva8090596)           ; tail call
  ret void
}


define void @lam8092588(i64 %env8092589, i64 %rvp8088706) {
  %cont8085953 = call i64 @prim_car(i64 %rvp8088706)                                 ; call prim_car
  %rvp8088705 = call i64 @prim_cdr(i64 %rvp8088706)                                  ; call prim_cdr
  %A88$a = call i64 @prim_car(i64 %rvp8088705)                                       ; call prim_car
  %rvp8088704 = call i64 @prim_cdr(i64 %rvp8088705)                                  ; call prim_cdr
  %rwj$b = call i64 @prim_car(i64 %rvp8088704)                                       ; call prim_car
  %na8088700 = call i64 @prim_cdr(i64 %rvp8088704)                                   ; call prim_cdr
  %a8085760 = call i64 @prim__60_61(i64 %A88$a, i64 %rwj$b)                          ; call prim__60_61
  %retprim8085954 = call i64 @prim_not(i64 %a8085760)                                ; call prim_not
  %arg8086292 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088703 = add i64 0, 0                                                         ; quoted ()
  %rva8088702 = call i64 @prim_cons(i64 %retprim8085954, i64 %rva8088703)            ; call prim_cons
  %rva8088701 = call i64 @prim_cons(i64 %arg8086292, i64 %rva8088702)                ; call prim_cons
  %cloptr8092993 = inttoptr i64 %cont8085953 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8092994 = getelementptr inbounds i64, i64* %cloptr8092993, i64 0             ; &cloptr8092993[0]
  %f8092996 = load i64, i64* %i0ptr8092994, align 8                                  ; load; *i0ptr8092994
  %fptr8092995 = inttoptr i64 %f8092996 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092995(i64 %cont8085953, i64 %rva8088701)          ; tail call
  ret void
}


define void @lam8092584(i64 %env8092585, i64 %rvp8088714) {
  %cont8085955 = call i64 @prim_car(i64 %rvp8088714)                                 ; call prim_car
  %rvp8088713 = call i64 @prim_cdr(i64 %rvp8088714)                                  ; call prim_cdr
  %vjJ$a = call i64 @prim_car(i64 %rvp8088713)                                       ; call prim_car
  %rvp8088712 = call i64 @prim_cdr(i64 %rvp8088713)                                  ; call prim_cdr
  %c9v$b = call i64 @prim_car(i64 %rvp8088712)                                       ; call prim_car
  %na8088708 = call i64 @prim_cdr(i64 %rvp8088712)                                   ; call prim_cdr
  %a8085761 = call i64 @prim__60(i64 %vjJ$a, i64 %c9v$b)                             ; call prim__60
  %retprim8085956 = call i64 @prim_not(i64 %a8085761)                                ; call prim_not
  %arg8086298 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088711 = add i64 0, 0                                                         ; quoted ()
  %rva8088710 = call i64 @prim_cons(i64 %retprim8085956, i64 %rva8088711)            ; call prim_cons
  %rva8088709 = call i64 @prim_cons(i64 %arg8086298, i64 %rva8088710)                ; call prim_cons
  %cloptr8092997 = inttoptr i64 %cont8085955 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8092998 = getelementptr inbounds i64, i64* %cloptr8092997, i64 0             ; &cloptr8092997[0]
  %f8093000 = load i64, i64* %i0ptr8092998, align 8                                  ; load; *i0ptr8092998
  %fptr8092999 = inttoptr i64 %f8093000 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8092999(i64 %cont8085955, i64 %rva8088709)          ; tail call
  ret void
}


define void @lam8092577(i64 %env8092578, i64 %rvp8088733) {
  %envptr8093001 = inttoptr i64 %env8092578 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093002 = getelementptr inbounds i64, i64* %envptr8093001, i64 1            ; &envptr8093001[1]
  %q5W$_37append = load i64, i64* %envptr8093002, align 8                            ; load; *envptr8093002
  %cont8086130 = call i64 @prim_car(i64 %rvp8088733)                                 ; call prim_car
  %rvp8088732 = call i64 @prim_cdr(i64 %rvp8088733)                                  ; call prim_cdr
  %y9i$ls0 = call i64 @prim_car(i64 %rvp8088732)                                     ; call prim_car
  %rvp8088731 = call i64 @prim_cdr(i64 %rvp8088732)                                  ; call prim_cdr
  %ITt$ls1 = call i64 @prim_car(i64 %rvp8088731)                                     ; call prim_car
  %na8088716 = call i64 @prim_cdr(i64 %rvp8088731)                                   ; call prim_cdr
  %a8085762 = call i64 @prim_null_63(i64 %y9i$ls0)                                   ; call prim_null_63
  %cmp8093003 = icmp eq i64 %a8085762, 15                                            ; false?
  br i1 %cmp8093003, label %else8093005, label %then8093004                          ; if

then8093004:
  %arg8086307 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088719 = add i64 0, 0                                                         ; quoted ()
  %rva8088718 = call i64 @prim_cons(i64 %ITt$ls1, i64 %rva8088719)                   ; call prim_cons
  %rva8088717 = call i64 @prim_cons(i64 %arg8086307, i64 %rva8088718)                ; call prim_cons
  %cloptr8093006 = inttoptr i64 %cont8086130 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093007 = getelementptr inbounds i64, i64* %cloptr8093006, i64 0             ; &cloptr8093006[0]
  %f8093009 = load i64, i64* %i0ptr8093007, align 8                                  ; load; *i0ptr8093007
  %fptr8093008 = inttoptr i64 %f8093009 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093008(i64 %cont8086130, i64 %rva8088717)          ; tail call
  ret void

else8093005:
  %a8085763 = call i64 @prim_car(i64 %y9i$ls0)                                       ; call prim_car
  %arg8086310 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085764 = call i64 @prim_vector_45ref(i64 %q5W$_37append, i64 %arg8086310)       ; call prim_vector_45ref
  %a8085765 = call i64 @prim_cdr(i64 %y9i$ls0)                                       ; call prim_cdr
  %cloptr8093010 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093012 = getelementptr inbounds i64, i64* %cloptr8093010, i64 1              ; &eptr8093012[1]
  %eptr8093013 = getelementptr inbounds i64, i64* %cloptr8093010, i64 2              ; &eptr8093013[2]
  store i64 %a8085763, i64* %eptr8093012                                             ; *eptr8093012 = %a8085763
  store i64 %cont8086130, i64* %eptr8093013                                          ; *eptr8093013 = %cont8086130
  %eptr8093011 = getelementptr inbounds i64, i64* %cloptr8093010, i64 0              ; &cloptr8093010[0]
  %f8093014 = ptrtoint void(i64,i64)* @lam8092574 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093014, i64* %eptr8093011                                             ; store fptr
  %arg8086315 = ptrtoint i64* %cloptr8093010 to i64                                  ; closure cast; i64* -> i64
  %rva8088730 = add i64 0, 0                                                         ; quoted ()
  %rva8088729 = call i64 @prim_cons(i64 %ITt$ls1, i64 %rva8088730)                   ; call prim_cons
  %rva8088728 = call i64 @prim_cons(i64 %a8085765, i64 %rva8088729)                  ; call prim_cons
  %rva8088727 = call i64 @prim_cons(i64 %arg8086315, i64 %rva8088728)                ; call prim_cons
  %cloptr8093015 = inttoptr i64 %a8085764 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8093016 = getelementptr inbounds i64, i64* %cloptr8093015, i64 0             ; &cloptr8093015[0]
  %f8093018 = load i64, i64* %i0ptr8093016, align 8                                  ; load; *i0ptr8093016
  %fptr8093017 = inttoptr i64 %f8093018 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093017(i64 %a8085764, i64 %rva8088727)             ; tail call
  ret void
}


define void @lam8092574(i64 %env8092575, i64 %rvp8088726) {
  %envptr8093019 = inttoptr i64 %env8092575 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093020 = getelementptr inbounds i64, i64* %envptr8093019, i64 2            ; &envptr8093019[2]
  %cont8086130 = load i64, i64* %envptr8093020, align 8                              ; load; *envptr8093020
  %envptr8093021 = inttoptr i64 %env8092575 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093022 = getelementptr inbounds i64, i64* %envptr8093021, i64 1            ; &envptr8093021[1]
  %a8085763 = load i64, i64* %envptr8093022, align 8                                 ; load; *envptr8093022
  %_958086131 = call i64 @prim_car(i64 %rvp8088726)                                  ; call prim_car
  %rvp8088725 = call i64 @prim_cdr(i64 %rvp8088726)                                  ; call prim_cdr
  %a8085766 = call i64 @prim_car(i64 %rvp8088725)                                    ; call prim_car
  %na8088721 = call i64 @prim_cdr(i64 %rvp8088725)                                   ; call prim_cdr
  %retprim8086132 = call i64 @prim_cons(i64 %a8085763, i64 %a8085766)                ; call prim_cons
  %arg8086320 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088724 = add i64 0, 0                                                         ; quoted ()
  %rva8088723 = call i64 @prim_cons(i64 %retprim8086132, i64 %rva8088724)            ; call prim_cons
  %rva8088722 = call i64 @prim_cons(i64 %arg8086320, i64 %rva8088723)                ; call prim_cons
  %cloptr8093023 = inttoptr i64 %cont8086130 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093024 = getelementptr inbounds i64, i64* %cloptr8093023, i64 0             ; &cloptr8093023[0]
  %f8093026 = load i64, i64* %i0ptr8093024, align 8                                  ; load; *i0ptr8093024
  %fptr8093025 = inttoptr i64 %f8093026 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093025(i64 %cont8086130, i64 %rva8088722)          ; tail call
  ret void
}


define void @lam8092566(i64 %env8092567, i64 %rvp8090595) {
  %envptr8093027 = inttoptr i64 %env8092567 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093028 = getelementptr inbounds i64, i64* %envptr8093027, i64 3            ; &envptr8093027[3]
  %XOr$_37length = load i64, i64* %envptr8093028, align 8                            ; load; *envptr8093028
  %envptr8093029 = inttoptr i64 %env8092567 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093030 = getelementptr inbounds i64, i64* %envptr8093029, i64 2            ; &envptr8093029[2]
  %fqW$_37_62 = load i64, i64* %envptr8093030, align 8                               ; load; *envptr8093030
  %envptr8093031 = inttoptr i64 %env8092567 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093032 = getelementptr inbounds i64, i64* %envptr8093031, i64 1            ; &envptr8093031[1]
  %EvB$_37foldl1 = load i64, i64* %envptr8093032, align 8                            ; load; *envptr8093032
  %_958085957 = call i64 @prim_car(i64 %rvp8090595)                                  ; call prim_car
  %rvp8090594 = call i64 @prim_cdr(i64 %rvp8090595)                                  ; call prim_cdr
  %iCS$_37append = call i64 @prim_car(i64 %rvp8090594)                               ; call prim_car
  %na8088735 = call i64 @prim_cdr(i64 %rvp8090594)                                   ; call prim_cdr
  %cloptr8093033 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093034 = getelementptr inbounds i64, i64* %cloptr8093033, i64 0              ; &cloptr8093033[0]
  %f8093035 = ptrtoint void(i64,i64)* @lam8092564 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093035, i64* %eptr8093034                                             ; store fptr
  %wJf$_37list_63 = ptrtoint i64* %cloptr8093033 to i64                              ; closure cast; i64* -> i64
  %cloptr8093036 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093037 = getelementptr inbounds i64, i64* %cloptr8093036, i64 0              ; &cloptr8093036[0]
  %f8093038 = ptrtoint void(i64,i64)* @lam8092512 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093038, i64* %eptr8093037                                             ; store fptr
  %kdG$_37drop = ptrtoint i64* %cloptr8093036 to i64                                 ; closure cast; i64* -> i64
  %cloptr8093039 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093040 = getelementptr inbounds i64, i64* %cloptr8093039, i64 0              ; &cloptr8093039[0]
  %f8093041 = ptrtoint void(i64,i64)* @lam8092462 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093041, i64* %eptr8093040                                             ; store fptr
  %Nh3$_37memv = ptrtoint i64* %cloptr8093039 to i64                                 ; closure cast; i64* -> i64
  %cloptr8093042 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8093044 = getelementptr inbounds i64, i64* %cloptr8093042, i64 1              ; &eptr8093044[1]
  store i64 %EvB$_37foldl1, i64* %eptr8093044                                        ; *eptr8093044 = %EvB$_37foldl1
  %eptr8093043 = getelementptr inbounds i64, i64* %cloptr8093042, i64 0              ; &cloptr8093042[0]
  %f8093045 = ptrtoint void(i64,i64)* @lam8092421 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093045, i64* %eptr8093043                                             ; store fptr
  %dQk$_37_47 = ptrtoint i64* %cloptr8093042 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093046 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093047 = getelementptr inbounds i64, i64* %cloptr8093046, i64 0              ; &cloptr8093046[0]
  %f8093048 = ptrtoint void(i64,i64)* @lam8092409 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093048, i64* %eptr8093047                                             ; store fptr
  %sFC$_37first = ptrtoint i64* %cloptr8093046 to i64                                ; closure cast; i64* -> i64
  %cloptr8093049 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093050 = getelementptr inbounds i64, i64* %cloptr8093049, i64 0              ; &cloptr8093049[0]
  %f8093051 = ptrtoint void(i64,i64)* @lam8092405 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093051, i64* %eptr8093050                                             ; store fptr
  %WEm$_37second = ptrtoint i64* %cloptr8093049 to i64                               ; closure cast; i64* -> i64
  %cloptr8093052 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093053 = getelementptr inbounds i64, i64* %cloptr8093052, i64 0              ; &cloptr8093052[0]
  %f8093054 = ptrtoint void(i64,i64)* @lam8092401 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093054, i64* %eptr8093053                                             ; store fptr
  %xol$_37third = ptrtoint i64* %cloptr8093052 to i64                                ; closure cast; i64* -> i64
  %cloptr8093055 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093056 = getelementptr inbounds i64, i64* %cloptr8093055, i64 0              ; &cloptr8093055[0]
  %f8093057 = ptrtoint void(i64,i64)* @lam8092397 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093057, i64* %eptr8093056                                             ; store fptr
  %lTz$_37fourth = ptrtoint i64* %cloptr8093055 to i64                               ; closure cast; i64* -> i64
  %cloptr8093058 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093059 = getelementptr inbounds i64, i64* %cloptr8093058, i64 0              ; &cloptr8093058[0]
  %f8093060 = ptrtoint void(i64,i64)* @lam8092393 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093060, i64* %eptr8093059                                             ; store fptr
  %arg8086578 = ptrtoint i64* %cloptr8093058 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093061 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093063 = getelementptr inbounds i64, i64* %cloptr8093061, i64 1              ; &eptr8093063[1]
  %eptr8093064 = getelementptr inbounds i64, i64* %cloptr8093061, i64 2              ; &eptr8093064[2]
  %eptr8093065 = getelementptr inbounds i64, i64* %cloptr8093061, i64 3              ; &eptr8093065[3]
  store i64 %fqW$_37_62, i64* %eptr8093063                                           ; *eptr8093063 = %fqW$_37_62
  store i64 %XOr$_37length, i64* %eptr8093064                                        ; *eptr8093064 = %XOr$_37length
  store i64 %kdG$_37drop, i64* %eptr8093065                                          ; *eptr8093065 = %kdG$_37drop
  %eptr8093062 = getelementptr inbounds i64, i64* %cloptr8093061, i64 0              ; &cloptr8093061[0]
  %f8093066 = ptrtoint void(i64,i64)* @lam8092389 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093066, i64* %eptr8093062                                             ; store fptr
  %arg8086577 = ptrtoint i64* %cloptr8093061 to i64                                  ; closure cast; i64* -> i64
  %rva8090593 = add i64 0, 0                                                         ; quoted ()
  %rva8090592 = call i64 @prim_cons(i64 %arg8086577, i64 %rva8090593)                ; call prim_cons
  %cloptr8093067 = inttoptr i64 %arg8086578 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093068 = getelementptr inbounds i64, i64* %cloptr8093067, i64 0             ; &cloptr8093067[0]
  %f8093070 = load i64, i64* %i0ptr8093068, align 8                                  ; load; *i0ptr8093068
  %fptr8093069 = inttoptr i64 %f8093070 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093069(i64 %arg8086578, i64 %rva8090592)           ; tail call
  ret void
}


define void @lam8092564(i64 %env8092565, i64 %rvp8088803) {
  %cont8085958 = call i64 @prim_car(i64 %rvp8088803)                                 ; call prim_car
  %rvp8088802 = call i64 @prim_cdr(i64 %rvp8088803)                                  ; call prim_cdr
  %WUX$a = call i64 @prim_car(i64 %rvp8088802)                                       ; call prim_car
  %na8088737 = call i64 @prim_cdr(i64 %rvp8088802)                                   ; call prim_cdr
  %arg8086328 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %MsC$a = call i64 @prim_make_45vector(i64 %arg8086328, i64 %WUX$a)                 ; call prim_make_45vector
  %cloptr8093071 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093072 = getelementptr inbounds i64, i64* %cloptr8093071, i64 0              ; &cloptr8093071[0]
  %f8093073 = ptrtoint void(i64,i64)* @lam8092561 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093073, i64* %eptr8093072                                             ; store fptr
  %arg8086331 = ptrtoint i64* %cloptr8093071 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093074 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093076 = getelementptr inbounds i64, i64* %cloptr8093074, i64 1              ; &eptr8093076[1]
  %eptr8093077 = getelementptr inbounds i64, i64* %cloptr8093074, i64 2              ; &eptr8093077[2]
  store i64 %MsC$a, i64* %eptr8093076                                                ; *eptr8093076 = %MsC$a
  store i64 %cont8085958, i64* %eptr8093077                                          ; *eptr8093077 = %cont8085958
  %eptr8093075 = getelementptr inbounds i64, i64* %cloptr8093074, i64 0              ; &cloptr8093074[0]
  %f8093078 = ptrtoint void(i64,i64)* @lam8092557 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093078, i64* %eptr8093075                                             ; store fptr
  %arg8086330 = ptrtoint i64* %cloptr8093074 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093079 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093081 = getelementptr inbounds i64, i64* %cloptr8093079, i64 1              ; &eptr8093081[1]
  %eptr8093082 = getelementptr inbounds i64, i64* %cloptr8093079, i64 2              ; &eptr8093082[2]
  store i64 %MsC$a, i64* %eptr8093081                                                ; *eptr8093081 = %MsC$a
  store i64 %cont8085958, i64* %eptr8093082                                          ; *eptr8093082 = %cont8085958
  %eptr8093080 = getelementptr inbounds i64, i64* %cloptr8093079, i64 0              ; &cloptr8093079[0]
  %f8093083 = ptrtoint void(i64,i64)* @lam8092535 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093083, i64* %eptr8093080                                             ; store fptr
  %arg8086329 = ptrtoint i64* %cloptr8093079 to i64                                  ; closure cast; i64* -> i64
  %rva8088801 = add i64 0, 0                                                         ; quoted ()
  %rva8088800 = call i64 @prim_cons(i64 %arg8086329, i64 %rva8088801)                ; call prim_cons
  %rva8088799 = call i64 @prim_cons(i64 %arg8086330, i64 %rva8088800)                ; call prim_cons
  %cloptr8093084 = inttoptr i64 %arg8086331 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093085 = getelementptr inbounds i64, i64* %cloptr8093084, i64 0             ; &cloptr8093084[0]
  %f8093087 = load i64, i64* %i0ptr8093085, align 8                                  ; load; *i0ptr8093085
  %fptr8093086 = inttoptr i64 %f8093087 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093086(i64 %arg8086331, i64 %rva8088799)           ; tail call
  ret void
}


define void @lam8092561(i64 %env8092562, i64 %rvp8088744) {
  %cont8085964 = call i64 @prim_car(i64 %rvp8088744)                                 ; call prim_car
  %rvp8088743 = call i64 @prim_cdr(i64 %rvp8088744)                                  ; call prim_cdr
  %x03$k = call i64 @prim_car(i64 %rvp8088743)                                       ; call prim_car
  %na8088739 = call i64 @prim_cdr(i64 %rvp8088743)                                   ; call prim_cdr
  %arg8086333 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088742 = add i64 0, 0                                                         ; quoted ()
  %rva8088741 = call i64 @prim_cons(i64 %x03$k, i64 %rva8088742)                     ; call prim_cons
  %rva8088740 = call i64 @prim_cons(i64 %arg8086333, i64 %rva8088741)                ; call prim_cons
  %cloptr8093088 = inttoptr i64 %cont8085964 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093089 = getelementptr inbounds i64, i64* %cloptr8093088, i64 0             ; &cloptr8093088[0]
  %f8093091 = load i64, i64* %i0ptr8093089, align 8                                  ; load; *i0ptr8093089
  %fptr8093090 = inttoptr i64 %f8093091 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093090(i64 %cont8085964, i64 %rva8088740)          ; tail call
  ret void
}


define void @lam8092557(i64 %env8092558, i64 %rvp8088771) {
  %envptr8093092 = inttoptr i64 %env8092558 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093093 = getelementptr inbounds i64, i64* %envptr8093092, i64 2            ; &envptr8093092[2]
  %cont8085958 = load i64, i64* %envptr8093093, align 8                              ; load; *envptr8093093
  %envptr8093094 = inttoptr i64 %env8092558 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093095 = getelementptr inbounds i64, i64* %envptr8093094, i64 1            ; &envptr8093094[1]
  %MsC$a = load i64, i64* %envptr8093095, align 8                                    ; load; *envptr8093095
  %_958085959 = call i64 @prim_car(i64 %rvp8088771)                                  ; call prim_car
  %rvp8088770 = call i64 @prim_cdr(i64 %rvp8088771)                                  ; call prim_cdr
  %cky$cc = call i64 @prim_car(i64 %rvp8088770)                                      ; call prim_car
  %na8088746 = call i64 @prim_cdr(i64 %rvp8088770)                                   ; call prim_cdr
  %arg8086335 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085767 = call i64 @prim_vector_45ref(i64 %MsC$a, i64 %arg8086335)               ; call prim_vector_45ref
  %a8085768 = call i64 @prim_null_63(i64 %a8085767)                                  ; call prim_null_63
  %cmp8093096 = icmp eq i64 %a8085768, 15                                            ; false?
  br i1 %cmp8093096, label %else8093098, label %then8093097                          ; if

then8093097:
  %arg8086339 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8086338 = call i64 @const_init_true()                                          ; quoted #t
  %rva8088749 = add i64 0, 0                                                         ; quoted ()
  %rva8088748 = call i64 @prim_cons(i64 %arg8086338, i64 %rva8088749)                ; call prim_cons
  %rva8088747 = call i64 @prim_cons(i64 %arg8086339, i64 %rva8088748)                ; call prim_cons
  %cloptr8093099 = inttoptr i64 %cont8085958 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093100 = getelementptr inbounds i64, i64* %cloptr8093099, i64 0             ; &cloptr8093099[0]
  %f8093102 = load i64, i64* %i0ptr8093100, align 8                                  ; load; *i0ptr8093100
  %fptr8093101 = inttoptr i64 %f8093102 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093101(i64 %cont8085958, i64 %rva8088747)          ; tail call
  ret void

else8093098:
  %arg8086341 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085769 = call i64 @prim_vector_45ref(i64 %MsC$a, i64 %arg8086341)               ; call prim_vector_45ref
  %a8085770 = call i64 @prim_cons_63(i64 %a8085769)                                  ; call prim_cons_63
  %cmp8093103 = icmp eq i64 %a8085770, 15                                            ; false?
  br i1 %cmp8093103, label %else8093105, label %then8093104                          ; if

then8093104:
  %arg8086344 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085771 = call i64 @prim_vector_45ref(i64 %MsC$a, i64 %arg8086344)               ; call prim_vector_45ref
  %retprim8085963 = call i64 @prim_cdr(i64 %a8085771)                                ; call prim_cdr
  %cloptr8093106 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093108 = getelementptr inbounds i64, i64* %cloptr8093106, i64 1              ; &eptr8093108[1]
  %eptr8093109 = getelementptr inbounds i64, i64* %cloptr8093106, i64 2              ; &eptr8093109[2]
  %eptr8093110 = getelementptr inbounds i64, i64* %cloptr8093106, i64 3              ; &eptr8093110[3]
  store i64 %cky$cc, i64* %eptr8093108                                               ; *eptr8093108 = %cky$cc
  store i64 %MsC$a, i64* %eptr8093109                                                ; *eptr8093109 = %MsC$a
  store i64 %cont8085958, i64* %eptr8093110                                          ; *eptr8093110 = %cont8085958
  %eptr8093107 = getelementptr inbounds i64, i64* %cloptr8093106, i64 0              ; &cloptr8093106[0]
  %f8093111 = ptrtoint void(i64,i64)* @lam8092549 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093111, i64* %eptr8093107                                             ; store fptr
  %arg8086349 = ptrtoint i64* %cloptr8093106 to i64                                  ; closure cast; i64* -> i64
  %arg8086348 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088766 = add i64 0, 0                                                         ; quoted ()
  %rva8088765 = call i64 @prim_cons(i64 %retprim8085963, i64 %rva8088766)            ; call prim_cons
  %rva8088764 = call i64 @prim_cons(i64 %arg8086348, i64 %rva8088765)                ; call prim_cons
  %cloptr8093112 = inttoptr i64 %arg8086349 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093113 = getelementptr inbounds i64, i64* %cloptr8093112, i64 0             ; &cloptr8093112[0]
  %f8093115 = load i64, i64* %i0ptr8093113, align 8                                  ; load; *i0ptr8093113
  %fptr8093114 = inttoptr i64 %f8093115 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093114(i64 %arg8086349, i64 %rva8088764)           ; tail call
  ret void

else8093105:
  %arg8086363 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8086362 = call i64 @const_init_false()                                         ; quoted #f
  %rva8088769 = add i64 0, 0                                                         ; quoted ()
  %rva8088768 = call i64 @prim_cons(i64 %arg8086362, i64 %rva8088769)                ; call prim_cons
  %rva8088767 = call i64 @prim_cons(i64 %arg8086363, i64 %rva8088768)                ; call prim_cons
  %cloptr8093116 = inttoptr i64 %cont8085958 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093117 = getelementptr inbounds i64, i64* %cloptr8093116, i64 0             ; &cloptr8093116[0]
  %f8093119 = load i64, i64* %i0ptr8093117, align 8                                  ; load; *i0ptr8093117
  %fptr8093118 = inttoptr i64 %f8093119 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093118(i64 %cont8085958, i64 %rva8088767)          ; tail call
  ret void
}


define void @lam8092549(i64 %env8092550, i64 %rvp8088763) {
  %envptr8093120 = inttoptr i64 %env8092550 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093121 = getelementptr inbounds i64, i64* %envptr8093120, i64 3            ; &envptr8093120[3]
  %cont8085958 = load i64, i64* %envptr8093121, align 8                              ; load; *envptr8093121
  %envptr8093122 = inttoptr i64 %env8092550 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093123 = getelementptr inbounds i64, i64* %envptr8093122, i64 2            ; &envptr8093122[2]
  %MsC$a = load i64, i64* %envptr8093123, align 8                                    ; load; *envptr8093123
  %envptr8093124 = inttoptr i64 %env8092550 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093125 = getelementptr inbounds i64, i64* %envptr8093124, i64 1            ; &envptr8093124[1]
  %cky$cc = load i64, i64* %envptr8093125, align 8                                   ; load; *envptr8093125
  %_958085960 = call i64 @prim_car(i64 %rvp8088763)                                  ; call prim_car
  %rvp8088762 = call i64 @prim_cdr(i64 %rvp8088763)                                  ; call prim_cdr
  %RGM$b = call i64 @prim_car(i64 %rvp8088762)                                       ; call prim_car
  %na8088751 = call i64 @prim_cdr(i64 %rvp8088762)                                   ; call prim_cdr
  %arg8086350 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085772 = call i64 @prim_vector_45ref(i64 %MsC$a, i64 %arg8086350)               ; call prim_vector_45ref
  %a8085773 = call i64 @prim_cdr(i64 %a8085772)                                      ; call prim_cdr
  %arg8086354 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085962 = call i64 @prim_vector_45set_33(i64 %MsC$a, i64 %arg8086354, i64 %a8085773); call prim_vector_45set_33
  %cloptr8093126 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093128 = getelementptr inbounds i64, i64* %cloptr8093126, i64 1              ; &eptr8093128[1]
  %eptr8093129 = getelementptr inbounds i64, i64* %cloptr8093126, i64 2              ; &eptr8093129[2]
  store i64 %cky$cc, i64* %eptr8093128                                               ; *eptr8093128 = %cky$cc
  store i64 %cont8085958, i64* %eptr8093129                                          ; *eptr8093129 = %cont8085958
  %eptr8093127 = getelementptr inbounds i64, i64* %cloptr8093126, i64 0              ; &cloptr8093126[0]
  %f8093130 = ptrtoint void(i64,i64)* @lam8092545 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093130, i64* %eptr8093127                                             ; store fptr
  %arg8086358 = ptrtoint i64* %cloptr8093126 to i64                                  ; closure cast; i64* -> i64
  %arg8086357 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088761 = add i64 0, 0                                                         ; quoted ()
  %rva8088760 = call i64 @prim_cons(i64 %retprim8085962, i64 %rva8088761)            ; call prim_cons
  %rva8088759 = call i64 @prim_cons(i64 %arg8086357, i64 %rva8088760)                ; call prim_cons
  %cloptr8093131 = inttoptr i64 %arg8086358 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093132 = getelementptr inbounds i64, i64* %cloptr8093131, i64 0             ; &cloptr8093131[0]
  %f8093134 = load i64, i64* %i0ptr8093132, align 8                                  ; load; *i0ptr8093132
  %fptr8093133 = inttoptr i64 %f8093134 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093133(i64 %arg8086358, i64 %rva8088759)           ; tail call
  ret void
}


define void @lam8092545(i64 %env8092546, i64 %rvp8088758) {
  %envptr8093135 = inttoptr i64 %env8092546 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093136 = getelementptr inbounds i64, i64* %envptr8093135, i64 2            ; &envptr8093135[2]
  %cont8085958 = load i64, i64* %envptr8093136, align 8                              ; load; *envptr8093136
  %envptr8093137 = inttoptr i64 %env8092546 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093138 = getelementptr inbounds i64, i64* %envptr8093137, i64 1            ; &envptr8093137[1]
  %cky$cc = load i64, i64* %envptr8093138, align 8                                   ; load; *envptr8093138
  %_958085961 = call i64 @prim_car(i64 %rvp8088758)                                  ; call prim_car
  %rvp8088757 = call i64 @prim_cdr(i64 %rvp8088758)                                  ; call prim_cdr
  %Izx$_950 = call i64 @prim_car(i64 %rvp8088757)                                    ; call prim_car
  %na8088753 = call i64 @prim_cdr(i64 %rvp8088757)                                   ; call prim_cdr
  %rva8088756 = add i64 0, 0                                                         ; quoted ()
  %rva8088755 = call i64 @prim_cons(i64 %cky$cc, i64 %rva8088756)                    ; call prim_cons
  %rva8088754 = call i64 @prim_cons(i64 %cont8085958, i64 %rva8088755)               ; call prim_cons
  %cloptr8093139 = inttoptr i64 %cky$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8093140 = getelementptr inbounds i64, i64* %cloptr8093139, i64 0             ; &cloptr8093139[0]
  %f8093142 = load i64, i64* %i0ptr8093140, align 8                                  ; load; *i0ptr8093140
  %fptr8093141 = inttoptr i64 %f8093142 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093141(i64 %cky$cc, i64 %rva8088754)               ; tail call
  ret void
}


define void @lam8092535(i64 %env8092536, i64 %rvp8088798) {
  %envptr8093143 = inttoptr i64 %env8092536 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093144 = getelementptr inbounds i64, i64* %envptr8093143, i64 2            ; &envptr8093143[2]
  %cont8085958 = load i64, i64* %envptr8093144, align 8                              ; load; *envptr8093144
  %envptr8093145 = inttoptr i64 %env8092536 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093146 = getelementptr inbounds i64, i64* %envptr8093145, i64 1            ; &envptr8093145[1]
  %MsC$a = load i64, i64* %envptr8093146, align 8                                    ; load; *envptr8093146
  %_958085959 = call i64 @prim_car(i64 %rvp8088798)                                  ; call prim_car
  %rvp8088797 = call i64 @prim_cdr(i64 %rvp8088798)                                  ; call prim_cdr
  %cky$cc = call i64 @prim_car(i64 %rvp8088797)                                      ; call prim_car
  %na8088773 = call i64 @prim_cdr(i64 %rvp8088797)                                   ; call prim_cdr
  %arg8086365 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085767 = call i64 @prim_vector_45ref(i64 %MsC$a, i64 %arg8086365)               ; call prim_vector_45ref
  %a8085768 = call i64 @prim_null_63(i64 %a8085767)                                  ; call prim_null_63
  %cmp8093147 = icmp eq i64 %a8085768, 15                                            ; false?
  br i1 %cmp8093147, label %else8093149, label %then8093148                          ; if

then8093148:
  %arg8086369 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8086368 = call i64 @const_init_true()                                          ; quoted #t
  %rva8088776 = add i64 0, 0                                                         ; quoted ()
  %rva8088775 = call i64 @prim_cons(i64 %arg8086368, i64 %rva8088776)                ; call prim_cons
  %rva8088774 = call i64 @prim_cons(i64 %arg8086369, i64 %rva8088775)                ; call prim_cons
  %cloptr8093150 = inttoptr i64 %cont8085958 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093151 = getelementptr inbounds i64, i64* %cloptr8093150, i64 0             ; &cloptr8093150[0]
  %f8093153 = load i64, i64* %i0ptr8093151, align 8                                  ; load; *i0ptr8093151
  %fptr8093152 = inttoptr i64 %f8093153 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093152(i64 %cont8085958, i64 %rva8088774)          ; tail call
  ret void

else8093149:
  %arg8086371 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085769 = call i64 @prim_vector_45ref(i64 %MsC$a, i64 %arg8086371)               ; call prim_vector_45ref
  %a8085770 = call i64 @prim_cons_63(i64 %a8085769)                                  ; call prim_cons_63
  %cmp8093154 = icmp eq i64 %a8085770, 15                                            ; false?
  br i1 %cmp8093154, label %else8093156, label %then8093155                          ; if

then8093155:
  %arg8086374 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085771 = call i64 @prim_vector_45ref(i64 %MsC$a, i64 %arg8086374)               ; call prim_vector_45ref
  %retprim8085963 = call i64 @prim_cdr(i64 %a8085771)                                ; call prim_cdr
  %cloptr8093157 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093159 = getelementptr inbounds i64, i64* %cloptr8093157, i64 1              ; &eptr8093159[1]
  %eptr8093160 = getelementptr inbounds i64, i64* %cloptr8093157, i64 2              ; &eptr8093160[2]
  %eptr8093161 = getelementptr inbounds i64, i64* %cloptr8093157, i64 3              ; &eptr8093161[3]
  store i64 %cky$cc, i64* %eptr8093159                                               ; *eptr8093159 = %cky$cc
  store i64 %MsC$a, i64* %eptr8093160                                                ; *eptr8093160 = %MsC$a
  store i64 %cont8085958, i64* %eptr8093161                                          ; *eptr8093161 = %cont8085958
  %eptr8093158 = getelementptr inbounds i64, i64* %cloptr8093157, i64 0              ; &cloptr8093157[0]
  %f8093162 = ptrtoint void(i64,i64)* @lam8092527 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093162, i64* %eptr8093158                                             ; store fptr
  %arg8086379 = ptrtoint i64* %cloptr8093157 to i64                                  ; closure cast; i64* -> i64
  %arg8086378 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088793 = add i64 0, 0                                                         ; quoted ()
  %rva8088792 = call i64 @prim_cons(i64 %retprim8085963, i64 %rva8088793)            ; call prim_cons
  %rva8088791 = call i64 @prim_cons(i64 %arg8086378, i64 %rva8088792)                ; call prim_cons
  %cloptr8093163 = inttoptr i64 %arg8086379 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093164 = getelementptr inbounds i64, i64* %cloptr8093163, i64 0             ; &cloptr8093163[0]
  %f8093166 = load i64, i64* %i0ptr8093164, align 8                                  ; load; *i0ptr8093164
  %fptr8093165 = inttoptr i64 %f8093166 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093165(i64 %arg8086379, i64 %rva8088791)           ; tail call
  ret void

else8093156:
  %arg8086393 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8086392 = call i64 @const_init_false()                                         ; quoted #f
  %rva8088796 = add i64 0, 0                                                         ; quoted ()
  %rva8088795 = call i64 @prim_cons(i64 %arg8086392, i64 %rva8088796)                ; call prim_cons
  %rva8088794 = call i64 @prim_cons(i64 %arg8086393, i64 %rva8088795)                ; call prim_cons
  %cloptr8093167 = inttoptr i64 %cont8085958 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093168 = getelementptr inbounds i64, i64* %cloptr8093167, i64 0             ; &cloptr8093167[0]
  %f8093170 = load i64, i64* %i0ptr8093168, align 8                                  ; load; *i0ptr8093168
  %fptr8093169 = inttoptr i64 %f8093170 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093169(i64 %cont8085958, i64 %rva8088794)          ; tail call
  ret void
}


define void @lam8092527(i64 %env8092528, i64 %rvp8088790) {
  %envptr8093171 = inttoptr i64 %env8092528 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093172 = getelementptr inbounds i64, i64* %envptr8093171, i64 3            ; &envptr8093171[3]
  %cont8085958 = load i64, i64* %envptr8093172, align 8                              ; load; *envptr8093172
  %envptr8093173 = inttoptr i64 %env8092528 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093174 = getelementptr inbounds i64, i64* %envptr8093173, i64 2            ; &envptr8093173[2]
  %MsC$a = load i64, i64* %envptr8093174, align 8                                    ; load; *envptr8093174
  %envptr8093175 = inttoptr i64 %env8092528 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093176 = getelementptr inbounds i64, i64* %envptr8093175, i64 1            ; &envptr8093175[1]
  %cky$cc = load i64, i64* %envptr8093176, align 8                                   ; load; *envptr8093176
  %_958085960 = call i64 @prim_car(i64 %rvp8088790)                                  ; call prim_car
  %rvp8088789 = call i64 @prim_cdr(i64 %rvp8088790)                                  ; call prim_cdr
  %RGM$b = call i64 @prim_car(i64 %rvp8088789)                                       ; call prim_car
  %na8088778 = call i64 @prim_cdr(i64 %rvp8088789)                                   ; call prim_cdr
  %arg8086380 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085772 = call i64 @prim_vector_45ref(i64 %MsC$a, i64 %arg8086380)               ; call prim_vector_45ref
  %a8085773 = call i64 @prim_cdr(i64 %a8085772)                                      ; call prim_cdr
  %arg8086384 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085962 = call i64 @prim_vector_45set_33(i64 %MsC$a, i64 %arg8086384, i64 %a8085773); call prim_vector_45set_33
  %cloptr8093177 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093179 = getelementptr inbounds i64, i64* %cloptr8093177, i64 1              ; &eptr8093179[1]
  %eptr8093180 = getelementptr inbounds i64, i64* %cloptr8093177, i64 2              ; &eptr8093180[2]
  store i64 %cky$cc, i64* %eptr8093179                                               ; *eptr8093179 = %cky$cc
  store i64 %cont8085958, i64* %eptr8093180                                          ; *eptr8093180 = %cont8085958
  %eptr8093178 = getelementptr inbounds i64, i64* %cloptr8093177, i64 0              ; &cloptr8093177[0]
  %f8093181 = ptrtoint void(i64,i64)* @lam8092523 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093181, i64* %eptr8093178                                             ; store fptr
  %arg8086388 = ptrtoint i64* %cloptr8093177 to i64                                  ; closure cast; i64* -> i64
  %arg8086387 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088788 = add i64 0, 0                                                         ; quoted ()
  %rva8088787 = call i64 @prim_cons(i64 %retprim8085962, i64 %rva8088788)            ; call prim_cons
  %rva8088786 = call i64 @prim_cons(i64 %arg8086387, i64 %rva8088787)                ; call prim_cons
  %cloptr8093182 = inttoptr i64 %arg8086388 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093183 = getelementptr inbounds i64, i64* %cloptr8093182, i64 0             ; &cloptr8093182[0]
  %f8093185 = load i64, i64* %i0ptr8093183, align 8                                  ; load; *i0ptr8093183
  %fptr8093184 = inttoptr i64 %f8093185 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093184(i64 %arg8086388, i64 %rva8088786)           ; tail call
  ret void
}


define void @lam8092523(i64 %env8092524, i64 %rvp8088785) {
  %envptr8093186 = inttoptr i64 %env8092524 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093187 = getelementptr inbounds i64, i64* %envptr8093186, i64 2            ; &envptr8093186[2]
  %cont8085958 = load i64, i64* %envptr8093187, align 8                              ; load; *envptr8093187
  %envptr8093188 = inttoptr i64 %env8092524 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093189 = getelementptr inbounds i64, i64* %envptr8093188, i64 1            ; &envptr8093188[1]
  %cky$cc = load i64, i64* %envptr8093189, align 8                                   ; load; *envptr8093189
  %_958085961 = call i64 @prim_car(i64 %rvp8088785)                                  ; call prim_car
  %rvp8088784 = call i64 @prim_cdr(i64 %rvp8088785)                                  ; call prim_cdr
  %Izx$_950 = call i64 @prim_car(i64 %rvp8088784)                                    ; call prim_car
  %na8088780 = call i64 @prim_cdr(i64 %rvp8088784)                                   ; call prim_cdr
  %rva8088783 = add i64 0, 0                                                         ; quoted ()
  %rva8088782 = call i64 @prim_cons(i64 %cky$cc, i64 %rva8088783)                    ; call prim_cons
  %rva8088781 = call i64 @prim_cons(i64 %cont8085958, i64 %rva8088782)               ; call prim_cons
  %cloptr8093190 = inttoptr i64 %cky$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8093191 = getelementptr inbounds i64, i64* %cloptr8093190, i64 0             ; &cloptr8093190[0]
  %f8093193 = load i64, i64* %i0ptr8093191, align 8                                  ; load; *i0ptr8093191
  %fptr8093192 = inttoptr i64 %f8093193 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093192(i64 %cky$cc, i64 %rva8088781)               ; tail call
  ret void
}


define void @lam8092512(i64 %env8092513, i64 %rvp8088866) {
  %cont8085965 = call i64 @prim_car(i64 %rvp8088866)                                 ; call prim_car
  %rvp8088865 = call i64 @prim_cdr(i64 %rvp8088866)                                  ; call prim_cdr
  %lBY$lst = call i64 @prim_car(i64 %rvp8088865)                                     ; call prim_car
  %rvp8088864 = call i64 @prim_cdr(i64 %rvp8088865)                                  ; call prim_cdr
  %Jec$n = call i64 @prim_car(i64 %rvp8088864)                                       ; call prim_car
  %na8088805 = call i64 @prim_cdr(i64 %rvp8088864)                                   ; call prim_cdr
  %arg8086396 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %oKw$lst = call i64 @prim_make_45vector(i64 %arg8086396, i64 %lBY$lst)             ; call prim_make_45vector
  %arg8086398 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %KYg$n = call i64 @prim_make_45vector(i64 %arg8086398, i64 %Jec$n)                 ; call prim_make_45vector
  %cloptr8093194 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093195 = getelementptr inbounds i64, i64* %cloptr8093194, i64 0              ; &cloptr8093194[0]
  %f8093196 = ptrtoint void(i64,i64)* @lam8092508 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093196, i64* %eptr8093195                                             ; store fptr
  %arg8086401 = ptrtoint i64* %cloptr8093194 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093197 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093199 = getelementptr inbounds i64, i64* %cloptr8093197, i64 1              ; &eptr8093199[1]
  %eptr8093200 = getelementptr inbounds i64, i64* %cloptr8093197, i64 2              ; &eptr8093200[2]
  %eptr8093201 = getelementptr inbounds i64, i64* %cloptr8093197, i64 3              ; &eptr8093201[3]
  store i64 %oKw$lst, i64* %eptr8093199                                              ; *eptr8093199 = %oKw$lst
  store i64 %cont8085965, i64* %eptr8093200                                          ; *eptr8093200 = %cont8085965
  store i64 %KYg$n, i64* %eptr8093201                                                ; *eptr8093201 = %KYg$n
  %eptr8093198 = getelementptr inbounds i64, i64* %cloptr8093197, i64 0              ; &cloptr8093197[0]
  %f8093202 = ptrtoint void(i64,i64)* @lam8092505 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093202, i64* %eptr8093198                                             ; store fptr
  %arg8086400 = ptrtoint i64* %cloptr8093197 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093203 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093205 = getelementptr inbounds i64, i64* %cloptr8093203, i64 1              ; &eptr8093205[1]
  %eptr8093206 = getelementptr inbounds i64, i64* %cloptr8093203, i64 2              ; &eptr8093206[2]
  %eptr8093207 = getelementptr inbounds i64, i64* %cloptr8093203, i64 3              ; &eptr8093207[3]
  store i64 %oKw$lst, i64* %eptr8093205                                              ; *eptr8093205 = %oKw$lst
  store i64 %cont8085965, i64* %eptr8093206                                          ; *eptr8093206 = %cont8085965
  store i64 %KYg$n, i64* %eptr8093207                                                ; *eptr8093207 = %KYg$n
  %eptr8093204 = getelementptr inbounds i64, i64* %cloptr8093203, i64 0              ; &cloptr8093203[0]
  %f8093208 = ptrtoint void(i64,i64)* @lam8092484 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093208, i64* %eptr8093204                                             ; store fptr
  %arg8086399 = ptrtoint i64* %cloptr8093203 to i64                                  ; closure cast; i64* -> i64
  %rva8088863 = add i64 0, 0                                                         ; quoted ()
  %rva8088862 = call i64 @prim_cons(i64 %arg8086399, i64 %rva8088863)                ; call prim_cons
  %rva8088861 = call i64 @prim_cons(i64 %arg8086400, i64 %rva8088862)                ; call prim_cons
  %cloptr8093209 = inttoptr i64 %arg8086401 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093210 = getelementptr inbounds i64, i64* %cloptr8093209, i64 0             ; &cloptr8093209[0]
  %f8093212 = load i64, i64* %i0ptr8093210, align 8                                  ; load; *i0ptr8093210
  %fptr8093211 = inttoptr i64 %f8093212 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093211(i64 %arg8086401, i64 %rva8088861)           ; tail call
  ret void
}


define void @lam8092508(i64 %env8092509, i64 %rvp8088812) {
  %cont8085972 = call i64 @prim_car(i64 %rvp8088812)                                 ; call prim_car
  %rvp8088811 = call i64 @prim_cdr(i64 %rvp8088812)                                  ; call prim_cdr
  %yCf$u = call i64 @prim_car(i64 %rvp8088811)                                       ; call prim_car
  %na8088807 = call i64 @prim_cdr(i64 %rvp8088811)                                   ; call prim_cdr
  %rva8088810 = add i64 0, 0                                                         ; quoted ()
  %rva8088809 = call i64 @prim_cons(i64 %yCf$u, i64 %rva8088810)                     ; call prim_cons
  %rva8088808 = call i64 @prim_cons(i64 %cont8085972, i64 %rva8088809)               ; call prim_cons
  %cloptr8093213 = inttoptr i64 %yCf$u to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8093214 = getelementptr inbounds i64, i64* %cloptr8093213, i64 0             ; &cloptr8093213[0]
  %f8093216 = load i64, i64* %i0ptr8093214, align 8                                  ; load; *i0ptr8093214
  %fptr8093215 = inttoptr i64 %f8093216 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093215(i64 %yCf$u, i64 %rva8088808)                ; tail call
  ret void
}


define void @lam8092505(i64 %env8092506, i64 %rvp8088836) {
  %envptr8093217 = inttoptr i64 %env8092506 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093218 = getelementptr inbounds i64, i64* %envptr8093217, i64 3            ; &envptr8093217[3]
  %KYg$n = load i64, i64* %envptr8093218, align 8                                    ; load; *envptr8093218
  %envptr8093219 = inttoptr i64 %env8092506 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093220 = getelementptr inbounds i64, i64* %envptr8093219, i64 2            ; &envptr8093219[2]
  %cont8085965 = load i64, i64* %envptr8093220, align 8                              ; load; *envptr8093220
  %envptr8093221 = inttoptr i64 %env8092506 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093222 = getelementptr inbounds i64, i64* %envptr8093221, i64 1            ; &envptr8093221[1]
  %oKw$lst = load i64, i64* %envptr8093222, align 8                                  ; load; *envptr8093222
  %_958085966 = call i64 @prim_car(i64 %rvp8088836)                                  ; call prim_car
  %rvp8088835 = call i64 @prim_cdr(i64 %rvp8088836)                                  ; call prim_cdr
  %qZV$cc = call i64 @prim_car(i64 %rvp8088835)                                      ; call prim_car
  %na8088814 = call i64 @prim_cdr(i64 %rvp8088835)                                   ; call prim_cdr
  %arg8086405 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085774 = call i64 @prim_vector_45ref(i64 %KYg$n, i64 %arg8086405)               ; call prim_vector_45ref
  %arg8086408 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085775 = call i64 @prim__61(i64 %arg8086408, i64 %a8085774)                     ; call prim__61
  %cmp8093223 = icmp eq i64 %a8085775, 15                                            ; false?
  br i1 %cmp8093223, label %else8093225, label %then8093224                          ; if

then8093224:
  %arg8086409 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085967 = call i64 @prim_vector_45ref(i64 %oKw$lst, i64 %arg8086409)       ; call prim_vector_45ref
  %arg8086412 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088817 = add i64 0, 0                                                         ; quoted ()
  %rva8088816 = call i64 @prim_cons(i64 %retprim8085967, i64 %rva8088817)            ; call prim_cons
  %rva8088815 = call i64 @prim_cons(i64 %arg8086412, i64 %rva8088816)                ; call prim_cons
  %cloptr8093226 = inttoptr i64 %cont8085965 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093227 = getelementptr inbounds i64, i64* %cloptr8093226, i64 0             ; &cloptr8093226[0]
  %f8093229 = load i64, i64* %i0ptr8093227, align 8                                  ; load; *i0ptr8093227
  %fptr8093228 = inttoptr i64 %f8093229 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093228(i64 %cont8085965, i64 %rva8088815)          ; tail call
  ret void

else8093225:
  %arg8086414 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085776 = call i64 @prim_vector_45ref(i64 %oKw$lst, i64 %arg8086414)             ; call prim_vector_45ref
  %a8085777 = call i64 @prim_cdr(i64 %a8085776)                                      ; call prim_cdr
  %arg8086418 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085971 = call i64 @prim_vector_45set_33(i64 %oKw$lst, i64 %arg8086418, i64 %a8085777); call prim_vector_45set_33
  %cloptr8093230 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093232 = getelementptr inbounds i64, i64* %cloptr8093230, i64 1              ; &eptr8093232[1]
  %eptr8093233 = getelementptr inbounds i64, i64* %cloptr8093230, i64 2              ; &eptr8093233[2]
  %eptr8093234 = getelementptr inbounds i64, i64* %cloptr8093230, i64 3              ; &eptr8093234[3]
  store i64 %qZV$cc, i64* %eptr8093232                                               ; *eptr8093232 = %qZV$cc
  store i64 %cont8085965, i64* %eptr8093233                                          ; *eptr8093233 = %cont8085965
  store i64 %KYg$n, i64* %eptr8093234                                                ; *eptr8093234 = %KYg$n
  %eptr8093231 = getelementptr inbounds i64, i64* %cloptr8093230, i64 0              ; &cloptr8093230[0]
  %f8093235 = ptrtoint void(i64,i64)* @lam8092499 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093235, i64* %eptr8093231                                             ; store fptr
  %arg8086422 = ptrtoint i64* %cloptr8093230 to i64                                  ; closure cast; i64* -> i64
  %arg8086421 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088834 = add i64 0, 0                                                         ; quoted ()
  %rva8088833 = call i64 @prim_cons(i64 %retprim8085971, i64 %rva8088834)            ; call prim_cons
  %rva8088832 = call i64 @prim_cons(i64 %arg8086421, i64 %rva8088833)                ; call prim_cons
  %cloptr8093236 = inttoptr i64 %arg8086422 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093237 = getelementptr inbounds i64, i64* %cloptr8093236, i64 0             ; &cloptr8093236[0]
  %f8093239 = load i64, i64* %i0ptr8093237, align 8                                  ; load; *i0ptr8093237
  %fptr8093238 = inttoptr i64 %f8093239 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093238(i64 %arg8086422, i64 %rva8088832)           ; tail call
  ret void
}


define void @lam8092499(i64 %env8092500, i64 %rvp8088831) {
  %envptr8093240 = inttoptr i64 %env8092500 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093241 = getelementptr inbounds i64, i64* %envptr8093240, i64 3            ; &envptr8093240[3]
  %KYg$n = load i64, i64* %envptr8093241, align 8                                    ; load; *envptr8093241
  %envptr8093242 = inttoptr i64 %env8092500 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093243 = getelementptr inbounds i64, i64* %envptr8093242, i64 2            ; &envptr8093242[2]
  %cont8085965 = load i64, i64* %envptr8093243, align 8                              ; load; *envptr8093243
  %envptr8093244 = inttoptr i64 %env8092500 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093245 = getelementptr inbounds i64, i64* %envptr8093244, i64 1            ; &envptr8093244[1]
  %qZV$cc = load i64, i64* %envptr8093245, align 8                                   ; load; *envptr8093245
  %_958085968 = call i64 @prim_car(i64 %rvp8088831)                                  ; call prim_car
  %rvp8088830 = call i64 @prim_cdr(i64 %rvp8088831)                                  ; call prim_cdr
  %d29$_950 = call i64 @prim_car(i64 %rvp8088830)                                    ; call prim_car
  %na8088819 = call i64 @prim_cdr(i64 %rvp8088830)                                   ; call prim_cdr
  %arg8086423 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085778 = call i64 @prim_vector_45ref(i64 %KYg$n, i64 %arg8086423)               ; call prim_vector_45ref
  %arg8086425 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a8085779 = call i64 @prim__45(i64 %a8085778, i64 %arg8086425)                     ; call prim__45
  %arg8086428 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085970 = call i64 @prim_vector_45set_33(i64 %KYg$n, i64 %arg8086428, i64 %a8085779); call prim_vector_45set_33
  %cloptr8093246 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093248 = getelementptr inbounds i64, i64* %cloptr8093246, i64 1              ; &eptr8093248[1]
  %eptr8093249 = getelementptr inbounds i64, i64* %cloptr8093246, i64 2              ; &eptr8093249[2]
  store i64 %qZV$cc, i64* %eptr8093248                                               ; *eptr8093248 = %qZV$cc
  store i64 %cont8085965, i64* %eptr8093249                                          ; *eptr8093249 = %cont8085965
  %eptr8093247 = getelementptr inbounds i64, i64* %cloptr8093246, i64 0              ; &cloptr8093246[0]
  %f8093250 = ptrtoint void(i64,i64)* @lam8092494 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093250, i64* %eptr8093247                                             ; store fptr
  %arg8086432 = ptrtoint i64* %cloptr8093246 to i64                                  ; closure cast; i64* -> i64
  %arg8086431 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088829 = add i64 0, 0                                                         ; quoted ()
  %rva8088828 = call i64 @prim_cons(i64 %retprim8085970, i64 %rva8088829)            ; call prim_cons
  %rva8088827 = call i64 @prim_cons(i64 %arg8086431, i64 %rva8088828)                ; call prim_cons
  %cloptr8093251 = inttoptr i64 %arg8086432 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093252 = getelementptr inbounds i64, i64* %cloptr8093251, i64 0             ; &cloptr8093251[0]
  %f8093254 = load i64, i64* %i0ptr8093252, align 8                                  ; load; *i0ptr8093252
  %fptr8093253 = inttoptr i64 %f8093254 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093253(i64 %arg8086432, i64 %rva8088827)           ; tail call
  ret void
}


define void @lam8092494(i64 %env8092495, i64 %rvp8088826) {
  %envptr8093255 = inttoptr i64 %env8092495 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093256 = getelementptr inbounds i64, i64* %envptr8093255, i64 2            ; &envptr8093255[2]
  %cont8085965 = load i64, i64* %envptr8093256, align 8                              ; load; *envptr8093256
  %envptr8093257 = inttoptr i64 %env8092495 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093258 = getelementptr inbounds i64, i64* %envptr8093257, i64 1            ; &envptr8093257[1]
  %qZV$cc = load i64, i64* %envptr8093258, align 8                                   ; load; *envptr8093258
  %_958085969 = call i64 @prim_car(i64 %rvp8088826)                                  ; call prim_car
  %rvp8088825 = call i64 @prim_cdr(i64 %rvp8088826)                                  ; call prim_cdr
  %hY5$_951 = call i64 @prim_car(i64 %rvp8088825)                                    ; call prim_car
  %na8088821 = call i64 @prim_cdr(i64 %rvp8088825)                                   ; call prim_cdr
  %rva8088824 = add i64 0, 0                                                         ; quoted ()
  %rva8088823 = call i64 @prim_cons(i64 %qZV$cc, i64 %rva8088824)                    ; call prim_cons
  %rva8088822 = call i64 @prim_cons(i64 %cont8085965, i64 %rva8088823)               ; call prim_cons
  %cloptr8093259 = inttoptr i64 %qZV$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8093260 = getelementptr inbounds i64, i64* %cloptr8093259, i64 0             ; &cloptr8093259[0]
  %f8093262 = load i64, i64* %i0ptr8093260, align 8                                  ; load; *i0ptr8093260
  %fptr8093261 = inttoptr i64 %f8093262 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093261(i64 %qZV$cc, i64 %rva8088822)               ; tail call
  ret void
}


define void @lam8092484(i64 %env8092485, i64 %rvp8088860) {
  %envptr8093263 = inttoptr i64 %env8092485 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093264 = getelementptr inbounds i64, i64* %envptr8093263, i64 3            ; &envptr8093263[3]
  %KYg$n = load i64, i64* %envptr8093264, align 8                                    ; load; *envptr8093264
  %envptr8093265 = inttoptr i64 %env8092485 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093266 = getelementptr inbounds i64, i64* %envptr8093265, i64 2            ; &envptr8093265[2]
  %cont8085965 = load i64, i64* %envptr8093266, align 8                              ; load; *envptr8093266
  %envptr8093267 = inttoptr i64 %env8092485 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093268 = getelementptr inbounds i64, i64* %envptr8093267, i64 1            ; &envptr8093267[1]
  %oKw$lst = load i64, i64* %envptr8093268, align 8                                  ; load; *envptr8093268
  %_958085966 = call i64 @prim_car(i64 %rvp8088860)                                  ; call prim_car
  %rvp8088859 = call i64 @prim_cdr(i64 %rvp8088860)                                  ; call prim_cdr
  %qZV$cc = call i64 @prim_car(i64 %rvp8088859)                                      ; call prim_car
  %na8088838 = call i64 @prim_cdr(i64 %rvp8088859)                                   ; call prim_cdr
  %arg8086436 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085774 = call i64 @prim_vector_45ref(i64 %KYg$n, i64 %arg8086436)               ; call prim_vector_45ref
  %arg8086439 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085775 = call i64 @prim__61(i64 %arg8086439, i64 %a8085774)                     ; call prim__61
  %cmp8093269 = icmp eq i64 %a8085775, 15                                            ; false?
  br i1 %cmp8093269, label %else8093271, label %then8093270                          ; if

then8093270:
  %arg8086440 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085967 = call i64 @prim_vector_45ref(i64 %oKw$lst, i64 %arg8086440)       ; call prim_vector_45ref
  %arg8086443 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088841 = add i64 0, 0                                                         ; quoted ()
  %rva8088840 = call i64 @prim_cons(i64 %retprim8085967, i64 %rva8088841)            ; call prim_cons
  %rva8088839 = call i64 @prim_cons(i64 %arg8086443, i64 %rva8088840)                ; call prim_cons
  %cloptr8093272 = inttoptr i64 %cont8085965 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093273 = getelementptr inbounds i64, i64* %cloptr8093272, i64 0             ; &cloptr8093272[0]
  %f8093275 = load i64, i64* %i0ptr8093273, align 8                                  ; load; *i0ptr8093273
  %fptr8093274 = inttoptr i64 %f8093275 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093274(i64 %cont8085965, i64 %rva8088839)          ; tail call
  ret void

else8093271:
  %arg8086445 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085776 = call i64 @prim_vector_45ref(i64 %oKw$lst, i64 %arg8086445)             ; call prim_vector_45ref
  %a8085777 = call i64 @prim_cdr(i64 %a8085776)                                      ; call prim_cdr
  %arg8086449 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085971 = call i64 @prim_vector_45set_33(i64 %oKw$lst, i64 %arg8086449, i64 %a8085777); call prim_vector_45set_33
  %cloptr8093276 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093278 = getelementptr inbounds i64, i64* %cloptr8093276, i64 1              ; &eptr8093278[1]
  %eptr8093279 = getelementptr inbounds i64, i64* %cloptr8093276, i64 2              ; &eptr8093279[2]
  %eptr8093280 = getelementptr inbounds i64, i64* %cloptr8093276, i64 3              ; &eptr8093280[3]
  store i64 %qZV$cc, i64* %eptr8093278                                               ; *eptr8093278 = %qZV$cc
  store i64 %cont8085965, i64* %eptr8093279                                          ; *eptr8093279 = %cont8085965
  store i64 %KYg$n, i64* %eptr8093280                                                ; *eptr8093280 = %KYg$n
  %eptr8093277 = getelementptr inbounds i64, i64* %cloptr8093276, i64 0              ; &cloptr8093276[0]
  %f8093281 = ptrtoint void(i64,i64)* @lam8092478 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093281, i64* %eptr8093277                                             ; store fptr
  %arg8086453 = ptrtoint i64* %cloptr8093276 to i64                                  ; closure cast; i64* -> i64
  %arg8086452 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088858 = add i64 0, 0                                                         ; quoted ()
  %rva8088857 = call i64 @prim_cons(i64 %retprim8085971, i64 %rva8088858)            ; call prim_cons
  %rva8088856 = call i64 @prim_cons(i64 %arg8086452, i64 %rva8088857)                ; call prim_cons
  %cloptr8093282 = inttoptr i64 %arg8086453 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093283 = getelementptr inbounds i64, i64* %cloptr8093282, i64 0             ; &cloptr8093282[0]
  %f8093285 = load i64, i64* %i0ptr8093283, align 8                                  ; load; *i0ptr8093283
  %fptr8093284 = inttoptr i64 %f8093285 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093284(i64 %arg8086453, i64 %rva8088856)           ; tail call
  ret void
}


define void @lam8092478(i64 %env8092479, i64 %rvp8088855) {
  %envptr8093286 = inttoptr i64 %env8092479 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093287 = getelementptr inbounds i64, i64* %envptr8093286, i64 3            ; &envptr8093286[3]
  %KYg$n = load i64, i64* %envptr8093287, align 8                                    ; load; *envptr8093287
  %envptr8093288 = inttoptr i64 %env8092479 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093289 = getelementptr inbounds i64, i64* %envptr8093288, i64 2            ; &envptr8093288[2]
  %cont8085965 = load i64, i64* %envptr8093289, align 8                              ; load; *envptr8093289
  %envptr8093290 = inttoptr i64 %env8092479 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093291 = getelementptr inbounds i64, i64* %envptr8093290, i64 1            ; &envptr8093290[1]
  %qZV$cc = load i64, i64* %envptr8093291, align 8                                   ; load; *envptr8093291
  %_958085968 = call i64 @prim_car(i64 %rvp8088855)                                  ; call prim_car
  %rvp8088854 = call i64 @prim_cdr(i64 %rvp8088855)                                  ; call prim_cdr
  %d29$_950 = call i64 @prim_car(i64 %rvp8088854)                                    ; call prim_car
  %na8088843 = call i64 @prim_cdr(i64 %rvp8088854)                                   ; call prim_cdr
  %arg8086454 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085778 = call i64 @prim_vector_45ref(i64 %KYg$n, i64 %arg8086454)               ; call prim_vector_45ref
  %arg8086456 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a8085779 = call i64 @prim__45(i64 %a8085778, i64 %arg8086456)                     ; call prim__45
  %arg8086459 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085970 = call i64 @prim_vector_45set_33(i64 %KYg$n, i64 %arg8086459, i64 %a8085779); call prim_vector_45set_33
  %cloptr8093292 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093294 = getelementptr inbounds i64, i64* %cloptr8093292, i64 1              ; &eptr8093294[1]
  %eptr8093295 = getelementptr inbounds i64, i64* %cloptr8093292, i64 2              ; &eptr8093295[2]
  store i64 %qZV$cc, i64* %eptr8093294                                               ; *eptr8093294 = %qZV$cc
  store i64 %cont8085965, i64* %eptr8093295                                          ; *eptr8093295 = %cont8085965
  %eptr8093293 = getelementptr inbounds i64, i64* %cloptr8093292, i64 0              ; &cloptr8093292[0]
  %f8093296 = ptrtoint void(i64,i64)* @lam8092473 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093296, i64* %eptr8093293                                             ; store fptr
  %arg8086463 = ptrtoint i64* %cloptr8093292 to i64                                  ; closure cast; i64* -> i64
  %arg8086462 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088853 = add i64 0, 0                                                         ; quoted ()
  %rva8088852 = call i64 @prim_cons(i64 %retprim8085970, i64 %rva8088853)            ; call prim_cons
  %rva8088851 = call i64 @prim_cons(i64 %arg8086462, i64 %rva8088852)                ; call prim_cons
  %cloptr8093297 = inttoptr i64 %arg8086463 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093298 = getelementptr inbounds i64, i64* %cloptr8093297, i64 0             ; &cloptr8093297[0]
  %f8093300 = load i64, i64* %i0ptr8093298, align 8                                  ; load; *i0ptr8093298
  %fptr8093299 = inttoptr i64 %f8093300 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093299(i64 %arg8086463, i64 %rva8088851)           ; tail call
  ret void
}


define void @lam8092473(i64 %env8092474, i64 %rvp8088850) {
  %envptr8093301 = inttoptr i64 %env8092474 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093302 = getelementptr inbounds i64, i64* %envptr8093301, i64 2            ; &envptr8093301[2]
  %cont8085965 = load i64, i64* %envptr8093302, align 8                              ; load; *envptr8093302
  %envptr8093303 = inttoptr i64 %env8092474 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093304 = getelementptr inbounds i64, i64* %envptr8093303, i64 1            ; &envptr8093303[1]
  %qZV$cc = load i64, i64* %envptr8093304, align 8                                   ; load; *envptr8093304
  %_958085969 = call i64 @prim_car(i64 %rvp8088850)                                  ; call prim_car
  %rvp8088849 = call i64 @prim_cdr(i64 %rvp8088850)                                  ; call prim_cdr
  %hY5$_951 = call i64 @prim_car(i64 %rvp8088849)                                    ; call prim_car
  %na8088845 = call i64 @prim_cdr(i64 %rvp8088849)                                   ; call prim_cdr
  %rva8088848 = add i64 0, 0                                                         ; quoted ()
  %rva8088847 = call i64 @prim_cons(i64 %qZV$cc, i64 %rva8088848)                    ; call prim_cons
  %rva8088846 = call i64 @prim_cons(i64 %cont8085965, i64 %rva8088847)               ; call prim_cons
  %cloptr8093305 = inttoptr i64 %qZV$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8093306 = getelementptr inbounds i64, i64* %cloptr8093305, i64 0             ; &cloptr8093305[0]
  %f8093308 = load i64, i64* %i0ptr8093306, align 8                                  ; load; *i0ptr8093306
  %fptr8093307 = inttoptr i64 %f8093308 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093307(i64 %qZV$cc, i64 %rva8088846)               ; tail call
  ret void
}


define void @lam8092462(i64 %env8092463, i64 %rvp8088921) {
  %cont8085973 = call i64 @prim_car(i64 %rvp8088921)                                 ; call prim_car
  %rvp8088920 = call i64 @prim_cdr(i64 %rvp8088921)                                  ; call prim_cdr
  %tiG$v = call i64 @prim_car(i64 %rvp8088920)                                       ; call prim_car
  %rvp8088919 = call i64 @prim_cdr(i64 %rvp8088920)                                  ; call prim_cdr
  %Jsp$lst = call i64 @prim_car(i64 %rvp8088919)                                     ; call prim_car
  %na8088868 = call i64 @prim_cdr(i64 %rvp8088919)                                   ; call prim_cdr
  %arg8086468 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %WiF$lst = call i64 @prim_make_45vector(i64 %arg8086468, i64 %Jsp$lst)             ; call prim_make_45vector
  %cloptr8093309 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093310 = getelementptr inbounds i64, i64* %cloptr8093309, i64 0              ; &cloptr8093309[0]
  %f8093311 = ptrtoint void(i64,i64)* @lam8092459 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093311, i64* %eptr8093310                                             ; store fptr
  %arg8086471 = ptrtoint i64* %cloptr8093309 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093312 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093314 = getelementptr inbounds i64, i64* %cloptr8093312, i64 1              ; &eptr8093314[1]
  %eptr8093315 = getelementptr inbounds i64, i64* %cloptr8093312, i64 2              ; &eptr8093315[2]
  %eptr8093316 = getelementptr inbounds i64, i64* %cloptr8093312, i64 3              ; &eptr8093316[3]
  store i64 %WiF$lst, i64* %eptr8093314                                              ; *eptr8093314 = %WiF$lst
  store i64 %tiG$v, i64* %eptr8093315                                                ; *eptr8093315 = %tiG$v
  store i64 %cont8085973, i64* %eptr8093316                                          ; *eptr8093316 = %cont8085973
  %eptr8093313 = getelementptr inbounds i64, i64* %cloptr8093312, i64 0              ; &cloptr8093312[0]
  %f8093317 = ptrtoint void(i64,i64)* @lam8092456 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093317, i64* %eptr8093313                                             ; store fptr
  %arg8086470 = ptrtoint i64* %cloptr8093312 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093318 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093320 = getelementptr inbounds i64, i64* %cloptr8093318, i64 1              ; &eptr8093320[1]
  %eptr8093321 = getelementptr inbounds i64, i64* %cloptr8093318, i64 2              ; &eptr8093321[2]
  %eptr8093322 = getelementptr inbounds i64, i64* %cloptr8093318, i64 3              ; &eptr8093322[3]
  store i64 %WiF$lst, i64* %eptr8093320                                              ; *eptr8093320 = %WiF$lst
  store i64 %tiG$v, i64* %eptr8093321                                                ; *eptr8093321 = %tiG$v
  store i64 %cont8085973, i64* %eptr8093322                                          ; *eptr8093322 = %cont8085973
  %eptr8093319 = getelementptr inbounds i64, i64* %cloptr8093318, i64 0              ; &cloptr8093318[0]
  %f8093323 = ptrtoint void(i64,i64)* @lam8092439 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093323, i64* %eptr8093319                                             ; store fptr
  %arg8086469 = ptrtoint i64* %cloptr8093318 to i64                                  ; closure cast; i64* -> i64
  %rva8088918 = add i64 0, 0                                                         ; quoted ()
  %rva8088917 = call i64 @prim_cons(i64 %arg8086469, i64 %rva8088918)                ; call prim_cons
  %rva8088916 = call i64 @prim_cons(i64 %arg8086470, i64 %rva8088917)                ; call prim_cons
  %cloptr8093324 = inttoptr i64 %arg8086471 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093325 = getelementptr inbounds i64, i64* %cloptr8093324, i64 0             ; &cloptr8093324[0]
  %f8093327 = load i64, i64* %i0ptr8093325, align 8                                  ; load; *i0ptr8093325
  %fptr8093326 = inttoptr i64 %f8093327 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093326(i64 %arg8086471, i64 %rva8088916)           ; tail call
  ret void
}


define void @lam8092459(i64 %env8092460, i64 %rvp8088875) {
  %cont8085978 = call i64 @prim_car(i64 %rvp8088875)                                 ; call prim_car
  %rvp8088874 = call i64 @prim_cdr(i64 %rvp8088875)                                  ; call prim_cdr
  %Cp7$u = call i64 @prim_car(i64 %rvp8088874)                                       ; call prim_car
  %na8088870 = call i64 @prim_cdr(i64 %rvp8088874)                                   ; call prim_cdr
  %rva8088873 = add i64 0, 0                                                         ; quoted ()
  %rva8088872 = call i64 @prim_cons(i64 %Cp7$u, i64 %rva8088873)                     ; call prim_cons
  %rva8088871 = call i64 @prim_cons(i64 %cont8085978, i64 %rva8088872)               ; call prim_cons
  %cloptr8093328 = inttoptr i64 %Cp7$u to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8093329 = getelementptr inbounds i64, i64* %cloptr8093328, i64 0             ; &cloptr8093328[0]
  %f8093331 = load i64, i64* %i0ptr8093329, align 8                                  ; load; *i0ptr8093329
  %fptr8093330 = inttoptr i64 %f8093331 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093330(i64 %Cp7$u, i64 %rva8088871)                ; tail call
  ret void
}


define void @lam8092456(i64 %env8092457, i64 %rvp8088895) {
  %envptr8093332 = inttoptr i64 %env8092457 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093333 = getelementptr inbounds i64, i64* %envptr8093332, i64 3            ; &envptr8093332[3]
  %cont8085973 = load i64, i64* %envptr8093333, align 8                              ; load; *envptr8093333
  %envptr8093334 = inttoptr i64 %env8092457 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093335 = getelementptr inbounds i64, i64* %envptr8093334, i64 2            ; &envptr8093334[2]
  %tiG$v = load i64, i64* %envptr8093335, align 8                                    ; load; *envptr8093335
  %envptr8093336 = inttoptr i64 %env8092457 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093337 = getelementptr inbounds i64, i64* %envptr8093336, i64 1            ; &envptr8093336[1]
  %WiF$lst = load i64, i64* %envptr8093337, align 8                                  ; load; *envptr8093337
  %_958085974 = call i64 @prim_car(i64 %rvp8088895)                                  ; call prim_car
  %rvp8088894 = call i64 @prim_cdr(i64 %rvp8088895)                                  ; call prim_cdr
  %CWH$cc = call i64 @prim_car(i64 %rvp8088894)                                      ; call prim_car
  %na8088877 = call i64 @prim_cdr(i64 %rvp8088894)                                   ; call prim_cdr
  %arg8086475 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085780 = call i64 @prim_vector_45ref(i64 %WiF$lst, i64 %arg8086475)             ; call prim_vector_45ref
  %a8085781 = call i64 @prim_null_63(i64 %a8085780)                                  ; call prim_null_63
  %cmp8093338 = icmp eq i64 %a8085781, 15                                            ; false?
  br i1 %cmp8093338, label %else8093340, label %then8093339                          ; if

then8093339:
  %arg8086479 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8086478 = call i64 @const_init_false()                                         ; quoted #f
  %rva8088880 = add i64 0, 0                                                         ; quoted ()
  %rva8088879 = call i64 @prim_cons(i64 %arg8086478, i64 %rva8088880)                ; call prim_cons
  %rva8088878 = call i64 @prim_cons(i64 %arg8086479, i64 %rva8088879)                ; call prim_cons
  %cloptr8093341 = inttoptr i64 %cont8085973 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093342 = getelementptr inbounds i64, i64* %cloptr8093341, i64 0             ; &cloptr8093341[0]
  %f8093344 = load i64, i64* %i0ptr8093342, align 8                                  ; load; *i0ptr8093342
  %fptr8093343 = inttoptr i64 %f8093344 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093343(i64 %cont8085973, i64 %rva8088878)          ; tail call
  ret void

else8093340:
  %arg8086481 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085782 = call i64 @prim_vector_45ref(i64 %WiF$lst, i64 %arg8086481)             ; call prim_vector_45ref
  %a8085783 = call i64 @prim_car(i64 %a8085782)                                      ; call prim_car
  %a8085784 = call i64 @prim_eqv_63(i64 %a8085783, i64 %tiG$v)                       ; call prim_eqv_63
  %cmp8093345 = icmp eq i64 %a8085784, 15                                            ; false?
  br i1 %cmp8093345, label %else8093347, label %then8093346                          ; if

then8093346:
  %arg8086486 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085975 = call i64 @prim_vector_45ref(i64 %WiF$lst, i64 %arg8086486)       ; call prim_vector_45ref
  %arg8086489 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088883 = add i64 0, 0                                                         ; quoted ()
  %rva8088882 = call i64 @prim_cons(i64 %retprim8085975, i64 %rva8088883)            ; call prim_cons
  %rva8088881 = call i64 @prim_cons(i64 %arg8086489, i64 %rva8088882)                ; call prim_cons
  %cloptr8093348 = inttoptr i64 %cont8085973 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093349 = getelementptr inbounds i64, i64* %cloptr8093348, i64 0             ; &cloptr8093348[0]
  %f8093351 = load i64, i64* %i0ptr8093349, align 8                                  ; load; *i0ptr8093349
  %fptr8093350 = inttoptr i64 %f8093351 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093350(i64 %cont8085973, i64 %rva8088881)          ; tail call
  ret void

else8093347:
  %arg8086491 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085785 = call i64 @prim_vector_45ref(i64 %WiF$lst, i64 %arg8086491)             ; call prim_vector_45ref
  %a8085786 = call i64 @prim_cdr(i64 %a8085785)                                      ; call prim_cdr
  %arg8086495 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085977 = call i64 @prim_vector_45set_33(i64 %WiF$lst, i64 %arg8086495, i64 %a8085786); call prim_vector_45set_33
  %cloptr8093352 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093354 = getelementptr inbounds i64, i64* %cloptr8093352, i64 1              ; &eptr8093354[1]
  %eptr8093355 = getelementptr inbounds i64, i64* %cloptr8093352, i64 2              ; &eptr8093355[2]
  store i64 %CWH$cc, i64* %eptr8093354                                               ; *eptr8093354 = %CWH$cc
  store i64 %cont8085973, i64* %eptr8093355                                          ; *eptr8093355 = %cont8085973
  %eptr8093353 = getelementptr inbounds i64, i64* %cloptr8093352, i64 0              ; &cloptr8093352[0]
  %f8093356 = ptrtoint void(i64,i64)* @lam8092450 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093356, i64* %eptr8093353                                             ; store fptr
  %arg8086499 = ptrtoint i64* %cloptr8093352 to i64                                  ; closure cast; i64* -> i64
  %arg8086498 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088893 = add i64 0, 0                                                         ; quoted ()
  %rva8088892 = call i64 @prim_cons(i64 %retprim8085977, i64 %rva8088893)            ; call prim_cons
  %rva8088891 = call i64 @prim_cons(i64 %arg8086498, i64 %rva8088892)                ; call prim_cons
  %cloptr8093357 = inttoptr i64 %arg8086499 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093358 = getelementptr inbounds i64, i64* %cloptr8093357, i64 0             ; &cloptr8093357[0]
  %f8093360 = load i64, i64* %i0ptr8093358, align 8                                  ; load; *i0ptr8093358
  %fptr8093359 = inttoptr i64 %f8093360 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093359(i64 %arg8086499, i64 %rva8088891)           ; tail call
  ret void
}


define void @lam8092450(i64 %env8092451, i64 %rvp8088890) {
  %envptr8093361 = inttoptr i64 %env8092451 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093362 = getelementptr inbounds i64, i64* %envptr8093361, i64 2            ; &envptr8093361[2]
  %cont8085973 = load i64, i64* %envptr8093362, align 8                              ; load; *envptr8093362
  %envptr8093363 = inttoptr i64 %env8092451 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093364 = getelementptr inbounds i64, i64* %envptr8093363, i64 1            ; &envptr8093363[1]
  %CWH$cc = load i64, i64* %envptr8093364, align 8                                   ; load; *envptr8093364
  %_958085976 = call i64 @prim_car(i64 %rvp8088890)                                  ; call prim_car
  %rvp8088889 = call i64 @prim_cdr(i64 %rvp8088890)                                  ; call prim_cdr
  %YaN$_950 = call i64 @prim_car(i64 %rvp8088889)                                    ; call prim_car
  %na8088885 = call i64 @prim_cdr(i64 %rvp8088889)                                   ; call prim_cdr
  %rva8088888 = add i64 0, 0                                                         ; quoted ()
  %rva8088887 = call i64 @prim_cons(i64 %CWH$cc, i64 %rva8088888)                    ; call prim_cons
  %rva8088886 = call i64 @prim_cons(i64 %cont8085973, i64 %rva8088887)               ; call prim_cons
  %cloptr8093365 = inttoptr i64 %CWH$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8093366 = getelementptr inbounds i64, i64* %cloptr8093365, i64 0             ; &cloptr8093365[0]
  %f8093368 = load i64, i64* %i0ptr8093366, align 8                                  ; load; *i0ptr8093366
  %fptr8093367 = inttoptr i64 %f8093368 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093367(i64 %CWH$cc, i64 %rva8088886)               ; tail call
  ret void
}


define void @lam8092439(i64 %env8092440, i64 %rvp8088915) {
  %envptr8093369 = inttoptr i64 %env8092440 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093370 = getelementptr inbounds i64, i64* %envptr8093369, i64 3            ; &envptr8093369[3]
  %cont8085973 = load i64, i64* %envptr8093370, align 8                              ; load; *envptr8093370
  %envptr8093371 = inttoptr i64 %env8092440 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093372 = getelementptr inbounds i64, i64* %envptr8093371, i64 2            ; &envptr8093371[2]
  %tiG$v = load i64, i64* %envptr8093372, align 8                                    ; load; *envptr8093372
  %envptr8093373 = inttoptr i64 %env8092440 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093374 = getelementptr inbounds i64, i64* %envptr8093373, i64 1            ; &envptr8093373[1]
  %WiF$lst = load i64, i64* %envptr8093374, align 8                                  ; load; *envptr8093374
  %_958085974 = call i64 @prim_car(i64 %rvp8088915)                                  ; call prim_car
  %rvp8088914 = call i64 @prim_cdr(i64 %rvp8088915)                                  ; call prim_cdr
  %CWH$cc = call i64 @prim_car(i64 %rvp8088914)                                      ; call prim_car
  %na8088897 = call i64 @prim_cdr(i64 %rvp8088914)                                   ; call prim_cdr
  %arg8086503 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085780 = call i64 @prim_vector_45ref(i64 %WiF$lst, i64 %arg8086503)             ; call prim_vector_45ref
  %a8085781 = call i64 @prim_null_63(i64 %a8085780)                                  ; call prim_null_63
  %cmp8093375 = icmp eq i64 %a8085781, 15                                            ; false?
  br i1 %cmp8093375, label %else8093377, label %then8093376                          ; if

then8093376:
  %arg8086507 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8086506 = call i64 @const_init_false()                                         ; quoted #f
  %rva8088900 = add i64 0, 0                                                         ; quoted ()
  %rva8088899 = call i64 @prim_cons(i64 %arg8086506, i64 %rva8088900)                ; call prim_cons
  %rva8088898 = call i64 @prim_cons(i64 %arg8086507, i64 %rva8088899)                ; call prim_cons
  %cloptr8093378 = inttoptr i64 %cont8085973 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093379 = getelementptr inbounds i64, i64* %cloptr8093378, i64 0             ; &cloptr8093378[0]
  %f8093381 = load i64, i64* %i0ptr8093379, align 8                                  ; load; *i0ptr8093379
  %fptr8093380 = inttoptr i64 %f8093381 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093380(i64 %cont8085973, i64 %rva8088898)          ; tail call
  ret void

else8093377:
  %arg8086509 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085782 = call i64 @prim_vector_45ref(i64 %WiF$lst, i64 %arg8086509)             ; call prim_vector_45ref
  %a8085783 = call i64 @prim_car(i64 %a8085782)                                      ; call prim_car
  %a8085784 = call i64 @prim_eqv_63(i64 %a8085783, i64 %tiG$v)                       ; call prim_eqv_63
  %cmp8093382 = icmp eq i64 %a8085784, 15                                            ; false?
  br i1 %cmp8093382, label %else8093384, label %then8093383                          ; if

then8093383:
  %arg8086514 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085975 = call i64 @prim_vector_45ref(i64 %WiF$lst, i64 %arg8086514)       ; call prim_vector_45ref
  %arg8086517 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088903 = add i64 0, 0                                                         ; quoted ()
  %rva8088902 = call i64 @prim_cons(i64 %retprim8085975, i64 %rva8088903)            ; call prim_cons
  %rva8088901 = call i64 @prim_cons(i64 %arg8086517, i64 %rva8088902)                ; call prim_cons
  %cloptr8093385 = inttoptr i64 %cont8085973 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093386 = getelementptr inbounds i64, i64* %cloptr8093385, i64 0             ; &cloptr8093385[0]
  %f8093388 = load i64, i64* %i0ptr8093386, align 8                                  ; load; *i0ptr8093386
  %fptr8093387 = inttoptr i64 %f8093388 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093387(i64 %cont8085973, i64 %rva8088901)          ; tail call
  ret void

else8093384:
  %arg8086519 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085785 = call i64 @prim_vector_45ref(i64 %WiF$lst, i64 %arg8086519)             ; call prim_vector_45ref
  %a8085786 = call i64 @prim_cdr(i64 %a8085785)                                      ; call prim_cdr
  %arg8086523 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8085977 = call i64 @prim_vector_45set_33(i64 %WiF$lst, i64 %arg8086523, i64 %a8085786); call prim_vector_45set_33
  %cloptr8093389 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093391 = getelementptr inbounds i64, i64* %cloptr8093389, i64 1              ; &eptr8093391[1]
  %eptr8093392 = getelementptr inbounds i64, i64* %cloptr8093389, i64 2              ; &eptr8093392[2]
  store i64 %CWH$cc, i64* %eptr8093391                                               ; *eptr8093391 = %CWH$cc
  store i64 %cont8085973, i64* %eptr8093392                                          ; *eptr8093392 = %cont8085973
  %eptr8093390 = getelementptr inbounds i64, i64* %cloptr8093389, i64 0              ; &cloptr8093389[0]
  %f8093393 = ptrtoint void(i64,i64)* @lam8092433 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093393, i64* %eptr8093390                                             ; store fptr
  %arg8086527 = ptrtoint i64* %cloptr8093389 to i64                                  ; closure cast; i64* -> i64
  %arg8086526 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088913 = add i64 0, 0                                                         ; quoted ()
  %rva8088912 = call i64 @prim_cons(i64 %retprim8085977, i64 %rva8088913)            ; call prim_cons
  %rva8088911 = call i64 @prim_cons(i64 %arg8086526, i64 %rva8088912)                ; call prim_cons
  %cloptr8093394 = inttoptr i64 %arg8086527 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093395 = getelementptr inbounds i64, i64* %cloptr8093394, i64 0             ; &cloptr8093394[0]
  %f8093397 = load i64, i64* %i0ptr8093395, align 8                                  ; load; *i0ptr8093395
  %fptr8093396 = inttoptr i64 %f8093397 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093396(i64 %arg8086527, i64 %rva8088911)           ; tail call
  ret void
}


define void @lam8092433(i64 %env8092434, i64 %rvp8088910) {
  %envptr8093398 = inttoptr i64 %env8092434 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093399 = getelementptr inbounds i64, i64* %envptr8093398, i64 2            ; &envptr8093398[2]
  %cont8085973 = load i64, i64* %envptr8093399, align 8                              ; load; *envptr8093399
  %envptr8093400 = inttoptr i64 %env8092434 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093401 = getelementptr inbounds i64, i64* %envptr8093400, i64 1            ; &envptr8093400[1]
  %CWH$cc = load i64, i64* %envptr8093401, align 8                                   ; load; *envptr8093401
  %_958085976 = call i64 @prim_car(i64 %rvp8088910)                                  ; call prim_car
  %rvp8088909 = call i64 @prim_cdr(i64 %rvp8088910)                                  ; call prim_cdr
  %YaN$_950 = call i64 @prim_car(i64 %rvp8088909)                                    ; call prim_car
  %na8088905 = call i64 @prim_cdr(i64 %rvp8088909)                                   ; call prim_cdr
  %rva8088908 = add i64 0, 0                                                         ; quoted ()
  %rva8088907 = call i64 @prim_cons(i64 %CWH$cc, i64 %rva8088908)                    ; call prim_cons
  %rva8088906 = call i64 @prim_cons(i64 %cont8085973, i64 %rva8088907)               ; call prim_cons
  %cloptr8093402 = inttoptr i64 %CWH$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8093403 = getelementptr inbounds i64, i64* %cloptr8093402, i64 0             ; &cloptr8093402[0]
  %f8093405 = load i64, i64* %i0ptr8093403, align 8                                  ; load; *i0ptr8093403
  %fptr8093404 = inttoptr i64 %f8093405 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093404(i64 %CWH$cc, i64 %rva8088906)               ; tail call
  ret void
}


define void @lam8092421(i64 %env8092422, i64 %rfp$args8085980) {
  %envptr8093406 = inttoptr i64 %env8092422 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093407 = getelementptr inbounds i64, i64* %envptr8093406, i64 1            ; &envptr8093406[1]
  %EvB$_37foldl1 = load i64, i64* %envptr8093407, align 8                            ; load; *envptr8093407
  %cont8085979 = call i64 @prim_car(i64 %rfp$args8085980)                            ; call prim_car
  %rfp$args = call i64 @prim_cdr(i64 %rfp$args8085980)                               ; call prim_cdr
  %a8085787 = call i64 @prim_null_63(i64 %rfp$args)                                  ; call prim_null_63
  %cmp8093408 = icmp eq i64 %a8085787, 15                                            ; false?
  br i1 %cmp8093408, label %else8093410, label %then8093409                          ; if

then8093409:
  %arg8086535 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8086534 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva8088924 = add i64 0, 0                                                         ; quoted ()
  %rva8088923 = call i64 @prim_cons(i64 %arg8086534, i64 %rva8088924)                ; call prim_cons
  %rva8088922 = call i64 @prim_cons(i64 %arg8086535, i64 %rva8088923)                ; call prim_cons
  %cloptr8093411 = inttoptr i64 %cont8085979 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093412 = getelementptr inbounds i64, i64* %cloptr8093411, i64 0             ; &cloptr8093411[0]
  %f8093414 = load i64, i64* %i0ptr8093412, align 8                                  ; load; *i0ptr8093412
  %fptr8093413 = inttoptr i64 %f8093414 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093413(i64 %cont8085979, i64 %rva8088922)          ; tail call
  ret void

else8093410:
  %a8085788 = call i64 @prim_cdr(i64 %rfp$args)                                      ; call prim_cdr
  %a8085789 = call i64 @prim_null_63(i64 %a8085788)                                  ; call prim_null_63
  %cmp8093415 = icmp eq i64 %a8085789, 15                                            ; false?
  br i1 %cmp8093415, label %else8093417, label %then8093416                          ; if

then8093416:
  %retprim8085981 = call i64 @prim_car(i64 %rfp$args)                                ; call prim_car
  %arg8086541 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088927 = add i64 0, 0                                                         ; quoted ()
  %rva8088926 = call i64 @prim_cons(i64 %retprim8085981, i64 %rva8088927)            ; call prim_cons
  %rva8088925 = call i64 @prim_cons(i64 %arg8086541, i64 %rva8088926)                ; call prim_cons
  %cloptr8093418 = inttoptr i64 %cont8085979 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093419 = getelementptr inbounds i64, i64* %cloptr8093418, i64 0             ; &cloptr8093418[0]
  %f8093421 = load i64, i64* %i0ptr8093419, align 8                                  ; load; *i0ptr8093419
  %fptr8093420 = inttoptr i64 %f8093421 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093420(i64 %cont8085979, i64 %rva8088925)          ; tail call
  ret void

else8093417:
  %a8085790 = call i64 @prim_car(i64 %rfp$args)                                      ; call prim_car
  %a8085791 = call i64 @prim_cdr(i64 %rfp$args)                                      ; call prim_cdr
  %cloptr8093422 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093423 = getelementptr inbounds i64, i64* %cloptr8093422, i64 0              ; &cloptr8093422[0]
  %f8093424 = ptrtoint void(i64,i64)* @lam8092419 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093424, i64* %eptr8093423                                             ; store fptr
  %arg8086547 = ptrtoint i64* %cloptr8093422 to i64                                  ; closure cast; i64* -> i64
  %rva8088940 = add i64 0, 0                                                         ; quoted ()
  %rva8088939 = call i64 @prim_cons(i64 %a8085791, i64 %rva8088940)                  ; call prim_cons
  %rva8088938 = call i64 @prim_cons(i64 %a8085790, i64 %rva8088939)                  ; call prim_cons
  %rva8088937 = call i64 @prim_cons(i64 %arg8086547, i64 %rva8088938)                ; call prim_cons
  %rva8088936 = call i64 @prim_cons(i64 %cont8085979, i64 %rva8088937)               ; call prim_cons
  %cloptr8093425 = inttoptr i64 %EvB$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8093426 = getelementptr inbounds i64, i64* %cloptr8093425, i64 0             ; &cloptr8093425[0]
  %f8093428 = load i64, i64* %i0ptr8093426, align 8                                  ; load; *i0ptr8093426
  %fptr8093427 = inttoptr i64 %f8093428 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093427(i64 %EvB$_37foldl1, i64 %rva8088936)        ; tail call
  ret void
}


define void @lam8092419(i64 %env8092420, i64 %rvp8088935) {
  %cont8085982 = call i64 @prim_car(i64 %rvp8088935)                                 ; call prim_car
  %rvp8088934 = call i64 @prim_cdr(i64 %rvp8088935)                                  ; call prim_cdr
  %GFO$n = call i64 @prim_car(i64 %rvp8088934)                                       ; call prim_car
  %rvp8088933 = call i64 @prim_cdr(i64 %rvp8088934)                                  ; call prim_cdr
  %xW7$v = call i64 @prim_car(i64 %rvp8088933)                                       ; call prim_car
  %na8088929 = call i64 @prim_cdr(i64 %rvp8088933)                                   ; call prim_cdr
  %retprim8085983 = call i64 @prim__47(i64 %xW7$v, i64 %GFO$n)                       ; call prim__47
  %arg8086553 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088932 = add i64 0, 0                                                         ; quoted ()
  %rva8088931 = call i64 @prim_cons(i64 %retprim8085983, i64 %rva8088932)            ; call prim_cons
  %rva8088930 = call i64 @prim_cons(i64 %arg8086553, i64 %rva8088931)                ; call prim_cons
  %cloptr8093429 = inttoptr i64 %cont8085982 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093430 = getelementptr inbounds i64, i64* %cloptr8093429, i64 0             ; &cloptr8093429[0]
  %f8093432 = load i64, i64* %i0ptr8093430, align 8                                  ; load; *i0ptr8093430
  %fptr8093431 = inttoptr i64 %f8093432 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093431(i64 %cont8085982, i64 %rva8088930)          ; tail call
  ret void
}


define void @lam8092409(i64 %env8092410, i64 %rvp8088947) {
  %cont8085984 = call i64 @prim_car(i64 %rvp8088947)                                 ; call prim_car
  %rvp8088946 = call i64 @prim_cdr(i64 %rvp8088947)                                  ; call prim_cdr
  %W5b$x = call i64 @prim_car(i64 %rvp8088946)                                       ; call prim_car
  %na8088942 = call i64 @prim_cdr(i64 %rvp8088946)                                   ; call prim_cdr
  %retprim8085985 = call i64 @prim_car(i64 %W5b$x)                                   ; call prim_car
  %arg8086557 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088945 = add i64 0, 0                                                         ; quoted ()
  %rva8088944 = call i64 @prim_cons(i64 %retprim8085985, i64 %rva8088945)            ; call prim_cons
  %rva8088943 = call i64 @prim_cons(i64 %arg8086557, i64 %rva8088944)                ; call prim_cons
  %cloptr8093433 = inttoptr i64 %cont8085984 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093434 = getelementptr inbounds i64, i64* %cloptr8093433, i64 0             ; &cloptr8093433[0]
  %f8093436 = load i64, i64* %i0ptr8093434, align 8                                  ; load; *i0ptr8093434
  %fptr8093435 = inttoptr i64 %f8093436 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093435(i64 %cont8085984, i64 %rva8088943)          ; tail call
  ret void
}


define void @lam8092405(i64 %env8092406, i64 %rvp8088954) {
  %cont8085986 = call i64 @prim_car(i64 %rvp8088954)                                 ; call prim_car
  %rvp8088953 = call i64 @prim_cdr(i64 %rvp8088954)                                  ; call prim_cdr
  %Y6x$x = call i64 @prim_car(i64 %rvp8088953)                                       ; call prim_car
  %na8088949 = call i64 @prim_cdr(i64 %rvp8088953)                                   ; call prim_cdr
  %a8085792 = call i64 @prim_cdr(i64 %Y6x$x)                                         ; call prim_cdr
  %retprim8085987 = call i64 @prim_car(i64 %a8085792)                                ; call prim_car
  %arg8086562 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088952 = add i64 0, 0                                                         ; quoted ()
  %rva8088951 = call i64 @prim_cons(i64 %retprim8085987, i64 %rva8088952)            ; call prim_cons
  %rva8088950 = call i64 @prim_cons(i64 %arg8086562, i64 %rva8088951)                ; call prim_cons
  %cloptr8093437 = inttoptr i64 %cont8085986 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093438 = getelementptr inbounds i64, i64* %cloptr8093437, i64 0             ; &cloptr8093437[0]
  %f8093440 = load i64, i64* %i0ptr8093438, align 8                                  ; load; *i0ptr8093438
  %fptr8093439 = inttoptr i64 %f8093440 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093439(i64 %cont8085986, i64 %rva8088950)          ; tail call
  ret void
}


define void @lam8092401(i64 %env8092402, i64 %rvp8088961) {
  %cont8085988 = call i64 @prim_car(i64 %rvp8088961)                                 ; call prim_car
  %rvp8088960 = call i64 @prim_cdr(i64 %rvp8088961)                                  ; call prim_cdr
  %IOw$x = call i64 @prim_car(i64 %rvp8088960)                                       ; call prim_car
  %na8088956 = call i64 @prim_cdr(i64 %rvp8088960)                                   ; call prim_cdr
  %a8085793 = call i64 @prim_cdr(i64 %IOw$x)                                         ; call prim_cdr
  %a8085794 = call i64 @prim_cdr(i64 %a8085793)                                      ; call prim_cdr
  %retprim8085989 = call i64 @prim_car(i64 %a8085794)                                ; call prim_car
  %arg8086568 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088959 = add i64 0, 0                                                         ; quoted ()
  %rva8088958 = call i64 @prim_cons(i64 %retprim8085989, i64 %rva8088959)            ; call prim_cons
  %rva8088957 = call i64 @prim_cons(i64 %arg8086568, i64 %rva8088958)                ; call prim_cons
  %cloptr8093441 = inttoptr i64 %cont8085988 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093442 = getelementptr inbounds i64, i64* %cloptr8093441, i64 0             ; &cloptr8093441[0]
  %f8093444 = load i64, i64* %i0ptr8093442, align 8                                  ; load; *i0ptr8093442
  %fptr8093443 = inttoptr i64 %f8093444 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093443(i64 %cont8085988, i64 %rva8088957)          ; tail call
  ret void
}


define void @lam8092397(i64 %env8092398, i64 %rvp8088968) {
  %cont8085990 = call i64 @prim_car(i64 %rvp8088968)                                 ; call prim_car
  %rvp8088967 = call i64 @prim_cdr(i64 %rvp8088968)                                  ; call prim_cdr
  %wjj$x = call i64 @prim_car(i64 %rvp8088967)                                       ; call prim_car
  %na8088963 = call i64 @prim_cdr(i64 %rvp8088967)                                   ; call prim_cdr
  %a8085795 = call i64 @prim_cdr(i64 %wjj$x)                                         ; call prim_cdr
  %a8085796 = call i64 @prim_cdr(i64 %a8085795)                                      ; call prim_cdr
  %a8085797 = call i64 @prim_cdr(i64 %a8085796)                                      ; call prim_cdr
  %retprim8085991 = call i64 @prim_car(i64 %a8085797)                                ; call prim_car
  %arg8086575 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088966 = add i64 0, 0                                                         ; quoted ()
  %rva8088965 = call i64 @prim_cons(i64 %retprim8085991, i64 %rva8088966)            ; call prim_cons
  %rva8088964 = call i64 @prim_cons(i64 %arg8086575, i64 %rva8088965)                ; call prim_cons
  %cloptr8093445 = inttoptr i64 %cont8085990 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093446 = getelementptr inbounds i64, i64* %cloptr8093445, i64 0             ; &cloptr8093445[0]
  %f8093448 = load i64, i64* %i0ptr8093446, align 8                                  ; load; *i0ptr8093446
  %fptr8093447 = inttoptr i64 %f8093448 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093447(i64 %cont8085990, i64 %rva8088964)          ; tail call
  ret void
}


define void @lam8092393(i64 %env8092394, i64 %rkw$lst8086129) {
  %cont8086128 = call i64 @prim_car(i64 %rkw$lst8086129)                             ; call prim_car
  %rkw$lst = call i64 @prim_cdr(i64 %rkw$lst8086129)                                 ; call prim_cdr
  %arg8086582 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088971 = add i64 0, 0                                                         ; quoted ()
  %rva8088970 = call i64 @prim_cons(i64 %rkw$lst, i64 %rva8088971)                   ; call prim_cons
  %rva8088969 = call i64 @prim_cons(i64 %arg8086582, i64 %rva8088970)                ; call prim_cons
  %cloptr8093449 = inttoptr i64 %cont8086128 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093450 = getelementptr inbounds i64, i64* %cloptr8093449, i64 0             ; &cloptr8093449[0]
  %f8093452 = load i64, i64* %i0ptr8093450, align 8                                  ; load; *i0ptr8093450
  %fptr8093451 = inttoptr i64 %f8093452 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093451(i64 %cont8086128, i64 %rva8088969)          ; tail call
  ret void
}


define void @lam8092389(i64 %env8092390, i64 %rvp8090591) {
  %envptr8093453 = inttoptr i64 %env8092390 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093454 = getelementptr inbounds i64, i64* %envptr8093453, i64 3            ; &envptr8093453[3]
  %kdG$_37drop = load i64, i64* %envptr8093454, align 8                              ; load; *envptr8093454
  %envptr8093455 = inttoptr i64 %env8092390 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093456 = getelementptr inbounds i64, i64* %envptr8093455, i64 2            ; &envptr8093455[2]
  %XOr$_37length = load i64, i64* %envptr8093456, align 8                            ; load; *envptr8093456
  %envptr8093457 = inttoptr i64 %env8092390 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093458 = getelementptr inbounds i64, i64* %envptr8093457, i64 1            ; &envptr8093457[1]
  %fqW$_37_62 = load i64, i64* %envptr8093458, align 8                               ; load; *envptr8093458
  %_958086126 = call i64 @prim_car(i64 %rvp8090591)                                  ; call prim_car
  %rvp8090590 = call i64 @prim_cdr(i64 %rvp8090591)                                  ; call prim_cdr
  %a8085798 = call i64 @prim_car(i64 %rvp8090590)                                    ; call prim_car
  %na8088973 = call i64 @prim_cdr(i64 %rvp8090590)                                   ; call prim_cdr
  %arg8086585 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086127 = call i64 @prim_make_45vector(i64 %arg8086585, i64 %a8085798)     ; call prim_make_45vector
  %cloptr8093459 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093461 = getelementptr inbounds i64, i64* %cloptr8093459, i64 1              ; &eptr8093461[1]
  %eptr8093462 = getelementptr inbounds i64, i64* %cloptr8093459, i64 2              ; &eptr8093462[2]
  %eptr8093463 = getelementptr inbounds i64, i64* %cloptr8093459, i64 3              ; &eptr8093463[3]
  store i64 %fqW$_37_62, i64* %eptr8093461                                           ; *eptr8093461 = %fqW$_37_62
  store i64 %XOr$_37length, i64* %eptr8093462                                        ; *eptr8093462 = %XOr$_37length
  store i64 %kdG$_37drop, i64* %eptr8093463                                          ; *eptr8093463 = %kdG$_37drop
  %eptr8093460 = getelementptr inbounds i64, i64* %cloptr8093459, i64 0              ; &cloptr8093459[0]
  %f8093464 = ptrtoint void(i64,i64)* @lam8092386 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093464, i64* %eptr8093460                                             ; store fptr
  %arg8086588 = ptrtoint i64* %cloptr8093459 to i64                                  ; closure cast; i64* -> i64
  %arg8086587 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090589 = add i64 0, 0                                                         ; quoted ()
  %rva8090588 = call i64 @prim_cons(i64 %retprim8086127, i64 %rva8090589)            ; call prim_cons
  %rva8090587 = call i64 @prim_cons(i64 %arg8086587, i64 %rva8090588)                ; call prim_cons
  %cloptr8093465 = inttoptr i64 %arg8086588 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093466 = getelementptr inbounds i64, i64* %cloptr8093465, i64 0             ; &cloptr8093465[0]
  %f8093468 = load i64, i64* %i0ptr8093466, align 8                                  ; load; *i0ptr8093466
  %fptr8093467 = inttoptr i64 %f8093468 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093467(i64 %arg8086588, i64 %rva8090587)           ; tail call
  ret void
}


define void @lam8092386(i64 %env8092387, i64 %rvp8090586) {
  %envptr8093469 = inttoptr i64 %env8092387 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093470 = getelementptr inbounds i64, i64* %envptr8093469, i64 3            ; &envptr8093469[3]
  %kdG$_37drop = load i64, i64* %envptr8093470, align 8                              ; load; *envptr8093470
  %envptr8093471 = inttoptr i64 %env8092387 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093472 = getelementptr inbounds i64, i64* %envptr8093471, i64 2            ; &envptr8093471[2]
  %XOr$_37length = load i64, i64* %envptr8093472, align 8                            ; load; *envptr8093472
  %envptr8093473 = inttoptr i64 %env8092387 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093474 = getelementptr inbounds i64, i64* %envptr8093473, i64 1            ; &envptr8093473[1]
  %fqW$_37_62 = load i64, i64* %envptr8093474, align 8                               ; load; *envptr8093474
  %_958085992 = call i64 @prim_car(i64 %rvp8090586)                                  ; call prim_car
  %rvp8090585 = call i64 @prim_cdr(i64 %rvp8090586)                                  ; call prim_cdr
  %syN$_37wind_45stack = call i64 @prim_car(i64 %rvp8090585)                         ; call prim_car
  %na8088975 = call i64 @prim_cdr(i64 %rvp8090585)                                   ; call prim_cdr
  %cloptr8093475 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093477 = getelementptr inbounds i64, i64* %cloptr8093475, i64 1              ; &eptr8093477[1]
  %eptr8093478 = getelementptr inbounds i64, i64* %cloptr8093475, i64 2              ; &eptr8093478[2]
  %eptr8093479 = getelementptr inbounds i64, i64* %cloptr8093475, i64 3              ; &eptr8093479[3]
  store i64 %fqW$_37_62, i64* %eptr8093477                                           ; *eptr8093477 = %fqW$_37_62
  store i64 %XOr$_37length, i64* %eptr8093478                                        ; *eptr8093478 = %XOr$_37length
  store i64 %kdG$_37drop, i64* %eptr8093479                                          ; *eptr8093479 = %kdG$_37drop
  %eptr8093476 = getelementptr inbounds i64, i64* %cloptr8093475, i64 0              ; &cloptr8093475[0]
  %f8093480 = ptrtoint void(i64,i64)* @lam8092384 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093480, i64* %eptr8093476                                             ; store fptr
  %PjA$common_45tail = ptrtoint i64* %cloptr8093475 to i64                           ; closure cast; i64* -> i64
  %cloptr8093481 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093483 = getelementptr inbounds i64, i64* %cloptr8093481, i64 1              ; &eptr8093483[1]
  %eptr8093484 = getelementptr inbounds i64, i64* %cloptr8093481, i64 2              ; &eptr8093484[2]
  store i64 %syN$_37wind_45stack, i64* %eptr8093483                                  ; *eptr8093483 = %syN$_37wind_45stack
  store i64 %PjA$common_45tail, i64* %eptr8093484                                    ; *eptr8093484 = %PjA$common_45tail
  %eptr8093482 = getelementptr inbounds i64, i64* %cloptr8093481, i64 0              ; &cloptr8093481[0]
  %f8093485 = ptrtoint void(i64,i64)* @lam8092314 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093485, i64* %eptr8093482                                             ; store fptr
  %ltz$_37do_45wind = ptrtoint i64* %cloptr8093481 to i64                            ; closure cast; i64* -> i64
  %cloptr8093486 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8093488 = getelementptr inbounds i64, i64* %cloptr8093486, i64 1              ; &eptr8093488[1]
  store i64 %syN$_37wind_45stack, i64* %eptr8093488                                  ; *eptr8093488 = %syN$_37wind_45stack
  %eptr8093487 = getelementptr inbounds i64, i64* %cloptr8093486, i64 0              ; &cloptr8093486[0]
  %f8093489 = ptrtoint void(i64,i64)* @lam8091950 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093489, i64* %eptr8093487                                             ; store fptr
  %yo7$_37dynamic_45wind = ptrtoint i64* %cloptr8093486 to i64                       ; closure cast; i64* -> i64
  %cloptr8093490 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093491 = getelementptr inbounds i64, i64* %cloptr8093490, i64 0              ; &cloptr8093490[0]
  %f8093492 = ptrtoint void(i64,i64)* @lam8091840 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093492, i64* %eptr8093491                                             ; store fptr
  %arg8087373 = ptrtoint i64* %cloptr8093490 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093493 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8093495 = getelementptr inbounds i64, i64* %cloptr8093493, i64 1              ; &eptr8093495[1]
  %eptr8093496 = getelementptr inbounds i64, i64* %cloptr8093493, i64 2              ; &eptr8093496[2]
  store i64 %syN$_37wind_45stack, i64* %eptr8093495                                  ; *eptr8093495 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8093496                                     ; *eptr8093496 = %ltz$_37do_45wind
  %eptr8093494 = getelementptr inbounds i64, i64* %cloptr8093493, i64 0              ; &cloptr8093493[0]
  %f8093497 = ptrtoint void(i64,i64)* @lam8091836 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093497, i64* %eptr8093494                                             ; store fptr
  %arg8087372 = ptrtoint i64* %cloptr8093493 to i64                                  ; closure cast; i64* -> i64
  %rva8090584 = add i64 0, 0                                                         ; quoted ()
  %rva8090583 = call i64 @prim_cons(i64 %arg8087372, i64 %rva8090584)                ; call prim_cons
  %cloptr8093498 = inttoptr i64 %arg8087373 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093499 = getelementptr inbounds i64, i64* %cloptr8093498, i64 0             ; &cloptr8093498[0]
  %f8093501 = load i64, i64* %i0ptr8093499, align 8                                  ; load; *i0ptr8093499
  %fptr8093500 = inttoptr i64 %f8093501 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093500(i64 %arg8087373, i64 %rva8090583)           ; tail call
  ret void
}


define void @lam8092384(i64 %env8092385, i64 %rvp8089113) {
  %envptr8093502 = inttoptr i64 %env8092385 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093503 = getelementptr inbounds i64, i64* %envptr8093502, i64 3            ; &envptr8093502[3]
  %kdG$_37drop = load i64, i64* %envptr8093503, align 8                              ; load; *envptr8093503
  %envptr8093504 = inttoptr i64 %env8092385 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093505 = getelementptr inbounds i64, i64* %envptr8093504, i64 2            ; &envptr8093504[2]
  %XOr$_37length = load i64, i64* %envptr8093505, align 8                            ; load; *envptr8093505
  %envptr8093506 = inttoptr i64 %env8092385 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093507 = getelementptr inbounds i64, i64* %envptr8093506, i64 1            ; &envptr8093506[1]
  %fqW$_37_62 = load i64, i64* %envptr8093507, align 8                               ; load; *envptr8093507
  %cont8085993 = call i64 @prim_car(i64 %rvp8089113)                                 ; call prim_car
  %rvp8089112 = call i64 @prim_cdr(i64 %rvp8089113)                                  ; call prim_cdr
  %HcT$x = call i64 @prim_car(i64 %rvp8089112)                                       ; call prim_car
  %rvp8089111 = call i64 @prim_cdr(i64 %rvp8089112)                                  ; call prim_cdr
  %FIf$y = call i64 @prim_car(i64 %rvp8089111)                                       ; call prim_car
  %na8088977 = call i64 @prim_cdr(i64 %rvp8089111)                                   ; call prim_cdr
  %cloptr8093508 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8093510 = getelementptr inbounds i64, i64* %cloptr8093508, i64 1              ; &eptr8093510[1]
  %eptr8093511 = getelementptr inbounds i64, i64* %cloptr8093508, i64 2              ; &eptr8093511[2]
  %eptr8093512 = getelementptr inbounds i64, i64* %cloptr8093508, i64 3              ; &eptr8093512[3]
  %eptr8093513 = getelementptr inbounds i64, i64* %cloptr8093508, i64 4              ; &eptr8093513[4]
  %eptr8093514 = getelementptr inbounds i64, i64* %cloptr8093508, i64 5              ; &eptr8093514[5]
  %eptr8093515 = getelementptr inbounds i64, i64* %cloptr8093508, i64 6              ; &eptr8093515[6]
  store i64 %cont8085993, i64* %eptr8093510                                          ; *eptr8093510 = %cont8085993
  store i64 %FIf$y, i64* %eptr8093511                                                ; *eptr8093511 = %FIf$y
  store i64 %fqW$_37_62, i64* %eptr8093512                                           ; *eptr8093512 = %fqW$_37_62
  store i64 %HcT$x, i64* %eptr8093513                                                ; *eptr8093513 = %HcT$x
  store i64 %XOr$_37length, i64* %eptr8093514                                        ; *eptr8093514 = %XOr$_37length
  store i64 %kdG$_37drop, i64* %eptr8093515                                          ; *eptr8093515 = %kdG$_37drop
  %eptr8093509 = getelementptr inbounds i64, i64* %cloptr8093508, i64 0              ; &cloptr8093508[0]
  %f8093516 = ptrtoint void(i64,i64)* @lam8092382 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093516, i64* %eptr8093509                                             ; store fptr
  %arg8086590 = ptrtoint i64* %cloptr8093508 to i64                                  ; closure cast; i64* -> i64
  %rva8089110 = add i64 0, 0                                                         ; quoted ()
  %rva8089109 = call i64 @prim_cons(i64 %HcT$x, i64 %rva8089110)                     ; call prim_cons
  %rva8089108 = call i64 @prim_cons(i64 %arg8086590, i64 %rva8089109)                ; call prim_cons
  %cloptr8093517 = inttoptr i64 %XOr$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8093518 = getelementptr inbounds i64, i64* %cloptr8093517, i64 0             ; &cloptr8093517[0]
  %f8093520 = load i64, i64* %i0ptr8093518, align 8                                  ; load; *i0ptr8093518
  %fptr8093519 = inttoptr i64 %f8093520 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093519(i64 %XOr$_37length, i64 %rva8089108)        ; tail call
  ret void
}


define void @lam8092382(i64 %env8092383, i64 %rvp8089107) {
  %envptr8093521 = inttoptr i64 %env8092383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093522 = getelementptr inbounds i64, i64* %envptr8093521, i64 6            ; &envptr8093521[6]
  %kdG$_37drop = load i64, i64* %envptr8093522, align 8                              ; load; *envptr8093522
  %envptr8093523 = inttoptr i64 %env8092383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093524 = getelementptr inbounds i64, i64* %envptr8093523, i64 5            ; &envptr8093523[5]
  %XOr$_37length = load i64, i64* %envptr8093524, align 8                            ; load; *envptr8093524
  %envptr8093525 = inttoptr i64 %env8092383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093526 = getelementptr inbounds i64, i64* %envptr8093525, i64 4            ; &envptr8093525[4]
  %HcT$x = load i64, i64* %envptr8093526, align 8                                    ; load; *envptr8093526
  %envptr8093527 = inttoptr i64 %env8092383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093528 = getelementptr inbounds i64, i64* %envptr8093527, i64 3            ; &envptr8093527[3]
  %fqW$_37_62 = load i64, i64* %envptr8093528, align 8                               ; load; *envptr8093528
  %envptr8093529 = inttoptr i64 %env8092383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093530 = getelementptr inbounds i64, i64* %envptr8093529, i64 2            ; &envptr8093529[2]
  %FIf$y = load i64, i64* %envptr8093530, align 8                                    ; load; *envptr8093530
  %envptr8093531 = inttoptr i64 %env8092383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093532 = getelementptr inbounds i64, i64* %envptr8093531, i64 1            ; &envptr8093531[1]
  %cont8085993 = load i64, i64* %envptr8093532, align 8                              ; load; *envptr8093532
  %_958085994 = call i64 @prim_car(i64 %rvp8089107)                                  ; call prim_car
  %rvp8089106 = call i64 @prim_cdr(i64 %rvp8089107)                                  ; call prim_cdr
  %b2J$lx = call i64 @prim_car(i64 %rvp8089106)                                      ; call prim_car
  %na8088979 = call i64 @prim_cdr(i64 %rvp8089106)                                   ; call prim_cdr
  %cloptr8093533 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8093535 = getelementptr inbounds i64, i64* %cloptr8093533, i64 1              ; &eptr8093535[1]
  %eptr8093536 = getelementptr inbounds i64, i64* %cloptr8093533, i64 2              ; &eptr8093536[2]
  %eptr8093537 = getelementptr inbounds i64, i64* %cloptr8093533, i64 3              ; &eptr8093537[3]
  %eptr8093538 = getelementptr inbounds i64, i64* %cloptr8093533, i64 4              ; &eptr8093538[4]
  %eptr8093539 = getelementptr inbounds i64, i64* %cloptr8093533, i64 5              ; &eptr8093539[5]
  %eptr8093540 = getelementptr inbounds i64, i64* %cloptr8093533, i64 6              ; &eptr8093540[6]
  store i64 %b2J$lx, i64* %eptr8093535                                               ; *eptr8093535 = %b2J$lx
  store i64 %cont8085993, i64* %eptr8093536                                          ; *eptr8093536 = %cont8085993
  store i64 %FIf$y, i64* %eptr8093537                                                ; *eptr8093537 = %FIf$y
  store i64 %fqW$_37_62, i64* %eptr8093538                                           ; *eptr8093538 = %fqW$_37_62
  store i64 %HcT$x, i64* %eptr8093539                                                ; *eptr8093539 = %HcT$x
  store i64 %kdG$_37drop, i64* %eptr8093540                                          ; *eptr8093540 = %kdG$_37drop
  %eptr8093534 = getelementptr inbounds i64, i64* %cloptr8093533, i64 0              ; &cloptr8093533[0]
  %f8093541 = ptrtoint void(i64,i64)* @lam8092380 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093541, i64* %eptr8093534                                             ; store fptr
  %arg8086593 = ptrtoint i64* %cloptr8093533 to i64                                  ; closure cast; i64* -> i64
  %rva8089105 = add i64 0, 0                                                         ; quoted ()
  %rva8089104 = call i64 @prim_cons(i64 %FIf$y, i64 %rva8089105)                     ; call prim_cons
  %rva8089103 = call i64 @prim_cons(i64 %arg8086593, i64 %rva8089104)                ; call prim_cons
  %cloptr8093542 = inttoptr i64 %XOr$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8093543 = getelementptr inbounds i64, i64* %cloptr8093542, i64 0             ; &cloptr8093542[0]
  %f8093545 = load i64, i64* %i0ptr8093543, align 8                                  ; load; *i0ptr8093543
  %fptr8093544 = inttoptr i64 %f8093545 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093544(i64 %XOr$_37length, i64 %rva8089103)        ; tail call
  ret void
}


define void @lam8092380(i64 %env8092381, i64 %rvp8089102) {
  %envptr8093546 = inttoptr i64 %env8092381 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093547 = getelementptr inbounds i64, i64* %envptr8093546, i64 6            ; &envptr8093546[6]
  %kdG$_37drop = load i64, i64* %envptr8093547, align 8                              ; load; *envptr8093547
  %envptr8093548 = inttoptr i64 %env8092381 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093549 = getelementptr inbounds i64, i64* %envptr8093548, i64 5            ; &envptr8093548[5]
  %HcT$x = load i64, i64* %envptr8093549, align 8                                    ; load; *envptr8093549
  %envptr8093550 = inttoptr i64 %env8092381 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093551 = getelementptr inbounds i64, i64* %envptr8093550, i64 4            ; &envptr8093550[4]
  %fqW$_37_62 = load i64, i64* %envptr8093551, align 8                               ; load; *envptr8093551
  %envptr8093552 = inttoptr i64 %env8092381 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093553 = getelementptr inbounds i64, i64* %envptr8093552, i64 3            ; &envptr8093552[3]
  %FIf$y = load i64, i64* %envptr8093553, align 8                                    ; load; *envptr8093553
  %envptr8093554 = inttoptr i64 %env8092381 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093555 = getelementptr inbounds i64, i64* %envptr8093554, i64 2            ; &envptr8093554[2]
  %cont8085993 = load i64, i64* %envptr8093555, align 8                              ; load; *envptr8093555
  %envptr8093556 = inttoptr i64 %env8092381 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093557 = getelementptr inbounds i64, i64* %envptr8093556, i64 1            ; &envptr8093556[1]
  %b2J$lx = load i64, i64* %envptr8093557, align 8                                   ; load; *envptr8093557
  %_958085995 = call i64 @prim_car(i64 %rvp8089102)                                  ; call prim_car
  %rvp8089101 = call i64 @prim_cdr(i64 %rvp8089102)                                  ; call prim_cdr
  %wUF$ly = call i64 @prim_car(i64 %rvp8089101)                                      ; call prim_car
  %na8088981 = call i64 @prim_cdr(i64 %rvp8089101)                                   ; call prim_cdr
  %cloptr8093558 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093559 = getelementptr inbounds i64, i64* %cloptr8093558, i64 0              ; &cloptr8093558[0]
  %f8093560 = ptrtoint void(i64,i64)* @lam8092378 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093560, i64* %eptr8093559                                             ; store fptr
  %arg8086596 = ptrtoint i64* %cloptr8093558 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093561 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8093563 = getelementptr inbounds i64, i64* %cloptr8093561, i64 1              ; &eptr8093563[1]
  %eptr8093564 = getelementptr inbounds i64, i64* %cloptr8093561, i64 2              ; &eptr8093564[2]
  %eptr8093565 = getelementptr inbounds i64, i64* %cloptr8093561, i64 3              ; &eptr8093565[3]
  %eptr8093566 = getelementptr inbounds i64, i64* %cloptr8093561, i64 4              ; &eptr8093566[4]
  %eptr8093567 = getelementptr inbounds i64, i64* %cloptr8093561, i64 5              ; &eptr8093567[5]
  %eptr8093568 = getelementptr inbounds i64, i64* %cloptr8093561, i64 6              ; &eptr8093568[6]
  %eptr8093569 = getelementptr inbounds i64, i64* %cloptr8093561, i64 7              ; &eptr8093569[7]
  store i64 %b2J$lx, i64* %eptr8093563                                               ; *eptr8093563 = %b2J$lx
  store i64 %cont8085993, i64* %eptr8093564                                          ; *eptr8093564 = %cont8085993
  store i64 %FIf$y, i64* %eptr8093565                                                ; *eptr8093565 = %FIf$y
  store i64 %fqW$_37_62, i64* %eptr8093566                                           ; *eptr8093566 = %fqW$_37_62
  store i64 %HcT$x, i64* %eptr8093567                                                ; *eptr8093567 = %HcT$x
  store i64 %wUF$ly, i64* %eptr8093568                                               ; *eptr8093568 = %wUF$ly
  store i64 %kdG$_37drop, i64* %eptr8093569                                          ; *eptr8093569 = %kdG$_37drop
  %eptr8093562 = getelementptr inbounds i64, i64* %cloptr8093561, i64 0              ; &cloptr8093561[0]
  %f8093570 = ptrtoint void(i64,i64)* @lam8092374 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093570, i64* %eptr8093562                                             ; store fptr
  %arg8086595 = ptrtoint i64* %cloptr8093561 to i64                                  ; closure cast; i64* -> i64
  %rva8089100 = add i64 0, 0                                                         ; quoted ()
  %rva8089099 = call i64 @prim_cons(i64 %arg8086595, i64 %rva8089100)                ; call prim_cons
  %cloptr8093571 = inttoptr i64 %arg8086596 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093572 = getelementptr inbounds i64, i64* %cloptr8093571, i64 0             ; &cloptr8093571[0]
  %f8093574 = load i64, i64* %i0ptr8093572, align 8                                  ; load; *i0ptr8093572
  %fptr8093573 = inttoptr i64 %f8093574 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093573(i64 %arg8086596, i64 %rva8089099)           ; tail call
  ret void
}


define void @lam8092378(i64 %env8092379, i64 %SNi$lst8086007) {
  %cont8086006 = call i64 @prim_car(i64 %SNi$lst8086007)                             ; call prim_car
  %SNi$lst = call i64 @prim_cdr(i64 %SNi$lst8086007)                                 ; call prim_cdr
  %arg8086600 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088984 = add i64 0, 0                                                         ; quoted ()
  %rva8088983 = call i64 @prim_cons(i64 %SNi$lst, i64 %rva8088984)                   ; call prim_cons
  %rva8088982 = call i64 @prim_cons(i64 %arg8086600, i64 %rva8088983)                ; call prim_cons
  %cloptr8093575 = inttoptr i64 %cont8086006 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093576 = getelementptr inbounds i64, i64* %cloptr8093575, i64 0             ; &cloptr8093575[0]
  %f8093578 = load i64, i64* %i0ptr8093576, align 8                                  ; load; *i0ptr8093576
  %fptr8093577 = inttoptr i64 %f8093578 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093577(i64 %cont8086006, i64 %rva8088982)          ; tail call
  ret void
}


define void @lam8092374(i64 %env8092375, i64 %rvp8089098) {
  %envptr8093579 = inttoptr i64 %env8092375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093580 = getelementptr inbounds i64, i64* %envptr8093579, i64 7            ; &envptr8093579[7]
  %kdG$_37drop = load i64, i64* %envptr8093580, align 8                              ; load; *envptr8093580
  %envptr8093581 = inttoptr i64 %env8092375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093582 = getelementptr inbounds i64, i64* %envptr8093581, i64 6            ; &envptr8093581[6]
  %wUF$ly = load i64, i64* %envptr8093582, align 8                                   ; load; *envptr8093582
  %envptr8093583 = inttoptr i64 %env8092375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093584 = getelementptr inbounds i64, i64* %envptr8093583, i64 5            ; &envptr8093583[5]
  %HcT$x = load i64, i64* %envptr8093584, align 8                                    ; load; *envptr8093584
  %envptr8093585 = inttoptr i64 %env8092375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093586 = getelementptr inbounds i64, i64* %envptr8093585, i64 4            ; &envptr8093585[4]
  %fqW$_37_62 = load i64, i64* %envptr8093586, align 8                               ; load; *envptr8093586
  %envptr8093587 = inttoptr i64 %env8092375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093588 = getelementptr inbounds i64, i64* %envptr8093587, i64 3            ; &envptr8093587[3]
  %FIf$y = load i64, i64* %envptr8093588, align 8                                    ; load; *envptr8093588
  %envptr8093589 = inttoptr i64 %env8092375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093590 = getelementptr inbounds i64, i64* %envptr8093589, i64 2            ; &envptr8093589[2]
  %cont8085993 = load i64, i64* %envptr8093590, align 8                              ; load; *envptr8093590
  %envptr8093591 = inttoptr i64 %env8092375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093592 = getelementptr inbounds i64, i64* %envptr8093591, i64 1            ; &envptr8093591[1]
  %b2J$lx = load i64, i64* %envptr8093592, align 8                                   ; load; *envptr8093592
  %_958086004 = call i64 @prim_car(i64 %rvp8089098)                                  ; call prim_car
  %rvp8089097 = call i64 @prim_cdr(i64 %rvp8089098)                                  ; call prim_cdr
  %a8085799 = call i64 @prim_car(i64 %rvp8089097)                                    ; call prim_car
  %na8088986 = call i64 @prim_cdr(i64 %rvp8089097)                                   ; call prim_cdr
  %arg8086603 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086005 = call i64 @prim_make_45vector(i64 %arg8086603, i64 %a8085799)     ; call prim_make_45vector
  %cloptr8093593 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8093595 = getelementptr inbounds i64, i64* %cloptr8093593, i64 1              ; &eptr8093595[1]
  %eptr8093596 = getelementptr inbounds i64, i64* %cloptr8093593, i64 2              ; &eptr8093596[2]
  %eptr8093597 = getelementptr inbounds i64, i64* %cloptr8093593, i64 3              ; &eptr8093597[3]
  %eptr8093598 = getelementptr inbounds i64, i64* %cloptr8093593, i64 4              ; &eptr8093598[4]
  %eptr8093599 = getelementptr inbounds i64, i64* %cloptr8093593, i64 5              ; &eptr8093599[5]
  %eptr8093600 = getelementptr inbounds i64, i64* %cloptr8093593, i64 6              ; &eptr8093600[6]
  %eptr8093601 = getelementptr inbounds i64, i64* %cloptr8093593, i64 7              ; &eptr8093601[7]
  store i64 %b2J$lx, i64* %eptr8093595                                               ; *eptr8093595 = %b2J$lx
  store i64 %cont8085993, i64* %eptr8093596                                          ; *eptr8093596 = %cont8085993
  store i64 %FIf$y, i64* %eptr8093597                                                ; *eptr8093597 = %FIf$y
  store i64 %fqW$_37_62, i64* %eptr8093598                                           ; *eptr8093598 = %fqW$_37_62
  store i64 %HcT$x, i64* %eptr8093599                                                ; *eptr8093599 = %HcT$x
  store i64 %wUF$ly, i64* %eptr8093600                                               ; *eptr8093600 = %wUF$ly
  store i64 %kdG$_37drop, i64* %eptr8093601                                          ; *eptr8093601 = %kdG$_37drop
  %eptr8093594 = getelementptr inbounds i64, i64* %cloptr8093593, i64 0              ; &cloptr8093593[0]
  %f8093602 = ptrtoint void(i64,i64)* @lam8092371 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093602, i64* %eptr8093594                                             ; store fptr
  %arg8086606 = ptrtoint i64* %cloptr8093593 to i64                                  ; closure cast; i64* -> i64
  %arg8086605 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089096 = add i64 0, 0                                                         ; quoted ()
  %rva8089095 = call i64 @prim_cons(i64 %retprim8086005, i64 %rva8089096)            ; call prim_cons
  %rva8089094 = call i64 @prim_cons(i64 %arg8086605, i64 %rva8089095)                ; call prim_cons
  %cloptr8093603 = inttoptr i64 %arg8086606 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093604 = getelementptr inbounds i64, i64* %cloptr8093603, i64 0             ; &cloptr8093603[0]
  %f8093606 = load i64, i64* %i0ptr8093604, align 8                                  ; load; *i0ptr8093604
  %fptr8093605 = inttoptr i64 %f8093606 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093605(i64 %arg8086606, i64 %rva8089094)           ; tail call
  ret void
}


define void @lam8092371(i64 %env8092372, i64 %rvp8089093) {
  %envptr8093607 = inttoptr i64 %env8092372 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093608 = getelementptr inbounds i64, i64* %envptr8093607, i64 7            ; &envptr8093607[7]
  %kdG$_37drop = load i64, i64* %envptr8093608, align 8                              ; load; *envptr8093608
  %envptr8093609 = inttoptr i64 %env8092372 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093610 = getelementptr inbounds i64, i64* %envptr8093609, i64 6            ; &envptr8093609[6]
  %wUF$ly = load i64, i64* %envptr8093610, align 8                                   ; load; *envptr8093610
  %envptr8093611 = inttoptr i64 %env8092372 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093612 = getelementptr inbounds i64, i64* %envptr8093611, i64 5            ; &envptr8093611[5]
  %HcT$x = load i64, i64* %envptr8093612, align 8                                    ; load; *envptr8093612
  %envptr8093613 = inttoptr i64 %env8092372 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093614 = getelementptr inbounds i64, i64* %envptr8093613, i64 4            ; &envptr8093613[4]
  %fqW$_37_62 = load i64, i64* %envptr8093614, align 8                               ; load; *envptr8093614
  %envptr8093615 = inttoptr i64 %env8092372 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093616 = getelementptr inbounds i64, i64* %envptr8093615, i64 3            ; &envptr8093615[3]
  %FIf$y = load i64, i64* %envptr8093616, align 8                                    ; load; *envptr8093616
  %envptr8093617 = inttoptr i64 %env8092372 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093618 = getelementptr inbounds i64, i64* %envptr8093617, i64 2            ; &envptr8093617[2]
  %cont8085993 = load i64, i64* %envptr8093618, align 8                              ; load; *envptr8093618
  %envptr8093619 = inttoptr i64 %env8092372 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093620 = getelementptr inbounds i64, i64* %envptr8093619, i64 1            ; &envptr8093619[1]
  %b2J$lx = load i64, i64* %envptr8093620, align 8                                   ; load; *envptr8093620
  %_958085996 = call i64 @prim_car(i64 %rvp8089093)                                  ; call prim_car
  %rvp8089092 = call i64 @prim_cdr(i64 %rvp8089093)                                  ; call prim_cdr
  %OLu$loop = call i64 @prim_car(i64 %rvp8089092)                                    ; call prim_car
  %na8088988 = call i64 @prim_cdr(i64 %rvp8089092)                                   ; call prim_cdr
  %cloptr8093621 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8093623 = getelementptr inbounds i64, i64* %cloptr8093621, i64 1              ; &eptr8093623[1]
  store i64 %OLu$loop, i64* %eptr8093623                                             ; *eptr8093623 = %OLu$loop
  %eptr8093622 = getelementptr inbounds i64, i64* %cloptr8093621, i64 0              ; &cloptr8093621[0]
  %f8093624 = ptrtoint void(i64,i64)* @lam8092369 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093624, i64* %eptr8093622                                             ; store fptr
  %dlD$loop8085706 = ptrtoint i64* %cloptr8093621 to i64                             ; closure cast; i64* -> i64
  %arg8086628 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %Q3l$_95t = call i64 @prim_vector_45set_33(i64 %OLu$loop, i64 %arg8086628, i64 %dlD$loop8085706); call prim_vector_45set_33
  %arg8086630 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085806 = call i64 @prim_vector_45ref(i64 %OLu$loop, i64 %arg8086630)            ; call prim_vector_45ref
  %a8085807 = call i64 @prim_procedure_63(i64 %a8085806)                             ; call prim_procedure_63
  %cmp8093625 = icmp eq i64 %a8085807, 15                                            ; false?
  br i1 %cmp8093625, label %else8093627, label %then8093626                          ; if

then8093626:
  %arg8086633 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085808 = call i64 @prim_vector_45ref(i64 %OLu$loop, i64 %arg8086633)            ; call prim_vector_45ref
  %cloptr8093628 = call i64* @alloc(i64 72)                                          ; malloc
  %eptr8093630 = getelementptr inbounds i64, i64* %cloptr8093628, i64 1              ; &eptr8093630[1]
  %eptr8093631 = getelementptr inbounds i64, i64* %cloptr8093628, i64 2              ; &eptr8093631[2]
  %eptr8093632 = getelementptr inbounds i64, i64* %cloptr8093628, i64 3              ; &eptr8093632[3]
  %eptr8093633 = getelementptr inbounds i64, i64* %cloptr8093628, i64 4              ; &eptr8093633[4]
  %eptr8093634 = getelementptr inbounds i64, i64* %cloptr8093628, i64 5              ; &eptr8093634[5]
  %eptr8093635 = getelementptr inbounds i64, i64* %cloptr8093628, i64 6              ; &eptr8093635[6]
  %eptr8093636 = getelementptr inbounds i64, i64* %cloptr8093628, i64 7              ; &eptr8093636[7]
  %eptr8093637 = getelementptr inbounds i64, i64* %cloptr8093628, i64 8              ; &eptr8093637[8]
  store i64 %b2J$lx, i64* %eptr8093630                                               ; *eptr8093630 = %b2J$lx
  store i64 %cont8085993, i64* %eptr8093631                                          ; *eptr8093631 = %cont8085993
  store i64 %a8085808, i64* %eptr8093632                                             ; *eptr8093632 = %a8085808
  store i64 %FIf$y, i64* %eptr8093633                                                ; *eptr8093633 = %FIf$y
  store i64 %fqW$_37_62, i64* %eptr8093634                                           ; *eptr8093634 = %fqW$_37_62
  store i64 %HcT$x, i64* %eptr8093635                                                ; *eptr8093635 = %HcT$x
  store i64 %wUF$ly, i64* %eptr8093636                                               ; *eptr8093636 = %wUF$ly
  store i64 %kdG$_37drop, i64* %eptr8093637                                          ; *eptr8093637 = %kdG$_37drop
  %eptr8093629 = getelementptr inbounds i64, i64* %cloptr8093628, i64 0              ; &cloptr8093628[0]
  %f8093638 = ptrtoint void(i64,i64)* @lam8092353 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093638, i64* %eptr8093629                                             ; store fptr
  %arg8086637 = ptrtoint i64* %cloptr8093628 to i64                                  ; closure cast; i64* -> i64
  %rva8089088 = add i64 0, 0                                                         ; quoted ()
  %rva8089087 = call i64 @prim_cons(i64 %wUF$ly, i64 %rva8089088)                    ; call prim_cons
  %rva8089086 = call i64 @prim_cons(i64 %b2J$lx, i64 %rva8089087)                    ; call prim_cons
  %rva8089085 = call i64 @prim_cons(i64 %arg8086637, i64 %rva8089086)                ; call prim_cons
  %cloptr8093639 = inttoptr i64 %fqW$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093640 = getelementptr inbounds i64, i64* %cloptr8093639, i64 0             ; &cloptr8093639[0]
  %f8093642 = load i64, i64* %i0ptr8093640, align 8                                  ; load; *i0ptr8093640
  %fptr8093641 = inttoptr i64 %f8093642 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093641(i64 %fqW$_37_62, i64 %rva8089085)           ; tail call
  ret void

else8093627:
  %arg8086690 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8093643, i32 0, i32 0)); quoted string
  %retprim8086003 = call i64 @prim_halt(i64 %arg8086690)                             ; call prim_halt
  %arg8086692 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089091 = add i64 0, 0                                                         ; quoted ()
  %rva8089090 = call i64 @prim_cons(i64 %retprim8086003, i64 %rva8089091)            ; call prim_cons
  %rva8089089 = call i64 @prim_cons(i64 %arg8086692, i64 %rva8089090)                ; call prim_cons
  %cloptr8093644 = inttoptr i64 %cont8085993 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093645 = getelementptr inbounds i64, i64* %cloptr8093644, i64 0             ; &cloptr8093644[0]
  %f8093647 = load i64, i64* %i0ptr8093645, align 8                                  ; load; *i0ptr8093645
  %fptr8093646 = inttoptr i64 %f8093647 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093646(i64 %cont8085993, i64 %rva8089089)          ; tail call
  ret void
}


define void @lam8092369(i64 %env8092370, i64 %rvp8089003) {
  %envptr8093648 = inttoptr i64 %env8092370 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093649 = getelementptr inbounds i64, i64* %envptr8093648, i64 1            ; &envptr8093648[1]
  %OLu$loop = load i64, i64* %envptr8093649, align 8                                 ; load; *envptr8093649
  %cont8085997 = call i64 @prim_car(i64 %rvp8089003)                                 ; call prim_car
  %rvp8089002 = call i64 @prim_cdr(i64 %rvp8089003)                                  ; call prim_cdr
  %diD$x = call i64 @prim_car(i64 %rvp8089002)                                       ; call prim_car
  %rvp8089001 = call i64 @prim_cdr(i64 %rvp8089002)                                  ; call prim_cdr
  %XI3$y = call i64 @prim_car(i64 %rvp8089001)                                       ; call prim_car
  %na8088990 = call i64 @prim_cdr(i64 %rvp8089001)                                   ; call prim_cdr
  %a8085800 = call i64 @prim_eq_63(i64 %diD$x, i64 %XI3$y)                           ; call prim_eq_63
  %cmp8093650 = icmp eq i64 %a8085800, 15                                            ; false?
  br i1 %cmp8093650, label %else8093652, label %then8093651                          ; if

then8093651:
  %arg8086610 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8088993 = add i64 0, 0                                                         ; quoted ()
  %rva8088992 = call i64 @prim_cons(i64 %diD$x, i64 %rva8088993)                     ; call prim_cons
  %rva8088991 = call i64 @prim_cons(i64 %arg8086610, i64 %rva8088992)                ; call prim_cons
  %cloptr8093653 = inttoptr i64 %cont8085997 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093654 = getelementptr inbounds i64, i64* %cloptr8093653, i64 0             ; &cloptr8093653[0]
  %f8093656 = load i64, i64* %i0ptr8093654, align 8                                  ; load; *i0ptr8093654
  %fptr8093655 = inttoptr i64 %f8093656 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093655(i64 %cont8085997, i64 %rva8088991)          ; tail call
  ret void

else8093652:
  %arg8086612 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085801 = call i64 @prim_vector_45ref(i64 %OLu$loop, i64 %arg8086612)            ; call prim_vector_45ref
  %a8085802 = call i64 @prim_procedure_63(i64 %a8085801)                             ; call prim_procedure_63
  %cmp8093657 = icmp eq i64 %a8085802, 15                                            ; false?
  br i1 %cmp8093657, label %else8093659, label %then8093658                          ; if

then8093658:
  %arg8086615 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085803 = call i64 @prim_vector_45ref(i64 %OLu$loop, i64 %arg8086615)            ; call prim_vector_45ref
  %a8085804 = call i64 @prim_cdr(i64 %diD$x)                                         ; call prim_cdr
  %a8085805 = call i64 @prim_cdr(i64 %XI3$y)                                         ; call prim_cdr
  %rva8088997 = add i64 0, 0                                                         ; quoted ()
  %rva8088996 = call i64 @prim_cons(i64 %a8085805, i64 %rva8088997)                  ; call prim_cons
  %rva8088995 = call i64 @prim_cons(i64 %a8085804, i64 %rva8088996)                  ; call prim_cons
  %rva8088994 = call i64 @prim_cons(i64 %cont8085997, i64 %rva8088995)               ; call prim_cons
  %cloptr8093660 = inttoptr i64 %a8085803 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8093661 = getelementptr inbounds i64, i64* %cloptr8093660, i64 0             ; &cloptr8093660[0]
  %f8093663 = load i64, i64* %i0ptr8093661, align 8                                  ; load; *i0ptr8093661
  %fptr8093662 = inttoptr i64 %f8093663 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093662(i64 %a8085803, i64 %rva8088994)             ; tail call
  ret void

else8093659:
  %arg8086623 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8093664, i32 0, i32 0)); quoted string
  %retprim8085998 = call i64 @prim_halt(i64 %arg8086623)                             ; call prim_halt
  %arg8086625 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089000 = add i64 0, 0                                                         ; quoted ()
  %rva8088999 = call i64 @prim_cons(i64 %retprim8085998, i64 %rva8089000)            ; call prim_cons
  %rva8088998 = call i64 @prim_cons(i64 %arg8086625, i64 %rva8088999)                ; call prim_cons
  %cloptr8093665 = inttoptr i64 %cont8085997 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093666 = getelementptr inbounds i64, i64* %cloptr8093665, i64 0             ; &cloptr8093665[0]
  %f8093668 = load i64, i64* %i0ptr8093666, align 8                                  ; load; *i0ptr8093666
  %fptr8093667 = inttoptr i64 %f8093668 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093667(i64 %cont8085997, i64 %rva8088998)          ; tail call
  ret void
}


define void @lam8092353(i64 %env8092354, i64 %rvp8089084) {
  %envptr8093669 = inttoptr i64 %env8092354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093670 = getelementptr inbounds i64, i64* %envptr8093669, i64 8            ; &envptr8093669[8]
  %kdG$_37drop = load i64, i64* %envptr8093670, align 8                              ; load; *envptr8093670
  %envptr8093671 = inttoptr i64 %env8092354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093672 = getelementptr inbounds i64, i64* %envptr8093671, i64 7            ; &envptr8093671[7]
  %wUF$ly = load i64, i64* %envptr8093672, align 8                                   ; load; *envptr8093672
  %envptr8093673 = inttoptr i64 %env8092354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093674 = getelementptr inbounds i64, i64* %envptr8093673, i64 6            ; &envptr8093673[6]
  %HcT$x = load i64, i64* %envptr8093674, align 8                                    ; load; *envptr8093674
  %envptr8093675 = inttoptr i64 %env8092354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093676 = getelementptr inbounds i64, i64* %envptr8093675, i64 5            ; &envptr8093675[5]
  %fqW$_37_62 = load i64, i64* %envptr8093676, align 8                               ; load; *envptr8093676
  %envptr8093677 = inttoptr i64 %env8092354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093678 = getelementptr inbounds i64, i64* %envptr8093677, i64 4            ; &envptr8093677[4]
  %FIf$y = load i64, i64* %envptr8093678, align 8                                    ; load; *envptr8093678
  %envptr8093679 = inttoptr i64 %env8092354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093680 = getelementptr inbounds i64, i64* %envptr8093679, i64 3            ; &envptr8093679[3]
  %a8085808 = load i64, i64* %envptr8093680, align 8                                 ; load; *envptr8093680
  %envptr8093681 = inttoptr i64 %env8092354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093682 = getelementptr inbounds i64, i64* %envptr8093681, i64 2            ; &envptr8093681[2]
  %cont8085993 = load i64, i64* %envptr8093682, align 8                              ; load; *envptr8093682
  %envptr8093683 = inttoptr i64 %env8092354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093684 = getelementptr inbounds i64, i64* %envptr8093683, i64 1            ; &envptr8093683[1]
  %b2J$lx = load i64, i64* %envptr8093684, align 8                                   ; load; *envptr8093684
  %_958085999 = call i64 @prim_car(i64 %rvp8089084)                                  ; call prim_car
  %rvp8089083 = call i64 @prim_cdr(i64 %rvp8089084)                                  ; call prim_cdr
  %a8085809 = call i64 @prim_car(i64 %rvp8089083)                                    ; call prim_car
  %na8089005 = call i64 @prim_cdr(i64 %rvp8089083)                                   ; call prim_cdr
  %cmp8093685 = icmp eq i64 %a8085809, 15                                            ; false?
  br i1 %cmp8093685, label %else8093687, label %then8093686                          ; if

then8093686:
  %a8085810 = call i64 @prim__45(i64 %b2J$lx, i64 %wUF$ly)                           ; call prim__45
  %cloptr8093688 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8093690 = getelementptr inbounds i64, i64* %cloptr8093688, i64 1              ; &eptr8093690[1]
  %eptr8093691 = getelementptr inbounds i64, i64* %cloptr8093688, i64 2              ; &eptr8093691[2]
  %eptr8093692 = getelementptr inbounds i64, i64* %cloptr8093688, i64 3              ; &eptr8093692[3]
  %eptr8093693 = getelementptr inbounds i64, i64* %cloptr8093688, i64 4              ; &eptr8093693[4]
  %eptr8093694 = getelementptr inbounds i64, i64* %cloptr8093688, i64 5              ; &eptr8093694[5]
  %eptr8093695 = getelementptr inbounds i64, i64* %cloptr8093688, i64 6              ; &eptr8093695[6]
  %eptr8093696 = getelementptr inbounds i64, i64* %cloptr8093688, i64 7              ; &eptr8093696[7]
  store i64 %b2J$lx, i64* %eptr8093690                                               ; *eptr8093690 = %b2J$lx
  store i64 %cont8085993, i64* %eptr8093691                                          ; *eptr8093691 = %cont8085993
  store i64 %a8085808, i64* %eptr8093692                                             ; *eptr8093692 = %a8085808
  store i64 %FIf$y, i64* %eptr8093693                                                ; *eptr8093693 = %FIf$y
  store i64 %fqW$_37_62, i64* %eptr8093694                                           ; *eptr8093694 = %fqW$_37_62
  store i64 %wUF$ly, i64* %eptr8093695                                               ; *eptr8093695 = %wUF$ly
  store i64 %kdG$_37drop, i64* %eptr8093696                                          ; *eptr8093696 = %kdG$_37drop
  %eptr8093689 = getelementptr inbounds i64, i64* %cloptr8093688, i64 0              ; &cloptr8093688[0]
  %f8093697 = ptrtoint void(i64,i64)* @lam8092335 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093697, i64* %eptr8093689                                             ; store fptr
  %arg8086643 = ptrtoint i64* %cloptr8093688 to i64                                  ; closure cast; i64* -> i64
  %rva8089044 = add i64 0, 0                                                         ; quoted ()
  %rva8089043 = call i64 @prim_cons(i64 %a8085810, i64 %rva8089044)                  ; call prim_cons
  %rva8089042 = call i64 @prim_cons(i64 %HcT$x, i64 %rva8089043)                     ; call prim_cons
  %rva8089041 = call i64 @prim_cons(i64 %arg8086643, i64 %rva8089042)                ; call prim_cons
  %cloptr8093698 = inttoptr i64 %kdG$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093699 = getelementptr inbounds i64, i64* %cloptr8093698, i64 0             ; &cloptr8093698[0]
  %f8093701 = load i64, i64* %i0ptr8093699, align 8                                  ; load; *i0ptr8093699
  %fptr8093700 = inttoptr i64 %f8093701 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093700(i64 %kdG$_37drop, i64 %rva8089041)          ; tail call
  ret void

else8093687:
  %cloptr8093702 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8093704 = getelementptr inbounds i64, i64* %cloptr8093702, i64 1              ; &eptr8093704[1]
  %eptr8093705 = getelementptr inbounds i64, i64* %cloptr8093702, i64 2              ; &eptr8093705[2]
  %eptr8093706 = getelementptr inbounds i64, i64* %cloptr8093702, i64 3              ; &eptr8093706[3]
  %eptr8093707 = getelementptr inbounds i64, i64* %cloptr8093702, i64 4              ; &eptr8093707[4]
  %eptr8093708 = getelementptr inbounds i64, i64* %cloptr8093702, i64 5              ; &eptr8093708[5]
  %eptr8093709 = getelementptr inbounds i64, i64* %cloptr8093702, i64 6              ; &eptr8093709[6]
  %eptr8093710 = getelementptr inbounds i64, i64* %cloptr8093702, i64 7              ; &eptr8093710[7]
  store i64 %b2J$lx, i64* %eptr8093704                                               ; *eptr8093704 = %b2J$lx
  store i64 %cont8085993, i64* %eptr8093705                                          ; *eptr8093705 = %cont8085993
  store i64 %a8085808, i64* %eptr8093706                                             ; *eptr8093706 = %a8085808
  store i64 %FIf$y, i64* %eptr8093707                                                ; *eptr8093707 = %FIf$y
  store i64 %fqW$_37_62, i64* %eptr8093708                                           ; *eptr8093708 = %fqW$_37_62
  store i64 %wUF$ly, i64* %eptr8093709                                               ; *eptr8093709 = %wUF$ly
  store i64 %kdG$_37drop, i64* %eptr8093710                                          ; *eptr8093710 = %kdG$_37drop
  %eptr8093703 = getelementptr inbounds i64, i64* %cloptr8093702, i64 0              ; &cloptr8093702[0]
  %f8093711 = ptrtoint void(i64,i64)* @lam8092351 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093711, i64* %eptr8093703                                             ; store fptr
  %arg8086668 = ptrtoint i64* %cloptr8093702 to i64                                  ; closure cast; i64* -> i64
  %arg8086667 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089082 = add i64 0, 0                                                         ; quoted ()
  %rva8089081 = call i64 @prim_cons(i64 %HcT$x, i64 %rva8089082)                     ; call prim_cons
  %rva8089080 = call i64 @prim_cons(i64 %arg8086667, i64 %rva8089081)                ; call prim_cons
  %cloptr8093712 = inttoptr i64 %arg8086668 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093713 = getelementptr inbounds i64, i64* %cloptr8093712, i64 0             ; &cloptr8093712[0]
  %f8093715 = load i64, i64* %i0ptr8093713, align 8                                  ; load; *i0ptr8093713
  %fptr8093714 = inttoptr i64 %f8093715 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093714(i64 %arg8086668, i64 %rva8089080)           ; tail call
  ret void
}


define void @lam8092351(i64 %env8092352, i64 %rvp8089079) {
  %envptr8093716 = inttoptr i64 %env8092352 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093717 = getelementptr inbounds i64, i64* %envptr8093716, i64 7            ; &envptr8093716[7]
  %kdG$_37drop = load i64, i64* %envptr8093717, align 8                              ; load; *envptr8093717
  %envptr8093718 = inttoptr i64 %env8092352 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093719 = getelementptr inbounds i64, i64* %envptr8093718, i64 6            ; &envptr8093718[6]
  %wUF$ly = load i64, i64* %envptr8093719, align 8                                   ; load; *envptr8093719
  %envptr8093720 = inttoptr i64 %env8092352 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093721 = getelementptr inbounds i64, i64* %envptr8093720, i64 5            ; &envptr8093720[5]
  %fqW$_37_62 = load i64, i64* %envptr8093721, align 8                               ; load; *envptr8093721
  %envptr8093722 = inttoptr i64 %env8092352 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093723 = getelementptr inbounds i64, i64* %envptr8093722, i64 4            ; &envptr8093722[4]
  %FIf$y = load i64, i64* %envptr8093723, align 8                                    ; load; *envptr8093723
  %envptr8093724 = inttoptr i64 %env8092352 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093725 = getelementptr inbounds i64, i64* %envptr8093724, i64 3            ; &envptr8093724[3]
  %a8085808 = load i64, i64* %envptr8093725, align 8                                 ; load; *envptr8093725
  %envptr8093726 = inttoptr i64 %env8092352 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093727 = getelementptr inbounds i64, i64* %envptr8093726, i64 2            ; &envptr8093726[2]
  %cont8085993 = load i64, i64* %envptr8093727, align 8                              ; load; *envptr8093727
  %envptr8093728 = inttoptr i64 %env8092352 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093729 = getelementptr inbounds i64, i64* %envptr8093728, i64 1            ; &envptr8093728[1]
  %b2J$lx = load i64, i64* %envptr8093729, align 8                                   ; load; *envptr8093729
  %_958086000 = call i64 @prim_car(i64 %rvp8089079)                                  ; call prim_car
  %rvp8089078 = call i64 @prim_cdr(i64 %rvp8089079)                                  ; call prim_cdr
  %a8085811 = call i64 @prim_car(i64 %rvp8089078)                                    ; call prim_car
  %na8089046 = call i64 @prim_cdr(i64 %rvp8089078)                                   ; call prim_cdr
  %cloptr8093730 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8093732 = getelementptr inbounds i64, i64* %cloptr8093730, i64 1              ; &eptr8093732[1]
  %eptr8093733 = getelementptr inbounds i64, i64* %cloptr8093730, i64 2              ; &eptr8093733[2]
  %eptr8093734 = getelementptr inbounds i64, i64* %cloptr8093730, i64 3              ; &eptr8093734[3]
  %eptr8093735 = getelementptr inbounds i64, i64* %cloptr8093730, i64 4              ; &eptr8093735[4]
  %eptr8093736 = getelementptr inbounds i64, i64* %cloptr8093730, i64 5              ; &eptr8093736[5]
  %eptr8093737 = getelementptr inbounds i64, i64* %cloptr8093730, i64 6              ; &eptr8093737[6]
  %eptr8093738 = getelementptr inbounds i64, i64* %cloptr8093730, i64 7              ; &eptr8093738[7]
  store i64 %b2J$lx, i64* %eptr8093732                                               ; *eptr8093732 = %b2J$lx
  store i64 %cont8085993, i64* %eptr8093733                                          ; *eptr8093733 = %cont8085993
  store i64 %a8085808, i64* %eptr8093734                                             ; *eptr8093734 = %a8085808
  store i64 %FIf$y, i64* %eptr8093735                                                ; *eptr8093735 = %FIf$y
  store i64 %a8085811, i64* %eptr8093736                                             ; *eptr8093736 = %a8085811
  store i64 %wUF$ly, i64* %eptr8093737                                               ; *eptr8093737 = %wUF$ly
  store i64 %kdG$_37drop, i64* %eptr8093738                                          ; *eptr8093738 = %kdG$_37drop
  %eptr8093731 = getelementptr inbounds i64, i64* %cloptr8093730, i64 0              ; &cloptr8093730[0]
  %f8093739 = ptrtoint void(i64,i64)* @lam8092349 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093739, i64* %eptr8093731                                             ; store fptr
  %arg8086671 = ptrtoint i64* %cloptr8093730 to i64                                  ; closure cast; i64* -> i64
  %rva8089077 = add i64 0, 0                                                         ; quoted ()
  %rva8089076 = call i64 @prim_cons(i64 %b2J$lx, i64 %rva8089077)                    ; call prim_cons
  %rva8089075 = call i64 @prim_cons(i64 %wUF$ly, i64 %rva8089076)                    ; call prim_cons
  %rva8089074 = call i64 @prim_cons(i64 %arg8086671, i64 %rva8089075)                ; call prim_cons
  %cloptr8093740 = inttoptr i64 %fqW$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093741 = getelementptr inbounds i64, i64* %cloptr8093740, i64 0             ; &cloptr8093740[0]
  %f8093743 = load i64, i64* %i0ptr8093741, align 8                                  ; load; *i0ptr8093741
  %fptr8093742 = inttoptr i64 %f8093743 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093742(i64 %fqW$_37_62, i64 %rva8089074)           ; tail call
  ret void
}


define void @lam8092349(i64 %env8092350, i64 %rvp8089073) {
  %envptr8093744 = inttoptr i64 %env8092350 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093745 = getelementptr inbounds i64, i64* %envptr8093744, i64 7            ; &envptr8093744[7]
  %kdG$_37drop = load i64, i64* %envptr8093745, align 8                              ; load; *envptr8093745
  %envptr8093746 = inttoptr i64 %env8092350 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093747 = getelementptr inbounds i64, i64* %envptr8093746, i64 6            ; &envptr8093746[6]
  %wUF$ly = load i64, i64* %envptr8093747, align 8                                   ; load; *envptr8093747
  %envptr8093748 = inttoptr i64 %env8092350 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093749 = getelementptr inbounds i64, i64* %envptr8093748, i64 5            ; &envptr8093748[5]
  %a8085811 = load i64, i64* %envptr8093749, align 8                                 ; load; *envptr8093749
  %envptr8093750 = inttoptr i64 %env8092350 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093751 = getelementptr inbounds i64, i64* %envptr8093750, i64 4            ; &envptr8093750[4]
  %FIf$y = load i64, i64* %envptr8093751, align 8                                    ; load; *envptr8093751
  %envptr8093752 = inttoptr i64 %env8092350 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093753 = getelementptr inbounds i64, i64* %envptr8093752, i64 3            ; &envptr8093752[3]
  %a8085808 = load i64, i64* %envptr8093753, align 8                                 ; load; *envptr8093753
  %envptr8093754 = inttoptr i64 %env8092350 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093755 = getelementptr inbounds i64, i64* %envptr8093754, i64 2            ; &envptr8093754[2]
  %cont8085993 = load i64, i64* %envptr8093755, align 8                              ; load; *envptr8093755
  %envptr8093756 = inttoptr i64 %env8092350 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093757 = getelementptr inbounds i64, i64* %envptr8093756, i64 1            ; &envptr8093756[1]
  %b2J$lx = load i64, i64* %envptr8093757, align 8                                   ; load; *envptr8093757
  %_958086001 = call i64 @prim_car(i64 %rvp8089073)                                  ; call prim_car
  %rvp8089072 = call i64 @prim_cdr(i64 %rvp8089073)                                  ; call prim_cdr
  %a8085812 = call i64 @prim_car(i64 %rvp8089072)                                    ; call prim_car
  %na8089048 = call i64 @prim_cdr(i64 %rvp8089072)                                   ; call prim_cdr
  %cmp8093758 = icmp eq i64 %a8085812, 15                                            ; false?
  br i1 %cmp8093758, label %else8093760, label %then8093759                          ; if

then8093759:
  %a8085813 = call i64 @prim__45(i64 %wUF$ly, i64 %b2J$lx)                           ; call prim__45
  %cloptr8093761 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093763 = getelementptr inbounds i64, i64* %cloptr8093761, i64 1              ; &eptr8093763[1]
  %eptr8093764 = getelementptr inbounds i64, i64* %cloptr8093761, i64 2              ; &eptr8093764[2]
  %eptr8093765 = getelementptr inbounds i64, i64* %cloptr8093761, i64 3              ; &eptr8093765[3]
  store i64 %cont8085993, i64* %eptr8093763                                          ; *eptr8093763 = %cont8085993
  store i64 %a8085808, i64* %eptr8093764                                             ; *eptr8093764 = %a8085808
  store i64 %a8085811, i64* %eptr8093765                                             ; *eptr8093765 = %a8085811
  %eptr8093762 = getelementptr inbounds i64, i64* %cloptr8093761, i64 0              ; &cloptr8093761[0]
  %f8093766 = ptrtoint void(i64,i64)* @lam8092342 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093766, i64* %eptr8093762                                             ; store fptr
  %arg8086677 = ptrtoint i64* %cloptr8093761 to i64                                  ; closure cast; i64* -> i64
  %rva8089060 = add i64 0, 0                                                         ; quoted ()
  %rva8089059 = call i64 @prim_cons(i64 %a8085813, i64 %rva8089060)                  ; call prim_cons
  %rva8089058 = call i64 @prim_cons(i64 %FIf$y, i64 %rva8089059)                     ; call prim_cons
  %rva8089057 = call i64 @prim_cons(i64 %arg8086677, i64 %rva8089058)                ; call prim_cons
  %cloptr8093767 = inttoptr i64 %kdG$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093768 = getelementptr inbounds i64, i64* %cloptr8093767, i64 0             ; &cloptr8093767[0]
  %f8093770 = load i64, i64* %i0ptr8093768, align 8                                  ; load; *i0ptr8093768
  %fptr8093769 = inttoptr i64 %f8093770 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093769(i64 %kdG$_37drop, i64 %rva8089057)          ; tail call
  ret void

else8093760:
  %cloptr8093771 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093773 = getelementptr inbounds i64, i64* %cloptr8093771, i64 1              ; &eptr8093773[1]
  %eptr8093774 = getelementptr inbounds i64, i64* %cloptr8093771, i64 2              ; &eptr8093774[2]
  %eptr8093775 = getelementptr inbounds i64, i64* %cloptr8093771, i64 3              ; &eptr8093775[3]
  store i64 %cont8085993, i64* %eptr8093773                                          ; *eptr8093773 = %cont8085993
  store i64 %a8085808, i64* %eptr8093774                                             ; *eptr8093774 = %a8085808
  store i64 %a8085811, i64* %eptr8093775                                             ; *eptr8093775 = %a8085811
  %eptr8093772 = getelementptr inbounds i64, i64* %cloptr8093771, i64 0              ; &cloptr8093771[0]
  %f8093776 = ptrtoint void(i64,i64)* @lam8092347 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093776, i64* %eptr8093772                                             ; store fptr
  %arg8086685 = ptrtoint i64* %cloptr8093771 to i64                                  ; closure cast; i64* -> i64
  %arg8086684 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089071 = add i64 0, 0                                                         ; quoted ()
  %rva8089070 = call i64 @prim_cons(i64 %FIf$y, i64 %rva8089071)                     ; call prim_cons
  %rva8089069 = call i64 @prim_cons(i64 %arg8086684, i64 %rva8089070)                ; call prim_cons
  %cloptr8093777 = inttoptr i64 %arg8086685 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093778 = getelementptr inbounds i64, i64* %cloptr8093777, i64 0             ; &cloptr8093777[0]
  %f8093780 = load i64, i64* %i0ptr8093778, align 8                                  ; load; *i0ptr8093778
  %fptr8093779 = inttoptr i64 %f8093780 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093779(i64 %arg8086685, i64 %rva8089069)           ; tail call
  ret void
}


define void @lam8092347(i64 %env8092348, i64 %rvp8089068) {
  %envptr8093781 = inttoptr i64 %env8092348 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093782 = getelementptr inbounds i64, i64* %envptr8093781, i64 3            ; &envptr8093781[3]
  %a8085811 = load i64, i64* %envptr8093782, align 8                                 ; load; *envptr8093782
  %envptr8093783 = inttoptr i64 %env8092348 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093784 = getelementptr inbounds i64, i64* %envptr8093783, i64 2            ; &envptr8093783[2]
  %a8085808 = load i64, i64* %envptr8093784, align 8                                 ; load; *envptr8093784
  %envptr8093785 = inttoptr i64 %env8092348 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093786 = getelementptr inbounds i64, i64* %envptr8093785, i64 1            ; &envptr8093785[1]
  %cont8085993 = load i64, i64* %envptr8093786, align 8                              ; load; *envptr8093786
  %_958086002 = call i64 @prim_car(i64 %rvp8089068)                                  ; call prim_car
  %rvp8089067 = call i64 @prim_cdr(i64 %rvp8089068)                                  ; call prim_cdr
  %a8085814 = call i64 @prim_car(i64 %rvp8089067)                                    ; call prim_car
  %na8089062 = call i64 @prim_cdr(i64 %rvp8089067)                                   ; call prim_cdr
  %rva8089066 = add i64 0, 0                                                         ; quoted ()
  %rva8089065 = call i64 @prim_cons(i64 %a8085814, i64 %rva8089066)                  ; call prim_cons
  %rva8089064 = call i64 @prim_cons(i64 %a8085811, i64 %rva8089065)                  ; call prim_cons
  %rva8089063 = call i64 @prim_cons(i64 %cont8085993, i64 %rva8089064)               ; call prim_cons
  %cloptr8093787 = inttoptr i64 %a8085808 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8093788 = getelementptr inbounds i64, i64* %cloptr8093787, i64 0             ; &cloptr8093787[0]
  %f8093790 = load i64, i64* %i0ptr8093788, align 8                                  ; load; *i0ptr8093788
  %fptr8093789 = inttoptr i64 %f8093790 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093789(i64 %a8085808, i64 %rva8089063)             ; tail call
  ret void
}


define void @lam8092342(i64 %env8092343, i64 %rvp8089056) {
  %envptr8093791 = inttoptr i64 %env8092343 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093792 = getelementptr inbounds i64, i64* %envptr8093791, i64 3            ; &envptr8093791[3]
  %a8085811 = load i64, i64* %envptr8093792, align 8                                 ; load; *envptr8093792
  %envptr8093793 = inttoptr i64 %env8092343 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093794 = getelementptr inbounds i64, i64* %envptr8093793, i64 2            ; &envptr8093793[2]
  %a8085808 = load i64, i64* %envptr8093794, align 8                                 ; load; *envptr8093794
  %envptr8093795 = inttoptr i64 %env8092343 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093796 = getelementptr inbounds i64, i64* %envptr8093795, i64 1            ; &envptr8093795[1]
  %cont8085993 = load i64, i64* %envptr8093796, align 8                              ; load; *envptr8093796
  %_958086002 = call i64 @prim_car(i64 %rvp8089056)                                  ; call prim_car
  %rvp8089055 = call i64 @prim_cdr(i64 %rvp8089056)                                  ; call prim_cdr
  %a8085814 = call i64 @prim_car(i64 %rvp8089055)                                    ; call prim_car
  %na8089050 = call i64 @prim_cdr(i64 %rvp8089055)                                   ; call prim_cdr
  %rva8089054 = add i64 0, 0                                                         ; quoted ()
  %rva8089053 = call i64 @prim_cons(i64 %a8085814, i64 %rva8089054)                  ; call prim_cons
  %rva8089052 = call i64 @prim_cons(i64 %a8085811, i64 %rva8089053)                  ; call prim_cons
  %rva8089051 = call i64 @prim_cons(i64 %cont8085993, i64 %rva8089052)               ; call prim_cons
  %cloptr8093797 = inttoptr i64 %a8085808 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8093798 = getelementptr inbounds i64, i64* %cloptr8093797, i64 0             ; &cloptr8093797[0]
  %f8093800 = load i64, i64* %i0ptr8093798, align 8                                  ; load; *i0ptr8093798
  %fptr8093799 = inttoptr i64 %f8093800 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093799(i64 %a8085808, i64 %rva8089051)             ; tail call
  ret void
}


define void @lam8092335(i64 %env8092336, i64 %rvp8089040) {
  %envptr8093801 = inttoptr i64 %env8092336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093802 = getelementptr inbounds i64, i64* %envptr8093801, i64 7            ; &envptr8093801[7]
  %kdG$_37drop = load i64, i64* %envptr8093802, align 8                              ; load; *envptr8093802
  %envptr8093803 = inttoptr i64 %env8092336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093804 = getelementptr inbounds i64, i64* %envptr8093803, i64 6            ; &envptr8093803[6]
  %wUF$ly = load i64, i64* %envptr8093804, align 8                                   ; load; *envptr8093804
  %envptr8093805 = inttoptr i64 %env8092336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093806 = getelementptr inbounds i64, i64* %envptr8093805, i64 5            ; &envptr8093805[5]
  %fqW$_37_62 = load i64, i64* %envptr8093806, align 8                               ; load; *envptr8093806
  %envptr8093807 = inttoptr i64 %env8092336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093808 = getelementptr inbounds i64, i64* %envptr8093807, i64 4            ; &envptr8093807[4]
  %FIf$y = load i64, i64* %envptr8093808, align 8                                    ; load; *envptr8093808
  %envptr8093809 = inttoptr i64 %env8092336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093810 = getelementptr inbounds i64, i64* %envptr8093809, i64 3            ; &envptr8093809[3]
  %a8085808 = load i64, i64* %envptr8093810, align 8                                 ; load; *envptr8093810
  %envptr8093811 = inttoptr i64 %env8092336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093812 = getelementptr inbounds i64, i64* %envptr8093811, i64 2            ; &envptr8093811[2]
  %cont8085993 = load i64, i64* %envptr8093812, align 8                              ; load; *envptr8093812
  %envptr8093813 = inttoptr i64 %env8092336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093814 = getelementptr inbounds i64, i64* %envptr8093813, i64 1            ; &envptr8093813[1]
  %b2J$lx = load i64, i64* %envptr8093814, align 8                                   ; load; *envptr8093814
  %_958086000 = call i64 @prim_car(i64 %rvp8089040)                                  ; call prim_car
  %rvp8089039 = call i64 @prim_cdr(i64 %rvp8089040)                                  ; call prim_cdr
  %a8085811 = call i64 @prim_car(i64 %rvp8089039)                                    ; call prim_car
  %na8089007 = call i64 @prim_cdr(i64 %rvp8089039)                                   ; call prim_cdr
  %cloptr8093815 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8093817 = getelementptr inbounds i64, i64* %cloptr8093815, i64 1              ; &eptr8093817[1]
  %eptr8093818 = getelementptr inbounds i64, i64* %cloptr8093815, i64 2              ; &eptr8093818[2]
  %eptr8093819 = getelementptr inbounds i64, i64* %cloptr8093815, i64 3              ; &eptr8093819[3]
  %eptr8093820 = getelementptr inbounds i64, i64* %cloptr8093815, i64 4              ; &eptr8093820[4]
  %eptr8093821 = getelementptr inbounds i64, i64* %cloptr8093815, i64 5              ; &eptr8093821[5]
  %eptr8093822 = getelementptr inbounds i64, i64* %cloptr8093815, i64 6              ; &eptr8093822[6]
  %eptr8093823 = getelementptr inbounds i64, i64* %cloptr8093815, i64 7              ; &eptr8093823[7]
  store i64 %b2J$lx, i64* %eptr8093817                                               ; *eptr8093817 = %b2J$lx
  store i64 %cont8085993, i64* %eptr8093818                                          ; *eptr8093818 = %cont8085993
  store i64 %a8085808, i64* %eptr8093819                                             ; *eptr8093819 = %a8085808
  store i64 %FIf$y, i64* %eptr8093820                                                ; *eptr8093820 = %FIf$y
  store i64 %a8085811, i64* %eptr8093821                                             ; *eptr8093821 = %a8085811
  store i64 %wUF$ly, i64* %eptr8093822                                               ; *eptr8093822 = %wUF$ly
  store i64 %kdG$_37drop, i64* %eptr8093823                                          ; *eptr8093823 = %kdG$_37drop
  %eptr8093816 = getelementptr inbounds i64, i64* %cloptr8093815, i64 0              ; &cloptr8093815[0]
  %f8093824 = ptrtoint void(i64,i64)* @lam8092333 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093824, i64* %eptr8093816                                             ; store fptr
  %arg8086647 = ptrtoint i64* %cloptr8093815 to i64                                  ; closure cast; i64* -> i64
  %rva8089038 = add i64 0, 0                                                         ; quoted ()
  %rva8089037 = call i64 @prim_cons(i64 %b2J$lx, i64 %rva8089038)                    ; call prim_cons
  %rva8089036 = call i64 @prim_cons(i64 %wUF$ly, i64 %rva8089037)                    ; call prim_cons
  %rva8089035 = call i64 @prim_cons(i64 %arg8086647, i64 %rva8089036)                ; call prim_cons
  %cloptr8093825 = inttoptr i64 %fqW$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093826 = getelementptr inbounds i64, i64* %cloptr8093825, i64 0             ; &cloptr8093825[0]
  %f8093828 = load i64, i64* %i0ptr8093826, align 8                                  ; load; *i0ptr8093826
  %fptr8093827 = inttoptr i64 %f8093828 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093827(i64 %fqW$_37_62, i64 %rva8089035)           ; tail call
  ret void
}


define void @lam8092333(i64 %env8092334, i64 %rvp8089034) {
  %envptr8093829 = inttoptr i64 %env8092334 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093830 = getelementptr inbounds i64, i64* %envptr8093829, i64 7            ; &envptr8093829[7]
  %kdG$_37drop = load i64, i64* %envptr8093830, align 8                              ; load; *envptr8093830
  %envptr8093831 = inttoptr i64 %env8092334 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093832 = getelementptr inbounds i64, i64* %envptr8093831, i64 6            ; &envptr8093831[6]
  %wUF$ly = load i64, i64* %envptr8093832, align 8                                   ; load; *envptr8093832
  %envptr8093833 = inttoptr i64 %env8092334 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093834 = getelementptr inbounds i64, i64* %envptr8093833, i64 5            ; &envptr8093833[5]
  %a8085811 = load i64, i64* %envptr8093834, align 8                                 ; load; *envptr8093834
  %envptr8093835 = inttoptr i64 %env8092334 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093836 = getelementptr inbounds i64, i64* %envptr8093835, i64 4            ; &envptr8093835[4]
  %FIf$y = load i64, i64* %envptr8093836, align 8                                    ; load; *envptr8093836
  %envptr8093837 = inttoptr i64 %env8092334 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093838 = getelementptr inbounds i64, i64* %envptr8093837, i64 3            ; &envptr8093837[3]
  %a8085808 = load i64, i64* %envptr8093838, align 8                                 ; load; *envptr8093838
  %envptr8093839 = inttoptr i64 %env8092334 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093840 = getelementptr inbounds i64, i64* %envptr8093839, i64 2            ; &envptr8093839[2]
  %cont8085993 = load i64, i64* %envptr8093840, align 8                              ; load; *envptr8093840
  %envptr8093841 = inttoptr i64 %env8092334 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093842 = getelementptr inbounds i64, i64* %envptr8093841, i64 1            ; &envptr8093841[1]
  %b2J$lx = load i64, i64* %envptr8093842, align 8                                   ; load; *envptr8093842
  %_958086001 = call i64 @prim_car(i64 %rvp8089034)                                  ; call prim_car
  %rvp8089033 = call i64 @prim_cdr(i64 %rvp8089034)                                  ; call prim_cdr
  %a8085812 = call i64 @prim_car(i64 %rvp8089033)                                    ; call prim_car
  %na8089009 = call i64 @prim_cdr(i64 %rvp8089033)                                   ; call prim_cdr
  %cmp8093843 = icmp eq i64 %a8085812, 15                                            ; false?
  br i1 %cmp8093843, label %else8093845, label %then8093844                          ; if

then8093844:
  %a8085813 = call i64 @prim__45(i64 %wUF$ly, i64 %b2J$lx)                           ; call prim__45
  %cloptr8093846 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093848 = getelementptr inbounds i64, i64* %cloptr8093846, i64 1              ; &eptr8093848[1]
  %eptr8093849 = getelementptr inbounds i64, i64* %cloptr8093846, i64 2              ; &eptr8093849[2]
  %eptr8093850 = getelementptr inbounds i64, i64* %cloptr8093846, i64 3              ; &eptr8093850[3]
  store i64 %cont8085993, i64* %eptr8093848                                          ; *eptr8093848 = %cont8085993
  store i64 %a8085808, i64* %eptr8093849                                             ; *eptr8093849 = %a8085808
  store i64 %a8085811, i64* %eptr8093850                                             ; *eptr8093850 = %a8085811
  %eptr8093847 = getelementptr inbounds i64, i64* %cloptr8093846, i64 0              ; &cloptr8093846[0]
  %f8093851 = ptrtoint void(i64,i64)* @lam8092326 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093851, i64* %eptr8093847                                             ; store fptr
  %arg8086653 = ptrtoint i64* %cloptr8093846 to i64                                  ; closure cast; i64* -> i64
  %rva8089021 = add i64 0, 0                                                         ; quoted ()
  %rva8089020 = call i64 @prim_cons(i64 %a8085813, i64 %rva8089021)                  ; call prim_cons
  %rva8089019 = call i64 @prim_cons(i64 %FIf$y, i64 %rva8089020)                     ; call prim_cons
  %rva8089018 = call i64 @prim_cons(i64 %arg8086653, i64 %rva8089019)                ; call prim_cons
  %cloptr8093852 = inttoptr i64 %kdG$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093853 = getelementptr inbounds i64, i64* %cloptr8093852, i64 0             ; &cloptr8093852[0]
  %f8093855 = load i64, i64* %i0ptr8093853, align 8                                  ; load; *i0ptr8093853
  %fptr8093854 = inttoptr i64 %f8093855 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093854(i64 %kdG$_37drop, i64 %rva8089018)          ; tail call
  ret void

else8093845:
  %cloptr8093856 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093858 = getelementptr inbounds i64, i64* %cloptr8093856, i64 1              ; &eptr8093858[1]
  %eptr8093859 = getelementptr inbounds i64, i64* %cloptr8093856, i64 2              ; &eptr8093859[2]
  %eptr8093860 = getelementptr inbounds i64, i64* %cloptr8093856, i64 3              ; &eptr8093860[3]
  store i64 %cont8085993, i64* %eptr8093858                                          ; *eptr8093858 = %cont8085993
  store i64 %a8085808, i64* %eptr8093859                                             ; *eptr8093859 = %a8085808
  store i64 %a8085811, i64* %eptr8093860                                             ; *eptr8093860 = %a8085811
  %eptr8093857 = getelementptr inbounds i64, i64* %cloptr8093856, i64 0              ; &cloptr8093856[0]
  %f8093861 = ptrtoint void(i64,i64)* @lam8092331 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093861, i64* %eptr8093857                                             ; store fptr
  %arg8086661 = ptrtoint i64* %cloptr8093856 to i64                                  ; closure cast; i64* -> i64
  %arg8086660 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089032 = add i64 0, 0                                                         ; quoted ()
  %rva8089031 = call i64 @prim_cons(i64 %FIf$y, i64 %rva8089032)                     ; call prim_cons
  %rva8089030 = call i64 @prim_cons(i64 %arg8086660, i64 %rva8089031)                ; call prim_cons
  %cloptr8093862 = inttoptr i64 %arg8086661 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093863 = getelementptr inbounds i64, i64* %cloptr8093862, i64 0             ; &cloptr8093862[0]
  %f8093865 = load i64, i64* %i0ptr8093863, align 8                                  ; load; *i0ptr8093863
  %fptr8093864 = inttoptr i64 %f8093865 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093864(i64 %arg8086661, i64 %rva8089030)           ; tail call
  ret void
}


define void @lam8092331(i64 %env8092332, i64 %rvp8089029) {
  %envptr8093866 = inttoptr i64 %env8092332 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093867 = getelementptr inbounds i64, i64* %envptr8093866, i64 3            ; &envptr8093866[3]
  %a8085811 = load i64, i64* %envptr8093867, align 8                                 ; load; *envptr8093867
  %envptr8093868 = inttoptr i64 %env8092332 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093869 = getelementptr inbounds i64, i64* %envptr8093868, i64 2            ; &envptr8093868[2]
  %a8085808 = load i64, i64* %envptr8093869, align 8                                 ; load; *envptr8093869
  %envptr8093870 = inttoptr i64 %env8092332 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093871 = getelementptr inbounds i64, i64* %envptr8093870, i64 1            ; &envptr8093870[1]
  %cont8085993 = load i64, i64* %envptr8093871, align 8                              ; load; *envptr8093871
  %_958086002 = call i64 @prim_car(i64 %rvp8089029)                                  ; call prim_car
  %rvp8089028 = call i64 @prim_cdr(i64 %rvp8089029)                                  ; call prim_cdr
  %a8085814 = call i64 @prim_car(i64 %rvp8089028)                                    ; call prim_car
  %na8089023 = call i64 @prim_cdr(i64 %rvp8089028)                                   ; call prim_cdr
  %rva8089027 = add i64 0, 0                                                         ; quoted ()
  %rva8089026 = call i64 @prim_cons(i64 %a8085814, i64 %rva8089027)                  ; call prim_cons
  %rva8089025 = call i64 @prim_cons(i64 %a8085811, i64 %rva8089026)                  ; call prim_cons
  %rva8089024 = call i64 @prim_cons(i64 %cont8085993, i64 %rva8089025)               ; call prim_cons
  %cloptr8093872 = inttoptr i64 %a8085808 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8093873 = getelementptr inbounds i64, i64* %cloptr8093872, i64 0             ; &cloptr8093872[0]
  %f8093875 = load i64, i64* %i0ptr8093873, align 8                                  ; load; *i0ptr8093873
  %fptr8093874 = inttoptr i64 %f8093875 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093874(i64 %a8085808, i64 %rva8089024)             ; tail call
  ret void
}


define void @lam8092326(i64 %env8092327, i64 %rvp8089017) {
  %envptr8093876 = inttoptr i64 %env8092327 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093877 = getelementptr inbounds i64, i64* %envptr8093876, i64 3            ; &envptr8093876[3]
  %a8085811 = load i64, i64* %envptr8093877, align 8                                 ; load; *envptr8093877
  %envptr8093878 = inttoptr i64 %env8092327 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093879 = getelementptr inbounds i64, i64* %envptr8093878, i64 2            ; &envptr8093878[2]
  %a8085808 = load i64, i64* %envptr8093879, align 8                                 ; load; *envptr8093879
  %envptr8093880 = inttoptr i64 %env8092327 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093881 = getelementptr inbounds i64, i64* %envptr8093880, i64 1            ; &envptr8093880[1]
  %cont8085993 = load i64, i64* %envptr8093881, align 8                              ; load; *envptr8093881
  %_958086002 = call i64 @prim_car(i64 %rvp8089017)                                  ; call prim_car
  %rvp8089016 = call i64 @prim_cdr(i64 %rvp8089017)                                  ; call prim_cdr
  %a8085814 = call i64 @prim_car(i64 %rvp8089016)                                    ; call prim_car
  %na8089011 = call i64 @prim_cdr(i64 %rvp8089016)                                   ; call prim_cdr
  %rva8089015 = add i64 0, 0                                                         ; quoted ()
  %rva8089014 = call i64 @prim_cons(i64 %a8085814, i64 %rva8089015)                  ; call prim_cons
  %rva8089013 = call i64 @prim_cons(i64 %a8085811, i64 %rva8089014)                  ; call prim_cons
  %rva8089012 = call i64 @prim_cons(i64 %cont8085993, i64 %rva8089013)               ; call prim_cons
  %cloptr8093882 = inttoptr i64 %a8085808 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8093883 = getelementptr inbounds i64, i64* %cloptr8093882, i64 0             ; &cloptr8093882[0]
  %f8093885 = load i64, i64* %i0ptr8093883, align 8                                  ; load; *i0ptr8093883
  %fptr8093884 = inttoptr i64 %f8093885 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093884(i64 %a8085808, i64 %rva8089012)             ; tail call
  ret void
}


define void @lam8092314(i64 %env8092315, i64 %rvp8089597) {
  %envptr8093886 = inttoptr i64 %env8092315 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093887 = getelementptr inbounds i64, i64* %envptr8093886, i64 2            ; &envptr8093886[2]
  %PjA$common_45tail = load i64, i64* %envptr8093887, align 8                        ; load; *envptr8093887
  %envptr8093888 = inttoptr i64 %env8092315 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093889 = getelementptr inbounds i64, i64* %envptr8093888, i64 1            ; &envptr8093888[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8093889, align 8                      ; load; *envptr8093889
  %cont8086008 = call i64 @prim_car(i64 %rvp8089597)                                 ; call prim_car
  %rvp8089596 = call i64 @prim_cdr(i64 %rvp8089597)                                  ; call prim_cdr
  %L3s$new = call i64 @prim_car(i64 %rvp8089596)                                     ; call prim_car
  %na8089115 = call i64 @prim_cdr(i64 %rvp8089596)                                   ; call prim_cdr
  %arg8086694 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085815 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8086694) ; call prim_vector_45ref
  %a8085816 = call i64 @prim_eq_63(i64 %L3s$new, i64 %a8085815)                      ; call prim_eq_63
  %a8085817 = call i64 @prim_not(i64 %a8085816)                                      ; call prim_not
  %cmp8093890 = icmp eq i64 %a8085817, 15                                            ; false?
  br i1 %cmp8093890, label %else8093892, label %then8093891                          ; if

then8093891:
  %a8085818 = call i64 @prim_procedure_63(i64 %PjA$common_45tail)                    ; call prim_procedure_63
  %cmp8093893 = icmp eq i64 %a8085818, 15                                            ; false?
  br i1 %cmp8093893, label %else8093895, label %then8093894                          ; if

then8093894:
  %arg8086700 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085819 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8086700) ; call prim_vector_45ref
  %cloptr8093896 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093898 = getelementptr inbounds i64, i64* %cloptr8093896, i64 1              ; &eptr8093898[1]
  %eptr8093899 = getelementptr inbounds i64, i64* %cloptr8093896, i64 2              ; &eptr8093899[2]
  %eptr8093900 = getelementptr inbounds i64, i64* %cloptr8093896, i64 3              ; &eptr8093900[3]
  store i64 %L3s$new, i64* %eptr8093898                                              ; *eptr8093898 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8093899                                  ; *eptr8093899 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8093900                                          ; *eptr8093900 = %cont8086008
  %eptr8093897 = getelementptr inbounds i64, i64* %cloptr8093896, i64 0              ; &cloptr8093896[0]
  %f8093901 = ptrtoint void(i64,i64)* @lam8092128 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093901, i64* %eptr8093897                                             ; store fptr
  %arg8086704 = ptrtoint i64* %cloptr8093896 to i64                                  ; closure cast; i64* -> i64
  %rva8089354 = add i64 0, 0                                                         ; quoted ()
  %rva8089353 = call i64 @prim_cons(i64 %a8085819, i64 %rva8089354)                  ; call prim_cons
  %rva8089352 = call i64 @prim_cons(i64 %L3s$new, i64 %rva8089353)                   ; call prim_cons
  %rva8089351 = call i64 @prim_cons(i64 %arg8086704, i64 %rva8089352)                ; call prim_cons
  %cloptr8093902 = inttoptr i64 %PjA$common_45tail to i64*                           ; closure/env cast; i64 -> i64*
  %i0ptr8093903 = getelementptr inbounds i64, i64* %cloptr8093902, i64 0             ; &cloptr8093902[0]
  %f8093905 = load i64, i64* %i0ptr8093903, align 8                                  ; load; *i0ptr8093903
  %fptr8093904 = inttoptr i64 %f8093905 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093904(i64 %PjA$common_45tail, i64 %rva8089351)    ; tail call
  ret void

else8093895:
  %arg8086969 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8093906, i32 0, i32 0)); quoted string
  %retprim8086037 = call i64 @prim_halt(i64 %arg8086969)                             ; call prim_halt
  %cloptr8093907 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093909 = getelementptr inbounds i64, i64* %cloptr8093907, i64 1              ; &eptr8093909[1]
  %eptr8093910 = getelementptr inbounds i64, i64* %cloptr8093907, i64 2              ; &eptr8093910[2]
  %eptr8093911 = getelementptr inbounds i64, i64* %cloptr8093907, i64 3              ; &eptr8093911[3]
  store i64 %L3s$new, i64* %eptr8093909                                              ; *eptr8093909 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8093910                                  ; *eptr8093910 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8093911                                          ; *eptr8093911 = %cont8086008
  %eptr8093908 = getelementptr inbounds i64, i64* %cloptr8093907, i64 0              ; &cloptr8093907[0]
  %f8093912 = ptrtoint void(i64,i64)* @lam8092308 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093912, i64* %eptr8093908                                             ; store fptr
  %arg8086972 = ptrtoint i64* %cloptr8093907 to i64                                  ; closure cast; i64* -> i64
  %arg8086971 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089592 = add i64 0, 0                                                         ; quoted ()
  %rva8089591 = call i64 @prim_cons(i64 %retprim8086037, i64 %rva8089592)            ; call prim_cons
  %rva8089590 = call i64 @prim_cons(i64 %arg8086971, i64 %rva8089591)                ; call prim_cons
  %cloptr8093913 = inttoptr i64 %arg8086972 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093914 = getelementptr inbounds i64, i64* %cloptr8093913, i64 0             ; &cloptr8093913[0]
  %f8093916 = load i64, i64* %i0ptr8093914, align 8                                  ; load; *i0ptr8093914
  %fptr8093915 = inttoptr i64 %f8093916 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093915(i64 %arg8086972, i64 %rva8089590)           ; tail call
  ret void

else8093892:
  %retprim8086038 = call i64 @prim_void()                                            ; call prim_void
  %arg8087237 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089595 = add i64 0, 0                                                         ; quoted ()
  %rva8089594 = call i64 @prim_cons(i64 %retprim8086038, i64 %rva8089595)            ; call prim_cons
  %rva8089593 = call i64 @prim_cons(i64 %arg8087237, i64 %rva8089594)                ; call prim_cons
  %cloptr8093917 = inttoptr i64 %cont8086008 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093918 = getelementptr inbounds i64, i64* %cloptr8093917, i64 0             ; &cloptr8093917[0]
  %f8093920 = load i64, i64* %i0ptr8093918, align 8                                  ; load; *i0ptr8093918
  %fptr8093919 = inttoptr i64 %f8093920 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093919(i64 %cont8086008, i64 %rva8089593)          ; tail call
  ret void
}


define void @lam8092308(i64 %env8092309, i64 %rvp8089589) {
  %envptr8093921 = inttoptr i64 %env8092309 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093922 = getelementptr inbounds i64, i64* %envptr8093921, i64 3            ; &envptr8093921[3]
  %cont8086008 = load i64, i64* %envptr8093922, align 8                              ; load; *envptr8093922
  %envptr8093923 = inttoptr i64 %env8092309 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093924 = getelementptr inbounds i64, i64* %envptr8093923, i64 2            ; &envptr8093923[2]
  %syN$_37wind_45stack = load i64, i64* %envptr8093924, align 8                      ; load; *envptr8093924
  %envptr8093925 = inttoptr i64 %env8092309 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093926 = getelementptr inbounds i64, i64* %envptr8093925, i64 1            ; &envptr8093925[1]
  %L3s$new = load i64, i64* %envptr8093926, align 8                                  ; load; *envptr8093926
  %_958086009 = call i64 @prim_car(i64 %rvp8089589)                                  ; call prim_car
  %rvp8089588 = call i64 @prim_cdr(i64 %rvp8089589)                                  ; call prim_cdr
  %pHq$tail = call i64 @prim_car(i64 %rvp8089588)                                    ; call prim_car
  %na8089356 = call i64 @prim_cdr(i64 %rvp8089588)                                   ; call prim_cdr
  %cloptr8093927 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8093928 = getelementptr inbounds i64, i64* %cloptr8093927, i64 0              ; &cloptr8093927[0]
  %f8093929 = ptrtoint void(i64,i64)* @lam8092306 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093929, i64* %eptr8093928                                             ; store fptr
  %arg8086974 = ptrtoint i64* %cloptr8093927 to i64                                  ; closure cast; i64* -> i64
  %cloptr8093930 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8093932 = getelementptr inbounds i64, i64* %cloptr8093930, i64 1              ; &eptr8093932[1]
  %eptr8093933 = getelementptr inbounds i64, i64* %cloptr8093930, i64 2              ; &eptr8093933[2]
  %eptr8093934 = getelementptr inbounds i64, i64* %cloptr8093930, i64 3              ; &eptr8093934[3]
  %eptr8093935 = getelementptr inbounds i64, i64* %cloptr8093930, i64 4              ; &eptr8093935[4]
  store i64 %pHq$tail, i64* %eptr8093932                                             ; *eptr8093932 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8093933                                              ; *eptr8093933 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8093934                                  ; *eptr8093934 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8093935                                          ; *eptr8093935 = %cont8086008
  %eptr8093931 = getelementptr inbounds i64, i64* %cloptr8093930, i64 0              ; &cloptr8093930[0]
  %f8093936 = ptrtoint void(i64,i64)* @lam8092302 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093936, i64* %eptr8093931                                             ; store fptr
  %arg8086973 = ptrtoint i64* %cloptr8093930 to i64                                  ; closure cast; i64* -> i64
  %rva8089587 = add i64 0, 0                                                         ; quoted ()
  %rva8089586 = call i64 @prim_cons(i64 %arg8086973, i64 %rva8089587)                ; call prim_cons
  %cloptr8093937 = inttoptr i64 %arg8086974 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093938 = getelementptr inbounds i64, i64* %cloptr8093937, i64 0             ; &cloptr8093937[0]
  %f8093940 = load i64, i64* %i0ptr8093938, align 8                                  ; load; *i0ptr8093938
  %fptr8093939 = inttoptr i64 %f8093940 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093939(i64 %arg8086974, i64 %rva8089586)           ; tail call
  ret void
}


define void @lam8092306(i64 %env8092307, i64 %Snq$lst8086036) {
  %cont8086035 = call i64 @prim_car(i64 %Snq$lst8086036)                             ; call prim_car
  %Snq$lst = call i64 @prim_cdr(i64 %Snq$lst8086036)                                 ; call prim_cdr
  %arg8086978 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089359 = add i64 0, 0                                                         ; quoted ()
  %rva8089358 = call i64 @prim_cons(i64 %Snq$lst, i64 %rva8089359)                   ; call prim_cons
  %rva8089357 = call i64 @prim_cons(i64 %arg8086978, i64 %rva8089358)                ; call prim_cons
  %cloptr8093941 = inttoptr i64 %cont8086035 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8093942 = getelementptr inbounds i64, i64* %cloptr8093941, i64 0             ; &cloptr8093941[0]
  %f8093944 = load i64, i64* %i0ptr8093942, align 8                                  ; load; *i0ptr8093942
  %fptr8093943 = inttoptr i64 %f8093944 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093943(i64 %cont8086035, i64 %rva8089357)          ; tail call
  ret void
}


define void @lam8092302(i64 %env8092303, i64 %rvp8089585) {
  %envptr8093945 = inttoptr i64 %env8092303 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093946 = getelementptr inbounds i64, i64* %envptr8093945, i64 4            ; &envptr8093945[4]
  %cont8086008 = load i64, i64* %envptr8093946, align 8                              ; load; *envptr8093946
  %envptr8093947 = inttoptr i64 %env8092303 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093948 = getelementptr inbounds i64, i64* %envptr8093947, i64 3            ; &envptr8093947[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8093948, align 8                      ; load; *envptr8093948
  %envptr8093949 = inttoptr i64 %env8092303 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093950 = getelementptr inbounds i64, i64* %envptr8093949, i64 2            ; &envptr8093949[2]
  %L3s$new = load i64, i64* %envptr8093950, align 8                                  ; load; *envptr8093950
  %envptr8093951 = inttoptr i64 %env8092303 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093952 = getelementptr inbounds i64, i64* %envptr8093951, i64 1            ; &envptr8093951[1]
  %pHq$tail = load i64, i64* %envptr8093952, align 8                                 ; load; *envptr8093952
  %_958086033 = call i64 @prim_car(i64 %rvp8089585)                                  ; call prim_car
  %rvp8089584 = call i64 @prim_cdr(i64 %rvp8089585)                                  ; call prim_cdr
  %a8085820 = call i64 @prim_car(i64 %rvp8089584)                                    ; call prim_car
  %na8089361 = call i64 @prim_cdr(i64 %rvp8089584)                                   ; call prim_cdr
  %arg8086981 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086034 = call i64 @prim_make_45vector(i64 %arg8086981, i64 %a8085820)     ; call prim_make_45vector
  %cloptr8093953 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8093955 = getelementptr inbounds i64, i64* %cloptr8093953, i64 1              ; &eptr8093955[1]
  %eptr8093956 = getelementptr inbounds i64, i64* %cloptr8093953, i64 2              ; &eptr8093956[2]
  %eptr8093957 = getelementptr inbounds i64, i64* %cloptr8093953, i64 3              ; &eptr8093957[3]
  %eptr8093958 = getelementptr inbounds i64, i64* %cloptr8093953, i64 4              ; &eptr8093958[4]
  store i64 %pHq$tail, i64* %eptr8093955                                             ; *eptr8093955 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8093956                                              ; *eptr8093956 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8093957                                  ; *eptr8093957 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8093958                                          ; *eptr8093958 = %cont8086008
  %eptr8093954 = getelementptr inbounds i64, i64* %cloptr8093953, i64 0              ; &cloptr8093953[0]
  %f8093959 = ptrtoint void(i64,i64)* @lam8092299 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093959, i64* %eptr8093954                                             ; store fptr
  %arg8086984 = ptrtoint i64* %cloptr8093953 to i64                                  ; closure cast; i64* -> i64
  %arg8086983 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089583 = add i64 0, 0                                                         ; quoted ()
  %rva8089582 = call i64 @prim_cons(i64 %retprim8086034, i64 %rva8089583)            ; call prim_cons
  %rva8089581 = call i64 @prim_cons(i64 %arg8086983, i64 %rva8089582)                ; call prim_cons
  %cloptr8093960 = inttoptr i64 %arg8086984 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8093961 = getelementptr inbounds i64, i64* %cloptr8093960, i64 0             ; &cloptr8093960[0]
  %f8093963 = load i64, i64* %i0ptr8093961, align 8                                  ; load; *i0ptr8093961
  %fptr8093962 = inttoptr i64 %f8093963 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093962(i64 %arg8086984, i64 %rva8089581)           ; tail call
  ret void
}


define void @lam8092299(i64 %env8092300, i64 %rvp8089580) {
  %envptr8093964 = inttoptr i64 %env8092300 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093965 = getelementptr inbounds i64, i64* %envptr8093964, i64 4            ; &envptr8093964[4]
  %cont8086008 = load i64, i64* %envptr8093965, align 8                              ; load; *envptr8093965
  %envptr8093966 = inttoptr i64 %env8092300 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093967 = getelementptr inbounds i64, i64* %envptr8093966, i64 3            ; &envptr8093966[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8093967, align 8                      ; load; *envptr8093967
  %envptr8093968 = inttoptr i64 %env8092300 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093969 = getelementptr inbounds i64, i64* %envptr8093968, i64 2            ; &envptr8093968[2]
  %L3s$new = load i64, i64* %envptr8093969, align 8                                  ; load; *envptr8093969
  %envptr8093970 = inttoptr i64 %env8092300 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8093971 = getelementptr inbounds i64, i64* %envptr8093970, i64 1            ; &envptr8093970[1]
  %pHq$tail = load i64, i64* %envptr8093971, align 8                                 ; load; *envptr8093971
  %_958086024 = call i64 @prim_car(i64 %rvp8089580)                                  ; call prim_car
  %rvp8089579 = call i64 @prim_cdr(i64 %rvp8089580)                                  ; call prim_cdr
  %taN$f = call i64 @prim_car(i64 %rvp8089579)                                       ; call prim_car
  %na8089363 = call i64 @prim_cdr(i64 %rvp8089579)                                   ; call prim_cdr
  %cloptr8093972 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8093974 = getelementptr inbounds i64, i64* %cloptr8093972, i64 1              ; &eptr8093974[1]
  %eptr8093975 = getelementptr inbounds i64, i64* %cloptr8093972, i64 2              ; &eptr8093975[2]
  %eptr8093976 = getelementptr inbounds i64, i64* %cloptr8093972, i64 3              ; &eptr8093976[3]
  store i64 %pHq$tail, i64* %eptr8093974                                             ; *eptr8093974 = %pHq$tail
  store i64 %syN$_37wind_45stack, i64* %eptr8093975                                  ; *eptr8093975 = %syN$_37wind_45stack
  store i64 %taN$f, i64* %eptr8093976                                                ; *eptr8093976 = %taN$f
  %eptr8093973 = getelementptr inbounds i64, i64* %cloptr8093972, i64 0              ; &cloptr8093972[0]
  %f8093977 = ptrtoint void(i64,i64)* @lam8092297 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093977, i64* %eptr8093973                                             ; store fptr
  %ya3$f8085707 = ptrtoint i64* %cloptr8093972 to i64                                ; closure cast; i64* -> i64
  %arg8087036 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %nDe$_95t = call i64 @prim_vector_45set_33(i64 %taN$f, i64 %arg8087036, i64 %ya3$f8085707); call prim_vector_45set_33
  %arg8087038 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085833 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8087038)               ; call prim_vector_45ref
  %a8085834 = call i64 @prim_procedure_63(i64 %a8085833)                             ; call prim_procedure_63
  %cmp8093978 = icmp eq i64 %a8085834, 15                                            ; false?
  br i1 %cmp8093978, label %else8093980, label %then8093979                          ; if

then8093979:
  %arg8087041 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085835 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8087041)               ; call prim_vector_45ref
  %arg8087043 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085836 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8087043) ; call prim_vector_45ref
  %cloptr8093981 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8093983 = getelementptr inbounds i64, i64* %cloptr8093981, i64 1              ; &eptr8093983[1]
  %eptr8093984 = getelementptr inbounds i64, i64* %cloptr8093981, i64 2              ; &eptr8093984[2]
  %eptr8093985 = getelementptr inbounds i64, i64* %cloptr8093981, i64 3              ; &eptr8093985[3]
  %eptr8093986 = getelementptr inbounds i64, i64* %cloptr8093981, i64 4              ; &eptr8093986[4]
  store i64 %pHq$tail, i64* %eptr8093983                                             ; *eptr8093983 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8093984                                              ; *eptr8093984 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8093985                                  ; *eptr8093985 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8093986                                          ; *eptr8093986 = %cont8086008
  %eptr8093982 = getelementptr inbounds i64, i64* %cloptr8093981, i64 0              ; &cloptr8093981[0]
  %f8093987 = ptrtoint void(i64,i64)* @lam8092198 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093987, i64* %eptr8093982                                             ; store fptr
  %arg8087046 = ptrtoint i64* %cloptr8093981 to i64                                  ; closure cast; i64* -> i64
  %rva8089490 = add i64 0, 0                                                         ; quoted ()
  %rva8089489 = call i64 @prim_cons(i64 %a8085836, i64 %rva8089490)                  ; call prim_cons
  %rva8089488 = call i64 @prim_cons(i64 %arg8087046, i64 %rva8089489)                ; call prim_cons
  %cloptr8093988 = inttoptr i64 %a8085835 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8093989 = getelementptr inbounds i64, i64* %cloptr8093988, i64 0             ; &cloptr8093988[0]
  %f8093991 = load i64, i64* %i0ptr8093989, align 8                                  ; load; *i0ptr8093989
  %fptr8093990 = inttoptr i64 %f8093991 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8093990(i64 %a8085835, i64 %rva8089488)             ; tail call
  ret void

else8093980:
  %arg8087140 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8093992, i32 0, i32 0)); quoted string
  %retprim8086032 = call i64 @prim_halt(i64 %arg8087140)                             ; call prim_halt
  %cloptr8093993 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8093995 = getelementptr inbounds i64, i64* %cloptr8093993, i64 1              ; &eptr8093995[1]
  %eptr8093996 = getelementptr inbounds i64, i64* %cloptr8093993, i64 2              ; &eptr8093996[2]
  %eptr8093997 = getelementptr inbounds i64, i64* %cloptr8093993, i64 3              ; &eptr8093997[3]
  %eptr8093998 = getelementptr inbounds i64, i64* %cloptr8093993, i64 4              ; &eptr8093998[4]
  store i64 %pHq$tail, i64* %eptr8093995                                             ; *eptr8093995 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8093996                                              ; *eptr8093996 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8093997                                  ; *eptr8093997 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8093998                                          ; *eptr8093998 = %cont8086008
  %eptr8093994 = getelementptr inbounds i64, i64* %cloptr8093993, i64 0              ; &cloptr8093993[0]
  %f8093999 = ptrtoint void(i64,i64)* @lam8092265 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8093999, i64* %eptr8093994                                             ; store fptr
  %arg8087143 = ptrtoint i64* %cloptr8093993 to i64                                  ; closure cast; i64* -> i64
  %arg8087142 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089578 = add i64 0, 0                                                         ; quoted ()
  %rva8089577 = call i64 @prim_cons(i64 %retprim8086032, i64 %rva8089578)            ; call prim_cons
  %rva8089576 = call i64 @prim_cons(i64 %arg8087142, i64 %rva8089577)                ; call prim_cons
  %cloptr8094000 = inttoptr i64 %arg8087143 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094001 = getelementptr inbounds i64, i64* %cloptr8094000, i64 0             ; &cloptr8094000[0]
  %f8094003 = load i64, i64* %i0ptr8094001, align 8                                  ; load; *i0ptr8094001
  %fptr8094002 = inttoptr i64 %f8094003 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094002(i64 %arg8087143, i64 %rva8089576)           ; tail call
  ret void
}


define void @lam8092297(i64 %env8092298, i64 %rvp8089402) {
  %envptr8094004 = inttoptr i64 %env8092298 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094005 = getelementptr inbounds i64, i64* %envptr8094004, i64 3            ; &envptr8094004[3]
  %taN$f = load i64, i64* %envptr8094005, align 8                                    ; load; *envptr8094005
  %envptr8094006 = inttoptr i64 %env8092298 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094007 = getelementptr inbounds i64, i64* %envptr8094006, i64 2            ; &envptr8094006[2]
  %syN$_37wind_45stack = load i64, i64* %envptr8094007, align 8                      ; load; *envptr8094007
  %envptr8094008 = inttoptr i64 %env8092298 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094009 = getelementptr inbounds i64, i64* %envptr8094008, i64 1            ; &envptr8094008[1]
  %pHq$tail = load i64, i64* %envptr8094009, align 8                                 ; load; *envptr8094009
  %cont8086025 = call i64 @prim_car(i64 %rvp8089402)                                 ; call prim_car
  %rvp8089401 = call i64 @prim_cdr(i64 %rvp8089402)                                  ; call prim_cdr
  %HbV$l = call i64 @prim_car(i64 %rvp8089401)                                       ; call prim_car
  %na8089365 = call i64 @prim_cdr(i64 %rvp8089401)                                   ; call prim_cdr
  %a8085821 = call i64 @prim_eq_63(i64 %HbV$l, i64 %pHq$tail)                        ; call prim_eq_63
  %a8085822 = call i64 @prim_not(i64 %a8085821)                                      ; call prim_not
  %cmp8094010 = icmp eq i64 %a8085822, 15                                            ; false?
  br i1 %cmp8094010, label %else8094012, label %then8094011                          ; if

then8094011:
  %a8085823 = call i64 @prim_cdr(i64 %HbV$l)                                         ; call prim_cdr
  %arg8086990 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086030 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086990, i64 %a8085823); call prim_vector_45set_33
  %cloptr8094013 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094015 = getelementptr inbounds i64, i64* %cloptr8094013, i64 1              ; &eptr8094015[1]
  %eptr8094016 = getelementptr inbounds i64, i64* %cloptr8094013, i64 2              ; &eptr8094016[2]
  %eptr8094017 = getelementptr inbounds i64, i64* %cloptr8094013, i64 3              ; &eptr8094017[3]
  store i64 %HbV$l, i64* %eptr8094015                                                ; *eptr8094015 = %HbV$l
  store i64 %taN$f, i64* %eptr8094016                                                ; *eptr8094016 = %taN$f
  store i64 %cont8086025, i64* %eptr8094017                                          ; *eptr8094017 = %cont8086025
  %eptr8094014 = getelementptr inbounds i64, i64* %cloptr8094013, i64 0              ; &cloptr8094013[0]
  %f8094018 = ptrtoint void(i64,i64)* @lam8092292 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094018, i64* %eptr8094014                                             ; store fptr
  %arg8086994 = ptrtoint i64* %cloptr8094013 to i64                                  ; closure cast; i64* -> i64
  %arg8086993 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089397 = add i64 0, 0                                                         ; quoted ()
  %rva8089396 = call i64 @prim_cons(i64 %retprim8086030, i64 %rva8089397)            ; call prim_cons
  %rva8089395 = call i64 @prim_cons(i64 %arg8086993, i64 %rva8089396)                ; call prim_cons
  %cloptr8094019 = inttoptr i64 %arg8086994 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094020 = getelementptr inbounds i64, i64* %cloptr8094019, i64 0             ; &cloptr8094019[0]
  %f8094022 = load i64, i64* %i0ptr8094020, align 8                                  ; load; *i0ptr8094020
  %fptr8094021 = inttoptr i64 %f8094022 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094021(i64 %arg8086994, i64 %rva8089395)           ; tail call
  ret void

else8094012:
  %retprim8086031 = call i64 @prim_void()                                            ; call prim_void
  %arg8087033 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089400 = add i64 0, 0                                                         ; quoted ()
  %rva8089399 = call i64 @prim_cons(i64 %retprim8086031, i64 %rva8089400)            ; call prim_cons
  %rva8089398 = call i64 @prim_cons(i64 %arg8087033, i64 %rva8089399)                ; call prim_cons
  %cloptr8094023 = inttoptr i64 %cont8086025 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094024 = getelementptr inbounds i64, i64* %cloptr8094023, i64 0             ; &cloptr8094023[0]
  %f8094026 = load i64, i64* %i0ptr8094024, align 8                                  ; load; *i0ptr8094024
  %fptr8094025 = inttoptr i64 %f8094026 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094025(i64 %cont8086025, i64 %rva8089398)          ; tail call
  ret void
}


define void @lam8092292(i64 %env8092293, i64 %rvp8089394) {
  %envptr8094027 = inttoptr i64 %env8092293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094028 = getelementptr inbounds i64, i64* %envptr8094027, i64 3            ; &envptr8094027[3]
  %cont8086025 = load i64, i64* %envptr8094028, align 8                              ; load; *envptr8094028
  %envptr8094029 = inttoptr i64 %env8092293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094030 = getelementptr inbounds i64, i64* %envptr8094029, i64 2            ; &envptr8094029[2]
  %taN$f = load i64, i64* %envptr8094030, align 8                                    ; load; *envptr8094030
  %envptr8094031 = inttoptr i64 %env8092293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094032 = getelementptr inbounds i64, i64* %envptr8094031, i64 1            ; &envptr8094031[1]
  %HbV$l = load i64, i64* %envptr8094032, align 8                                    ; load; *envptr8094032
  %_958086026 = call i64 @prim_car(i64 %rvp8089394)                                  ; call prim_car
  %rvp8089393 = call i64 @prim_cdr(i64 %rvp8089394)                                  ; call prim_cdr
  %t6A$_95t = call i64 @prim_car(i64 %rvp8089393)                                    ; call prim_car
  %na8089367 = call i64 @prim_cdr(i64 %rvp8089393)                                   ; call prim_cdr
  %a8085824 = call i64 @prim_car(i64 %HbV$l)                                         ; call prim_car
  %a8085825 = call i64 @prim_cdr(i64 %a8085824)                                      ; call prim_cdr
  %a8085826 = call i64 @prim_procedure_63(i64 %a8085825)                             ; call prim_procedure_63
  %cmp8094033 = icmp eq i64 %a8085826, 15                                            ; false?
  br i1 %cmp8094033, label %else8094035, label %then8094034                          ; if

then8094034:
  %a8085827 = call i64 @prim_car(i64 %HbV$l)                                         ; call prim_car
  %a8085828 = call i64 @prim_cdr(i64 %a8085827)                                      ; call prim_cdr
  %cloptr8094036 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094038 = getelementptr inbounds i64, i64* %cloptr8094036, i64 1              ; &eptr8094038[1]
  %eptr8094039 = getelementptr inbounds i64, i64* %cloptr8094036, i64 2              ; &eptr8094039[2]
  %eptr8094040 = getelementptr inbounds i64, i64* %cloptr8094036, i64 3              ; &eptr8094040[3]
  store i64 %HbV$l, i64* %eptr8094038                                                ; *eptr8094038 = %HbV$l
  store i64 %taN$f, i64* %eptr8094039                                                ; *eptr8094039 = %taN$f
  store i64 %cont8086025, i64* %eptr8094040                                          ; *eptr8094040 = %cont8086025
  %eptr8094037 = getelementptr inbounds i64, i64* %cloptr8094036, i64 0              ; &cloptr8094036[0]
  %f8094041 = ptrtoint void(i64,i64)* @lam8092279 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094041, i64* %eptr8094037                                             ; store fptr
  %arg8087000 = ptrtoint i64* %cloptr8094036 to i64                                  ; closure cast; i64* -> i64
  %rva8089379 = add i64 0, 0                                                         ; quoted ()
  %rva8089378 = call i64 @prim_cons(i64 %arg8087000, i64 %rva8089379)                ; call prim_cons
  %cloptr8094042 = inttoptr i64 %a8085828 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094043 = getelementptr inbounds i64, i64* %cloptr8094042, i64 0             ; &cloptr8094042[0]
  %f8094045 = load i64, i64* %i0ptr8094043, align 8                                  ; load; *i0ptr8094043
  %fptr8094044 = inttoptr i64 %f8094045 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094044(i64 %a8085828, i64 %rva8089378)             ; tail call
  ret void

else8094035:
  %arg8087015 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094046, i32 0, i32 0)); quoted string
  %retprim8086029 = call i64 @prim_halt(i64 %arg8087015)                             ; call prim_halt
  %cloptr8094047 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094049 = getelementptr inbounds i64, i64* %cloptr8094047, i64 1              ; &eptr8094049[1]
  %eptr8094050 = getelementptr inbounds i64, i64* %cloptr8094047, i64 2              ; &eptr8094050[2]
  %eptr8094051 = getelementptr inbounds i64, i64* %cloptr8094047, i64 3              ; &eptr8094051[3]
  store i64 %HbV$l, i64* %eptr8094049                                                ; *eptr8094049 = %HbV$l
  store i64 %taN$f, i64* %eptr8094050                                                ; *eptr8094050 = %taN$f
  store i64 %cont8086025, i64* %eptr8094051                                          ; *eptr8094051 = %cont8086025
  %eptr8094048 = getelementptr inbounds i64, i64* %cloptr8094047, i64 0              ; &cloptr8094047[0]
  %f8094052 = ptrtoint void(i64,i64)* @lam8092289 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094052, i64* %eptr8094048                                             ; store fptr
  %arg8087018 = ptrtoint i64* %cloptr8094047 to i64                                  ; closure cast; i64* -> i64
  %arg8087017 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089392 = add i64 0, 0                                                         ; quoted ()
  %rva8089391 = call i64 @prim_cons(i64 %retprim8086029, i64 %rva8089392)            ; call prim_cons
  %rva8089390 = call i64 @prim_cons(i64 %arg8087017, i64 %rva8089391)                ; call prim_cons
  %cloptr8094053 = inttoptr i64 %arg8087018 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094054 = getelementptr inbounds i64, i64* %cloptr8094053, i64 0             ; &cloptr8094053[0]
  %f8094056 = load i64, i64* %i0ptr8094054, align 8                                  ; load; *i0ptr8094054
  %fptr8094055 = inttoptr i64 %f8094056 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094055(i64 %arg8087018, i64 %rva8089390)           ; tail call
  ret void
}


define void @lam8092289(i64 %env8092290, i64 %rvp8089389) {
  %envptr8094057 = inttoptr i64 %env8092290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094058 = getelementptr inbounds i64, i64* %envptr8094057, i64 3            ; &envptr8094057[3]
  %cont8086025 = load i64, i64* %envptr8094058, align 8                              ; load; *envptr8094058
  %envptr8094059 = inttoptr i64 %env8092290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094060 = getelementptr inbounds i64, i64* %envptr8094059, i64 2            ; &envptr8094059[2]
  %taN$f = load i64, i64* %envptr8094060, align 8                                    ; load; *envptr8094060
  %envptr8094061 = inttoptr i64 %env8092290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094062 = getelementptr inbounds i64, i64* %envptr8094061, i64 1            ; &envptr8094061[1]
  %HbV$l = load i64, i64* %envptr8094062, align 8                                    ; load; *envptr8094062
  %_958086027 = call i64 @prim_car(i64 %rvp8089389)                                  ; call prim_car
  %rvp8089388 = call i64 @prim_cdr(i64 %rvp8089389)                                  ; call prim_cdr
  %FIz$_95t = call i64 @prim_car(i64 %rvp8089388)                                    ; call prim_car
  %na8089381 = call i64 @prim_cdr(i64 %rvp8089388)                                   ; call prim_cdr
  %arg8087019 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085829 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8087019)               ; call prim_vector_45ref
  %a8085830 = call i64 @prim_procedure_63(i64 %a8085829)                             ; call prim_procedure_63
  %cmp8094063 = icmp eq i64 %a8085830, 15                                            ; false?
  br i1 %cmp8094063, label %else8094065, label %then8094064                          ; if

then8094064:
  %arg8087022 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085831 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8087022)               ; call prim_vector_45ref
  %a8085832 = call i64 @prim_cdr(i64 %HbV$l)                                         ; call prim_cdr
  %rva8089384 = add i64 0, 0                                                         ; quoted ()
  %rva8089383 = call i64 @prim_cons(i64 %a8085832, i64 %rva8089384)                  ; call prim_cons
  %rva8089382 = call i64 @prim_cons(i64 %cont8086025, i64 %rva8089383)               ; call prim_cons
  %cloptr8094066 = inttoptr i64 %a8085831 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094067 = getelementptr inbounds i64, i64* %cloptr8094066, i64 0             ; &cloptr8094066[0]
  %f8094069 = load i64, i64* %i0ptr8094067, align 8                                  ; load; *i0ptr8094067
  %fptr8094068 = inttoptr i64 %f8094069 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094068(i64 %a8085831, i64 %rva8089382)             ; tail call
  ret void

else8094065:
  %arg8087028 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094070, i32 0, i32 0)); quoted string
  %retprim8086028 = call i64 @prim_halt(i64 %arg8087028)                             ; call prim_halt
  %arg8087030 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089387 = add i64 0, 0                                                         ; quoted ()
  %rva8089386 = call i64 @prim_cons(i64 %retprim8086028, i64 %rva8089387)            ; call prim_cons
  %rva8089385 = call i64 @prim_cons(i64 %arg8087030, i64 %rva8089386)                ; call prim_cons
  %cloptr8094071 = inttoptr i64 %cont8086025 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094072 = getelementptr inbounds i64, i64* %cloptr8094071, i64 0             ; &cloptr8094071[0]
  %f8094074 = load i64, i64* %i0ptr8094072, align 8                                  ; load; *i0ptr8094072
  %fptr8094073 = inttoptr i64 %f8094074 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094073(i64 %cont8086025, i64 %rva8089385)          ; tail call
  ret void
}


define void @lam8092279(i64 %env8092280, i64 %rvp8089377) {
  %envptr8094075 = inttoptr i64 %env8092280 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094076 = getelementptr inbounds i64, i64* %envptr8094075, i64 3            ; &envptr8094075[3]
  %cont8086025 = load i64, i64* %envptr8094076, align 8                              ; load; *envptr8094076
  %envptr8094077 = inttoptr i64 %env8092280 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094078 = getelementptr inbounds i64, i64* %envptr8094077, i64 2            ; &envptr8094077[2]
  %taN$f = load i64, i64* %envptr8094078, align 8                                    ; load; *envptr8094078
  %envptr8094079 = inttoptr i64 %env8092280 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094080 = getelementptr inbounds i64, i64* %envptr8094079, i64 1            ; &envptr8094079[1]
  %HbV$l = load i64, i64* %envptr8094080, align 8                                    ; load; *envptr8094080
  %_958086027 = call i64 @prim_car(i64 %rvp8089377)                                  ; call prim_car
  %rvp8089376 = call i64 @prim_cdr(i64 %rvp8089377)                                  ; call prim_cdr
  %FIz$_95t = call i64 @prim_car(i64 %rvp8089376)                                    ; call prim_car
  %na8089369 = call i64 @prim_cdr(i64 %rvp8089376)                                   ; call prim_cdr
  %arg8087002 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085829 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8087002)               ; call prim_vector_45ref
  %a8085830 = call i64 @prim_procedure_63(i64 %a8085829)                             ; call prim_procedure_63
  %cmp8094081 = icmp eq i64 %a8085830, 15                                            ; false?
  br i1 %cmp8094081, label %else8094083, label %then8094082                          ; if

then8094082:
  %arg8087005 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085831 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8087005)               ; call prim_vector_45ref
  %a8085832 = call i64 @prim_cdr(i64 %HbV$l)                                         ; call prim_cdr
  %rva8089372 = add i64 0, 0                                                         ; quoted ()
  %rva8089371 = call i64 @prim_cons(i64 %a8085832, i64 %rva8089372)                  ; call prim_cons
  %rva8089370 = call i64 @prim_cons(i64 %cont8086025, i64 %rva8089371)               ; call prim_cons
  %cloptr8094084 = inttoptr i64 %a8085831 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094085 = getelementptr inbounds i64, i64* %cloptr8094084, i64 0             ; &cloptr8094084[0]
  %f8094087 = load i64, i64* %i0ptr8094085, align 8                                  ; load; *i0ptr8094085
  %fptr8094086 = inttoptr i64 %f8094087 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094086(i64 %a8085831, i64 %rva8089370)             ; tail call
  ret void

else8094083:
  %arg8087011 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094088, i32 0, i32 0)); quoted string
  %retprim8086028 = call i64 @prim_halt(i64 %arg8087011)                             ; call prim_halt
  %arg8087013 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089375 = add i64 0, 0                                                         ; quoted ()
  %rva8089374 = call i64 @prim_cons(i64 %retprim8086028, i64 %rva8089375)            ; call prim_cons
  %rva8089373 = call i64 @prim_cons(i64 %arg8087013, i64 %rva8089374)                ; call prim_cons
  %cloptr8094089 = inttoptr i64 %cont8086025 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094090 = getelementptr inbounds i64, i64* %cloptr8094089, i64 0             ; &cloptr8094089[0]
  %f8094092 = load i64, i64* %i0ptr8094090, align 8                                  ; load; *i0ptr8094090
  %fptr8094091 = inttoptr i64 %f8094092 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094091(i64 %cont8086025, i64 %rva8089373)          ; tail call
  ret void
}


define void @lam8092265(i64 %env8092266, i64 %rvp8089575) {
  %envptr8094093 = inttoptr i64 %env8092266 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094094 = getelementptr inbounds i64, i64* %envptr8094093, i64 4            ; &envptr8094093[4]
  %cont8086008 = load i64, i64* %envptr8094094, align 8                              ; load; *envptr8094094
  %envptr8094095 = inttoptr i64 %env8092266 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094096 = getelementptr inbounds i64, i64* %envptr8094095, i64 3            ; &envptr8094095[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094096, align 8                      ; load; *envptr8094096
  %envptr8094097 = inttoptr i64 %env8092266 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094098 = getelementptr inbounds i64, i64* %envptr8094097, i64 2            ; &envptr8094097[2]
  %L3s$new = load i64, i64* %envptr8094098, align 8                                  ; load; *envptr8094098
  %envptr8094099 = inttoptr i64 %env8092266 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094100 = getelementptr inbounds i64, i64* %envptr8094099, i64 1            ; &envptr8094099[1]
  %pHq$tail = load i64, i64* %envptr8094100, align 8                                 ; load; *envptr8094100
  %_958086010 = call i64 @prim_car(i64 %rvp8089575)                                  ; call prim_car
  %rvp8089574 = call i64 @prim_cdr(i64 %rvp8089575)                                  ; call prim_cdr
  %PNb$_95t = call i64 @prim_car(i64 %rvp8089574)                                    ; call prim_car
  %na8089492 = call i64 @prim_cdr(i64 %rvp8089574)                                   ; call prim_cdr
  %cloptr8094101 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8094102 = getelementptr inbounds i64, i64* %cloptr8094101, i64 0              ; &cloptr8094101[0]
  %f8094103 = ptrtoint void(i64,i64)* @lam8092263 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094103, i64* %eptr8094102                                             ; store fptr
  %arg8087145 = ptrtoint i64* %cloptr8094101 to i64                                  ; closure cast; i64* -> i64
  %cloptr8094104 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094106 = getelementptr inbounds i64, i64* %cloptr8094104, i64 1              ; &eptr8094106[1]
  %eptr8094107 = getelementptr inbounds i64, i64* %cloptr8094104, i64 2              ; &eptr8094107[2]
  %eptr8094108 = getelementptr inbounds i64, i64* %cloptr8094104, i64 3              ; &eptr8094108[3]
  %eptr8094109 = getelementptr inbounds i64, i64* %cloptr8094104, i64 4              ; &eptr8094109[4]
  store i64 %pHq$tail, i64* %eptr8094106                                             ; *eptr8094106 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094107                                              ; *eptr8094107 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094108                                  ; *eptr8094108 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094109                                          ; *eptr8094109 = %cont8086008
  %eptr8094105 = getelementptr inbounds i64, i64* %cloptr8094104, i64 0              ; &cloptr8094104[0]
  %f8094110 = ptrtoint void(i64,i64)* @lam8092259 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094110, i64* %eptr8094105                                             ; store fptr
  %arg8087144 = ptrtoint i64* %cloptr8094104 to i64                                  ; closure cast; i64* -> i64
  %rva8089573 = add i64 0, 0                                                         ; quoted ()
  %rva8089572 = call i64 @prim_cons(i64 %arg8087144, i64 %rva8089573)                ; call prim_cons
  %cloptr8094111 = inttoptr i64 %arg8087145 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094112 = getelementptr inbounds i64, i64* %cloptr8094111, i64 0             ; &cloptr8094111[0]
  %f8094114 = load i64, i64* %i0ptr8094112, align 8                                  ; load; *i0ptr8094112
  %fptr8094113 = inttoptr i64 %f8094114 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094113(i64 %arg8087145, i64 %rva8089572)           ; tail call
  ret void
}


define void @lam8092263(i64 %env8092264, i64 %sAO$lst8086023) {
  %cont8086022 = call i64 @prim_car(i64 %sAO$lst8086023)                             ; call prim_car
  %sAO$lst = call i64 @prim_cdr(i64 %sAO$lst8086023)                                 ; call prim_cdr
  %arg8087149 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089495 = add i64 0, 0                                                         ; quoted ()
  %rva8089494 = call i64 @prim_cons(i64 %sAO$lst, i64 %rva8089495)                   ; call prim_cons
  %rva8089493 = call i64 @prim_cons(i64 %arg8087149, i64 %rva8089494)                ; call prim_cons
  %cloptr8094115 = inttoptr i64 %cont8086022 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094116 = getelementptr inbounds i64, i64* %cloptr8094115, i64 0             ; &cloptr8094115[0]
  %f8094118 = load i64, i64* %i0ptr8094116, align 8                                  ; load; *i0ptr8094116
  %fptr8094117 = inttoptr i64 %f8094118 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094117(i64 %cont8086022, i64 %rva8089493)          ; tail call
  ret void
}


define void @lam8092259(i64 %env8092260, i64 %rvp8089571) {
  %envptr8094119 = inttoptr i64 %env8092260 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094120 = getelementptr inbounds i64, i64* %envptr8094119, i64 4            ; &envptr8094119[4]
  %cont8086008 = load i64, i64* %envptr8094120, align 8                              ; load; *envptr8094120
  %envptr8094121 = inttoptr i64 %env8092260 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094122 = getelementptr inbounds i64, i64* %envptr8094121, i64 3            ; &envptr8094121[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094122, align 8                      ; load; *envptr8094122
  %envptr8094123 = inttoptr i64 %env8092260 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094124 = getelementptr inbounds i64, i64* %envptr8094123, i64 2            ; &envptr8094123[2]
  %L3s$new = load i64, i64* %envptr8094124, align 8                                  ; load; *envptr8094124
  %envptr8094125 = inttoptr i64 %env8092260 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094126 = getelementptr inbounds i64, i64* %envptr8094125, i64 1            ; &envptr8094125[1]
  %pHq$tail = load i64, i64* %envptr8094126, align 8                                 ; load; *envptr8094126
  %_958086020 = call i64 @prim_car(i64 %rvp8089571)                                  ; call prim_car
  %rvp8089570 = call i64 @prim_cdr(i64 %rvp8089571)                                  ; call prim_cdr
  %a8085837 = call i64 @prim_car(i64 %rvp8089570)                                    ; call prim_car
  %na8089497 = call i64 @prim_cdr(i64 %rvp8089570)                                   ; call prim_cdr
  %arg8087152 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086021 = call i64 @prim_make_45vector(i64 %arg8087152, i64 %a8085837)     ; call prim_make_45vector
  %cloptr8094127 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094129 = getelementptr inbounds i64, i64* %cloptr8094127, i64 1              ; &eptr8094129[1]
  %eptr8094130 = getelementptr inbounds i64, i64* %cloptr8094127, i64 2              ; &eptr8094130[2]
  %eptr8094131 = getelementptr inbounds i64, i64* %cloptr8094127, i64 3              ; &eptr8094131[3]
  %eptr8094132 = getelementptr inbounds i64, i64* %cloptr8094127, i64 4              ; &eptr8094132[4]
  store i64 %pHq$tail, i64* %eptr8094129                                             ; *eptr8094129 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094130                                              ; *eptr8094130 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094131                                  ; *eptr8094131 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094132                                          ; *eptr8094132 = %cont8086008
  %eptr8094128 = getelementptr inbounds i64, i64* %cloptr8094127, i64 0              ; &cloptr8094127[0]
  %f8094133 = ptrtoint void(i64,i64)* @lam8092256 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094133, i64* %eptr8094128                                             ; store fptr
  %arg8087155 = ptrtoint i64* %cloptr8094127 to i64                                  ; closure cast; i64* -> i64
  %arg8087154 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089569 = add i64 0, 0                                                         ; quoted ()
  %rva8089568 = call i64 @prim_cons(i64 %retprim8086021, i64 %rva8089569)            ; call prim_cons
  %rva8089567 = call i64 @prim_cons(i64 %arg8087154, i64 %rva8089568)                ; call prim_cons
  %cloptr8094134 = inttoptr i64 %arg8087155 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094135 = getelementptr inbounds i64, i64* %cloptr8094134, i64 0             ; &cloptr8094134[0]
  %f8094137 = load i64, i64* %i0ptr8094135, align 8                                  ; load; *i0ptr8094135
  %fptr8094136 = inttoptr i64 %f8094137 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094136(i64 %arg8087155, i64 %rva8089567)           ; tail call
  ret void
}


define void @lam8092256(i64 %env8092257, i64 %rvp8089566) {
  %envptr8094138 = inttoptr i64 %env8092257 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094139 = getelementptr inbounds i64, i64* %envptr8094138, i64 4            ; &envptr8094138[4]
  %cont8086008 = load i64, i64* %envptr8094139, align 8                              ; load; *envptr8094139
  %envptr8094140 = inttoptr i64 %env8092257 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094141 = getelementptr inbounds i64, i64* %envptr8094140, i64 3            ; &envptr8094140[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094141, align 8                      ; load; *envptr8094141
  %envptr8094142 = inttoptr i64 %env8092257 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094143 = getelementptr inbounds i64, i64* %envptr8094142, i64 2            ; &envptr8094142[2]
  %L3s$new = load i64, i64* %envptr8094143, align 8                                  ; load; *envptr8094143
  %envptr8094144 = inttoptr i64 %env8092257 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094145 = getelementptr inbounds i64, i64* %envptr8094144, i64 1            ; &envptr8094144[1]
  %pHq$tail = load i64, i64* %envptr8094145, align 8                                 ; load; *envptr8094145
  %_958086011 = call i64 @prim_car(i64 %rvp8089566)                                  ; call prim_car
  %rvp8089565 = call i64 @prim_cdr(i64 %rvp8089566)                                  ; call prim_cdr
  %o00$f = call i64 @prim_car(i64 %rvp8089565)                                       ; call prim_car
  %na8089499 = call i64 @prim_cdr(i64 %rvp8089565)                                   ; call prim_cdr
  %cloptr8094146 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094148 = getelementptr inbounds i64, i64* %cloptr8094146, i64 1              ; &eptr8094148[1]
  %eptr8094149 = getelementptr inbounds i64, i64* %cloptr8094146, i64 2              ; &eptr8094149[2]
  %eptr8094150 = getelementptr inbounds i64, i64* %cloptr8094146, i64 3              ; &eptr8094150[3]
  store i64 %pHq$tail, i64* %eptr8094148                                             ; *eptr8094148 = %pHq$tail
  store i64 %syN$_37wind_45stack, i64* %eptr8094149                                  ; *eptr8094149 = %syN$_37wind_45stack
  store i64 %o00$f, i64* %eptr8094150                                                ; *eptr8094150 = %o00$f
  %eptr8094147 = getelementptr inbounds i64, i64* %cloptr8094146, i64 0              ; &cloptr8094146[0]
  %f8094151 = ptrtoint void(i64,i64)* @lam8092254 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094151, i64* %eptr8094147                                             ; store fptr
  %mxx$f8085708 = ptrtoint i64* %cloptr8094146 to i64                                ; closure cast; i64* -> i64
  %arg8087222 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %vT1$_95t = call i64 @prim_vector_45set_33(i64 %o00$f, i64 %arg8087222, i64 %mxx$f8085708); call prim_vector_45set_33
  %arg8087224 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085849 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8087224)               ; call prim_vector_45ref
  %a8085850 = call i64 @prim_procedure_63(i64 %a8085849)                             ; call prim_procedure_63
  %cmp8094152 = icmp eq i64 %a8085850, 15                                            ; false?
  br i1 %cmp8094152, label %else8094154, label %then8094153                          ; if

then8094153:
  %arg8087227 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085851 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8087227)               ; call prim_vector_45ref
  %rva8089561 = add i64 0, 0                                                         ; quoted ()
  %rva8089560 = call i64 @prim_cons(i64 %L3s$new, i64 %rva8089561)                   ; call prim_cons
  %rva8089559 = call i64 @prim_cons(i64 %cont8086008, i64 %rva8089560)               ; call prim_cons
  %cloptr8094155 = inttoptr i64 %a8085851 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094156 = getelementptr inbounds i64, i64* %cloptr8094155, i64 0             ; &cloptr8094155[0]
  %f8094158 = load i64, i64* %i0ptr8094156, align 8                                  ; load; *i0ptr8094156
  %fptr8094157 = inttoptr i64 %f8094158 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094157(i64 %a8085851, i64 %rva8089559)             ; tail call
  ret void

else8094154:
  %arg8087232 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094159, i32 0, i32 0)); quoted string
  %retprim8086019 = call i64 @prim_halt(i64 %arg8087232)                             ; call prim_halt
  %arg8087234 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089564 = add i64 0, 0                                                         ; quoted ()
  %rva8089563 = call i64 @prim_cons(i64 %retprim8086019, i64 %rva8089564)            ; call prim_cons
  %rva8089562 = call i64 @prim_cons(i64 %arg8087234, i64 %rva8089563)                ; call prim_cons
  %cloptr8094160 = inttoptr i64 %cont8086008 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094161 = getelementptr inbounds i64, i64* %cloptr8094160, i64 0             ; &cloptr8094160[0]
  %f8094163 = load i64, i64* %i0ptr8094161, align 8                                  ; load; *i0ptr8094161
  %fptr8094162 = inttoptr i64 %f8094163 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094162(i64 %cont8086008, i64 %rva8089562)          ; tail call
  ret void
}


define void @lam8092254(i64 %env8092255, i64 %rvp8089558) {
  %envptr8094164 = inttoptr i64 %env8092255 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094165 = getelementptr inbounds i64, i64* %envptr8094164, i64 3            ; &envptr8094164[3]
  %o00$f = load i64, i64* %envptr8094165, align 8                                    ; load; *envptr8094165
  %envptr8094166 = inttoptr i64 %env8092255 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094167 = getelementptr inbounds i64, i64* %envptr8094166, i64 2            ; &envptr8094166[2]
  %syN$_37wind_45stack = load i64, i64* %envptr8094167, align 8                      ; load; *envptr8094167
  %envptr8094168 = inttoptr i64 %env8092255 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094169 = getelementptr inbounds i64, i64* %envptr8094168, i64 1            ; &envptr8094168[1]
  %pHq$tail = load i64, i64* %envptr8094169, align 8                                 ; load; *envptr8094169
  %cont8086012 = call i64 @prim_car(i64 %rvp8089558)                                 ; call prim_car
  %rvp8089557 = call i64 @prim_cdr(i64 %rvp8089558)                                  ; call prim_cdr
  %Hil$l = call i64 @prim_car(i64 %rvp8089557)                                       ; call prim_car
  %na8089501 = call i64 @prim_cdr(i64 %rvp8089557)                                   ; call prim_cdr
  %a8085838 = call i64 @prim_eq_63(i64 %Hil$l, i64 %pHq$tail)                        ; call prim_eq_63
  %a8085839 = call i64 @prim_not(i64 %a8085838)                                      ; call prim_not
  %cmp8094170 = icmp eq i64 %a8085839, 15                                            ; false?
  br i1 %cmp8094170, label %else8094172, label %then8094171                          ; if

then8094171:
  %arg8087159 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085840 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8087159)               ; call prim_vector_45ref
  %a8085841 = call i64 @prim_procedure_63(i64 %a8085840)                             ; call prim_procedure_63
  %cmp8094173 = icmp eq i64 %a8085841, 15                                            ; false?
  br i1 %cmp8094173, label %else8094175, label %then8094174                          ; if

then8094174:
  %arg8087162 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085842 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8087162)               ; call prim_vector_45ref
  %a8085843 = call i64 @prim_cdr(i64 %Hil$l)                                         ; call prim_cdr
  %cloptr8094176 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094178 = getelementptr inbounds i64, i64* %cloptr8094176, i64 1              ; &eptr8094178[1]
  %eptr8094179 = getelementptr inbounds i64, i64* %cloptr8094176, i64 2              ; &eptr8094179[2]
  %eptr8094180 = getelementptr inbounds i64, i64* %cloptr8094176, i64 3              ; &eptr8094180[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094178                                  ; *eptr8094178 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094179                                          ; *eptr8094179 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094180                                                ; *eptr8094180 = %Hil$l
  %eptr8094177 = getelementptr inbounds i64, i64* %cloptr8094176, i64 0              ; &cloptr8094176[0]
  %f8094181 = ptrtoint void(i64,i64)* @lam8092229 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094181, i64* %eptr8094177                                             ; store fptr
  %arg8087166 = ptrtoint i64* %cloptr8094176 to i64                                  ; closure cast; i64* -> i64
  %rva8089527 = add i64 0, 0                                                         ; quoted ()
  %rva8089526 = call i64 @prim_cons(i64 %a8085843, i64 %rva8089527)                  ; call prim_cons
  %rva8089525 = call i64 @prim_cons(i64 %arg8087166, i64 %rva8089526)                ; call prim_cons
  %cloptr8094182 = inttoptr i64 %a8085842 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094183 = getelementptr inbounds i64, i64* %cloptr8094182, i64 0             ; &cloptr8094182[0]
  %f8094185 = load i64, i64* %i0ptr8094183, align 8                                  ; load; *i0ptr8094183
  %fptr8094184 = inttoptr i64 %f8094185 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094184(i64 %a8085842, i64 %rva8089525)             ; tail call
  ret void

else8094175:
  %arg8087191 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094186, i32 0, i32 0)); quoted string
  %retprim8086017 = call i64 @prim_halt(i64 %arg8087191)                             ; call prim_halt
  %cloptr8094187 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094189 = getelementptr inbounds i64, i64* %cloptr8094187, i64 1              ; &eptr8094189[1]
  %eptr8094190 = getelementptr inbounds i64, i64* %cloptr8094187, i64 2              ; &eptr8094190[2]
  %eptr8094191 = getelementptr inbounds i64, i64* %cloptr8094187, i64 3              ; &eptr8094191[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094189                                  ; *eptr8094189 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094190                                          ; *eptr8094190 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094191                                                ; *eptr8094191 = %Hil$l
  %eptr8094188 = getelementptr inbounds i64, i64* %cloptr8094187, i64 0              ; &cloptr8094187[0]
  %f8094192 = ptrtoint void(i64,i64)* @lam8092248 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094192, i64* %eptr8094188                                             ; store fptr
  %arg8087194 = ptrtoint i64* %cloptr8094187 to i64                                  ; closure cast; i64* -> i64
  %arg8087193 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089553 = add i64 0, 0                                                         ; quoted ()
  %rva8089552 = call i64 @prim_cons(i64 %retprim8086017, i64 %rva8089553)            ; call prim_cons
  %rva8089551 = call i64 @prim_cons(i64 %arg8087193, i64 %rva8089552)                ; call prim_cons
  %cloptr8094193 = inttoptr i64 %arg8087194 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094194 = getelementptr inbounds i64, i64* %cloptr8094193, i64 0             ; &cloptr8094193[0]
  %f8094196 = load i64, i64* %i0ptr8094194, align 8                                  ; load; *i0ptr8094194
  %fptr8094195 = inttoptr i64 %f8094196 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094195(i64 %arg8087194, i64 %rva8089551)           ; tail call
  ret void

else8094172:
  %retprim8086018 = call i64 @prim_void()                                            ; call prim_void
  %arg8087219 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089556 = add i64 0, 0                                                         ; quoted ()
  %rva8089555 = call i64 @prim_cons(i64 %retprim8086018, i64 %rva8089556)            ; call prim_cons
  %rva8089554 = call i64 @prim_cons(i64 %arg8087219, i64 %rva8089555)                ; call prim_cons
  %cloptr8094197 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094198 = getelementptr inbounds i64, i64* %cloptr8094197, i64 0             ; &cloptr8094197[0]
  %f8094200 = load i64, i64* %i0ptr8094198, align 8                                  ; load; *i0ptr8094198
  %fptr8094199 = inttoptr i64 %f8094200 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094199(i64 %cont8086012, i64 %rva8089554)          ; tail call
  ret void
}


define void @lam8092248(i64 %env8092249, i64 %rvp8089550) {
  %envptr8094201 = inttoptr i64 %env8092249 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094202 = getelementptr inbounds i64, i64* %envptr8094201, i64 3            ; &envptr8094201[3]
  %Hil$l = load i64, i64* %envptr8094202, align 8                                    ; load; *envptr8094202
  %envptr8094203 = inttoptr i64 %env8092249 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094204 = getelementptr inbounds i64, i64* %envptr8094203, i64 2            ; &envptr8094203[2]
  %cont8086012 = load i64, i64* %envptr8094204, align 8                              ; load; *envptr8094204
  %envptr8094205 = inttoptr i64 %env8092249 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094206 = getelementptr inbounds i64, i64* %envptr8094205, i64 1            ; &envptr8094205[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094206, align 8                      ; load; *envptr8094206
  %_958086013 = call i64 @prim_car(i64 %rvp8089550)                                  ; call prim_car
  %rvp8089549 = call i64 @prim_cdr(i64 %rvp8089550)                                  ; call prim_cdr
  %p45$_95t = call i64 @prim_car(i64 %rvp8089549)                                    ; call prim_car
  %na8089529 = call i64 @prim_cdr(i64 %rvp8089549)                                   ; call prim_cdr
  %a8085844 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085845 = call i64 @prim_car(i64 %a8085844)                                      ; call prim_car
  %a8085846 = call i64 @prim_procedure_63(i64 %a8085845)                             ; call prim_procedure_63
  %cmp8094207 = icmp eq i64 %a8085846, 15                                            ; false?
  br i1 %cmp8094207, label %else8094209, label %then8094208                          ; if

then8094208:
  %a8085847 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085848 = call i64 @prim_car(i64 %a8085847)                                      ; call prim_car
  %cloptr8094210 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094212 = getelementptr inbounds i64, i64* %cloptr8094210, i64 1              ; &eptr8094212[1]
  %eptr8094213 = getelementptr inbounds i64, i64* %cloptr8094210, i64 2              ; &eptr8094213[2]
  %eptr8094214 = getelementptr inbounds i64, i64* %cloptr8094210, i64 3              ; &eptr8094214[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094212                                  ; *eptr8094212 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094213                                          ; *eptr8094213 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094214                                                ; *eptr8094214 = %Hil$l
  %eptr8094211 = getelementptr inbounds i64, i64* %cloptr8094210, i64 0              ; &cloptr8094210[0]
  %f8094215 = ptrtoint void(i64,i64)* @lam8092238 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094215, i64* %eptr8094211                                             ; store fptr
  %arg8087200 = ptrtoint i64* %cloptr8094210 to i64                                  ; closure cast; i64* -> i64
  %rva8089538 = add i64 0, 0                                                         ; quoted ()
  %rva8089537 = call i64 @prim_cons(i64 %arg8087200, i64 %rva8089538)                ; call prim_cons
  %cloptr8094216 = inttoptr i64 %a8085848 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094217 = getelementptr inbounds i64, i64* %cloptr8094216, i64 0             ; &cloptr8094216[0]
  %f8094219 = load i64, i64* %i0ptr8094217, align 8                                  ; load; *i0ptr8094217
  %fptr8094218 = inttoptr i64 %f8094219 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094218(i64 %a8085848, i64 %rva8089537)             ; tail call
  ret void

else8094209:
  %arg8087208 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094220, i32 0, i32 0)); quoted string
  %retprim8086016 = call i64 @prim_halt(i64 %arg8087208)                             ; call prim_halt
  %cloptr8094221 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094223 = getelementptr inbounds i64, i64* %cloptr8094221, i64 1              ; &eptr8094223[1]
  %eptr8094224 = getelementptr inbounds i64, i64* %cloptr8094221, i64 2              ; &eptr8094224[2]
  %eptr8094225 = getelementptr inbounds i64, i64* %cloptr8094221, i64 3              ; &eptr8094225[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094223                                  ; *eptr8094223 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094224                                          ; *eptr8094224 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094225                                                ; *eptr8094225 = %Hil$l
  %eptr8094222 = getelementptr inbounds i64, i64* %cloptr8094221, i64 0              ; &cloptr8094221[0]
  %f8094226 = ptrtoint void(i64,i64)* @lam8092245 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094226, i64* %eptr8094222                                             ; store fptr
  %arg8087211 = ptrtoint i64* %cloptr8094221 to i64                                  ; closure cast; i64* -> i64
  %arg8087210 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089548 = add i64 0, 0                                                         ; quoted ()
  %rva8089547 = call i64 @prim_cons(i64 %retprim8086016, i64 %rva8089548)            ; call prim_cons
  %rva8089546 = call i64 @prim_cons(i64 %arg8087210, i64 %rva8089547)                ; call prim_cons
  %cloptr8094227 = inttoptr i64 %arg8087211 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094228 = getelementptr inbounds i64, i64* %cloptr8094227, i64 0             ; &cloptr8094227[0]
  %f8094230 = load i64, i64* %i0ptr8094228, align 8                                  ; load; *i0ptr8094228
  %fptr8094229 = inttoptr i64 %f8094230 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094229(i64 %arg8087211, i64 %rva8089546)           ; tail call
  ret void
}


define void @lam8092245(i64 %env8092246, i64 %rvp8089545) {
  %envptr8094231 = inttoptr i64 %env8092246 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094232 = getelementptr inbounds i64, i64* %envptr8094231, i64 3            ; &envptr8094231[3]
  %Hil$l = load i64, i64* %envptr8094232, align 8                                    ; load; *envptr8094232
  %envptr8094233 = inttoptr i64 %env8092246 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094234 = getelementptr inbounds i64, i64* %envptr8094233, i64 2            ; &envptr8094233[2]
  %cont8086012 = load i64, i64* %envptr8094234, align 8                              ; load; *envptr8094234
  %envptr8094235 = inttoptr i64 %env8092246 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094236 = getelementptr inbounds i64, i64* %envptr8094235, i64 1            ; &envptr8094235[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094236, align 8                      ; load; *envptr8094236
  %_958086014 = call i64 @prim_car(i64 %rvp8089545)                                  ; call prim_car
  %rvp8089544 = call i64 @prim_cdr(i64 %rvp8089545)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089544)                                    ; call prim_car
  %na8089540 = call i64 @prim_cdr(i64 %rvp8089544)                                   ; call prim_cdr
  %arg8087213 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087213, i64 %Hil$l); call prim_vector_45set_33
  %arg8087216 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089543 = add i64 0, 0                                                         ; quoted ()
  %rva8089542 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089543)            ; call prim_cons
  %rva8089541 = call i64 @prim_cons(i64 %arg8087216, i64 %rva8089542)                ; call prim_cons
  %cloptr8094237 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094238 = getelementptr inbounds i64, i64* %cloptr8094237, i64 0             ; &cloptr8094237[0]
  %f8094240 = load i64, i64* %i0ptr8094238, align 8                                  ; load; *i0ptr8094238
  %fptr8094239 = inttoptr i64 %f8094240 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094239(i64 %cont8086012, i64 %rva8089541)          ; tail call
  ret void
}


define void @lam8092238(i64 %env8092239, i64 %rvp8089536) {
  %envptr8094241 = inttoptr i64 %env8092239 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094242 = getelementptr inbounds i64, i64* %envptr8094241, i64 3            ; &envptr8094241[3]
  %Hil$l = load i64, i64* %envptr8094242, align 8                                    ; load; *envptr8094242
  %envptr8094243 = inttoptr i64 %env8092239 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094244 = getelementptr inbounds i64, i64* %envptr8094243, i64 2            ; &envptr8094243[2]
  %cont8086012 = load i64, i64* %envptr8094244, align 8                              ; load; *envptr8094244
  %envptr8094245 = inttoptr i64 %env8092239 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094246 = getelementptr inbounds i64, i64* %envptr8094245, i64 1            ; &envptr8094245[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094246, align 8                      ; load; *envptr8094246
  %_958086014 = call i64 @prim_car(i64 %rvp8089536)                                  ; call prim_car
  %rvp8089535 = call i64 @prim_cdr(i64 %rvp8089536)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089535)                                    ; call prim_car
  %na8089531 = call i64 @prim_cdr(i64 %rvp8089535)                                   ; call prim_cdr
  %arg8087203 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087203, i64 %Hil$l); call prim_vector_45set_33
  %arg8087206 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089534 = add i64 0, 0                                                         ; quoted ()
  %rva8089533 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089534)            ; call prim_cons
  %rva8089532 = call i64 @prim_cons(i64 %arg8087206, i64 %rva8089533)                ; call prim_cons
  %cloptr8094247 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094248 = getelementptr inbounds i64, i64* %cloptr8094247, i64 0             ; &cloptr8094247[0]
  %f8094250 = load i64, i64* %i0ptr8094248, align 8                                  ; load; *i0ptr8094248
  %fptr8094249 = inttoptr i64 %f8094250 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094249(i64 %cont8086012, i64 %rva8089532)          ; tail call
  ret void
}


define void @lam8092229(i64 %env8092230, i64 %rvp8089524) {
  %envptr8094251 = inttoptr i64 %env8092230 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094252 = getelementptr inbounds i64, i64* %envptr8094251, i64 3            ; &envptr8094251[3]
  %Hil$l = load i64, i64* %envptr8094252, align 8                                    ; load; *envptr8094252
  %envptr8094253 = inttoptr i64 %env8092230 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094254 = getelementptr inbounds i64, i64* %envptr8094253, i64 2            ; &envptr8094253[2]
  %cont8086012 = load i64, i64* %envptr8094254, align 8                              ; load; *envptr8094254
  %envptr8094255 = inttoptr i64 %env8092230 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094256 = getelementptr inbounds i64, i64* %envptr8094255, i64 1            ; &envptr8094255[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094256, align 8                      ; load; *envptr8094256
  %_958086013 = call i64 @prim_car(i64 %rvp8089524)                                  ; call prim_car
  %rvp8089523 = call i64 @prim_cdr(i64 %rvp8089524)                                  ; call prim_cdr
  %p45$_95t = call i64 @prim_car(i64 %rvp8089523)                                    ; call prim_car
  %na8089503 = call i64 @prim_cdr(i64 %rvp8089523)                                   ; call prim_cdr
  %a8085844 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085845 = call i64 @prim_car(i64 %a8085844)                                      ; call prim_car
  %a8085846 = call i64 @prim_procedure_63(i64 %a8085845)                             ; call prim_procedure_63
  %cmp8094257 = icmp eq i64 %a8085846, 15                                            ; false?
  br i1 %cmp8094257, label %else8094259, label %then8094258                          ; if

then8094258:
  %a8085847 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085848 = call i64 @prim_car(i64 %a8085847)                                      ; call prim_car
  %cloptr8094260 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094262 = getelementptr inbounds i64, i64* %cloptr8094260, i64 1              ; &eptr8094262[1]
  %eptr8094263 = getelementptr inbounds i64, i64* %cloptr8094260, i64 2              ; &eptr8094263[2]
  %eptr8094264 = getelementptr inbounds i64, i64* %cloptr8094260, i64 3              ; &eptr8094264[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094262                                  ; *eptr8094262 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094263                                          ; *eptr8094263 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094264                                                ; *eptr8094264 = %Hil$l
  %eptr8094261 = getelementptr inbounds i64, i64* %cloptr8094260, i64 0              ; &cloptr8094260[0]
  %f8094265 = ptrtoint void(i64,i64)* @lam8092219 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094265, i64* %eptr8094261                                             ; store fptr
  %arg8087173 = ptrtoint i64* %cloptr8094260 to i64                                  ; closure cast; i64* -> i64
  %rva8089512 = add i64 0, 0                                                         ; quoted ()
  %rva8089511 = call i64 @prim_cons(i64 %arg8087173, i64 %rva8089512)                ; call prim_cons
  %cloptr8094266 = inttoptr i64 %a8085848 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094267 = getelementptr inbounds i64, i64* %cloptr8094266, i64 0             ; &cloptr8094266[0]
  %f8094269 = load i64, i64* %i0ptr8094267, align 8                                  ; load; *i0ptr8094267
  %fptr8094268 = inttoptr i64 %f8094269 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094268(i64 %a8085848, i64 %rva8089511)             ; tail call
  ret void

else8094259:
  %arg8087181 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094270, i32 0, i32 0)); quoted string
  %retprim8086016 = call i64 @prim_halt(i64 %arg8087181)                             ; call prim_halt
  %cloptr8094271 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094273 = getelementptr inbounds i64, i64* %cloptr8094271, i64 1              ; &eptr8094273[1]
  %eptr8094274 = getelementptr inbounds i64, i64* %cloptr8094271, i64 2              ; &eptr8094274[2]
  %eptr8094275 = getelementptr inbounds i64, i64* %cloptr8094271, i64 3              ; &eptr8094275[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094273                                  ; *eptr8094273 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094274                                          ; *eptr8094274 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094275                                                ; *eptr8094275 = %Hil$l
  %eptr8094272 = getelementptr inbounds i64, i64* %cloptr8094271, i64 0              ; &cloptr8094271[0]
  %f8094276 = ptrtoint void(i64,i64)* @lam8092226 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094276, i64* %eptr8094272                                             ; store fptr
  %arg8087184 = ptrtoint i64* %cloptr8094271 to i64                                  ; closure cast; i64* -> i64
  %arg8087183 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089522 = add i64 0, 0                                                         ; quoted ()
  %rva8089521 = call i64 @prim_cons(i64 %retprim8086016, i64 %rva8089522)            ; call prim_cons
  %rva8089520 = call i64 @prim_cons(i64 %arg8087183, i64 %rva8089521)                ; call prim_cons
  %cloptr8094277 = inttoptr i64 %arg8087184 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094278 = getelementptr inbounds i64, i64* %cloptr8094277, i64 0             ; &cloptr8094277[0]
  %f8094280 = load i64, i64* %i0ptr8094278, align 8                                  ; load; *i0ptr8094278
  %fptr8094279 = inttoptr i64 %f8094280 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094279(i64 %arg8087184, i64 %rva8089520)           ; tail call
  ret void
}


define void @lam8092226(i64 %env8092227, i64 %rvp8089519) {
  %envptr8094281 = inttoptr i64 %env8092227 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094282 = getelementptr inbounds i64, i64* %envptr8094281, i64 3            ; &envptr8094281[3]
  %Hil$l = load i64, i64* %envptr8094282, align 8                                    ; load; *envptr8094282
  %envptr8094283 = inttoptr i64 %env8092227 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094284 = getelementptr inbounds i64, i64* %envptr8094283, i64 2            ; &envptr8094283[2]
  %cont8086012 = load i64, i64* %envptr8094284, align 8                              ; load; *envptr8094284
  %envptr8094285 = inttoptr i64 %env8092227 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094286 = getelementptr inbounds i64, i64* %envptr8094285, i64 1            ; &envptr8094285[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094286, align 8                      ; load; *envptr8094286
  %_958086014 = call i64 @prim_car(i64 %rvp8089519)                                  ; call prim_car
  %rvp8089518 = call i64 @prim_cdr(i64 %rvp8089519)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089518)                                    ; call prim_car
  %na8089514 = call i64 @prim_cdr(i64 %rvp8089518)                                   ; call prim_cdr
  %arg8087186 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087186, i64 %Hil$l); call prim_vector_45set_33
  %arg8087189 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089517 = add i64 0, 0                                                         ; quoted ()
  %rva8089516 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089517)            ; call prim_cons
  %rva8089515 = call i64 @prim_cons(i64 %arg8087189, i64 %rva8089516)                ; call prim_cons
  %cloptr8094287 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094288 = getelementptr inbounds i64, i64* %cloptr8094287, i64 0             ; &cloptr8094287[0]
  %f8094290 = load i64, i64* %i0ptr8094288, align 8                                  ; load; *i0ptr8094288
  %fptr8094289 = inttoptr i64 %f8094290 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094289(i64 %cont8086012, i64 %rva8089515)          ; tail call
  ret void
}


define void @lam8092219(i64 %env8092220, i64 %rvp8089510) {
  %envptr8094291 = inttoptr i64 %env8092220 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094292 = getelementptr inbounds i64, i64* %envptr8094291, i64 3            ; &envptr8094291[3]
  %Hil$l = load i64, i64* %envptr8094292, align 8                                    ; load; *envptr8094292
  %envptr8094293 = inttoptr i64 %env8092220 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094294 = getelementptr inbounds i64, i64* %envptr8094293, i64 2            ; &envptr8094293[2]
  %cont8086012 = load i64, i64* %envptr8094294, align 8                              ; load; *envptr8094294
  %envptr8094295 = inttoptr i64 %env8092220 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094296 = getelementptr inbounds i64, i64* %envptr8094295, i64 1            ; &envptr8094295[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094296, align 8                      ; load; *envptr8094296
  %_958086014 = call i64 @prim_car(i64 %rvp8089510)                                  ; call prim_car
  %rvp8089509 = call i64 @prim_cdr(i64 %rvp8089510)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089509)                                    ; call prim_car
  %na8089505 = call i64 @prim_cdr(i64 %rvp8089509)                                   ; call prim_cdr
  %arg8087176 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087176, i64 %Hil$l); call prim_vector_45set_33
  %arg8087179 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089508 = add i64 0, 0                                                         ; quoted ()
  %rva8089507 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089508)            ; call prim_cons
  %rva8089506 = call i64 @prim_cons(i64 %arg8087179, i64 %rva8089507)                ; call prim_cons
  %cloptr8094297 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094298 = getelementptr inbounds i64, i64* %cloptr8094297, i64 0             ; &cloptr8094297[0]
  %f8094300 = load i64, i64* %i0ptr8094298, align 8                                  ; load; *i0ptr8094298
  %fptr8094299 = inttoptr i64 %f8094300 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094299(i64 %cont8086012, i64 %rva8089506)          ; tail call
  ret void
}


define void @lam8092198(i64 %env8092199, i64 %rvp8089487) {
  %envptr8094301 = inttoptr i64 %env8092199 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094302 = getelementptr inbounds i64, i64* %envptr8094301, i64 4            ; &envptr8094301[4]
  %cont8086008 = load i64, i64* %envptr8094302, align 8                              ; load; *envptr8094302
  %envptr8094303 = inttoptr i64 %env8092199 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094304 = getelementptr inbounds i64, i64* %envptr8094303, i64 3            ; &envptr8094303[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094304, align 8                      ; load; *envptr8094304
  %envptr8094305 = inttoptr i64 %env8092199 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094306 = getelementptr inbounds i64, i64* %envptr8094305, i64 2            ; &envptr8094305[2]
  %L3s$new = load i64, i64* %envptr8094306, align 8                                  ; load; *envptr8094306
  %envptr8094307 = inttoptr i64 %env8092199 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094308 = getelementptr inbounds i64, i64* %envptr8094307, i64 1            ; &envptr8094307[1]
  %pHq$tail = load i64, i64* %envptr8094308, align 8                                 ; load; *envptr8094308
  %_958086010 = call i64 @prim_car(i64 %rvp8089487)                                  ; call prim_car
  %rvp8089486 = call i64 @prim_cdr(i64 %rvp8089487)                                  ; call prim_cdr
  %PNb$_95t = call i64 @prim_car(i64 %rvp8089486)                                    ; call prim_car
  %na8089404 = call i64 @prim_cdr(i64 %rvp8089486)                                   ; call prim_cdr
  %cloptr8094309 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8094310 = getelementptr inbounds i64, i64* %cloptr8094309, i64 0              ; &cloptr8094309[0]
  %f8094311 = ptrtoint void(i64,i64)* @lam8092196 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094311, i64* %eptr8094310                                             ; store fptr
  %arg8087049 = ptrtoint i64* %cloptr8094309 to i64                                  ; closure cast; i64* -> i64
  %cloptr8094312 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094314 = getelementptr inbounds i64, i64* %cloptr8094312, i64 1              ; &eptr8094314[1]
  %eptr8094315 = getelementptr inbounds i64, i64* %cloptr8094312, i64 2              ; &eptr8094315[2]
  %eptr8094316 = getelementptr inbounds i64, i64* %cloptr8094312, i64 3              ; &eptr8094316[3]
  %eptr8094317 = getelementptr inbounds i64, i64* %cloptr8094312, i64 4              ; &eptr8094317[4]
  store i64 %pHq$tail, i64* %eptr8094314                                             ; *eptr8094314 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094315                                              ; *eptr8094315 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094316                                  ; *eptr8094316 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094317                                          ; *eptr8094317 = %cont8086008
  %eptr8094313 = getelementptr inbounds i64, i64* %cloptr8094312, i64 0              ; &cloptr8094312[0]
  %f8094318 = ptrtoint void(i64,i64)* @lam8092192 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094318, i64* %eptr8094313                                             ; store fptr
  %arg8087048 = ptrtoint i64* %cloptr8094312 to i64                                  ; closure cast; i64* -> i64
  %rva8089485 = add i64 0, 0                                                         ; quoted ()
  %rva8089484 = call i64 @prim_cons(i64 %arg8087048, i64 %rva8089485)                ; call prim_cons
  %cloptr8094319 = inttoptr i64 %arg8087049 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094320 = getelementptr inbounds i64, i64* %cloptr8094319, i64 0             ; &cloptr8094319[0]
  %f8094322 = load i64, i64* %i0ptr8094320, align 8                                  ; load; *i0ptr8094320
  %fptr8094321 = inttoptr i64 %f8094322 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094321(i64 %arg8087049, i64 %rva8089484)           ; tail call
  ret void
}


define void @lam8092196(i64 %env8092197, i64 %sAO$lst8086023) {
  %cont8086022 = call i64 @prim_car(i64 %sAO$lst8086023)                             ; call prim_car
  %sAO$lst = call i64 @prim_cdr(i64 %sAO$lst8086023)                                 ; call prim_cdr
  %arg8087053 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089407 = add i64 0, 0                                                         ; quoted ()
  %rva8089406 = call i64 @prim_cons(i64 %sAO$lst, i64 %rva8089407)                   ; call prim_cons
  %rva8089405 = call i64 @prim_cons(i64 %arg8087053, i64 %rva8089406)                ; call prim_cons
  %cloptr8094323 = inttoptr i64 %cont8086022 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094324 = getelementptr inbounds i64, i64* %cloptr8094323, i64 0             ; &cloptr8094323[0]
  %f8094326 = load i64, i64* %i0ptr8094324, align 8                                  ; load; *i0ptr8094324
  %fptr8094325 = inttoptr i64 %f8094326 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094325(i64 %cont8086022, i64 %rva8089405)          ; tail call
  ret void
}


define void @lam8092192(i64 %env8092193, i64 %rvp8089483) {
  %envptr8094327 = inttoptr i64 %env8092193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094328 = getelementptr inbounds i64, i64* %envptr8094327, i64 4            ; &envptr8094327[4]
  %cont8086008 = load i64, i64* %envptr8094328, align 8                              ; load; *envptr8094328
  %envptr8094329 = inttoptr i64 %env8092193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094330 = getelementptr inbounds i64, i64* %envptr8094329, i64 3            ; &envptr8094329[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094330, align 8                      ; load; *envptr8094330
  %envptr8094331 = inttoptr i64 %env8092193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094332 = getelementptr inbounds i64, i64* %envptr8094331, i64 2            ; &envptr8094331[2]
  %L3s$new = load i64, i64* %envptr8094332, align 8                                  ; load; *envptr8094332
  %envptr8094333 = inttoptr i64 %env8092193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094334 = getelementptr inbounds i64, i64* %envptr8094333, i64 1            ; &envptr8094333[1]
  %pHq$tail = load i64, i64* %envptr8094334, align 8                                 ; load; *envptr8094334
  %_958086020 = call i64 @prim_car(i64 %rvp8089483)                                  ; call prim_car
  %rvp8089482 = call i64 @prim_cdr(i64 %rvp8089483)                                  ; call prim_cdr
  %a8085837 = call i64 @prim_car(i64 %rvp8089482)                                    ; call prim_car
  %na8089409 = call i64 @prim_cdr(i64 %rvp8089482)                                   ; call prim_cdr
  %arg8087056 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086021 = call i64 @prim_make_45vector(i64 %arg8087056, i64 %a8085837)     ; call prim_make_45vector
  %cloptr8094335 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094337 = getelementptr inbounds i64, i64* %cloptr8094335, i64 1              ; &eptr8094337[1]
  %eptr8094338 = getelementptr inbounds i64, i64* %cloptr8094335, i64 2              ; &eptr8094338[2]
  %eptr8094339 = getelementptr inbounds i64, i64* %cloptr8094335, i64 3              ; &eptr8094339[3]
  %eptr8094340 = getelementptr inbounds i64, i64* %cloptr8094335, i64 4              ; &eptr8094340[4]
  store i64 %pHq$tail, i64* %eptr8094337                                             ; *eptr8094337 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094338                                              ; *eptr8094338 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094339                                  ; *eptr8094339 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094340                                          ; *eptr8094340 = %cont8086008
  %eptr8094336 = getelementptr inbounds i64, i64* %cloptr8094335, i64 0              ; &cloptr8094335[0]
  %f8094341 = ptrtoint void(i64,i64)* @lam8092189 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094341, i64* %eptr8094336                                             ; store fptr
  %arg8087059 = ptrtoint i64* %cloptr8094335 to i64                                  ; closure cast; i64* -> i64
  %arg8087058 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089481 = add i64 0, 0                                                         ; quoted ()
  %rva8089480 = call i64 @prim_cons(i64 %retprim8086021, i64 %rva8089481)            ; call prim_cons
  %rva8089479 = call i64 @prim_cons(i64 %arg8087058, i64 %rva8089480)                ; call prim_cons
  %cloptr8094342 = inttoptr i64 %arg8087059 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094343 = getelementptr inbounds i64, i64* %cloptr8094342, i64 0             ; &cloptr8094342[0]
  %f8094345 = load i64, i64* %i0ptr8094343, align 8                                  ; load; *i0ptr8094343
  %fptr8094344 = inttoptr i64 %f8094345 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094344(i64 %arg8087059, i64 %rva8089479)           ; tail call
  ret void
}


define void @lam8092189(i64 %env8092190, i64 %rvp8089478) {
  %envptr8094346 = inttoptr i64 %env8092190 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094347 = getelementptr inbounds i64, i64* %envptr8094346, i64 4            ; &envptr8094346[4]
  %cont8086008 = load i64, i64* %envptr8094347, align 8                              ; load; *envptr8094347
  %envptr8094348 = inttoptr i64 %env8092190 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094349 = getelementptr inbounds i64, i64* %envptr8094348, i64 3            ; &envptr8094348[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094349, align 8                      ; load; *envptr8094349
  %envptr8094350 = inttoptr i64 %env8092190 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094351 = getelementptr inbounds i64, i64* %envptr8094350, i64 2            ; &envptr8094350[2]
  %L3s$new = load i64, i64* %envptr8094351, align 8                                  ; load; *envptr8094351
  %envptr8094352 = inttoptr i64 %env8092190 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094353 = getelementptr inbounds i64, i64* %envptr8094352, i64 1            ; &envptr8094352[1]
  %pHq$tail = load i64, i64* %envptr8094353, align 8                                 ; load; *envptr8094353
  %_958086011 = call i64 @prim_car(i64 %rvp8089478)                                  ; call prim_car
  %rvp8089477 = call i64 @prim_cdr(i64 %rvp8089478)                                  ; call prim_cdr
  %o00$f = call i64 @prim_car(i64 %rvp8089477)                                       ; call prim_car
  %na8089411 = call i64 @prim_cdr(i64 %rvp8089477)                                   ; call prim_cdr
  %cloptr8094354 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094356 = getelementptr inbounds i64, i64* %cloptr8094354, i64 1              ; &eptr8094356[1]
  %eptr8094357 = getelementptr inbounds i64, i64* %cloptr8094354, i64 2              ; &eptr8094357[2]
  %eptr8094358 = getelementptr inbounds i64, i64* %cloptr8094354, i64 3              ; &eptr8094358[3]
  store i64 %pHq$tail, i64* %eptr8094356                                             ; *eptr8094356 = %pHq$tail
  store i64 %syN$_37wind_45stack, i64* %eptr8094357                                  ; *eptr8094357 = %syN$_37wind_45stack
  store i64 %o00$f, i64* %eptr8094358                                                ; *eptr8094358 = %o00$f
  %eptr8094355 = getelementptr inbounds i64, i64* %cloptr8094354, i64 0              ; &cloptr8094354[0]
  %f8094359 = ptrtoint void(i64,i64)* @lam8092187 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094359, i64* %eptr8094355                                             ; store fptr
  %mxx$f8085708 = ptrtoint i64* %cloptr8094354 to i64                                ; closure cast; i64* -> i64
  %arg8087126 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %vT1$_95t = call i64 @prim_vector_45set_33(i64 %o00$f, i64 %arg8087126, i64 %mxx$f8085708); call prim_vector_45set_33
  %arg8087128 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085849 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8087128)               ; call prim_vector_45ref
  %a8085850 = call i64 @prim_procedure_63(i64 %a8085849)                             ; call prim_procedure_63
  %cmp8094360 = icmp eq i64 %a8085850, 15                                            ; false?
  br i1 %cmp8094360, label %else8094362, label %then8094361                          ; if

then8094361:
  %arg8087131 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085851 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8087131)               ; call prim_vector_45ref
  %rva8089473 = add i64 0, 0                                                         ; quoted ()
  %rva8089472 = call i64 @prim_cons(i64 %L3s$new, i64 %rva8089473)                   ; call prim_cons
  %rva8089471 = call i64 @prim_cons(i64 %cont8086008, i64 %rva8089472)               ; call prim_cons
  %cloptr8094363 = inttoptr i64 %a8085851 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094364 = getelementptr inbounds i64, i64* %cloptr8094363, i64 0             ; &cloptr8094363[0]
  %f8094366 = load i64, i64* %i0ptr8094364, align 8                                  ; load; *i0ptr8094364
  %fptr8094365 = inttoptr i64 %f8094366 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094365(i64 %a8085851, i64 %rva8089471)             ; tail call
  ret void

else8094362:
  %arg8087136 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094367, i32 0, i32 0)); quoted string
  %retprim8086019 = call i64 @prim_halt(i64 %arg8087136)                             ; call prim_halt
  %arg8087138 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089476 = add i64 0, 0                                                         ; quoted ()
  %rva8089475 = call i64 @prim_cons(i64 %retprim8086019, i64 %rva8089476)            ; call prim_cons
  %rva8089474 = call i64 @prim_cons(i64 %arg8087138, i64 %rva8089475)                ; call prim_cons
  %cloptr8094368 = inttoptr i64 %cont8086008 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094369 = getelementptr inbounds i64, i64* %cloptr8094368, i64 0             ; &cloptr8094368[0]
  %f8094371 = load i64, i64* %i0ptr8094369, align 8                                  ; load; *i0ptr8094369
  %fptr8094370 = inttoptr i64 %f8094371 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094370(i64 %cont8086008, i64 %rva8089474)          ; tail call
  ret void
}


define void @lam8092187(i64 %env8092188, i64 %rvp8089470) {
  %envptr8094372 = inttoptr i64 %env8092188 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094373 = getelementptr inbounds i64, i64* %envptr8094372, i64 3            ; &envptr8094372[3]
  %o00$f = load i64, i64* %envptr8094373, align 8                                    ; load; *envptr8094373
  %envptr8094374 = inttoptr i64 %env8092188 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094375 = getelementptr inbounds i64, i64* %envptr8094374, i64 2            ; &envptr8094374[2]
  %syN$_37wind_45stack = load i64, i64* %envptr8094375, align 8                      ; load; *envptr8094375
  %envptr8094376 = inttoptr i64 %env8092188 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094377 = getelementptr inbounds i64, i64* %envptr8094376, i64 1            ; &envptr8094376[1]
  %pHq$tail = load i64, i64* %envptr8094377, align 8                                 ; load; *envptr8094377
  %cont8086012 = call i64 @prim_car(i64 %rvp8089470)                                 ; call prim_car
  %rvp8089469 = call i64 @prim_cdr(i64 %rvp8089470)                                  ; call prim_cdr
  %Hil$l = call i64 @prim_car(i64 %rvp8089469)                                       ; call prim_car
  %na8089413 = call i64 @prim_cdr(i64 %rvp8089469)                                   ; call prim_cdr
  %a8085838 = call i64 @prim_eq_63(i64 %Hil$l, i64 %pHq$tail)                        ; call prim_eq_63
  %a8085839 = call i64 @prim_not(i64 %a8085838)                                      ; call prim_not
  %cmp8094378 = icmp eq i64 %a8085839, 15                                            ; false?
  br i1 %cmp8094378, label %else8094380, label %then8094379                          ; if

then8094379:
  %arg8087063 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085840 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8087063)               ; call prim_vector_45ref
  %a8085841 = call i64 @prim_procedure_63(i64 %a8085840)                             ; call prim_procedure_63
  %cmp8094381 = icmp eq i64 %a8085841, 15                                            ; false?
  br i1 %cmp8094381, label %else8094383, label %then8094382                          ; if

then8094382:
  %arg8087066 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085842 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8087066)               ; call prim_vector_45ref
  %a8085843 = call i64 @prim_cdr(i64 %Hil$l)                                         ; call prim_cdr
  %cloptr8094384 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094386 = getelementptr inbounds i64, i64* %cloptr8094384, i64 1              ; &eptr8094386[1]
  %eptr8094387 = getelementptr inbounds i64, i64* %cloptr8094384, i64 2              ; &eptr8094387[2]
  %eptr8094388 = getelementptr inbounds i64, i64* %cloptr8094384, i64 3              ; &eptr8094388[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094386                                  ; *eptr8094386 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094387                                          ; *eptr8094387 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094388                                                ; *eptr8094388 = %Hil$l
  %eptr8094385 = getelementptr inbounds i64, i64* %cloptr8094384, i64 0              ; &cloptr8094384[0]
  %f8094389 = ptrtoint void(i64,i64)* @lam8092162 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094389, i64* %eptr8094385                                             ; store fptr
  %arg8087070 = ptrtoint i64* %cloptr8094384 to i64                                  ; closure cast; i64* -> i64
  %rva8089439 = add i64 0, 0                                                         ; quoted ()
  %rva8089438 = call i64 @prim_cons(i64 %a8085843, i64 %rva8089439)                  ; call prim_cons
  %rva8089437 = call i64 @prim_cons(i64 %arg8087070, i64 %rva8089438)                ; call prim_cons
  %cloptr8094390 = inttoptr i64 %a8085842 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094391 = getelementptr inbounds i64, i64* %cloptr8094390, i64 0             ; &cloptr8094390[0]
  %f8094393 = load i64, i64* %i0ptr8094391, align 8                                  ; load; *i0ptr8094391
  %fptr8094392 = inttoptr i64 %f8094393 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094392(i64 %a8085842, i64 %rva8089437)             ; tail call
  ret void

else8094383:
  %arg8087095 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094394, i32 0, i32 0)); quoted string
  %retprim8086017 = call i64 @prim_halt(i64 %arg8087095)                             ; call prim_halt
  %cloptr8094395 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094397 = getelementptr inbounds i64, i64* %cloptr8094395, i64 1              ; &eptr8094397[1]
  %eptr8094398 = getelementptr inbounds i64, i64* %cloptr8094395, i64 2              ; &eptr8094398[2]
  %eptr8094399 = getelementptr inbounds i64, i64* %cloptr8094395, i64 3              ; &eptr8094399[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094397                                  ; *eptr8094397 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094398                                          ; *eptr8094398 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094399                                                ; *eptr8094399 = %Hil$l
  %eptr8094396 = getelementptr inbounds i64, i64* %cloptr8094395, i64 0              ; &cloptr8094395[0]
  %f8094400 = ptrtoint void(i64,i64)* @lam8092181 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094400, i64* %eptr8094396                                             ; store fptr
  %arg8087098 = ptrtoint i64* %cloptr8094395 to i64                                  ; closure cast; i64* -> i64
  %arg8087097 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089465 = add i64 0, 0                                                         ; quoted ()
  %rva8089464 = call i64 @prim_cons(i64 %retprim8086017, i64 %rva8089465)            ; call prim_cons
  %rva8089463 = call i64 @prim_cons(i64 %arg8087097, i64 %rva8089464)                ; call prim_cons
  %cloptr8094401 = inttoptr i64 %arg8087098 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094402 = getelementptr inbounds i64, i64* %cloptr8094401, i64 0             ; &cloptr8094401[0]
  %f8094404 = load i64, i64* %i0ptr8094402, align 8                                  ; load; *i0ptr8094402
  %fptr8094403 = inttoptr i64 %f8094404 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094403(i64 %arg8087098, i64 %rva8089463)           ; tail call
  ret void

else8094380:
  %retprim8086018 = call i64 @prim_void()                                            ; call prim_void
  %arg8087123 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089468 = add i64 0, 0                                                         ; quoted ()
  %rva8089467 = call i64 @prim_cons(i64 %retprim8086018, i64 %rva8089468)            ; call prim_cons
  %rva8089466 = call i64 @prim_cons(i64 %arg8087123, i64 %rva8089467)                ; call prim_cons
  %cloptr8094405 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094406 = getelementptr inbounds i64, i64* %cloptr8094405, i64 0             ; &cloptr8094405[0]
  %f8094408 = load i64, i64* %i0ptr8094406, align 8                                  ; load; *i0ptr8094406
  %fptr8094407 = inttoptr i64 %f8094408 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094407(i64 %cont8086012, i64 %rva8089466)          ; tail call
  ret void
}


define void @lam8092181(i64 %env8092182, i64 %rvp8089462) {
  %envptr8094409 = inttoptr i64 %env8092182 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094410 = getelementptr inbounds i64, i64* %envptr8094409, i64 3            ; &envptr8094409[3]
  %Hil$l = load i64, i64* %envptr8094410, align 8                                    ; load; *envptr8094410
  %envptr8094411 = inttoptr i64 %env8092182 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094412 = getelementptr inbounds i64, i64* %envptr8094411, i64 2            ; &envptr8094411[2]
  %cont8086012 = load i64, i64* %envptr8094412, align 8                              ; load; *envptr8094412
  %envptr8094413 = inttoptr i64 %env8092182 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094414 = getelementptr inbounds i64, i64* %envptr8094413, i64 1            ; &envptr8094413[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094414, align 8                      ; load; *envptr8094414
  %_958086013 = call i64 @prim_car(i64 %rvp8089462)                                  ; call prim_car
  %rvp8089461 = call i64 @prim_cdr(i64 %rvp8089462)                                  ; call prim_cdr
  %p45$_95t = call i64 @prim_car(i64 %rvp8089461)                                    ; call prim_car
  %na8089441 = call i64 @prim_cdr(i64 %rvp8089461)                                   ; call prim_cdr
  %a8085844 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085845 = call i64 @prim_car(i64 %a8085844)                                      ; call prim_car
  %a8085846 = call i64 @prim_procedure_63(i64 %a8085845)                             ; call prim_procedure_63
  %cmp8094415 = icmp eq i64 %a8085846, 15                                            ; false?
  br i1 %cmp8094415, label %else8094417, label %then8094416                          ; if

then8094416:
  %a8085847 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085848 = call i64 @prim_car(i64 %a8085847)                                      ; call prim_car
  %cloptr8094418 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094420 = getelementptr inbounds i64, i64* %cloptr8094418, i64 1              ; &eptr8094420[1]
  %eptr8094421 = getelementptr inbounds i64, i64* %cloptr8094418, i64 2              ; &eptr8094421[2]
  %eptr8094422 = getelementptr inbounds i64, i64* %cloptr8094418, i64 3              ; &eptr8094422[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094420                                  ; *eptr8094420 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094421                                          ; *eptr8094421 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094422                                                ; *eptr8094422 = %Hil$l
  %eptr8094419 = getelementptr inbounds i64, i64* %cloptr8094418, i64 0              ; &cloptr8094418[0]
  %f8094423 = ptrtoint void(i64,i64)* @lam8092171 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094423, i64* %eptr8094419                                             ; store fptr
  %arg8087104 = ptrtoint i64* %cloptr8094418 to i64                                  ; closure cast; i64* -> i64
  %rva8089450 = add i64 0, 0                                                         ; quoted ()
  %rva8089449 = call i64 @prim_cons(i64 %arg8087104, i64 %rva8089450)                ; call prim_cons
  %cloptr8094424 = inttoptr i64 %a8085848 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094425 = getelementptr inbounds i64, i64* %cloptr8094424, i64 0             ; &cloptr8094424[0]
  %f8094427 = load i64, i64* %i0ptr8094425, align 8                                  ; load; *i0ptr8094425
  %fptr8094426 = inttoptr i64 %f8094427 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094426(i64 %a8085848, i64 %rva8089449)             ; tail call
  ret void

else8094417:
  %arg8087112 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094428, i32 0, i32 0)); quoted string
  %retprim8086016 = call i64 @prim_halt(i64 %arg8087112)                             ; call prim_halt
  %cloptr8094429 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094431 = getelementptr inbounds i64, i64* %cloptr8094429, i64 1              ; &eptr8094431[1]
  %eptr8094432 = getelementptr inbounds i64, i64* %cloptr8094429, i64 2              ; &eptr8094432[2]
  %eptr8094433 = getelementptr inbounds i64, i64* %cloptr8094429, i64 3              ; &eptr8094433[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094431                                  ; *eptr8094431 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094432                                          ; *eptr8094432 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094433                                                ; *eptr8094433 = %Hil$l
  %eptr8094430 = getelementptr inbounds i64, i64* %cloptr8094429, i64 0              ; &cloptr8094429[0]
  %f8094434 = ptrtoint void(i64,i64)* @lam8092178 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094434, i64* %eptr8094430                                             ; store fptr
  %arg8087115 = ptrtoint i64* %cloptr8094429 to i64                                  ; closure cast; i64* -> i64
  %arg8087114 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089460 = add i64 0, 0                                                         ; quoted ()
  %rva8089459 = call i64 @prim_cons(i64 %retprim8086016, i64 %rva8089460)            ; call prim_cons
  %rva8089458 = call i64 @prim_cons(i64 %arg8087114, i64 %rva8089459)                ; call prim_cons
  %cloptr8094435 = inttoptr i64 %arg8087115 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094436 = getelementptr inbounds i64, i64* %cloptr8094435, i64 0             ; &cloptr8094435[0]
  %f8094438 = load i64, i64* %i0ptr8094436, align 8                                  ; load; *i0ptr8094436
  %fptr8094437 = inttoptr i64 %f8094438 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094437(i64 %arg8087115, i64 %rva8089458)           ; tail call
  ret void
}


define void @lam8092178(i64 %env8092179, i64 %rvp8089457) {
  %envptr8094439 = inttoptr i64 %env8092179 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094440 = getelementptr inbounds i64, i64* %envptr8094439, i64 3            ; &envptr8094439[3]
  %Hil$l = load i64, i64* %envptr8094440, align 8                                    ; load; *envptr8094440
  %envptr8094441 = inttoptr i64 %env8092179 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094442 = getelementptr inbounds i64, i64* %envptr8094441, i64 2            ; &envptr8094441[2]
  %cont8086012 = load i64, i64* %envptr8094442, align 8                              ; load; *envptr8094442
  %envptr8094443 = inttoptr i64 %env8092179 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094444 = getelementptr inbounds i64, i64* %envptr8094443, i64 1            ; &envptr8094443[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094444, align 8                      ; load; *envptr8094444
  %_958086014 = call i64 @prim_car(i64 %rvp8089457)                                  ; call prim_car
  %rvp8089456 = call i64 @prim_cdr(i64 %rvp8089457)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089456)                                    ; call prim_car
  %na8089452 = call i64 @prim_cdr(i64 %rvp8089456)                                   ; call prim_cdr
  %arg8087117 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087117, i64 %Hil$l); call prim_vector_45set_33
  %arg8087120 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089455 = add i64 0, 0                                                         ; quoted ()
  %rva8089454 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089455)            ; call prim_cons
  %rva8089453 = call i64 @prim_cons(i64 %arg8087120, i64 %rva8089454)                ; call prim_cons
  %cloptr8094445 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094446 = getelementptr inbounds i64, i64* %cloptr8094445, i64 0             ; &cloptr8094445[0]
  %f8094448 = load i64, i64* %i0ptr8094446, align 8                                  ; load; *i0ptr8094446
  %fptr8094447 = inttoptr i64 %f8094448 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094447(i64 %cont8086012, i64 %rva8089453)          ; tail call
  ret void
}


define void @lam8092171(i64 %env8092172, i64 %rvp8089448) {
  %envptr8094449 = inttoptr i64 %env8092172 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094450 = getelementptr inbounds i64, i64* %envptr8094449, i64 3            ; &envptr8094449[3]
  %Hil$l = load i64, i64* %envptr8094450, align 8                                    ; load; *envptr8094450
  %envptr8094451 = inttoptr i64 %env8092172 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094452 = getelementptr inbounds i64, i64* %envptr8094451, i64 2            ; &envptr8094451[2]
  %cont8086012 = load i64, i64* %envptr8094452, align 8                              ; load; *envptr8094452
  %envptr8094453 = inttoptr i64 %env8092172 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094454 = getelementptr inbounds i64, i64* %envptr8094453, i64 1            ; &envptr8094453[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094454, align 8                      ; load; *envptr8094454
  %_958086014 = call i64 @prim_car(i64 %rvp8089448)                                  ; call prim_car
  %rvp8089447 = call i64 @prim_cdr(i64 %rvp8089448)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089447)                                    ; call prim_car
  %na8089443 = call i64 @prim_cdr(i64 %rvp8089447)                                   ; call prim_cdr
  %arg8087107 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087107, i64 %Hil$l); call prim_vector_45set_33
  %arg8087110 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089446 = add i64 0, 0                                                         ; quoted ()
  %rva8089445 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089446)            ; call prim_cons
  %rva8089444 = call i64 @prim_cons(i64 %arg8087110, i64 %rva8089445)                ; call prim_cons
  %cloptr8094455 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094456 = getelementptr inbounds i64, i64* %cloptr8094455, i64 0             ; &cloptr8094455[0]
  %f8094458 = load i64, i64* %i0ptr8094456, align 8                                  ; load; *i0ptr8094456
  %fptr8094457 = inttoptr i64 %f8094458 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094457(i64 %cont8086012, i64 %rva8089444)          ; tail call
  ret void
}


define void @lam8092162(i64 %env8092163, i64 %rvp8089436) {
  %envptr8094459 = inttoptr i64 %env8092163 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094460 = getelementptr inbounds i64, i64* %envptr8094459, i64 3            ; &envptr8094459[3]
  %Hil$l = load i64, i64* %envptr8094460, align 8                                    ; load; *envptr8094460
  %envptr8094461 = inttoptr i64 %env8092163 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094462 = getelementptr inbounds i64, i64* %envptr8094461, i64 2            ; &envptr8094461[2]
  %cont8086012 = load i64, i64* %envptr8094462, align 8                              ; load; *envptr8094462
  %envptr8094463 = inttoptr i64 %env8092163 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094464 = getelementptr inbounds i64, i64* %envptr8094463, i64 1            ; &envptr8094463[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094464, align 8                      ; load; *envptr8094464
  %_958086013 = call i64 @prim_car(i64 %rvp8089436)                                  ; call prim_car
  %rvp8089435 = call i64 @prim_cdr(i64 %rvp8089436)                                  ; call prim_cdr
  %p45$_95t = call i64 @prim_car(i64 %rvp8089435)                                    ; call prim_car
  %na8089415 = call i64 @prim_cdr(i64 %rvp8089435)                                   ; call prim_cdr
  %a8085844 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085845 = call i64 @prim_car(i64 %a8085844)                                      ; call prim_car
  %a8085846 = call i64 @prim_procedure_63(i64 %a8085845)                             ; call prim_procedure_63
  %cmp8094465 = icmp eq i64 %a8085846, 15                                            ; false?
  br i1 %cmp8094465, label %else8094467, label %then8094466                          ; if

then8094466:
  %a8085847 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085848 = call i64 @prim_car(i64 %a8085847)                                      ; call prim_car
  %cloptr8094468 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094470 = getelementptr inbounds i64, i64* %cloptr8094468, i64 1              ; &eptr8094470[1]
  %eptr8094471 = getelementptr inbounds i64, i64* %cloptr8094468, i64 2              ; &eptr8094471[2]
  %eptr8094472 = getelementptr inbounds i64, i64* %cloptr8094468, i64 3              ; &eptr8094472[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094470                                  ; *eptr8094470 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094471                                          ; *eptr8094471 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094472                                                ; *eptr8094472 = %Hil$l
  %eptr8094469 = getelementptr inbounds i64, i64* %cloptr8094468, i64 0              ; &cloptr8094468[0]
  %f8094473 = ptrtoint void(i64,i64)* @lam8092152 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094473, i64* %eptr8094469                                             ; store fptr
  %arg8087077 = ptrtoint i64* %cloptr8094468 to i64                                  ; closure cast; i64* -> i64
  %rva8089424 = add i64 0, 0                                                         ; quoted ()
  %rva8089423 = call i64 @prim_cons(i64 %arg8087077, i64 %rva8089424)                ; call prim_cons
  %cloptr8094474 = inttoptr i64 %a8085848 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094475 = getelementptr inbounds i64, i64* %cloptr8094474, i64 0             ; &cloptr8094474[0]
  %f8094477 = load i64, i64* %i0ptr8094475, align 8                                  ; load; *i0ptr8094475
  %fptr8094476 = inttoptr i64 %f8094477 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094476(i64 %a8085848, i64 %rva8089423)             ; tail call
  ret void

else8094467:
  %arg8087085 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094478, i32 0, i32 0)); quoted string
  %retprim8086016 = call i64 @prim_halt(i64 %arg8087085)                             ; call prim_halt
  %cloptr8094479 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094481 = getelementptr inbounds i64, i64* %cloptr8094479, i64 1              ; &eptr8094481[1]
  %eptr8094482 = getelementptr inbounds i64, i64* %cloptr8094479, i64 2              ; &eptr8094482[2]
  %eptr8094483 = getelementptr inbounds i64, i64* %cloptr8094479, i64 3              ; &eptr8094483[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094481                                  ; *eptr8094481 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094482                                          ; *eptr8094482 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094483                                                ; *eptr8094483 = %Hil$l
  %eptr8094480 = getelementptr inbounds i64, i64* %cloptr8094479, i64 0              ; &cloptr8094479[0]
  %f8094484 = ptrtoint void(i64,i64)* @lam8092159 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094484, i64* %eptr8094480                                             ; store fptr
  %arg8087088 = ptrtoint i64* %cloptr8094479 to i64                                  ; closure cast; i64* -> i64
  %arg8087087 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089434 = add i64 0, 0                                                         ; quoted ()
  %rva8089433 = call i64 @prim_cons(i64 %retprim8086016, i64 %rva8089434)            ; call prim_cons
  %rva8089432 = call i64 @prim_cons(i64 %arg8087087, i64 %rva8089433)                ; call prim_cons
  %cloptr8094485 = inttoptr i64 %arg8087088 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094486 = getelementptr inbounds i64, i64* %cloptr8094485, i64 0             ; &cloptr8094485[0]
  %f8094488 = load i64, i64* %i0ptr8094486, align 8                                  ; load; *i0ptr8094486
  %fptr8094487 = inttoptr i64 %f8094488 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094487(i64 %arg8087088, i64 %rva8089432)           ; tail call
  ret void
}


define void @lam8092159(i64 %env8092160, i64 %rvp8089431) {
  %envptr8094489 = inttoptr i64 %env8092160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094490 = getelementptr inbounds i64, i64* %envptr8094489, i64 3            ; &envptr8094489[3]
  %Hil$l = load i64, i64* %envptr8094490, align 8                                    ; load; *envptr8094490
  %envptr8094491 = inttoptr i64 %env8092160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094492 = getelementptr inbounds i64, i64* %envptr8094491, i64 2            ; &envptr8094491[2]
  %cont8086012 = load i64, i64* %envptr8094492, align 8                              ; load; *envptr8094492
  %envptr8094493 = inttoptr i64 %env8092160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094494 = getelementptr inbounds i64, i64* %envptr8094493, i64 1            ; &envptr8094493[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094494, align 8                      ; load; *envptr8094494
  %_958086014 = call i64 @prim_car(i64 %rvp8089431)                                  ; call prim_car
  %rvp8089430 = call i64 @prim_cdr(i64 %rvp8089431)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089430)                                    ; call prim_car
  %na8089426 = call i64 @prim_cdr(i64 %rvp8089430)                                   ; call prim_cdr
  %arg8087090 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087090, i64 %Hil$l); call prim_vector_45set_33
  %arg8087093 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089429 = add i64 0, 0                                                         ; quoted ()
  %rva8089428 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089429)            ; call prim_cons
  %rva8089427 = call i64 @prim_cons(i64 %arg8087093, i64 %rva8089428)                ; call prim_cons
  %cloptr8094495 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094496 = getelementptr inbounds i64, i64* %cloptr8094495, i64 0             ; &cloptr8094495[0]
  %f8094498 = load i64, i64* %i0ptr8094496, align 8                                  ; load; *i0ptr8094496
  %fptr8094497 = inttoptr i64 %f8094498 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094497(i64 %cont8086012, i64 %rva8089427)          ; tail call
  ret void
}


define void @lam8092152(i64 %env8092153, i64 %rvp8089422) {
  %envptr8094499 = inttoptr i64 %env8092153 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094500 = getelementptr inbounds i64, i64* %envptr8094499, i64 3            ; &envptr8094499[3]
  %Hil$l = load i64, i64* %envptr8094500, align 8                                    ; load; *envptr8094500
  %envptr8094501 = inttoptr i64 %env8092153 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094502 = getelementptr inbounds i64, i64* %envptr8094501, i64 2            ; &envptr8094501[2]
  %cont8086012 = load i64, i64* %envptr8094502, align 8                              ; load; *envptr8094502
  %envptr8094503 = inttoptr i64 %env8092153 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094504 = getelementptr inbounds i64, i64* %envptr8094503, i64 1            ; &envptr8094503[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094504, align 8                      ; load; *envptr8094504
  %_958086014 = call i64 @prim_car(i64 %rvp8089422)                                  ; call prim_car
  %rvp8089421 = call i64 @prim_cdr(i64 %rvp8089422)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089421)                                    ; call prim_car
  %na8089417 = call i64 @prim_cdr(i64 %rvp8089421)                                   ; call prim_cdr
  %arg8087080 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087080, i64 %Hil$l); call prim_vector_45set_33
  %arg8087083 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089420 = add i64 0, 0                                                         ; quoted ()
  %rva8089419 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089420)            ; call prim_cons
  %rva8089418 = call i64 @prim_cons(i64 %arg8087083, i64 %rva8089419)                ; call prim_cons
  %cloptr8094505 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094506 = getelementptr inbounds i64, i64* %cloptr8094505, i64 0             ; &cloptr8094505[0]
  %f8094508 = load i64, i64* %i0ptr8094506, align 8                                  ; load; *i0ptr8094506
  %fptr8094507 = inttoptr i64 %f8094508 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094507(i64 %cont8086012, i64 %rva8089418)          ; tail call
  ret void
}


define void @lam8092128(i64 %env8092129, i64 %rvp8089350) {
  %envptr8094509 = inttoptr i64 %env8092129 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094510 = getelementptr inbounds i64, i64* %envptr8094509, i64 3            ; &envptr8094509[3]
  %cont8086008 = load i64, i64* %envptr8094510, align 8                              ; load; *envptr8094510
  %envptr8094511 = inttoptr i64 %env8092129 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094512 = getelementptr inbounds i64, i64* %envptr8094511, i64 2            ; &envptr8094511[2]
  %syN$_37wind_45stack = load i64, i64* %envptr8094512, align 8                      ; load; *envptr8094512
  %envptr8094513 = inttoptr i64 %env8092129 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094514 = getelementptr inbounds i64, i64* %envptr8094513, i64 1            ; &envptr8094513[1]
  %L3s$new = load i64, i64* %envptr8094514, align 8                                  ; load; *envptr8094514
  %_958086009 = call i64 @prim_car(i64 %rvp8089350)                                  ; call prim_car
  %rvp8089349 = call i64 @prim_cdr(i64 %rvp8089350)                                  ; call prim_cdr
  %pHq$tail = call i64 @prim_car(i64 %rvp8089349)                                    ; call prim_car
  %na8089117 = call i64 @prim_cdr(i64 %rvp8089349)                                   ; call prim_cdr
  %cloptr8094515 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8094516 = getelementptr inbounds i64, i64* %cloptr8094515, i64 0              ; &cloptr8094515[0]
  %f8094517 = ptrtoint void(i64,i64)* @lam8092126 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094517, i64* %eptr8094516                                             ; store fptr
  %arg8086707 = ptrtoint i64* %cloptr8094515 to i64                                  ; closure cast; i64* -> i64
  %cloptr8094518 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094520 = getelementptr inbounds i64, i64* %cloptr8094518, i64 1              ; &eptr8094520[1]
  %eptr8094521 = getelementptr inbounds i64, i64* %cloptr8094518, i64 2              ; &eptr8094521[2]
  %eptr8094522 = getelementptr inbounds i64, i64* %cloptr8094518, i64 3              ; &eptr8094522[3]
  %eptr8094523 = getelementptr inbounds i64, i64* %cloptr8094518, i64 4              ; &eptr8094523[4]
  store i64 %pHq$tail, i64* %eptr8094520                                             ; *eptr8094520 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094521                                              ; *eptr8094521 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094522                                  ; *eptr8094522 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094523                                          ; *eptr8094523 = %cont8086008
  %eptr8094519 = getelementptr inbounds i64, i64* %cloptr8094518, i64 0              ; &cloptr8094518[0]
  %f8094524 = ptrtoint void(i64,i64)* @lam8092122 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094524, i64* %eptr8094519                                             ; store fptr
  %arg8086706 = ptrtoint i64* %cloptr8094518 to i64                                  ; closure cast; i64* -> i64
  %rva8089348 = add i64 0, 0                                                         ; quoted ()
  %rva8089347 = call i64 @prim_cons(i64 %arg8086706, i64 %rva8089348)                ; call prim_cons
  %cloptr8094525 = inttoptr i64 %arg8086707 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094526 = getelementptr inbounds i64, i64* %cloptr8094525, i64 0             ; &cloptr8094525[0]
  %f8094528 = load i64, i64* %i0ptr8094526, align 8                                  ; load; *i0ptr8094526
  %fptr8094527 = inttoptr i64 %f8094528 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094527(i64 %arg8086707, i64 %rva8089347)           ; tail call
  ret void
}


define void @lam8092126(i64 %env8092127, i64 %Snq$lst8086036) {
  %cont8086035 = call i64 @prim_car(i64 %Snq$lst8086036)                             ; call prim_car
  %Snq$lst = call i64 @prim_cdr(i64 %Snq$lst8086036)                                 ; call prim_cdr
  %arg8086711 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089120 = add i64 0, 0                                                         ; quoted ()
  %rva8089119 = call i64 @prim_cons(i64 %Snq$lst, i64 %rva8089120)                   ; call prim_cons
  %rva8089118 = call i64 @prim_cons(i64 %arg8086711, i64 %rva8089119)                ; call prim_cons
  %cloptr8094529 = inttoptr i64 %cont8086035 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094530 = getelementptr inbounds i64, i64* %cloptr8094529, i64 0             ; &cloptr8094529[0]
  %f8094532 = load i64, i64* %i0ptr8094530, align 8                                  ; load; *i0ptr8094530
  %fptr8094531 = inttoptr i64 %f8094532 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094531(i64 %cont8086035, i64 %rva8089118)          ; tail call
  ret void
}


define void @lam8092122(i64 %env8092123, i64 %rvp8089346) {
  %envptr8094533 = inttoptr i64 %env8092123 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094534 = getelementptr inbounds i64, i64* %envptr8094533, i64 4            ; &envptr8094533[4]
  %cont8086008 = load i64, i64* %envptr8094534, align 8                              ; load; *envptr8094534
  %envptr8094535 = inttoptr i64 %env8092123 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094536 = getelementptr inbounds i64, i64* %envptr8094535, i64 3            ; &envptr8094535[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094536, align 8                      ; load; *envptr8094536
  %envptr8094537 = inttoptr i64 %env8092123 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094538 = getelementptr inbounds i64, i64* %envptr8094537, i64 2            ; &envptr8094537[2]
  %L3s$new = load i64, i64* %envptr8094538, align 8                                  ; load; *envptr8094538
  %envptr8094539 = inttoptr i64 %env8092123 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094540 = getelementptr inbounds i64, i64* %envptr8094539, i64 1            ; &envptr8094539[1]
  %pHq$tail = load i64, i64* %envptr8094540, align 8                                 ; load; *envptr8094540
  %_958086033 = call i64 @prim_car(i64 %rvp8089346)                                  ; call prim_car
  %rvp8089345 = call i64 @prim_cdr(i64 %rvp8089346)                                  ; call prim_cdr
  %a8085820 = call i64 @prim_car(i64 %rvp8089345)                                    ; call prim_car
  %na8089122 = call i64 @prim_cdr(i64 %rvp8089345)                                   ; call prim_cdr
  %arg8086714 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086034 = call i64 @prim_make_45vector(i64 %arg8086714, i64 %a8085820)     ; call prim_make_45vector
  %cloptr8094541 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094543 = getelementptr inbounds i64, i64* %cloptr8094541, i64 1              ; &eptr8094543[1]
  %eptr8094544 = getelementptr inbounds i64, i64* %cloptr8094541, i64 2              ; &eptr8094544[2]
  %eptr8094545 = getelementptr inbounds i64, i64* %cloptr8094541, i64 3              ; &eptr8094545[3]
  %eptr8094546 = getelementptr inbounds i64, i64* %cloptr8094541, i64 4              ; &eptr8094546[4]
  store i64 %pHq$tail, i64* %eptr8094543                                             ; *eptr8094543 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094544                                              ; *eptr8094544 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094545                                  ; *eptr8094545 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094546                                          ; *eptr8094546 = %cont8086008
  %eptr8094542 = getelementptr inbounds i64, i64* %cloptr8094541, i64 0              ; &cloptr8094541[0]
  %f8094547 = ptrtoint void(i64,i64)* @lam8092119 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094547, i64* %eptr8094542                                             ; store fptr
  %arg8086717 = ptrtoint i64* %cloptr8094541 to i64                                  ; closure cast; i64* -> i64
  %arg8086716 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089344 = add i64 0, 0                                                         ; quoted ()
  %rva8089343 = call i64 @prim_cons(i64 %retprim8086034, i64 %rva8089344)            ; call prim_cons
  %rva8089342 = call i64 @prim_cons(i64 %arg8086716, i64 %rva8089343)                ; call prim_cons
  %cloptr8094548 = inttoptr i64 %arg8086717 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094549 = getelementptr inbounds i64, i64* %cloptr8094548, i64 0             ; &cloptr8094548[0]
  %f8094551 = load i64, i64* %i0ptr8094549, align 8                                  ; load; *i0ptr8094549
  %fptr8094550 = inttoptr i64 %f8094551 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094550(i64 %arg8086717, i64 %rva8089342)           ; tail call
  ret void
}


define void @lam8092119(i64 %env8092120, i64 %rvp8089341) {
  %envptr8094552 = inttoptr i64 %env8092120 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094553 = getelementptr inbounds i64, i64* %envptr8094552, i64 4            ; &envptr8094552[4]
  %cont8086008 = load i64, i64* %envptr8094553, align 8                              ; load; *envptr8094553
  %envptr8094554 = inttoptr i64 %env8092120 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094555 = getelementptr inbounds i64, i64* %envptr8094554, i64 3            ; &envptr8094554[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094555, align 8                      ; load; *envptr8094555
  %envptr8094556 = inttoptr i64 %env8092120 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094557 = getelementptr inbounds i64, i64* %envptr8094556, i64 2            ; &envptr8094556[2]
  %L3s$new = load i64, i64* %envptr8094557, align 8                                  ; load; *envptr8094557
  %envptr8094558 = inttoptr i64 %env8092120 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094559 = getelementptr inbounds i64, i64* %envptr8094558, i64 1            ; &envptr8094558[1]
  %pHq$tail = load i64, i64* %envptr8094559, align 8                                 ; load; *envptr8094559
  %_958086024 = call i64 @prim_car(i64 %rvp8089341)                                  ; call prim_car
  %rvp8089340 = call i64 @prim_cdr(i64 %rvp8089341)                                  ; call prim_cdr
  %taN$f = call i64 @prim_car(i64 %rvp8089340)                                       ; call prim_car
  %na8089124 = call i64 @prim_cdr(i64 %rvp8089340)                                   ; call prim_cdr
  %cloptr8094560 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094562 = getelementptr inbounds i64, i64* %cloptr8094560, i64 1              ; &eptr8094562[1]
  %eptr8094563 = getelementptr inbounds i64, i64* %cloptr8094560, i64 2              ; &eptr8094563[2]
  %eptr8094564 = getelementptr inbounds i64, i64* %cloptr8094560, i64 3              ; &eptr8094564[3]
  store i64 %pHq$tail, i64* %eptr8094562                                             ; *eptr8094562 = %pHq$tail
  store i64 %syN$_37wind_45stack, i64* %eptr8094563                                  ; *eptr8094563 = %syN$_37wind_45stack
  store i64 %taN$f, i64* %eptr8094564                                                ; *eptr8094564 = %taN$f
  %eptr8094561 = getelementptr inbounds i64, i64* %cloptr8094560, i64 0              ; &cloptr8094560[0]
  %f8094565 = ptrtoint void(i64,i64)* @lam8092117 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094565, i64* %eptr8094561                                             ; store fptr
  %ya3$f8085707 = ptrtoint i64* %cloptr8094560 to i64                                ; closure cast; i64* -> i64
  %arg8086769 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %nDe$_95t = call i64 @prim_vector_45set_33(i64 %taN$f, i64 %arg8086769, i64 %ya3$f8085707); call prim_vector_45set_33
  %arg8086771 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085833 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8086771)               ; call prim_vector_45ref
  %a8085834 = call i64 @prim_procedure_63(i64 %a8085833)                             ; call prim_procedure_63
  %cmp8094566 = icmp eq i64 %a8085834, 15                                            ; false?
  br i1 %cmp8094566, label %else8094568, label %then8094567                          ; if

then8094567:
  %arg8086774 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085835 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8086774)               ; call prim_vector_45ref
  %arg8086776 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085836 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8086776) ; call prim_vector_45ref
  %cloptr8094569 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094571 = getelementptr inbounds i64, i64* %cloptr8094569, i64 1              ; &eptr8094571[1]
  %eptr8094572 = getelementptr inbounds i64, i64* %cloptr8094569, i64 2              ; &eptr8094572[2]
  %eptr8094573 = getelementptr inbounds i64, i64* %cloptr8094569, i64 3              ; &eptr8094573[3]
  %eptr8094574 = getelementptr inbounds i64, i64* %cloptr8094569, i64 4              ; &eptr8094574[4]
  store i64 %pHq$tail, i64* %eptr8094571                                             ; *eptr8094571 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094572                                              ; *eptr8094572 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094573                                  ; *eptr8094573 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094574                                          ; *eptr8094574 = %cont8086008
  %eptr8094570 = getelementptr inbounds i64, i64* %cloptr8094569, i64 0              ; &cloptr8094569[0]
  %f8094575 = ptrtoint void(i64,i64)* @lam8092018 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094575, i64* %eptr8094570                                             ; store fptr
  %arg8086779 = ptrtoint i64* %cloptr8094569 to i64                                  ; closure cast; i64* -> i64
  %rva8089251 = add i64 0, 0                                                         ; quoted ()
  %rva8089250 = call i64 @prim_cons(i64 %a8085836, i64 %rva8089251)                  ; call prim_cons
  %rva8089249 = call i64 @prim_cons(i64 %arg8086779, i64 %rva8089250)                ; call prim_cons
  %cloptr8094576 = inttoptr i64 %a8085835 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094577 = getelementptr inbounds i64, i64* %cloptr8094576, i64 0             ; &cloptr8094576[0]
  %f8094579 = load i64, i64* %i0ptr8094577, align 8                                  ; load; *i0ptr8094577
  %fptr8094578 = inttoptr i64 %f8094579 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094578(i64 %a8085835, i64 %rva8089249)             ; tail call
  ret void

else8094568:
  %arg8086873 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094580, i32 0, i32 0)); quoted string
  %retprim8086032 = call i64 @prim_halt(i64 %arg8086873)                             ; call prim_halt
  %cloptr8094581 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094583 = getelementptr inbounds i64, i64* %cloptr8094581, i64 1              ; &eptr8094583[1]
  %eptr8094584 = getelementptr inbounds i64, i64* %cloptr8094581, i64 2              ; &eptr8094584[2]
  %eptr8094585 = getelementptr inbounds i64, i64* %cloptr8094581, i64 3              ; &eptr8094585[3]
  %eptr8094586 = getelementptr inbounds i64, i64* %cloptr8094581, i64 4              ; &eptr8094586[4]
  store i64 %pHq$tail, i64* %eptr8094583                                             ; *eptr8094583 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094584                                              ; *eptr8094584 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094585                                  ; *eptr8094585 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094586                                          ; *eptr8094586 = %cont8086008
  %eptr8094582 = getelementptr inbounds i64, i64* %cloptr8094581, i64 0              ; &cloptr8094581[0]
  %f8094587 = ptrtoint void(i64,i64)* @lam8092085 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094587, i64* %eptr8094582                                             ; store fptr
  %arg8086876 = ptrtoint i64* %cloptr8094581 to i64                                  ; closure cast; i64* -> i64
  %arg8086875 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089339 = add i64 0, 0                                                         ; quoted ()
  %rva8089338 = call i64 @prim_cons(i64 %retprim8086032, i64 %rva8089339)            ; call prim_cons
  %rva8089337 = call i64 @prim_cons(i64 %arg8086875, i64 %rva8089338)                ; call prim_cons
  %cloptr8094588 = inttoptr i64 %arg8086876 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094589 = getelementptr inbounds i64, i64* %cloptr8094588, i64 0             ; &cloptr8094588[0]
  %f8094591 = load i64, i64* %i0ptr8094589, align 8                                  ; load; *i0ptr8094589
  %fptr8094590 = inttoptr i64 %f8094591 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094590(i64 %arg8086876, i64 %rva8089337)           ; tail call
  ret void
}


define void @lam8092117(i64 %env8092118, i64 %rvp8089163) {
  %envptr8094592 = inttoptr i64 %env8092118 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094593 = getelementptr inbounds i64, i64* %envptr8094592, i64 3            ; &envptr8094592[3]
  %taN$f = load i64, i64* %envptr8094593, align 8                                    ; load; *envptr8094593
  %envptr8094594 = inttoptr i64 %env8092118 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094595 = getelementptr inbounds i64, i64* %envptr8094594, i64 2            ; &envptr8094594[2]
  %syN$_37wind_45stack = load i64, i64* %envptr8094595, align 8                      ; load; *envptr8094595
  %envptr8094596 = inttoptr i64 %env8092118 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094597 = getelementptr inbounds i64, i64* %envptr8094596, i64 1            ; &envptr8094596[1]
  %pHq$tail = load i64, i64* %envptr8094597, align 8                                 ; load; *envptr8094597
  %cont8086025 = call i64 @prim_car(i64 %rvp8089163)                                 ; call prim_car
  %rvp8089162 = call i64 @prim_cdr(i64 %rvp8089163)                                  ; call prim_cdr
  %HbV$l = call i64 @prim_car(i64 %rvp8089162)                                       ; call prim_car
  %na8089126 = call i64 @prim_cdr(i64 %rvp8089162)                                   ; call prim_cdr
  %a8085821 = call i64 @prim_eq_63(i64 %HbV$l, i64 %pHq$tail)                        ; call prim_eq_63
  %a8085822 = call i64 @prim_not(i64 %a8085821)                                      ; call prim_not
  %cmp8094598 = icmp eq i64 %a8085822, 15                                            ; false?
  br i1 %cmp8094598, label %else8094600, label %then8094599                          ; if

then8094599:
  %a8085823 = call i64 @prim_cdr(i64 %HbV$l)                                         ; call prim_cdr
  %arg8086723 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086030 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086723, i64 %a8085823); call prim_vector_45set_33
  %cloptr8094601 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094603 = getelementptr inbounds i64, i64* %cloptr8094601, i64 1              ; &eptr8094603[1]
  %eptr8094604 = getelementptr inbounds i64, i64* %cloptr8094601, i64 2              ; &eptr8094604[2]
  %eptr8094605 = getelementptr inbounds i64, i64* %cloptr8094601, i64 3              ; &eptr8094605[3]
  store i64 %HbV$l, i64* %eptr8094603                                                ; *eptr8094603 = %HbV$l
  store i64 %taN$f, i64* %eptr8094604                                                ; *eptr8094604 = %taN$f
  store i64 %cont8086025, i64* %eptr8094605                                          ; *eptr8094605 = %cont8086025
  %eptr8094602 = getelementptr inbounds i64, i64* %cloptr8094601, i64 0              ; &cloptr8094601[0]
  %f8094606 = ptrtoint void(i64,i64)* @lam8092112 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094606, i64* %eptr8094602                                             ; store fptr
  %arg8086727 = ptrtoint i64* %cloptr8094601 to i64                                  ; closure cast; i64* -> i64
  %arg8086726 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089158 = add i64 0, 0                                                         ; quoted ()
  %rva8089157 = call i64 @prim_cons(i64 %retprim8086030, i64 %rva8089158)            ; call prim_cons
  %rva8089156 = call i64 @prim_cons(i64 %arg8086726, i64 %rva8089157)                ; call prim_cons
  %cloptr8094607 = inttoptr i64 %arg8086727 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094608 = getelementptr inbounds i64, i64* %cloptr8094607, i64 0             ; &cloptr8094607[0]
  %f8094610 = load i64, i64* %i0ptr8094608, align 8                                  ; load; *i0ptr8094608
  %fptr8094609 = inttoptr i64 %f8094610 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094609(i64 %arg8086727, i64 %rva8089156)           ; tail call
  ret void

else8094600:
  %retprim8086031 = call i64 @prim_void()                                            ; call prim_void
  %arg8086766 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089161 = add i64 0, 0                                                         ; quoted ()
  %rva8089160 = call i64 @prim_cons(i64 %retprim8086031, i64 %rva8089161)            ; call prim_cons
  %rva8089159 = call i64 @prim_cons(i64 %arg8086766, i64 %rva8089160)                ; call prim_cons
  %cloptr8094611 = inttoptr i64 %cont8086025 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094612 = getelementptr inbounds i64, i64* %cloptr8094611, i64 0             ; &cloptr8094611[0]
  %f8094614 = load i64, i64* %i0ptr8094612, align 8                                  ; load; *i0ptr8094612
  %fptr8094613 = inttoptr i64 %f8094614 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094613(i64 %cont8086025, i64 %rva8089159)          ; tail call
  ret void
}


define void @lam8092112(i64 %env8092113, i64 %rvp8089155) {
  %envptr8094615 = inttoptr i64 %env8092113 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094616 = getelementptr inbounds i64, i64* %envptr8094615, i64 3            ; &envptr8094615[3]
  %cont8086025 = load i64, i64* %envptr8094616, align 8                              ; load; *envptr8094616
  %envptr8094617 = inttoptr i64 %env8092113 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094618 = getelementptr inbounds i64, i64* %envptr8094617, i64 2            ; &envptr8094617[2]
  %taN$f = load i64, i64* %envptr8094618, align 8                                    ; load; *envptr8094618
  %envptr8094619 = inttoptr i64 %env8092113 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094620 = getelementptr inbounds i64, i64* %envptr8094619, i64 1            ; &envptr8094619[1]
  %HbV$l = load i64, i64* %envptr8094620, align 8                                    ; load; *envptr8094620
  %_958086026 = call i64 @prim_car(i64 %rvp8089155)                                  ; call prim_car
  %rvp8089154 = call i64 @prim_cdr(i64 %rvp8089155)                                  ; call prim_cdr
  %t6A$_95t = call i64 @prim_car(i64 %rvp8089154)                                    ; call prim_car
  %na8089128 = call i64 @prim_cdr(i64 %rvp8089154)                                   ; call prim_cdr
  %a8085824 = call i64 @prim_car(i64 %HbV$l)                                         ; call prim_car
  %a8085825 = call i64 @prim_cdr(i64 %a8085824)                                      ; call prim_cdr
  %a8085826 = call i64 @prim_procedure_63(i64 %a8085825)                             ; call prim_procedure_63
  %cmp8094621 = icmp eq i64 %a8085826, 15                                            ; false?
  br i1 %cmp8094621, label %else8094623, label %then8094622                          ; if

then8094622:
  %a8085827 = call i64 @prim_car(i64 %HbV$l)                                         ; call prim_car
  %a8085828 = call i64 @prim_cdr(i64 %a8085827)                                      ; call prim_cdr
  %cloptr8094624 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094626 = getelementptr inbounds i64, i64* %cloptr8094624, i64 1              ; &eptr8094626[1]
  %eptr8094627 = getelementptr inbounds i64, i64* %cloptr8094624, i64 2              ; &eptr8094627[2]
  %eptr8094628 = getelementptr inbounds i64, i64* %cloptr8094624, i64 3              ; &eptr8094628[3]
  store i64 %HbV$l, i64* %eptr8094626                                                ; *eptr8094626 = %HbV$l
  store i64 %taN$f, i64* %eptr8094627                                                ; *eptr8094627 = %taN$f
  store i64 %cont8086025, i64* %eptr8094628                                          ; *eptr8094628 = %cont8086025
  %eptr8094625 = getelementptr inbounds i64, i64* %cloptr8094624, i64 0              ; &cloptr8094624[0]
  %f8094629 = ptrtoint void(i64,i64)* @lam8092099 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094629, i64* %eptr8094625                                             ; store fptr
  %arg8086733 = ptrtoint i64* %cloptr8094624 to i64                                  ; closure cast; i64* -> i64
  %rva8089140 = add i64 0, 0                                                         ; quoted ()
  %rva8089139 = call i64 @prim_cons(i64 %arg8086733, i64 %rva8089140)                ; call prim_cons
  %cloptr8094630 = inttoptr i64 %a8085828 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094631 = getelementptr inbounds i64, i64* %cloptr8094630, i64 0             ; &cloptr8094630[0]
  %f8094633 = load i64, i64* %i0ptr8094631, align 8                                  ; load; *i0ptr8094631
  %fptr8094632 = inttoptr i64 %f8094633 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094632(i64 %a8085828, i64 %rva8089139)             ; tail call
  ret void

else8094623:
  %arg8086748 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094634, i32 0, i32 0)); quoted string
  %retprim8086029 = call i64 @prim_halt(i64 %arg8086748)                             ; call prim_halt
  %cloptr8094635 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094637 = getelementptr inbounds i64, i64* %cloptr8094635, i64 1              ; &eptr8094637[1]
  %eptr8094638 = getelementptr inbounds i64, i64* %cloptr8094635, i64 2              ; &eptr8094638[2]
  %eptr8094639 = getelementptr inbounds i64, i64* %cloptr8094635, i64 3              ; &eptr8094639[3]
  store i64 %HbV$l, i64* %eptr8094637                                                ; *eptr8094637 = %HbV$l
  store i64 %taN$f, i64* %eptr8094638                                                ; *eptr8094638 = %taN$f
  store i64 %cont8086025, i64* %eptr8094639                                          ; *eptr8094639 = %cont8086025
  %eptr8094636 = getelementptr inbounds i64, i64* %cloptr8094635, i64 0              ; &cloptr8094635[0]
  %f8094640 = ptrtoint void(i64,i64)* @lam8092109 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094640, i64* %eptr8094636                                             ; store fptr
  %arg8086751 = ptrtoint i64* %cloptr8094635 to i64                                  ; closure cast; i64* -> i64
  %arg8086750 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089153 = add i64 0, 0                                                         ; quoted ()
  %rva8089152 = call i64 @prim_cons(i64 %retprim8086029, i64 %rva8089153)            ; call prim_cons
  %rva8089151 = call i64 @prim_cons(i64 %arg8086750, i64 %rva8089152)                ; call prim_cons
  %cloptr8094641 = inttoptr i64 %arg8086751 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094642 = getelementptr inbounds i64, i64* %cloptr8094641, i64 0             ; &cloptr8094641[0]
  %f8094644 = load i64, i64* %i0ptr8094642, align 8                                  ; load; *i0ptr8094642
  %fptr8094643 = inttoptr i64 %f8094644 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094643(i64 %arg8086751, i64 %rva8089151)           ; tail call
  ret void
}


define void @lam8092109(i64 %env8092110, i64 %rvp8089150) {
  %envptr8094645 = inttoptr i64 %env8092110 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094646 = getelementptr inbounds i64, i64* %envptr8094645, i64 3            ; &envptr8094645[3]
  %cont8086025 = load i64, i64* %envptr8094646, align 8                              ; load; *envptr8094646
  %envptr8094647 = inttoptr i64 %env8092110 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094648 = getelementptr inbounds i64, i64* %envptr8094647, i64 2            ; &envptr8094647[2]
  %taN$f = load i64, i64* %envptr8094648, align 8                                    ; load; *envptr8094648
  %envptr8094649 = inttoptr i64 %env8092110 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094650 = getelementptr inbounds i64, i64* %envptr8094649, i64 1            ; &envptr8094649[1]
  %HbV$l = load i64, i64* %envptr8094650, align 8                                    ; load; *envptr8094650
  %_958086027 = call i64 @prim_car(i64 %rvp8089150)                                  ; call prim_car
  %rvp8089149 = call i64 @prim_cdr(i64 %rvp8089150)                                  ; call prim_cdr
  %FIz$_95t = call i64 @prim_car(i64 %rvp8089149)                                    ; call prim_car
  %na8089142 = call i64 @prim_cdr(i64 %rvp8089149)                                   ; call prim_cdr
  %arg8086752 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085829 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8086752)               ; call prim_vector_45ref
  %a8085830 = call i64 @prim_procedure_63(i64 %a8085829)                             ; call prim_procedure_63
  %cmp8094651 = icmp eq i64 %a8085830, 15                                            ; false?
  br i1 %cmp8094651, label %else8094653, label %then8094652                          ; if

then8094652:
  %arg8086755 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085831 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8086755)               ; call prim_vector_45ref
  %a8085832 = call i64 @prim_cdr(i64 %HbV$l)                                         ; call prim_cdr
  %rva8089145 = add i64 0, 0                                                         ; quoted ()
  %rva8089144 = call i64 @prim_cons(i64 %a8085832, i64 %rva8089145)                  ; call prim_cons
  %rva8089143 = call i64 @prim_cons(i64 %cont8086025, i64 %rva8089144)               ; call prim_cons
  %cloptr8094654 = inttoptr i64 %a8085831 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094655 = getelementptr inbounds i64, i64* %cloptr8094654, i64 0             ; &cloptr8094654[0]
  %f8094657 = load i64, i64* %i0ptr8094655, align 8                                  ; load; *i0ptr8094655
  %fptr8094656 = inttoptr i64 %f8094657 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094656(i64 %a8085831, i64 %rva8089143)             ; tail call
  ret void

else8094653:
  %arg8086761 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094658, i32 0, i32 0)); quoted string
  %retprim8086028 = call i64 @prim_halt(i64 %arg8086761)                             ; call prim_halt
  %arg8086763 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089148 = add i64 0, 0                                                         ; quoted ()
  %rva8089147 = call i64 @prim_cons(i64 %retprim8086028, i64 %rva8089148)            ; call prim_cons
  %rva8089146 = call i64 @prim_cons(i64 %arg8086763, i64 %rva8089147)                ; call prim_cons
  %cloptr8094659 = inttoptr i64 %cont8086025 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094660 = getelementptr inbounds i64, i64* %cloptr8094659, i64 0             ; &cloptr8094659[0]
  %f8094662 = load i64, i64* %i0ptr8094660, align 8                                  ; load; *i0ptr8094660
  %fptr8094661 = inttoptr i64 %f8094662 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094661(i64 %cont8086025, i64 %rva8089146)          ; tail call
  ret void
}


define void @lam8092099(i64 %env8092100, i64 %rvp8089138) {
  %envptr8094663 = inttoptr i64 %env8092100 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094664 = getelementptr inbounds i64, i64* %envptr8094663, i64 3            ; &envptr8094663[3]
  %cont8086025 = load i64, i64* %envptr8094664, align 8                              ; load; *envptr8094664
  %envptr8094665 = inttoptr i64 %env8092100 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094666 = getelementptr inbounds i64, i64* %envptr8094665, i64 2            ; &envptr8094665[2]
  %taN$f = load i64, i64* %envptr8094666, align 8                                    ; load; *envptr8094666
  %envptr8094667 = inttoptr i64 %env8092100 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094668 = getelementptr inbounds i64, i64* %envptr8094667, i64 1            ; &envptr8094667[1]
  %HbV$l = load i64, i64* %envptr8094668, align 8                                    ; load; *envptr8094668
  %_958086027 = call i64 @prim_car(i64 %rvp8089138)                                  ; call prim_car
  %rvp8089137 = call i64 @prim_cdr(i64 %rvp8089138)                                  ; call prim_cdr
  %FIz$_95t = call i64 @prim_car(i64 %rvp8089137)                                    ; call prim_car
  %na8089130 = call i64 @prim_cdr(i64 %rvp8089137)                                   ; call prim_cdr
  %arg8086735 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085829 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8086735)               ; call prim_vector_45ref
  %a8085830 = call i64 @prim_procedure_63(i64 %a8085829)                             ; call prim_procedure_63
  %cmp8094669 = icmp eq i64 %a8085830, 15                                            ; false?
  br i1 %cmp8094669, label %else8094671, label %then8094670                          ; if

then8094670:
  %arg8086738 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085831 = call i64 @prim_vector_45ref(i64 %taN$f, i64 %arg8086738)               ; call prim_vector_45ref
  %a8085832 = call i64 @prim_cdr(i64 %HbV$l)                                         ; call prim_cdr
  %rva8089133 = add i64 0, 0                                                         ; quoted ()
  %rva8089132 = call i64 @prim_cons(i64 %a8085832, i64 %rva8089133)                  ; call prim_cons
  %rva8089131 = call i64 @prim_cons(i64 %cont8086025, i64 %rva8089132)               ; call prim_cons
  %cloptr8094672 = inttoptr i64 %a8085831 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094673 = getelementptr inbounds i64, i64* %cloptr8094672, i64 0             ; &cloptr8094672[0]
  %f8094675 = load i64, i64* %i0ptr8094673, align 8                                  ; load; *i0ptr8094673
  %fptr8094674 = inttoptr i64 %f8094675 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094674(i64 %a8085831, i64 %rva8089131)             ; tail call
  ret void

else8094671:
  %arg8086744 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094676, i32 0, i32 0)); quoted string
  %retprim8086028 = call i64 @prim_halt(i64 %arg8086744)                             ; call prim_halt
  %arg8086746 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089136 = add i64 0, 0                                                         ; quoted ()
  %rva8089135 = call i64 @prim_cons(i64 %retprim8086028, i64 %rva8089136)            ; call prim_cons
  %rva8089134 = call i64 @prim_cons(i64 %arg8086746, i64 %rva8089135)                ; call prim_cons
  %cloptr8094677 = inttoptr i64 %cont8086025 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094678 = getelementptr inbounds i64, i64* %cloptr8094677, i64 0             ; &cloptr8094677[0]
  %f8094680 = load i64, i64* %i0ptr8094678, align 8                                  ; load; *i0ptr8094678
  %fptr8094679 = inttoptr i64 %f8094680 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094679(i64 %cont8086025, i64 %rva8089134)          ; tail call
  ret void
}


define void @lam8092085(i64 %env8092086, i64 %rvp8089336) {
  %envptr8094681 = inttoptr i64 %env8092086 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094682 = getelementptr inbounds i64, i64* %envptr8094681, i64 4            ; &envptr8094681[4]
  %cont8086008 = load i64, i64* %envptr8094682, align 8                              ; load; *envptr8094682
  %envptr8094683 = inttoptr i64 %env8092086 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094684 = getelementptr inbounds i64, i64* %envptr8094683, i64 3            ; &envptr8094683[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094684, align 8                      ; load; *envptr8094684
  %envptr8094685 = inttoptr i64 %env8092086 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094686 = getelementptr inbounds i64, i64* %envptr8094685, i64 2            ; &envptr8094685[2]
  %L3s$new = load i64, i64* %envptr8094686, align 8                                  ; load; *envptr8094686
  %envptr8094687 = inttoptr i64 %env8092086 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094688 = getelementptr inbounds i64, i64* %envptr8094687, i64 1            ; &envptr8094687[1]
  %pHq$tail = load i64, i64* %envptr8094688, align 8                                 ; load; *envptr8094688
  %_958086010 = call i64 @prim_car(i64 %rvp8089336)                                  ; call prim_car
  %rvp8089335 = call i64 @prim_cdr(i64 %rvp8089336)                                  ; call prim_cdr
  %PNb$_95t = call i64 @prim_car(i64 %rvp8089335)                                    ; call prim_car
  %na8089253 = call i64 @prim_cdr(i64 %rvp8089335)                                   ; call prim_cdr
  %cloptr8094689 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8094690 = getelementptr inbounds i64, i64* %cloptr8094689, i64 0              ; &cloptr8094689[0]
  %f8094691 = ptrtoint void(i64,i64)* @lam8092083 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094691, i64* %eptr8094690                                             ; store fptr
  %arg8086878 = ptrtoint i64* %cloptr8094689 to i64                                  ; closure cast; i64* -> i64
  %cloptr8094692 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094694 = getelementptr inbounds i64, i64* %cloptr8094692, i64 1              ; &eptr8094694[1]
  %eptr8094695 = getelementptr inbounds i64, i64* %cloptr8094692, i64 2              ; &eptr8094695[2]
  %eptr8094696 = getelementptr inbounds i64, i64* %cloptr8094692, i64 3              ; &eptr8094696[3]
  %eptr8094697 = getelementptr inbounds i64, i64* %cloptr8094692, i64 4              ; &eptr8094697[4]
  store i64 %pHq$tail, i64* %eptr8094694                                             ; *eptr8094694 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094695                                              ; *eptr8094695 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094696                                  ; *eptr8094696 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094697                                          ; *eptr8094697 = %cont8086008
  %eptr8094693 = getelementptr inbounds i64, i64* %cloptr8094692, i64 0              ; &cloptr8094692[0]
  %f8094698 = ptrtoint void(i64,i64)* @lam8092079 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094698, i64* %eptr8094693                                             ; store fptr
  %arg8086877 = ptrtoint i64* %cloptr8094692 to i64                                  ; closure cast; i64* -> i64
  %rva8089334 = add i64 0, 0                                                         ; quoted ()
  %rva8089333 = call i64 @prim_cons(i64 %arg8086877, i64 %rva8089334)                ; call prim_cons
  %cloptr8094699 = inttoptr i64 %arg8086878 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094700 = getelementptr inbounds i64, i64* %cloptr8094699, i64 0             ; &cloptr8094699[0]
  %f8094702 = load i64, i64* %i0ptr8094700, align 8                                  ; load; *i0ptr8094700
  %fptr8094701 = inttoptr i64 %f8094702 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094701(i64 %arg8086878, i64 %rva8089333)           ; tail call
  ret void
}


define void @lam8092083(i64 %env8092084, i64 %sAO$lst8086023) {
  %cont8086022 = call i64 @prim_car(i64 %sAO$lst8086023)                             ; call prim_car
  %sAO$lst = call i64 @prim_cdr(i64 %sAO$lst8086023)                                 ; call prim_cdr
  %arg8086882 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089256 = add i64 0, 0                                                         ; quoted ()
  %rva8089255 = call i64 @prim_cons(i64 %sAO$lst, i64 %rva8089256)                   ; call prim_cons
  %rva8089254 = call i64 @prim_cons(i64 %arg8086882, i64 %rva8089255)                ; call prim_cons
  %cloptr8094703 = inttoptr i64 %cont8086022 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094704 = getelementptr inbounds i64, i64* %cloptr8094703, i64 0             ; &cloptr8094703[0]
  %f8094706 = load i64, i64* %i0ptr8094704, align 8                                  ; load; *i0ptr8094704
  %fptr8094705 = inttoptr i64 %f8094706 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094705(i64 %cont8086022, i64 %rva8089254)          ; tail call
  ret void
}


define void @lam8092079(i64 %env8092080, i64 %rvp8089332) {
  %envptr8094707 = inttoptr i64 %env8092080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094708 = getelementptr inbounds i64, i64* %envptr8094707, i64 4            ; &envptr8094707[4]
  %cont8086008 = load i64, i64* %envptr8094708, align 8                              ; load; *envptr8094708
  %envptr8094709 = inttoptr i64 %env8092080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094710 = getelementptr inbounds i64, i64* %envptr8094709, i64 3            ; &envptr8094709[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094710, align 8                      ; load; *envptr8094710
  %envptr8094711 = inttoptr i64 %env8092080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094712 = getelementptr inbounds i64, i64* %envptr8094711, i64 2            ; &envptr8094711[2]
  %L3s$new = load i64, i64* %envptr8094712, align 8                                  ; load; *envptr8094712
  %envptr8094713 = inttoptr i64 %env8092080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094714 = getelementptr inbounds i64, i64* %envptr8094713, i64 1            ; &envptr8094713[1]
  %pHq$tail = load i64, i64* %envptr8094714, align 8                                 ; load; *envptr8094714
  %_958086020 = call i64 @prim_car(i64 %rvp8089332)                                  ; call prim_car
  %rvp8089331 = call i64 @prim_cdr(i64 %rvp8089332)                                  ; call prim_cdr
  %a8085837 = call i64 @prim_car(i64 %rvp8089331)                                    ; call prim_car
  %na8089258 = call i64 @prim_cdr(i64 %rvp8089331)                                   ; call prim_cdr
  %arg8086885 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086021 = call i64 @prim_make_45vector(i64 %arg8086885, i64 %a8085837)     ; call prim_make_45vector
  %cloptr8094715 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094717 = getelementptr inbounds i64, i64* %cloptr8094715, i64 1              ; &eptr8094717[1]
  %eptr8094718 = getelementptr inbounds i64, i64* %cloptr8094715, i64 2              ; &eptr8094718[2]
  %eptr8094719 = getelementptr inbounds i64, i64* %cloptr8094715, i64 3              ; &eptr8094719[3]
  %eptr8094720 = getelementptr inbounds i64, i64* %cloptr8094715, i64 4              ; &eptr8094720[4]
  store i64 %pHq$tail, i64* %eptr8094717                                             ; *eptr8094717 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094718                                              ; *eptr8094718 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094719                                  ; *eptr8094719 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094720                                          ; *eptr8094720 = %cont8086008
  %eptr8094716 = getelementptr inbounds i64, i64* %cloptr8094715, i64 0              ; &cloptr8094715[0]
  %f8094721 = ptrtoint void(i64,i64)* @lam8092076 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094721, i64* %eptr8094716                                             ; store fptr
  %arg8086888 = ptrtoint i64* %cloptr8094715 to i64                                  ; closure cast; i64* -> i64
  %arg8086887 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089330 = add i64 0, 0                                                         ; quoted ()
  %rva8089329 = call i64 @prim_cons(i64 %retprim8086021, i64 %rva8089330)            ; call prim_cons
  %rva8089328 = call i64 @prim_cons(i64 %arg8086887, i64 %rva8089329)                ; call prim_cons
  %cloptr8094722 = inttoptr i64 %arg8086888 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094723 = getelementptr inbounds i64, i64* %cloptr8094722, i64 0             ; &cloptr8094722[0]
  %f8094725 = load i64, i64* %i0ptr8094723, align 8                                  ; load; *i0ptr8094723
  %fptr8094724 = inttoptr i64 %f8094725 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094724(i64 %arg8086888, i64 %rva8089328)           ; tail call
  ret void
}


define void @lam8092076(i64 %env8092077, i64 %rvp8089327) {
  %envptr8094726 = inttoptr i64 %env8092077 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094727 = getelementptr inbounds i64, i64* %envptr8094726, i64 4            ; &envptr8094726[4]
  %cont8086008 = load i64, i64* %envptr8094727, align 8                              ; load; *envptr8094727
  %envptr8094728 = inttoptr i64 %env8092077 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094729 = getelementptr inbounds i64, i64* %envptr8094728, i64 3            ; &envptr8094728[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094729, align 8                      ; load; *envptr8094729
  %envptr8094730 = inttoptr i64 %env8092077 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094731 = getelementptr inbounds i64, i64* %envptr8094730, i64 2            ; &envptr8094730[2]
  %L3s$new = load i64, i64* %envptr8094731, align 8                                  ; load; *envptr8094731
  %envptr8094732 = inttoptr i64 %env8092077 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094733 = getelementptr inbounds i64, i64* %envptr8094732, i64 1            ; &envptr8094732[1]
  %pHq$tail = load i64, i64* %envptr8094733, align 8                                 ; load; *envptr8094733
  %_958086011 = call i64 @prim_car(i64 %rvp8089327)                                  ; call prim_car
  %rvp8089326 = call i64 @prim_cdr(i64 %rvp8089327)                                  ; call prim_cdr
  %o00$f = call i64 @prim_car(i64 %rvp8089326)                                       ; call prim_car
  %na8089260 = call i64 @prim_cdr(i64 %rvp8089326)                                   ; call prim_cdr
  %cloptr8094734 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094736 = getelementptr inbounds i64, i64* %cloptr8094734, i64 1              ; &eptr8094736[1]
  %eptr8094737 = getelementptr inbounds i64, i64* %cloptr8094734, i64 2              ; &eptr8094737[2]
  %eptr8094738 = getelementptr inbounds i64, i64* %cloptr8094734, i64 3              ; &eptr8094738[3]
  store i64 %pHq$tail, i64* %eptr8094736                                             ; *eptr8094736 = %pHq$tail
  store i64 %syN$_37wind_45stack, i64* %eptr8094737                                  ; *eptr8094737 = %syN$_37wind_45stack
  store i64 %o00$f, i64* %eptr8094738                                                ; *eptr8094738 = %o00$f
  %eptr8094735 = getelementptr inbounds i64, i64* %cloptr8094734, i64 0              ; &cloptr8094734[0]
  %f8094739 = ptrtoint void(i64,i64)* @lam8092074 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094739, i64* %eptr8094735                                             ; store fptr
  %mxx$f8085708 = ptrtoint i64* %cloptr8094734 to i64                                ; closure cast; i64* -> i64
  %arg8086955 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %vT1$_95t = call i64 @prim_vector_45set_33(i64 %o00$f, i64 %arg8086955, i64 %mxx$f8085708); call prim_vector_45set_33
  %arg8086957 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085849 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8086957)               ; call prim_vector_45ref
  %a8085850 = call i64 @prim_procedure_63(i64 %a8085849)                             ; call prim_procedure_63
  %cmp8094740 = icmp eq i64 %a8085850, 15                                            ; false?
  br i1 %cmp8094740, label %else8094742, label %then8094741                          ; if

then8094741:
  %arg8086960 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085851 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8086960)               ; call prim_vector_45ref
  %rva8089322 = add i64 0, 0                                                         ; quoted ()
  %rva8089321 = call i64 @prim_cons(i64 %L3s$new, i64 %rva8089322)                   ; call prim_cons
  %rva8089320 = call i64 @prim_cons(i64 %cont8086008, i64 %rva8089321)               ; call prim_cons
  %cloptr8094743 = inttoptr i64 %a8085851 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094744 = getelementptr inbounds i64, i64* %cloptr8094743, i64 0             ; &cloptr8094743[0]
  %f8094746 = load i64, i64* %i0ptr8094744, align 8                                  ; load; *i0ptr8094744
  %fptr8094745 = inttoptr i64 %f8094746 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094745(i64 %a8085851, i64 %rva8089320)             ; tail call
  ret void

else8094742:
  %arg8086965 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094747, i32 0, i32 0)); quoted string
  %retprim8086019 = call i64 @prim_halt(i64 %arg8086965)                             ; call prim_halt
  %arg8086967 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089325 = add i64 0, 0                                                         ; quoted ()
  %rva8089324 = call i64 @prim_cons(i64 %retprim8086019, i64 %rva8089325)            ; call prim_cons
  %rva8089323 = call i64 @prim_cons(i64 %arg8086967, i64 %rva8089324)                ; call prim_cons
  %cloptr8094748 = inttoptr i64 %cont8086008 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094749 = getelementptr inbounds i64, i64* %cloptr8094748, i64 0             ; &cloptr8094748[0]
  %f8094751 = load i64, i64* %i0ptr8094749, align 8                                  ; load; *i0ptr8094749
  %fptr8094750 = inttoptr i64 %f8094751 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094750(i64 %cont8086008, i64 %rva8089323)          ; tail call
  ret void
}


define void @lam8092074(i64 %env8092075, i64 %rvp8089319) {
  %envptr8094752 = inttoptr i64 %env8092075 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094753 = getelementptr inbounds i64, i64* %envptr8094752, i64 3            ; &envptr8094752[3]
  %o00$f = load i64, i64* %envptr8094753, align 8                                    ; load; *envptr8094753
  %envptr8094754 = inttoptr i64 %env8092075 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094755 = getelementptr inbounds i64, i64* %envptr8094754, i64 2            ; &envptr8094754[2]
  %syN$_37wind_45stack = load i64, i64* %envptr8094755, align 8                      ; load; *envptr8094755
  %envptr8094756 = inttoptr i64 %env8092075 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094757 = getelementptr inbounds i64, i64* %envptr8094756, i64 1            ; &envptr8094756[1]
  %pHq$tail = load i64, i64* %envptr8094757, align 8                                 ; load; *envptr8094757
  %cont8086012 = call i64 @prim_car(i64 %rvp8089319)                                 ; call prim_car
  %rvp8089318 = call i64 @prim_cdr(i64 %rvp8089319)                                  ; call prim_cdr
  %Hil$l = call i64 @prim_car(i64 %rvp8089318)                                       ; call prim_car
  %na8089262 = call i64 @prim_cdr(i64 %rvp8089318)                                   ; call prim_cdr
  %a8085838 = call i64 @prim_eq_63(i64 %Hil$l, i64 %pHq$tail)                        ; call prim_eq_63
  %a8085839 = call i64 @prim_not(i64 %a8085838)                                      ; call prim_not
  %cmp8094758 = icmp eq i64 %a8085839, 15                                            ; false?
  br i1 %cmp8094758, label %else8094760, label %then8094759                          ; if

then8094759:
  %arg8086892 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085840 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8086892)               ; call prim_vector_45ref
  %a8085841 = call i64 @prim_procedure_63(i64 %a8085840)                             ; call prim_procedure_63
  %cmp8094761 = icmp eq i64 %a8085841, 15                                            ; false?
  br i1 %cmp8094761, label %else8094763, label %then8094762                          ; if

then8094762:
  %arg8086895 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085842 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8086895)               ; call prim_vector_45ref
  %a8085843 = call i64 @prim_cdr(i64 %Hil$l)                                         ; call prim_cdr
  %cloptr8094764 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094766 = getelementptr inbounds i64, i64* %cloptr8094764, i64 1              ; &eptr8094766[1]
  %eptr8094767 = getelementptr inbounds i64, i64* %cloptr8094764, i64 2              ; &eptr8094767[2]
  %eptr8094768 = getelementptr inbounds i64, i64* %cloptr8094764, i64 3              ; &eptr8094768[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094766                                  ; *eptr8094766 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094767                                          ; *eptr8094767 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094768                                                ; *eptr8094768 = %Hil$l
  %eptr8094765 = getelementptr inbounds i64, i64* %cloptr8094764, i64 0              ; &cloptr8094764[0]
  %f8094769 = ptrtoint void(i64,i64)* @lam8092049 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094769, i64* %eptr8094765                                             ; store fptr
  %arg8086899 = ptrtoint i64* %cloptr8094764 to i64                                  ; closure cast; i64* -> i64
  %rva8089288 = add i64 0, 0                                                         ; quoted ()
  %rva8089287 = call i64 @prim_cons(i64 %a8085843, i64 %rva8089288)                  ; call prim_cons
  %rva8089286 = call i64 @prim_cons(i64 %arg8086899, i64 %rva8089287)                ; call prim_cons
  %cloptr8094770 = inttoptr i64 %a8085842 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094771 = getelementptr inbounds i64, i64* %cloptr8094770, i64 0             ; &cloptr8094770[0]
  %f8094773 = load i64, i64* %i0ptr8094771, align 8                                  ; load; *i0ptr8094771
  %fptr8094772 = inttoptr i64 %f8094773 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094772(i64 %a8085842, i64 %rva8089286)             ; tail call
  ret void

else8094763:
  %arg8086924 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094774, i32 0, i32 0)); quoted string
  %retprim8086017 = call i64 @prim_halt(i64 %arg8086924)                             ; call prim_halt
  %cloptr8094775 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094777 = getelementptr inbounds i64, i64* %cloptr8094775, i64 1              ; &eptr8094777[1]
  %eptr8094778 = getelementptr inbounds i64, i64* %cloptr8094775, i64 2              ; &eptr8094778[2]
  %eptr8094779 = getelementptr inbounds i64, i64* %cloptr8094775, i64 3              ; &eptr8094779[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094777                                  ; *eptr8094777 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094778                                          ; *eptr8094778 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094779                                                ; *eptr8094779 = %Hil$l
  %eptr8094776 = getelementptr inbounds i64, i64* %cloptr8094775, i64 0              ; &cloptr8094775[0]
  %f8094780 = ptrtoint void(i64,i64)* @lam8092068 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094780, i64* %eptr8094776                                             ; store fptr
  %arg8086927 = ptrtoint i64* %cloptr8094775 to i64                                  ; closure cast; i64* -> i64
  %arg8086926 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089314 = add i64 0, 0                                                         ; quoted ()
  %rva8089313 = call i64 @prim_cons(i64 %retprim8086017, i64 %rva8089314)            ; call prim_cons
  %rva8089312 = call i64 @prim_cons(i64 %arg8086926, i64 %rva8089313)                ; call prim_cons
  %cloptr8094781 = inttoptr i64 %arg8086927 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094782 = getelementptr inbounds i64, i64* %cloptr8094781, i64 0             ; &cloptr8094781[0]
  %f8094784 = load i64, i64* %i0ptr8094782, align 8                                  ; load; *i0ptr8094782
  %fptr8094783 = inttoptr i64 %f8094784 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094783(i64 %arg8086927, i64 %rva8089312)           ; tail call
  ret void

else8094760:
  %retprim8086018 = call i64 @prim_void()                                            ; call prim_void
  %arg8086952 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089317 = add i64 0, 0                                                         ; quoted ()
  %rva8089316 = call i64 @prim_cons(i64 %retprim8086018, i64 %rva8089317)            ; call prim_cons
  %rva8089315 = call i64 @prim_cons(i64 %arg8086952, i64 %rva8089316)                ; call prim_cons
  %cloptr8094785 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094786 = getelementptr inbounds i64, i64* %cloptr8094785, i64 0             ; &cloptr8094785[0]
  %f8094788 = load i64, i64* %i0ptr8094786, align 8                                  ; load; *i0ptr8094786
  %fptr8094787 = inttoptr i64 %f8094788 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094787(i64 %cont8086012, i64 %rva8089315)          ; tail call
  ret void
}


define void @lam8092068(i64 %env8092069, i64 %rvp8089311) {
  %envptr8094789 = inttoptr i64 %env8092069 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094790 = getelementptr inbounds i64, i64* %envptr8094789, i64 3            ; &envptr8094789[3]
  %Hil$l = load i64, i64* %envptr8094790, align 8                                    ; load; *envptr8094790
  %envptr8094791 = inttoptr i64 %env8092069 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094792 = getelementptr inbounds i64, i64* %envptr8094791, i64 2            ; &envptr8094791[2]
  %cont8086012 = load i64, i64* %envptr8094792, align 8                              ; load; *envptr8094792
  %envptr8094793 = inttoptr i64 %env8092069 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094794 = getelementptr inbounds i64, i64* %envptr8094793, i64 1            ; &envptr8094793[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094794, align 8                      ; load; *envptr8094794
  %_958086013 = call i64 @prim_car(i64 %rvp8089311)                                  ; call prim_car
  %rvp8089310 = call i64 @prim_cdr(i64 %rvp8089311)                                  ; call prim_cdr
  %p45$_95t = call i64 @prim_car(i64 %rvp8089310)                                    ; call prim_car
  %na8089290 = call i64 @prim_cdr(i64 %rvp8089310)                                   ; call prim_cdr
  %a8085844 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085845 = call i64 @prim_car(i64 %a8085844)                                      ; call prim_car
  %a8085846 = call i64 @prim_procedure_63(i64 %a8085845)                             ; call prim_procedure_63
  %cmp8094795 = icmp eq i64 %a8085846, 15                                            ; false?
  br i1 %cmp8094795, label %else8094797, label %then8094796                          ; if

then8094796:
  %a8085847 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085848 = call i64 @prim_car(i64 %a8085847)                                      ; call prim_car
  %cloptr8094798 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094800 = getelementptr inbounds i64, i64* %cloptr8094798, i64 1              ; &eptr8094800[1]
  %eptr8094801 = getelementptr inbounds i64, i64* %cloptr8094798, i64 2              ; &eptr8094801[2]
  %eptr8094802 = getelementptr inbounds i64, i64* %cloptr8094798, i64 3              ; &eptr8094802[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094800                                  ; *eptr8094800 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094801                                          ; *eptr8094801 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094802                                                ; *eptr8094802 = %Hil$l
  %eptr8094799 = getelementptr inbounds i64, i64* %cloptr8094798, i64 0              ; &cloptr8094798[0]
  %f8094803 = ptrtoint void(i64,i64)* @lam8092058 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094803, i64* %eptr8094799                                             ; store fptr
  %arg8086933 = ptrtoint i64* %cloptr8094798 to i64                                  ; closure cast; i64* -> i64
  %rva8089299 = add i64 0, 0                                                         ; quoted ()
  %rva8089298 = call i64 @prim_cons(i64 %arg8086933, i64 %rva8089299)                ; call prim_cons
  %cloptr8094804 = inttoptr i64 %a8085848 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094805 = getelementptr inbounds i64, i64* %cloptr8094804, i64 0             ; &cloptr8094804[0]
  %f8094807 = load i64, i64* %i0ptr8094805, align 8                                  ; load; *i0ptr8094805
  %fptr8094806 = inttoptr i64 %f8094807 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094806(i64 %a8085848, i64 %rva8089298)             ; tail call
  ret void

else8094797:
  %arg8086941 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094808, i32 0, i32 0)); quoted string
  %retprim8086016 = call i64 @prim_halt(i64 %arg8086941)                             ; call prim_halt
  %cloptr8094809 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094811 = getelementptr inbounds i64, i64* %cloptr8094809, i64 1              ; &eptr8094811[1]
  %eptr8094812 = getelementptr inbounds i64, i64* %cloptr8094809, i64 2              ; &eptr8094812[2]
  %eptr8094813 = getelementptr inbounds i64, i64* %cloptr8094809, i64 3              ; &eptr8094813[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094811                                  ; *eptr8094811 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094812                                          ; *eptr8094812 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094813                                                ; *eptr8094813 = %Hil$l
  %eptr8094810 = getelementptr inbounds i64, i64* %cloptr8094809, i64 0              ; &cloptr8094809[0]
  %f8094814 = ptrtoint void(i64,i64)* @lam8092065 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094814, i64* %eptr8094810                                             ; store fptr
  %arg8086944 = ptrtoint i64* %cloptr8094809 to i64                                  ; closure cast; i64* -> i64
  %arg8086943 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089309 = add i64 0, 0                                                         ; quoted ()
  %rva8089308 = call i64 @prim_cons(i64 %retprim8086016, i64 %rva8089309)            ; call prim_cons
  %rva8089307 = call i64 @prim_cons(i64 %arg8086943, i64 %rva8089308)                ; call prim_cons
  %cloptr8094815 = inttoptr i64 %arg8086944 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094816 = getelementptr inbounds i64, i64* %cloptr8094815, i64 0             ; &cloptr8094815[0]
  %f8094818 = load i64, i64* %i0ptr8094816, align 8                                  ; load; *i0ptr8094816
  %fptr8094817 = inttoptr i64 %f8094818 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094817(i64 %arg8086944, i64 %rva8089307)           ; tail call
  ret void
}


define void @lam8092065(i64 %env8092066, i64 %rvp8089306) {
  %envptr8094819 = inttoptr i64 %env8092066 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094820 = getelementptr inbounds i64, i64* %envptr8094819, i64 3            ; &envptr8094819[3]
  %Hil$l = load i64, i64* %envptr8094820, align 8                                    ; load; *envptr8094820
  %envptr8094821 = inttoptr i64 %env8092066 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094822 = getelementptr inbounds i64, i64* %envptr8094821, i64 2            ; &envptr8094821[2]
  %cont8086012 = load i64, i64* %envptr8094822, align 8                              ; load; *envptr8094822
  %envptr8094823 = inttoptr i64 %env8092066 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094824 = getelementptr inbounds i64, i64* %envptr8094823, i64 1            ; &envptr8094823[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094824, align 8                      ; load; *envptr8094824
  %_958086014 = call i64 @prim_car(i64 %rvp8089306)                                  ; call prim_car
  %rvp8089305 = call i64 @prim_cdr(i64 %rvp8089306)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089305)                                    ; call prim_car
  %na8089301 = call i64 @prim_cdr(i64 %rvp8089305)                                   ; call prim_cdr
  %arg8086946 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086946, i64 %Hil$l); call prim_vector_45set_33
  %arg8086949 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089304 = add i64 0, 0                                                         ; quoted ()
  %rva8089303 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089304)            ; call prim_cons
  %rva8089302 = call i64 @prim_cons(i64 %arg8086949, i64 %rva8089303)                ; call prim_cons
  %cloptr8094825 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094826 = getelementptr inbounds i64, i64* %cloptr8094825, i64 0             ; &cloptr8094825[0]
  %f8094828 = load i64, i64* %i0ptr8094826, align 8                                  ; load; *i0ptr8094826
  %fptr8094827 = inttoptr i64 %f8094828 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094827(i64 %cont8086012, i64 %rva8089302)          ; tail call
  ret void
}


define void @lam8092058(i64 %env8092059, i64 %rvp8089297) {
  %envptr8094829 = inttoptr i64 %env8092059 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094830 = getelementptr inbounds i64, i64* %envptr8094829, i64 3            ; &envptr8094829[3]
  %Hil$l = load i64, i64* %envptr8094830, align 8                                    ; load; *envptr8094830
  %envptr8094831 = inttoptr i64 %env8092059 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094832 = getelementptr inbounds i64, i64* %envptr8094831, i64 2            ; &envptr8094831[2]
  %cont8086012 = load i64, i64* %envptr8094832, align 8                              ; load; *envptr8094832
  %envptr8094833 = inttoptr i64 %env8092059 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094834 = getelementptr inbounds i64, i64* %envptr8094833, i64 1            ; &envptr8094833[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094834, align 8                      ; load; *envptr8094834
  %_958086014 = call i64 @prim_car(i64 %rvp8089297)                                  ; call prim_car
  %rvp8089296 = call i64 @prim_cdr(i64 %rvp8089297)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089296)                                    ; call prim_car
  %na8089292 = call i64 @prim_cdr(i64 %rvp8089296)                                   ; call prim_cdr
  %arg8086936 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086936, i64 %Hil$l); call prim_vector_45set_33
  %arg8086939 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089295 = add i64 0, 0                                                         ; quoted ()
  %rva8089294 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089295)            ; call prim_cons
  %rva8089293 = call i64 @prim_cons(i64 %arg8086939, i64 %rva8089294)                ; call prim_cons
  %cloptr8094835 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094836 = getelementptr inbounds i64, i64* %cloptr8094835, i64 0             ; &cloptr8094835[0]
  %f8094838 = load i64, i64* %i0ptr8094836, align 8                                  ; load; *i0ptr8094836
  %fptr8094837 = inttoptr i64 %f8094838 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094837(i64 %cont8086012, i64 %rva8089293)          ; tail call
  ret void
}


define void @lam8092049(i64 %env8092050, i64 %rvp8089285) {
  %envptr8094839 = inttoptr i64 %env8092050 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094840 = getelementptr inbounds i64, i64* %envptr8094839, i64 3            ; &envptr8094839[3]
  %Hil$l = load i64, i64* %envptr8094840, align 8                                    ; load; *envptr8094840
  %envptr8094841 = inttoptr i64 %env8092050 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094842 = getelementptr inbounds i64, i64* %envptr8094841, i64 2            ; &envptr8094841[2]
  %cont8086012 = load i64, i64* %envptr8094842, align 8                              ; load; *envptr8094842
  %envptr8094843 = inttoptr i64 %env8092050 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094844 = getelementptr inbounds i64, i64* %envptr8094843, i64 1            ; &envptr8094843[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094844, align 8                      ; load; *envptr8094844
  %_958086013 = call i64 @prim_car(i64 %rvp8089285)                                  ; call prim_car
  %rvp8089284 = call i64 @prim_cdr(i64 %rvp8089285)                                  ; call prim_cdr
  %p45$_95t = call i64 @prim_car(i64 %rvp8089284)                                    ; call prim_car
  %na8089264 = call i64 @prim_cdr(i64 %rvp8089284)                                   ; call prim_cdr
  %a8085844 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085845 = call i64 @prim_car(i64 %a8085844)                                      ; call prim_car
  %a8085846 = call i64 @prim_procedure_63(i64 %a8085845)                             ; call prim_procedure_63
  %cmp8094845 = icmp eq i64 %a8085846, 15                                            ; false?
  br i1 %cmp8094845, label %else8094847, label %then8094846                          ; if

then8094846:
  %a8085847 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085848 = call i64 @prim_car(i64 %a8085847)                                      ; call prim_car
  %cloptr8094848 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094850 = getelementptr inbounds i64, i64* %cloptr8094848, i64 1              ; &eptr8094850[1]
  %eptr8094851 = getelementptr inbounds i64, i64* %cloptr8094848, i64 2              ; &eptr8094851[2]
  %eptr8094852 = getelementptr inbounds i64, i64* %cloptr8094848, i64 3              ; &eptr8094852[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094850                                  ; *eptr8094850 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094851                                          ; *eptr8094851 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094852                                                ; *eptr8094852 = %Hil$l
  %eptr8094849 = getelementptr inbounds i64, i64* %cloptr8094848, i64 0              ; &cloptr8094848[0]
  %f8094853 = ptrtoint void(i64,i64)* @lam8092039 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094853, i64* %eptr8094849                                             ; store fptr
  %arg8086906 = ptrtoint i64* %cloptr8094848 to i64                                  ; closure cast; i64* -> i64
  %rva8089273 = add i64 0, 0                                                         ; quoted ()
  %rva8089272 = call i64 @prim_cons(i64 %arg8086906, i64 %rva8089273)                ; call prim_cons
  %cloptr8094854 = inttoptr i64 %a8085848 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094855 = getelementptr inbounds i64, i64* %cloptr8094854, i64 0             ; &cloptr8094854[0]
  %f8094857 = load i64, i64* %i0ptr8094855, align 8                                  ; load; *i0ptr8094855
  %fptr8094856 = inttoptr i64 %f8094857 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094856(i64 %a8085848, i64 %rva8089272)             ; tail call
  ret void

else8094847:
  %arg8086914 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094858, i32 0, i32 0)); quoted string
  %retprim8086016 = call i64 @prim_halt(i64 %arg8086914)                             ; call prim_halt
  %cloptr8094859 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094861 = getelementptr inbounds i64, i64* %cloptr8094859, i64 1              ; &eptr8094861[1]
  %eptr8094862 = getelementptr inbounds i64, i64* %cloptr8094859, i64 2              ; &eptr8094862[2]
  %eptr8094863 = getelementptr inbounds i64, i64* %cloptr8094859, i64 3              ; &eptr8094863[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094861                                  ; *eptr8094861 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094862                                          ; *eptr8094862 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094863                                                ; *eptr8094863 = %Hil$l
  %eptr8094860 = getelementptr inbounds i64, i64* %cloptr8094859, i64 0              ; &cloptr8094859[0]
  %f8094864 = ptrtoint void(i64,i64)* @lam8092046 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094864, i64* %eptr8094860                                             ; store fptr
  %arg8086917 = ptrtoint i64* %cloptr8094859 to i64                                  ; closure cast; i64* -> i64
  %arg8086916 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089283 = add i64 0, 0                                                         ; quoted ()
  %rva8089282 = call i64 @prim_cons(i64 %retprim8086016, i64 %rva8089283)            ; call prim_cons
  %rva8089281 = call i64 @prim_cons(i64 %arg8086916, i64 %rva8089282)                ; call prim_cons
  %cloptr8094865 = inttoptr i64 %arg8086917 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094866 = getelementptr inbounds i64, i64* %cloptr8094865, i64 0             ; &cloptr8094865[0]
  %f8094868 = load i64, i64* %i0ptr8094866, align 8                                  ; load; *i0ptr8094866
  %fptr8094867 = inttoptr i64 %f8094868 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094867(i64 %arg8086917, i64 %rva8089281)           ; tail call
  ret void
}


define void @lam8092046(i64 %env8092047, i64 %rvp8089280) {
  %envptr8094869 = inttoptr i64 %env8092047 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094870 = getelementptr inbounds i64, i64* %envptr8094869, i64 3            ; &envptr8094869[3]
  %Hil$l = load i64, i64* %envptr8094870, align 8                                    ; load; *envptr8094870
  %envptr8094871 = inttoptr i64 %env8092047 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094872 = getelementptr inbounds i64, i64* %envptr8094871, i64 2            ; &envptr8094871[2]
  %cont8086012 = load i64, i64* %envptr8094872, align 8                              ; load; *envptr8094872
  %envptr8094873 = inttoptr i64 %env8092047 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094874 = getelementptr inbounds i64, i64* %envptr8094873, i64 1            ; &envptr8094873[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094874, align 8                      ; load; *envptr8094874
  %_958086014 = call i64 @prim_car(i64 %rvp8089280)                                  ; call prim_car
  %rvp8089279 = call i64 @prim_cdr(i64 %rvp8089280)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089279)                                    ; call prim_car
  %na8089275 = call i64 @prim_cdr(i64 %rvp8089279)                                   ; call prim_cdr
  %arg8086919 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086919, i64 %Hil$l); call prim_vector_45set_33
  %arg8086922 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089278 = add i64 0, 0                                                         ; quoted ()
  %rva8089277 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089278)            ; call prim_cons
  %rva8089276 = call i64 @prim_cons(i64 %arg8086922, i64 %rva8089277)                ; call prim_cons
  %cloptr8094875 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094876 = getelementptr inbounds i64, i64* %cloptr8094875, i64 0             ; &cloptr8094875[0]
  %f8094878 = load i64, i64* %i0ptr8094876, align 8                                  ; load; *i0ptr8094876
  %fptr8094877 = inttoptr i64 %f8094878 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094877(i64 %cont8086012, i64 %rva8089276)          ; tail call
  ret void
}


define void @lam8092039(i64 %env8092040, i64 %rvp8089271) {
  %envptr8094879 = inttoptr i64 %env8092040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094880 = getelementptr inbounds i64, i64* %envptr8094879, i64 3            ; &envptr8094879[3]
  %Hil$l = load i64, i64* %envptr8094880, align 8                                    ; load; *envptr8094880
  %envptr8094881 = inttoptr i64 %env8092040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094882 = getelementptr inbounds i64, i64* %envptr8094881, i64 2            ; &envptr8094881[2]
  %cont8086012 = load i64, i64* %envptr8094882, align 8                              ; load; *envptr8094882
  %envptr8094883 = inttoptr i64 %env8092040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094884 = getelementptr inbounds i64, i64* %envptr8094883, i64 1            ; &envptr8094883[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8094884, align 8                      ; load; *envptr8094884
  %_958086014 = call i64 @prim_car(i64 %rvp8089271)                                  ; call prim_car
  %rvp8089270 = call i64 @prim_cdr(i64 %rvp8089271)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089270)                                    ; call prim_car
  %na8089266 = call i64 @prim_cdr(i64 %rvp8089270)                                   ; call prim_cdr
  %arg8086909 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086909, i64 %Hil$l); call prim_vector_45set_33
  %arg8086912 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089269 = add i64 0, 0                                                         ; quoted ()
  %rva8089268 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089269)            ; call prim_cons
  %rva8089267 = call i64 @prim_cons(i64 %arg8086912, i64 %rva8089268)                ; call prim_cons
  %cloptr8094885 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094886 = getelementptr inbounds i64, i64* %cloptr8094885, i64 0             ; &cloptr8094885[0]
  %f8094888 = load i64, i64* %i0ptr8094886, align 8                                  ; load; *i0ptr8094886
  %fptr8094887 = inttoptr i64 %f8094888 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094887(i64 %cont8086012, i64 %rva8089267)          ; tail call
  ret void
}


define void @lam8092018(i64 %env8092019, i64 %rvp8089248) {
  %envptr8094889 = inttoptr i64 %env8092019 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094890 = getelementptr inbounds i64, i64* %envptr8094889, i64 4            ; &envptr8094889[4]
  %cont8086008 = load i64, i64* %envptr8094890, align 8                              ; load; *envptr8094890
  %envptr8094891 = inttoptr i64 %env8092019 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094892 = getelementptr inbounds i64, i64* %envptr8094891, i64 3            ; &envptr8094891[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094892, align 8                      ; load; *envptr8094892
  %envptr8094893 = inttoptr i64 %env8092019 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094894 = getelementptr inbounds i64, i64* %envptr8094893, i64 2            ; &envptr8094893[2]
  %L3s$new = load i64, i64* %envptr8094894, align 8                                  ; load; *envptr8094894
  %envptr8094895 = inttoptr i64 %env8092019 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094896 = getelementptr inbounds i64, i64* %envptr8094895, i64 1            ; &envptr8094895[1]
  %pHq$tail = load i64, i64* %envptr8094896, align 8                                 ; load; *envptr8094896
  %_958086010 = call i64 @prim_car(i64 %rvp8089248)                                  ; call prim_car
  %rvp8089247 = call i64 @prim_cdr(i64 %rvp8089248)                                  ; call prim_cdr
  %PNb$_95t = call i64 @prim_car(i64 %rvp8089247)                                    ; call prim_car
  %na8089165 = call i64 @prim_cdr(i64 %rvp8089247)                                   ; call prim_cdr
  %cloptr8094897 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8094898 = getelementptr inbounds i64, i64* %cloptr8094897, i64 0              ; &cloptr8094897[0]
  %f8094899 = ptrtoint void(i64,i64)* @lam8092016 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094899, i64* %eptr8094898                                             ; store fptr
  %arg8086782 = ptrtoint i64* %cloptr8094897 to i64                                  ; closure cast; i64* -> i64
  %cloptr8094900 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094902 = getelementptr inbounds i64, i64* %cloptr8094900, i64 1              ; &eptr8094902[1]
  %eptr8094903 = getelementptr inbounds i64, i64* %cloptr8094900, i64 2              ; &eptr8094903[2]
  %eptr8094904 = getelementptr inbounds i64, i64* %cloptr8094900, i64 3              ; &eptr8094904[3]
  %eptr8094905 = getelementptr inbounds i64, i64* %cloptr8094900, i64 4              ; &eptr8094905[4]
  store i64 %pHq$tail, i64* %eptr8094902                                             ; *eptr8094902 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094903                                              ; *eptr8094903 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094904                                  ; *eptr8094904 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094905                                          ; *eptr8094905 = %cont8086008
  %eptr8094901 = getelementptr inbounds i64, i64* %cloptr8094900, i64 0              ; &cloptr8094900[0]
  %f8094906 = ptrtoint void(i64,i64)* @lam8092012 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094906, i64* %eptr8094901                                             ; store fptr
  %arg8086781 = ptrtoint i64* %cloptr8094900 to i64                                  ; closure cast; i64* -> i64
  %rva8089246 = add i64 0, 0                                                         ; quoted ()
  %rva8089245 = call i64 @prim_cons(i64 %arg8086781, i64 %rva8089246)                ; call prim_cons
  %cloptr8094907 = inttoptr i64 %arg8086782 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094908 = getelementptr inbounds i64, i64* %cloptr8094907, i64 0             ; &cloptr8094907[0]
  %f8094910 = load i64, i64* %i0ptr8094908, align 8                                  ; load; *i0ptr8094908
  %fptr8094909 = inttoptr i64 %f8094910 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094909(i64 %arg8086782, i64 %rva8089245)           ; tail call
  ret void
}


define void @lam8092016(i64 %env8092017, i64 %sAO$lst8086023) {
  %cont8086022 = call i64 @prim_car(i64 %sAO$lst8086023)                             ; call prim_car
  %sAO$lst = call i64 @prim_cdr(i64 %sAO$lst8086023)                                 ; call prim_cdr
  %arg8086786 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089168 = add i64 0, 0                                                         ; quoted ()
  %rva8089167 = call i64 @prim_cons(i64 %sAO$lst, i64 %rva8089168)                   ; call prim_cons
  %rva8089166 = call i64 @prim_cons(i64 %arg8086786, i64 %rva8089167)                ; call prim_cons
  %cloptr8094911 = inttoptr i64 %cont8086022 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094912 = getelementptr inbounds i64, i64* %cloptr8094911, i64 0             ; &cloptr8094911[0]
  %f8094914 = load i64, i64* %i0ptr8094912, align 8                                  ; load; *i0ptr8094912
  %fptr8094913 = inttoptr i64 %f8094914 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094913(i64 %cont8086022, i64 %rva8089166)          ; tail call
  ret void
}


define void @lam8092012(i64 %env8092013, i64 %rvp8089244) {
  %envptr8094915 = inttoptr i64 %env8092013 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094916 = getelementptr inbounds i64, i64* %envptr8094915, i64 4            ; &envptr8094915[4]
  %cont8086008 = load i64, i64* %envptr8094916, align 8                              ; load; *envptr8094916
  %envptr8094917 = inttoptr i64 %env8092013 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094918 = getelementptr inbounds i64, i64* %envptr8094917, i64 3            ; &envptr8094917[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094918, align 8                      ; load; *envptr8094918
  %envptr8094919 = inttoptr i64 %env8092013 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094920 = getelementptr inbounds i64, i64* %envptr8094919, i64 2            ; &envptr8094919[2]
  %L3s$new = load i64, i64* %envptr8094920, align 8                                  ; load; *envptr8094920
  %envptr8094921 = inttoptr i64 %env8092013 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094922 = getelementptr inbounds i64, i64* %envptr8094921, i64 1            ; &envptr8094921[1]
  %pHq$tail = load i64, i64* %envptr8094922, align 8                                 ; load; *envptr8094922
  %_958086020 = call i64 @prim_car(i64 %rvp8089244)                                  ; call prim_car
  %rvp8089243 = call i64 @prim_cdr(i64 %rvp8089244)                                  ; call prim_cdr
  %a8085837 = call i64 @prim_car(i64 %rvp8089243)                                    ; call prim_car
  %na8089170 = call i64 @prim_cdr(i64 %rvp8089243)                                   ; call prim_cdr
  %arg8086789 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086021 = call i64 @prim_make_45vector(i64 %arg8086789, i64 %a8085837)     ; call prim_make_45vector
  %cloptr8094923 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8094925 = getelementptr inbounds i64, i64* %cloptr8094923, i64 1              ; &eptr8094925[1]
  %eptr8094926 = getelementptr inbounds i64, i64* %cloptr8094923, i64 2              ; &eptr8094926[2]
  %eptr8094927 = getelementptr inbounds i64, i64* %cloptr8094923, i64 3              ; &eptr8094927[3]
  %eptr8094928 = getelementptr inbounds i64, i64* %cloptr8094923, i64 4              ; &eptr8094928[4]
  store i64 %pHq$tail, i64* %eptr8094925                                             ; *eptr8094925 = %pHq$tail
  store i64 %L3s$new, i64* %eptr8094926                                              ; *eptr8094926 = %L3s$new
  store i64 %syN$_37wind_45stack, i64* %eptr8094927                                  ; *eptr8094927 = %syN$_37wind_45stack
  store i64 %cont8086008, i64* %eptr8094928                                          ; *eptr8094928 = %cont8086008
  %eptr8094924 = getelementptr inbounds i64, i64* %cloptr8094923, i64 0              ; &cloptr8094923[0]
  %f8094929 = ptrtoint void(i64,i64)* @lam8092009 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094929, i64* %eptr8094924                                             ; store fptr
  %arg8086792 = ptrtoint i64* %cloptr8094923 to i64                                  ; closure cast; i64* -> i64
  %arg8086791 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089242 = add i64 0, 0                                                         ; quoted ()
  %rva8089241 = call i64 @prim_cons(i64 %retprim8086021, i64 %rva8089242)            ; call prim_cons
  %rva8089240 = call i64 @prim_cons(i64 %arg8086791, i64 %rva8089241)                ; call prim_cons
  %cloptr8094930 = inttoptr i64 %arg8086792 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094931 = getelementptr inbounds i64, i64* %cloptr8094930, i64 0             ; &cloptr8094930[0]
  %f8094933 = load i64, i64* %i0ptr8094931, align 8                                  ; load; *i0ptr8094931
  %fptr8094932 = inttoptr i64 %f8094933 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094932(i64 %arg8086792, i64 %rva8089240)           ; tail call
  ret void
}


define void @lam8092009(i64 %env8092010, i64 %rvp8089239) {
  %envptr8094934 = inttoptr i64 %env8092010 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094935 = getelementptr inbounds i64, i64* %envptr8094934, i64 4            ; &envptr8094934[4]
  %cont8086008 = load i64, i64* %envptr8094935, align 8                              ; load; *envptr8094935
  %envptr8094936 = inttoptr i64 %env8092010 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094937 = getelementptr inbounds i64, i64* %envptr8094936, i64 3            ; &envptr8094936[3]
  %syN$_37wind_45stack = load i64, i64* %envptr8094937, align 8                      ; load; *envptr8094937
  %envptr8094938 = inttoptr i64 %env8092010 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094939 = getelementptr inbounds i64, i64* %envptr8094938, i64 2            ; &envptr8094938[2]
  %L3s$new = load i64, i64* %envptr8094939, align 8                                  ; load; *envptr8094939
  %envptr8094940 = inttoptr i64 %env8092010 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094941 = getelementptr inbounds i64, i64* %envptr8094940, i64 1            ; &envptr8094940[1]
  %pHq$tail = load i64, i64* %envptr8094941, align 8                                 ; load; *envptr8094941
  %_958086011 = call i64 @prim_car(i64 %rvp8089239)                                  ; call prim_car
  %rvp8089238 = call i64 @prim_cdr(i64 %rvp8089239)                                  ; call prim_cdr
  %o00$f = call i64 @prim_car(i64 %rvp8089238)                                       ; call prim_car
  %na8089172 = call i64 @prim_cdr(i64 %rvp8089238)                                   ; call prim_cdr
  %cloptr8094942 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094944 = getelementptr inbounds i64, i64* %cloptr8094942, i64 1              ; &eptr8094944[1]
  %eptr8094945 = getelementptr inbounds i64, i64* %cloptr8094942, i64 2              ; &eptr8094945[2]
  %eptr8094946 = getelementptr inbounds i64, i64* %cloptr8094942, i64 3              ; &eptr8094946[3]
  store i64 %pHq$tail, i64* %eptr8094944                                             ; *eptr8094944 = %pHq$tail
  store i64 %syN$_37wind_45stack, i64* %eptr8094945                                  ; *eptr8094945 = %syN$_37wind_45stack
  store i64 %o00$f, i64* %eptr8094946                                                ; *eptr8094946 = %o00$f
  %eptr8094943 = getelementptr inbounds i64, i64* %cloptr8094942, i64 0              ; &cloptr8094942[0]
  %f8094947 = ptrtoint void(i64,i64)* @lam8092007 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094947, i64* %eptr8094943                                             ; store fptr
  %mxx$f8085708 = ptrtoint i64* %cloptr8094942 to i64                                ; closure cast; i64* -> i64
  %arg8086859 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %vT1$_95t = call i64 @prim_vector_45set_33(i64 %o00$f, i64 %arg8086859, i64 %mxx$f8085708); call prim_vector_45set_33
  %arg8086861 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085849 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8086861)               ; call prim_vector_45ref
  %a8085850 = call i64 @prim_procedure_63(i64 %a8085849)                             ; call prim_procedure_63
  %cmp8094948 = icmp eq i64 %a8085850, 15                                            ; false?
  br i1 %cmp8094948, label %else8094950, label %then8094949                          ; if

then8094949:
  %arg8086864 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085851 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8086864)               ; call prim_vector_45ref
  %rva8089234 = add i64 0, 0                                                         ; quoted ()
  %rva8089233 = call i64 @prim_cons(i64 %L3s$new, i64 %rva8089234)                   ; call prim_cons
  %rva8089232 = call i64 @prim_cons(i64 %cont8086008, i64 %rva8089233)               ; call prim_cons
  %cloptr8094951 = inttoptr i64 %a8085851 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094952 = getelementptr inbounds i64, i64* %cloptr8094951, i64 0             ; &cloptr8094951[0]
  %f8094954 = load i64, i64* %i0ptr8094952, align 8                                  ; load; *i0ptr8094952
  %fptr8094953 = inttoptr i64 %f8094954 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094953(i64 %a8085851, i64 %rva8089232)             ; tail call
  ret void

else8094950:
  %arg8086869 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094955, i32 0, i32 0)); quoted string
  %retprim8086019 = call i64 @prim_halt(i64 %arg8086869)                             ; call prim_halt
  %arg8086871 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089237 = add i64 0, 0                                                         ; quoted ()
  %rva8089236 = call i64 @prim_cons(i64 %retprim8086019, i64 %rva8089237)            ; call prim_cons
  %rva8089235 = call i64 @prim_cons(i64 %arg8086871, i64 %rva8089236)                ; call prim_cons
  %cloptr8094956 = inttoptr i64 %cont8086008 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094957 = getelementptr inbounds i64, i64* %cloptr8094956, i64 0             ; &cloptr8094956[0]
  %f8094959 = load i64, i64* %i0ptr8094957, align 8                                  ; load; *i0ptr8094957
  %fptr8094958 = inttoptr i64 %f8094959 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094958(i64 %cont8086008, i64 %rva8089235)          ; tail call
  ret void
}


define void @lam8092007(i64 %env8092008, i64 %rvp8089231) {
  %envptr8094960 = inttoptr i64 %env8092008 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094961 = getelementptr inbounds i64, i64* %envptr8094960, i64 3            ; &envptr8094960[3]
  %o00$f = load i64, i64* %envptr8094961, align 8                                    ; load; *envptr8094961
  %envptr8094962 = inttoptr i64 %env8092008 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094963 = getelementptr inbounds i64, i64* %envptr8094962, i64 2            ; &envptr8094962[2]
  %syN$_37wind_45stack = load i64, i64* %envptr8094963, align 8                      ; load; *envptr8094963
  %envptr8094964 = inttoptr i64 %env8092008 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094965 = getelementptr inbounds i64, i64* %envptr8094964, i64 1            ; &envptr8094964[1]
  %pHq$tail = load i64, i64* %envptr8094965, align 8                                 ; load; *envptr8094965
  %cont8086012 = call i64 @prim_car(i64 %rvp8089231)                                 ; call prim_car
  %rvp8089230 = call i64 @prim_cdr(i64 %rvp8089231)                                  ; call prim_cdr
  %Hil$l = call i64 @prim_car(i64 %rvp8089230)                                       ; call prim_car
  %na8089174 = call i64 @prim_cdr(i64 %rvp8089230)                                   ; call prim_cdr
  %a8085838 = call i64 @prim_eq_63(i64 %Hil$l, i64 %pHq$tail)                        ; call prim_eq_63
  %a8085839 = call i64 @prim_not(i64 %a8085838)                                      ; call prim_not
  %cmp8094966 = icmp eq i64 %a8085839, 15                                            ; false?
  br i1 %cmp8094966, label %else8094968, label %then8094967                          ; if

then8094967:
  %arg8086796 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085840 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8086796)               ; call prim_vector_45ref
  %a8085841 = call i64 @prim_procedure_63(i64 %a8085840)                             ; call prim_procedure_63
  %cmp8094969 = icmp eq i64 %a8085841, 15                                            ; false?
  br i1 %cmp8094969, label %else8094971, label %then8094970                          ; if

then8094970:
  %arg8086799 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085842 = call i64 @prim_vector_45ref(i64 %o00$f, i64 %arg8086799)               ; call prim_vector_45ref
  %a8085843 = call i64 @prim_cdr(i64 %Hil$l)                                         ; call prim_cdr
  %cloptr8094972 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094974 = getelementptr inbounds i64, i64* %cloptr8094972, i64 1              ; &eptr8094974[1]
  %eptr8094975 = getelementptr inbounds i64, i64* %cloptr8094972, i64 2              ; &eptr8094975[2]
  %eptr8094976 = getelementptr inbounds i64, i64* %cloptr8094972, i64 3              ; &eptr8094976[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094974                                  ; *eptr8094974 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094975                                          ; *eptr8094975 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094976                                                ; *eptr8094976 = %Hil$l
  %eptr8094973 = getelementptr inbounds i64, i64* %cloptr8094972, i64 0              ; &cloptr8094972[0]
  %f8094977 = ptrtoint void(i64,i64)* @lam8091982 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094977, i64* %eptr8094973                                             ; store fptr
  %arg8086803 = ptrtoint i64* %cloptr8094972 to i64                                  ; closure cast; i64* -> i64
  %rva8089200 = add i64 0, 0                                                         ; quoted ()
  %rva8089199 = call i64 @prim_cons(i64 %a8085843, i64 %rva8089200)                  ; call prim_cons
  %rva8089198 = call i64 @prim_cons(i64 %arg8086803, i64 %rva8089199)                ; call prim_cons
  %cloptr8094978 = inttoptr i64 %a8085842 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8094979 = getelementptr inbounds i64, i64* %cloptr8094978, i64 0             ; &cloptr8094978[0]
  %f8094981 = load i64, i64* %i0ptr8094979, align 8                                  ; load; *i0ptr8094979
  %fptr8094980 = inttoptr i64 %f8094981 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094980(i64 %a8085842, i64 %rva8089198)             ; tail call
  ret void

else8094971:
  %arg8086828 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8094982, i32 0, i32 0)); quoted string
  %retprim8086017 = call i64 @prim_halt(i64 %arg8086828)                             ; call prim_halt
  %cloptr8094983 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8094985 = getelementptr inbounds i64, i64* %cloptr8094983, i64 1              ; &eptr8094985[1]
  %eptr8094986 = getelementptr inbounds i64, i64* %cloptr8094983, i64 2              ; &eptr8094986[2]
  %eptr8094987 = getelementptr inbounds i64, i64* %cloptr8094983, i64 3              ; &eptr8094987[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8094985                                  ; *eptr8094985 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8094986                                          ; *eptr8094986 = %cont8086012
  store i64 %Hil$l, i64* %eptr8094987                                                ; *eptr8094987 = %Hil$l
  %eptr8094984 = getelementptr inbounds i64, i64* %cloptr8094983, i64 0              ; &cloptr8094983[0]
  %f8094988 = ptrtoint void(i64,i64)* @lam8092001 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8094988, i64* %eptr8094984                                             ; store fptr
  %arg8086831 = ptrtoint i64* %cloptr8094983 to i64                                  ; closure cast; i64* -> i64
  %arg8086830 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089226 = add i64 0, 0                                                         ; quoted ()
  %rva8089225 = call i64 @prim_cons(i64 %retprim8086017, i64 %rva8089226)            ; call prim_cons
  %rva8089224 = call i64 @prim_cons(i64 %arg8086830, i64 %rva8089225)                ; call prim_cons
  %cloptr8094989 = inttoptr i64 %arg8086831 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8094990 = getelementptr inbounds i64, i64* %cloptr8094989, i64 0             ; &cloptr8094989[0]
  %f8094992 = load i64, i64* %i0ptr8094990, align 8                                  ; load; *i0ptr8094990
  %fptr8094991 = inttoptr i64 %f8094992 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094991(i64 %arg8086831, i64 %rva8089224)           ; tail call
  ret void

else8094968:
  %retprim8086018 = call i64 @prim_void()                                            ; call prim_void
  %arg8086856 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089229 = add i64 0, 0                                                         ; quoted ()
  %rva8089228 = call i64 @prim_cons(i64 %retprim8086018, i64 %rva8089229)            ; call prim_cons
  %rva8089227 = call i64 @prim_cons(i64 %arg8086856, i64 %rva8089228)                ; call prim_cons
  %cloptr8094993 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8094994 = getelementptr inbounds i64, i64* %cloptr8094993, i64 0             ; &cloptr8094993[0]
  %f8094996 = load i64, i64* %i0ptr8094994, align 8                                  ; load; *i0ptr8094994
  %fptr8094995 = inttoptr i64 %f8094996 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8094995(i64 %cont8086012, i64 %rva8089227)          ; tail call
  ret void
}


define void @lam8092001(i64 %env8092002, i64 %rvp8089223) {
  %envptr8094997 = inttoptr i64 %env8092002 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8094998 = getelementptr inbounds i64, i64* %envptr8094997, i64 3            ; &envptr8094997[3]
  %Hil$l = load i64, i64* %envptr8094998, align 8                                    ; load; *envptr8094998
  %envptr8094999 = inttoptr i64 %env8092002 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095000 = getelementptr inbounds i64, i64* %envptr8094999, i64 2            ; &envptr8094999[2]
  %cont8086012 = load i64, i64* %envptr8095000, align 8                              ; load; *envptr8095000
  %envptr8095001 = inttoptr i64 %env8092002 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095002 = getelementptr inbounds i64, i64* %envptr8095001, i64 1            ; &envptr8095001[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095002, align 8                      ; load; *envptr8095002
  %_958086013 = call i64 @prim_car(i64 %rvp8089223)                                  ; call prim_car
  %rvp8089222 = call i64 @prim_cdr(i64 %rvp8089223)                                  ; call prim_cdr
  %p45$_95t = call i64 @prim_car(i64 %rvp8089222)                                    ; call prim_car
  %na8089202 = call i64 @prim_cdr(i64 %rvp8089222)                                   ; call prim_cdr
  %a8085844 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085845 = call i64 @prim_car(i64 %a8085844)                                      ; call prim_car
  %a8085846 = call i64 @prim_procedure_63(i64 %a8085845)                             ; call prim_procedure_63
  %cmp8095003 = icmp eq i64 %a8085846, 15                                            ; false?
  br i1 %cmp8095003, label %else8095005, label %then8095004                          ; if

then8095004:
  %a8085847 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085848 = call i64 @prim_car(i64 %a8085847)                                      ; call prim_car
  %cloptr8095006 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095008 = getelementptr inbounds i64, i64* %cloptr8095006, i64 1              ; &eptr8095008[1]
  %eptr8095009 = getelementptr inbounds i64, i64* %cloptr8095006, i64 2              ; &eptr8095009[2]
  %eptr8095010 = getelementptr inbounds i64, i64* %cloptr8095006, i64 3              ; &eptr8095010[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095008                                  ; *eptr8095008 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8095009                                          ; *eptr8095009 = %cont8086012
  store i64 %Hil$l, i64* %eptr8095010                                                ; *eptr8095010 = %Hil$l
  %eptr8095007 = getelementptr inbounds i64, i64* %cloptr8095006, i64 0              ; &cloptr8095006[0]
  %f8095011 = ptrtoint void(i64,i64)* @lam8091991 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095011, i64* %eptr8095007                                             ; store fptr
  %arg8086837 = ptrtoint i64* %cloptr8095006 to i64                                  ; closure cast; i64* -> i64
  %rva8089211 = add i64 0, 0                                                         ; quoted ()
  %rva8089210 = call i64 @prim_cons(i64 %arg8086837, i64 %rva8089211)                ; call prim_cons
  %cloptr8095012 = inttoptr i64 %a8085848 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095013 = getelementptr inbounds i64, i64* %cloptr8095012, i64 0             ; &cloptr8095012[0]
  %f8095015 = load i64, i64* %i0ptr8095013, align 8                                  ; load; *i0ptr8095013
  %fptr8095014 = inttoptr i64 %f8095015 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095014(i64 %a8085848, i64 %rva8089210)             ; tail call
  ret void

else8095005:
  %arg8086845 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095016, i32 0, i32 0)); quoted string
  %retprim8086016 = call i64 @prim_halt(i64 %arg8086845)                             ; call prim_halt
  %cloptr8095017 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095019 = getelementptr inbounds i64, i64* %cloptr8095017, i64 1              ; &eptr8095019[1]
  %eptr8095020 = getelementptr inbounds i64, i64* %cloptr8095017, i64 2              ; &eptr8095020[2]
  %eptr8095021 = getelementptr inbounds i64, i64* %cloptr8095017, i64 3              ; &eptr8095021[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095019                                  ; *eptr8095019 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8095020                                          ; *eptr8095020 = %cont8086012
  store i64 %Hil$l, i64* %eptr8095021                                                ; *eptr8095021 = %Hil$l
  %eptr8095018 = getelementptr inbounds i64, i64* %cloptr8095017, i64 0              ; &cloptr8095017[0]
  %f8095022 = ptrtoint void(i64,i64)* @lam8091998 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095022, i64* %eptr8095018                                             ; store fptr
  %arg8086848 = ptrtoint i64* %cloptr8095017 to i64                                  ; closure cast; i64* -> i64
  %arg8086847 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089221 = add i64 0, 0                                                         ; quoted ()
  %rva8089220 = call i64 @prim_cons(i64 %retprim8086016, i64 %rva8089221)            ; call prim_cons
  %rva8089219 = call i64 @prim_cons(i64 %arg8086847, i64 %rva8089220)                ; call prim_cons
  %cloptr8095023 = inttoptr i64 %arg8086848 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095024 = getelementptr inbounds i64, i64* %cloptr8095023, i64 0             ; &cloptr8095023[0]
  %f8095026 = load i64, i64* %i0ptr8095024, align 8                                  ; load; *i0ptr8095024
  %fptr8095025 = inttoptr i64 %f8095026 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095025(i64 %arg8086848, i64 %rva8089219)           ; tail call
  ret void
}


define void @lam8091998(i64 %env8091999, i64 %rvp8089218) {
  %envptr8095027 = inttoptr i64 %env8091999 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095028 = getelementptr inbounds i64, i64* %envptr8095027, i64 3            ; &envptr8095027[3]
  %Hil$l = load i64, i64* %envptr8095028, align 8                                    ; load; *envptr8095028
  %envptr8095029 = inttoptr i64 %env8091999 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095030 = getelementptr inbounds i64, i64* %envptr8095029, i64 2            ; &envptr8095029[2]
  %cont8086012 = load i64, i64* %envptr8095030, align 8                              ; load; *envptr8095030
  %envptr8095031 = inttoptr i64 %env8091999 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095032 = getelementptr inbounds i64, i64* %envptr8095031, i64 1            ; &envptr8095031[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095032, align 8                      ; load; *envptr8095032
  %_958086014 = call i64 @prim_car(i64 %rvp8089218)                                  ; call prim_car
  %rvp8089217 = call i64 @prim_cdr(i64 %rvp8089218)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089217)                                    ; call prim_car
  %na8089213 = call i64 @prim_cdr(i64 %rvp8089217)                                   ; call prim_cdr
  %arg8086850 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086850, i64 %Hil$l); call prim_vector_45set_33
  %arg8086853 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089216 = add i64 0, 0                                                         ; quoted ()
  %rva8089215 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089216)            ; call prim_cons
  %rva8089214 = call i64 @prim_cons(i64 %arg8086853, i64 %rva8089215)                ; call prim_cons
  %cloptr8095033 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095034 = getelementptr inbounds i64, i64* %cloptr8095033, i64 0             ; &cloptr8095033[0]
  %f8095036 = load i64, i64* %i0ptr8095034, align 8                                  ; load; *i0ptr8095034
  %fptr8095035 = inttoptr i64 %f8095036 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095035(i64 %cont8086012, i64 %rva8089214)          ; tail call
  ret void
}


define void @lam8091991(i64 %env8091992, i64 %rvp8089209) {
  %envptr8095037 = inttoptr i64 %env8091992 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095038 = getelementptr inbounds i64, i64* %envptr8095037, i64 3            ; &envptr8095037[3]
  %Hil$l = load i64, i64* %envptr8095038, align 8                                    ; load; *envptr8095038
  %envptr8095039 = inttoptr i64 %env8091992 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095040 = getelementptr inbounds i64, i64* %envptr8095039, i64 2            ; &envptr8095039[2]
  %cont8086012 = load i64, i64* %envptr8095040, align 8                              ; load; *envptr8095040
  %envptr8095041 = inttoptr i64 %env8091992 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095042 = getelementptr inbounds i64, i64* %envptr8095041, i64 1            ; &envptr8095041[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095042, align 8                      ; load; *envptr8095042
  %_958086014 = call i64 @prim_car(i64 %rvp8089209)                                  ; call prim_car
  %rvp8089208 = call i64 @prim_cdr(i64 %rvp8089209)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089208)                                    ; call prim_car
  %na8089204 = call i64 @prim_cdr(i64 %rvp8089208)                                   ; call prim_cdr
  %arg8086840 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086840, i64 %Hil$l); call prim_vector_45set_33
  %arg8086843 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089207 = add i64 0, 0                                                         ; quoted ()
  %rva8089206 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089207)            ; call prim_cons
  %rva8089205 = call i64 @prim_cons(i64 %arg8086843, i64 %rva8089206)                ; call prim_cons
  %cloptr8095043 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095044 = getelementptr inbounds i64, i64* %cloptr8095043, i64 0             ; &cloptr8095043[0]
  %f8095046 = load i64, i64* %i0ptr8095044, align 8                                  ; load; *i0ptr8095044
  %fptr8095045 = inttoptr i64 %f8095046 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095045(i64 %cont8086012, i64 %rva8089205)          ; tail call
  ret void
}


define void @lam8091982(i64 %env8091983, i64 %rvp8089197) {
  %envptr8095047 = inttoptr i64 %env8091983 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095048 = getelementptr inbounds i64, i64* %envptr8095047, i64 3            ; &envptr8095047[3]
  %Hil$l = load i64, i64* %envptr8095048, align 8                                    ; load; *envptr8095048
  %envptr8095049 = inttoptr i64 %env8091983 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095050 = getelementptr inbounds i64, i64* %envptr8095049, i64 2            ; &envptr8095049[2]
  %cont8086012 = load i64, i64* %envptr8095050, align 8                              ; load; *envptr8095050
  %envptr8095051 = inttoptr i64 %env8091983 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095052 = getelementptr inbounds i64, i64* %envptr8095051, i64 1            ; &envptr8095051[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095052, align 8                      ; load; *envptr8095052
  %_958086013 = call i64 @prim_car(i64 %rvp8089197)                                  ; call prim_car
  %rvp8089196 = call i64 @prim_cdr(i64 %rvp8089197)                                  ; call prim_cdr
  %p45$_95t = call i64 @prim_car(i64 %rvp8089196)                                    ; call prim_car
  %na8089176 = call i64 @prim_cdr(i64 %rvp8089196)                                   ; call prim_cdr
  %a8085844 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085845 = call i64 @prim_car(i64 %a8085844)                                      ; call prim_car
  %a8085846 = call i64 @prim_procedure_63(i64 %a8085845)                             ; call prim_procedure_63
  %cmp8095053 = icmp eq i64 %a8085846, 15                                            ; false?
  br i1 %cmp8095053, label %else8095055, label %then8095054                          ; if

then8095054:
  %a8085847 = call i64 @prim_car(i64 %Hil$l)                                         ; call prim_car
  %a8085848 = call i64 @prim_car(i64 %a8085847)                                      ; call prim_car
  %cloptr8095056 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095058 = getelementptr inbounds i64, i64* %cloptr8095056, i64 1              ; &eptr8095058[1]
  %eptr8095059 = getelementptr inbounds i64, i64* %cloptr8095056, i64 2              ; &eptr8095059[2]
  %eptr8095060 = getelementptr inbounds i64, i64* %cloptr8095056, i64 3              ; &eptr8095060[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095058                                  ; *eptr8095058 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8095059                                          ; *eptr8095059 = %cont8086012
  store i64 %Hil$l, i64* %eptr8095060                                                ; *eptr8095060 = %Hil$l
  %eptr8095057 = getelementptr inbounds i64, i64* %cloptr8095056, i64 0              ; &cloptr8095056[0]
  %f8095061 = ptrtoint void(i64,i64)* @lam8091972 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095061, i64* %eptr8095057                                             ; store fptr
  %arg8086810 = ptrtoint i64* %cloptr8095056 to i64                                  ; closure cast; i64* -> i64
  %rva8089185 = add i64 0, 0                                                         ; quoted ()
  %rva8089184 = call i64 @prim_cons(i64 %arg8086810, i64 %rva8089185)                ; call prim_cons
  %cloptr8095062 = inttoptr i64 %a8085848 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095063 = getelementptr inbounds i64, i64* %cloptr8095062, i64 0             ; &cloptr8095062[0]
  %f8095065 = load i64, i64* %i0ptr8095063, align 8                                  ; load; *i0ptr8095063
  %fptr8095064 = inttoptr i64 %f8095065 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095064(i64 %a8085848, i64 %rva8089184)             ; tail call
  ret void

else8095055:
  %arg8086818 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095066, i32 0, i32 0)); quoted string
  %retprim8086016 = call i64 @prim_halt(i64 %arg8086818)                             ; call prim_halt
  %cloptr8095067 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095069 = getelementptr inbounds i64, i64* %cloptr8095067, i64 1              ; &eptr8095069[1]
  %eptr8095070 = getelementptr inbounds i64, i64* %cloptr8095067, i64 2              ; &eptr8095070[2]
  %eptr8095071 = getelementptr inbounds i64, i64* %cloptr8095067, i64 3              ; &eptr8095071[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095069                                  ; *eptr8095069 = %syN$_37wind_45stack
  store i64 %cont8086012, i64* %eptr8095070                                          ; *eptr8095070 = %cont8086012
  store i64 %Hil$l, i64* %eptr8095071                                                ; *eptr8095071 = %Hil$l
  %eptr8095068 = getelementptr inbounds i64, i64* %cloptr8095067, i64 0              ; &cloptr8095067[0]
  %f8095072 = ptrtoint void(i64,i64)* @lam8091979 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095072, i64* %eptr8095068                                             ; store fptr
  %arg8086821 = ptrtoint i64* %cloptr8095067 to i64                                  ; closure cast; i64* -> i64
  %arg8086820 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089195 = add i64 0, 0                                                         ; quoted ()
  %rva8089194 = call i64 @prim_cons(i64 %retprim8086016, i64 %rva8089195)            ; call prim_cons
  %rva8089193 = call i64 @prim_cons(i64 %arg8086820, i64 %rva8089194)                ; call prim_cons
  %cloptr8095073 = inttoptr i64 %arg8086821 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095074 = getelementptr inbounds i64, i64* %cloptr8095073, i64 0             ; &cloptr8095073[0]
  %f8095076 = load i64, i64* %i0ptr8095074, align 8                                  ; load; *i0ptr8095074
  %fptr8095075 = inttoptr i64 %f8095076 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095075(i64 %arg8086821, i64 %rva8089193)           ; tail call
  ret void
}


define void @lam8091979(i64 %env8091980, i64 %rvp8089192) {
  %envptr8095077 = inttoptr i64 %env8091980 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095078 = getelementptr inbounds i64, i64* %envptr8095077, i64 3            ; &envptr8095077[3]
  %Hil$l = load i64, i64* %envptr8095078, align 8                                    ; load; *envptr8095078
  %envptr8095079 = inttoptr i64 %env8091980 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095080 = getelementptr inbounds i64, i64* %envptr8095079, i64 2            ; &envptr8095079[2]
  %cont8086012 = load i64, i64* %envptr8095080, align 8                              ; load; *envptr8095080
  %envptr8095081 = inttoptr i64 %env8091980 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095082 = getelementptr inbounds i64, i64* %envptr8095081, i64 1            ; &envptr8095081[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095082, align 8                      ; load; *envptr8095082
  %_958086014 = call i64 @prim_car(i64 %rvp8089192)                                  ; call prim_car
  %rvp8089191 = call i64 @prim_cdr(i64 %rvp8089192)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089191)                                    ; call prim_car
  %na8089187 = call i64 @prim_cdr(i64 %rvp8089191)                                   ; call prim_cdr
  %arg8086823 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086823, i64 %Hil$l); call prim_vector_45set_33
  %arg8086826 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089190 = add i64 0, 0                                                         ; quoted ()
  %rva8089189 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089190)            ; call prim_cons
  %rva8089188 = call i64 @prim_cons(i64 %arg8086826, i64 %rva8089189)                ; call prim_cons
  %cloptr8095083 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095084 = getelementptr inbounds i64, i64* %cloptr8095083, i64 0             ; &cloptr8095083[0]
  %f8095086 = load i64, i64* %i0ptr8095084, align 8                                  ; load; *i0ptr8095084
  %fptr8095085 = inttoptr i64 %f8095086 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095085(i64 %cont8086012, i64 %rva8089188)          ; tail call
  ret void
}


define void @lam8091972(i64 %env8091973, i64 %rvp8089183) {
  %envptr8095087 = inttoptr i64 %env8091973 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095088 = getelementptr inbounds i64, i64* %envptr8095087, i64 3            ; &envptr8095087[3]
  %Hil$l = load i64, i64* %envptr8095088, align 8                                    ; load; *envptr8095088
  %envptr8095089 = inttoptr i64 %env8091973 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095090 = getelementptr inbounds i64, i64* %envptr8095089, i64 2            ; &envptr8095089[2]
  %cont8086012 = load i64, i64* %envptr8095090, align 8                              ; load; *envptr8095090
  %envptr8095091 = inttoptr i64 %env8091973 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095092 = getelementptr inbounds i64, i64* %envptr8095091, i64 1            ; &envptr8095091[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095092, align 8                      ; load; *envptr8095092
  %_958086014 = call i64 @prim_car(i64 %rvp8089183)                                  ; call prim_car
  %rvp8089182 = call i64 @prim_cdr(i64 %rvp8089183)                                  ; call prim_cdr
  %ECV$_95t = call i64 @prim_car(i64 %rvp8089182)                                    ; call prim_car
  %na8089178 = call i64 @prim_cdr(i64 %rvp8089182)                                   ; call prim_cdr
  %arg8086813 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086015 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8086813, i64 %Hil$l); call prim_vector_45set_33
  %arg8086816 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089181 = add i64 0, 0                                                         ; quoted ()
  %rva8089180 = call i64 @prim_cons(i64 %retprim8086015, i64 %rva8089181)            ; call prim_cons
  %rva8089179 = call i64 @prim_cons(i64 %arg8086816, i64 %rva8089180)                ; call prim_cons
  %cloptr8095093 = inttoptr i64 %cont8086012 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095094 = getelementptr inbounds i64, i64* %cloptr8095093, i64 0             ; &cloptr8095093[0]
  %f8095096 = load i64, i64* %i0ptr8095094, align 8                                  ; load; *i0ptr8095094
  %fptr8095095 = inttoptr i64 %f8095096 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095095(i64 %cont8086012, i64 %rva8089179)          ; tail call
  ret void
}


define void @lam8091950(i64 %env8091951, i64 %rvp8089760) {
  %envptr8095097 = inttoptr i64 %env8091951 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095098 = getelementptr inbounds i64, i64* %envptr8095097, i64 1            ; &envptr8095097[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095098, align 8                      ; load; *envptr8095098
  %cont8086039 = call i64 @prim_car(i64 %rvp8089760)                                 ; call prim_car
  %rvp8089759 = call i64 @prim_cdr(i64 %rvp8089760)                                  ; call prim_cdr
  %jyG$pre = call i64 @prim_car(i64 %rvp8089759)                                     ; call prim_car
  %rvp8089758 = call i64 @prim_cdr(i64 %rvp8089759)                                  ; call prim_cdr
  %HEa$body = call i64 @prim_car(i64 %rvp8089758)                                    ; call prim_car
  %rvp8089757 = call i64 @prim_cdr(i64 %rvp8089758)                                  ; call prim_cdr
  %aAb$post = call i64 @prim_car(i64 %rvp8089757)                                    ; call prim_car
  %na8089599 = call i64 @prim_cdr(i64 %rvp8089757)                                   ; call prim_cdr
  %a8085852 = call i64 @prim_procedure_63(i64 %jyG$pre)                              ; call prim_procedure_63
  %cmp8095099 = icmp eq i64 %a8085852, 15                                            ; false?
  br i1 %cmp8095099, label %else8095101, label %then8095100                          ; if

then8095100:
  %cloptr8095102 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr8095104 = getelementptr inbounds i64, i64* %cloptr8095102, i64 1              ; &eptr8095104[1]
  %eptr8095105 = getelementptr inbounds i64, i64* %cloptr8095102, i64 2              ; &eptr8095105[2]
  %eptr8095106 = getelementptr inbounds i64, i64* %cloptr8095102, i64 3              ; &eptr8095106[3]
  %eptr8095107 = getelementptr inbounds i64, i64* %cloptr8095102, i64 4              ; &eptr8095107[4]
  %eptr8095108 = getelementptr inbounds i64, i64* %cloptr8095102, i64 5              ; &eptr8095108[5]
  store i64 %syN$_37wind_45stack, i64* %eptr8095104                                  ; *eptr8095104 = %syN$_37wind_45stack
  store i64 %aAb$post, i64* %eptr8095105                                             ; *eptr8095105 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095106                                          ; *eptr8095106 = %cont8086039
  store i64 %jyG$pre, i64* %eptr8095107                                              ; *eptr8095107 = %jyG$pre
  store i64 %HEa$body, i64* %eptr8095108                                             ; *eptr8095108 = %HEa$body
  %eptr8095103 = getelementptr inbounds i64, i64* %cloptr8095102, i64 0              ; &cloptr8095102[0]
  %f8095109 = ptrtoint void(i64,i64)* @lam8091893 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095109, i64* %eptr8095103                                             ; store fptr
  %arg8087240 = ptrtoint i64* %cloptr8095102 to i64                                  ; closure cast; i64* -> i64
  %rva8089677 = add i64 0, 0                                                         ; quoted ()
  %rva8089676 = call i64 @prim_cons(i64 %arg8087240, i64 %rva8089677)                ; call prim_cons
  %cloptr8095110 = inttoptr i64 %jyG$pre to i64*                                     ; closure/env cast; i64 -> i64*
  %i0ptr8095111 = getelementptr inbounds i64, i64* %cloptr8095110, i64 0             ; &cloptr8095110[0]
  %f8095113 = load i64, i64* %i0ptr8095111, align 8                                  ; load; *i0ptr8095111
  %fptr8095112 = inttoptr i64 %f8095113 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095112(i64 %jyG$pre, i64 %rva8089676)              ; tail call
  ret void

else8095101:
  %arg8087305 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095114, i32 0, i32 0)); quoted string
  %retprim8086049 = call i64 @prim_halt(i64 %arg8087305)                             ; call prim_halt
  %cloptr8095115 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr8095117 = getelementptr inbounds i64, i64* %cloptr8095115, i64 1              ; &eptr8095117[1]
  %eptr8095118 = getelementptr inbounds i64, i64* %cloptr8095115, i64 2              ; &eptr8095118[2]
  %eptr8095119 = getelementptr inbounds i64, i64* %cloptr8095115, i64 3              ; &eptr8095119[3]
  %eptr8095120 = getelementptr inbounds i64, i64* %cloptr8095115, i64 4              ; &eptr8095120[4]
  %eptr8095121 = getelementptr inbounds i64, i64* %cloptr8095115, i64 5              ; &eptr8095121[5]
  store i64 %syN$_37wind_45stack, i64* %eptr8095117                                  ; *eptr8095117 = %syN$_37wind_45stack
  store i64 %aAb$post, i64* %eptr8095118                                             ; *eptr8095118 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095119                                          ; *eptr8095119 = %cont8086039
  store i64 %jyG$pre, i64* %eptr8095120                                              ; *eptr8095120 = %jyG$pre
  store i64 %HEa$body, i64* %eptr8095121                                             ; *eptr8095121 = %HEa$body
  %eptr8095116 = getelementptr inbounds i64, i64* %cloptr8095115, i64 0              ; &cloptr8095115[0]
  %f8095122 = ptrtoint void(i64,i64)* @lam8091947 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095122, i64* %eptr8095116                                             ; store fptr
  %arg8087308 = ptrtoint i64* %cloptr8095115 to i64                                  ; closure cast; i64* -> i64
  %arg8087307 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089756 = add i64 0, 0                                                         ; quoted ()
  %rva8089755 = call i64 @prim_cons(i64 %retprim8086049, i64 %rva8089756)            ; call prim_cons
  %rva8089754 = call i64 @prim_cons(i64 %arg8087307, i64 %rva8089755)                ; call prim_cons
  %cloptr8095123 = inttoptr i64 %arg8087308 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095124 = getelementptr inbounds i64, i64* %cloptr8095123, i64 0             ; &cloptr8095123[0]
  %f8095126 = load i64, i64* %i0ptr8095124, align 8                                  ; load; *i0ptr8095124
  %fptr8095125 = inttoptr i64 %f8095126 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095125(i64 %arg8087308, i64 %rva8089754)           ; tail call
  ret void
}


define void @lam8091947(i64 %env8091948, i64 %rvp8089753) {
  %envptr8095127 = inttoptr i64 %env8091948 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095128 = getelementptr inbounds i64, i64* %envptr8095127, i64 5            ; &envptr8095127[5]
  %HEa$body = load i64, i64* %envptr8095128, align 8                                 ; load; *envptr8095128
  %envptr8095129 = inttoptr i64 %env8091948 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095130 = getelementptr inbounds i64, i64* %envptr8095129, i64 4            ; &envptr8095129[4]
  %jyG$pre = load i64, i64* %envptr8095130, align 8                                  ; load; *envptr8095130
  %envptr8095131 = inttoptr i64 %env8091948 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095132 = getelementptr inbounds i64, i64* %envptr8095131, i64 3            ; &envptr8095131[3]
  %cont8086039 = load i64, i64* %envptr8095132, align 8                              ; load; *envptr8095132
  %envptr8095133 = inttoptr i64 %env8091948 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095134 = getelementptr inbounds i64, i64* %envptr8095133, i64 2            ; &envptr8095133[2]
  %aAb$post = load i64, i64* %envptr8095134, align 8                                 ; load; *envptr8095134
  %envptr8095135 = inttoptr i64 %env8091948 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095136 = getelementptr inbounds i64, i64* %envptr8095135, i64 1            ; &envptr8095135[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095136, align 8                      ; load; *envptr8095136
  %_958086040 = call i64 @prim_car(i64 %rvp8089753)                                  ; call prim_car
  %rvp8089752 = call i64 @prim_cdr(i64 %rvp8089753)                                  ; call prim_cdr
  %d69$_95t = call i64 @prim_car(i64 %rvp8089752)                                    ; call prim_car
  %na8089679 = call i64 @prim_cdr(i64 %rvp8089752)                                   ; call prim_cdr
  %a8085853 = call i64 @prim_cons(i64 %jyG$pre, i64 %aAb$post)                       ; call prim_cons
  %arg8087311 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085854 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8087311) ; call prim_vector_45ref
  %a8085855 = call i64 @prim_cons(i64 %a8085853, i64 %a8085854)                      ; call prim_cons
  %arg8087316 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086048 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087316, i64 %a8085855); call prim_vector_45set_33
  %cloptr8095137 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8095139 = getelementptr inbounds i64, i64* %cloptr8095137, i64 1              ; &eptr8095139[1]
  %eptr8095140 = getelementptr inbounds i64, i64* %cloptr8095137, i64 2              ; &eptr8095140[2]
  %eptr8095141 = getelementptr inbounds i64, i64* %cloptr8095137, i64 3              ; &eptr8095141[3]
  %eptr8095142 = getelementptr inbounds i64, i64* %cloptr8095137, i64 4              ; &eptr8095142[4]
  store i64 %syN$_37wind_45stack, i64* %eptr8095139                                  ; *eptr8095139 = %syN$_37wind_45stack
  store i64 %aAb$post, i64* %eptr8095140                                             ; *eptr8095140 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095141                                          ; *eptr8095141 = %cont8086039
  store i64 %HEa$body, i64* %eptr8095142                                             ; *eptr8095142 = %HEa$body
  %eptr8095138 = getelementptr inbounds i64, i64* %cloptr8095137, i64 0              ; &cloptr8095137[0]
  %f8095143 = ptrtoint void(i64,i64)* @lam8091943 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095143, i64* %eptr8095138                                             ; store fptr
  %arg8087320 = ptrtoint i64* %cloptr8095137 to i64                                  ; closure cast; i64* -> i64
  %arg8087319 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089751 = add i64 0, 0                                                         ; quoted ()
  %rva8089750 = call i64 @prim_cons(i64 %retprim8086048, i64 %rva8089751)            ; call prim_cons
  %rva8089749 = call i64 @prim_cons(i64 %arg8087319, i64 %rva8089750)                ; call prim_cons
  %cloptr8095144 = inttoptr i64 %arg8087320 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095145 = getelementptr inbounds i64, i64* %cloptr8095144, i64 0             ; &cloptr8095144[0]
  %f8095147 = load i64, i64* %i0ptr8095145, align 8                                  ; load; *i0ptr8095145
  %fptr8095146 = inttoptr i64 %f8095147 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095146(i64 %arg8087320, i64 %rva8089749)           ; tail call
  ret void
}


define void @lam8091943(i64 %env8091944, i64 %rvp8089748) {
  %envptr8095148 = inttoptr i64 %env8091944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095149 = getelementptr inbounds i64, i64* %envptr8095148, i64 4            ; &envptr8095148[4]
  %HEa$body = load i64, i64* %envptr8095149, align 8                                 ; load; *envptr8095149
  %envptr8095150 = inttoptr i64 %env8091944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095151 = getelementptr inbounds i64, i64* %envptr8095150, i64 3            ; &envptr8095150[3]
  %cont8086039 = load i64, i64* %envptr8095151, align 8                              ; load; *envptr8095151
  %envptr8095152 = inttoptr i64 %env8091944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095153 = getelementptr inbounds i64, i64* %envptr8095152, i64 2            ; &envptr8095152[2]
  %aAb$post = load i64, i64* %envptr8095153, align 8                                 ; load; *envptr8095153
  %envptr8095154 = inttoptr i64 %env8091944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095155 = getelementptr inbounds i64, i64* %envptr8095154, i64 1            ; &envptr8095154[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095155, align 8                      ; load; *envptr8095155
  %_958086041 = call i64 @prim_car(i64 %rvp8089748)                                  ; call prim_car
  %rvp8089747 = call i64 @prim_cdr(i64 %rvp8089748)                                  ; call prim_cdr
  %HLP$_95t = call i64 @prim_car(i64 %rvp8089747)                                    ; call prim_car
  %na8089681 = call i64 @prim_cdr(i64 %rvp8089747)                                   ; call prim_cdr
  %a8085856 = call i64 @prim_procedure_63(i64 %HEa$body)                             ; call prim_procedure_63
  %cmp8095156 = icmp eq i64 %a8085856, 15                                            ; false?
  br i1 %cmp8095156, label %else8095158, label %then8095157                          ; if

then8095157:
  %cloptr8095159 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095161 = getelementptr inbounds i64, i64* %cloptr8095159, i64 1              ; &eptr8095161[1]
  %eptr8095162 = getelementptr inbounds i64, i64* %cloptr8095159, i64 2              ; &eptr8095162[2]
  %eptr8095163 = getelementptr inbounds i64, i64* %cloptr8095159, i64 3              ; &eptr8095163[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095161                                  ; *eptr8095161 = %syN$_37wind_45stack
  store i64 %aAb$post, i64* %eptr8095162                                             ; *eptr8095162 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095163                                          ; *eptr8095163 = %cont8086039
  %eptr8095160 = getelementptr inbounds i64, i64* %cloptr8095159, i64 0              ; &cloptr8095159[0]
  %f8095164 = ptrtoint void(i64,i64)* @lam8091918 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095164, i64* %eptr8095160                                             ; store fptr
  %arg8087322 = ptrtoint i64* %cloptr8095159 to i64                                  ; closure cast; i64* -> i64
  %rva8089713 = add i64 0, 0                                                         ; quoted ()
  %rva8089712 = call i64 @prim_cons(i64 %arg8087322, i64 %rva8089713)                ; call prim_cons
  %cloptr8095165 = inttoptr i64 %HEa$body to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095166 = getelementptr inbounds i64, i64* %cloptr8095165, i64 0             ; &cloptr8095165[0]
  %f8095168 = load i64, i64* %i0ptr8095166, align 8                                  ; load; *i0ptr8095166
  %fptr8095167 = inttoptr i64 %f8095168 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095167(i64 %HEa$body, i64 %rva8089712)             ; tail call
  ret void

else8095158:
  %arg8087346 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095169, i32 0, i32 0)); quoted string
  %retprim8086047 = call i64 @prim_halt(i64 %arg8087346)                             ; call prim_halt
  %cloptr8095170 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095172 = getelementptr inbounds i64, i64* %cloptr8095170, i64 1              ; &eptr8095172[1]
  %eptr8095173 = getelementptr inbounds i64, i64* %cloptr8095170, i64 2              ; &eptr8095173[2]
  %eptr8095174 = getelementptr inbounds i64, i64* %cloptr8095170, i64 3              ; &eptr8095174[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095172                                  ; *eptr8095172 = %syN$_37wind_45stack
  store i64 %aAb$post, i64* %eptr8095173                                             ; *eptr8095173 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095174                                          ; *eptr8095174 = %cont8086039
  %eptr8095171 = getelementptr inbounds i64, i64* %cloptr8095170, i64 0              ; &cloptr8095170[0]
  %f8095175 = ptrtoint void(i64,i64)* @lam8091940 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095175, i64* %eptr8095171                                             ; store fptr
  %arg8087349 = ptrtoint i64* %cloptr8095170 to i64                                  ; closure cast; i64* -> i64
  %arg8087348 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089746 = add i64 0, 0                                                         ; quoted ()
  %rva8089745 = call i64 @prim_cons(i64 %retprim8086047, i64 %rva8089746)            ; call prim_cons
  %rva8089744 = call i64 @prim_cons(i64 %arg8087348, i64 %rva8089745)                ; call prim_cons
  %cloptr8095176 = inttoptr i64 %arg8087349 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095177 = getelementptr inbounds i64, i64* %cloptr8095176, i64 0             ; &cloptr8095176[0]
  %f8095179 = load i64, i64* %i0ptr8095177, align 8                                  ; load; *i0ptr8095177
  %fptr8095178 = inttoptr i64 %f8095179 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095178(i64 %arg8087349, i64 %rva8089744)           ; tail call
  ret void
}


define void @lam8091940(i64 %env8091941, i64 %rvp8089743) {
  %envptr8095180 = inttoptr i64 %env8091941 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095181 = getelementptr inbounds i64, i64* %envptr8095180, i64 3            ; &envptr8095180[3]
  %cont8086039 = load i64, i64* %envptr8095181, align 8                              ; load; *envptr8095181
  %envptr8095182 = inttoptr i64 %env8091941 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095183 = getelementptr inbounds i64, i64* %envptr8095182, i64 2            ; &envptr8095182[2]
  %aAb$post = load i64, i64* %envptr8095183, align 8                                 ; load; *envptr8095183
  %envptr8095184 = inttoptr i64 %env8091941 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095185 = getelementptr inbounds i64, i64* %envptr8095184, i64 1            ; &envptr8095184[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095185, align 8                      ; load; *envptr8095185
  %_958086042 = call i64 @prim_car(i64 %rvp8089743)                                  ; call prim_car
  %rvp8089742 = call i64 @prim_cdr(i64 %rvp8089743)                                  ; call prim_cdr
  %m84$v = call i64 @prim_car(i64 %rvp8089742)                                       ; call prim_car
  %na8089715 = call i64 @prim_cdr(i64 %rvp8089742)                                   ; call prim_cdr
  %arg8087350 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085857 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8087350) ; call prim_vector_45ref
  %a8085858 = call i64 @prim_cdr(i64 %a8085857)                                      ; call prim_cdr
  %arg8087354 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086046 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087354, i64 %a8085858); call prim_vector_45set_33
  %cloptr8095186 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095188 = getelementptr inbounds i64, i64* %cloptr8095186, i64 1              ; &eptr8095188[1]
  %eptr8095189 = getelementptr inbounds i64, i64* %cloptr8095186, i64 2              ; &eptr8095189[2]
  %eptr8095190 = getelementptr inbounds i64, i64* %cloptr8095186, i64 3              ; &eptr8095190[3]
  store i64 %m84$v, i64* %eptr8095188                                                ; *eptr8095188 = %m84$v
  store i64 %aAb$post, i64* %eptr8095189                                             ; *eptr8095189 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095190                                          ; *eptr8095190 = %cont8086039
  %eptr8095187 = getelementptr inbounds i64, i64* %cloptr8095186, i64 0              ; &cloptr8095186[0]
  %f8095191 = ptrtoint void(i64,i64)* @lam8091936 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095191, i64* %eptr8095187                                             ; store fptr
  %arg8087358 = ptrtoint i64* %cloptr8095186 to i64                                  ; closure cast; i64* -> i64
  %arg8087357 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089741 = add i64 0, 0                                                         ; quoted ()
  %rva8089740 = call i64 @prim_cons(i64 %retprim8086046, i64 %rva8089741)            ; call prim_cons
  %rva8089739 = call i64 @prim_cons(i64 %arg8087357, i64 %rva8089740)                ; call prim_cons
  %cloptr8095192 = inttoptr i64 %arg8087358 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095193 = getelementptr inbounds i64, i64* %cloptr8095192, i64 0             ; &cloptr8095192[0]
  %f8095195 = load i64, i64* %i0ptr8095193, align 8                                  ; load; *i0ptr8095193
  %fptr8095194 = inttoptr i64 %f8095195 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095194(i64 %arg8087358, i64 %rva8089739)           ; tail call
  ret void
}


define void @lam8091936(i64 %env8091937, i64 %rvp8089738) {
  %envptr8095196 = inttoptr i64 %env8091937 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095197 = getelementptr inbounds i64, i64* %envptr8095196, i64 3            ; &envptr8095196[3]
  %cont8086039 = load i64, i64* %envptr8095197, align 8                              ; load; *envptr8095197
  %envptr8095198 = inttoptr i64 %env8091937 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095199 = getelementptr inbounds i64, i64* %envptr8095198, i64 2            ; &envptr8095198[2]
  %aAb$post = load i64, i64* %envptr8095199, align 8                                 ; load; *envptr8095199
  %envptr8095200 = inttoptr i64 %env8091937 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095201 = getelementptr inbounds i64, i64* %envptr8095200, i64 1            ; &envptr8095200[1]
  %m84$v = load i64, i64* %envptr8095201, align 8                                    ; load; *envptr8095201
  %_958086043 = call i64 @prim_car(i64 %rvp8089738)                                  ; call prim_car
  %rvp8089737 = call i64 @prim_cdr(i64 %rvp8089738)                                  ; call prim_cdr
  %LYe$_95t = call i64 @prim_car(i64 %rvp8089737)                                    ; call prim_car
  %na8089717 = call i64 @prim_cdr(i64 %rvp8089737)                                   ; call prim_cdr
  %a8085859 = call i64 @prim_procedure_63(i64 %aAb$post)                             ; call prim_procedure_63
  %cmp8095202 = icmp eq i64 %a8085859, 15                                            ; false?
  br i1 %cmp8095202, label %else8095204, label %then8095203                          ; if

then8095203:
  %cloptr8095205 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095207 = getelementptr inbounds i64, i64* %cloptr8095205, i64 1              ; &eptr8095207[1]
  %eptr8095208 = getelementptr inbounds i64, i64* %cloptr8095205, i64 2              ; &eptr8095208[2]
  store i64 %m84$v, i64* %eptr8095207                                                ; *eptr8095207 = %m84$v
  store i64 %cont8086039, i64* %eptr8095208                                          ; *eptr8095208 = %cont8086039
  %eptr8095206 = getelementptr inbounds i64, i64* %cloptr8095205, i64 0              ; &cloptr8095205[0]
  %f8095209 = ptrtoint void(i64,i64)* @lam8091927 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095209, i64* %eptr8095206                                             ; store fptr
  %arg8087360 = ptrtoint i64* %cloptr8095205 to i64                                  ; closure cast; i64* -> i64
  %rva8089726 = add i64 0, 0                                                         ; quoted ()
  %rva8089725 = call i64 @prim_cons(i64 %arg8087360, i64 %rva8089726)                ; call prim_cons
  %cloptr8095210 = inttoptr i64 %aAb$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095211 = getelementptr inbounds i64, i64* %cloptr8095210, i64 0             ; &cloptr8095210[0]
  %f8095213 = load i64, i64* %i0ptr8095211, align 8                                  ; load; *i0ptr8095211
  %fptr8095212 = inttoptr i64 %f8095213 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095212(i64 %aAb$post, i64 %rva8089725)             ; tail call
  ret void

else8095204:
  %arg8087365 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095214, i32 0, i32 0)); quoted string
  %retprim8086045 = call i64 @prim_halt(i64 %arg8087365)                             ; call prim_halt
  %cloptr8095215 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095217 = getelementptr inbounds i64, i64* %cloptr8095215, i64 1              ; &eptr8095217[1]
  %eptr8095218 = getelementptr inbounds i64, i64* %cloptr8095215, i64 2              ; &eptr8095218[2]
  store i64 %m84$v, i64* %eptr8095217                                                ; *eptr8095217 = %m84$v
  store i64 %cont8086039, i64* %eptr8095218                                          ; *eptr8095218 = %cont8086039
  %eptr8095216 = getelementptr inbounds i64, i64* %cloptr8095215, i64 0              ; &cloptr8095215[0]
  %f8095219 = ptrtoint void(i64,i64)* @lam8091933 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095219, i64* %eptr8095216                                             ; store fptr
  %arg8087368 = ptrtoint i64* %cloptr8095215 to i64                                  ; closure cast; i64* -> i64
  %arg8087367 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089736 = add i64 0, 0                                                         ; quoted ()
  %rva8089735 = call i64 @prim_cons(i64 %retprim8086045, i64 %rva8089736)            ; call prim_cons
  %rva8089734 = call i64 @prim_cons(i64 %arg8087367, i64 %rva8089735)                ; call prim_cons
  %cloptr8095220 = inttoptr i64 %arg8087368 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095221 = getelementptr inbounds i64, i64* %cloptr8095220, i64 0             ; &cloptr8095220[0]
  %f8095223 = load i64, i64* %i0ptr8095221, align 8                                  ; load; *i0ptr8095221
  %fptr8095222 = inttoptr i64 %f8095223 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095222(i64 %arg8087368, i64 %rva8089734)           ; tail call
  ret void
}


define void @lam8091933(i64 %env8091934, i64 %rvp8089733) {
  %envptr8095224 = inttoptr i64 %env8091934 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095225 = getelementptr inbounds i64, i64* %envptr8095224, i64 2            ; &envptr8095224[2]
  %cont8086039 = load i64, i64* %envptr8095225, align 8                              ; load; *envptr8095225
  %envptr8095226 = inttoptr i64 %env8091934 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095227 = getelementptr inbounds i64, i64* %envptr8095226, i64 1            ; &envptr8095226[1]
  %m84$v = load i64, i64* %envptr8095227, align 8                                    ; load; *envptr8095227
  %_958086044 = call i64 @prim_car(i64 %rvp8089733)                                  ; call prim_car
  %rvp8089732 = call i64 @prim_cdr(i64 %rvp8089733)                                  ; call prim_cdr
  %tas$_95t = call i64 @prim_car(i64 %rvp8089732)                                    ; call prim_car
  %na8089728 = call i64 @prim_cdr(i64 %rvp8089732)                                   ; call prim_cdr
  %arg8087370 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089731 = add i64 0, 0                                                         ; quoted ()
  %rva8089730 = call i64 @prim_cons(i64 %m84$v, i64 %rva8089731)                     ; call prim_cons
  %rva8089729 = call i64 @prim_cons(i64 %arg8087370, i64 %rva8089730)                ; call prim_cons
  %cloptr8095228 = inttoptr i64 %cont8086039 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095229 = getelementptr inbounds i64, i64* %cloptr8095228, i64 0             ; &cloptr8095228[0]
  %f8095231 = load i64, i64* %i0ptr8095229, align 8                                  ; load; *i0ptr8095229
  %fptr8095230 = inttoptr i64 %f8095231 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095230(i64 %cont8086039, i64 %rva8089729)          ; tail call
  ret void
}


define void @lam8091927(i64 %env8091928, i64 %rvp8089724) {
  %envptr8095232 = inttoptr i64 %env8091928 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095233 = getelementptr inbounds i64, i64* %envptr8095232, i64 2            ; &envptr8095232[2]
  %cont8086039 = load i64, i64* %envptr8095233, align 8                              ; load; *envptr8095233
  %envptr8095234 = inttoptr i64 %env8091928 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095235 = getelementptr inbounds i64, i64* %envptr8095234, i64 1            ; &envptr8095234[1]
  %m84$v = load i64, i64* %envptr8095235, align 8                                    ; load; *envptr8095235
  %_958086044 = call i64 @prim_car(i64 %rvp8089724)                                  ; call prim_car
  %rvp8089723 = call i64 @prim_cdr(i64 %rvp8089724)                                  ; call prim_cdr
  %tas$_95t = call i64 @prim_car(i64 %rvp8089723)                                    ; call prim_car
  %na8089719 = call i64 @prim_cdr(i64 %rvp8089723)                                   ; call prim_cdr
  %arg8087363 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089722 = add i64 0, 0                                                         ; quoted ()
  %rva8089721 = call i64 @prim_cons(i64 %m84$v, i64 %rva8089722)                     ; call prim_cons
  %rva8089720 = call i64 @prim_cons(i64 %arg8087363, i64 %rva8089721)                ; call prim_cons
  %cloptr8095236 = inttoptr i64 %cont8086039 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095237 = getelementptr inbounds i64, i64* %cloptr8095236, i64 0             ; &cloptr8095236[0]
  %f8095239 = load i64, i64* %i0ptr8095237, align 8                                  ; load; *i0ptr8095237
  %fptr8095238 = inttoptr i64 %f8095239 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095238(i64 %cont8086039, i64 %rva8089720)          ; tail call
  ret void
}


define void @lam8091918(i64 %env8091919, i64 %rvp8089711) {
  %envptr8095240 = inttoptr i64 %env8091919 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095241 = getelementptr inbounds i64, i64* %envptr8095240, i64 3            ; &envptr8095240[3]
  %cont8086039 = load i64, i64* %envptr8095241, align 8                              ; load; *envptr8095241
  %envptr8095242 = inttoptr i64 %env8091919 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095243 = getelementptr inbounds i64, i64* %envptr8095242, i64 2            ; &envptr8095242[2]
  %aAb$post = load i64, i64* %envptr8095243, align 8                                 ; load; *envptr8095243
  %envptr8095244 = inttoptr i64 %env8091919 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095245 = getelementptr inbounds i64, i64* %envptr8095244, i64 1            ; &envptr8095244[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095245, align 8                      ; load; *envptr8095245
  %_958086042 = call i64 @prim_car(i64 %rvp8089711)                                  ; call prim_car
  %rvp8089710 = call i64 @prim_cdr(i64 %rvp8089711)                                  ; call prim_cdr
  %m84$v = call i64 @prim_car(i64 %rvp8089710)                                       ; call prim_car
  %na8089683 = call i64 @prim_cdr(i64 %rvp8089710)                                   ; call prim_cdr
  %arg8087324 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085857 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8087324) ; call prim_vector_45ref
  %a8085858 = call i64 @prim_cdr(i64 %a8085857)                                      ; call prim_cdr
  %arg8087328 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086046 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087328, i64 %a8085858); call prim_vector_45set_33
  %cloptr8095246 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095248 = getelementptr inbounds i64, i64* %cloptr8095246, i64 1              ; &eptr8095248[1]
  %eptr8095249 = getelementptr inbounds i64, i64* %cloptr8095246, i64 2              ; &eptr8095249[2]
  %eptr8095250 = getelementptr inbounds i64, i64* %cloptr8095246, i64 3              ; &eptr8095250[3]
  store i64 %m84$v, i64* %eptr8095248                                                ; *eptr8095248 = %m84$v
  store i64 %aAb$post, i64* %eptr8095249                                             ; *eptr8095249 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095250                                          ; *eptr8095250 = %cont8086039
  %eptr8095247 = getelementptr inbounds i64, i64* %cloptr8095246, i64 0              ; &cloptr8095246[0]
  %f8095251 = ptrtoint void(i64,i64)* @lam8091914 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095251, i64* %eptr8095247                                             ; store fptr
  %arg8087332 = ptrtoint i64* %cloptr8095246 to i64                                  ; closure cast; i64* -> i64
  %arg8087331 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089709 = add i64 0, 0                                                         ; quoted ()
  %rva8089708 = call i64 @prim_cons(i64 %retprim8086046, i64 %rva8089709)            ; call prim_cons
  %rva8089707 = call i64 @prim_cons(i64 %arg8087331, i64 %rva8089708)                ; call prim_cons
  %cloptr8095252 = inttoptr i64 %arg8087332 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095253 = getelementptr inbounds i64, i64* %cloptr8095252, i64 0             ; &cloptr8095252[0]
  %f8095255 = load i64, i64* %i0ptr8095253, align 8                                  ; load; *i0ptr8095253
  %fptr8095254 = inttoptr i64 %f8095255 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095254(i64 %arg8087332, i64 %rva8089707)           ; tail call
  ret void
}


define void @lam8091914(i64 %env8091915, i64 %rvp8089706) {
  %envptr8095256 = inttoptr i64 %env8091915 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095257 = getelementptr inbounds i64, i64* %envptr8095256, i64 3            ; &envptr8095256[3]
  %cont8086039 = load i64, i64* %envptr8095257, align 8                              ; load; *envptr8095257
  %envptr8095258 = inttoptr i64 %env8091915 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095259 = getelementptr inbounds i64, i64* %envptr8095258, i64 2            ; &envptr8095258[2]
  %aAb$post = load i64, i64* %envptr8095259, align 8                                 ; load; *envptr8095259
  %envptr8095260 = inttoptr i64 %env8091915 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095261 = getelementptr inbounds i64, i64* %envptr8095260, i64 1            ; &envptr8095260[1]
  %m84$v = load i64, i64* %envptr8095261, align 8                                    ; load; *envptr8095261
  %_958086043 = call i64 @prim_car(i64 %rvp8089706)                                  ; call prim_car
  %rvp8089705 = call i64 @prim_cdr(i64 %rvp8089706)                                  ; call prim_cdr
  %LYe$_95t = call i64 @prim_car(i64 %rvp8089705)                                    ; call prim_car
  %na8089685 = call i64 @prim_cdr(i64 %rvp8089705)                                   ; call prim_cdr
  %a8085859 = call i64 @prim_procedure_63(i64 %aAb$post)                             ; call prim_procedure_63
  %cmp8095262 = icmp eq i64 %a8085859, 15                                            ; false?
  br i1 %cmp8095262, label %else8095264, label %then8095263                          ; if

then8095263:
  %cloptr8095265 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095267 = getelementptr inbounds i64, i64* %cloptr8095265, i64 1              ; &eptr8095267[1]
  %eptr8095268 = getelementptr inbounds i64, i64* %cloptr8095265, i64 2              ; &eptr8095268[2]
  store i64 %m84$v, i64* %eptr8095267                                                ; *eptr8095267 = %m84$v
  store i64 %cont8086039, i64* %eptr8095268                                          ; *eptr8095268 = %cont8086039
  %eptr8095266 = getelementptr inbounds i64, i64* %cloptr8095265, i64 0              ; &cloptr8095265[0]
  %f8095269 = ptrtoint void(i64,i64)* @lam8091905 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095269, i64* %eptr8095266                                             ; store fptr
  %arg8087334 = ptrtoint i64* %cloptr8095265 to i64                                  ; closure cast; i64* -> i64
  %rva8089694 = add i64 0, 0                                                         ; quoted ()
  %rva8089693 = call i64 @prim_cons(i64 %arg8087334, i64 %rva8089694)                ; call prim_cons
  %cloptr8095270 = inttoptr i64 %aAb$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095271 = getelementptr inbounds i64, i64* %cloptr8095270, i64 0             ; &cloptr8095270[0]
  %f8095273 = load i64, i64* %i0ptr8095271, align 8                                  ; load; *i0ptr8095271
  %fptr8095272 = inttoptr i64 %f8095273 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095272(i64 %aAb$post, i64 %rva8089693)             ; tail call
  ret void

else8095264:
  %arg8087339 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095274, i32 0, i32 0)); quoted string
  %retprim8086045 = call i64 @prim_halt(i64 %arg8087339)                             ; call prim_halt
  %cloptr8095275 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095277 = getelementptr inbounds i64, i64* %cloptr8095275, i64 1              ; &eptr8095277[1]
  %eptr8095278 = getelementptr inbounds i64, i64* %cloptr8095275, i64 2              ; &eptr8095278[2]
  store i64 %m84$v, i64* %eptr8095277                                                ; *eptr8095277 = %m84$v
  store i64 %cont8086039, i64* %eptr8095278                                          ; *eptr8095278 = %cont8086039
  %eptr8095276 = getelementptr inbounds i64, i64* %cloptr8095275, i64 0              ; &cloptr8095275[0]
  %f8095279 = ptrtoint void(i64,i64)* @lam8091911 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095279, i64* %eptr8095276                                             ; store fptr
  %arg8087342 = ptrtoint i64* %cloptr8095275 to i64                                  ; closure cast; i64* -> i64
  %arg8087341 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089704 = add i64 0, 0                                                         ; quoted ()
  %rva8089703 = call i64 @prim_cons(i64 %retprim8086045, i64 %rva8089704)            ; call prim_cons
  %rva8089702 = call i64 @prim_cons(i64 %arg8087341, i64 %rva8089703)                ; call prim_cons
  %cloptr8095280 = inttoptr i64 %arg8087342 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095281 = getelementptr inbounds i64, i64* %cloptr8095280, i64 0             ; &cloptr8095280[0]
  %f8095283 = load i64, i64* %i0ptr8095281, align 8                                  ; load; *i0ptr8095281
  %fptr8095282 = inttoptr i64 %f8095283 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095282(i64 %arg8087342, i64 %rva8089702)           ; tail call
  ret void
}


define void @lam8091911(i64 %env8091912, i64 %rvp8089701) {
  %envptr8095284 = inttoptr i64 %env8091912 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095285 = getelementptr inbounds i64, i64* %envptr8095284, i64 2            ; &envptr8095284[2]
  %cont8086039 = load i64, i64* %envptr8095285, align 8                              ; load; *envptr8095285
  %envptr8095286 = inttoptr i64 %env8091912 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095287 = getelementptr inbounds i64, i64* %envptr8095286, i64 1            ; &envptr8095286[1]
  %m84$v = load i64, i64* %envptr8095287, align 8                                    ; load; *envptr8095287
  %_958086044 = call i64 @prim_car(i64 %rvp8089701)                                  ; call prim_car
  %rvp8089700 = call i64 @prim_cdr(i64 %rvp8089701)                                  ; call prim_cdr
  %tas$_95t = call i64 @prim_car(i64 %rvp8089700)                                    ; call prim_car
  %na8089696 = call i64 @prim_cdr(i64 %rvp8089700)                                   ; call prim_cdr
  %arg8087344 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089699 = add i64 0, 0                                                         ; quoted ()
  %rva8089698 = call i64 @prim_cons(i64 %m84$v, i64 %rva8089699)                     ; call prim_cons
  %rva8089697 = call i64 @prim_cons(i64 %arg8087344, i64 %rva8089698)                ; call prim_cons
  %cloptr8095288 = inttoptr i64 %cont8086039 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095289 = getelementptr inbounds i64, i64* %cloptr8095288, i64 0             ; &cloptr8095288[0]
  %f8095291 = load i64, i64* %i0ptr8095289, align 8                                  ; load; *i0ptr8095289
  %fptr8095290 = inttoptr i64 %f8095291 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095290(i64 %cont8086039, i64 %rva8089697)          ; tail call
  ret void
}


define void @lam8091905(i64 %env8091906, i64 %rvp8089692) {
  %envptr8095292 = inttoptr i64 %env8091906 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095293 = getelementptr inbounds i64, i64* %envptr8095292, i64 2            ; &envptr8095292[2]
  %cont8086039 = load i64, i64* %envptr8095293, align 8                              ; load; *envptr8095293
  %envptr8095294 = inttoptr i64 %env8091906 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095295 = getelementptr inbounds i64, i64* %envptr8095294, i64 1            ; &envptr8095294[1]
  %m84$v = load i64, i64* %envptr8095295, align 8                                    ; load; *envptr8095295
  %_958086044 = call i64 @prim_car(i64 %rvp8089692)                                  ; call prim_car
  %rvp8089691 = call i64 @prim_cdr(i64 %rvp8089692)                                  ; call prim_cdr
  %tas$_95t = call i64 @prim_car(i64 %rvp8089691)                                    ; call prim_car
  %na8089687 = call i64 @prim_cdr(i64 %rvp8089691)                                   ; call prim_cdr
  %arg8087337 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089690 = add i64 0, 0                                                         ; quoted ()
  %rva8089689 = call i64 @prim_cons(i64 %m84$v, i64 %rva8089690)                     ; call prim_cons
  %rva8089688 = call i64 @prim_cons(i64 %arg8087337, i64 %rva8089689)                ; call prim_cons
  %cloptr8095296 = inttoptr i64 %cont8086039 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095297 = getelementptr inbounds i64, i64* %cloptr8095296, i64 0             ; &cloptr8095296[0]
  %f8095299 = load i64, i64* %i0ptr8095297, align 8                                  ; load; *i0ptr8095297
  %fptr8095298 = inttoptr i64 %f8095299 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095298(i64 %cont8086039, i64 %rva8089688)          ; tail call
  ret void
}


define void @lam8091893(i64 %env8091894, i64 %rvp8089675) {
  %envptr8095300 = inttoptr i64 %env8091894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095301 = getelementptr inbounds i64, i64* %envptr8095300, i64 5            ; &envptr8095300[5]
  %HEa$body = load i64, i64* %envptr8095301, align 8                                 ; load; *envptr8095301
  %envptr8095302 = inttoptr i64 %env8091894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095303 = getelementptr inbounds i64, i64* %envptr8095302, i64 4            ; &envptr8095302[4]
  %jyG$pre = load i64, i64* %envptr8095303, align 8                                  ; load; *envptr8095303
  %envptr8095304 = inttoptr i64 %env8091894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095305 = getelementptr inbounds i64, i64* %envptr8095304, i64 3            ; &envptr8095304[3]
  %cont8086039 = load i64, i64* %envptr8095305, align 8                              ; load; *envptr8095305
  %envptr8095306 = inttoptr i64 %env8091894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095307 = getelementptr inbounds i64, i64* %envptr8095306, i64 2            ; &envptr8095306[2]
  %aAb$post = load i64, i64* %envptr8095307, align 8                                 ; load; *envptr8095307
  %envptr8095308 = inttoptr i64 %env8091894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095309 = getelementptr inbounds i64, i64* %envptr8095308, i64 1            ; &envptr8095308[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095309, align 8                      ; load; *envptr8095309
  %_958086040 = call i64 @prim_car(i64 %rvp8089675)                                  ; call prim_car
  %rvp8089674 = call i64 @prim_cdr(i64 %rvp8089675)                                  ; call prim_cdr
  %d69$_95t = call i64 @prim_car(i64 %rvp8089674)                                    ; call prim_car
  %na8089601 = call i64 @prim_cdr(i64 %rvp8089674)                                   ; call prim_cdr
  %a8085853 = call i64 @prim_cons(i64 %jyG$pre, i64 %aAb$post)                       ; call prim_cons
  %arg8087244 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085854 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8087244) ; call prim_vector_45ref
  %a8085855 = call i64 @prim_cons(i64 %a8085853, i64 %a8085854)                      ; call prim_cons
  %arg8087249 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086048 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087249, i64 %a8085855); call prim_vector_45set_33
  %cloptr8095310 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8095312 = getelementptr inbounds i64, i64* %cloptr8095310, i64 1              ; &eptr8095312[1]
  %eptr8095313 = getelementptr inbounds i64, i64* %cloptr8095310, i64 2              ; &eptr8095313[2]
  %eptr8095314 = getelementptr inbounds i64, i64* %cloptr8095310, i64 3              ; &eptr8095314[3]
  %eptr8095315 = getelementptr inbounds i64, i64* %cloptr8095310, i64 4              ; &eptr8095315[4]
  store i64 %syN$_37wind_45stack, i64* %eptr8095312                                  ; *eptr8095312 = %syN$_37wind_45stack
  store i64 %aAb$post, i64* %eptr8095313                                             ; *eptr8095313 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095314                                          ; *eptr8095314 = %cont8086039
  store i64 %HEa$body, i64* %eptr8095315                                             ; *eptr8095315 = %HEa$body
  %eptr8095311 = getelementptr inbounds i64, i64* %cloptr8095310, i64 0              ; &cloptr8095310[0]
  %f8095316 = ptrtoint void(i64,i64)* @lam8091889 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095316, i64* %eptr8095311                                             ; store fptr
  %arg8087253 = ptrtoint i64* %cloptr8095310 to i64                                  ; closure cast; i64* -> i64
  %arg8087252 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089673 = add i64 0, 0                                                         ; quoted ()
  %rva8089672 = call i64 @prim_cons(i64 %retprim8086048, i64 %rva8089673)            ; call prim_cons
  %rva8089671 = call i64 @prim_cons(i64 %arg8087252, i64 %rva8089672)                ; call prim_cons
  %cloptr8095317 = inttoptr i64 %arg8087253 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095318 = getelementptr inbounds i64, i64* %cloptr8095317, i64 0             ; &cloptr8095317[0]
  %f8095320 = load i64, i64* %i0ptr8095318, align 8                                  ; load; *i0ptr8095318
  %fptr8095319 = inttoptr i64 %f8095320 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095319(i64 %arg8087253, i64 %rva8089671)           ; tail call
  ret void
}


define void @lam8091889(i64 %env8091890, i64 %rvp8089670) {
  %envptr8095321 = inttoptr i64 %env8091890 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095322 = getelementptr inbounds i64, i64* %envptr8095321, i64 4            ; &envptr8095321[4]
  %HEa$body = load i64, i64* %envptr8095322, align 8                                 ; load; *envptr8095322
  %envptr8095323 = inttoptr i64 %env8091890 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095324 = getelementptr inbounds i64, i64* %envptr8095323, i64 3            ; &envptr8095323[3]
  %cont8086039 = load i64, i64* %envptr8095324, align 8                              ; load; *envptr8095324
  %envptr8095325 = inttoptr i64 %env8091890 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095326 = getelementptr inbounds i64, i64* %envptr8095325, i64 2            ; &envptr8095325[2]
  %aAb$post = load i64, i64* %envptr8095326, align 8                                 ; load; *envptr8095326
  %envptr8095327 = inttoptr i64 %env8091890 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095328 = getelementptr inbounds i64, i64* %envptr8095327, i64 1            ; &envptr8095327[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095328, align 8                      ; load; *envptr8095328
  %_958086041 = call i64 @prim_car(i64 %rvp8089670)                                  ; call prim_car
  %rvp8089669 = call i64 @prim_cdr(i64 %rvp8089670)                                  ; call prim_cdr
  %HLP$_95t = call i64 @prim_car(i64 %rvp8089669)                                    ; call prim_car
  %na8089603 = call i64 @prim_cdr(i64 %rvp8089669)                                   ; call prim_cdr
  %a8085856 = call i64 @prim_procedure_63(i64 %HEa$body)                             ; call prim_procedure_63
  %cmp8095329 = icmp eq i64 %a8085856, 15                                            ; false?
  br i1 %cmp8095329, label %else8095331, label %then8095330                          ; if

then8095330:
  %cloptr8095332 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095334 = getelementptr inbounds i64, i64* %cloptr8095332, i64 1              ; &eptr8095334[1]
  %eptr8095335 = getelementptr inbounds i64, i64* %cloptr8095332, i64 2              ; &eptr8095335[2]
  %eptr8095336 = getelementptr inbounds i64, i64* %cloptr8095332, i64 3              ; &eptr8095336[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095334                                  ; *eptr8095334 = %syN$_37wind_45stack
  store i64 %aAb$post, i64* %eptr8095335                                             ; *eptr8095335 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095336                                          ; *eptr8095336 = %cont8086039
  %eptr8095333 = getelementptr inbounds i64, i64* %cloptr8095332, i64 0              ; &cloptr8095332[0]
  %f8095337 = ptrtoint void(i64,i64)* @lam8091864 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095337, i64* %eptr8095333                                             ; store fptr
  %arg8087255 = ptrtoint i64* %cloptr8095332 to i64                                  ; closure cast; i64* -> i64
  %rva8089635 = add i64 0, 0                                                         ; quoted ()
  %rva8089634 = call i64 @prim_cons(i64 %arg8087255, i64 %rva8089635)                ; call prim_cons
  %cloptr8095338 = inttoptr i64 %HEa$body to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095339 = getelementptr inbounds i64, i64* %cloptr8095338, i64 0             ; &cloptr8095338[0]
  %f8095341 = load i64, i64* %i0ptr8095339, align 8                                  ; load; *i0ptr8095339
  %fptr8095340 = inttoptr i64 %f8095341 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095340(i64 %HEa$body, i64 %rva8089634)             ; tail call
  ret void

else8095331:
  %arg8087279 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095342, i32 0, i32 0)); quoted string
  %retprim8086047 = call i64 @prim_halt(i64 %arg8087279)                             ; call prim_halt
  %cloptr8095343 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095345 = getelementptr inbounds i64, i64* %cloptr8095343, i64 1              ; &eptr8095345[1]
  %eptr8095346 = getelementptr inbounds i64, i64* %cloptr8095343, i64 2              ; &eptr8095346[2]
  %eptr8095347 = getelementptr inbounds i64, i64* %cloptr8095343, i64 3              ; &eptr8095347[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095345                                  ; *eptr8095345 = %syN$_37wind_45stack
  store i64 %aAb$post, i64* %eptr8095346                                             ; *eptr8095346 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095347                                          ; *eptr8095347 = %cont8086039
  %eptr8095344 = getelementptr inbounds i64, i64* %cloptr8095343, i64 0              ; &cloptr8095343[0]
  %f8095348 = ptrtoint void(i64,i64)* @lam8091886 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095348, i64* %eptr8095344                                             ; store fptr
  %arg8087282 = ptrtoint i64* %cloptr8095343 to i64                                  ; closure cast; i64* -> i64
  %arg8087281 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089668 = add i64 0, 0                                                         ; quoted ()
  %rva8089667 = call i64 @prim_cons(i64 %retprim8086047, i64 %rva8089668)            ; call prim_cons
  %rva8089666 = call i64 @prim_cons(i64 %arg8087281, i64 %rva8089667)                ; call prim_cons
  %cloptr8095349 = inttoptr i64 %arg8087282 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095350 = getelementptr inbounds i64, i64* %cloptr8095349, i64 0             ; &cloptr8095349[0]
  %f8095352 = load i64, i64* %i0ptr8095350, align 8                                  ; load; *i0ptr8095350
  %fptr8095351 = inttoptr i64 %f8095352 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095351(i64 %arg8087282, i64 %rva8089666)           ; tail call
  ret void
}


define void @lam8091886(i64 %env8091887, i64 %rvp8089665) {
  %envptr8095353 = inttoptr i64 %env8091887 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095354 = getelementptr inbounds i64, i64* %envptr8095353, i64 3            ; &envptr8095353[3]
  %cont8086039 = load i64, i64* %envptr8095354, align 8                              ; load; *envptr8095354
  %envptr8095355 = inttoptr i64 %env8091887 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095356 = getelementptr inbounds i64, i64* %envptr8095355, i64 2            ; &envptr8095355[2]
  %aAb$post = load i64, i64* %envptr8095356, align 8                                 ; load; *envptr8095356
  %envptr8095357 = inttoptr i64 %env8091887 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095358 = getelementptr inbounds i64, i64* %envptr8095357, i64 1            ; &envptr8095357[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095358, align 8                      ; load; *envptr8095358
  %_958086042 = call i64 @prim_car(i64 %rvp8089665)                                  ; call prim_car
  %rvp8089664 = call i64 @prim_cdr(i64 %rvp8089665)                                  ; call prim_cdr
  %m84$v = call i64 @prim_car(i64 %rvp8089664)                                       ; call prim_car
  %na8089637 = call i64 @prim_cdr(i64 %rvp8089664)                                   ; call prim_cdr
  %arg8087283 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085857 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8087283) ; call prim_vector_45ref
  %a8085858 = call i64 @prim_cdr(i64 %a8085857)                                      ; call prim_cdr
  %arg8087287 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086046 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087287, i64 %a8085858); call prim_vector_45set_33
  %cloptr8095359 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095361 = getelementptr inbounds i64, i64* %cloptr8095359, i64 1              ; &eptr8095361[1]
  %eptr8095362 = getelementptr inbounds i64, i64* %cloptr8095359, i64 2              ; &eptr8095362[2]
  %eptr8095363 = getelementptr inbounds i64, i64* %cloptr8095359, i64 3              ; &eptr8095363[3]
  store i64 %m84$v, i64* %eptr8095361                                                ; *eptr8095361 = %m84$v
  store i64 %aAb$post, i64* %eptr8095362                                             ; *eptr8095362 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095363                                          ; *eptr8095363 = %cont8086039
  %eptr8095360 = getelementptr inbounds i64, i64* %cloptr8095359, i64 0              ; &cloptr8095359[0]
  %f8095364 = ptrtoint void(i64,i64)* @lam8091882 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095364, i64* %eptr8095360                                             ; store fptr
  %arg8087291 = ptrtoint i64* %cloptr8095359 to i64                                  ; closure cast; i64* -> i64
  %arg8087290 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089663 = add i64 0, 0                                                         ; quoted ()
  %rva8089662 = call i64 @prim_cons(i64 %retprim8086046, i64 %rva8089663)            ; call prim_cons
  %rva8089661 = call i64 @prim_cons(i64 %arg8087290, i64 %rva8089662)                ; call prim_cons
  %cloptr8095365 = inttoptr i64 %arg8087291 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095366 = getelementptr inbounds i64, i64* %cloptr8095365, i64 0             ; &cloptr8095365[0]
  %f8095368 = load i64, i64* %i0ptr8095366, align 8                                  ; load; *i0ptr8095366
  %fptr8095367 = inttoptr i64 %f8095368 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095367(i64 %arg8087291, i64 %rva8089661)           ; tail call
  ret void
}


define void @lam8091882(i64 %env8091883, i64 %rvp8089660) {
  %envptr8095369 = inttoptr i64 %env8091883 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095370 = getelementptr inbounds i64, i64* %envptr8095369, i64 3            ; &envptr8095369[3]
  %cont8086039 = load i64, i64* %envptr8095370, align 8                              ; load; *envptr8095370
  %envptr8095371 = inttoptr i64 %env8091883 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095372 = getelementptr inbounds i64, i64* %envptr8095371, i64 2            ; &envptr8095371[2]
  %aAb$post = load i64, i64* %envptr8095372, align 8                                 ; load; *envptr8095372
  %envptr8095373 = inttoptr i64 %env8091883 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095374 = getelementptr inbounds i64, i64* %envptr8095373, i64 1            ; &envptr8095373[1]
  %m84$v = load i64, i64* %envptr8095374, align 8                                    ; load; *envptr8095374
  %_958086043 = call i64 @prim_car(i64 %rvp8089660)                                  ; call prim_car
  %rvp8089659 = call i64 @prim_cdr(i64 %rvp8089660)                                  ; call prim_cdr
  %LYe$_95t = call i64 @prim_car(i64 %rvp8089659)                                    ; call prim_car
  %na8089639 = call i64 @prim_cdr(i64 %rvp8089659)                                   ; call prim_cdr
  %a8085859 = call i64 @prim_procedure_63(i64 %aAb$post)                             ; call prim_procedure_63
  %cmp8095375 = icmp eq i64 %a8085859, 15                                            ; false?
  br i1 %cmp8095375, label %else8095377, label %then8095376                          ; if

then8095376:
  %cloptr8095378 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095380 = getelementptr inbounds i64, i64* %cloptr8095378, i64 1              ; &eptr8095380[1]
  %eptr8095381 = getelementptr inbounds i64, i64* %cloptr8095378, i64 2              ; &eptr8095381[2]
  store i64 %m84$v, i64* %eptr8095380                                                ; *eptr8095380 = %m84$v
  store i64 %cont8086039, i64* %eptr8095381                                          ; *eptr8095381 = %cont8086039
  %eptr8095379 = getelementptr inbounds i64, i64* %cloptr8095378, i64 0              ; &cloptr8095378[0]
  %f8095382 = ptrtoint void(i64,i64)* @lam8091873 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095382, i64* %eptr8095379                                             ; store fptr
  %arg8087293 = ptrtoint i64* %cloptr8095378 to i64                                  ; closure cast; i64* -> i64
  %rva8089648 = add i64 0, 0                                                         ; quoted ()
  %rva8089647 = call i64 @prim_cons(i64 %arg8087293, i64 %rva8089648)                ; call prim_cons
  %cloptr8095383 = inttoptr i64 %aAb$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095384 = getelementptr inbounds i64, i64* %cloptr8095383, i64 0             ; &cloptr8095383[0]
  %f8095386 = load i64, i64* %i0ptr8095384, align 8                                  ; load; *i0ptr8095384
  %fptr8095385 = inttoptr i64 %f8095386 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095385(i64 %aAb$post, i64 %rva8089647)             ; tail call
  ret void

else8095377:
  %arg8087298 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095387, i32 0, i32 0)); quoted string
  %retprim8086045 = call i64 @prim_halt(i64 %arg8087298)                             ; call prim_halt
  %cloptr8095388 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095390 = getelementptr inbounds i64, i64* %cloptr8095388, i64 1              ; &eptr8095390[1]
  %eptr8095391 = getelementptr inbounds i64, i64* %cloptr8095388, i64 2              ; &eptr8095391[2]
  store i64 %m84$v, i64* %eptr8095390                                                ; *eptr8095390 = %m84$v
  store i64 %cont8086039, i64* %eptr8095391                                          ; *eptr8095391 = %cont8086039
  %eptr8095389 = getelementptr inbounds i64, i64* %cloptr8095388, i64 0              ; &cloptr8095388[0]
  %f8095392 = ptrtoint void(i64,i64)* @lam8091879 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095392, i64* %eptr8095389                                             ; store fptr
  %arg8087301 = ptrtoint i64* %cloptr8095388 to i64                                  ; closure cast; i64* -> i64
  %arg8087300 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089658 = add i64 0, 0                                                         ; quoted ()
  %rva8089657 = call i64 @prim_cons(i64 %retprim8086045, i64 %rva8089658)            ; call prim_cons
  %rva8089656 = call i64 @prim_cons(i64 %arg8087300, i64 %rva8089657)                ; call prim_cons
  %cloptr8095393 = inttoptr i64 %arg8087301 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095394 = getelementptr inbounds i64, i64* %cloptr8095393, i64 0             ; &cloptr8095393[0]
  %f8095396 = load i64, i64* %i0ptr8095394, align 8                                  ; load; *i0ptr8095394
  %fptr8095395 = inttoptr i64 %f8095396 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095395(i64 %arg8087301, i64 %rva8089656)           ; tail call
  ret void
}


define void @lam8091879(i64 %env8091880, i64 %rvp8089655) {
  %envptr8095397 = inttoptr i64 %env8091880 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095398 = getelementptr inbounds i64, i64* %envptr8095397, i64 2            ; &envptr8095397[2]
  %cont8086039 = load i64, i64* %envptr8095398, align 8                              ; load; *envptr8095398
  %envptr8095399 = inttoptr i64 %env8091880 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095400 = getelementptr inbounds i64, i64* %envptr8095399, i64 1            ; &envptr8095399[1]
  %m84$v = load i64, i64* %envptr8095400, align 8                                    ; load; *envptr8095400
  %_958086044 = call i64 @prim_car(i64 %rvp8089655)                                  ; call prim_car
  %rvp8089654 = call i64 @prim_cdr(i64 %rvp8089655)                                  ; call prim_cdr
  %tas$_95t = call i64 @prim_car(i64 %rvp8089654)                                    ; call prim_car
  %na8089650 = call i64 @prim_cdr(i64 %rvp8089654)                                   ; call prim_cdr
  %arg8087303 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089653 = add i64 0, 0                                                         ; quoted ()
  %rva8089652 = call i64 @prim_cons(i64 %m84$v, i64 %rva8089653)                     ; call prim_cons
  %rva8089651 = call i64 @prim_cons(i64 %arg8087303, i64 %rva8089652)                ; call prim_cons
  %cloptr8095401 = inttoptr i64 %cont8086039 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095402 = getelementptr inbounds i64, i64* %cloptr8095401, i64 0             ; &cloptr8095401[0]
  %f8095404 = load i64, i64* %i0ptr8095402, align 8                                  ; load; *i0ptr8095402
  %fptr8095403 = inttoptr i64 %f8095404 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095403(i64 %cont8086039, i64 %rva8089651)          ; tail call
  ret void
}


define void @lam8091873(i64 %env8091874, i64 %rvp8089646) {
  %envptr8095405 = inttoptr i64 %env8091874 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095406 = getelementptr inbounds i64, i64* %envptr8095405, i64 2            ; &envptr8095405[2]
  %cont8086039 = load i64, i64* %envptr8095406, align 8                              ; load; *envptr8095406
  %envptr8095407 = inttoptr i64 %env8091874 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095408 = getelementptr inbounds i64, i64* %envptr8095407, i64 1            ; &envptr8095407[1]
  %m84$v = load i64, i64* %envptr8095408, align 8                                    ; load; *envptr8095408
  %_958086044 = call i64 @prim_car(i64 %rvp8089646)                                  ; call prim_car
  %rvp8089645 = call i64 @prim_cdr(i64 %rvp8089646)                                  ; call prim_cdr
  %tas$_95t = call i64 @prim_car(i64 %rvp8089645)                                    ; call prim_car
  %na8089641 = call i64 @prim_cdr(i64 %rvp8089645)                                   ; call prim_cdr
  %arg8087296 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089644 = add i64 0, 0                                                         ; quoted ()
  %rva8089643 = call i64 @prim_cons(i64 %m84$v, i64 %rva8089644)                     ; call prim_cons
  %rva8089642 = call i64 @prim_cons(i64 %arg8087296, i64 %rva8089643)                ; call prim_cons
  %cloptr8095409 = inttoptr i64 %cont8086039 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095410 = getelementptr inbounds i64, i64* %cloptr8095409, i64 0             ; &cloptr8095409[0]
  %f8095412 = load i64, i64* %i0ptr8095410, align 8                                  ; load; *i0ptr8095410
  %fptr8095411 = inttoptr i64 %f8095412 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095411(i64 %cont8086039, i64 %rva8089642)          ; tail call
  ret void
}


define void @lam8091864(i64 %env8091865, i64 %rvp8089633) {
  %envptr8095413 = inttoptr i64 %env8091865 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095414 = getelementptr inbounds i64, i64* %envptr8095413, i64 3            ; &envptr8095413[3]
  %cont8086039 = load i64, i64* %envptr8095414, align 8                              ; load; *envptr8095414
  %envptr8095415 = inttoptr i64 %env8091865 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095416 = getelementptr inbounds i64, i64* %envptr8095415, i64 2            ; &envptr8095415[2]
  %aAb$post = load i64, i64* %envptr8095416, align 8                                 ; load; *envptr8095416
  %envptr8095417 = inttoptr i64 %env8091865 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095418 = getelementptr inbounds i64, i64* %envptr8095417, i64 1            ; &envptr8095417[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095418, align 8                      ; load; *envptr8095418
  %_958086042 = call i64 @prim_car(i64 %rvp8089633)                                  ; call prim_car
  %rvp8089632 = call i64 @prim_cdr(i64 %rvp8089633)                                  ; call prim_cdr
  %m84$v = call i64 @prim_car(i64 %rvp8089632)                                       ; call prim_car
  %na8089605 = call i64 @prim_cdr(i64 %rvp8089632)                                   ; call prim_cdr
  %arg8087257 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085857 = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8087257) ; call prim_vector_45ref
  %a8085858 = call i64 @prim_cdr(i64 %a8085857)                                      ; call prim_cdr
  %arg8087261 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086046 = call i64 @prim_vector_45set_33(i64 %syN$_37wind_45stack, i64 %arg8087261, i64 %a8085858); call prim_vector_45set_33
  %cloptr8095419 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095421 = getelementptr inbounds i64, i64* %cloptr8095419, i64 1              ; &eptr8095421[1]
  %eptr8095422 = getelementptr inbounds i64, i64* %cloptr8095419, i64 2              ; &eptr8095422[2]
  %eptr8095423 = getelementptr inbounds i64, i64* %cloptr8095419, i64 3              ; &eptr8095423[3]
  store i64 %m84$v, i64* %eptr8095421                                                ; *eptr8095421 = %m84$v
  store i64 %aAb$post, i64* %eptr8095422                                             ; *eptr8095422 = %aAb$post
  store i64 %cont8086039, i64* %eptr8095423                                          ; *eptr8095423 = %cont8086039
  %eptr8095420 = getelementptr inbounds i64, i64* %cloptr8095419, i64 0              ; &cloptr8095419[0]
  %f8095424 = ptrtoint void(i64,i64)* @lam8091860 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095424, i64* %eptr8095420                                             ; store fptr
  %arg8087265 = ptrtoint i64* %cloptr8095419 to i64                                  ; closure cast; i64* -> i64
  %arg8087264 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089631 = add i64 0, 0                                                         ; quoted ()
  %rva8089630 = call i64 @prim_cons(i64 %retprim8086046, i64 %rva8089631)            ; call prim_cons
  %rva8089629 = call i64 @prim_cons(i64 %arg8087264, i64 %rva8089630)                ; call prim_cons
  %cloptr8095425 = inttoptr i64 %arg8087265 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095426 = getelementptr inbounds i64, i64* %cloptr8095425, i64 0             ; &cloptr8095425[0]
  %f8095428 = load i64, i64* %i0ptr8095426, align 8                                  ; load; *i0ptr8095426
  %fptr8095427 = inttoptr i64 %f8095428 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095427(i64 %arg8087265, i64 %rva8089629)           ; tail call
  ret void
}


define void @lam8091860(i64 %env8091861, i64 %rvp8089628) {
  %envptr8095429 = inttoptr i64 %env8091861 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095430 = getelementptr inbounds i64, i64* %envptr8095429, i64 3            ; &envptr8095429[3]
  %cont8086039 = load i64, i64* %envptr8095430, align 8                              ; load; *envptr8095430
  %envptr8095431 = inttoptr i64 %env8091861 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095432 = getelementptr inbounds i64, i64* %envptr8095431, i64 2            ; &envptr8095431[2]
  %aAb$post = load i64, i64* %envptr8095432, align 8                                 ; load; *envptr8095432
  %envptr8095433 = inttoptr i64 %env8091861 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095434 = getelementptr inbounds i64, i64* %envptr8095433, i64 1            ; &envptr8095433[1]
  %m84$v = load i64, i64* %envptr8095434, align 8                                    ; load; *envptr8095434
  %_958086043 = call i64 @prim_car(i64 %rvp8089628)                                  ; call prim_car
  %rvp8089627 = call i64 @prim_cdr(i64 %rvp8089628)                                  ; call prim_cdr
  %LYe$_95t = call i64 @prim_car(i64 %rvp8089627)                                    ; call prim_car
  %na8089607 = call i64 @prim_cdr(i64 %rvp8089627)                                   ; call prim_cdr
  %a8085859 = call i64 @prim_procedure_63(i64 %aAb$post)                             ; call prim_procedure_63
  %cmp8095435 = icmp eq i64 %a8085859, 15                                            ; false?
  br i1 %cmp8095435, label %else8095437, label %then8095436                          ; if

then8095436:
  %cloptr8095438 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095440 = getelementptr inbounds i64, i64* %cloptr8095438, i64 1              ; &eptr8095440[1]
  %eptr8095441 = getelementptr inbounds i64, i64* %cloptr8095438, i64 2              ; &eptr8095441[2]
  store i64 %m84$v, i64* %eptr8095440                                                ; *eptr8095440 = %m84$v
  store i64 %cont8086039, i64* %eptr8095441                                          ; *eptr8095441 = %cont8086039
  %eptr8095439 = getelementptr inbounds i64, i64* %cloptr8095438, i64 0              ; &cloptr8095438[0]
  %f8095442 = ptrtoint void(i64,i64)* @lam8091851 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095442, i64* %eptr8095439                                             ; store fptr
  %arg8087267 = ptrtoint i64* %cloptr8095438 to i64                                  ; closure cast; i64* -> i64
  %rva8089616 = add i64 0, 0                                                         ; quoted ()
  %rva8089615 = call i64 @prim_cons(i64 %arg8087267, i64 %rva8089616)                ; call prim_cons
  %cloptr8095443 = inttoptr i64 %aAb$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095444 = getelementptr inbounds i64, i64* %cloptr8095443, i64 0             ; &cloptr8095443[0]
  %f8095446 = load i64, i64* %i0ptr8095444, align 8                                  ; load; *i0ptr8095444
  %fptr8095445 = inttoptr i64 %f8095446 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095445(i64 %aAb$post, i64 %rva8089615)             ; tail call
  ret void

else8095437:
  %arg8087272 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095447, i32 0, i32 0)); quoted string
  %retprim8086045 = call i64 @prim_halt(i64 %arg8087272)                             ; call prim_halt
  %cloptr8095448 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095450 = getelementptr inbounds i64, i64* %cloptr8095448, i64 1              ; &eptr8095450[1]
  %eptr8095451 = getelementptr inbounds i64, i64* %cloptr8095448, i64 2              ; &eptr8095451[2]
  store i64 %m84$v, i64* %eptr8095450                                                ; *eptr8095450 = %m84$v
  store i64 %cont8086039, i64* %eptr8095451                                          ; *eptr8095451 = %cont8086039
  %eptr8095449 = getelementptr inbounds i64, i64* %cloptr8095448, i64 0              ; &cloptr8095448[0]
  %f8095452 = ptrtoint void(i64,i64)* @lam8091857 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095452, i64* %eptr8095449                                             ; store fptr
  %arg8087275 = ptrtoint i64* %cloptr8095448 to i64                                  ; closure cast; i64* -> i64
  %arg8087274 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089626 = add i64 0, 0                                                         ; quoted ()
  %rva8089625 = call i64 @prim_cons(i64 %retprim8086045, i64 %rva8089626)            ; call prim_cons
  %rva8089624 = call i64 @prim_cons(i64 %arg8087274, i64 %rva8089625)                ; call prim_cons
  %cloptr8095453 = inttoptr i64 %arg8087275 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095454 = getelementptr inbounds i64, i64* %cloptr8095453, i64 0             ; &cloptr8095453[0]
  %f8095456 = load i64, i64* %i0ptr8095454, align 8                                  ; load; *i0ptr8095454
  %fptr8095455 = inttoptr i64 %f8095456 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095455(i64 %arg8087275, i64 %rva8089624)           ; tail call
  ret void
}


define void @lam8091857(i64 %env8091858, i64 %rvp8089623) {
  %envptr8095457 = inttoptr i64 %env8091858 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095458 = getelementptr inbounds i64, i64* %envptr8095457, i64 2            ; &envptr8095457[2]
  %cont8086039 = load i64, i64* %envptr8095458, align 8                              ; load; *envptr8095458
  %envptr8095459 = inttoptr i64 %env8091858 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095460 = getelementptr inbounds i64, i64* %envptr8095459, i64 1            ; &envptr8095459[1]
  %m84$v = load i64, i64* %envptr8095460, align 8                                    ; load; *envptr8095460
  %_958086044 = call i64 @prim_car(i64 %rvp8089623)                                  ; call prim_car
  %rvp8089622 = call i64 @prim_cdr(i64 %rvp8089623)                                  ; call prim_cdr
  %tas$_95t = call i64 @prim_car(i64 %rvp8089622)                                    ; call prim_car
  %na8089618 = call i64 @prim_cdr(i64 %rvp8089622)                                   ; call prim_cdr
  %arg8087277 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089621 = add i64 0, 0                                                         ; quoted ()
  %rva8089620 = call i64 @prim_cons(i64 %m84$v, i64 %rva8089621)                     ; call prim_cons
  %rva8089619 = call i64 @prim_cons(i64 %arg8087277, i64 %rva8089620)                ; call prim_cons
  %cloptr8095461 = inttoptr i64 %cont8086039 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095462 = getelementptr inbounds i64, i64* %cloptr8095461, i64 0             ; &cloptr8095461[0]
  %f8095464 = load i64, i64* %i0ptr8095462, align 8                                  ; load; *i0ptr8095462
  %fptr8095463 = inttoptr i64 %f8095464 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095463(i64 %cont8086039, i64 %rva8089619)          ; tail call
  ret void
}


define void @lam8091851(i64 %env8091852, i64 %rvp8089614) {
  %envptr8095465 = inttoptr i64 %env8091852 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095466 = getelementptr inbounds i64, i64* %envptr8095465, i64 2            ; &envptr8095465[2]
  %cont8086039 = load i64, i64* %envptr8095466, align 8                              ; load; *envptr8095466
  %envptr8095467 = inttoptr i64 %env8091852 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095468 = getelementptr inbounds i64, i64* %envptr8095467, i64 1            ; &envptr8095467[1]
  %m84$v = load i64, i64* %envptr8095468, align 8                                    ; load; *envptr8095468
  %_958086044 = call i64 @prim_car(i64 %rvp8089614)                                  ; call prim_car
  %rvp8089613 = call i64 @prim_cdr(i64 %rvp8089614)                                  ; call prim_cdr
  %tas$_95t = call i64 @prim_car(i64 %rvp8089613)                                    ; call prim_car
  %na8089609 = call i64 @prim_cdr(i64 %rvp8089613)                                   ; call prim_cdr
  %arg8087270 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089612 = add i64 0, 0                                                         ; quoted ()
  %rva8089611 = call i64 @prim_cons(i64 %m84$v, i64 %rva8089612)                     ; call prim_cons
  %rva8089610 = call i64 @prim_cons(i64 %arg8087270, i64 %rva8089611)                ; call prim_cons
  %cloptr8095469 = inttoptr i64 %cont8086039 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095470 = getelementptr inbounds i64, i64* %cloptr8095469, i64 0             ; &cloptr8095469[0]
  %f8095472 = load i64, i64* %i0ptr8095470, align 8                                  ; load; *i0ptr8095470
  %fptr8095471 = inttoptr i64 %f8095472 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095471(i64 %cont8086039, i64 %rva8089610)          ; tail call
  ret void
}


define void @lam8091840(i64 %env8091841, i64 %IKV$lst8086125) {
  %cont8086124 = call i64 @prim_car(i64 %IKV$lst8086125)                             ; call prim_car
  %IKV$lst = call i64 @prim_cdr(i64 %IKV$lst8086125)                                 ; call prim_cdr
  %arg8087377 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089763 = add i64 0, 0                                                         ; quoted ()
  %rva8089762 = call i64 @prim_cons(i64 %IKV$lst, i64 %rva8089763)                   ; call prim_cons
  %rva8089761 = call i64 @prim_cons(i64 %arg8087377, i64 %rva8089762)                ; call prim_cons
  %cloptr8095473 = inttoptr i64 %cont8086124 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095474 = getelementptr inbounds i64, i64* %cloptr8095473, i64 0             ; &cloptr8095473[0]
  %f8095476 = load i64, i64* %i0ptr8095474, align 8                                  ; load; *i0ptr8095474
  %fptr8095475 = inttoptr i64 %f8095476 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095475(i64 %cont8086124, i64 %rva8089761)          ; tail call
  ret void
}


define void @lam8091836(i64 %env8091837, i64 %rvp8090582) {
  %envptr8095477 = inttoptr i64 %env8091837 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095478 = getelementptr inbounds i64, i64* %envptr8095477, i64 2            ; &envptr8095477[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095478, align 8                         ; load; *envptr8095478
  %envptr8095479 = inttoptr i64 %env8091837 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095480 = getelementptr inbounds i64, i64* %envptr8095479, i64 1            ; &envptr8095479[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095480, align 8                      ; load; *envptr8095480
  %_958086050 = call i64 @prim_car(i64 %rvp8090582)                                  ; call prim_car
  %rvp8090581 = call i64 @prim_cdr(i64 %rvp8090582)                                  ; call prim_cdr
  %FrQ$_37raise_45handler = call i64 @prim_car(i64 %rvp8090581)                      ; call prim_car
  %na8089765 = call i64 @prim_cdr(i64 %rvp8090581)                                   ; call prim_cdr
  %cloptr8095481 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8095482 = getelementptr inbounds i64, i64* %cloptr8095481, i64 0              ; &cloptr8095481[0]
  %f8095483 = ptrtoint void(i64,i64)* @lam8091834 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095483, i64* %eptr8095482                                             ; store fptr
  %arg8087380 = ptrtoint i64* %cloptr8095481 to i64                                  ; closure cast; i64* -> i64
  %cloptr8095484 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095486 = getelementptr inbounds i64, i64* %cloptr8095484, i64 1              ; &eptr8095486[1]
  %eptr8095487 = getelementptr inbounds i64, i64* %cloptr8095484, i64 2              ; &eptr8095487[2]
  %eptr8095488 = getelementptr inbounds i64, i64* %cloptr8095484, i64 3              ; &eptr8095488[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095486                                  ; *eptr8095486 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095487                                     ; *eptr8095487 = %ltz$_37do_45wind
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095488                               ; *eptr8095488 = %FrQ$_37raise_45handler
  %eptr8095485 = getelementptr inbounds i64, i64* %cloptr8095484, i64 0              ; &cloptr8095484[0]
  %f8095489 = ptrtoint void(i64,i64)* @lam8091830 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095489, i64* %eptr8095485                                             ; store fptr
  %arg8087379 = ptrtoint i64* %cloptr8095484 to i64                                  ; closure cast; i64* -> i64
  %rva8090580 = add i64 0, 0                                                         ; quoted ()
  %rva8090579 = call i64 @prim_cons(i64 %arg8087379, i64 %rva8090580)                ; call prim_cons
  %cloptr8095490 = inttoptr i64 %arg8087380 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095491 = getelementptr inbounds i64, i64* %cloptr8095490, i64 0             ; &cloptr8095490[0]
  %f8095493 = load i64, i64* %i0ptr8095491, align 8                                  ; load; *i0ptr8095491
  %fptr8095492 = inttoptr i64 %f8095493 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095492(i64 %arg8087380, i64 %rva8090579)           ; tail call
  ret void
}


define void @lam8091834(i64 %env8091835, i64 %FFe$lst8086123) {
  %cont8086122 = call i64 @prim_car(i64 %FFe$lst8086123)                             ; call prim_car
  %FFe$lst = call i64 @prim_cdr(i64 %FFe$lst8086123)                                 ; call prim_cdr
  %arg8087384 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089768 = add i64 0, 0                                                         ; quoted ()
  %rva8089767 = call i64 @prim_cons(i64 %FFe$lst, i64 %rva8089768)                   ; call prim_cons
  %rva8089766 = call i64 @prim_cons(i64 %arg8087384, i64 %rva8089767)                ; call prim_cons
  %cloptr8095494 = inttoptr i64 %cont8086122 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095495 = getelementptr inbounds i64, i64* %cloptr8095494, i64 0             ; &cloptr8095494[0]
  %f8095497 = load i64, i64* %i0ptr8095495, align 8                                  ; load; *i0ptr8095495
  %fptr8095496 = inttoptr i64 %f8095497 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095496(i64 %cont8086122, i64 %rva8089766)          ; tail call
  ret void
}


define void @lam8091830(i64 %env8091831, i64 %rvp8090578) {
  %envptr8095498 = inttoptr i64 %env8091831 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095499 = getelementptr inbounds i64, i64* %envptr8095498, i64 3            ; &envptr8095498[3]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095499, align 8                   ; load; *envptr8095499
  %envptr8095500 = inttoptr i64 %env8091831 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095501 = getelementptr inbounds i64, i64* %envptr8095500, i64 2            ; &envptr8095500[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095501, align 8                         ; load; *envptr8095501
  %envptr8095502 = inttoptr i64 %env8091831 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095503 = getelementptr inbounds i64, i64* %envptr8095502, i64 1            ; &envptr8095502[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095503, align 8                      ; load; *envptr8095503
  %_958086120 = call i64 @prim_car(i64 %rvp8090578)                                  ; call prim_car
  %rvp8090577 = call i64 @prim_cdr(i64 %rvp8090578)                                  ; call prim_cdr
  %a8085860 = call i64 @prim_car(i64 %rvp8090577)                                    ; call prim_car
  %na8089770 = call i64 @prim_cdr(i64 %rvp8090577)                                   ; call prim_cdr
  %arg8087387 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086121 = call i64 @prim_make_45vector(i64 %arg8087387, i64 %a8085860)     ; call prim_make_45vector
  %cloptr8095504 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095506 = getelementptr inbounds i64, i64* %cloptr8095504, i64 1              ; &eptr8095506[1]
  %eptr8095507 = getelementptr inbounds i64, i64* %cloptr8095504, i64 2              ; &eptr8095507[2]
  %eptr8095508 = getelementptr inbounds i64, i64* %cloptr8095504, i64 3              ; &eptr8095508[3]
  store i64 %syN$_37wind_45stack, i64* %eptr8095506                                  ; *eptr8095506 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095507                                     ; *eptr8095507 = %ltz$_37do_45wind
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095508                               ; *eptr8095508 = %FrQ$_37raise_45handler
  %eptr8095505 = getelementptr inbounds i64, i64* %cloptr8095504, i64 0              ; &cloptr8095504[0]
  %f8095509 = ptrtoint void(i64,i64)* @lam8091827 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095509, i64* %eptr8095505                                             ; store fptr
  %arg8087390 = ptrtoint i64* %cloptr8095504 to i64                                  ; closure cast; i64* -> i64
  %arg8087389 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090576 = add i64 0, 0                                                         ; quoted ()
  %rva8090575 = call i64 @prim_cons(i64 %retprim8086121, i64 %rva8090576)            ; call prim_cons
  %rva8090574 = call i64 @prim_cons(i64 %arg8087389, i64 %rva8090575)                ; call prim_cons
  %cloptr8095510 = inttoptr i64 %arg8087390 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095511 = getelementptr inbounds i64, i64* %cloptr8095510, i64 0             ; &cloptr8095510[0]
  %f8095513 = load i64, i64* %i0ptr8095511, align 8                                  ; load; *i0ptr8095511
  %fptr8095512 = inttoptr i64 %f8095513 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095512(i64 %arg8087390, i64 %rva8090574)           ; tail call
  ret void
}


define void @lam8091827(i64 %env8091828, i64 %rvp8090573) {
  %envptr8095514 = inttoptr i64 %env8091828 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095515 = getelementptr inbounds i64, i64* %envptr8095514, i64 3            ; &envptr8095514[3]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095515, align 8                   ; load; *envptr8095515
  %envptr8095516 = inttoptr i64 %env8091828 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095517 = getelementptr inbounds i64, i64* %envptr8095516, i64 2            ; &envptr8095516[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095517, align 8                         ; load; *envptr8095517
  %envptr8095518 = inttoptr i64 %env8091828 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095519 = getelementptr inbounds i64, i64* %envptr8095518, i64 1            ; &envptr8095518[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095519, align 8                      ; load; *envptr8095519
  %_958086051 = call i64 @prim_car(i64 %rvp8090573)                                  ; call prim_car
  %rvp8090572 = call i64 @prim_cdr(i64 %rvp8090573)                                  ; call prim_cdr
  %Z5B$ccstack = call i64 @prim_car(i64 %rvp8090572)                                 ; call prim_car
  %na8089772 = call i64 @prim_cdr(i64 %rvp8090572)                                   ; call prim_cdr
  %cloptr8095520 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8095521 = getelementptr inbounds i64, i64* %cloptr8095520, i64 0              ; &cloptr8095520[0]
  %f8095522 = ptrtoint void(i64,i64)* @lam8091825 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095522, i64* %eptr8095521                                             ; store fptr
  %arg8087392 = ptrtoint i64* %cloptr8095520 to i64                                  ; closure cast; i64* -> i64
  %cloptr8095523 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8095525 = getelementptr inbounds i64, i64* %cloptr8095523, i64 1              ; &eptr8095525[1]
  %eptr8095526 = getelementptr inbounds i64, i64* %cloptr8095523, i64 2              ; &eptr8095526[2]
  %eptr8095527 = getelementptr inbounds i64, i64* %cloptr8095523, i64 3              ; &eptr8095527[3]
  %eptr8095528 = getelementptr inbounds i64, i64* %cloptr8095523, i64 4              ; &eptr8095528[4]
  store i64 %syN$_37wind_45stack, i64* %eptr8095525                                  ; *eptr8095525 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095526                                     ; *eptr8095526 = %ltz$_37do_45wind
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095527                               ; *eptr8095527 = %FrQ$_37raise_45handler
  store i64 %Z5B$ccstack, i64* %eptr8095528                                          ; *eptr8095528 = %Z5B$ccstack
  %eptr8095524 = getelementptr inbounds i64, i64* %cloptr8095523, i64 0              ; &cloptr8095523[0]
  %f8095529 = ptrtoint void(i64,i64)* @lam8091821 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095529, i64* %eptr8095524                                             ; store fptr
  %arg8087391 = ptrtoint i64* %cloptr8095523 to i64                                  ; closure cast; i64* -> i64
  %rva8090571 = add i64 0, 0                                                         ; quoted ()
  %rva8090570 = call i64 @prim_cons(i64 %arg8087391, i64 %rva8090571)                ; call prim_cons
  %cloptr8095530 = inttoptr i64 %arg8087392 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095531 = getelementptr inbounds i64, i64* %cloptr8095530, i64 0             ; &cloptr8095530[0]
  %f8095533 = load i64, i64* %i0ptr8095531, align 8                                  ; load; *i0ptr8095531
  %fptr8095532 = inttoptr i64 %f8095533 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095532(i64 %arg8087392, i64 %rva8090570)           ; tail call
  ret void
}


define void @lam8091825(i64 %env8091826, i64 %yUe$lst8086119) {
  %cont8086118 = call i64 @prim_car(i64 %yUe$lst8086119)                             ; call prim_car
  %yUe$lst = call i64 @prim_cdr(i64 %yUe$lst8086119)                                 ; call prim_cdr
  %arg8087396 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089775 = add i64 0, 0                                                         ; quoted ()
  %rva8089774 = call i64 @prim_cons(i64 %yUe$lst, i64 %rva8089775)                   ; call prim_cons
  %rva8089773 = call i64 @prim_cons(i64 %arg8087396, i64 %rva8089774)                ; call prim_cons
  %cloptr8095534 = inttoptr i64 %cont8086118 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095535 = getelementptr inbounds i64, i64* %cloptr8095534, i64 0             ; &cloptr8095534[0]
  %f8095537 = load i64, i64* %i0ptr8095535, align 8                                  ; load; *i0ptr8095535
  %fptr8095536 = inttoptr i64 %f8095537 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095536(i64 %cont8086118, i64 %rva8089773)          ; tail call
  ret void
}


define void @lam8091821(i64 %env8091822, i64 %rvp8090569) {
  %envptr8095538 = inttoptr i64 %env8091822 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095539 = getelementptr inbounds i64, i64* %envptr8095538, i64 4            ; &envptr8095538[4]
  %Z5B$ccstack = load i64, i64* %envptr8095539, align 8                              ; load; *envptr8095539
  %envptr8095540 = inttoptr i64 %env8091822 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095541 = getelementptr inbounds i64, i64* %envptr8095540, i64 3            ; &envptr8095540[3]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095541, align 8                   ; load; *envptr8095541
  %envptr8095542 = inttoptr i64 %env8091822 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095543 = getelementptr inbounds i64, i64* %envptr8095542, i64 2            ; &envptr8095542[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095543, align 8                         ; load; *envptr8095543
  %envptr8095544 = inttoptr i64 %env8091822 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095545 = getelementptr inbounds i64, i64* %envptr8095544, i64 1            ; &envptr8095544[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095545, align 8                      ; load; *envptr8095545
  %_958086116 = call i64 @prim_car(i64 %rvp8090569)                                  ; call prim_car
  %rvp8090568 = call i64 @prim_cdr(i64 %rvp8090569)                                  ; call prim_cdr
  %a8085861 = call i64 @prim_car(i64 %rvp8090568)                                    ; call prim_car
  %na8089777 = call i64 @prim_cdr(i64 %rvp8090568)                                   ; call prim_cdr
  %arg8087399 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086117 = call i64 @prim_make_45vector(i64 %arg8087399, i64 %a8085861)     ; call prim_make_45vector
  %cloptr8095546 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8095548 = getelementptr inbounds i64, i64* %cloptr8095546, i64 1              ; &eptr8095548[1]
  %eptr8095549 = getelementptr inbounds i64, i64* %cloptr8095546, i64 2              ; &eptr8095549[2]
  %eptr8095550 = getelementptr inbounds i64, i64* %cloptr8095546, i64 3              ; &eptr8095550[3]
  %eptr8095551 = getelementptr inbounds i64, i64* %cloptr8095546, i64 4              ; &eptr8095551[4]
  store i64 %syN$_37wind_45stack, i64* %eptr8095548                                  ; *eptr8095548 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095549                                     ; *eptr8095549 = %ltz$_37do_45wind
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095550                               ; *eptr8095550 = %FrQ$_37raise_45handler
  store i64 %Z5B$ccstack, i64* %eptr8095551                                          ; *eptr8095551 = %Z5B$ccstack
  %eptr8095547 = getelementptr inbounds i64, i64* %cloptr8095546, i64 0              ; &cloptr8095546[0]
  %f8095552 = ptrtoint void(i64,i64)* @lam8091818 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095552, i64* %eptr8095547                                             ; store fptr
  %arg8087402 = ptrtoint i64* %cloptr8095546 to i64                                  ; closure cast; i64* -> i64
  %arg8087401 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090567 = add i64 0, 0                                                         ; quoted ()
  %rva8090566 = call i64 @prim_cons(i64 %retprim8086117, i64 %rva8090567)            ; call prim_cons
  %rva8090565 = call i64 @prim_cons(i64 %arg8087401, i64 %rva8090566)                ; call prim_cons
  %cloptr8095553 = inttoptr i64 %arg8087402 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095554 = getelementptr inbounds i64, i64* %cloptr8095553, i64 0             ; &cloptr8095553[0]
  %f8095556 = load i64, i64* %i0ptr8095554, align 8                                  ; load; *i0ptr8095554
  %fptr8095555 = inttoptr i64 %f8095556 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095555(i64 %arg8087402, i64 %rva8090565)           ; tail call
  ret void
}


define void @lam8091818(i64 %env8091819, i64 %rvp8090564) {
  %envptr8095557 = inttoptr i64 %env8091819 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095558 = getelementptr inbounds i64, i64* %envptr8095557, i64 4            ; &envptr8095557[4]
  %Z5B$ccstack = load i64, i64* %envptr8095558, align 8                              ; load; *envptr8095558
  %envptr8095559 = inttoptr i64 %env8091819 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095560 = getelementptr inbounds i64, i64* %envptr8095559, i64 3            ; &envptr8095559[3]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095560, align 8                   ; load; *envptr8095560
  %envptr8095561 = inttoptr i64 %env8091819 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095562 = getelementptr inbounds i64, i64* %envptr8095561, i64 2            ; &envptr8095561[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095562, align 8                         ; load; *envptr8095562
  %envptr8095563 = inttoptr i64 %env8091819 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095564 = getelementptr inbounds i64, i64* %envptr8095563, i64 1            ; &envptr8095563[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095564, align 8                      ; load; *envptr8095564
  %_958086052 = call i64 @prim_car(i64 %rvp8090564)                                  ; call prim_car
  %rvp8090563 = call i64 @prim_cdr(i64 %rvp8090564)                                  ; call prim_cdr
  %ANn$fail = call i64 @prim_car(i64 %rvp8090563)                                    ; call prim_car
  %na8089779 = call i64 @prim_cdr(i64 %rvp8090563)                                   ; call prim_cdr
  %cloptr8095565 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8095566 = getelementptr inbounds i64, i64* %cloptr8095565, i64 0              ; &cloptr8095565[0]
  %f8095567 = ptrtoint void(i64,i64)* @lam8091816 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095567, i64* %eptr8095566                                             ; store fptr
  %arg8087404 = ptrtoint i64* %cloptr8095565 to i64                                  ; closure cast; i64* -> i64
  %cloptr8095568 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr8095570 = getelementptr inbounds i64, i64* %cloptr8095568, i64 1              ; &eptr8095570[1]
  %eptr8095571 = getelementptr inbounds i64, i64* %cloptr8095568, i64 2              ; &eptr8095571[2]
  %eptr8095572 = getelementptr inbounds i64, i64* %cloptr8095568, i64 3              ; &eptr8095572[3]
  %eptr8095573 = getelementptr inbounds i64, i64* %cloptr8095568, i64 4              ; &eptr8095573[4]
  %eptr8095574 = getelementptr inbounds i64, i64* %cloptr8095568, i64 5              ; &eptr8095574[5]
  store i64 %syN$_37wind_45stack, i64* %eptr8095570                                  ; *eptr8095570 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095571                                     ; *eptr8095571 = %ltz$_37do_45wind
  store i64 %ANn$fail, i64* %eptr8095572                                             ; *eptr8095572 = %ANn$fail
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095573                               ; *eptr8095573 = %FrQ$_37raise_45handler
  store i64 %Z5B$ccstack, i64* %eptr8095574                                          ; *eptr8095574 = %Z5B$ccstack
  %eptr8095569 = getelementptr inbounds i64, i64* %cloptr8095568, i64 0              ; &cloptr8095568[0]
  %f8095575 = ptrtoint void(i64,i64)* @lam8091812 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095575, i64* %eptr8095569                                             ; store fptr
  %arg8087403 = ptrtoint i64* %cloptr8095568 to i64                                  ; closure cast; i64* -> i64
  %rva8090562 = add i64 0, 0                                                         ; quoted ()
  %rva8090561 = call i64 @prim_cons(i64 %arg8087403, i64 %rva8090562)                ; call prim_cons
  %cloptr8095576 = inttoptr i64 %arg8087404 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095577 = getelementptr inbounds i64, i64* %cloptr8095576, i64 0             ; &cloptr8095576[0]
  %f8095579 = load i64, i64* %i0ptr8095577, align 8                                  ; load; *i0ptr8095577
  %fptr8095578 = inttoptr i64 %f8095579 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095578(i64 %arg8087404, i64 %rva8090561)           ; tail call
  ret void
}


define void @lam8091816(i64 %env8091817, i64 %KMI$lst8086115) {
  %cont8086114 = call i64 @prim_car(i64 %KMI$lst8086115)                             ; call prim_car
  %KMI$lst = call i64 @prim_cdr(i64 %KMI$lst8086115)                                 ; call prim_cdr
  %arg8087408 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089782 = add i64 0, 0                                                         ; quoted ()
  %rva8089781 = call i64 @prim_cons(i64 %KMI$lst, i64 %rva8089782)                   ; call prim_cons
  %rva8089780 = call i64 @prim_cons(i64 %arg8087408, i64 %rva8089781)                ; call prim_cons
  %cloptr8095580 = inttoptr i64 %cont8086114 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095581 = getelementptr inbounds i64, i64* %cloptr8095580, i64 0             ; &cloptr8095580[0]
  %f8095583 = load i64, i64* %i0ptr8095581, align 8                                  ; load; *i0ptr8095581
  %fptr8095582 = inttoptr i64 %f8095583 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095582(i64 %cont8086114, i64 %rva8089780)          ; tail call
  ret void
}


define void @lam8091812(i64 %env8091813, i64 %rvp8090560) {
  %envptr8095584 = inttoptr i64 %env8091813 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095585 = getelementptr inbounds i64, i64* %envptr8095584, i64 5            ; &envptr8095584[5]
  %Z5B$ccstack = load i64, i64* %envptr8095585, align 8                              ; load; *envptr8095585
  %envptr8095586 = inttoptr i64 %env8091813 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095587 = getelementptr inbounds i64, i64* %envptr8095586, i64 4            ; &envptr8095586[4]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095587, align 8                   ; load; *envptr8095587
  %envptr8095588 = inttoptr i64 %env8091813 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095589 = getelementptr inbounds i64, i64* %envptr8095588, i64 3            ; &envptr8095588[3]
  %ANn$fail = load i64, i64* %envptr8095589, align 8                                 ; load; *envptr8095589
  %envptr8095590 = inttoptr i64 %env8091813 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095591 = getelementptr inbounds i64, i64* %envptr8095590, i64 2            ; &envptr8095590[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095591, align 8                         ; load; *envptr8095591
  %envptr8095592 = inttoptr i64 %env8091813 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095593 = getelementptr inbounds i64, i64* %envptr8095592, i64 1            ; &envptr8095592[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095593, align 8                      ; load; *envptr8095593
  %_958086112 = call i64 @prim_car(i64 %rvp8090560)                                  ; call prim_car
  %rvp8090559 = call i64 @prim_cdr(i64 %rvp8090560)                                  ; call prim_cdr
  %a8085862 = call i64 @prim_car(i64 %rvp8090559)                                    ; call prim_car
  %na8089784 = call i64 @prim_cdr(i64 %rvp8090559)                                   ; call prim_cdr
  %arg8087411 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086113 = call i64 @prim_make_45vector(i64 %arg8087411, i64 %a8085862)     ; call prim_make_45vector
  %cloptr8095594 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr8095596 = getelementptr inbounds i64, i64* %cloptr8095594, i64 1              ; &eptr8095596[1]
  %eptr8095597 = getelementptr inbounds i64, i64* %cloptr8095594, i64 2              ; &eptr8095597[2]
  %eptr8095598 = getelementptr inbounds i64, i64* %cloptr8095594, i64 3              ; &eptr8095598[3]
  %eptr8095599 = getelementptr inbounds i64, i64* %cloptr8095594, i64 4              ; &eptr8095599[4]
  %eptr8095600 = getelementptr inbounds i64, i64* %cloptr8095594, i64 5              ; &eptr8095600[5]
  store i64 %syN$_37wind_45stack, i64* %eptr8095596                                  ; *eptr8095596 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095597                                     ; *eptr8095597 = %ltz$_37do_45wind
  store i64 %ANn$fail, i64* %eptr8095598                                             ; *eptr8095598 = %ANn$fail
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095599                               ; *eptr8095599 = %FrQ$_37raise_45handler
  store i64 %Z5B$ccstack, i64* %eptr8095600                                          ; *eptr8095600 = %Z5B$ccstack
  %eptr8095595 = getelementptr inbounds i64, i64* %cloptr8095594, i64 0              ; &cloptr8095594[0]
  %f8095601 = ptrtoint void(i64,i64)* @lam8091809 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095601, i64* %eptr8095595                                             ; store fptr
  %arg8087414 = ptrtoint i64* %cloptr8095594 to i64                                  ; closure cast; i64* -> i64
  %arg8087413 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090558 = add i64 0, 0                                                         ; quoted ()
  %rva8090557 = call i64 @prim_cons(i64 %retprim8086113, i64 %rva8090558)            ; call prim_cons
  %rva8090556 = call i64 @prim_cons(i64 %arg8087413, i64 %rva8090557)                ; call prim_cons
  %cloptr8095602 = inttoptr i64 %arg8087414 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095603 = getelementptr inbounds i64, i64* %cloptr8095602, i64 0             ; &cloptr8095602[0]
  %f8095605 = load i64, i64* %i0ptr8095603, align 8                                  ; load; *i0ptr8095603
  %fptr8095604 = inttoptr i64 %f8095605 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095604(i64 %arg8087414, i64 %rva8090556)           ; tail call
  ret void
}


define void @lam8091809(i64 %env8091810, i64 %rvp8090555) {
  %envptr8095606 = inttoptr i64 %env8091810 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095607 = getelementptr inbounds i64, i64* %envptr8095606, i64 5            ; &envptr8095606[5]
  %Z5B$ccstack = load i64, i64* %envptr8095607, align 8                              ; load; *envptr8095607
  %envptr8095608 = inttoptr i64 %env8091810 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095609 = getelementptr inbounds i64, i64* %envptr8095608, i64 4            ; &envptr8095608[4]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095609, align 8                   ; load; *envptr8095609
  %envptr8095610 = inttoptr i64 %env8091810 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095611 = getelementptr inbounds i64, i64* %envptr8095610, i64 3            ; &envptr8095610[3]
  %ANn$fail = load i64, i64* %envptr8095611, align 8                                 ; load; *envptr8095611
  %envptr8095612 = inttoptr i64 %env8091810 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095613 = getelementptr inbounds i64, i64* %envptr8095612, i64 2            ; &envptr8095612[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095613, align 8                         ; load; *envptr8095613
  %envptr8095614 = inttoptr i64 %env8091810 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095615 = getelementptr inbounds i64, i64* %envptr8095614, i64 1            ; &envptr8095614[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095615, align 8                      ; load; *envptr8095615
  %_958086053 = call i64 @prim_car(i64 %rvp8090555)                                  ; call prim_car
  %rvp8090554 = call i64 @prim_cdr(i64 %rvp8090555)                                  ; call prim_cdr
  %U6p$assert = call i64 @prim_car(i64 %rvp8090554)                                  ; call prim_car
  %na8089786 = call i64 @prim_cdr(i64 %rvp8090554)                                   ; call prim_cdr
  %cloptr8095616 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8095617 = getelementptr inbounds i64, i64* %cloptr8095616, i64 0              ; &cloptr8095616[0]
  %f8095618 = ptrtoint void(i64,i64)* @lam8091807 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095618, i64* %eptr8095617                                             ; store fptr
  %arg8087416 = ptrtoint i64* %cloptr8095616 to i64                                  ; closure cast; i64* -> i64
  %cloptr8095619 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8095621 = getelementptr inbounds i64, i64* %cloptr8095619, i64 1              ; &eptr8095621[1]
  %eptr8095622 = getelementptr inbounds i64, i64* %cloptr8095619, i64 2              ; &eptr8095622[2]
  %eptr8095623 = getelementptr inbounds i64, i64* %cloptr8095619, i64 3              ; &eptr8095623[3]
  %eptr8095624 = getelementptr inbounds i64, i64* %cloptr8095619, i64 4              ; &eptr8095624[4]
  %eptr8095625 = getelementptr inbounds i64, i64* %cloptr8095619, i64 5              ; &eptr8095625[5]
  %eptr8095626 = getelementptr inbounds i64, i64* %cloptr8095619, i64 6              ; &eptr8095626[6]
  store i64 %syN$_37wind_45stack, i64* %eptr8095621                                  ; *eptr8095621 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095622                                     ; *eptr8095622 = %ltz$_37do_45wind
  store i64 %ANn$fail, i64* %eptr8095623                                             ; *eptr8095623 = %ANn$fail
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095624                               ; *eptr8095624 = %FrQ$_37raise_45handler
  store i64 %U6p$assert, i64* %eptr8095625                                           ; *eptr8095625 = %U6p$assert
  store i64 %Z5B$ccstack, i64* %eptr8095626                                          ; *eptr8095626 = %Z5B$ccstack
  %eptr8095620 = getelementptr inbounds i64, i64* %cloptr8095619, i64 0              ; &cloptr8095619[0]
  %f8095627 = ptrtoint void(i64,i64)* @lam8091803 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095627, i64* %eptr8095620                                             ; store fptr
  %arg8087415 = ptrtoint i64* %cloptr8095619 to i64                                  ; closure cast; i64* -> i64
  %rva8090553 = add i64 0, 0                                                         ; quoted ()
  %rva8090552 = call i64 @prim_cons(i64 %arg8087415, i64 %rva8090553)                ; call prim_cons
  %cloptr8095628 = inttoptr i64 %arg8087416 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095629 = getelementptr inbounds i64, i64* %cloptr8095628, i64 0             ; &cloptr8095628[0]
  %f8095631 = load i64, i64* %i0ptr8095629, align 8                                  ; load; *i0ptr8095629
  %fptr8095630 = inttoptr i64 %f8095631 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095630(i64 %arg8087416, i64 %rva8090552)           ; tail call
  ret void
}


define void @lam8091807(i64 %env8091808, i64 %mpY$lst8086111) {
  %cont8086110 = call i64 @prim_car(i64 %mpY$lst8086111)                             ; call prim_car
  %mpY$lst = call i64 @prim_cdr(i64 %mpY$lst8086111)                                 ; call prim_cdr
  %arg8087420 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089789 = add i64 0, 0                                                         ; quoted ()
  %rva8089788 = call i64 @prim_cons(i64 %mpY$lst, i64 %rva8089789)                   ; call prim_cons
  %rva8089787 = call i64 @prim_cons(i64 %arg8087420, i64 %rva8089788)                ; call prim_cons
  %cloptr8095632 = inttoptr i64 %cont8086110 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095633 = getelementptr inbounds i64, i64* %cloptr8095632, i64 0             ; &cloptr8095632[0]
  %f8095635 = load i64, i64* %i0ptr8095633, align 8                                  ; load; *i0ptr8095633
  %fptr8095634 = inttoptr i64 %f8095635 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095634(i64 %cont8086110, i64 %rva8089787)          ; tail call
  ret void
}


define void @lam8091803(i64 %env8091804, i64 %rvp8090551) {
  %envptr8095636 = inttoptr i64 %env8091804 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095637 = getelementptr inbounds i64, i64* %envptr8095636, i64 6            ; &envptr8095636[6]
  %Z5B$ccstack = load i64, i64* %envptr8095637, align 8                              ; load; *envptr8095637
  %envptr8095638 = inttoptr i64 %env8091804 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095639 = getelementptr inbounds i64, i64* %envptr8095638, i64 5            ; &envptr8095638[5]
  %U6p$assert = load i64, i64* %envptr8095639, align 8                               ; load; *envptr8095639
  %envptr8095640 = inttoptr i64 %env8091804 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095641 = getelementptr inbounds i64, i64* %envptr8095640, i64 4            ; &envptr8095640[4]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095641, align 8                   ; load; *envptr8095641
  %envptr8095642 = inttoptr i64 %env8091804 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095643 = getelementptr inbounds i64, i64* %envptr8095642, i64 3            ; &envptr8095642[3]
  %ANn$fail = load i64, i64* %envptr8095643, align 8                                 ; load; *envptr8095643
  %envptr8095644 = inttoptr i64 %env8091804 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095645 = getelementptr inbounds i64, i64* %envptr8095644, i64 2            ; &envptr8095644[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095645, align 8                         ; load; *envptr8095645
  %envptr8095646 = inttoptr i64 %env8091804 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095647 = getelementptr inbounds i64, i64* %envptr8095646, i64 1            ; &envptr8095646[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095647, align 8                      ; load; *envptr8095647
  %_958086108 = call i64 @prim_car(i64 %rvp8090551)                                  ; call prim_car
  %rvp8090550 = call i64 @prim_cdr(i64 %rvp8090551)                                  ; call prim_cdr
  %a8085863 = call i64 @prim_car(i64 %rvp8090550)                                    ; call prim_car
  %na8089791 = call i64 @prim_cdr(i64 %rvp8090550)                                   ; call prim_cdr
  %arg8087423 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086109 = call i64 @prim_make_45vector(i64 %arg8087423, i64 %a8085863)     ; call prim_make_45vector
  %cloptr8095648 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8095650 = getelementptr inbounds i64, i64* %cloptr8095648, i64 1              ; &eptr8095650[1]
  %eptr8095651 = getelementptr inbounds i64, i64* %cloptr8095648, i64 2              ; &eptr8095651[2]
  %eptr8095652 = getelementptr inbounds i64, i64* %cloptr8095648, i64 3              ; &eptr8095652[3]
  %eptr8095653 = getelementptr inbounds i64, i64* %cloptr8095648, i64 4              ; &eptr8095653[4]
  %eptr8095654 = getelementptr inbounds i64, i64* %cloptr8095648, i64 5              ; &eptr8095654[5]
  %eptr8095655 = getelementptr inbounds i64, i64* %cloptr8095648, i64 6              ; &eptr8095655[6]
  store i64 %syN$_37wind_45stack, i64* %eptr8095650                                  ; *eptr8095650 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095651                                     ; *eptr8095651 = %ltz$_37do_45wind
  store i64 %ANn$fail, i64* %eptr8095652                                             ; *eptr8095652 = %ANn$fail
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095653                               ; *eptr8095653 = %FrQ$_37raise_45handler
  store i64 %U6p$assert, i64* %eptr8095654                                           ; *eptr8095654 = %U6p$assert
  store i64 %Z5B$ccstack, i64* %eptr8095655                                          ; *eptr8095655 = %Z5B$ccstack
  %eptr8095649 = getelementptr inbounds i64, i64* %cloptr8095648, i64 0              ; &cloptr8095648[0]
  %f8095656 = ptrtoint void(i64,i64)* @lam8091800 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095656, i64* %eptr8095649                                             ; store fptr
  %arg8087426 = ptrtoint i64* %cloptr8095648 to i64                                  ; closure cast; i64* -> i64
  %arg8087425 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090549 = add i64 0, 0                                                         ; quoted ()
  %rva8090548 = call i64 @prim_cons(i64 %retprim8086109, i64 %rva8090549)            ; call prim_cons
  %rva8090547 = call i64 @prim_cons(i64 %arg8087425, i64 %rva8090548)                ; call prim_cons
  %cloptr8095657 = inttoptr i64 %arg8087426 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095658 = getelementptr inbounds i64, i64* %cloptr8095657, i64 0             ; &cloptr8095657[0]
  %f8095660 = load i64, i64* %i0ptr8095658, align 8                                  ; load; *i0ptr8095658
  %fptr8095659 = inttoptr i64 %f8095660 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095659(i64 %arg8087426, i64 %rva8090547)           ; tail call
  ret void
}


define void @lam8091800(i64 %env8091801, i64 %rvp8090546) {
  %envptr8095661 = inttoptr i64 %env8091801 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095662 = getelementptr inbounds i64, i64* %envptr8095661, i64 6            ; &envptr8095661[6]
  %Z5B$ccstack = load i64, i64* %envptr8095662, align 8                              ; load; *envptr8095662
  %envptr8095663 = inttoptr i64 %env8091801 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095664 = getelementptr inbounds i64, i64* %envptr8095663, i64 5            ; &envptr8095663[5]
  %U6p$assert = load i64, i64* %envptr8095664, align 8                               ; load; *envptr8095664
  %envptr8095665 = inttoptr i64 %env8091801 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095666 = getelementptr inbounds i64, i64* %envptr8095665, i64 4            ; &envptr8095665[4]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095666, align 8                   ; load; *envptr8095666
  %envptr8095667 = inttoptr i64 %env8091801 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095668 = getelementptr inbounds i64, i64* %envptr8095667, i64 3            ; &envptr8095667[3]
  %ANn$fail = load i64, i64* %envptr8095668, align 8                                 ; load; *envptr8095668
  %envptr8095669 = inttoptr i64 %env8091801 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095670 = getelementptr inbounds i64, i64* %envptr8095669, i64 2            ; &envptr8095669[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095670, align 8                         ; load; *envptr8095670
  %envptr8095671 = inttoptr i64 %env8091801 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095672 = getelementptr inbounds i64, i64* %envptr8095671, i64 1            ; &envptr8095671[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095672, align 8                      ; load; *envptr8095672
  %_958086054 = call i64 @prim_car(i64 %rvp8090546)                                  ; call prim_car
  %rvp8090545 = call i64 @prim_cdr(i64 %rvp8090546)                                  ; call prim_cdr
  %I2S$amb = call i64 @prim_car(i64 %rvp8090545)                                     ; call prim_car
  %na8089793 = call i64 @prim_cdr(i64 %rvp8090545)                                   ; call prim_cdr
  %cloptr8095673 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8095674 = getelementptr inbounds i64, i64* %cloptr8095673, i64 0              ; &cloptr8095673[0]
  %f8095675 = ptrtoint void(i64,i64)* @lam8091798 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095675, i64* %eptr8095674                                             ; store fptr
  %arg8087428 = ptrtoint i64* %cloptr8095673 to i64                                  ; closure cast; i64* -> i64
  %cloptr8095676 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8095678 = getelementptr inbounds i64, i64* %cloptr8095676, i64 1              ; &eptr8095678[1]
  %eptr8095679 = getelementptr inbounds i64, i64* %cloptr8095676, i64 2              ; &eptr8095679[2]
  %eptr8095680 = getelementptr inbounds i64, i64* %cloptr8095676, i64 3              ; &eptr8095680[3]
  %eptr8095681 = getelementptr inbounds i64, i64* %cloptr8095676, i64 4              ; &eptr8095681[4]
  %eptr8095682 = getelementptr inbounds i64, i64* %cloptr8095676, i64 5              ; &eptr8095682[5]
  %eptr8095683 = getelementptr inbounds i64, i64* %cloptr8095676, i64 6              ; &eptr8095683[6]
  %eptr8095684 = getelementptr inbounds i64, i64* %cloptr8095676, i64 7              ; &eptr8095684[7]
  store i64 %syN$_37wind_45stack, i64* %eptr8095678                                  ; *eptr8095678 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095679                                     ; *eptr8095679 = %ltz$_37do_45wind
  store i64 %ANn$fail, i64* %eptr8095680                                             ; *eptr8095680 = %ANn$fail
  store i64 %I2S$amb, i64* %eptr8095681                                              ; *eptr8095681 = %I2S$amb
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095682                               ; *eptr8095682 = %FrQ$_37raise_45handler
  store i64 %U6p$assert, i64* %eptr8095683                                           ; *eptr8095683 = %U6p$assert
  store i64 %Z5B$ccstack, i64* %eptr8095684                                          ; *eptr8095684 = %Z5B$ccstack
  %eptr8095677 = getelementptr inbounds i64, i64* %cloptr8095676, i64 0              ; &cloptr8095676[0]
  %f8095685 = ptrtoint void(i64,i64)* @lam8091794 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095685, i64* %eptr8095677                                             ; store fptr
  %arg8087427 = ptrtoint i64* %cloptr8095676 to i64                                  ; closure cast; i64* -> i64
  %rva8090544 = add i64 0, 0                                                         ; quoted ()
  %rva8090543 = call i64 @prim_cons(i64 %arg8087427, i64 %rva8090544)                ; call prim_cons
  %cloptr8095686 = inttoptr i64 %arg8087428 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095687 = getelementptr inbounds i64, i64* %cloptr8095686, i64 0             ; &cloptr8095686[0]
  %f8095689 = load i64, i64* %i0ptr8095687, align 8                                  ; load; *i0ptr8095687
  %fptr8095688 = inttoptr i64 %f8095689 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095688(i64 %arg8087428, i64 %rva8090543)           ; tail call
  ret void
}


define void @lam8091798(i64 %env8091799, i64 %Pfr$lst8086107) {
  %cont8086106 = call i64 @prim_car(i64 %Pfr$lst8086107)                             ; call prim_car
  %Pfr$lst = call i64 @prim_cdr(i64 %Pfr$lst8086107)                                 ; call prim_cdr
  %arg8087432 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089796 = add i64 0, 0                                                         ; quoted ()
  %rva8089795 = call i64 @prim_cons(i64 %Pfr$lst, i64 %rva8089796)                   ; call prim_cons
  %rva8089794 = call i64 @prim_cons(i64 %arg8087432, i64 %rva8089795)                ; call prim_cons
  %cloptr8095690 = inttoptr i64 %cont8086106 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095691 = getelementptr inbounds i64, i64* %cloptr8095690, i64 0             ; &cloptr8095690[0]
  %f8095693 = load i64, i64* %i0ptr8095691, align 8                                  ; load; *i0ptr8095691
  %fptr8095692 = inttoptr i64 %f8095693 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095692(i64 %cont8086106, i64 %rva8089794)          ; tail call
  ret void
}


define void @lam8091794(i64 %env8091795, i64 %rvp8090542) {
  %envptr8095694 = inttoptr i64 %env8091795 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095695 = getelementptr inbounds i64, i64* %envptr8095694, i64 7            ; &envptr8095694[7]
  %Z5B$ccstack = load i64, i64* %envptr8095695, align 8                              ; load; *envptr8095695
  %envptr8095696 = inttoptr i64 %env8091795 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095697 = getelementptr inbounds i64, i64* %envptr8095696, i64 6            ; &envptr8095696[6]
  %U6p$assert = load i64, i64* %envptr8095697, align 8                               ; load; *envptr8095697
  %envptr8095698 = inttoptr i64 %env8091795 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095699 = getelementptr inbounds i64, i64* %envptr8095698, i64 5            ; &envptr8095698[5]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095699, align 8                   ; load; *envptr8095699
  %envptr8095700 = inttoptr i64 %env8091795 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095701 = getelementptr inbounds i64, i64* %envptr8095700, i64 4            ; &envptr8095700[4]
  %I2S$amb = load i64, i64* %envptr8095701, align 8                                  ; load; *envptr8095701
  %envptr8095702 = inttoptr i64 %env8091795 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095703 = getelementptr inbounds i64, i64* %envptr8095702, i64 3            ; &envptr8095702[3]
  %ANn$fail = load i64, i64* %envptr8095703, align 8                                 ; load; *envptr8095703
  %envptr8095704 = inttoptr i64 %env8091795 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095705 = getelementptr inbounds i64, i64* %envptr8095704, i64 2            ; &envptr8095704[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095705, align 8                         ; load; *envptr8095705
  %envptr8095706 = inttoptr i64 %env8091795 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095707 = getelementptr inbounds i64, i64* %envptr8095706, i64 1            ; &envptr8095706[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095707, align 8                      ; load; *envptr8095707
  %_958086055 = call i64 @prim_car(i64 %rvp8090542)                                  ; call prim_car
  %rvp8090541 = call i64 @prim_cdr(i64 %rvp8090542)                                  ; call prim_cdr
  %nNW$ccstack8085709 = call i64 @prim_car(i64 %rvp8090541)                          ; call prim_car
  %na8089798 = call i64 @prim_cdr(i64 %rvp8090541)                                   ; call prim_cdr
  %cloptr8095708 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095710 = getelementptr inbounds i64, i64* %cloptr8095708, i64 1              ; &eptr8095710[1]
  %eptr8095711 = getelementptr inbounds i64, i64* %cloptr8095708, i64 2              ; &eptr8095711[2]
  store i64 %FrQ$_37raise_45handler, i64* %eptr8095710                               ; *eptr8095710 = %FrQ$_37raise_45handler
  store i64 %Z5B$ccstack, i64* %eptr8095711                                          ; *eptr8095711 = %Z5B$ccstack
  %eptr8095709 = getelementptr inbounds i64, i64* %cloptr8095708, i64 0              ; &cloptr8095708[0]
  %f8095712 = ptrtoint void(i64,i64)* @lam8091792 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095712, i64* %eptr8095709                                             ; store fptr
  %Zl9$fail8085710 = ptrtoint i64* %cloptr8095708 to i64                             ; closure cast; i64* -> i64
  %cloptr8095713 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8095715 = getelementptr inbounds i64, i64* %cloptr8095713, i64 1              ; &eptr8095715[1]
  store i64 %ANn$fail, i64* %eptr8095715                                             ; *eptr8095715 = %ANn$fail
  %eptr8095714 = getelementptr inbounds i64, i64* %cloptr8095713, i64 0              ; &cloptr8095713[0]
  %f8095716 = ptrtoint void(i64,i64)* @lam8091769 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095716, i64* %eptr8095714                                             ; store fptr
  %AYq$assert8085711 = ptrtoint i64* %cloptr8095713 to i64                           ; closure cast; i64* -> i64
  %cloptr8095717 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8095719 = getelementptr inbounds i64, i64* %cloptr8095717, i64 1              ; &eptr8095719[1]
  %eptr8095720 = getelementptr inbounds i64, i64* %cloptr8095717, i64 2              ; &eptr8095720[2]
  %eptr8095721 = getelementptr inbounds i64, i64* %cloptr8095717, i64 3              ; &eptr8095721[3]
  %eptr8095722 = getelementptr inbounds i64, i64* %cloptr8095717, i64 4              ; &eptr8095722[4]
  store i64 %syN$_37wind_45stack, i64* %eptr8095719                                  ; *eptr8095719 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095720                                     ; *eptr8095720 = %ltz$_37do_45wind
  store i64 %ANn$fail, i64* %eptr8095721                                             ; *eptr8095721 = %ANn$fail
  store i64 %Z5B$ccstack, i64* %eptr8095722                                          ; *eptr8095722 = %Z5B$ccstack
  %eptr8095718 = getelementptr inbounds i64, i64* %cloptr8095717, i64 0              ; &cloptr8095717[0]
  %f8095723 = ptrtoint void(i64,i64)* @lam8091758 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095723, i64* %eptr8095718                                             ; store fptr
  %hiY$amb8085712 = ptrtoint i64* %cloptr8095717 to i64                              ; closure cast; i64* -> i64
  %arg8087625 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %RUk$_95t = call i64 @prim_vector_45set_33(i64 %Z5B$ccstack, i64 %arg8087625, i64 %nNW$ccstack8085709); call prim_vector_45set_33
  %arg8087628 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %Wgf$_95t = call i64 @prim_vector_45set_33(i64 %ANn$fail, i64 %arg8087628, i64 %Zl9$fail8085710); call prim_vector_45set_33
  %arg8087631 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %hi5$_95t = call i64 @prim_vector_45set_33(i64 %U6p$assert, i64 %arg8087631, i64 %AYq$assert8085711); call prim_vector_45set_33
  %arg8087634 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %O5y$_95t = call i64 @prim_vector_45set_33(i64 %I2S$amb, i64 %arg8087634, i64 %hiY$amb8085712); call prim_vector_45set_33
  %arg8087636 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085890 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8087636)             ; call prim_vector_45ref
  %a8085891 = call i64 @prim_procedure_63(i64 %a8085890)                             ; call prim_procedure_63
  %cmp8095724 = icmp eq i64 %a8085891, 15                                            ; false?
  br i1 %cmp8095724, label %else8095726, label %then8095725                          ; if

then8095725:
  %arg8087639 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085892 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8087639)             ; call prim_vector_45ref
  %cloptr8095727 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8095728 = getelementptr inbounds i64, i64* %cloptr8095727, i64 0              ; &cloptr8095727[0]
  %f8095729 = ptrtoint void(i64,i64)* @lam8091438 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095729, i64* %eptr8095728                                             ; store fptr
  %arg8087642 = ptrtoint i64* %cloptr8095727 to i64                                  ; closure cast; i64* -> i64
  %cloptr8095730 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095732 = getelementptr inbounds i64, i64* %cloptr8095730, i64 1              ; &eptr8095732[1]
  %eptr8095733 = getelementptr inbounds i64, i64* %cloptr8095730, i64 2              ; &eptr8095733[2]
  %eptr8095734 = getelementptr inbounds i64, i64* %cloptr8095730, i64 3              ; &eptr8095734[3]
  store i64 %I2S$amb, i64* %eptr8095732                                              ; *eptr8095732 = %I2S$amb
  store i64 %a8085892, i64* %eptr8095733                                             ; *eptr8095733 = %a8085892
  store i64 %U6p$assert, i64* %eptr8095734                                           ; *eptr8095734 = %U6p$assert
  %eptr8095731 = getelementptr inbounds i64, i64* %cloptr8095730, i64 0              ; &cloptr8095730[0]
  %f8095735 = ptrtoint void(i64,i64)* @lam8091434 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095735, i64* %eptr8095731                                             ; store fptr
  %arg8087641 = ptrtoint i64* %cloptr8095730 to i64                                  ; closure cast; i64* -> i64
  %rva8090264 = add i64 0, 0                                                         ; quoted ()
  %rva8090263 = call i64 @prim_cons(i64 %arg8087641, i64 %rva8090264)                ; call prim_cons
  %cloptr8095736 = inttoptr i64 %arg8087642 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095737 = getelementptr inbounds i64, i64* %cloptr8095736, i64 0             ; &cloptr8095736[0]
  %f8095739 = load i64, i64* %i0ptr8095737, align 8                                  ; load; *i0ptr8095737
  %fptr8095738 = inttoptr i64 %f8095739 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095738(i64 %arg8087642, i64 %rva8090263)           ; tail call
  ret void

else8095726:
  %arg8087998 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095740, i32 0, i32 0)); quoted string
  %retprim8086105 = call i64 @prim_halt(i64 %arg8087998)                             ; call prim_halt
  %cloptr8095741 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095743 = getelementptr inbounds i64, i64* %cloptr8095741, i64 1              ; &eptr8095743[1]
  %eptr8095744 = getelementptr inbounds i64, i64* %cloptr8095741, i64 2              ; &eptr8095744[2]
  store i64 %I2S$amb, i64* %eptr8095743                                              ; *eptr8095743 = %I2S$amb
  store i64 %U6p$assert, i64* %eptr8095744                                           ; *eptr8095744 = %U6p$assert
  %eptr8095742 = getelementptr inbounds i64, i64* %cloptr8095741, i64 0              ; &cloptr8095741[0]
  %f8095745 = ptrtoint void(i64,i64)* @lam8091651 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095745, i64* %eptr8095742                                             ; store fptr
  %arg8088001 = ptrtoint i64* %cloptr8095741 to i64                                  ; closure cast; i64* -> i64
  %arg8088000 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090540 = add i64 0, 0                                                         ; quoted ()
  %rva8090539 = call i64 @prim_cons(i64 %retprim8086105, i64 %rva8090540)            ; call prim_cons
  %rva8090538 = call i64 @prim_cons(i64 %arg8088000, i64 %rva8090539)                ; call prim_cons
  %cloptr8095746 = inttoptr i64 %arg8088001 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095747 = getelementptr inbounds i64, i64* %cloptr8095746, i64 0             ; &cloptr8095746[0]
  %f8095749 = load i64, i64* %i0ptr8095747, align 8                                  ; load; *i0ptr8095747
  %fptr8095748 = inttoptr i64 %f8095749 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095748(i64 %arg8088001, i64 %rva8090538)           ; tail call
  ret void
}


define void @lam8091792(i64 %env8091793, i64 %rvp8089827) {
  %envptr8095750 = inttoptr i64 %env8091793 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095751 = getelementptr inbounds i64, i64* %envptr8095750, i64 2            ; &envptr8095750[2]
  %Z5B$ccstack = load i64, i64* %envptr8095751, align 8                              ; load; *envptr8095751
  %envptr8095752 = inttoptr i64 %env8091793 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095753 = getelementptr inbounds i64, i64* %envptr8095752, i64 1            ; &envptr8095752[1]
  %FrQ$_37raise_45handler = load i64, i64* %envptr8095753, align 8                   ; load; *envptr8095753
  %cont8086056 = call i64 @prim_car(i64 %rvp8089827)                                 ; call prim_car
  %na8089800 = call i64 @prim_cdr(i64 %rvp8089827)                                   ; call prim_cdr
  %arg8087434 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085864 = call i64 @prim_vector_45ref(i64 %Z5B$ccstack, i64 %arg8087434)         ; call prim_vector_45ref
  %a8085865 = call i64 @prim_null_63(i64 %a8085864)                                  ; call prim_null_63
  %cmp8095754 = icmp eq i64 %a8085865, 15                                            ; false?
  br i1 %cmp8095754, label %else8095756, label %then8095755                          ; if

then8095755:
  %a8085866 = call i64 @prim_procedure_63(i64 %FrQ$_37raise_45handler)               ; call prim_procedure_63
  %cmp8095757 = icmp eq i64 %a8085866, 15                                            ; false?
  br i1 %cmp8095757, label %else8095759, label %then8095758                          ; if

then8095758:
  %arg8087438 = call i64 @const_init_symbol(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @sym8095760, i32 0, i32 0)); quoted string
  %rva8089803 = add i64 0, 0                                                         ; quoted ()
  %rva8089802 = call i64 @prim_cons(i64 %arg8087438, i64 %rva8089803)                ; call prim_cons
  %rva8089801 = call i64 @prim_cons(i64 %cont8086056, i64 %rva8089802)               ; call prim_cons
  %cloptr8095761 = inttoptr i64 %FrQ$_37raise_45handler to i64*                      ; closure/env cast; i64 -> i64*
  %i0ptr8095762 = getelementptr inbounds i64, i64* %cloptr8095761, i64 0             ; &cloptr8095761[0]
  %f8095764 = load i64, i64* %i0ptr8095762, align 8                                  ; load; *i0ptr8095762
  %fptr8095763 = inttoptr i64 %f8095764 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095763(i64 %FrQ$_37raise_45handler, i64 %rva8089801); tail call
  ret void

else8095759:
  %arg8087441 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095765, i32 0, i32 0)); quoted string
  %retprim8086057 = call i64 @prim_halt(i64 %arg8087441)                             ; call prim_halt
  %arg8087443 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089806 = add i64 0, 0                                                         ; quoted ()
  %rva8089805 = call i64 @prim_cons(i64 %retprim8086057, i64 %rva8089806)            ; call prim_cons
  %rva8089804 = call i64 @prim_cons(i64 %arg8087443, i64 %rva8089805)                ; call prim_cons
  %cloptr8095766 = inttoptr i64 %cont8086056 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095767 = getelementptr inbounds i64, i64* %cloptr8095766, i64 0             ; &cloptr8095766[0]
  %f8095769 = load i64, i64* %i0ptr8095767, align 8                                  ; load; *i0ptr8095767
  %fptr8095768 = inttoptr i64 %f8095769 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095768(i64 %cont8086056, i64 %rva8089804)          ; tail call
  ret void

else8095756:
  %arg8087445 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085867 = call i64 @prim_vector_45ref(i64 %Z5B$ccstack, i64 %arg8087445)         ; call prim_vector_45ref
  %retprim8086062 = call i64 @prim_car(i64 %a8085867)                                ; call prim_car
  %cloptr8095770 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095772 = getelementptr inbounds i64, i64* %cloptr8095770, i64 1              ; &eptr8095772[1]
  %eptr8095773 = getelementptr inbounds i64, i64* %cloptr8095770, i64 2              ; &eptr8095773[2]
  store i64 %cont8086056, i64* %eptr8095772                                          ; *eptr8095772 = %cont8086056
  store i64 %Z5B$ccstack, i64* %eptr8095773                                          ; *eptr8095773 = %Z5B$ccstack
  %eptr8095771 = getelementptr inbounds i64, i64* %cloptr8095770, i64 0              ; &cloptr8095770[0]
  %f8095774 = ptrtoint void(i64,i64)* @lam8091788 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095774, i64* %eptr8095771                                             ; store fptr
  %arg8087450 = ptrtoint i64* %cloptr8095770 to i64                                  ; closure cast; i64* -> i64
  %arg8087449 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089826 = add i64 0, 0                                                         ; quoted ()
  %rva8089825 = call i64 @prim_cons(i64 %retprim8086062, i64 %rva8089826)            ; call prim_cons
  %rva8089824 = call i64 @prim_cons(i64 %arg8087449, i64 %rva8089825)                ; call prim_cons
  %cloptr8095775 = inttoptr i64 %arg8087450 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095776 = getelementptr inbounds i64, i64* %cloptr8095775, i64 0             ; &cloptr8095775[0]
  %f8095778 = load i64, i64* %i0ptr8095776, align 8                                  ; load; *i0ptr8095776
  %fptr8095777 = inttoptr i64 %f8095778 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095777(i64 %arg8087450, i64 %rva8089824)           ; tail call
  ret void
}


define void @lam8091788(i64 %env8091789, i64 %rvp8089823) {
  %envptr8095779 = inttoptr i64 %env8091789 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095780 = getelementptr inbounds i64, i64* %envptr8095779, i64 2            ; &envptr8095779[2]
  %Z5B$ccstack = load i64, i64* %envptr8095780, align 8                              ; load; *envptr8095780
  %envptr8095781 = inttoptr i64 %env8091789 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095782 = getelementptr inbounds i64, i64* %envptr8095781, i64 1            ; &envptr8095781[1]
  %cont8086056 = load i64, i64* %envptr8095782, align 8                              ; load; *envptr8095782
  %_958086058 = call i64 @prim_car(i64 %rvp8089823)                                  ; call prim_car
  %rvp8089822 = call i64 @prim_cdr(i64 %rvp8089823)                                  ; call prim_cdr
  %SOX$next_45cc = call i64 @prim_car(i64 %rvp8089822)                               ; call prim_car
  %na8089808 = call i64 @prim_cdr(i64 %rvp8089822)                                   ; call prim_cdr
  %arg8087451 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085868 = call i64 @prim_vector_45ref(i64 %Z5B$ccstack, i64 %arg8087451)         ; call prim_vector_45ref
  %a8085869 = call i64 @prim_cdr(i64 %a8085868)                                      ; call prim_cdr
  %arg8087455 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086061 = call i64 @prim_vector_45set_33(i64 %Z5B$ccstack, i64 %arg8087455, i64 %a8085869); call prim_vector_45set_33
  %cloptr8095783 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095785 = getelementptr inbounds i64, i64* %cloptr8095783, i64 1              ; &eptr8095785[1]
  %eptr8095786 = getelementptr inbounds i64, i64* %cloptr8095783, i64 2              ; &eptr8095786[2]
  store i64 %cont8086056, i64* %eptr8095785                                          ; *eptr8095785 = %cont8086056
  store i64 %SOX$next_45cc, i64* %eptr8095786                                        ; *eptr8095786 = %SOX$next_45cc
  %eptr8095784 = getelementptr inbounds i64, i64* %cloptr8095783, i64 0              ; &cloptr8095783[0]
  %f8095787 = ptrtoint void(i64,i64)* @lam8091784 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095787, i64* %eptr8095784                                             ; store fptr
  %arg8087459 = ptrtoint i64* %cloptr8095783 to i64                                  ; closure cast; i64* -> i64
  %arg8087458 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089821 = add i64 0, 0                                                         ; quoted ()
  %rva8089820 = call i64 @prim_cons(i64 %retprim8086061, i64 %rva8089821)            ; call prim_cons
  %rva8089819 = call i64 @prim_cons(i64 %arg8087458, i64 %rva8089820)                ; call prim_cons
  %cloptr8095788 = inttoptr i64 %arg8087459 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095789 = getelementptr inbounds i64, i64* %cloptr8095788, i64 0             ; &cloptr8095788[0]
  %f8095791 = load i64, i64* %i0ptr8095789, align 8                                  ; load; *i0ptr8095789
  %fptr8095790 = inttoptr i64 %f8095791 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095790(i64 %arg8087459, i64 %rva8089819)           ; tail call
  ret void
}


define void @lam8091784(i64 %env8091785, i64 %rvp8089818) {
  %envptr8095792 = inttoptr i64 %env8091785 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095793 = getelementptr inbounds i64, i64* %envptr8095792, i64 2            ; &envptr8095792[2]
  %SOX$next_45cc = load i64, i64* %envptr8095793, align 8                            ; load; *envptr8095793
  %envptr8095794 = inttoptr i64 %env8091785 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095795 = getelementptr inbounds i64, i64* %envptr8095794, i64 1            ; &envptr8095794[1]
  %cont8086056 = load i64, i64* %envptr8095795, align 8                              ; load; *envptr8095795
  %_958086059 = call i64 @prim_car(i64 %rvp8089818)                                  ; call prim_car
  %rvp8089817 = call i64 @prim_cdr(i64 %rvp8089818)                                  ; call prim_cdr
  %sNH$_95t = call i64 @prim_car(i64 %rvp8089817)                                    ; call prim_car
  %na8089810 = call i64 @prim_cdr(i64 %rvp8089817)                                   ; call prim_cdr
  %a8085870 = call i64 @prim_procedure_63(i64 %SOX$next_45cc)                        ; call prim_procedure_63
  %cmp8095796 = icmp eq i64 %a8085870, 15                                            ; false?
  br i1 %cmp8095796, label %else8095798, label %then8095797                          ; if

then8095797:
  %rva8089813 = add i64 0, 0                                                         ; quoted ()
  %rva8089812 = call i64 @prim_cons(i64 %SOX$next_45cc, i64 %rva8089813)             ; call prim_cons
  %rva8089811 = call i64 @prim_cons(i64 %cont8086056, i64 %rva8089812)               ; call prim_cons
  %cloptr8095799 = inttoptr i64 %SOX$next_45cc to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8095800 = getelementptr inbounds i64, i64* %cloptr8095799, i64 0             ; &cloptr8095799[0]
  %f8095802 = load i64, i64* %i0ptr8095800, align 8                                  ; load; *i0ptr8095800
  %fptr8095801 = inttoptr i64 %f8095802 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095801(i64 %SOX$next_45cc, i64 %rva8089811)        ; tail call
  ret void

else8095798:
  %arg8087464 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095803, i32 0, i32 0)); quoted string
  %retprim8086060 = call i64 @prim_halt(i64 %arg8087464)                             ; call prim_halt
  %arg8087466 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089816 = add i64 0, 0                                                         ; quoted ()
  %rva8089815 = call i64 @prim_cons(i64 %retprim8086060, i64 %rva8089816)            ; call prim_cons
  %rva8089814 = call i64 @prim_cons(i64 %arg8087466, i64 %rva8089815)                ; call prim_cons
  %cloptr8095804 = inttoptr i64 %cont8086056 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095805 = getelementptr inbounds i64, i64* %cloptr8095804, i64 0             ; &cloptr8095804[0]
  %f8095807 = load i64, i64* %i0ptr8095805, align 8                                  ; load; *i0ptr8095805
  %fptr8095806 = inttoptr i64 %f8095807 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095806(i64 %cont8086056, i64 %rva8089814)          ; tail call
  ret void
}


define void @lam8091769(i64 %env8091770, i64 %rvp8089839) {
  %envptr8095808 = inttoptr i64 %env8091770 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095809 = getelementptr inbounds i64, i64* %envptr8095808, i64 1            ; &envptr8095808[1]
  %ANn$fail = load i64, i64* %envptr8095809, align 8                                 ; load; *envptr8095809
  %cont8086063 = call i64 @prim_car(i64 %rvp8089839)                                 ; call prim_car
  %rvp8089838 = call i64 @prim_cdr(i64 %rvp8089839)                                  ; call prim_cdr
  %KRl$b = call i64 @prim_car(i64 %rvp8089838)                                       ; call prim_car
  %na8089829 = call i64 @prim_cdr(i64 %rvp8089838)                                   ; call prim_cdr
  %cmp8095810 = icmp eq i64 %KRl$b, 15                                               ; false?
  br i1 %cmp8095810, label %else8095812, label %then8095811                          ; if

then8095811:
  %arg8087469 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8087468 = call i64 @const_init_true()                                          ; quoted #t
  %rva8089832 = add i64 0, 0                                                         ; quoted ()
  %rva8089831 = call i64 @prim_cons(i64 %arg8087468, i64 %rva8089832)                ; call prim_cons
  %rva8089830 = call i64 @prim_cons(i64 %arg8087469, i64 %rva8089831)                ; call prim_cons
  %cloptr8095813 = inttoptr i64 %cont8086063 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095814 = getelementptr inbounds i64, i64* %cloptr8095813, i64 0             ; &cloptr8095813[0]
  %f8095816 = load i64, i64* %i0ptr8095814, align 8                                  ; load; *i0ptr8095814
  %fptr8095815 = inttoptr i64 %f8095816 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095815(i64 %cont8086063, i64 %rva8089830)          ; tail call
  ret void

else8095812:
  %arg8087471 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085871 = call i64 @prim_vector_45ref(i64 %ANn$fail, i64 %arg8087471)            ; call prim_vector_45ref
  %a8085872 = call i64 @prim_procedure_63(i64 %a8085871)                             ; call prim_procedure_63
  %cmp8095817 = icmp eq i64 %a8085872, 15                                            ; false?
  br i1 %cmp8095817, label %else8095819, label %then8095818                          ; if

then8095818:
  %arg8087474 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085873 = call i64 @prim_vector_45ref(i64 %ANn$fail, i64 %arg8087474)            ; call prim_vector_45ref
  %rva8089834 = add i64 0, 0                                                         ; quoted ()
  %rva8089833 = call i64 @prim_cons(i64 %cont8086063, i64 %rva8089834)               ; call prim_cons
  %cloptr8095820 = inttoptr i64 %a8085873 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8095821 = getelementptr inbounds i64, i64* %cloptr8095820, i64 0             ; &cloptr8095820[0]
  %f8095823 = load i64, i64* %i0ptr8095821, align 8                                  ; load; *i0ptr8095821
  %fptr8095822 = inttoptr i64 %f8095823 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095822(i64 %a8085873, i64 %rva8089833)             ; tail call
  ret void

else8095819:
  %arg8087478 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095824, i32 0, i32 0)); quoted string
  %retprim8086064 = call i64 @prim_halt(i64 %arg8087478)                             ; call prim_halt
  %arg8087480 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089837 = add i64 0, 0                                                         ; quoted ()
  %rva8089836 = call i64 @prim_cons(i64 %retprim8086064, i64 %rva8089837)            ; call prim_cons
  %rva8089835 = call i64 @prim_cons(i64 %arg8087480, i64 %rva8089836)                ; call prim_cons
  %cloptr8095825 = inttoptr i64 %cont8086063 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095826 = getelementptr inbounds i64, i64* %cloptr8095825, i64 0             ; &cloptr8095825[0]
  %f8095828 = load i64, i64* %i0ptr8095826, align 8                                  ; load; *i0ptr8095826
  %fptr8095827 = inttoptr i64 %f8095828 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095827(i64 %cont8086063, i64 %rva8089835)          ; tail call
  ret void
}


define void @lam8091758(i64 %env8091759, i64 %rvp8089979) {
  %envptr8095829 = inttoptr i64 %env8091759 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095830 = getelementptr inbounds i64, i64* %envptr8095829, i64 4            ; &envptr8095829[4]
  %Z5B$ccstack = load i64, i64* %envptr8095830, align 8                              ; load; *envptr8095830
  %envptr8095831 = inttoptr i64 %env8091759 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095832 = getelementptr inbounds i64, i64* %envptr8095831, i64 3            ; &envptr8095831[3]
  %ANn$fail = load i64, i64* %envptr8095832, align 8                                 ; load; *envptr8095832
  %envptr8095833 = inttoptr i64 %env8091759 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095834 = getelementptr inbounds i64, i64* %envptr8095833, i64 2            ; &envptr8095833[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095834, align 8                         ; load; *envptr8095834
  %envptr8095835 = inttoptr i64 %env8091759 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095836 = getelementptr inbounds i64, i64* %envptr8095835, i64 1            ; &envptr8095835[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095836, align 8                      ; load; *envptr8095836
  %cont8086065 = call i64 @prim_car(i64 %rvp8089979)                                 ; call prim_car
  %rvp8089978 = call i64 @prim_cdr(i64 %rvp8089979)                                  ; call prim_cdr
  %rlc$lst = call i64 @prim_car(i64 %rvp8089978)                                     ; call prim_car
  %na8089841 = call i64 @prim_cdr(i64 %rvp8089978)                                   ; call prim_cdr
  %arg8087483 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %AlL$lst = call i64 @prim_make_45vector(i64 %arg8087483, i64 %rlc$lst)             ; call prim_make_45vector
  %cloptr8095837 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8095839 = getelementptr inbounds i64, i64* %cloptr8095837, i64 1              ; &eptr8095839[1]
  %eptr8095840 = getelementptr inbounds i64, i64* %cloptr8095837, i64 2              ; &eptr8095840[2]
  store i64 %syN$_37wind_45stack, i64* %eptr8095839                                  ; *eptr8095839 = %syN$_37wind_45stack
  store i64 %ltz$_37do_45wind, i64* %eptr8095840                                     ; *eptr8095840 = %ltz$_37do_45wind
  %eptr8095838 = getelementptr inbounds i64, i64* %cloptr8095837, i64 0              ; &cloptr8095837[0]
  %f8095841 = ptrtoint void(i64,i64)* @lam8091755 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095841, i64* %eptr8095838                                             ; store fptr
  %arg8087486 = ptrtoint i64* %cloptr8095837 to i64                                  ; closure cast; i64* -> i64
  %cloptr8095842 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8095844 = getelementptr inbounds i64, i64* %cloptr8095842, i64 1              ; &eptr8095844[1]
  %eptr8095845 = getelementptr inbounds i64, i64* %cloptr8095842, i64 2              ; &eptr8095845[2]
  %eptr8095846 = getelementptr inbounds i64, i64* %cloptr8095842, i64 3              ; &eptr8095846[3]
  %eptr8095847 = getelementptr inbounds i64, i64* %cloptr8095842, i64 4              ; &eptr8095847[4]
  store i64 %ANn$fail, i64* %eptr8095844                                             ; *eptr8095844 = %ANn$fail
  store i64 %cont8086065, i64* %eptr8095845                                          ; *eptr8095845 = %cont8086065
  store i64 %AlL$lst, i64* %eptr8095846                                              ; *eptr8095846 = %AlL$lst
  store i64 %Z5B$ccstack, i64* %eptr8095847                                          ; *eptr8095847 = %Z5B$ccstack
  %eptr8095843 = getelementptr inbounds i64, i64* %cloptr8095842, i64 0              ; &cloptr8095842[0]
  %f8095848 = ptrtoint void(i64,i64)* @lam8091714 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095848, i64* %eptr8095843                                             ; store fptr
  %arg8087485 = ptrtoint i64* %cloptr8095842 to i64                                  ; closure cast; i64* -> i64
  %cloptr8095849 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8095851 = getelementptr inbounds i64, i64* %cloptr8095849, i64 1              ; &eptr8095851[1]
  %eptr8095852 = getelementptr inbounds i64, i64* %cloptr8095849, i64 2              ; &eptr8095852[2]
  %eptr8095853 = getelementptr inbounds i64, i64* %cloptr8095849, i64 3              ; &eptr8095853[3]
  %eptr8095854 = getelementptr inbounds i64, i64* %cloptr8095849, i64 4              ; &eptr8095854[4]
  store i64 %ANn$fail, i64* %eptr8095851                                             ; *eptr8095851 = %ANn$fail
  store i64 %cont8086065, i64* %eptr8095852                                          ; *eptr8095852 = %cont8086065
  store i64 %AlL$lst, i64* %eptr8095853                                              ; *eptr8095853 = %AlL$lst
  store i64 %Z5B$ccstack, i64* %eptr8095854                                          ; *eptr8095854 = %Z5B$ccstack
  %eptr8095850 = getelementptr inbounds i64, i64* %cloptr8095849, i64 0              ; &cloptr8095849[0]
  %f8095855 = ptrtoint void(i64,i64)* @lam8091686 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095855, i64* %eptr8095850                                             ; store fptr
  %arg8087484 = ptrtoint i64* %cloptr8095849 to i64                                  ; closure cast; i64* -> i64
  %rva8089977 = add i64 0, 0                                                         ; quoted ()
  %rva8089976 = call i64 @prim_cons(i64 %arg8087484, i64 %rva8089977)                ; call prim_cons
  %rva8089975 = call i64 @prim_cons(i64 %arg8087485, i64 %rva8089976)                ; call prim_cons
  %cloptr8095856 = inttoptr i64 %arg8087486 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095857 = getelementptr inbounds i64, i64* %cloptr8095856, i64 0             ; &cloptr8095856[0]
  %f8095859 = load i64, i64* %i0ptr8095857, align 8                                  ; load; *i0ptr8095857
  %fptr8095858 = inttoptr i64 %f8095859 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095858(i64 %arg8087486, i64 %rva8089975)           ; tail call
  ret void
}


define void @lam8091755(i64 %env8091756, i64 %rvp8089908) {
  %envptr8095860 = inttoptr i64 %env8091756 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095861 = getelementptr inbounds i64, i64* %envptr8095860, i64 2            ; &envptr8095860[2]
  %ltz$_37do_45wind = load i64, i64* %envptr8095861, align 8                         ; load; *envptr8095861
  %envptr8095862 = inttoptr i64 %env8091756 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095863 = getelementptr inbounds i64, i64* %envptr8095862, i64 1            ; &envptr8095862[1]
  %syN$_37wind_45stack = load i64, i64* %envptr8095863, align 8                      ; load; *envptr8095863
  %cont8086074 = call i64 @prim_car(i64 %rvp8089908)                                 ; call prim_car
  %rvp8089907 = call i64 @prim_cdr(i64 %rvp8089908)                                  ; call prim_cdr
  %PkZ$k = call i64 @prim_car(i64 %rvp8089907)                                       ; call prim_car
  %na8089843 = call i64 @prim_cdr(i64 %rvp8089907)                                   ; call prim_cdr
  %cloptr8095864 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8095865 = getelementptr inbounds i64, i64* %cloptr8095864, i64 0              ; &cloptr8095864[0]
  %f8095866 = ptrtoint void(i64,i64)* @lam8091753 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095866, i64* %eptr8095865                                             ; store fptr
  %arg8087487 = ptrtoint i64* %cloptr8095864 to i64                                  ; closure cast; i64* -> i64
  %a8085875 = call i64 @prim_procedure_63(i64 %arg8087487)                           ; call prim_procedure_63
  %cmp8095867 = icmp eq i64 %a8085875, 15                                            ; false?
  br i1 %cmp8095867, label %else8095869, label %then8095868                          ; if

then8095868:
  %arg8087496 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %ztj$k_45stack = call i64 @prim_vector_45ref(i64 %syN$_37wind_45stack, i64 %arg8087496); call prim_vector_45ref
  %cloptr8095870 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8095872 = getelementptr inbounds i64, i64* %cloptr8095870, i64 1              ; &eptr8095872[1]
  store i64 %cont8086074, i64* %eptr8095872                                          ; *eptr8095872 = %cont8086074
  %eptr8095871 = getelementptr inbounds i64, i64* %cloptr8095870, i64 0              ; &cloptr8095870[0]
  %f8095873 = ptrtoint void(i64,i64)* @lam8091743 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095873, i64* %eptr8095871                                             ; store fptr
  %arg8087500 = ptrtoint i64* %cloptr8095870 to i64                                  ; closure cast; i64* -> i64
  %arg8087499 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8095874 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095876 = getelementptr inbounds i64, i64* %cloptr8095874, i64 1              ; &eptr8095876[1]
  %eptr8095877 = getelementptr inbounds i64, i64* %cloptr8095874, i64 2              ; &eptr8095877[2]
  %eptr8095878 = getelementptr inbounds i64, i64* %cloptr8095874, i64 3              ; &eptr8095878[3]
  store i64 %ltz$_37do_45wind, i64* %eptr8095876                                     ; *eptr8095876 = %ltz$_37do_45wind
  store i64 %PkZ$k, i64* %eptr8095877                                                ; *eptr8095877 = %PkZ$k
  store i64 %ztj$k_45stack, i64* %eptr8095878                                        ; *eptr8095878 = %ztj$k_45stack
  %eptr8095875 = getelementptr inbounds i64, i64* %cloptr8095874, i64 0              ; &cloptr8095874[0]
  %f8095879 = ptrtoint void(i64,i64)* @lam8091733 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095879, i64* %eptr8095875                                             ; store fptr
  %arg8087498 = ptrtoint i64* %cloptr8095874 to i64                                  ; closure cast; i64* -> i64
  %rva8089903 = add i64 0, 0                                                         ; quoted ()
  %rva8089902 = call i64 @prim_cons(i64 %arg8087498, i64 %rva8089903)                ; call prim_cons
  %rva8089901 = call i64 @prim_cons(i64 %arg8087499, i64 %rva8089902)                ; call prim_cons
  %cloptr8095880 = inttoptr i64 %arg8087500 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095881 = getelementptr inbounds i64, i64* %cloptr8095880, i64 0             ; &cloptr8095880[0]
  %f8095883 = load i64, i64* %i0ptr8095881, align 8                                  ; load; *i0ptr8095881
  %fptr8095882 = inttoptr i64 %f8095883 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095882(i64 %arg8087500, i64 %rva8089901)           ; tail call
  ret void

else8095869:
  %arg8087536 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095884, i32 0, i32 0)); quoted string
  %retprim8086084 = call i64 @prim_halt(i64 %arg8087536)                             ; call prim_halt
  %arg8087538 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089906 = add i64 0, 0                                                         ; quoted ()
  %rva8089905 = call i64 @prim_cons(i64 %retprim8086084, i64 %rva8089906)            ; call prim_cons
  %rva8089904 = call i64 @prim_cons(i64 %arg8087538, i64 %rva8089905)                ; call prim_cons
  %cloptr8095885 = inttoptr i64 %cont8086074 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095886 = getelementptr inbounds i64, i64* %cloptr8095885, i64 0             ; &cloptr8095885[0]
  %f8095888 = load i64, i64* %i0ptr8095886, align 8                                  ; load; *i0ptr8095886
  %fptr8095887 = inttoptr i64 %f8095888 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095887(i64 %cont8086074, i64 %rva8089904)          ; tail call
  ret void
}


define void @lam8091753(i64 %env8091754, i64 %rvp8089853) {
  %cont8086075 = call i64 @prim_car(i64 %rvp8089853)                                 ; call prim_car
  %rvp8089852 = call i64 @prim_cdr(i64 %rvp8089853)                                  ; call prim_cdr
  %jiF$u = call i64 @prim_car(i64 %rvp8089852)                                       ; call prim_car
  %na8089845 = call i64 @prim_cdr(i64 %rvp8089852)                                   ; call prim_cdr
  %a8085874 = call i64 @prim_procedure_63(i64 %jiF$u)                                ; call prim_procedure_63
  %cmp8095889 = icmp eq i64 %a8085874, 15                                            ; false?
  br i1 %cmp8095889, label %else8095891, label %then8095890                          ; if

then8095890:
  %rva8089848 = add i64 0, 0                                                         ; quoted ()
  %rva8089847 = call i64 @prim_cons(i64 %jiF$u, i64 %rva8089848)                     ; call prim_cons
  %rva8089846 = call i64 @prim_cons(i64 %cont8086075, i64 %rva8089847)               ; call prim_cons
  %cloptr8095892 = inttoptr i64 %jiF$u to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8095893 = getelementptr inbounds i64, i64* %cloptr8095892, i64 0             ; &cloptr8095892[0]
  %f8095895 = load i64, i64* %i0ptr8095893, align 8                                  ; load; *i0ptr8095893
  %fptr8095894 = inttoptr i64 %f8095895 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095894(i64 %jiF$u, i64 %rva8089846)                ; tail call
  ret void

else8095891:
  %arg8087492 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095896, i32 0, i32 0)); quoted string
  %retprim8086076 = call i64 @prim_halt(i64 %arg8087492)                             ; call prim_halt
  %arg8087494 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089851 = add i64 0, 0                                                         ; quoted ()
  %rva8089850 = call i64 @prim_cons(i64 %retprim8086076, i64 %rva8089851)            ; call prim_cons
  %rva8089849 = call i64 @prim_cons(i64 %arg8087494, i64 %rva8089850)                ; call prim_cons
  %cloptr8095897 = inttoptr i64 %cont8086075 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095898 = getelementptr inbounds i64, i64* %cloptr8095897, i64 0             ; &cloptr8095897[0]
  %f8095900 = load i64, i64* %i0ptr8095898, align 8                                  ; load; *i0ptr8095898
  %fptr8095899 = inttoptr i64 %f8095900 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095899(i64 %cont8086075, i64 %rva8089849)          ; tail call
  ret void
}


define void @lam8091743(i64 %env8091744, i64 %rvp8089870) {
  %envptr8095901 = inttoptr i64 %env8091744 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095902 = getelementptr inbounds i64, i64* %envptr8095901, i64 1            ; &envptr8095901[1]
  %cont8086074 = load i64, i64* %envptr8095902, align 8                              ; load; *envptr8095902
  %_958086077 = call i64 @prim_car(i64 %rvp8089870)                                  ; call prim_car
  %rvp8089869 = call i64 @prim_cdr(i64 %rvp8089870)                                  ; call prim_cdr
  %a8085879 = call i64 @prim_car(i64 %rvp8089869)                                    ; call prim_car
  %na8089855 = call i64 @prim_cdr(i64 %rvp8089869)                                   ; call prim_cdr
  %cloptr8095903 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8095904 = getelementptr inbounds i64, i64* %cloptr8095903, i64 0              ; &cloptr8095903[0]
  %f8095905 = ptrtoint void(i64,i64)* @lam8091741 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095905, i64* %eptr8095904                                             ; store fptr
  %arg8087503 = ptrtoint i64* %cloptr8095903 to i64                                  ; closure cast; i64* -> i64
  %rva8089868 = add i64 0, 0                                                         ; quoted ()
  %rva8089867 = call i64 @prim_cons(i64 %a8085879, i64 %rva8089868)                  ; call prim_cons
  %rva8089866 = call i64 @prim_cons(i64 %cont8086074, i64 %rva8089867)               ; call prim_cons
  %cloptr8095906 = inttoptr i64 %arg8087503 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095907 = getelementptr inbounds i64, i64* %cloptr8095906, i64 0             ; &cloptr8095906[0]
  %f8095909 = load i64, i64* %i0ptr8095907, align 8                                  ; load; *i0ptr8095907
  %fptr8095908 = inttoptr i64 %f8095909 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095908(i64 %arg8087503, i64 %rva8089866)           ; tail call
  ret void
}


define void @lam8091741(i64 %env8091742, i64 %rvp8089865) {
  %cont8086078 = call i64 @prim_car(i64 %rvp8089865)                                 ; call prim_car
  %rvp8089864 = call i64 @prim_cdr(i64 %rvp8089865)                                  ; call prim_cdr
  %GjM$u = call i64 @prim_car(i64 %rvp8089864)                                       ; call prim_car
  %na8089857 = call i64 @prim_cdr(i64 %rvp8089864)                                   ; call prim_cdr
  %a8085876 = call i64 @prim_procedure_63(i64 %GjM$u)                                ; call prim_procedure_63
  %cmp8095910 = icmp eq i64 %a8085876, 15                                            ; false?
  br i1 %cmp8095910, label %else8095912, label %then8095911                          ; if

then8095911:
  %rva8089860 = add i64 0, 0                                                         ; quoted ()
  %rva8089859 = call i64 @prim_cons(i64 %GjM$u, i64 %rva8089860)                     ; call prim_cons
  %rva8089858 = call i64 @prim_cons(i64 %cont8086078, i64 %rva8089859)               ; call prim_cons
  %cloptr8095913 = inttoptr i64 %GjM$u to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8095914 = getelementptr inbounds i64, i64* %cloptr8095913, i64 0             ; &cloptr8095913[0]
  %f8095916 = load i64, i64* %i0ptr8095914, align 8                                  ; load; *i0ptr8095914
  %fptr8095915 = inttoptr i64 %f8095916 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095915(i64 %GjM$u, i64 %rva8089858)                ; tail call
  ret void

else8095912:
  %arg8087508 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095917, i32 0, i32 0)); quoted string
  %retprim8086079 = call i64 @prim_halt(i64 %arg8087508)                             ; call prim_halt
  %arg8087510 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089863 = add i64 0, 0                                                         ; quoted ()
  %rva8089862 = call i64 @prim_cons(i64 %retprim8086079, i64 %rva8089863)            ; call prim_cons
  %rva8089861 = call i64 @prim_cons(i64 %arg8087510, i64 %rva8089862)                ; call prim_cons
  %cloptr8095918 = inttoptr i64 %cont8086078 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095919 = getelementptr inbounds i64, i64* %cloptr8095918, i64 0             ; &cloptr8095918[0]
  %f8095921 = load i64, i64* %i0ptr8095919, align 8                                  ; load; *i0ptr8095919
  %fptr8095920 = inttoptr i64 %f8095921 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095920(i64 %cont8086078, i64 %rva8089861)          ; tail call
  ret void
}


define void @lam8091733(i64 %env8091734, i64 %rvp8089900) {
  %envptr8095922 = inttoptr i64 %env8091734 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095923 = getelementptr inbounds i64, i64* %envptr8095922, i64 3            ; &envptr8095922[3]
  %ztj$k_45stack = load i64, i64* %envptr8095923, align 8                            ; load; *envptr8095923
  %envptr8095924 = inttoptr i64 %env8091734 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095925 = getelementptr inbounds i64, i64* %envptr8095924, i64 2            ; &envptr8095924[2]
  %PkZ$k = load i64, i64* %envptr8095925, align 8                                    ; load; *envptr8095925
  %envptr8095926 = inttoptr i64 %env8091734 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095927 = getelementptr inbounds i64, i64* %envptr8095926, i64 1            ; &envptr8095926[1]
  %ltz$_37do_45wind = load i64, i64* %envptr8095927, align 8                         ; load; *envptr8095927
  %cont8086080 = call i64 @prim_car(i64 %rvp8089900)                                 ; call prim_car
  %rvp8089899 = call i64 @prim_cdr(i64 %rvp8089900)                                  ; call prim_cdr
  %zsk$x = call i64 @prim_car(i64 %rvp8089899)                                       ; call prim_car
  %na8089872 = call i64 @prim_cdr(i64 %rvp8089899)                                   ; call prim_cdr
  %a8085877 = call i64 @prim_procedure_63(i64 %ltz$_37do_45wind)                     ; call prim_procedure_63
  %cmp8095928 = icmp eq i64 %a8085877, 15                                            ; false?
  br i1 %cmp8095928, label %else8095930, label %then8095929                          ; if

then8095929:
  %cloptr8095931 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095933 = getelementptr inbounds i64, i64* %cloptr8095931, i64 1              ; &eptr8095933[1]
  %eptr8095934 = getelementptr inbounds i64, i64* %cloptr8095931, i64 2              ; &eptr8095934[2]
  %eptr8095935 = getelementptr inbounds i64, i64* %cloptr8095931, i64 3              ; &eptr8095935[3]
  store i64 %cont8086080, i64* %eptr8095933                                          ; *eptr8095933 = %cont8086080
  store i64 %PkZ$k, i64* %eptr8095934                                                ; *eptr8095934 = %PkZ$k
  store i64 %zsk$x, i64* %eptr8095935                                                ; *eptr8095935 = %zsk$x
  %eptr8095932 = getelementptr inbounds i64, i64* %cloptr8095931, i64 0              ; &cloptr8095931[0]
  %f8095936 = ptrtoint void(i64,i64)* @lam8091722 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095936, i64* %eptr8095932                                             ; store fptr
  %arg8087514 = ptrtoint i64* %cloptr8095931 to i64                                  ; closure cast; i64* -> i64
  %rva8089885 = add i64 0, 0                                                         ; quoted ()
  %rva8089884 = call i64 @prim_cons(i64 %ztj$k_45stack, i64 %rva8089885)             ; call prim_cons
  %rva8089883 = call i64 @prim_cons(i64 %arg8087514, i64 %rva8089884)                ; call prim_cons
  %cloptr8095937 = inttoptr i64 %ltz$_37do_45wind to i64*                            ; closure/env cast; i64 -> i64*
  %i0ptr8095938 = getelementptr inbounds i64, i64* %cloptr8095937, i64 0             ; &cloptr8095937[0]
  %f8095940 = load i64, i64* %i0ptr8095938, align 8                                  ; load; *i0ptr8095938
  %fptr8095939 = inttoptr i64 %f8095940 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095939(i64 %ltz$_37do_45wind, i64 %rva8089883)     ; tail call
  ret void

else8095930:
  %arg8087524 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095941, i32 0, i32 0)); quoted string
  %retprim8086083 = call i64 @prim_halt(i64 %arg8087524)                             ; call prim_halt
  %cloptr8095942 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8095944 = getelementptr inbounds i64, i64* %cloptr8095942, i64 1              ; &eptr8095944[1]
  %eptr8095945 = getelementptr inbounds i64, i64* %cloptr8095942, i64 2              ; &eptr8095945[2]
  %eptr8095946 = getelementptr inbounds i64, i64* %cloptr8095942, i64 3              ; &eptr8095946[3]
  store i64 %cont8086080, i64* %eptr8095944                                          ; *eptr8095944 = %cont8086080
  store i64 %PkZ$k, i64* %eptr8095945                                                ; *eptr8095945 = %PkZ$k
  store i64 %zsk$x, i64* %eptr8095946                                                ; *eptr8095946 = %zsk$x
  %eptr8095943 = getelementptr inbounds i64, i64* %cloptr8095942, i64 0              ; &cloptr8095942[0]
  %f8095947 = ptrtoint void(i64,i64)* @lam8091730 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8095947, i64* %eptr8095943                                             ; store fptr
  %arg8087527 = ptrtoint i64* %cloptr8095942 to i64                                  ; closure cast; i64* -> i64
  %arg8087526 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089898 = add i64 0, 0                                                         ; quoted ()
  %rva8089897 = call i64 @prim_cons(i64 %retprim8086083, i64 %rva8089898)            ; call prim_cons
  %rva8089896 = call i64 @prim_cons(i64 %arg8087526, i64 %rva8089897)                ; call prim_cons
  %cloptr8095948 = inttoptr i64 %arg8087527 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8095949 = getelementptr inbounds i64, i64* %cloptr8095948, i64 0             ; &cloptr8095948[0]
  %f8095951 = load i64, i64* %i0ptr8095949, align 8                                  ; load; *i0ptr8095949
  %fptr8095950 = inttoptr i64 %f8095951 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095950(i64 %arg8087527, i64 %rva8089896)           ; tail call
  ret void
}


define void @lam8091730(i64 %env8091731, i64 %rvp8089895) {
  %envptr8095952 = inttoptr i64 %env8091731 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095953 = getelementptr inbounds i64, i64* %envptr8095952, i64 3            ; &envptr8095952[3]
  %zsk$x = load i64, i64* %envptr8095953, align 8                                    ; load; *envptr8095953
  %envptr8095954 = inttoptr i64 %env8091731 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095955 = getelementptr inbounds i64, i64* %envptr8095954, i64 2            ; &envptr8095954[2]
  %PkZ$k = load i64, i64* %envptr8095955, align 8                                    ; load; *envptr8095955
  %envptr8095956 = inttoptr i64 %env8091731 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095957 = getelementptr inbounds i64, i64* %envptr8095956, i64 1            ; &envptr8095956[1]
  %cont8086080 = load i64, i64* %envptr8095957, align 8                              ; load; *envptr8095957
  %_958086081 = call i64 @prim_car(i64 %rvp8089895)                                  ; call prim_car
  %rvp8089894 = call i64 @prim_cdr(i64 %rvp8089895)                                  ; call prim_cdr
  %Bim$_95t = call i64 @prim_car(i64 %rvp8089894)                                    ; call prim_car
  %na8089887 = call i64 @prim_cdr(i64 %rvp8089894)                                   ; call prim_cdr
  %a8085878 = call i64 @prim_procedure_63(i64 %PkZ$k)                                ; call prim_procedure_63
  %cmp8095958 = icmp eq i64 %a8085878, 15                                            ; false?
  br i1 %cmp8095958, label %else8095960, label %then8095959                          ; if

then8095959:
  %rva8089890 = add i64 0, 0                                                         ; quoted ()
  %rva8089889 = call i64 @prim_cons(i64 %zsk$x, i64 %rva8089890)                     ; call prim_cons
  %rva8089888 = call i64 @prim_cons(i64 %cont8086080, i64 %rva8089889)               ; call prim_cons
  %cloptr8095961 = inttoptr i64 %PkZ$k to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8095962 = getelementptr inbounds i64, i64* %cloptr8095961, i64 0             ; &cloptr8095961[0]
  %f8095964 = load i64, i64* %i0ptr8095962, align 8                                  ; load; *i0ptr8095962
  %fptr8095963 = inttoptr i64 %f8095964 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095963(i64 %PkZ$k, i64 %rva8089888)                ; tail call
  ret void

else8095960:
  %arg8087532 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095965, i32 0, i32 0)); quoted string
  %retprim8086082 = call i64 @prim_halt(i64 %arg8087532)                             ; call prim_halt
  %arg8087534 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089893 = add i64 0, 0                                                         ; quoted ()
  %rva8089892 = call i64 @prim_cons(i64 %retprim8086082, i64 %rva8089893)            ; call prim_cons
  %rva8089891 = call i64 @prim_cons(i64 %arg8087534, i64 %rva8089892)                ; call prim_cons
  %cloptr8095966 = inttoptr i64 %cont8086080 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095967 = getelementptr inbounds i64, i64* %cloptr8095966, i64 0             ; &cloptr8095966[0]
  %f8095969 = load i64, i64* %i0ptr8095967, align 8                                  ; load; *i0ptr8095967
  %fptr8095968 = inttoptr i64 %f8095969 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095968(i64 %cont8086080, i64 %rva8089891)          ; tail call
  ret void
}


define void @lam8091722(i64 %env8091723, i64 %rvp8089882) {
  %envptr8095970 = inttoptr i64 %env8091723 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095971 = getelementptr inbounds i64, i64* %envptr8095970, i64 3            ; &envptr8095970[3]
  %zsk$x = load i64, i64* %envptr8095971, align 8                                    ; load; *envptr8095971
  %envptr8095972 = inttoptr i64 %env8091723 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095973 = getelementptr inbounds i64, i64* %envptr8095972, i64 2            ; &envptr8095972[2]
  %PkZ$k = load i64, i64* %envptr8095973, align 8                                    ; load; *envptr8095973
  %envptr8095974 = inttoptr i64 %env8091723 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095975 = getelementptr inbounds i64, i64* %envptr8095974, i64 1            ; &envptr8095974[1]
  %cont8086080 = load i64, i64* %envptr8095975, align 8                              ; load; *envptr8095975
  %_958086081 = call i64 @prim_car(i64 %rvp8089882)                                  ; call prim_car
  %rvp8089881 = call i64 @prim_cdr(i64 %rvp8089882)                                  ; call prim_cdr
  %Bim$_95t = call i64 @prim_car(i64 %rvp8089881)                                    ; call prim_car
  %na8089874 = call i64 @prim_cdr(i64 %rvp8089881)                                   ; call prim_cdr
  %a8085878 = call i64 @prim_procedure_63(i64 %PkZ$k)                                ; call prim_procedure_63
  %cmp8095976 = icmp eq i64 %a8085878, 15                                            ; false?
  br i1 %cmp8095976, label %else8095978, label %then8095977                          ; if

then8095977:
  %rva8089877 = add i64 0, 0                                                         ; quoted ()
  %rva8089876 = call i64 @prim_cons(i64 %zsk$x, i64 %rva8089877)                     ; call prim_cons
  %rva8089875 = call i64 @prim_cons(i64 %cont8086080, i64 %rva8089876)               ; call prim_cons
  %cloptr8095979 = inttoptr i64 %PkZ$k to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8095980 = getelementptr inbounds i64, i64* %cloptr8095979, i64 0             ; &cloptr8095979[0]
  %f8095982 = load i64, i64* %i0ptr8095980, align 8                                  ; load; *i0ptr8095980
  %fptr8095981 = inttoptr i64 %f8095982 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095981(i64 %PkZ$k, i64 %rva8089875)                ; tail call
  ret void

else8095978:
  %arg8087520 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8095983, i32 0, i32 0)); quoted string
  %retprim8086082 = call i64 @prim_halt(i64 %arg8087520)                             ; call prim_halt
  %arg8087522 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089880 = add i64 0, 0                                                         ; quoted ()
  %rva8089879 = call i64 @prim_cons(i64 %retprim8086082, i64 %rva8089880)            ; call prim_cons
  %rva8089878 = call i64 @prim_cons(i64 %arg8087522, i64 %rva8089879)                ; call prim_cons
  %cloptr8095984 = inttoptr i64 %cont8086080 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8095985 = getelementptr inbounds i64, i64* %cloptr8095984, i64 0             ; &cloptr8095984[0]
  %f8095987 = load i64, i64* %i0ptr8095985, align 8                                  ; load; *i0ptr8095985
  %fptr8095986 = inttoptr i64 %f8095987 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8095986(i64 %cont8086080, i64 %rva8089878)          ; tail call
  ret void
}


define void @lam8091714(i64 %env8091715, i64 %rvp8089941) {
  %envptr8095988 = inttoptr i64 %env8091715 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095989 = getelementptr inbounds i64, i64* %envptr8095988, i64 4            ; &envptr8095988[4]
  %Z5B$ccstack = load i64, i64* %envptr8095989, align 8                              ; load; *envptr8095989
  %envptr8095990 = inttoptr i64 %env8091715 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095991 = getelementptr inbounds i64, i64* %envptr8095990, i64 3            ; &envptr8095990[3]
  %AlL$lst = load i64, i64* %envptr8095991, align 8                                  ; load; *envptr8095991
  %envptr8095992 = inttoptr i64 %env8091715 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095993 = getelementptr inbounds i64, i64* %envptr8095992, i64 2            ; &envptr8095992[2]
  %cont8086065 = load i64, i64* %envptr8095993, align 8                              ; load; *envptr8095993
  %envptr8095994 = inttoptr i64 %env8091715 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8095995 = getelementptr inbounds i64, i64* %envptr8095994, i64 1            ; &envptr8095994[1]
  %ANn$fail = load i64, i64* %envptr8095995, align 8                                 ; load; *envptr8095995
  %_958086066 = call i64 @prim_car(i64 %rvp8089941)                                  ; call prim_car
  %rvp8089940 = call i64 @prim_cdr(i64 %rvp8089941)                                  ; call prim_cdr
  %a08$cc = call i64 @prim_car(i64 %rvp8089940)                                      ; call prim_car
  %na8089910 = call i64 @prim_cdr(i64 %rvp8089940)                                   ; call prim_cdr
  %arg8087540 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085880 = call i64 @prim_vector_45ref(i64 %AlL$lst, i64 %arg8087540)             ; call prim_vector_45ref
  %a8085881 = call i64 @prim_null_63(i64 %a8085880)                                  ; call prim_null_63
  %cmp8095996 = icmp eq i64 %a8085881, 15                                            ; false?
  br i1 %cmp8095996, label %else8095998, label %then8095997                          ; if

then8095997:
  %arg8087543 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085882 = call i64 @prim_vector_45ref(i64 %ANn$fail, i64 %arg8087543)            ; call prim_vector_45ref
  %a8085883 = call i64 @prim_procedure_63(i64 %a8085882)                             ; call prim_procedure_63
  %cmp8095999 = icmp eq i64 %a8085883, 15                                            ; false?
  br i1 %cmp8095999, label %else8096001, label %then8096000                          ; if

then8096000:
  %arg8087546 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085884 = call i64 @prim_vector_45ref(i64 %ANn$fail, i64 %arg8087546)            ; call prim_vector_45ref
  %rva8089912 = add i64 0, 0                                                         ; quoted ()
  %rva8089911 = call i64 @prim_cons(i64 %cont8086065, i64 %rva8089912)               ; call prim_cons
  %cloptr8096002 = inttoptr i64 %a8085884 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096003 = getelementptr inbounds i64, i64* %cloptr8096002, i64 0             ; &cloptr8096002[0]
  %f8096005 = load i64, i64* %i0ptr8096003, align 8                                  ; load; *i0ptr8096003
  %fptr8096004 = inttoptr i64 %f8096005 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096004(i64 %a8085884, i64 %rva8089911)             ; tail call
  ret void

else8096001:
  %arg8087550 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096006, i32 0, i32 0)); quoted string
  %retprim8086067 = call i64 @prim_halt(i64 %arg8087550)                             ; call prim_halt
  %arg8087552 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089915 = add i64 0, 0                                                         ; quoted ()
  %rva8089914 = call i64 @prim_cons(i64 %retprim8086067, i64 %rva8089915)            ; call prim_cons
  %rva8089913 = call i64 @prim_cons(i64 %arg8087552, i64 %rva8089914)                ; call prim_cons
  %cloptr8096007 = inttoptr i64 %cont8086065 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096008 = getelementptr inbounds i64, i64* %cloptr8096007, i64 0             ; &cloptr8096007[0]
  %f8096010 = load i64, i64* %i0ptr8096008, align 8                                  ; load; *i0ptr8096008
  %fptr8096009 = inttoptr i64 %f8096010 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096009(i64 %cont8086065, i64 %rva8089913)          ; tail call
  ret void

else8095998:
  %arg8087554 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085885 = call i64 @prim_vector_45ref(i64 %AlL$lst, i64 %arg8087554)             ; call prim_vector_45ref
  %retprim8086073 = call i64 @prim_car(i64 %a8085885)                                ; call prim_car
  %cloptr8096011 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096013 = getelementptr inbounds i64, i64* %cloptr8096011, i64 1              ; &eptr8096013[1]
  %eptr8096014 = getelementptr inbounds i64, i64* %cloptr8096011, i64 2              ; &eptr8096014[2]
  %eptr8096015 = getelementptr inbounds i64, i64* %cloptr8096011, i64 3              ; &eptr8096015[3]
  %eptr8096016 = getelementptr inbounds i64, i64* %cloptr8096011, i64 4              ; &eptr8096016[4]
  store i64 %cont8086065, i64* %eptr8096013                                          ; *eptr8096013 = %cont8086065
  store i64 %AlL$lst, i64* %eptr8096014                                              ; *eptr8096014 = %AlL$lst
  store i64 %a08$cc, i64* %eptr8096015                                               ; *eptr8096015 = %a08$cc
  store i64 %Z5B$ccstack, i64* %eptr8096016                                          ; *eptr8096016 = %Z5B$ccstack
  %eptr8096012 = getelementptr inbounds i64, i64* %cloptr8096011, i64 0              ; &cloptr8096011[0]
  %f8096017 = ptrtoint void(i64,i64)* @lam8091710 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096017, i64* %eptr8096012                                             ; store fptr
  %arg8087559 = ptrtoint i64* %cloptr8096011 to i64                                  ; closure cast; i64* -> i64
  %arg8087558 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089939 = add i64 0, 0                                                         ; quoted ()
  %rva8089938 = call i64 @prim_cons(i64 %retprim8086073, i64 %rva8089939)            ; call prim_cons
  %rva8089937 = call i64 @prim_cons(i64 %arg8087558, i64 %rva8089938)                ; call prim_cons
  %cloptr8096018 = inttoptr i64 %arg8087559 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096019 = getelementptr inbounds i64, i64* %cloptr8096018, i64 0             ; &cloptr8096018[0]
  %f8096021 = load i64, i64* %i0ptr8096019, align 8                                  ; load; *i0ptr8096019
  %fptr8096020 = inttoptr i64 %f8096021 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096020(i64 %arg8087559, i64 %rva8089937)           ; tail call
  ret void
}


define void @lam8091710(i64 %env8091711, i64 %rvp8089936) {
  %envptr8096022 = inttoptr i64 %env8091711 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096023 = getelementptr inbounds i64, i64* %envptr8096022, i64 4            ; &envptr8096022[4]
  %Z5B$ccstack = load i64, i64* %envptr8096023, align 8                              ; load; *envptr8096023
  %envptr8096024 = inttoptr i64 %env8091711 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096025 = getelementptr inbounds i64, i64* %envptr8096024, i64 3            ; &envptr8096024[3]
  %a08$cc = load i64, i64* %envptr8096025, align 8                                   ; load; *envptr8096025
  %envptr8096026 = inttoptr i64 %env8091711 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096027 = getelementptr inbounds i64, i64* %envptr8096026, i64 2            ; &envptr8096026[2]
  %AlL$lst = load i64, i64* %envptr8096027, align 8                                  ; load; *envptr8096027
  %envptr8096028 = inttoptr i64 %env8091711 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096029 = getelementptr inbounds i64, i64* %envptr8096028, i64 1            ; &envptr8096028[1]
  %cont8086065 = load i64, i64* %envptr8096029, align 8                              ; load; *envptr8096029
  %_958086068 = call i64 @prim_car(i64 %rvp8089936)                                  ; call prim_car
  %rvp8089935 = call i64 @prim_cdr(i64 %rvp8089936)                                  ; call prim_cdr
  %JaO$head = call i64 @prim_car(i64 %rvp8089935)                                    ; call prim_car
  %na8089917 = call i64 @prim_cdr(i64 %rvp8089935)                                   ; call prim_cdr
  %arg8087560 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085886 = call i64 @prim_vector_45ref(i64 %AlL$lst, i64 %arg8087560)             ; call prim_vector_45ref
  %a8085887 = call i64 @prim_cdr(i64 %a8085886)                                      ; call prim_cdr
  %arg8087564 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086072 = call i64 @prim_vector_45set_33(i64 %AlL$lst, i64 %arg8087564, i64 %a8085887); call prim_vector_45set_33
  %cloptr8096030 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096032 = getelementptr inbounds i64, i64* %cloptr8096030, i64 1              ; &eptr8096032[1]
  %eptr8096033 = getelementptr inbounds i64, i64* %cloptr8096030, i64 2              ; &eptr8096033[2]
  %eptr8096034 = getelementptr inbounds i64, i64* %cloptr8096030, i64 3              ; &eptr8096034[3]
  %eptr8096035 = getelementptr inbounds i64, i64* %cloptr8096030, i64 4              ; &eptr8096035[4]
  store i64 %JaO$head, i64* %eptr8096032                                             ; *eptr8096032 = %JaO$head
  store i64 %cont8086065, i64* %eptr8096033                                          ; *eptr8096033 = %cont8086065
  store i64 %a08$cc, i64* %eptr8096034                                               ; *eptr8096034 = %a08$cc
  store i64 %Z5B$ccstack, i64* %eptr8096035                                          ; *eptr8096035 = %Z5B$ccstack
  %eptr8096031 = getelementptr inbounds i64, i64* %cloptr8096030, i64 0              ; &cloptr8096030[0]
  %f8096036 = ptrtoint void(i64,i64)* @lam8091706 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096036, i64* %eptr8096031                                             ; store fptr
  %arg8087568 = ptrtoint i64* %cloptr8096030 to i64                                  ; closure cast; i64* -> i64
  %arg8087567 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089934 = add i64 0, 0                                                         ; quoted ()
  %rva8089933 = call i64 @prim_cons(i64 %retprim8086072, i64 %rva8089934)            ; call prim_cons
  %rva8089932 = call i64 @prim_cons(i64 %arg8087567, i64 %rva8089933)                ; call prim_cons
  %cloptr8096037 = inttoptr i64 %arg8087568 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096038 = getelementptr inbounds i64, i64* %cloptr8096037, i64 0             ; &cloptr8096037[0]
  %f8096040 = load i64, i64* %i0ptr8096038, align 8                                  ; load; *i0ptr8096038
  %fptr8096039 = inttoptr i64 %f8096040 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096039(i64 %arg8087568, i64 %rva8089932)           ; tail call
  ret void
}


define void @lam8091706(i64 %env8091707, i64 %rvp8089931) {
  %envptr8096041 = inttoptr i64 %env8091707 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096042 = getelementptr inbounds i64, i64* %envptr8096041, i64 4            ; &envptr8096041[4]
  %Z5B$ccstack = load i64, i64* %envptr8096042, align 8                              ; load; *envptr8096042
  %envptr8096043 = inttoptr i64 %env8091707 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096044 = getelementptr inbounds i64, i64* %envptr8096043, i64 3            ; &envptr8096043[3]
  %a08$cc = load i64, i64* %envptr8096044, align 8                                   ; load; *envptr8096044
  %envptr8096045 = inttoptr i64 %env8091707 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096046 = getelementptr inbounds i64, i64* %envptr8096045, i64 2            ; &envptr8096045[2]
  %cont8086065 = load i64, i64* %envptr8096046, align 8                              ; load; *envptr8096046
  %envptr8096047 = inttoptr i64 %env8091707 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096048 = getelementptr inbounds i64, i64* %envptr8096047, i64 1            ; &envptr8096047[1]
  %JaO$head = load i64, i64* %envptr8096048, align 8                                 ; load; *envptr8096048
  %_958086069 = call i64 @prim_car(i64 %rvp8089931)                                  ; call prim_car
  %rvp8089930 = call i64 @prim_cdr(i64 %rvp8089931)                                  ; call prim_cdr
  %RzJ$_95t = call i64 @prim_car(i64 %rvp8089930)                                    ; call prim_car
  %na8089919 = call i64 @prim_cdr(i64 %rvp8089930)                                   ; call prim_cdr
  %arg8087569 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085888 = call i64 @prim_vector_45ref(i64 %Z5B$ccstack, i64 %arg8087569)         ; call prim_vector_45ref
  %a8085889 = call i64 @prim_cons(i64 %a08$cc, i64 %a8085888)                        ; call prim_cons
  %arg8087574 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086071 = call i64 @prim_vector_45set_33(i64 %Z5B$ccstack, i64 %arg8087574, i64 %a8085889); call prim_vector_45set_33
  %cloptr8096049 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8096051 = getelementptr inbounds i64, i64* %cloptr8096049, i64 1              ; &eptr8096051[1]
  %eptr8096052 = getelementptr inbounds i64, i64* %cloptr8096049, i64 2              ; &eptr8096052[2]
  store i64 %JaO$head, i64* %eptr8096051                                             ; *eptr8096051 = %JaO$head
  store i64 %cont8086065, i64* %eptr8096052                                          ; *eptr8096052 = %cont8086065
  %eptr8096050 = getelementptr inbounds i64, i64* %cloptr8096049, i64 0              ; &cloptr8096049[0]
  %f8096053 = ptrtoint void(i64,i64)* @lam8091702 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096053, i64* %eptr8096050                                             ; store fptr
  %arg8087578 = ptrtoint i64* %cloptr8096049 to i64                                  ; closure cast; i64* -> i64
  %arg8087577 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089929 = add i64 0, 0                                                         ; quoted ()
  %rva8089928 = call i64 @prim_cons(i64 %retprim8086071, i64 %rva8089929)            ; call prim_cons
  %rva8089927 = call i64 @prim_cons(i64 %arg8087577, i64 %rva8089928)                ; call prim_cons
  %cloptr8096054 = inttoptr i64 %arg8087578 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096055 = getelementptr inbounds i64, i64* %cloptr8096054, i64 0             ; &cloptr8096054[0]
  %f8096057 = load i64, i64* %i0ptr8096055, align 8                                  ; load; *i0ptr8096055
  %fptr8096056 = inttoptr i64 %f8096057 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096056(i64 %arg8087578, i64 %rva8089927)           ; tail call
  ret void
}


define void @lam8091702(i64 %env8091703, i64 %rvp8089926) {
  %envptr8096058 = inttoptr i64 %env8091703 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096059 = getelementptr inbounds i64, i64* %envptr8096058, i64 2            ; &envptr8096058[2]
  %cont8086065 = load i64, i64* %envptr8096059, align 8                              ; load; *envptr8096059
  %envptr8096060 = inttoptr i64 %env8091703 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096061 = getelementptr inbounds i64, i64* %envptr8096060, i64 1            ; &envptr8096060[1]
  %JaO$head = load i64, i64* %envptr8096061, align 8                                 ; load; *envptr8096061
  %_958086070 = call i64 @prim_car(i64 %rvp8089926)                                  ; call prim_car
  %rvp8089925 = call i64 @prim_cdr(i64 %rvp8089926)                                  ; call prim_cdr
  %dHm$_95t = call i64 @prim_car(i64 %rvp8089925)                                    ; call prim_car
  %na8089921 = call i64 @prim_cdr(i64 %rvp8089925)                                   ; call prim_cdr
  %arg8087580 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089924 = add i64 0, 0                                                         ; quoted ()
  %rva8089923 = call i64 @prim_cons(i64 %JaO$head, i64 %rva8089924)                  ; call prim_cons
  %rva8089922 = call i64 @prim_cons(i64 %arg8087580, i64 %rva8089923)                ; call prim_cons
  %cloptr8096062 = inttoptr i64 %cont8086065 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096063 = getelementptr inbounds i64, i64* %cloptr8096062, i64 0             ; &cloptr8096062[0]
  %f8096065 = load i64, i64* %i0ptr8096063, align 8                                  ; load; *i0ptr8096063
  %fptr8096064 = inttoptr i64 %f8096065 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096064(i64 %cont8086065, i64 %rva8089922)          ; tail call
  ret void
}


define void @lam8091686(i64 %env8091687, i64 %rvp8089974) {
  %envptr8096066 = inttoptr i64 %env8091687 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096067 = getelementptr inbounds i64, i64* %envptr8096066, i64 4            ; &envptr8096066[4]
  %Z5B$ccstack = load i64, i64* %envptr8096067, align 8                              ; load; *envptr8096067
  %envptr8096068 = inttoptr i64 %env8091687 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096069 = getelementptr inbounds i64, i64* %envptr8096068, i64 3            ; &envptr8096068[3]
  %AlL$lst = load i64, i64* %envptr8096069, align 8                                  ; load; *envptr8096069
  %envptr8096070 = inttoptr i64 %env8091687 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096071 = getelementptr inbounds i64, i64* %envptr8096070, i64 2            ; &envptr8096070[2]
  %cont8086065 = load i64, i64* %envptr8096071, align 8                              ; load; *envptr8096071
  %envptr8096072 = inttoptr i64 %env8091687 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096073 = getelementptr inbounds i64, i64* %envptr8096072, i64 1            ; &envptr8096072[1]
  %ANn$fail = load i64, i64* %envptr8096073, align 8                                 ; load; *envptr8096073
  %_958086066 = call i64 @prim_car(i64 %rvp8089974)                                  ; call prim_car
  %rvp8089973 = call i64 @prim_cdr(i64 %rvp8089974)                                  ; call prim_cdr
  %a08$cc = call i64 @prim_car(i64 %rvp8089973)                                      ; call prim_car
  %na8089943 = call i64 @prim_cdr(i64 %rvp8089973)                                   ; call prim_cdr
  %arg8087582 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085880 = call i64 @prim_vector_45ref(i64 %AlL$lst, i64 %arg8087582)             ; call prim_vector_45ref
  %a8085881 = call i64 @prim_null_63(i64 %a8085880)                                  ; call prim_null_63
  %cmp8096074 = icmp eq i64 %a8085881, 15                                            ; false?
  br i1 %cmp8096074, label %else8096076, label %then8096075                          ; if

then8096075:
  %arg8087585 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085882 = call i64 @prim_vector_45ref(i64 %ANn$fail, i64 %arg8087585)            ; call prim_vector_45ref
  %a8085883 = call i64 @prim_procedure_63(i64 %a8085882)                             ; call prim_procedure_63
  %cmp8096077 = icmp eq i64 %a8085883, 15                                            ; false?
  br i1 %cmp8096077, label %else8096079, label %then8096078                          ; if

then8096078:
  %arg8087588 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085884 = call i64 @prim_vector_45ref(i64 %ANn$fail, i64 %arg8087588)            ; call prim_vector_45ref
  %rva8089945 = add i64 0, 0                                                         ; quoted ()
  %rva8089944 = call i64 @prim_cons(i64 %cont8086065, i64 %rva8089945)               ; call prim_cons
  %cloptr8096080 = inttoptr i64 %a8085884 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096081 = getelementptr inbounds i64, i64* %cloptr8096080, i64 0             ; &cloptr8096080[0]
  %f8096083 = load i64, i64* %i0ptr8096081, align 8                                  ; load; *i0ptr8096081
  %fptr8096082 = inttoptr i64 %f8096083 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096082(i64 %a8085884, i64 %rva8089944)             ; tail call
  ret void

else8096079:
  %arg8087592 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096084, i32 0, i32 0)); quoted string
  %retprim8086067 = call i64 @prim_halt(i64 %arg8087592)                             ; call prim_halt
  %arg8087594 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089948 = add i64 0, 0                                                         ; quoted ()
  %rva8089947 = call i64 @prim_cons(i64 %retprim8086067, i64 %rva8089948)            ; call prim_cons
  %rva8089946 = call i64 @prim_cons(i64 %arg8087594, i64 %rva8089947)                ; call prim_cons
  %cloptr8096085 = inttoptr i64 %cont8086065 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096086 = getelementptr inbounds i64, i64* %cloptr8096085, i64 0             ; &cloptr8096085[0]
  %f8096088 = load i64, i64* %i0ptr8096086, align 8                                  ; load; *i0ptr8096086
  %fptr8096087 = inttoptr i64 %f8096088 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096087(i64 %cont8086065, i64 %rva8089946)          ; tail call
  ret void

else8096076:
  %arg8087596 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085885 = call i64 @prim_vector_45ref(i64 %AlL$lst, i64 %arg8087596)             ; call prim_vector_45ref
  %retprim8086073 = call i64 @prim_car(i64 %a8085885)                                ; call prim_car
  %cloptr8096089 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096091 = getelementptr inbounds i64, i64* %cloptr8096089, i64 1              ; &eptr8096091[1]
  %eptr8096092 = getelementptr inbounds i64, i64* %cloptr8096089, i64 2              ; &eptr8096092[2]
  %eptr8096093 = getelementptr inbounds i64, i64* %cloptr8096089, i64 3              ; &eptr8096093[3]
  %eptr8096094 = getelementptr inbounds i64, i64* %cloptr8096089, i64 4              ; &eptr8096094[4]
  store i64 %cont8086065, i64* %eptr8096091                                          ; *eptr8096091 = %cont8086065
  store i64 %AlL$lst, i64* %eptr8096092                                              ; *eptr8096092 = %AlL$lst
  store i64 %a08$cc, i64* %eptr8096093                                               ; *eptr8096093 = %a08$cc
  store i64 %Z5B$ccstack, i64* %eptr8096094                                          ; *eptr8096094 = %Z5B$ccstack
  %eptr8096090 = getelementptr inbounds i64, i64* %cloptr8096089, i64 0              ; &cloptr8096089[0]
  %f8096095 = ptrtoint void(i64,i64)* @lam8091682 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096095, i64* %eptr8096090                                             ; store fptr
  %arg8087601 = ptrtoint i64* %cloptr8096089 to i64                                  ; closure cast; i64* -> i64
  %arg8087600 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089972 = add i64 0, 0                                                         ; quoted ()
  %rva8089971 = call i64 @prim_cons(i64 %retprim8086073, i64 %rva8089972)            ; call prim_cons
  %rva8089970 = call i64 @prim_cons(i64 %arg8087600, i64 %rva8089971)                ; call prim_cons
  %cloptr8096096 = inttoptr i64 %arg8087601 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096097 = getelementptr inbounds i64, i64* %cloptr8096096, i64 0             ; &cloptr8096096[0]
  %f8096099 = load i64, i64* %i0ptr8096097, align 8                                  ; load; *i0ptr8096097
  %fptr8096098 = inttoptr i64 %f8096099 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096098(i64 %arg8087601, i64 %rva8089970)           ; tail call
  ret void
}


define void @lam8091682(i64 %env8091683, i64 %rvp8089969) {
  %envptr8096100 = inttoptr i64 %env8091683 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096101 = getelementptr inbounds i64, i64* %envptr8096100, i64 4            ; &envptr8096100[4]
  %Z5B$ccstack = load i64, i64* %envptr8096101, align 8                              ; load; *envptr8096101
  %envptr8096102 = inttoptr i64 %env8091683 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096103 = getelementptr inbounds i64, i64* %envptr8096102, i64 3            ; &envptr8096102[3]
  %a08$cc = load i64, i64* %envptr8096103, align 8                                   ; load; *envptr8096103
  %envptr8096104 = inttoptr i64 %env8091683 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096105 = getelementptr inbounds i64, i64* %envptr8096104, i64 2            ; &envptr8096104[2]
  %AlL$lst = load i64, i64* %envptr8096105, align 8                                  ; load; *envptr8096105
  %envptr8096106 = inttoptr i64 %env8091683 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096107 = getelementptr inbounds i64, i64* %envptr8096106, i64 1            ; &envptr8096106[1]
  %cont8086065 = load i64, i64* %envptr8096107, align 8                              ; load; *envptr8096107
  %_958086068 = call i64 @prim_car(i64 %rvp8089969)                                  ; call prim_car
  %rvp8089968 = call i64 @prim_cdr(i64 %rvp8089969)                                  ; call prim_cdr
  %JaO$head = call i64 @prim_car(i64 %rvp8089968)                                    ; call prim_car
  %na8089950 = call i64 @prim_cdr(i64 %rvp8089968)                                   ; call prim_cdr
  %arg8087602 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085886 = call i64 @prim_vector_45ref(i64 %AlL$lst, i64 %arg8087602)             ; call prim_vector_45ref
  %a8085887 = call i64 @prim_cdr(i64 %a8085886)                                      ; call prim_cdr
  %arg8087606 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086072 = call i64 @prim_vector_45set_33(i64 %AlL$lst, i64 %arg8087606, i64 %a8085887); call prim_vector_45set_33
  %cloptr8096108 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096110 = getelementptr inbounds i64, i64* %cloptr8096108, i64 1              ; &eptr8096110[1]
  %eptr8096111 = getelementptr inbounds i64, i64* %cloptr8096108, i64 2              ; &eptr8096111[2]
  %eptr8096112 = getelementptr inbounds i64, i64* %cloptr8096108, i64 3              ; &eptr8096112[3]
  %eptr8096113 = getelementptr inbounds i64, i64* %cloptr8096108, i64 4              ; &eptr8096113[4]
  store i64 %JaO$head, i64* %eptr8096110                                             ; *eptr8096110 = %JaO$head
  store i64 %cont8086065, i64* %eptr8096111                                          ; *eptr8096111 = %cont8086065
  store i64 %a08$cc, i64* %eptr8096112                                               ; *eptr8096112 = %a08$cc
  store i64 %Z5B$ccstack, i64* %eptr8096113                                          ; *eptr8096113 = %Z5B$ccstack
  %eptr8096109 = getelementptr inbounds i64, i64* %cloptr8096108, i64 0              ; &cloptr8096108[0]
  %f8096114 = ptrtoint void(i64,i64)* @lam8091678 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096114, i64* %eptr8096109                                             ; store fptr
  %arg8087610 = ptrtoint i64* %cloptr8096108 to i64                                  ; closure cast; i64* -> i64
  %arg8087609 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089967 = add i64 0, 0                                                         ; quoted ()
  %rva8089966 = call i64 @prim_cons(i64 %retprim8086072, i64 %rva8089967)            ; call prim_cons
  %rva8089965 = call i64 @prim_cons(i64 %arg8087609, i64 %rva8089966)                ; call prim_cons
  %cloptr8096115 = inttoptr i64 %arg8087610 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096116 = getelementptr inbounds i64, i64* %cloptr8096115, i64 0             ; &cloptr8096115[0]
  %f8096118 = load i64, i64* %i0ptr8096116, align 8                                  ; load; *i0ptr8096116
  %fptr8096117 = inttoptr i64 %f8096118 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096117(i64 %arg8087610, i64 %rva8089965)           ; tail call
  ret void
}


define void @lam8091678(i64 %env8091679, i64 %rvp8089964) {
  %envptr8096119 = inttoptr i64 %env8091679 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096120 = getelementptr inbounds i64, i64* %envptr8096119, i64 4            ; &envptr8096119[4]
  %Z5B$ccstack = load i64, i64* %envptr8096120, align 8                              ; load; *envptr8096120
  %envptr8096121 = inttoptr i64 %env8091679 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096122 = getelementptr inbounds i64, i64* %envptr8096121, i64 3            ; &envptr8096121[3]
  %a08$cc = load i64, i64* %envptr8096122, align 8                                   ; load; *envptr8096122
  %envptr8096123 = inttoptr i64 %env8091679 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096124 = getelementptr inbounds i64, i64* %envptr8096123, i64 2            ; &envptr8096123[2]
  %cont8086065 = load i64, i64* %envptr8096124, align 8                              ; load; *envptr8096124
  %envptr8096125 = inttoptr i64 %env8091679 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096126 = getelementptr inbounds i64, i64* %envptr8096125, i64 1            ; &envptr8096125[1]
  %JaO$head = load i64, i64* %envptr8096126, align 8                                 ; load; *envptr8096126
  %_958086069 = call i64 @prim_car(i64 %rvp8089964)                                  ; call prim_car
  %rvp8089963 = call i64 @prim_cdr(i64 %rvp8089964)                                  ; call prim_cdr
  %RzJ$_95t = call i64 @prim_car(i64 %rvp8089963)                                    ; call prim_car
  %na8089952 = call i64 @prim_cdr(i64 %rvp8089963)                                   ; call prim_cdr
  %arg8087611 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085888 = call i64 @prim_vector_45ref(i64 %Z5B$ccstack, i64 %arg8087611)         ; call prim_vector_45ref
  %a8085889 = call i64 @prim_cons(i64 %a08$cc, i64 %a8085888)                        ; call prim_cons
  %arg8087616 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8086071 = call i64 @prim_vector_45set_33(i64 %Z5B$ccstack, i64 %arg8087616, i64 %a8085889); call prim_vector_45set_33
  %cloptr8096127 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8096129 = getelementptr inbounds i64, i64* %cloptr8096127, i64 1              ; &eptr8096129[1]
  %eptr8096130 = getelementptr inbounds i64, i64* %cloptr8096127, i64 2              ; &eptr8096130[2]
  store i64 %JaO$head, i64* %eptr8096129                                             ; *eptr8096129 = %JaO$head
  store i64 %cont8086065, i64* %eptr8096130                                          ; *eptr8096130 = %cont8086065
  %eptr8096128 = getelementptr inbounds i64, i64* %cloptr8096127, i64 0              ; &cloptr8096127[0]
  %f8096131 = ptrtoint void(i64,i64)* @lam8091674 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096131, i64* %eptr8096128                                             ; store fptr
  %arg8087620 = ptrtoint i64* %cloptr8096127 to i64                                  ; closure cast; i64* -> i64
  %arg8087619 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089962 = add i64 0, 0                                                         ; quoted ()
  %rva8089961 = call i64 @prim_cons(i64 %retprim8086071, i64 %rva8089962)            ; call prim_cons
  %rva8089960 = call i64 @prim_cons(i64 %arg8087619, i64 %rva8089961)                ; call prim_cons
  %cloptr8096132 = inttoptr i64 %arg8087620 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096133 = getelementptr inbounds i64, i64* %cloptr8096132, i64 0             ; &cloptr8096132[0]
  %f8096135 = load i64, i64* %i0ptr8096133, align 8                                  ; load; *i0ptr8096133
  %fptr8096134 = inttoptr i64 %f8096135 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096134(i64 %arg8087620, i64 %rva8089960)           ; tail call
  ret void
}


define void @lam8091674(i64 %env8091675, i64 %rvp8089959) {
  %envptr8096136 = inttoptr i64 %env8091675 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096137 = getelementptr inbounds i64, i64* %envptr8096136, i64 2            ; &envptr8096136[2]
  %cont8086065 = load i64, i64* %envptr8096137, align 8                              ; load; *envptr8096137
  %envptr8096138 = inttoptr i64 %env8091675 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096139 = getelementptr inbounds i64, i64* %envptr8096138, i64 1            ; &envptr8096138[1]
  %JaO$head = load i64, i64* %envptr8096139, align 8                                 ; load; *envptr8096139
  %_958086070 = call i64 @prim_car(i64 %rvp8089959)                                  ; call prim_car
  %rvp8089958 = call i64 @prim_cdr(i64 %rvp8089959)                                  ; call prim_cdr
  %dHm$_95t = call i64 @prim_car(i64 %rvp8089958)                                    ; call prim_car
  %na8089954 = call i64 @prim_cdr(i64 %rvp8089958)                                   ; call prim_cdr
  %arg8087622 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089957 = add i64 0, 0                                                         ; quoted ()
  %rva8089956 = call i64 @prim_cons(i64 %JaO$head, i64 %rva8089957)                  ; call prim_cons
  %rva8089955 = call i64 @prim_cons(i64 %arg8087622, i64 %rva8089956)                ; call prim_cons
  %cloptr8096140 = inttoptr i64 %cont8086065 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096141 = getelementptr inbounds i64, i64* %cloptr8096140, i64 0             ; &cloptr8096140[0]
  %f8096143 = load i64, i64* %i0ptr8096141, align 8                                  ; load; *i0ptr8096141
  %fptr8096142 = inttoptr i64 %f8096143 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096142(i64 %cont8086065, i64 %rva8089955)          ; tail call
  ret void
}


define void @lam8091651(i64 %env8091652, i64 %rvp8090537) {
  %envptr8096144 = inttoptr i64 %env8091652 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096145 = getelementptr inbounds i64, i64* %envptr8096144, i64 2            ; &envptr8096144[2]
  %U6p$assert = load i64, i64* %envptr8096145, align 8                               ; load; *envptr8096145
  %envptr8096146 = inttoptr i64 %env8091652 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096147 = getelementptr inbounds i64, i64* %envptr8096146, i64 1            ; &envptr8096146[1]
  %I2S$amb = load i64, i64* %envptr8096147, align 8                                  ; load; *envptr8096147
  %_958086085 = call i64 @prim_car(i64 %rvp8090537)                                  ; call prim_car
  %rvp8090536 = call i64 @prim_cdr(i64 %rvp8090537)                                  ; call prim_cdr
  %prO$a = call i64 @prim_car(i64 %rvp8090536)                                       ; call prim_car
  %na8090266 = call i64 @prim_cdr(i64 %rvp8090536)                                   ; call prim_cdr
  %arg8088002 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085898 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8088002)             ; call prim_vector_45ref
  %a8085899 = call i64 @prim_procedure_63(i64 %a8085898)                             ; call prim_procedure_63
  %cmp8096148 = icmp eq i64 %a8085899, 15                                            ; false?
  br i1 %cmp8096148, label %else8096150, label %then8096149                          ; if

then8096149:
  %arg8088005 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085900 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8088005)             ; call prim_vector_45ref
  %cloptr8096151 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096152 = getelementptr inbounds i64, i64* %cloptr8096151, i64 0              ; &cloptr8096151[0]
  %f8096153 = ptrtoint void(i64,i64)* @lam8091549 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096153, i64* %eptr8096152                                             ; store fptr
  %arg8088008 = ptrtoint i64* %cloptr8096151 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096154 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096156 = getelementptr inbounds i64, i64* %cloptr8096154, i64 1              ; &eptr8096156[1]
  %eptr8096157 = getelementptr inbounds i64, i64* %cloptr8096154, i64 2              ; &eptr8096157[2]
  %eptr8096158 = getelementptr inbounds i64, i64* %cloptr8096154, i64 3              ; &eptr8096158[3]
  %eptr8096159 = getelementptr inbounds i64, i64* %cloptr8096154, i64 4              ; &eptr8096159[4]
  store i64 %I2S$amb, i64* %eptr8096156                                              ; *eptr8096156 = %I2S$amb
  store i64 %prO$a, i64* %eptr8096157                                                ; *eptr8096157 = %prO$a
  store i64 %a8085900, i64* %eptr8096158                                             ; *eptr8096158 = %a8085900
  store i64 %U6p$assert, i64* %eptr8096159                                           ; *eptr8096159 = %U6p$assert
  %eptr8096155 = getelementptr inbounds i64, i64* %cloptr8096154, i64 0              ; &cloptr8096154[0]
  %f8096160 = ptrtoint void(i64,i64)* @lam8091545 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096160, i64* %eptr8096155                                             ; store fptr
  %arg8088007 = ptrtoint i64* %cloptr8096154 to i64                                  ; closure cast; i64* -> i64
  %rva8090405 = add i64 0, 0                                                         ; quoted ()
  %rva8090404 = call i64 @prim_cons(i64 %arg8088007, i64 %rva8090405)                ; call prim_cons
  %cloptr8096161 = inttoptr i64 %arg8088008 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096162 = getelementptr inbounds i64, i64* %cloptr8096161, i64 0             ; &cloptr8096161[0]
  %f8096164 = load i64, i64* %i0ptr8096162, align 8                                  ; load; *i0ptr8096162
  %fptr8096163 = inttoptr i64 %f8096164 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096163(i64 %arg8088008, i64 %rva8090404)           ; tail call
  ret void

else8096150:
  %arg8088182 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096165, i32 0, i32 0)); quoted string
  %retprim8086101 = call i64 @prim_halt(i64 %arg8088182)                             ; call prim_halt
  %cloptr8096166 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096168 = getelementptr inbounds i64, i64* %cloptr8096166, i64 1              ; &eptr8096168[1]
  %eptr8096169 = getelementptr inbounds i64, i64* %cloptr8096166, i64 2              ; &eptr8096169[2]
  %eptr8096170 = getelementptr inbounds i64, i64* %cloptr8096166, i64 3              ; &eptr8096170[3]
  store i64 %I2S$amb, i64* %eptr8096168                                              ; *eptr8096168 = %I2S$amb
  store i64 %prO$a, i64* %eptr8096169                                                ; *eptr8096169 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096170                                           ; *eptr8096170 = %U6p$assert
  %eptr8096167 = getelementptr inbounds i64, i64* %cloptr8096166, i64 0              ; &cloptr8096166[0]
  %f8096171 = ptrtoint void(i64,i64)* @lam8091647 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096171, i64* %eptr8096167                                             ; store fptr
  %arg8088185 = ptrtoint i64* %cloptr8096166 to i64                                  ; closure cast; i64* -> i64
  %arg8088184 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090535 = add i64 0, 0                                                         ; quoted ()
  %rva8090534 = call i64 @prim_cons(i64 %retprim8086101, i64 %rva8090535)            ; call prim_cons
  %rva8090533 = call i64 @prim_cons(i64 %arg8088184, i64 %rva8090534)                ; call prim_cons
  %cloptr8096172 = inttoptr i64 %arg8088185 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096173 = getelementptr inbounds i64, i64* %cloptr8096172, i64 0             ; &cloptr8096172[0]
  %f8096175 = load i64, i64* %i0ptr8096173, align 8                                  ; load; *i0ptr8096173
  %fptr8096174 = inttoptr i64 %f8096175 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096174(i64 %arg8088185, i64 %rva8090533)           ; tail call
  ret void
}


define void @lam8091647(i64 %env8091648, i64 %rvp8090532) {
  %envptr8096176 = inttoptr i64 %env8091648 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096177 = getelementptr inbounds i64, i64* %envptr8096176, i64 3            ; &envptr8096176[3]
  %U6p$assert = load i64, i64* %envptr8096177, align 8                               ; load; *envptr8096177
  %envptr8096178 = inttoptr i64 %env8091648 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096179 = getelementptr inbounds i64, i64* %envptr8096178, i64 2            ; &envptr8096178[2]
  %prO$a = load i64, i64* %envptr8096179, align 8                                    ; load; *envptr8096179
  %envptr8096180 = inttoptr i64 %env8091648 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096181 = getelementptr inbounds i64, i64* %envptr8096180, i64 1            ; &envptr8096180[1]
  %I2S$amb = load i64, i64* %envptr8096181, align 8                                  ; load; *envptr8096181
  %_958086086 = call i64 @prim_car(i64 %rvp8090532)                                  ; call prim_car
  %rvp8090531 = call i64 @prim_cdr(i64 %rvp8090532)                                  ; call prim_cdr
  %xD5$b = call i64 @prim_car(i64 %rvp8090531)                                       ; call prim_car
  %na8090407 = call i64 @prim_cdr(i64 %rvp8090531)                                   ; call prim_cdr
  %arg8088186 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085907 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8088186)             ; call prim_vector_45ref
  %a8085908 = call i64 @prim_procedure_63(i64 %a8085907)                             ; call prim_procedure_63
  %cmp8096182 = icmp eq i64 %a8085908, 15                                            ; false?
  br i1 %cmp8096182, label %else8096184, label %then8096183                          ; if

then8096183:
  %arg8088189 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085909 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8088189)             ; call prim_vector_45ref
  %cloptr8096185 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096186 = getelementptr inbounds i64, i64* %cloptr8096185, i64 0              ; &cloptr8096185[0]
  %f8096187 = ptrtoint void(i64,i64)* @lam8091602 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096187, i64* %eptr8096186                                             ; store fptr
  %arg8088192 = ptrtoint i64* %cloptr8096185 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096188 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096190 = getelementptr inbounds i64, i64* %cloptr8096188, i64 1              ; &eptr8096190[1]
  %eptr8096191 = getelementptr inbounds i64, i64* %cloptr8096188, i64 2              ; &eptr8096191[2]
  %eptr8096192 = getelementptr inbounds i64, i64* %cloptr8096188, i64 3              ; &eptr8096192[3]
  %eptr8096193 = getelementptr inbounds i64, i64* %cloptr8096188, i64 4              ; &eptr8096193[4]
  store i64 %xD5$b, i64* %eptr8096190                                                ; *eptr8096190 = %xD5$b
  store i64 %prO$a, i64* %eptr8096191                                                ; *eptr8096191 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096192                                           ; *eptr8096192 = %U6p$assert
  store i64 %a8085909, i64* %eptr8096193                                             ; *eptr8096193 = %a8085909
  %eptr8096189 = getelementptr inbounds i64, i64* %cloptr8096188, i64 0              ; &cloptr8096188[0]
  %f8096194 = ptrtoint void(i64,i64)* @lam8091598 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096194, i64* %eptr8096189                                             ; store fptr
  %arg8088191 = ptrtoint i64* %cloptr8096188 to i64                                  ; closure cast; i64* -> i64
  %rva8090473 = add i64 0, 0                                                         ; quoted ()
  %rva8090472 = call i64 @prim_cons(i64 %arg8088191, i64 %rva8090473)                ; call prim_cons
  %cloptr8096195 = inttoptr i64 %arg8088192 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096196 = getelementptr inbounds i64, i64* %cloptr8096195, i64 0             ; &cloptr8096195[0]
  %f8096198 = load i64, i64* %i0ptr8096196, align 8                                  ; load; *i0ptr8096196
  %fptr8096197 = inttoptr i64 %f8096198 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096197(i64 %arg8088192, i64 %rva8090472)           ; tail call
  ret void

else8096184:
  %arg8088273 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096199, i32 0, i32 0)); quoted string
  %retprim8086097 = call i64 @prim_halt(i64 %arg8088273)                             ; call prim_halt
  %cloptr8096200 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096202 = getelementptr inbounds i64, i64* %cloptr8096200, i64 1              ; &eptr8096202[1]
  %eptr8096203 = getelementptr inbounds i64, i64* %cloptr8096200, i64 2              ; &eptr8096203[2]
  %eptr8096204 = getelementptr inbounds i64, i64* %cloptr8096200, i64 3              ; &eptr8096204[3]
  store i64 %xD5$b, i64* %eptr8096202                                                ; *eptr8096202 = %xD5$b
  store i64 %prO$a, i64* %eptr8096203                                                ; *eptr8096203 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096204                                           ; *eptr8096204 = %U6p$assert
  %eptr8096201 = getelementptr inbounds i64, i64* %cloptr8096200, i64 0              ; &cloptr8096200[0]
  %f8096205 = ptrtoint void(i64,i64)* @lam8091643 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096205, i64* %eptr8096201                                             ; store fptr
  %arg8088276 = ptrtoint i64* %cloptr8096200 to i64                                  ; closure cast; i64* -> i64
  %arg8088275 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090530 = add i64 0, 0                                                         ; quoted ()
  %rva8090529 = call i64 @prim_cons(i64 %retprim8086097, i64 %rva8090530)            ; call prim_cons
  %rva8090528 = call i64 @prim_cons(i64 %arg8088275, i64 %rva8090529)                ; call prim_cons
  %cloptr8096206 = inttoptr i64 %arg8088276 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096207 = getelementptr inbounds i64, i64* %cloptr8096206, i64 0             ; &cloptr8096206[0]
  %f8096209 = load i64, i64* %i0ptr8096207, align 8                                  ; load; *i0ptr8096207
  %fptr8096208 = inttoptr i64 %f8096209 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096208(i64 %arg8088276, i64 %rva8090528)           ; tail call
  ret void
}


define void @lam8091643(i64 %env8091644, i64 %rvp8090527) {
  %envptr8096210 = inttoptr i64 %env8091644 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096211 = getelementptr inbounds i64, i64* %envptr8096210, i64 3            ; &envptr8096210[3]
  %U6p$assert = load i64, i64* %envptr8096211, align 8                               ; load; *envptr8096211
  %envptr8096212 = inttoptr i64 %env8091644 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096213 = getelementptr inbounds i64, i64* %envptr8096212, i64 2            ; &envptr8096212[2]
  %prO$a = load i64, i64* %envptr8096213, align 8                                    ; load; *envptr8096213
  %envptr8096214 = inttoptr i64 %env8091644 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096215 = getelementptr inbounds i64, i64* %envptr8096214, i64 1            ; &envptr8096214[1]
  %xD5$b = load i64, i64* %envptr8096215, align 8                                    ; load; *envptr8096215
  %_958086087 = call i64 @prim_car(i64 %rvp8090527)                                  ; call prim_car
  %rvp8090526 = call i64 @prim_cdr(i64 %rvp8090527)                                  ; call prim_cdr
  %UXs$c = call i64 @prim_car(i64 %rvp8090526)                                       ; call prim_car
  %na8090475 = call i64 @prim_cdr(i64 %rvp8090526)                                   ; call prim_cdr
  %arg8088277 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085915 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8088277)          ; call prim_vector_45ref
  %a8085916 = call i64 @prim_procedure_63(i64 %a8085915)                             ; call prim_procedure_63
  %cmp8096216 = icmp eq i64 %a8085916, 15                                            ; false?
  br i1 %cmp8096216, label %else8096218, label %then8096217                          ; if

then8096217:
  %arg8088280 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085917 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8088280)          ; call prim_vector_45ref
  %a8085918 = call i64 @prim__42(i64 %prO$a, i64 %prO$a)                             ; call prim__42
  %a8085919 = call i64 @prim__42(i64 %xD5$b, i64 %xD5$b)                             ; call prim__42
  %a8085920 = call i64 @prim__43(i64 %a8085918, i64 %a8085919)                       ; call prim__43
  %a8085921 = call i64 @prim__42(i64 %UXs$c, i64 %UXs$c)                             ; call prim__42
  %a8085922 = call i64 @prim__61(i64 %a8085920, i64 %a8085921)                       ; call prim__61
  %cloptr8096219 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096221 = getelementptr inbounds i64, i64* %cloptr8096219, i64 1              ; &eptr8096221[1]
  %eptr8096222 = getelementptr inbounds i64, i64* %cloptr8096219, i64 2              ; &eptr8096222[2]
  %eptr8096223 = getelementptr inbounds i64, i64* %cloptr8096219, i64 3              ; &eptr8096223[3]
  store i64 %xD5$b, i64* %eptr8096221                                                ; *eptr8096221 = %xD5$b
  store i64 %prO$a, i64* %eptr8096222                                                ; *eptr8096222 = %prO$a
  store i64 %UXs$c, i64* %eptr8096223                                                ; *eptr8096223 = %UXs$c
  %eptr8096220 = getelementptr inbounds i64, i64* %cloptr8096219, i64 0              ; &cloptr8096219[0]
  %f8096224 = ptrtoint void(i64,i64)* @lam8091621 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096224, i64* %eptr8096220                                             ; store fptr
  %arg8088293 = ptrtoint i64* %cloptr8096219 to i64                                  ; closure cast; i64* -> i64
  %rva8090500 = add i64 0, 0                                                         ; quoted ()
  %rva8090499 = call i64 @prim_cons(i64 %a8085922, i64 %rva8090500)                  ; call prim_cons
  %rva8090498 = call i64 @prim_cons(i64 %arg8088293, i64 %rva8090499)                ; call prim_cons
  %cloptr8096225 = inttoptr i64 %a8085917 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096226 = getelementptr inbounds i64, i64* %cloptr8096225, i64 0             ; &cloptr8096225[0]
  %f8096228 = load i64, i64* %i0ptr8096226, align 8                                  ; load; *i0ptr8096226
  %fptr8096227 = inttoptr i64 %f8096228 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096227(i64 %a8085917, i64 %rva8090498)             ; tail call
  ret void

else8096218:
  %arg8088316 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096229, i32 0, i32 0)); quoted string
  %retprim8086093 = call i64 @prim_halt(i64 %arg8088316)                             ; call prim_halt
  %cloptr8096230 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096232 = getelementptr inbounds i64, i64* %cloptr8096230, i64 1              ; &eptr8096232[1]
  %eptr8096233 = getelementptr inbounds i64, i64* %cloptr8096230, i64 2              ; &eptr8096233[2]
  %eptr8096234 = getelementptr inbounds i64, i64* %cloptr8096230, i64 3              ; &eptr8096234[3]
  store i64 %xD5$b, i64* %eptr8096232                                                ; *eptr8096232 = %xD5$b
  store i64 %prO$a, i64* %eptr8096233                                                ; *eptr8096233 = %prO$a
  store i64 %UXs$c, i64* %eptr8096234                                                ; *eptr8096234 = %UXs$c
  %eptr8096231 = getelementptr inbounds i64, i64* %cloptr8096230, i64 0              ; &cloptr8096230[0]
  %f8096235 = ptrtoint void(i64,i64)* @lam8091639 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096235, i64* %eptr8096231                                             ; store fptr
  %arg8088319 = ptrtoint i64* %cloptr8096230 to i64                                  ; closure cast; i64* -> i64
  %arg8088318 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090525 = add i64 0, 0                                                         ; quoted ()
  %rva8090524 = call i64 @prim_cons(i64 %retprim8086093, i64 %rva8090525)            ; call prim_cons
  %rva8090523 = call i64 @prim_cons(i64 %arg8088318, i64 %rva8090524)                ; call prim_cons
  %cloptr8096236 = inttoptr i64 %arg8088319 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096237 = getelementptr inbounds i64, i64* %cloptr8096236, i64 0             ; &cloptr8096236[0]
  %f8096239 = load i64, i64* %i0ptr8096237, align 8                                  ; load; *i0ptr8096237
  %fptr8096238 = inttoptr i64 %f8096239 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096238(i64 %arg8088319, i64 %rva8090523)           ; tail call
  ret void
}


define void @lam8091639(i64 %env8091640, i64 %rvp8090522) {
  %envptr8096240 = inttoptr i64 %env8091640 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096241 = getelementptr inbounds i64, i64* %envptr8096240, i64 3            ; &envptr8096240[3]
  %UXs$c = load i64, i64* %envptr8096241, align 8                                    ; load; *envptr8096241
  %envptr8096242 = inttoptr i64 %env8091640 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096243 = getelementptr inbounds i64, i64* %envptr8096242, i64 2            ; &envptr8096242[2]
  %prO$a = load i64, i64* %envptr8096243, align 8                                    ; load; *envptr8096243
  %envptr8096244 = inttoptr i64 %env8091640 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096245 = getelementptr inbounds i64, i64* %envptr8096244, i64 1            ; &envptr8096244[1]
  %xD5$b = load i64, i64* %envptr8096245, align 8                                    ; load; *envptr8096245
  %_958086088 = call i64 @prim_car(i64 %rvp8090522)                                  ; call prim_car
  %rvp8090521 = call i64 @prim_cdr(i64 %rvp8090522)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090521)                                    ; call prim_car
  %na8090502 = call i64 @prim_cdr(i64 %rvp8090521)                                   ; call prim_cdr
  %cloptr8096246 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096247 = getelementptr inbounds i64, i64* %cloptr8096246, i64 0              ; &cloptr8096246[0]
  %f8096248 = ptrtoint void(i64,i64)* @lam8091637 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096248, i64* %eptr8096247                                             ; store fptr
  %arg8088321 = ptrtoint i64* %cloptr8096246 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096249 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096251 = getelementptr inbounds i64, i64* %cloptr8096249, i64 1              ; &eptr8096251[1]
  %eptr8096252 = getelementptr inbounds i64, i64* %cloptr8096249, i64 2              ; &eptr8096252[2]
  %eptr8096253 = getelementptr inbounds i64, i64* %cloptr8096249, i64 3              ; &eptr8096253[3]
  store i64 %xD5$b, i64* %eptr8096251                                                ; *eptr8096251 = %xD5$b
  store i64 %prO$a, i64* %eptr8096252                                                ; *eptr8096252 = %prO$a
  store i64 %UXs$c, i64* %eptr8096253                                                ; *eptr8096253 = %UXs$c
  %eptr8096250 = getelementptr inbounds i64, i64* %cloptr8096249, i64 0              ; &cloptr8096249[0]
  %f8096254 = ptrtoint void(i64,i64)* @lam8091633 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096254, i64* %eptr8096250                                             ; store fptr
  %arg8088320 = ptrtoint i64* %cloptr8096249 to i64                                  ; closure cast; i64* -> i64
  %rva8090520 = add i64 0, 0                                                         ; quoted ()
  %rva8090519 = call i64 @prim_cons(i64 %arg8088320, i64 %rva8090520)                ; call prim_cons
  %cloptr8096255 = inttoptr i64 %arg8088321 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096256 = getelementptr inbounds i64, i64* %cloptr8096255, i64 0             ; &cloptr8096255[0]
  %f8096258 = load i64, i64* %i0ptr8096256, align 8                                  ; load; *i0ptr8096256
  %fptr8096257 = inttoptr i64 %f8096258 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096257(i64 %arg8088321, i64 %rva8090519)           ; tail call
  ret void
}


define void @lam8091637(i64 %env8091638, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8088325 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090505 = add i64 0, 0                                                         ; quoted ()
  %rva8090504 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090505)                   ; call prim_cons
  %rva8090503 = call i64 @prim_cons(i64 %arg8088325, i64 %rva8090504)                ; call prim_cons
  %cloptr8096259 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096260 = getelementptr inbounds i64, i64* %cloptr8096259, i64 0             ; &cloptr8096259[0]
  %f8096262 = load i64, i64* %i0ptr8096260, align 8                                  ; load; *i0ptr8096260
  %fptr8096261 = inttoptr i64 %f8096262 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096261(i64 %cont8086091, i64 %rva8090503)          ; tail call
  ret void
}


define void @lam8091633(i64 %env8091634, i64 %rvp8090518) {
  %envptr8096263 = inttoptr i64 %env8091634 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096264 = getelementptr inbounds i64, i64* %envptr8096263, i64 3            ; &envptr8096263[3]
  %UXs$c = load i64, i64* %envptr8096264, align 8                                    ; load; *envptr8096264
  %envptr8096265 = inttoptr i64 %env8091634 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096266 = getelementptr inbounds i64, i64* %envptr8096265, i64 2            ; &envptr8096265[2]
  %prO$a = load i64, i64* %envptr8096266, align 8                                    ; load; *envptr8096266
  %envptr8096267 = inttoptr i64 %env8091634 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096268 = getelementptr inbounds i64, i64* %envptr8096267, i64 1            ; &envptr8096267[1]
  %xD5$b = load i64, i64* %envptr8096268, align 8                                    ; load; *envptr8096268
  %_958086089 = call i64 @prim_car(i64 %rvp8090518)                                  ; call prim_car
  %rvp8090517 = call i64 @prim_cdr(i64 %rvp8090518)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090517)                                    ; call prim_car
  %na8090507 = call i64 @prim_cdr(i64 %rvp8090517)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8088334 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096269, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8088334, i64 %a8085926)              ; call prim_cons
  %cloptr8096270 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096271 = getelementptr inbounds i64, i64* %cloptr8096270, i64 0              ; &cloptr8096270[0]
  %f8096272 = ptrtoint void(i64,i64)* @lam8091630 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096272, i64* %eptr8096271                                             ; store fptr
  %arg8088337 = ptrtoint i64* %cloptr8096270 to i64                                  ; closure cast; i64* -> i64
  %arg8088336 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090516 = add i64 0, 0                                                         ; quoted ()
  %rva8090515 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090516)            ; call prim_cons
  %rva8090514 = call i64 @prim_cons(i64 %arg8088336, i64 %rva8090515)                ; call prim_cons
  %cloptr8096273 = inttoptr i64 %arg8088337 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096274 = getelementptr inbounds i64, i64* %cloptr8096273, i64 0             ; &cloptr8096273[0]
  %f8096276 = load i64, i64* %i0ptr8096274, align 8                                  ; load; *i0ptr8096274
  %fptr8096275 = inttoptr i64 %f8096276 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096275(i64 %arg8088337, i64 %rva8090514)           ; tail call
  ret void
}


define void @lam8091630(i64 %env8091631, i64 %rvp8090513) {
  %_950 = call i64 @prim_car(i64 %rvp8090513)                                        ; call prim_car
  %rvp8090512 = call i64 @prim_cdr(i64 %rvp8090513)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090512)                                           ; call prim_car
  %na8090509 = call i64 @prim_cdr(i64 %rvp8090512)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090511 = add i64 0, 0                                                         ; quoted ()
  %rva8090510 = call i64 @prim_cons(i64 %_951, i64 %rva8090511)                      ; call prim_cons
  %cloptr8096277 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096278 = getelementptr inbounds i64, i64* %cloptr8096277, i64 0             ; &cloptr8096277[0]
  %f8096280 = load i64, i64* %i0ptr8096278, align 8                                  ; load; *i0ptr8096278
  %fptr8096279 = inttoptr i64 %f8096280 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096279(i64 %_951, i64 %rva8090510)                 ; tail call
  ret void
}


define void @lam8091621(i64 %env8091622, i64 %rvp8090497) {
  %envptr8096281 = inttoptr i64 %env8091622 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096282 = getelementptr inbounds i64, i64* %envptr8096281, i64 3            ; &envptr8096281[3]
  %UXs$c = load i64, i64* %envptr8096282, align 8                                    ; load; *envptr8096282
  %envptr8096283 = inttoptr i64 %env8091622 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096284 = getelementptr inbounds i64, i64* %envptr8096283, i64 2            ; &envptr8096283[2]
  %prO$a = load i64, i64* %envptr8096284, align 8                                    ; load; *envptr8096284
  %envptr8096285 = inttoptr i64 %env8091622 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096286 = getelementptr inbounds i64, i64* %envptr8096285, i64 1            ; &envptr8096285[1]
  %xD5$b = load i64, i64* %envptr8096286, align 8                                    ; load; *envptr8096286
  %_958086088 = call i64 @prim_car(i64 %rvp8090497)                                  ; call prim_car
  %rvp8090496 = call i64 @prim_cdr(i64 %rvp8090497)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090496)                                    ; call prim_car
  %na8090477 = call i64 @prim_cdr(i64 %rvp8090496)                                   ; call prim_cdr
  %cloptr8096287 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096288 = getelementptr inbounds i64, i64* %cloptr8096287, i64 0              ; &cloptr8096287[0]
  %f8096289 = ptrtoint void(i64,i64)* @lam8091619 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096289, i64* %eptr8096288                                             ; store fptr
  %arg8088296 = ptrtoint i64* %cloptr8096287 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096290 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096292 = getelementptr inbounds i64, i64* %cloptr8096290, i64 1              ; &eptr8096292[1]
  %eptr8096293 = getelementptr inbounds i64, i64* %cloptr8096290, i64 2              ; &eptr8096293[2]
  %eptr8096294 = getelementptr inbounds i64, i64* %cloptr8096290, i64 3              ; &eptr8096294[3]
  store i64 %xD5$b, i64* %eptr8096292                                                ; *eptr8096292 = %xD5$b
  store i64 %prO$a, i64* %eptr8096293                                                ; *eptr8096293 = %prO$a
  store i64 %UXs$c, i64* %eptr8096294                                                ; *eptr8096294 = %UXs$c
  %eptr8096291 = getelementptr inbounds i64, i64* %cloptr8096290, i64 0              ; &cloptr8096290[0]
  %f8096295 = ptrtoint void(i64,i64)* @lam8091615 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096295, i64* %eptr8096291                                             ; store fptr
  %arg8088295 = ptrtoint i64* %cloptr8096290 to i64                                  ; closure cast; i64* -> i64
  %rva8090495 = add i64 0, 0                                                         ; quoted ()
  %rva8090494 = call i64 @prim_cons(i64 %arg8088295, i64 %rva8090495)                ; call prim_cons
  %cloptr8096296 = inttoptr i64 %arg8088296 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096297 = getelementptr inbounds i64, i64* %cloptr8096296, i64 0             ; &cloptr8096296[0]
  %f8096299 = load i64, i64* %i0ptr8096297, align 8                                  ; load; *i0ptr8096297
  %fptr8096298 = inttoptr i64 %f8096299 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096298(i64 %arg8088296, i64 %rva8090494)           ; tail call
  ret void
}


define void @lam8091619(i64 %env8091620, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8088300 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090480 = add i64 0, 0                                                         ; quoted ()
  %rva8090479 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090480)                   ; call prim_cons
  %rva8090478 = call i64 @prim_cons(i64 %arg8088300, i64 %rva8090479)                ; call prim_cons
  %cloptr8096300 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096301 = getelementptr inbounds i64, i64* %cloptr8096300, i64 0             ; &cloptr8096300[0]
  %f8096303 = load i64, i64* %i0ptr8096301, align 8                                  ; load; *i0ptr8096301
  %fptr8096302 = inttoptr i64 %f8096303 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096302(i64 %cont8086091, i64 %rva8090478)          ; tail call
  ret void
}


define void @lam8091615(i64 %env8091616, i64 %rvp8090493) {
  %envptr8096304 = inttoptr i64 %env8091616 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096305 = getelementptr inbounds i64, i64* %envptr8096304, i64 3            ; &envptr8096304[3]
  %UXs$c = load i64, i64* %envptr8096305, align 8                                    ; load; *envptr8096305
  %envptr8096306 = inttoptr i64 %env8091616 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096307 = getelementptr inbounds i64, i64* %envptr8096306, i64 2            ; &envptr8096306[2]
  %prO$a = load i64, i64* %envptr8096307, align 8                                    ; load; *envptr8096307
  %envptr8096308 = inttoptr i64 %env8091616 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096309 = getelementptr inbounds i64, i64* %envptr8096308, i64 1            ; &envptr8096308[1]
  %xD5$b = load i64, i64* %envptr8096309, align 8                                    ; load; *envptr8096309
  %_958086089 = call i64 @prim_car(i64 %rvp8090493)                                  ; call prim_car
  %rvp8090492 = call i64 @prim_cdr(i64 %rvp8090493)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090492)                                    ; call prim_car
  %na8090482 = call i64 @prim_cdr(i64 %rvp8090492)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8088309 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096310, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8088309, i64 %a8085926)              ; call prim_cons
  %cloptr8096311 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096312 = getelementptr inbounds i64, i64* %cloptr8096311, i64 0              ; &cloptr8096311[0]
  %f8096313 = ptrtoint void(i64,i64)* @lam8091612 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096313, i64* %eptr8096312                                             ; store fptr
  %arg8088312 = ptrtoint i64* %cloptr8096311 to i64                                  ; closure cast; i64* -> i64
  %arg8088311 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090491 = add i64 0, 0                                                         ; quoted ()
  %rva8090490 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090491)            ; call prim_cons
  %rva8090489 = call i64 @prim_cons(i64 %arg8088311, i64 %rva8090490)                ; call prim_cons
  %cloptr8096314 = inttoptr i64 %arg8088312 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096315 = getelementptr inbounds i64, i64* %cloptr8096314, i64 0             ; &cloptr8096314[0]
  %f8096317 = load i64, i64* %i0ptr8096315, align 8                                  ; load; *i0ptr8096315
  %fptr8096316 = inttoptr i64 %f8096317 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096316(i64 %arg8088312, i64 %rva8090489)           ; tail call
  ret void
}


define void @lam8091612(i64 %env8091613, i64 %rvp8090488) {
  %_950 = call i64 @prim_car(i64 %rvp8090488)                                        ; call prim_car
  %rvp8090487 = call i64 @prim_cdr(i64 %rvp8090488)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090487)                                           ; call prim_car
  %na8090484 = call i64 @prim_cdr(i64 %rvp8090487)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090486 = add i64 0, 0                                                         ; quoted ()
  %rva8090485 = call i64 @prim_cons(i64 %_951, i64 %rva8090486)                      ; call prim_cons
  %cloptr8096318 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096319 = getelementptr inbounds i64, i64* %cloptr8096318, i64 0             ; &cloptr8096318[0]
  %f8096321 = load i64, i64* %i0ptr8096319, align 8                                  ; load; *i0ptr8096319
  %fptr8096320 = inttoptr i64 %f8096321 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096320(i64 %_951, i64 %rva8090485)                 ; tail call
  ret void
}


define void @lam8091602(i64 %env8091603, i64 %N3p$lst8086096) {
  %cont8086095 = call i64 @prim_car(i64 %N3p$lst8086096)                             ; call prim_car
  %N3p$lst = call i64 @prim_cdr(i64 %N3p$lst8086096)                                 ; call prim_cdr
  %arg8088196 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090410 = add i64 0, 0                                                         ; quoted ()
  %rva8090409 = call i64 @prim_cons(i64 %N3p$lst, i64 %rva8090410)                   ; call prim_cons
  %rva8090408 = call i64 @prim_cons(i64 %arg8088196, i64 %rva8090409)                ; call prim_cons
  %cloptr8096322 = inttoptr i64 %cont8086095 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096323 = getelementptr inbounds i64, i64* %cloptr8096322, i64 0             ; &cloptr8096322[0]
  %f8096325 = load i64, i64* %i0ptr8096323, align 8                                  ; load; *i0ptr8096323
  %fptr8096324 = inttoptr i64 %f8096325 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096324(i64 %cont8086095, i64 %rva8090408)          ; tail call
  ret void
}


define void @lam8091598(i64 %env8091599, i64 %rvp8090471) {
  %envptr8096326 = inttoptr i64 %env8091599 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096327 = getelementptr inbounds i64, i64* %envptr8096326, i64 4            ; &envptr8096326[4]
  %a8085909 = load i64, i64* %envptr8096327, align 8                                 ; load; *envptr8096327
  %envptr8096328 = inttoptr i64 %env8091599 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096329 = getelementptr inbounds i64, i64* %envptr8096328, i64 3            ; &envptr8096328[3]
  %U6p$assert = load i64, i64* %envptr8096329, align 8                               ; load; *envptr8096329
  %envptr8096330 = inttoptr i64 %env8091599 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096331 = getelementptr inbounds i64, i64* %envptr8096330, i64 2            ; &envptr8096330[2]
  %prO$a = load i64, i64* %envptr8096331, align 8                                    ; load; *envptr8096331
  %envptr8096332 = inttoptr i64 %env8091599 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096333 = getelementptr inbounds i64, i64* %envptr8096332, i64 1            ; &envptr8096332[1]
  %xD5$b = load i64, i64* %envptr8096333, align 8                                    ; load; *envptr8096333
  %_958086094 = call i64 @prim_car(i64 %rvp8090471)                                  ; call prim_car
  %rvp8090470 = call i64 @prim_cdr(i64 %rvp8090471)                                  ; call prim_cdr
  %a8085910 = call i64 @prim_car(i64 %rvp8090470)                                    ; call prim_car
  %na8090412 = call i64 @prim_cdr(i64 %rvp8090470)                                   ; call prim_cdr
  %arg8088199 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8085911 = call i64 @prim_cons(i64 %arg8088199, i64 %a8085910)                    ; call prim_cons
  %arg8088201 = call i64 @const_init_int(i64 4)                                      ; quoted int
  %a8085912 = call i64 @prim_cons(i64 %arg8088201, i64 %a8085911)                    ; call prim_cons
  %arg8088203 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %a8085913 = call i64 @prim_cons(i64 %arg8088203, i64 %a8085912)                    ; call prim_cons
  %arg8088205 = call i64 @const_init_int(i64 2)                                      ; quoted int
  %a8085914 = call i64 @prim_cons(i64 %arg8088205, i64 %a8085913)                    ; call prim_cons
  %cloptr8096334 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096336 = getelementptr inbounds i64, i64* %cloptr8096334, i64 1              ; &eptr8096336[1]
  %eptr8096337 = getelementptr inbounds i64, i64* %cloptr8096334, i64 2              ; &eptr8096337[2]
  %eptr8096338 = getelementptr inbounds i64, i64* %cloptr8096334, i64 3              ; &eptr8096338[3]
  store i64 %xD5$b, i64* %eptr8096336                                                ; *eptr8096336 = %xD5$b
  store i64 %prO$a, i64* %eptr8096337                                                ; *eptr8096337 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096338                                           ; *eptr8096338 = %U6p$assert
  %eptr8096335 = getelementptr inbounds i64, i64* %cloptr8096334, i64 0              ; &cloptr8096334[0]
  %f8096339 = ptrtoint void(i64,i64)* @lam8091592 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096339, i64* %eptr8096335                                             ; store fptr
  %arg8088207 = ptrtoint i64* %cloptr8096334 to i64                                  ; closure cast; i64* -> i64
  %rva8090469 = add i64 0, 0                                                         ; quoted ()
  %rva8090468 = call i64 @prim_cons(i64 %a8085914, i64 %rva8090469)                  ; call prim_cons
  %rva8090467 = call i64 @prim_cons(i64 %arg8088207, i64 %rva8090468)                ; call prim_cons
  %cloptr8096340 = inttoptr i64 %a8085909 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096341 = getelementptr inbounds i64, i64* %cloptr8096340, i64 0             ; &cloptr8096340[0]
  %f8096343 = load i64, i64* %i0ptr8096341, align 8                                  ; load; *i0ptr8096341
  %fptr8096342 = inttoptr i64 %f8096343 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096342(i64 %a8085909, i64 %rva8090467)             ; tail call
  ret void
}


define void @lam8091592(i64 %env8091593, i64 %rvp8090466) {
  %envptr8096344 = inttoptr i64 %env8091593 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096345 = getelementptr inbounds i64, i64* %envptr8096344, i64 3            ; &envptr8096344[3]
  %U6p$assert = load i64, i64* %envptr8096345, align 8                               ; load; *envptr8096345
  %envptr8096346 = inttoptr i64 %env8091593 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096347 = getelementptr inbounds i64, i64* %envptr8096346, i64 2            ; &envptr8096346[2]
  %prO$a = load i64, i64* %envptr8096347, align 8                                    ; load; *envptr8096347
  %envptr8096348 = inttoptr i64 %env8091593 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096349 = getelementptr inbounds i64, i64* %envptr8096348, i64 1            ; &envptr8096348[1]
  %xD5$b = load i64, i64* %envptr8096349, align 8                                    ; load; *envptr8096349
  %_958086087 = call i64 @prim_car(i64 %rvp8090466)                                  ; call prim_car
  %rvp8090465 = call i64 @prim_cdr(i64 %rvp8090466)                                  ; call prim_cdr
  %UXs$c = call i64 @prim_car(i64 %rvp8090465)                                       ; call prim_car
  %na8090414 = call i64 @prim_cdr(i64 %rvp8090465)                                   ; call prim_cdr
  %arg8088209 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085915 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8088209)          ; call prim_vector_45ref
  %a8085916 = call i64 @prim_procedure_63(i64 %a8085915)                             ; call prim_procedure_63
  %cmp8096350 = icmp eq i64 %a8085916, 15                                            ; false?
  br i1 %cmp8096350, label %else8096352, label %then8096351                          ; if

then8096351:
  %arg8088212 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085917 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8088212)          ; call prim_vector_45ref
  %a8085918 = call i64 @prim__42(i64 %prO$a, i64 %prO$a)                             ; call prim__42
  %a8085919 = call i64 @prim__42(i64 %xD5$b, i64 %xD5$b)                             ; call prim__42
  %a8085920 = call i64 @prim__43(i64 %a8085918, i64 %a8085919)                       ; call prim__43
  %a8085921 = call i64 @prim__42(i64 %UXs$c, i64 %UXs$c)                             ; call prim__42
  %a8085922 = call i64 @prim__61(i64 %a8085920, i64 %a8085921)                       ; call prim__61
  %cloptr8096353 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096355 = getelementptr inbounds i64, i64* %cloptr8096353, i64 1              ; &eptr8096355[1]
  %eptr8096356 = getelementptr inbounds i64, i64* %cloptr8096353, i64 2              ; &eptr8096356[2]
  %eptr8096357 = getelementptr inbounds i64, i64* %cloptr8096353, i64 3              ; &eptr8096357[3]
  store i64 %xD5$b, i64* %eptr8096355                                                ; *eptr8096355 = %xD5$b
  store i64 %prO$a, i64* %eptr8096356                                                ; *eptr8096356 = %prO$a
  store i64 %UXs$c, i64* %eptr8096357                                                ; *eptr8096357 = %UXs$c
  %eptr8096354 = getelementptr inbounds i64, i64* %cloptr8096353, i64 0              ; &cloptr8096353[0]
  %f8096358 = ptrtoint void(i64,i64)* @lam8091570 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096358, i64* %eptr8096354                                             ; store fptr
  %arg8088225 = ptrtoint i64* %cloptr8096353 to i64                                  ; closure cast; i64* -> i64
  %rva8090439 = add i64 0, 0                                                         ; quoted ()
  %rva8090438 = call i64 @prim_cons(i64 %a8085922, i64 %rva8090439)                  ; call prim_cons
  %rva8090437 = call i64 @prim_cons(i64 %arg8088225, i64 %rva8090438)                ; call prim_cons
  %cloptr8096359 = inttoptr i64 %a8085917 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096360 = getelementptr inbounds i64, i64* %cloptr8096359, i64 0             ; &cloptr8096359[0]
  %f8096362 = load i64, i64* %i0ptr8096360, align 8                                  ; load; *i0ptr8096360
  %fptr8096361 = inttoptr i64 %f8096362 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096361(i64 %a8085917, i64 %rva8090437)             ; tail call
  ret void

else8096352:
  %arg8088248 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096363, i32 0, i32 0)); quoted string
  %retprim8086093 = call i64 @prim_halt(i64 %arg8088248)                             ; call prim_halt
  %cloptr8096364 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096366 = getelementptr inbounds i64, i64* %cloptr8096364, i64 1              ; &eptr8096366[1]
  %eptr8096367 = getelementptr inbounds i64, i64* %cloptr8096364, i64 2              ; &eptr8096367[2]
  %eptr8096368 = getelementptr inbounds i64, i64* %cloptr8096364, i64 3              ; &eptr8096368[3]
  store i64 %xD5$b, i64* %eptr8096366                                                ; *eptr8096366 = %xD5$b
  store i64 %prO$a, i64* %eptr8096367                                                ; *eptr8096367 = %prO$a
  store i64 %UXs$c, i64* %eptr8096368                                                ; *eptr8096368 = %UXs$c
  %eptr8096365 = getelementptr inbounds i64, i64* %cloptr8096364, i64 0              ; &cloptr8096364[0]
  %f8096369 = ptrtoint void(i64,i64)* @lam8091588 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096369, i64* %eptr8096365                                             ; store fptr
  %arg8088251 = ptrtoint i64* %cloptr8096364 to i64                                  ; closure cast; i64* -> i64
  %arg8088250 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090464 = add i64 0, 0                                                         ; quoted ()
  %rva8090463 = call i64 @prim_cons(i64 %retprim8086093, i64 %rva8090464)            ; call prim_cons
  %rva8090462 = call i64 @prim_cons(i64 %arg8088250, i64 %rva8090463)                ; call prim_cons
  %cloptr8096370 = inttoptr i64 %arg8088251 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096371 = getelementptr inbounds i64, i64* %cloptr8096370, i64 0             ; &cloptr8096370[0]
  %f8096373 = load i64, i64* %i0ptr8096371, align 8                                  ; load; *i0ptr8096371
  %fptr8096372 = inttoptr i64 %f8096373 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096372(i64 %arg8088251, i64 %rva8090462)           ; tail call
  ret void
}


define void @lam8091588(i64 %env8091589, i64 %rvp8090461) {
  %envptr8096374 = inttoptr i64 %env8091589 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096375 = getelementptr inbounds i64, i64* %envptr8096374, i64 3            ; &envptr8096374[3]
  %UXs$c = load i64, i64* %envptr8096375, align 8                                    ; load; *envptr8096375
  %envptr8096376 = inttoptr i64 %env8091589 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096377 = getelementptr inbounds i64, i64* %envptr8096376, i64 2            ; &envptr8096376[2]
  %prO$a = load i64, i64* %envptr8096377, align 8                                    ; load; *envptr8096377
  %envptr8096378 = inttoptr i64 %env8091589 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096379 = getelementptr inbounds i64, i64* %envptr8096378, i64 1            ; &envptr8096378[1]
  %xD5$b = load i64, i64* %envptr8096379, align 8                                    ; load; *envptr8096379
  %_958086088 = call i64 @prim_car(i64 %rvp8090461)                                  ; call prim_car
  %rvp8090460 = call i64 @prim_cdr(i64 %rvp8090461)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090460)                                    ; call prim_car
  %na8090441 = call i64 @prim_cdr(i64 %rvp8090460)                                   ; call prim_cdr
  %cloptr8096380 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096381 = getelementptr inbounds i64, i64* %cloptr8096380, i64 0              ; &cloptr8096380[0]
  %f8096382 = ptrtoint void(i64,i64)* @lam8091586 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096382, i64* %eptr8096381                                             ; store fptr
  %arg8088253 = ptrtoint i64* %cloptr8096380 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096383 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096385 = getelementptr inbounds i64, i64* %cloptr8096383, i64 1              ; &eptr8096385[1]
  %eptr8096386 = getelementptr inbounds i64, i64* %cloptr8096383, i64 2              ; &eptr8096386[2]
  %eptr8096387 = getelementptr inbounds i64, i64* %cloptr8096383, i64 3              ; &eptr8096387[3]
  store i64 %xD5$b, i64* %eptr8096385                                                ; *eptr8096385 = %xD5$b
  store i64 %prO$a, i64* %eptr8096386                                                ; *eptr8096386 = %prO$a
  store i64 %UXs$c, i64* %eptr8096387                                                ; *eptr8096387 = %UXs$c
  %eptr8096384 = getelementptr inbounds i64, i64* %cloptr8096383, i64 0              ; &cloptr8096383[0]
  %f8096388 = ptrtoint void(i64,i64)* @lam8091582 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096388, i64* %eptr8096384                                             ; store fptr
  %arg8088252 = ptrtoint i64* %cloptr8096383 to i64                                  ; closure cast; i64* -> i64
  %rva8090459 = add i64 0, 0                                                         ; quoted ()
  %rva8090458 = call i64 @prim_cons(i64 %arg8088252, i64 %rva8090459)                ; call prim_cons
  %cloptr8096389 = inttoptr i64 %arg8088253 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096390 = getelementptr inbounds i64, i64* %cloptr8096389, i64 0             ; &cloptr8096389[0]
  %f8096392 = load i64, i64* %i0ptr8096390, align 8                                  ; load; *i0ptr8096390
  %fptr8096391 = inttoptr i64 %f8096392 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096391(i64 %arg8088253, i64 %rva8090458)           ; tail call
  ret void
}


define void @lam8091586(i64 %env8091587, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8088257 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090444 = add i64 0, 0                                                         ; quoted ()
  %rva8090443 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090444)                   ; call prim_cons
  %rva8090442 = call i64 @prim_cons(i64 %arg8088257, i64 %rva8090443)                ; call prim_cons
  %cloptr8096393 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096394 = getelementptr inbounds i64, i64* %cloptr8096393, i64 0             ; &cloptr8096393[0]
  %f8096396 = load i64, i64* %i0ptr8096394, align 8                                  ; load; *i0ptr8096394
  %fptr8096395 = inttoptr i64 %f8096396 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096395(i64 %cont8086091, i64 %rva8090442)          ; tail call
  ret void
}


define void @lam8091582(i64 %env8091583, i64 %rvp8090457) {
  %envptr8096397 = inttoptr i64 %env8091583 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096398 = getelementptr inbounds i64, i64* %envptr8096397, i64 3            ; &envptr8096397[3]
  %UXs$c = load i64, i64* %envptr8096398, align 8                                    ; load; *envptr8096398
  %envptr8096399 = inttoptr i64 %env8091583 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096400 = getelementptr inbounds i64, i64* %envptr8096399, i64 2            ; &envptr8096399[2]
  %prO$a = load i64, i64* %envptr8096400, align 8                                    ; load; *envptr8096400
  %envptr8096401 = inttoptr i64 %env8091583 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096402 = getelementptr inbounds i64, i64* %envptr8096401, i64 1            ; &envptr8096401[1]
  %xD5$b = load i64, i64* %envptr8096402, align 8                                    ; load; *envptr8096402
  %_958086089 = call i64 @prim_car(i64 %rvp8090457)                                  ; call prim_car
  %rvp8090456 = call i64 @prim_cdr(i64 %rvp8090457)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090456)                                    ; call prim_car
  %na8090446 = call i64 @prim_cdr(i64 %rvp8090456)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8088266 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096403, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8088266, i64 %a8085926)              ; call prim_cons
  %cloptr8096404 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096405 = getelementptr inbounds i64, i64* %cloptr8096404, i64 0              ; &cloptr8096404[0]
  %f8096406 = ptrtoint void(i64,i64)* @lam8091579 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096406, i64* %eptr8096405                                             ; store fptr
  %arg8088269 = ptrtoint i64* %cloptr8096404 to i64                                  ; closure cast; i64* -> i64
  %arg8088268 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090455 = add i64 0, 0                                                         ; quoted ()
  %rva8090454 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090455)            ; call prim_cons
  %rva8090453 = call i64 @prim_cons(i64 %arg8088268, i64 %rva8090454)                ; call prim_cons
  %cloptr8096407 = inttoptr i64 %arg8088269 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096408 = getelementptr inbounds i64, i64* %cloptr8096407, i64 0             ; &cloptr8096407[0]
  %f8096410 = load i64, i64* %i0ptr8096408, align 8                                  ; load; *i0ptr8096408
  %fptr8096409 = inttoptr i64 %f8096410 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096409(i64 %arg8088269, i64 %rva8090453)           ; tail call
  ret void
}


define void @lam8091579(i64 %env8091580, i64 %rvp8090452) {
  %_950 = call i64 @prim_car(i64 %rvp8090452)                                        ; call prim_car
  %rvp8090451 = call i64 @prim_cdr(i64 %rvp8090452)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090451)                                           ; call prim_car
  %na8090448 = call i64 @prim_cdr(i64 %rvp8090451)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090450 = add i64 0, 0                                                         ; quoted ()
  %rva8090449 = call i64 @prim_cons(i64 %_951, i64 %rva8090450)                      ; call prim_cons
  %cloptr8096411 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096412 = getelementptr inbounds i64, i64* %cloptr8096411, i64 0             ; &cloptr8096411[0]
  %f8096414 = load i64, i64* %i0ptr8096412, align 8                                  ; load; *i0ptr8096412
  %fptr8096413 = inttoptr i64 %f8096414 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096413(i64 %_951, i64 %rva8090449)                 ; tail call
  ret void
}


define void @lam8091570(i64 %env8091571, i64 %rvp8090436) {
  %envptr8096415 = inttoptr i64 %env8091571 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096416 = getelementptr inbounds i64, i64* %envptr8096415, i64 3            ; &envptr8096415[3]
  %UXs$c = load i64, i64* %envptr8096416, align 8                                    ; load; *envptr8096416
  %envptr8096417 = inttoptr i64 %env8091571 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096418 = getelementptr inbounds i64, i64* %envptr8096417, i64 2            ; &envptr8096417[2]
  %prO$a = load i64, i64* %envptr8096418, align 8                                    ; load; *envptr8096418
  %envptr8096419 = inttoptr i64 %env8091571 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096420 = getelementptr inbounds i64, i64* %envptr8096419, i64 1            ; &envptr8096419[1]
  %xD5$b = load i64, i64* %envptr8096420, align 8                                    ; load; *envptr8096420
  %_958086088 = call i64 @prim_car(i64 %rvp8090436)                                  ; call prim_car
  %rvp8090435 = call i64 @prim_cdr(i64 %rvp8090436)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090435)                                    ; call prim_car
  %na8090416 = call i64 @prim_cdr(i64 %rvp8090435)                                   ; call prim_cdr
  %cloptr8096421 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096422 = getelementptr inbounds i64, i64* %cloptr8096421, i64 0              ; &cloptr8096421[0]
  %f8096423 = ptrtoint void(i64,i64)* @lam8091568 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096423, i64* %eptr8096422                                             ; store fptr
  %arg8088228 = ptrtoint i64* %cloptr8096421 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096424 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096426 = getelementptr inbounds i64, i64* %cloptr8096424, i64 1              ; &eptr8096426[1]
  %eptr8096427 = getelementptr inbounds i64, i64* %cloptr8096424, i64 2              ; &eptr8096427[2]
  %eptr8096428 = getelementptr inbounds i64, i64* %cloptr8096424, i64 3              ; &eptr8096428[3]
  store i64 %xD5$b, i64* %eptr8096426                                                ; *eptr8096426 = %xD5$b
  store i64 %prO$a, i64* %eptr8096427                                                ; *eptr8096427 = %prO$a
  store i64 %UXs$c, i64* %eptr8096428                                                ; *eptr8096428 = %UXs$c
  %eptr8096425 = getelementptr inbounds i64, i64* %cloptr8096424, i64 0              ; &cloptr8096424[0]
  %f8096429 = ptrtoint void(i64,i64)* @lam8091564 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096429, i64* %eptr8096425                                             ; store fptr
  %arg8088227 = ptrtoint i64* %cloptr8096424 to i64                                  ; closure cast; i64* -> i64
  %rva8090434 = add i64 0, 0                                                         ; quoted ()
  %rva8090433 = call i64 @prim_cons(i64 %arg8088227, i64 %rva8090434)                ; call prim_cons
  %cloptr8096430 = inttoptr i64 %arg8088228 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096431 = getelementptr inbounds i64, i64* %cloptr8096430, i64 0             ; &cloptr8096430[0]
  %f8096433 = load i64, i64* %i0ptr8096431, align 8                                  ; load; *i0ptr8096431
  %fptr8096432 = inttoptr i64 %f8096433 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096432(i64 %arg8088228, i64 %rva8090433)           ; tail call
  ret void
}


define void @lam8091568(i64 %env8091569, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8088232 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090419 = add i64 0, 0                                                         ; quoted ()
  %rva8090418 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090419)                   ; call prim_cons
  %rva8090417 = call i64 @prim_cons(i64 %arg8088232, i64 %rva8090418)                ; call prim_cons
  %cloptr8096434 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096435 = getelementptr inbounds i64, i64* %cloptr8096434, i64 0             ; &cloptr8096434[0]
  %f8096437 = load i64, i64* %i0ptr8096435, align 8                                  ; load; *i0ptr8096435
  %fptr8096436 = inttoptr i64 %f8096437 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096436(i64 %cont8086091, i64 %rva8090417)          ; tail call
  ret void
}


define void @lam8091564(i64 %env8091565, i64 %rvp8090432) {
  %envptr8096438 = inttoptr i64 %env8091565 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096439 = getelementptr inbounds i64, i64* %envptr8096438, i64 3            ; &envptr8096438[3]
  %UXs$c = load i64, i64* %envptr8096439, align 8                                    ; load; *envptr8096439
  %envptr8096440 = inttoptr i64 %env8091565 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096441 = getelementptr inbounds i64, i64* %envptr8096440, i64 2            ; &envptr8096440[2]
  %prO$a = load i64, i64* %envptr8096441, align 8                                    ; load; *envptr8096441
  %envptr8096442 = inttoptr i64 %env8091565 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096443 = getelementptr inbounds i64, i64* %envptr8096442, i64 1            ; &envptr8096442[1]
  %xD5$b = load i64, i64* %envptr8096443, align 8                                    ; load; *envptr8096443
  %_958086089 = call i64 @prim_car(i64 %rvp8090432)                                  ; call prim_car
  %rvp8090431 = call i64 @prim_cdr(i64 %rvp8090432)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090431)                                    ; call prim_car
  %na8090421 = call i64 @prim_cdr(i64 %rvp8090431)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8088241 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096444, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8088241, i64 %a8085926)              ; call prim_cons
  %cloptr8096445 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096446 = getelementptr inbounds i64, i64* %cloptr8096445, i64 0              ; &cloptr8096445[0]
  %f8096447 = ptrtoint void(i64,i64)* @lam8091561 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096447, i64* %eptr8096446                                             ; store fptr
  %arg8088244 = ptrtoint i64* %cloptr8096445 to i64                                  ; closure cast; i64* -> i64
  %arg8088243 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090430 = add i64 0, 0                                                         ; quoted ()
  %rva8090429 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090430)            ; call prim_cons
  %rva8090428 = call i64 @prim_cons(i64 %arg8088243, i64 %rva8090429)                ; call prim_cons
  %cloptr8096448 = inttoptr i64 %arg8088244 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096449 = getelementptr inbounds i64, i64* %cloptr8096448, i64 0             ; &cloptr8096448[0]
  %f8096451 = load i64, i64* %i0ptr8096449, align 8                                  ; load; *i0ptr8096449
  %fptr8096450 = inttoptr i64 %f8096451 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096450(i64 %arg8088244, i64 %rva8090428)           ; tail call
  ret void
}


define void @lam8091561(i64 %env8091562, i64 %rvp8090427) {
  %_950 = call i64 @prim_car(i64 %rvp8090427)                                        ; call prim_car
  %rvp8090426 = call i64 @prim_cdr(i64 %rvp8090427)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090426)                                           ; call prim_car
  %na8090423 = call i64 @prim_cdr(i64 %rvp8090426)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090425 = add i64 0, 0                                                         ; quoted ()
  %rva8090424 = call i64 @prim_cons(i64 %_951, i64 %rva8090425)                      ; call prim_cons
  %cloptr8096452 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096453 = getelementptr inbounds i64, i64* %cloptr8096452, i64 0             ; &cloptr8096452[0]
  %f8096455 = load i64, i64* %i0ptr8096453, align 8                                  ; load; *i0ptr8096453
  %fptr8096454 = inttoptr i64 %f8096455 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096454(i64 %_951, i64 %rva8090424)                 ; tail call
  ret void
}


define void @lam8091549(i64 %env8091550, i64 %vBs$lst8086100) {
  %cont8086099 = call i64 @prim_car(i64 %vBs$lst8086100)                             ; call prim_car
  %vBs$lst = call i64 @prim_cdr(i64 %vBs$lst8086100)                                 ; call prim_cdr
  %arg8088012 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090269 = add i64 0, 0                                                         ; quoted ()
  %rva8090268 = call i64 @prim_cons(i64 %vBs$lst, i64 %rva8090269)                   ; call prim_cons
  %rva8090267 = call i64 @prim_cons(i64 %arg8088012, i64 %rva8090268)                ; call prim_cons
  %cloptr8096456 = inttoptr i64 %cont8086099 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096457 = getelementptr inbounds i64, i64* %cloptr8096456, i64 0             ; &cloptr8096456[0]
  %f8096459 = load i64, i64* %i0ptr8096457, align 8                                  ; load; *i0ptr8096457
  %fptr8096458 = inttoptr i64 %f8096459 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096458(i64 %cont8086099, i64 %rva8090267)          ; tail call
  ret void
}


define void @lam8091545(i64 %env8091546, i64 %rvp8090403) {
  %envptr8096460 = inttoptr i64 %env8091546 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096461 = getelementptr inbounds i64, i64* %envptr8096460, i64 4            ; &envptr8096460[4]
  %U6p$assert = load i64, i64* %envptr8096461, align 8                               ; load; *envptr8096461
  %envptr8096462 = inttoptr i64 %env8091546 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096463 = getelementptr inbounds i64, i64* %envptr8096462, i64 3            ; &envptr8096462[3]
  %a8085900 = load i64, i64* %envptr8096463, align 8                                 ; load; *envptr8096463
  %envptr8096464 = inttoptr i64 %env8091546 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096465 = getelementptr inbounds i64, i64* %envptr8096464, i64 2            ; &envptr8096464[2]
  %prO$a = load i64, i64* %envptr8096465, align 8                                    ; load; *envptr8096465
  %envptr8096466 = inttoptr i64 %env8091546 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096467 = getelementptr inbounds i64, i64* %envptr8096466, i64 1            ; &envptr8096466[1]
  %I2S$amb = load i64, i64* %envptr8096467, align 8                                  ; load; *envptr8096467
  %_958086098 = call i64 @prim_car(i64 %rvp8090403)                                  ; call prim_car
  %rvp8090402 = call i64 @prim_cdr(i64 %rvp8090403)                                  ; call prim_cdr
  %a8085901 = call i64 @prim_car(i64 %rvp8090402)                                    ; call prim_car
  %na8090271 = call i64 @prim_cdr(i64 %rvp8090402)                                   ; call prim_cdr
  %arg8088015 = call i64 @const_init_int(i64 6)                                      ; quoted int
  %a8085902 = call i64 @prim_cons(i64 %arg8088015, i64 %a8085901)                    ; call prim_cons
  %arg8088017 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8085903 = call i64 @prim_cons(i64 %arg8088017, i64 %a8085902)                    ; call prim_cons
  %arg8088019 = call i64 @const_init_int(i64 4)                                      ; quoted int
  %a8085904 = call i64 @prim_cons(i64 %arg8088019, i64 %a8085903)                    ; call prim_cons
  %arg8088021 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %a8085905 = call i64 @prim_cons(i64 %arg8088021, i64 %a8085904)                    ; call prim_cons
  %arg8088023 = call i64 @const_init_int(i64 2)                                      ; quoted int
  %a8085906 = call i64 @prim_cons(i64 %arg8088023, i64 %a8085905)                    ; call prim_cons
  %cloptr8096468 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096470 = getelementptr inbounds i64, i64* %cloptr8096468, i64 1              ; &eptr8096470[1]
  %eptr8096471 = getelementptr inbounds i64, i64* %cloptr8096468, i64 2              ; &eptr8096471[2]
  %eptr8096472 = getelementptr inbounds i64, i64* %cloptr8096468, i64 3              ; &eptr8096472[3]
  store i64 %I2S$amb, i64* %eptr8096470                                              ; *eptr8096470 = %I2S$amb
  store i64 %prO$a, i64* %eptr8096471                                                ; *eptr8096471 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096472                                           ; *eptr8096472 = %U6p$assert
  %eptr8096469 = getelementptr inbounds i64, i64* %cloptr8096468, i64 0              ; &cloptr8096468[0]
  %f8096473 = ptrtoint void(i64,i64)* @lam8091538 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096473, i64* %eptr8096469                                             ; store fptr
  %arg8088025 = ptrtoint i64* %cloptr8096468 to i64                                  ; closure cast; i64* -> i64
  %rva8090401 = add i64 0, 0                                                         ; quoted ()
  %rva8090400 = call i64 @prim_cons(i64 %a8085906, i64 %rva8090401)                  ; call prim_cons
  %rva8090399 = call i64 @prim_cons(i64 %arg8088025, i64 %rva8090400)                ; call prim_cons
  %cloptr8096474 = inttoptr i64 %a8085900 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096475 = getelementptr inbounds i64, i64* %cloptr8096474, i64 0             ; &cloptr8096474[0]
  %f8096477 = load i64, i64* %i0ptr8096475, align 8                                  ; load; *i0ptr8096475
  %fptr8096476 = inttoptr i64 %f8096477 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096476(i64 %a8085900, i64 %rva8090399)             ; tail call
  ret void
}


define void @lam8091538(i64 %env8091539, i64 %rvp8090398) {
  %envptr8096478 = inttoptr i64 %env8091539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096479 = getelementptr inbounds i64, i64* %envptr8096478, i64 3            ; &envptr8096478[3]
  %U6p$assert = load i64, i64* %envptr8096479, align 8                               ; load; *envptr8096479
  %envptr8096480 = inttoptr i64 %env8091539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096481 = getelementptr inbounds i64, i64* %envptr8096480, i64 2            ; &envptr8096480[2]
  %prO$a = load i64, i64* %envptr8096481, align 8                                    ; load; *envptr8096481
  %envptr8096482 = inttoptr i64 %env8091539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096483 = getelementptr inbounds i64, i64* %envptr8096482, i64 1            ; &envptr8096482[1]
  %I2S$amb = load i64, i64* %envptr8096483, align 8                                  ; load; *envptr8096483
  %_958086086 = call i64 @prim_car(i64 %rvp8090398)                                  ; call prim_car
  %rvp8090397 = call i64 @prim_cdr(i64 %rvp8090398)                                  ; call prim_cdr
  %xD5$b = call i64 @prim_car(i64 %rvp8090397)                                       ; call prim_car
  %na8090273 = call i64 @prim_cdr(i64 %rvp8090397)                                   ; call prim_cdr
  %arg8088027 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085907 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8088027)             ; call prim_vector_45ref
  %a8085908 = call i64 @prim_procedure_63(i64 %a8085907)                             ; call prim_procedure_63
  %cmp8096484 = icmp eq i64 %a8085908, 15                                            ; false?
  br i1 %cmp8096484, label %else8096486, label %then8096485                          ; if

then8096485:
  %arg8088030 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085909 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8088030)             ; call prim_vector_45ref
  %cloptr8096487 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096488 = getelementptr inbounds i64, i64* %cloptr8096487, i64 0              ; &cloptr8096487[0]
  %f8096489 = ptrtoint void(i64,i64)* @lam8091493 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096489, i64* %eptr8096488                                             ; store fptr
  %arg8088033 = ptrtoint i64* %cloptr8096487 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096490 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096492 = getelementptr inbounds i64, i64* %cloptr8096490, i64 1              ; &eptr8096492[1]
  %eptr8096493 = getelementptr inbounds i64, i64* %cloptr8096490, i64 2              ; &eptr8096493[2]
  %eptr8096494 = getelementptr inbounds i64, i64* %cloptr8096490, i64 3              ; &eptr8096494[3]
  %eptr8096495 = getelementptr inbounds i64, i64* %cloptr8096490, i64 4              ; &eptr8096495[4]
  store i64 %xD5$b, i64* %eptr8096492                                                ; *eptr8096492 = %xD5$b
  store i64 %prO$a, i64* %eptr8096493                                                ; *eptr8096493 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096494                                           ; *eptr8096494 = %U6p$assert
  store i64 %a8085909, i64* %eptr8096495                                             ; *eptr8096495 = %a8085909
  %eptr8096491 = getelementptr inbounds i64, i64* %cloptr8096490, i64 0              ; &cloptr8096490[0]
  %f8096496 = ptrtoint void(i64,i64)* @lam8091489 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096496, i64* %eptr8096491                                             ; store fptr
  %arg8088032 = ptrtoint i64* %cloptr8096490 to i64                                  ; closure cast; i64* -> i64
  %rva8090339 = add i64 0, 0                                                         ; quoted ()
  %rva8090338 = call i64 @prim_cons(i64 %arg8088032, i64 %rva8090339)                ; call prim_cons
  %cloptr8096497 = inttoptr i64 %arg8088033 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096498 = getelementptr inbounds i64, i64* %cloptr8096497, i64 0             ; &cloptr8096497[0]
  %f8096500 = load i64, i64* %i0ptr8096498, align 8                                  ; load; *i0ptr8096498
  %fptr8096499 = inttoptr i64 %f8096500 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096499(i64 %arg8088033, i64 %rva8090338)           ; tail call
  ret void

else8096486:
  %arg8088114 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096501, i32 0, i32 0)); quoted string
  %retprim8086097 = call i64 @prim_halt(i64 %arg8088114)                             ; call prim_halt
  %cloptr8096502 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096504 = getelementptr inbounds i64, i64* %cloptr8096502, i64 1              ; &eptr8096504[1]
  %eptr8096505 = getelementptr inbounds i64, i64* %cloptr8096502, i64 2              ; &eptr8096505[2]
  %eptr8096506 = getelementptr inbounds i64, i64* %cloptr8096502, i64 3              ; &eptr8096506[3]
  store i64 %xD5$b, i64* %eptr8096504                                                ; *eptr8096504 = %xD5$b
  store i64 %prO$a, i64* %eptr8096505                                                ; *eptr8096505 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096506                                           ; *eptr8096506 = %U6p$assert
  %eptr8096503 = getelementptr inbounds i64, i64* %cloptr8096502, i64 0              ; &cloptr8096502[0]
  %f8096507 = ptrtoint void(i64,i64)* @lam8091534 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096507, i64* %eptr8096503                                             ; store fptr
  %arg8088117 = ptrtoint i64* %cloptr8096502 to i64                                  ; closure cast; i64* -> i64
  %arg8088116 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090396 = add i64 0, 0                                                         ; quoted ()
  %rva8090395 = call i64 @prim_cons(i64 %retprim8086097, i64 %rva8090396)            ; call prim_cons
  %rva8090394 = call i64 @prim_cons(i64 %arg8088116, i64 %rva8090395)                ; call prim_cons
  %cloptr8096508 = inttoptr i64 %arg8088117 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096509 = getelementptr inbounds i64, i64* %cloptr8096508, i64 0             ; &cloptr8096508[0]
  %f8096511 = load i64, i64* %i0ptr8096509, align 8                                  ; load; *i0ptr8096509
  %fptr8096510 = inttoptr i64 %f8096511 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096510(i64 %arg8088117, i64 %rva8090394)           ; tail call
  ret void
}


define void @lam8091534(i64 %env8091535, i64 %rvp8090393) {
  %envptr8096512 = inttoptr i64 %env8091535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096513 = getelementptr inbounds i64, i64* %envptr8096512, i64 3            ; &envptr8096512[3]
  %U6p$assert = load i64, i64* %envptr8096513, align 8                               ; load; *envptr8096513
  %envptr8096514 = inttoptr i64 %env8091535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096515 = getelementptr inbounds i64, i64* %envptr8096514, i64 2            ; &envptr8096514[2]
  %prO$a = load i64, i64* %envptr8096515, align 8                                    ; load; *envptr8096515
  %envptr8096516 = inttoptr i64 %env8091535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096517 = getelementptr inbounds i64, i64* %envptr8096516, i64 1            ; &envptr8096516[1]
  %xD5$b = load i64, i64* %envptr8096517, align 8                                    ; load; *envptr8096517
  %_958086087 = call i64 @prim_car(i64 %rvp8090393)                                  ; call prim_car
  %rvp8090392 = call i64 @prim_cdr(i64 %rvp8090393)                                  ; call prim_cdr
  %UXs$c = call i64 @prim_car(i64 %rvp8090392)                                       ; call prim_car
  %na8090341 = call i64 @prim_cdr(i64 %rvp8090392)                                   ; call prim_cdr
  %arg8088118 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085915 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8088118)          ; call prim_vector_45ref
  %a8085916 = call i64 @prim_procedure_63(i64 %a8085915)                             ; call prim_procedure_63
  %cmp8096518 = icmp eq i64 %a8085916, 15                                            ; false?
  br i1 %cmp8096518, label %else8096520, label %then8096519                          ; if

then8096519:
  %arg8088121 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085917 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8088121)          ; call prim_vector_45ref
  %a8085918 = call i64 @prim__42(i64 %prO$a, i64 %prO$a)                             ; call prim__42
  %a8085919 = call i64 @prim__42(i64 %xD5$b, i64 %xD5$b)                             ; call prim__42
  %a8085920 = call i64 @prim__43(i64 %a8085918, i64 %a8085919)                       ; call prim__43
  %a8085921 = call i64 @prim__42(i64 %UXs$c, i64 %UXs$c)                             ; call prim__42
  %a8085922 = call i64 @prim__61(i64 %a8085920, i64 %a8085921)                       ; call prim__61
  %cloptr8096521 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096523 = getelementptr inbounds i64, i64* %cloptr8096521, i64 1              ; &eptr8096523[1]
  %eptr8096524 = getelementptr inbounds i64, i64* %cloptr8096521, i64 2              ; &eptr8096524[2]
  %eptr8096525 = getelementptr inbounds i64, i64* %cloptr8096521, i64 3              ; &eptr8096525[3]
  store i64 %xD5$b, i64* %eptr8096523                                                ; *eptr8096523 = %xD5$b
  store i64 %prO$a, i64* %eptr8096524                                                ; *eptr8096524 = %prO$a
  store i64 %UXs$c, i64* %eptr8096525                                                ; *eptr8096525 = %UXs$c
  %eptr8096522 = getelementptr inbounds i64, i64* %cloptr8096521, i64 0              ; &cloptr8096521[0]
  %f8096526 = ptrtoint void(i64,i64)* @lam8091512 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096526, i64* %eptr8096522                                             ; store fptr
  %arg8088134 = ptrtoint i64* %cloptr8096521 to i64                                  ; closure cast; i64* -> i64
  %rva8090366 = add i64 0, 0                                                         ; quoted ()
  %rva8090365 = call i64 @prim_cons(i64 %a8085922, i64 %rva8090366)                  ; call prim_cons
  %rva8090364 = call i64 @prim_cons(i64 %arg8088134, i64 %rva8090365)                ; call prim_cons
  %cloptr8096527 = inttoptr i64 %a8085917 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096528 = getelementptr inbounds i64, i64* %cloptr8096527, i64 0             ; &cloptr8096527[0]
  %f8096530 = load i64, i64* %i0ptr8096528, align 8                                  ; load; *i0ptr8096528
  %fptr8096529 = inttoptr i64 %f8096530 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096529(i64 %a8085917, i64 %rva8090364)             ; tail call
  ret void

else8096520:
  %arg8088157 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096531, i32 0, i32 0)); quoted string
  %retprim8086093 = call i64 @prim_halt(i64 %arg8088157)                             ; call prim_halt
  %cloptr8096532 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096534 = getelementptr inbounds i64, i64* %cloptr8096532, i64 1              ; &eptr8096534[1]
  %eptr8096535 = getelementptr inbounds i64, i64* %cloptr8096532, i64 2              ; &eptr8096535[2]
  %eptr8096536 = getelementptr inbounds i64, i64* %cloptr8096532, i64 3              ; &eptr8096536[3]
  store i64 %xD5$b, i64* %eptr8096534                                                ; *eptr8096534 = %xD5$b
  store i64 %prO$a, i64* %eptr8096535                                                ; *eptr8096535 = %prO$a
  store i64 %UXs$c, i64* %eptr8096536                                                ; *eptr8096536 = %UXs$c
  %eptr8096533 = getelementptr inbounds i64, i64* %cloptr8096532, i64 0              ; &cloptr8096532[0]
  %f8096537 = ptrtoint void(i64,i64)* @lam8091530 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096537, i64* %eptr8096533                                             ; store fptr
  %arg8088160 = ptrtoint i64* %cloptr8096532 to i64                                  ; closure cast; i64* -> i64
  %arg8088159 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090391 = add i64 0, 0                                                         ; quoted ()
  %rva8090390 = call i64 @prim_cons(i64 %retprim8086093, i64 %rva8090391)            ; call prim_cons
  %rva8090389 = call i64 @prim_cons(i64 %arg8088159, i64 %rva8090390)                ; call prim_cons
  %cloptr8096538 = inttoptr i64 %arg8088160 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096539 = getelementptr inbounds i64, i64* %cloptr8096538, i64 0             ; &cloptr8096538[0]
  %f8096541 = load i64, i64* %i0ptr8096539, align 8                                  ; load; *i0ptr8096539
  %fptr8096540 = inttoptr i64 %f8096541 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096540(i64 %arg8088160, i64 %rva8090389)           ; tail call
  ret void
}


define void @lam8091530(i64 %env8091531, i64 %rvp8090388) {
  %envptr8096542 = inttoptr i64 %env8091531 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096543 = getelementptr inbounds i64, i64* %envptr8096542, i64 3            ; &envptr8096542[3]
  %UXs$c = load i64, i64* %envptr8096543, align 8                                    ; load; *envptr8096543
  %envptr8096544 = inttoptr i64 %env8091531 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096545 = getelementptr inbounds i64, i64* %envptr8096544, i64 2            ; &envptr8096544[2]
  %prO$a = load i64, i64* %envptr8096545, align 8                                    ; load; *envptr8096545
  %envptr8096546 = inttoptr i64 %env8091531 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096547 = getelementptr inbounds i64, i64* %envptr8096546, i64 1            ; &envptr8096546[1]
  %xD5$b = load i64, i64* %envptr8096547, align 8                                    ; load; *envptr8096547
  %_958086088 = call i64 @prim_car(i64 %rvp8090388)                                  ; call prim_car
  %rvp8090387 = call i64 @prim_cdr(i64 %rvp8090388)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090387)                                    ; call prim_car
  %na8090368 = call i64 @prim_cdr(i64 %rvp8090387)                                   ; call prim_cdr
  %cloptr8096548 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096549 = getelementptr inbounds i64, i64* %cloptr8096548, i64 0              ; &cloptr8096548[0]
  %f8096550 = ptrtoint void(i64,i64)* @lam8091528 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096550, i64* %eptr8096549                                             ; store fptr
  %arg8088162 = ptrtoint i64* %cloptr8096548 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096551 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096553 = getelementptr inbounds i64, i64* %cloptr8096551, i64 1              ; &eptr8096553[1]
  %eptr8096554 = getelementptr inbounds i64, i64* %cloptr8096551, i64 2              ; &eptr8096554[2]
  %eptr8096555 = getelementptr inbounds i64, i64* %cloptr8096551, i64 3              ; &eptr8096555[3]
  store i64 %xD5$b, i64* %eptr8096553                                                ; *eptr8096553 = %xD5$b
  store i64 %prO$a, i64* %eptr8096554                                                ; *eptr8096554 = %prO$a
  store i64 %UXs$c, i64* %eptr8096555                                                ; *eptr8096555 = %UXs$c
  %eptr8096552 = getelementptr inbounds i64, i64* %cloptr8096551, i64 0              ; &cloptr8096551[0]
  %f8096556 = ptrtoint void(i64,i64)* @lam8091524 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096556, i64* %eptr8096552                                             ; store fptr
  %arg8088161 = ptrtoint i64* %cloptr8096551 to i64                                  ; closure cast; i64* -> i64
  %rva8090386 = add i64 0, 0                                                         ; quoted ()
  %rva8090385 = call i64 @prim_cons(i64 %arg8088161, i64 %rva8090386)                ; call prim_cons
  %cloptr8096557 = inttoptr i64 %arg8088162 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096558 = getelementptr inbounds i64, i64* %cloptr8096557, i64 0             ; &cloptr8096557[0]
  %f8096560 = load i64, i64* %i0ptr8096558, align 8                                  ; load; *i0ptr8096558
  %fptr8096559 = inttoptr i64 %f8096560 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096559(i64 %arg8088162, i64 %rva8090385)           ; tail call
  ret void
}


define void @lam8091528(i64 %env8091529, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8088166 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090371 = add i64 0, 0                                                         ; quoted ()
  %rva8090370 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090371)                   ; call prim_cons
  %rva8090369 = call i64 @prim_cons(i64 %arg8088166, i64 %rva8090370)                ; call prim_cons
  %cloptr8096561 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096562 = getelementptr inbounds i64, i64* %cloptr8096561, i64 0             ; &cloptr8096561[0]
  %f8096564 = load i64, i64* %i0ptr8096562, align 8                                  ; load; *i0ptr8096562
  %fptr8096563 = inttoptr i64 %f8096564 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096563(i64 %cont8086091, i64 %rva8090369)          ; tail call
  ret void
}


define void @lam8091524(i64 %env8091525, i64 %rvp8090384) {
  %envptr8096565 = inttoptr i64 %env8091525 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096566 = getelementptr inbounds i64, i64* %envptr8096565, i64 3            ; &envptr8096565[3]
  %UXs$c = load i64, i64* %envptr8096566, align 8                                    ; load; *envptr8096566
  %envptr8096567 = inttoptr i64 %env8091525 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096568 = getelementptr inbounds i64, i64* %envptr8096567, i64 2            ; &envptr8096567[2]
  %prO$a = load i64, i64* %envptr8096568, align 8                                    ; load; *envptr8096568
  %envptr8096569 = inttoptr i64 %env8091525 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096570 = getelementptr inbounds i64, i64* %envptr8096569, i64 1            ; &envptr8096569[1]
  %xD5$b = load i64, i64* %envptr8096570, align 8                                    ; load; *envptr8096570
  %_958086089 = call i64 @prim_car(i64 %rvp8090384)                                  ; call prim_car
  %rvp8090383 = call i64 @prim_cdr(i64 %rvp8090384)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090383)                                    ; call prim_car
  %na8090373 = call i64 @prim_cdr(i64 %rvp8090383)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8088175 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096571, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8088175, i64 %a8085926)              ; call prim_cons
  %cloptr8096572 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096573 = getelementptr inbounds i64, i64* %cloptr8096572, i64 0              ; &cloptr8096572[0]
  %f8096574 = ptrtoint void(i64,i64)* @lam8091521 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096574, i64* %eptr8096573                                             ; store fptr
  %arg8088178 = ptrtoint i64* %cloptr8096572 to i64                                  ; closure cast; i64* -> i64
  %arg8088177 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090382 = add i64 0, 0                                                         ; quoted ()
  %rva8090381 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090382)            ; call prim_cons
  %rva8090380 = call i64 @prim_cons(i64 %arg8088177, i64 %rva8090381)                ; call prim_cons
  %cloptr8096575 = inttoptr i64 %arg8088178 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096576 = getelementptr inbounds i64, i64* %cloptr8096575, i64 0             ; &cloptr8096575[0]
  %f8096578 = load i64, i64* %i0ptr8096576, align 8                                  ; load; *i0ptr8096576
  %fptr8096577 = inttoptr i64 %f8096578 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096577(i64 %arg8088178, i64 %rva8090380)           ; tail call
  ret void
}


define void @lam8091521(i64 %env8091522, i64 %rvp8090379) {
  %_950 = call i64 @prim_car(i64 %rvp8090379)                                        ; call prim_car
  %rvp8090378 = call i64 @prim_cdr(i64 %rvp8090379)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090378)                                           ; call prim_car
  %na8090375 = call i64 @prim_cdr(i64 %rvp8090378)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090377 = add i64 0, 0                                                         ; quoted ()
  %rva8090376 = call i64 @prim_cons(i64 %_951, i64 %rva8090377)                      ; call prim_cons
  %cloptr8096579 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096580 = getelementptr inbounds i64, i64* %cloptr8096579, i64 0             ; &cloptr8096579[0]
  %f8096582 = load i64, i64* %i0ptr8096580, align 8                                  ; load; *i0ptr8096580
  %fptr8096581 = inttoptr i64 %f8096582 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096581(i64 %_951, i64 %rva8090376)                 ; tail call
  ret void
}


define void @lam8091512(i64 %env8091513, i64 %rvp8090363) {
  %envptr8096583 = inttoptr i64 %env8091513 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096584 = getelementptr inbounds i64, i64* %envptr8096583, i64 3            ; &envptr8096583[3]
  %UXs$c = load i64, i64* %envptr8096584, align 8                                    ; load; *envptr8096584
  %envptr8096585 = inttoptr i64 %env8091513 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096586 = getelementptr inbounds i64, i64* %envptr8096585, i64 2            ; &envptr8096585[2]
  %prO$a = load i64, i64* %envptr8096586, align 8                                    ; load; *envptr8096586
  %envptr8096587 = inttoptr i64 %env8091513 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096588 = getelementptr inbounds i64, i64* %envptr8096587, i64 1            ; &envptr8096587[1]
  %xD5$b = load i64, i64* %envptr8096588, align 8                                    ; load; *envptr8096588
  %_958086088 = call i64 @prim_car(i64 %rvp8090363)                                  ; call prim_car
  %rvp8090362 = call i64 @prim_cdr(i64 %rvp8090363)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090362)                                    ; call prim_car
  %na8090343 = call i64 @prim_cdr(i64 %rvp8090362)                                   ; call prim_cdr
  %cloptr8096589 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096590 = getelementptr inbounds i64, i64* %cloptr8096589, i64 0              ; &cloptr8096589[0]
  %f8096591 = ptrtoint void(i64,i64)* @lam8091510 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096591, i64* %eptr8096590                                             ; store fptr
  %arg8088137 = ptrtoint i64* %cloptr8096589 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096592 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096594 = getelementptr inbounds i64, i64* %cloptr8096592, i64 1              ; &eptr8096594[1]
  %eptr8096595 = getelementptr inbounds i64, i64* %cloptr8096592, i64 2              ; &eptr8096595[2]
  %eptr8096596 = getelementptr inbounds i64, i64* %cloptr8096592, i64 3              ; &eptr8096596[3]
  store i64 %xD5$b, i64* %eptr8096594                                                ; *eptr8096594 = %xD5$b
  store i64 %prO$a, i64* %eptr8096595                                                ; *eptr8096595 = %prO$a
  store i64 %UXs$c, i64* %eptr8096596                                                ; *eptr8096596 = %UXs$c
  %eptr8096593 = getelementptr inbounds i64, i64* %cloptr8096592, i64 0              ; &cloptr8096592[0]
  %f8096597 = ptrtoint void(i64,i64)* @lam8091506 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096597, i64* %eptr8096593                                             ; store fptr
  %arg8088136 = ptrtoint i64* %cloptr8096592 to i64                                  ; closure cast; i64* -> i64
  %rva8090361 = add i64 0, 0                                                         ; quoted ()
  %rva8090360 = call i64 @prim_cons(i64 %arg8088136, i64 %rva8090361)                ; call prim_cons
  %cloptr8096598 = inttoptr i64 %arg8088137 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096599 = getelementptr inbounds i64, i64* %cloptr8096598, i64 0             ; &cloptr8096598[0]
  %f8096601 = load i64, i64* %i0ptr8096599, align 8                                  ; load; *i0ptr8096599
  %fptr8096600 = inttoptr i64 %f8096601 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096600(i64 %arg8088137, i64 %rva8090360)           ; tail call
  ret void
}


define void @lam8091510(i64 %env8091511, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8088141 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090346 = add i64 0, 0                                                         ; quoted ()
  %rva8090345 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090346)                   ; call prim_cons
  %rva8090344 = call i64 @prim_cons(i64 %arg8088141, i64 %rva8090345)                ; call prim_cons
  %cloptr8096602 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096603 = getelementptr inbounds i64, i64* %cloptr8096602, i64 0             ; &cloptr8096602[0]
  %f8096605 = load i64, i64* %i0ptr8096603, align 8                                  ; load; *i0ptr8096603
  %fptr8096604 = inttoptr i64 %f8096605 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096604(i64 %cont8086091, i64 %rva8090344)          ; tail call
  ret void
}


define void @lam8091506(i64 %env8091507, i64 %rvp8090359) {
  %envptr8096606 = inttoptr i64 %env8091507 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096607 = getelementptr inbounds i64, i64* %envptr8096606, i64 3            ; &envptr8096606[3]
  %UXs$c = load i64, i64* %envptr8096607, align 8                                    ; load; *envptr8096607
  %envptr8096608 = inttoptr i64 %env8091507 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096609 = getelementptr inbounds i64, i64* %envptr8096608, i64 2            ; &envptr8096608[2]
  %prO$a = load i64, i64* %envptr8096609, align 8                                    ; load; *envptr8096609
  %envptr8096610 = inttoptr i64 %env8091507 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096611 = getelementptr inbounds i64, i64* %envptr8096610, i64 1            ; &envptr8096610[1]
  %xD5$b = load i64, i64* %envptr8096611, align 8                                    ; load; *envptr8096611
  %_958086089 = call i64 @prim_car(i64 %rvp8090359)                                  ; call prim_car
  %rvp8090358 = call i64 @prim_cdr(i64 %rvp8090359)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090358)                                    ; call prim_car
  %na8090348 = call i64 @prim_cdr(i64 %rvp8090358)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8088150 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096612, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8088150, i64 %a8085926)              ; call prim_cons
  %cloptr8096613 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096614 = getelementptr inbounds i64, i64* %cloptr8096613, i64 0              ; &cloptr8096613[0]
  %f8096615 = ptrtoint void(i64,i64)* @lam8091503 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096615, i64* %eptr8096614                                             ; store fptr
  %arg8088153 = ptrtoint i64* %cloptr8096613 to i64                                  ; closure cast; i64* -> i64
  %arg8088152 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090357 = add i64 0, 0                                                         ; quoted ()
  %rva8090356 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090357)            ; call prim_cons
  %rva8090355 = call i64 @prim_cons(i64 %arg8088152, i64 %rva8090356)                ; call prim_cons
  %cloptr8096616 = inttoptr i64 %arg8088153 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096617 = getelementptr inbounds i64, i64* %cloptr8096616, i64 0             ; &cloptr8096616[0]
  %f8096619 = load i64, i64* %i0ptr8096617, align 8                                  ; load; *i0ptr8096617
  %fptr8096618 = inttoptr i64 %f8096619 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096618(i64 %arg8088153, i64 %rva8090355)           ; tail call
  ret void
}


define void @lam8091503(i64 %env8091504, i64 %rvp8090354) {
  %_950 = call i64 @prim_car(i64 %rvp8090354)                                        ; call prim_car
  %rvp8090353 = call i64 @prim_cdr(i64 %rvp8090354)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090353)                                           ; call prim_car
  %na8090350 = call i64 @prim_cdr(i64 %rvp8090353)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090352 = add i64 0, 0                                                         ; quoted ()
  %rva8090351 = call i64 @prim_cons(i64 %_951, i64 %rva8090352)                      ; call prim_cons
  %cloptr8096620 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096621 = getelementptr inbounds i64, i64* %cloptr8096620, i64 0             ; &cloptr8096620[0]
  %f8096623 = load i64, i64* %i0ptr8096621, align 8                                  ; load; *i0ptr8096621
  %fptr8096622 = inttoptr i64 %f8096623 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096622(i64 %_951, i64 %rva8090351)                 ; tail call
  ret void
}


define void @lam8091493(i64 %env8091494, i64 %N3p$lst8086096) {
  %cont8086095 = call i64 @prim_car(i64 %N3p$lst8086096)                             ; call prim_car
  %N3p$lst = call i64 @prim_cdr(i64 %N3p$lst8086096)                                 ; call prim_cdr
  %arg8088037 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090276 = add i64 0, 0                                                         ; quoted ()
  %rva8090275 = call i64 @prim_cons(i64 %N3p$lst, i64 %rva8090276)                   ; call prim_cons
  %rva8090274 = call i64 @prim_cons(i64 %arg8088037, i64 %rva8090275)                ; call prim_cons
  %cloptr8096624 = inttoptr i64 %cont8086095 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096625 = getelementptr inbounds i64, i64* %cloptr8096624, i64 0             ; &cloptr8096624[0]
  %f8096627 = load i64, i64* %i0ptr8096625, align 8                                  ; load; *i0ptr8096625
  %fptr8096626 = inttoptr i64 %f8096627 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096626(i64 %cont8086095, i64 %rva8090274)          ; tail call
  ret void
}


define void @lam8091489(i64 %env8091490, i64 %rvp8090337) {
  %envptr8096628 = inttoptr i64 %env8091490 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096629 = getelementptr inbounds i64, i64* %envptr8096628, i64 4            ; &envptr8096628[4]
  %a8085909 = load i64, i64* %envptr8096629, align 8                                 ; load; *envptr8096629
  %envptr8096630 = inttoptr i64 %env8091490 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096631 = getelementptr inbounds i64, i64* %envptr8096630, i64 3            ; &envptr8096630[3]
  %U6p$assert = load i64, i64* %envptr8096631, align 8                               ; load; *envptr8096631
  %envptr8096632 = inttoptr i64 %env8091490 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096633 = getelementptr inbounds i64, i64* %envptr8096632, i64 2            ; &envptr8096632[2]
  %prO$a = load i64, i64* %envptr8096633, align 8                                    ; load; *envptr8096633
  %envptr8096634 = inttoptr i64 %env8091490 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096635 = getelementptr inbounds i64, i64* %envptr8096634, i64 1            ; &envptr8096634[1]
  %xD5$b = load i64, i64* %envptr8096635, align 8                                    ; load; *envptr8096635
  %_958086094 = call i64 @prim_car(i64 %rvp8090337)                                  ; call prim_car
  %rvp8090336 = call i64 @prim_cdr(i64 %rvp8090337)                                  ; call prim_cdr
  %a8085910 = call i64 @prim_car(i64 %rvp8090336)                                    ; call prim_car
  %na8090278 = call i64 @prim_cdr(i64 %rvp8090336)                                   ; call prim_cdr
  %arg8088040 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8085911 = call i64 @prim_cons(i64 %arg8088040, i64 %a8085910)                    ; call prim_cons
  %arg8088042 = call i64 @const_init_int(i64 4)                                      ; quoted int
  %a8085912 = call i64 @prim_cons(i64 %arg8088042, i64 %a8085911)                    ; call prim_cons
  %arg8088044 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %a8085913 = call i64 @prim_cons(i64 %arg8088044, i64 %a8085912)                    ; call prim_cons
  %arg8088046 = call i64 @const_init_int(i64 2)                                      ; quoted int
  %a8085914 = call i64 @prim_cons(i64 %arg8088046, i64 %a8085913)                    ; call prim_cons
  %cloptr8096636 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096638 = getelementptr inbounds i64, i64* %cloptr8096636, i64 1              ; &eptr8096638[1]
  %eptr8096639 = getelementptr inbounds i64, i64* %cloptr8096636, i64 2              ; &eptr8096639[2]
  %eptr8096640 = getelementptr inbounds i64, i64* %cloptr8096636, i64 3              ; &eptr8096640[3]
  store i64 %xD5$b, i64* %eptr8096638                                                ; *eptr8096638 = %xD5$b
  store i64 %prO$a, i64* %eptr8096639                                                ; *eptr8096639 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096640                                           ; *eptr8096640 = %U6p$assert
  %eptr8096637 = getelementptr inbounds i64, i64* %cloptr8096636, i64 0              ; &cloptr8096636[0]
  %f8096641 = ptrtoint void(i64,i64)* @lam8091483 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096641, i64* %eptr8096637                                             ; store fptr
  %arg8088048 = ptrtoint i64* %cloptr8096636 to i64                                  ; closure cast; i64* -> i64
  %rva8090335 = add i64 0, 0                                                         ; quoted ()
  %rva8090334 = call i64 @prim_cons(i64 %a8085914, i64 %rva8090335)                  ; call prim_cons
  %rva8090333 = call i64 @prim_cons(i64 %arg8088048, i64 %rva8090334)                ; call prim_cons
  %cloptr8096642 = inttoptr i64 %a8085909 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096643 = getelementptr inbounds i64, i64* %cloptr8096642, i64 0             ; &cloptr8096642[0]
  %f8096645 = load i64, i64* %i0ptr8096643, align 8                                  ; load; *i0ptr8096643
  %fptr8096644 = inttoptr i64 %f8096645 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096644(i64 %a8085909, i64 %rva8090333)             ; tail call
  ret void
}


define void @lam8091483(i64 %env8091484, i64 %rvp8090332) {
  %envptr8096646 = inttoptr i64 %env8091484 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096647 = getelementptr inbounds i64, i64* %envptr8096646, i64 3            ; &envptr8096646[3]
  %U6p$assert = load i64, i64* %envptr8096647, align 8                               ; load; *envptr8096647
  %envptr8096648 = inttoptr i64 %env8091484 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096649 = getelementptr inbounds i64, i64* %envptr8096648, i64 2            ; &envptr8096648[2]
  %prO$a = load i64, i64* %envptr8096649, align 8                                    ; load; *envptr8096649
  %envptr8096650 = inttoptr i64 %env8091484 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096651 = getelementptr inbounds i64, i64* %envptr8096650, i64 1            ; &envptr8096650[1]
  %xD5$b = load i64, i64* %envptr8096651, align 8                                    ; load; *envptr8096651
  %_958086087 = call i64 @prim_car(i64 %rvp8090332)                                  ; call prim_car
  %rvp8090331 = call i64 @prim_cdr(i64 %rvp8090332)                                  ; call prim_cdr
  %UXs$c = call i64 @prim_car(i64 %rvp8090331)                                       ; call prim_car
  %na8090280 = call i64 @prim_cdr(i64 %rvp8090331)                                   ; call prim_cdr
  %arg8088050 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085915 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8088050)          ; call prim_vector_45ref
  %a8085916 = call i64 @prim_procedure_63(i64 %a8085915)                             ; call prim_procedure_63
  %cmp8096652 = icmp eq i64 %a8085916, 15                                            ; false?
  br i1 %cmp8096652, label %else8096654, label %then8096653                          ; if

then8096653:
  %arg8088053 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085917 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8088053)          ; call prim_vector_45ref
  %a8085918 = call i64 @prim__42(i64 %prO$a, i64 %prO$a)                             ; call prim__42
  %a8085919 = call i64 @prim__42(i64 %xD5$b, i64 %xD5$b)                             ; call prim__42
  %a8085920 = call i64 @prim__43(i64 %a8085918, i64 %a8085919)                       ; call prim__43
  %a8085921 = call i64 @prim__42(i64 %UXs$c, i64 %UXs$c)                             ; call prim__42
  %a8085922 = call i64 @prim__61(i64 %a8085920, i64 %a8085921)                       ; call prim__61
  %cloptr8096655 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096657 = getelementptr inbounds i64, i64* %cloptr8096655, i64 1              ; &eptr8096657[1]
  %eptr8096658 = getelementptr inbounds i64, i64* %cloptr8096655, i64 2              ; &eptr8096658[2]
  %eptr8096659 = getelementptr inbounds i64, i64* %cloptr8096655, i64 3              ; &eptr8096659[3]
  store i64 %xD5$b, i64* %eptr8096657                                                ; *eptr8096657 = %xD5$b
  store i64 %prO$a, i64* %eptr8096658                                                ; *eptr8096658 = %prO$a
  store i64 %UXs$c, i64* %eptr8096659                                                ; *eptr8096659 = %UXs$c
  %eptr8096656 = getelementptr inbounds i64, i64* %cloptr8096655, i64 0              ; &cloptr8096655[0]
  %f8096660 = ptrtoint void(i64,i64)* @lam8091461 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096660, i64* %eptr8096656                                             ; store fptr
  %arg8088066 = ptrtoint i64* %cloptr8096655 to i64                                  ; closure cast; i64* -> i64
  %rva8090305 = add i64 0, 0                                                         ; quoted ()
  %rva8090304 = call i64 @prim_cons(i64 %a8085922, i64 %rva8090305)                  ; call prim_cons
  %rva8090303 = call i64 @prim_cons(i64 %arg8088066, i64 %rva8090304)                ; call prim_cons
  %cloptr8096661 = inttoptr i64 %a8085917 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096662 = getelementptr inbounds i64, i64* %cloptr8096661, i64 0             ; &cloptr8096661[0]
  %f8096664 = load i64, i64* %i0ptr8096662, align 8                                  ; load; *i0ptr8096662
  %fptr8096663 = inttoptr i64 %f8096664 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096663(i64 %a8085917, i64 %rva8090303)             ; tail call
  ret void

else8096654:
  %arg8088089 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096665, i32 0, i32 0)); quoted string
  %retprim8086093 = call i64 @prim_halt(i64 %arg8088089)                             ; call prim_halt
  %cloptr8096666 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096668 = getelementptr inbounds i64, i64* %cloptr8096666, i64 1              ; &eptr8096668[1]
  %eptr8096669 = getelementptr inbounds i64, i64* %cloptr8096666, i64 2              ; &eptr8096669[2]
  %eptr8096670 = getelementptr inbounds i64, i64* %cloptr8096666, i64 3              ; &eptr8096670[3]
  store i64 %xD5$b, i64* %eptr8096668                                                ; *eptr8096668 = %xD5$b
  store i64 %prO$a, i64* %eptr8096669                                                ; *eptr8096669 = %prO$a
  store i64 %UXs$c, i64* %eptr8096670                                                ; *eptr8096670 = %UXs$c
  %eptr8096667 = getelementptr inbounds i64, i64* %cloptr8096666, i64 0              ; &cloptr8096666[0]
  %f8096671 = ptrtoint void(i64,i64)* @lam8091479 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096671, i64* %eptr8096667                                             ; store fptr
  %arg8088092 = ptrtoint i64* %cloptr8096666 to i64                                  ; closure cast; i64* -> i64
  %arg8088091 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090330 = add i64 0, 0                                                         ; quoted ()
  %rva8090329 = call i64 @prim_cons(i64 %retprim8086093, i64 %rva8090330)            ; call prim_cons
  %rva8090328 = call i64 @prim_cons(i64 %arg8088091, i64 %rva8090329)                ; call prim_cons
  %cloptr8096672 = inttoptr i64 %arg8088092 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096673 = getelementptr inbounds i64, i64* %cloptr8096672, i64 0             ; &cloptr8096672[0]
  %f8096675 = load i64, i64* %i0ptr8096673, align 8                                  ; load; *i0ptr8096673
  %fptr8096674 = inttoptr i64 %f8096675 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096674(i64 %arg8088092, i64 %rva8090328)           ; tail call
  ret void
}


define void @lam8091479(i64 %env8091480, i64 %rvp8090327) {
  %envptr8096676 = inttoptr i64 %env8091480 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096677 = getelementptr inbounds i64, i64* %envptr8096676, i64 3            ; &envptr8096676[3]
  %UXs$c = load i64, i64* %envptr8096677, align 8                                    ; load; *envptr8096677
  %envptr8096678 = inttoptr i64 %env8091480 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096679 = getelementptr inbounds i64, i64* %envptr8096678, i64 2            ; &envptr8096678[2]
  %prO$a = load i64, i64* %envptr8096679, align 8                                    ; load; *envptr8096679
  %envptr8096680 = inttoptr i64 %env8091480 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096681 = getelementptr inbounds i64, i64* %envptr8096680, i64 1            ; &envptr8096680[1]
  %xD5$b = load i64, i64* %envptr8096681, align 8                                    ; load; *envptr8096681
  %_958086088 = call i64 @prim_car(i64 %rvp8090327)                                  ; call prim_car
  %rvp8090326 = call i64 @prim_cdr(i64 %rvp8090327)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090326)                                    ; call prim_car
  %na8090307 = call i64 @prim_cdr(i64 %rvp8090326)                                   ; call prim_cdr
  %cloptr8096682 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096683 = getelementptr inbounds i64, i64* %cloptr8096682, i64 0              ; &cloptr8096682[0]
  %f8096684 = ptrtoint void(i64,i64)* @lam8091477 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096684, i64* %eptr8096683                                             ; store fptr
  %arg8088094 = ptrtoint i64* %cloptr8096682 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096685 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096687 = getelementptr inbounds i64, i64* %cloptr8096685, i64 1              ; &eptr8096687[1]
  %eptr8096688 = getelementptr inbounds i64, i64* %cloptr8096685, i64 2              ; &eptr8096688[2]
  %eptr8096689 = getelementptr inbounds i64, i64* %cloptr8096685, i64 3              ; &eptr8096689[3]
  store i64 %xD5$b, i64* %eptr8096687                                                ; *eptr8096687 = %xD5$b
  store i64 %prO$a, i64* %eptr8096688                                                ; *eptr8096688 = %prO$a
  store i64 %UXs$c, i64* %eptr8096689                                                ; *eptr8096689 = %UXs$c
  %eptr8096686 = getelementptr inbounds i64, i64* %cloptr8096685, i64 0              ; &cloptr8096685[0]
  %f8096690 = ptrtoint void(i64,i64)* @lam8091473 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096690, i64* %eptr8096686                                             ; store fptr
  %arg8088093 = ptrtoint i64* %cloptr8096685 to i64                                  ; closure cast; i64* -> i64
  %rva8090325 = add i64 0, 0                                                         ; quoted ()
  %rva8090324 = call i64 @prim_cons(i64 %arg8088093, i64 %rva8090325)                ; call prim_cons
  %cloptr8096691 = inttoptr i64 %arg8088094 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096692 = getelementptr inbounds i64, i64* %cloptr8096691, i64 0             ; &cloptr8096691[0]
  %f8096694 = load i64, i64* %i0ptr8096692, align 8                                  ; load; *i0ptr8096692
  %fptr8096693 = inttoptr i64 %f8096694 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096693(i64 %arg8088094, i64 %rva8090324)           ; tail call
  ret void
}


define void @lam8091477(i64 %env8091478, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8088098 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090310 = add i64 0, 0                                                         ; quoted ()
  %rva8090309 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090310)                   ; call prim_cons
  %rva8090308 = call i64 @prim_cons(i64 %arg8088098, i64 %rva8090309)                ; call prim_cons
  %cloptr8096695 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096696 = getelementptr inbounds i64, i64* %cloptr8096695, i64 0             ; &cloptr8096695[0]
  %f8096698 = load i64, i64* %i0ptr8096696, align 8                                  ; load; *i0ptr8096696
  %fptr8096697 = inttoptr i64 %f8096698 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096697(i64 %cont8086091, i64 %rva8090308)          ; tail call
  ret void
}


define void @lam8091473(i64 %env8091474, i64 %rvp8090323) {
  %envptr8096699 = inttoptr i64 %env8091474 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096700 = getelementptr inbounds i64, i64* %envptr8096699, i64 3            ; &envptr8096699[3]
  %UXs$c = load i64, i64* %envptr8096700, align 8                                    ; load; *envptr8096700
  %envptr8096701 = inttoptr i64 %env8091474 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096702 = getelementptr inbounds i64, i64* %envptr8096701, i64 2            ; &envptr8096701[2]
  %prO$a = load i64, i64* %envptr8096702, align 8                                    ; load; *envptr8096702
  %envptr8096703 = inttoptr i64 %env8091474 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096704 = getelementptr inbounds i64, i64* %envptr8096703, i64 1            ; &envptr8096703[1]
  %xD5$b = load i64, i64* %envptr8096704, align 8                                    ; load; *envptr8096704
  %_958086089 = call i64 @prim_car(i64 %rvp8090323)                                  ; call prim_car
  %rvp8090322 = call i64 @prim_cdr(i64 %rvp8090323)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090322)                                    ; call prim_car
  %na8090312 = call i64 @prim_cdr(i64 %rvp8090322)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8088107 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096705, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8088107, i64 %a8085926)              ; call prim_cons
  %cloptr8096706 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096707 = getelementptr inbounds i64, i64* %cloptr8096706, i64 0              ; &cloptr8096706[0]
  %f8096708 = ptrtoint void(i64,i64)* @lam8091470 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096708, i64* %eptr8096707                                             ; store fptr
  %arg8088110 = ptrtoint i64* %cloptr8096706 to i64                                  ; closure cast; i64* -> i64
  %arg8088109 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090321 = add i64 0, 0                                                         ; quoted ()
  %rva8090320 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090321)            ; call prim_cons
  %rva8090319 = call i64 @prim_cons(i64 %arg8088109, i64 %rva8090320)                ; call prim_cons
  %cloptr8096709 = inttoptr i64 %arg8088110 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096710 = getelementptr inbounds i64, i64* %cloptr8096709, i64 0             ; &cloptr8096709[0]
  %f8096712 = load i64, i64* %i0ptr8096710, align 8                                  ; load; *i0ptr8096710
  %fptr8096711 = inttoptr i64 %f8096712 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096711(i64 %arg8088110, i64 %rva8090319)           ; tail call
  ret void
}


define void @lam8091470(i64 %env8091471, i64 %rvp8090318) {
  %_950 = call i64 @prim_car(i64 %rvp8090318)                                        ; call prim_car
  %rvp8090317 = call i64 @prim_cdr(i64 %rvp8090318)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090317)                                           ; call prim_car
  %na8090314 = call i64 @prim_cdr(i64 %rvp8090317)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090316 = add i64 0, 0                                                         ; quoted ()
  %rva8090315 = call i64 @prim_cons(i64 %_951, i64 %rva8090316)                      ; call prim_cons
  %cloptr8096713 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096714 = getelementptr inbounds i64, i64* %cloptr8096713, i64 0             ; &cloptr8096713[0]
  %f8096716 = load i64, i64* %i0ptr8096714, align 8                                  ; load; *i0ptr8096714
  %fptr8096715 = inttoptr i64 %f8096716 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096715(i64 %_951, i64 %rva8090315)                 ; tail call
  ret void
}


define void @lam8091461(i64 %env8091462, i64 %rvp8090302) {
  %envptr8096717 = inttoptr i64 %env8091462 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096718 = getelementptr inbounds i64, i64* %envptr8096717, i64 3            ; &envptr8096717[3]
  %UXs$c = load i64, i64* %envptr8096718, align 8                                    ; load; *envptr8096718
  %envptr8096719 = inttoptr i64 %env8091462 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096720 = getelementptr inbounds i64, i64* %envptr8096719, i64 2            ; &envptr8096719[2]
  %prO$a = load i64, i64* %envptr8096720, align 8                                    ; load; *envptr8096720
  %envptr8096721 = inttoptr i64 %env8091462 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096722 = getelementptr inbounds i64, i64* %envptr8096721, i64 1            ; &envptr8096721[1]
  %xD5$b = load i64, i64* %envptr8096722, align 8                                    ; load; *envptr8096722
  %_958086088 = call i64 @prim_car(i64 %rvp8090302)                                  ; call prim_car
  %rvp8090301 = call i64 @prim_cdr(i64 %rvp8090302)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090301)                                    ; call prim_car
  %na8090282 = call i64 @prim_cdr(i64 %rvp8090301)                                   ; call prim_cdr
  %cloptr8096723 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096724 = getelementptr inbounds i64, i64* %cloptr8096723, i64 0              ; &cloptr8096723[0]
  %f8096725 = ptrtoint void(i64,i64)* @lam8091459 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096725, i64* %eptr8096724                                             ; store fptr
  %arg8088069 = ptrtoint i64* %cloptr8096723 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096726 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096728 = getelementptr inbounds i64, i64* %cloptr8096726, i64 1              ; &eptr8096728[1]
  %eptr8096729 = getelementptr inbounds i64, i64* %cloptr8096726, i64 2              ; &eptr8096729[2]
  %eptr8096730 = getelementptr inbounds i64, i64* %cloptr8096726, i64 3              ; &eptr8096730[3]
  store i64 %xD5$b, i64* %eptr8096728                                                ; *eptr8096728 = %xD5$b
  store i64 %prO$a, i64* %eptr8096729                                                ; *eptr8096729 = %prO$a
  store i64 %UXs$c, i64* %eptr8096730                                                ; *eptr8096730 = %UXs$c
  %eptr8096727 = getelementptr inbounds i64, i64* %cloptr8096726, i64 0              ; &cloptr8096726[0]
  %f8096731 = ptrtoint void(i64,i64)* @lam8091455 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096731, i64* %eptr8096727                                             ; store fptr
  %arg8088068 = ptrtoint i64* %cloptr8096726 to i64                                  ; closure cast; i64* -> i64
  %rva8090300 = add i64 0, 0                                                         ; quoted ()
  %rva8090299 = call i64 @prim_cons(i64 %arg8088068, i64 %rva8090300)                ; call prim_cons
  %cloptr8096732 = inttoptr i64 %arg8088069 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096733 = getelementptr inbounds i64, i64* %cloptr8096732, i64 0             ; &cloptr8096732[0]
  %f8096735 = load i64, i64* %i0ptr8096733, align 8                                  ; load; *i0ptr8096733
  %fptr8096734 = inttoptr i64 %f8096735 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096734(i64 %arg8088069, i64 %rva8090299)           ; tail call
  ret void
}


define void @lam8091459(i64 %env8091460, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8088073 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090285 = add i64 0, 0                                                         ; quoted ()
  %rva8090284 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090285)                   ; call prim_cons
  %rva8090283 = call i64 @prim_cons(i64 %arg8088073, i64 %rva8090284)                ; call prim_cons
  %cloptr8096736 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096737 = getelementptr inbounds i64, i64* %cloptr8096736, i64 0             ; &cloptr8096736[0]
  %f8096739 = load i64, i64* %i0ptr8096737, align 8                                  ; load; *i0ptr8096737
  %fptr8096738 = inttoptr i64 %f8096739 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096738(i64 %cont8086091, i64 %rva8090283)          ; tail call
  ret void
}


define void @lam8091455(i64 %env8091456, i64 %rvp8090298) {
  %envptr8096740 = inttoptr i64 %env8091456 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096741 = getelementptr inbounds i64, i64* %envptr8096740, i64 3            ; &envptr8096740[3]
  %UXs$c = load i64, i64* %envptr8096741, align 8                                    ; load; *envptr8096741
  %envptr8096742 = inttoptr i64 %env8091456 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096743 = getelementptr inbounds i64, i64* %envptr8096742, i64 2            ; &envptr8096742[2]
  %prO$a = load i64, i64* %envptr8096743, align 8                                    ; load; *envptr8096743
  %envptr8096744 = inttoptr i64 %env8091456 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096745 = getelementptr inbounds i64, i64* %envptr8096744, i64 1            ; &envptr8096744[1]
  %xD5$b = load i64, i64* %envptr8096745, align 8                                    ; load; *envptr8096745
  %_958086089 = call i64 @prim_car(i64 %rvp8090298)                                  ; call prim_car
  %rvp8090297 = call i64 @prim_cdr(i64 %rvp8090298)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090297)                                    ; call prim_car
  %na8090287 = call i64 @prim_cdr(i64 %rvp8090297)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8088082 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096746, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8088082, i64 %a8085926)              ; call prim_cons
  %cloptr8096747 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096748 = getelementptr inbounds i64, i64* %cloptr8096747, i64 0              ; &cloptr8096747[0]
  %f8096749 = ptrtoint void(i64,i64)* @lam8091452 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096749, i64* %eptr8096748                                             ; store fptr
  %arg8088085 = ptrtoint i64* %cloptr8096747 to i64                                  ; closure cast; i64* -> i64
  %arg8088084 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090296 = add i64 0, 0                                                         ; quoted ()
  %rva8090295 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090296)            ; call prim_cons
  %rva8090294 = call i64 @prim_cons(i64 %arg8088084, i64 %rva8090295)                ; call prim_cons
  %cloptr8096750 = inttoptr i64 %arg8088085 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096751 = getelementptr inbounds i64, i64* %cloptr8096750, i64 0             ; &cloptr8096750[0]
  %f8096753 = load i64, i64* %i0ptr8096751, align 8                                  ; load; *i0ptr8096751
  %fptr8096752 = inttoptr i64 %f8096753 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096752(i64 %arg8088085, i64 %rva8090294)           ; tail call
  ret void
}


define void @lam8091452(i64 %env8091453, i64 %rvp8090293) {
  %_950 = call i64 @prim_car(i64 %rvp8090293)                                        ; call prim_car
  %rvp8090292 = call i64 @prim_cdr(i64 %rvp8090293)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090292)                                           ; call prim_car
  %na8090289 = call i64 @prim_cdr(i64 %rvp8090292)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090291 = add i64 0, 0                                                         ; quoted ()
  %rva8090290 = call i64 @prim_cons(i64 %_951, i64 %rva8090291)                      ; call prim_cons
  %cloptr8096754 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096755 = getelementptr inbounds i64, i64* %cloptr8096754, i64 0             ; &cloptr8096754[0]
  %f8096757 = load i64, i64* %i0ptr8096755, align 8                                  ; load; *i0ptr8096755
  %fptr8096756 = inttoptr i64 %f8096757 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096756(i64 %_951, i64 %rva8090290)                 ; tail call
  ret void
}


define void @lam8091438(i64 %env8091439, i64 %Mkl$lst8086104) {
  %cont8086103 = call i64 @prim_car(i64 %Mkl$lst8086104)                             ; call prim_car
  %Mkl$lst = call i64 @prim_cdr(i64 %Mkl$lst8086104)                                 ; call prim_cdr
  %arg8087646 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089982 = add i64 0, 0                                                         ; quoted ()
  %rva8089981 = call i64 @prim_cons(i64 %Mkl$lst, i64 %rva8089982)                   ; call prim_cons
  %rva8089980 = call i64 @prim_cons(i64 %arg8087646, i64 %rva8089981)                ; call prim_cons
  %cloptr8096758 = inttoptr i64 %cont8086103 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096759 = getelementptr inbounds i64, i64* %cloptr8096758, i64 0             ; &cloptr8096758[0]
  %f8096761 = load i64, i64* %i0ptr8096759, align 8                                  ; load; *i0ptr8096759
  %fptr8096760 = inttoptr i64 %f8096761 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096760(i64 %cont8086103, i64 %rva8089980)          ; tail call
  ret void
}


define void @lam8091434(i64 %env8091435, i64 %rvp8090262) {
  %envptr8096762 = inttoptr i64 %env8091435 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096763 = getelementptr inbounds i64, i64* %envptr8096762, i64 3            ; &envptr8096762[3]
  %U6p$assert = load i64, i64* %envptr8096763, align 8                               ; load; *envptr8096763
  %envptr8096764 = inttoptr i64 %env8091435 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096765 = getelementptr inbounds i64, i64* %envptr8096764, i64 2            ; &envptr8096764[2]
  %a8085892 = load i64, i64* %envptr8096765, align 8                                 ; load; *envptr8096765
  %envptr8096766 = inttoptr i64 %env8091435 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096767 = getelementptr inbounds i64, i64* %envptr8096766, i64 1            ; &envptr8096766[1]
  %I2S$amb = load i64, i64* %envptr8096767, align 8                                  ; load; *envptr8096767
  %_958086102 = call i64 @prim_car(i64 %rvp8090262)                                  ; call prim_car
  %rvp8090261 = call i64 @prim_cdr(i64 %rvp8090262)                                  ; call prim_cdr
  %a8085893 = call i64 @prim_car(i64 %rvp8090261)                                    ; call prim_car
  %na8089984 = call i64 @prim_cdr(i64 %rvp8090261)                                   ; call prim_cdr
  %arg8087649 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8085894 = call i64 @prim_cons(i64 %arg8087649, i64 %a8085893)                    ; call prim_cons
  %arg8087651 = call i64 @const_init_int(i64 4)                                      ; quoted int
  %a8085895 = call i64 @prim_cons(i64 %arg8087651, i64 %a8085894)                    ; call prim_cons
  %arg8087653 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %a8085896 = call i64 @prim_cons(i64 %arg8087653, i64 %a8085895)                    ; call prim_cons
  %arg8087655 = call i64 @const_init_int(i64 2)                                      ; quoted int
  %a8085897 = call i64 @prim_cons(i64 %arg8087655, i64 %a8085896)                    ; call prim_cons
  %cloptr8096768 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8096770 = getelementptr inbounds i64, i64* %cloptr8096768, i64 1              ; &eptr8096770[1]
  %eptr8096771 = getelementptr inbounds i64, i64* %cloptr8096768, i64 2              ; &eptr8096771[2]
  store i64 %I2S$amb, i64* %eptr8096770                                              ; *eptr8096770 = %I2S$amb
  store i64 %U6p$assert, i64* %eptr8096771                                           ; *eptr8096771 = %U6p$assert
  %eptr8096769 = getelementptr inbounds i64, i64* %cloptr8096768, i64 0              ; &cloptr8096768[0]
  %f8096772 = ptrtoint void(i64,i64)* @lam8091428 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096772, i64* %eptr8096769                                             ; store fptr
  %arg8087657 = ptrtoint i64* %cloptr8096768 to i64                                  ; closure cast; i64* -> i64
  %rva8090260 = add i64 0, 0                                                         ; quoted ()
  %rva8090259 = call i64 @prim_cons(i64 %a8085897, i64 %rva8090260)                  ; call prim_cons
  %rva8090258 = call i64 @prim_cons(i64 %arg8087657, i64 %rva8090259)                ; call prim_cons
  %cloptr8096773 = inttoptr i64 %a8085892 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096774 = getelementptr inbounds i64, i64* %cloptr8096773, i64 0             ; &cloptr8096773[0]
  %f8096776 = load i64, i64* %i0ptr8096774, align 8                                  ; load; *i0ptr8096774
  %fptr8096775 = inttoptr i64 %f8096776 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096775(i64 %a8085892, i64 %rva8090258)             ; tail call
  ret void
}


define void @lam8091428(i64 %env8091429, i64 %rvp8090257) {
  %envptr8096777 = inttoptr i64 %env8091429 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096778 = getelementptr inbounds i64, i64* %envptr8096777, i64 2            ; &envptr8096777[2]
  %U6p$assert = load i64, i64* %envptr8096778, align 8                               ; load; *envptr8096778
  %envptr8096779 = inttoptr i64 %env8091429 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096780 = getelementptr inbounds i64, i64* %envptr8096779, i64 1            ; &envptr8096779[1]
  %I2S$amb = load i64, i64* %envptr8096780, align 8                                  ; load; *envptr8096780
  %_958086085 = call i64 @prim_car(i64 %rvp8090257)                                  ; call prim_car
  %rvp8090256 = call i64 @prim_cdr(i64 %rvp8090257)                                  ; call prim_cdr
  %prO$a = call i64 @prim_car(i64 %rvp8090256)                                       ; call prim_car
  %na8089986 = call i64 @prim_cdr(i64 %rvp8090256)                                   ; call prim_cdr
  %arg8087659 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085898 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8087659)             ; call prim_vector_45ref
  %a8085899 = call i64 @prim_procedure_63(i64 %a8085898)                             ; call prim_procedure_63
  %cmp8096781 = icmp eq i64 %a8085899, 15                                            ; false?
  br i1 %cmp8096781, label %else8096783, label %then8096782                          ; if

then8096782:
  %arg8087662 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085900 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8087662)             ; call prim_vector_45ref
  %cloptr8096784 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096785 = getelementptr inbounds i64, i64* %cloptr8096784, i64 0              ; &cloptr8096784[0]
  %f8096786 = ptrtoint void(i64,i64)* @lam8091326 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096786, i64* %eptr8096785                                             ; store fptr
  %arg8087665 = ptrtoint i64* %cloptr8096784 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096787 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096789 = getelementptr inbounds i64, i64* %cloptr8096787, i64 1              ; &eptr8096789[1]
  %eptr8096790 = getelementptr inbounds i64, i64* %cloptr8096787, i64 2              ; &eptr8096790[2]
  %eptr8096791 = getelementptr inbounds i64, i64* %cloptr8096787, i64 3              ; &eptr8096791[3]
  %eptr8096792 = getelementptr inbounds i64, i64* %cloptr8096787, i64 4              ; &eptr8096792[4]
  store i64 %I2S$amb, i64* %eptr8096789                                              ; *eptr8096789 = %I2S$amb
  store i64 %prO$a, i64* %eptr8096790                                                ; *eptr8096790 = %prO$a
  store i64 %a8085900, i64* %eptr8096791                                             ; *eptr8096791 = %a8085900
  store i64 %U6p$assert, i64* %eptr8096792                                           ; *eptr8096792 = %U6p$assert
  %eptr8096788 = getelementptr inbounds i64, i64* %cloptr8096787, i64 0              ; &cloptr8096787[0]
  %f8096793 = ptrtoint void(i64,i64)* @lam8091322 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096793, i64* %eptr8096788                                             ; store fptr
  %arg8087664 = ptrtoint i64* %cloptr8096787 to i64                                  ; closure cast; i64* -> i64
  %rva8090125 = add i64 0, 0                                                         ; quoted ()
  %rva8090124 = call i64 @prim_cons(i64 %arg8087664, i64 %rva8090125)                ; call prim_cons
  %cloptr8096794 = inttoptr i64 %arg8087665 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096795 = getelementptr inbounds i64, i64* %cloptr8096794, i64 0             ; &cloptr8096794[0]
  %f8096797 = load i64, i64* %i0ptr8096795, align 8                                  ; load; *i0ptr8096795
  %fptr8096796 = inttoptr i64 %f8096797 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096796(i64 %arg8087665, i64 %rva8090124)           ; tail call
  ret void

else8096783:
  %arg8087839 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096798, i32 0, i32 0)); quoted string
  %retprim8086101 = call i64 @prim_halt(i64 %arg8087839)                             ; call prim_halt
  %cloptr8096799 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096801 = getelementptr inbounds i64, i64* %cloptr8096799, i64 1              ; &eptr8096801[1]
  %eptr8096802 = getelementptr inbounds i64, i64* %cloptr8096799, i64 2              ; &eptr8096802[2]
  %eptr8096803 = getelementptr inbounds i64, i64* %cloptr8096799, i64 3              ; &eptr8096803[3]
  store i64 %I2S$amb, i64* %eptr8096801                                              ; *eptr8096801 = %I2S$amb
  store i64 %prO$a, i64* %eptr8096802                                                ; *eptr8096802 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096803                                           ; *eptr8096803 = %U6p$assert
  %eptr8096800 = getelementptr inbounds i64, i64* %cloptr8096799, i64 0              ; &cloptr8096799[0]
  %f8096804 = ptrtoint void(i64,i64)* @lam8091424 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096804, i64* %eptr8096800                                             ; store fptr
  %arg8087842 = ptrtoint i64* %cloptr8096799 to i64                                  ; closure cast; i64* -> i64
  %arg8087841 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090255 = add i64 0, 0                                                         ; quoted ()
  %rva8090254 = call i64 @prim_cons(i64 %retprim8086101, i64 %rva8090255)            ; call prim_cons
  %rva8090253 = call i64 @prim_cons(i64 %arg8087841, i64 %rva8090254)                ; call prim_cons
  %cloptr8096805 = inttoptr i64 %arg8087842 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096806 = getelementptr inbounds i64, i64* %cloptr8096805, i64 0             ; &cloptr8096805[0]
  %f8096808 = load i64, i64* %i0ptr8096806, align 8                                  ; load; *i0ptr8096806
  %fptr8096807 = inttoptr i64 %f8096808 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096807(i64 %arg8087842, i64 %rva8090253)           ; tail call
  ret void
}


define void @lam8091424(i64 %env8091425, i64 %rvp8090252) {
  %envptr8096809 = inttoptr i64 %env8091425 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096810 = getelementptr inbounds i64, i64* %envptr8096809, i64 3            ; &envptr8096809[3]
  %U6p$assert = load i64, i64* %envptr8096810, align 8                               ; load; *envptr8096810
  %envptr8096811 = inttoptr i64 %env8091425 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096812 = getelementptr inbounds i64, i64* %envptr8096811, i64 2            ; &envptr8096811[2]
  %prO$a = load i64, i64* %envptr8096812, align 8                                    ; load; *envptr8096812
  %envptr8096813 = inttoptr i64 %env8091425 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096814 = getelementptr inbounds i64, i64* %envptr8096813, i64 1            ; &envptr8096813[1]
  %I2S$amb = load i64, i64* %envptr8096814, align 8                                  ; load; *envptr8096814
  %_958086086 = call i64 @prim_car(i64 %rvp8090252)                                  ; call prim_car
  %rvp8090251 = call i64 @prim_cdr(i64 %rvp8090252)                                  ; call prim_cdr
  %xD5$b = call i64 @prim_car(i64 %rvp8090251)                                       ; call prim_car
  %na8090127 = call i64 @prim_cdr(i64 %rvp8090251)                                   ; call prim_cdr
  %arg8087843 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085907 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8087843)             ; call prim_vector_45ref
  %a8085908 = call i64 @prim_procedure_63(i64 %a8085907)                             ; call prim_procedure_63
  %cmp8096815 = icmp eq i64 %a8085908, 15                                            ; false?
  br i1 %cmp8096815, label %else8096817, label %then8096816                          ; if

then8096816:
  %arg8087846 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085909 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8087846)             ; call prim_vector_45ref
  %cloptr8096818 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096819 = getelementptr inbounds i64, i64* %cloptr8096818, i64 0              ; &cloptr8096818[0]
  %f8096820 = ptrtoint void(i64,i64)* @lam8091379 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096820, i64* %eptr8096819                                             ; store fptr
  %arg8087849 = ptrtoint i64* %cloptr8096818 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096821 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8096823 = getelementptr inbounds i64, i64* %cloptr8096821, i64 1              ; &eptr8096823[1]
  %eptr8096824 = getelementptr inbounds i64, i64* %cloptr8096821, i64 2              ; &eptr8096824[2]
  %eptr8096825 = getelementptr inbounds i64, i64* %cloptr8096821, i64 3              ; &eptr8096825[3]
  %eptr8096826 = getelementptr inbounds i64, i64* %cloptr8096821, i64 4              ; &eptr8096826[4]
  store i64 %xD5$b, i64* %eptr8096823                                                ; *eptr8096823 = %xD5$b
  store i64 %prO$a, i64* %eptr8096824                                                ; *eptr8096824 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096825                                           ; *eptr8096825 = %U6p$assert
  store i64 %a8085909, i64* %eptr8096826                                             ; *eptr8096826 = %a8085909
  %eptr8096822 = getelementptr inbounds i64, i64* %cloptr8096821, i64 0              ; &cloptr8096821[0]
  %f8096827 = ptrtoint void(i64,i64)* @lam8091375 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096827, i64* %eptr8096822                                             ; store fptr
  %arg8087848 = ptrtoint i64* %cloptr8096821 to i64                                  ; closure cast; i64* -> i64
  %rva8090193 = add i64 0, 0                                                         ; quoted ()
  %rva8090192 = call i64 @prim_cons(i64 %arg8087848, i64 %rva8090193)                ; call prim_cons
  %cloptr8096828 = inttoptr i64 %arg8087849 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096829 = getelementptr inbounds i64, i64* %cloptr8096828, i64 0             ; &cloptr8096828[0]
  %f8096831 = load i64, i64* %i0ptr8096829, align 8                                  ; load; *i0ptr8096829
  %fptr8096830 = inttoptr i64 %f8096831 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096830(i64 %arg8087849, i64 %rva8090192)           ; tail call
  ret void

else8096817:
  %arg8087930 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096832, i32 0, i32 0)); quoted string
  %retprim8086097 = call i64 @prim_halt(i64 %arg8087930)                             ; call prim_halt
  %cloptr8096833 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096835 = getelementptr inbounds i64, i64* %cloptr8096833, i64 1              ; &eptr8096835[1]
  %eptr8096836 = getelementptr inbounds i64, i64* %cloptr8096833, i64 2              ; &eptr8096836[2]
  %eptr8096837 = getelementptr inbounds i64, i64* %cloptr8096833, i64 3              ; &eptr8096837[3]
  store i64 %xD5$b, i64* %eptr8096835                                                ; *eptr8096835 = %xD5$b
  store i64 %prO$a, i64* %eptr8096836                                                ; *eptr8096836 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096837                                           ; *eptr8096837 = %U6p$assert
  %eptr8096834 = getelementptr inbounds i64, i64* %cloptr8096833, i64 0              ; &cloptr8096833[0]
  %f8096838 = ptrtoint void(i64,i64)* @lam8091420 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096838, i64* %eptr8096834                                             ; store fptr
  %arg8087933 = ptrtoint i64* %cloptr8096833 to i64                                  ; closure cast; i64* -> i64
  %arg8087932 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090250 = add i64 0, 0                                                         ; quoted ()
  %rva8090249 = call i64 @prim_cons(i64 %retprim8086097, i64 %rva8090250)            ; call prim_cons
  %rva8090248 = call i64 @prim_cons(i64 %arg8087932, i64 %rva8090249)                ; call prim_cons
  %cloptr8096839 = inttoptr i64 %arg8087933 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096840 = getelementptr inbounds i64, i64* %cloptr8096839, i64 0             ; &cloptr8096839[0]
  %f8096842 = load i64, i64* %i0ptr8096840, align 8                                  ; load; *i0ptr8096840
  %fptr8096841 = inttoptr i64 %f8096842 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096841(i64 %arg8087933, i64 %rva8090248)           ; tail call
  ret void
}


define void @lam8091420(i64 %env8091421, i64 %rvp8090247) {
  %envptr8096843 = inttoptr i64 %env8091421 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096844 = getelementptr inbounds i64, i64* %envptr8096843, i64 3            ; &envptr8096843[3]
  %U6p$assert = load i64, i64* %envptr8096844, align 8                               ; load; *envptr8096844
  %envptr8096845 = inttoptr i64 %env8091421 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096846 = getelementptr inbounds i64, i64* %envptr8096845, i64 2            ; &envptr8096845[2]
  %prO$a = load i64, i64* %envptr8096846, align 8                                    ; load; *envptr8096846
  %envptr8096847 = inttoptr i64 %env8091421 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096848 = getelementptr inbounds i64, i64* %envptr8096847, i64 1            ; &envptr8096847[1]
  %xD5$b = load i64, i64* %envptr8096848, align 8                                    ; load; *envptr8096848
  %_958086087 = call i64 @prim_car(i64 %rvp8090247)                                  ; call prim_car
  %rvp8090246 = call i64 @prim_cdr(i64 %rvp8090247)                                  ; call prim_cdr
  %UXs$c = call i64 @prim_car(i64 %rvp8090246)                                       ; call prim_car
  %na8090195 = call i64 @prim_cdr(i64 %rvp8090246)                                   ; call prim_cdr
  %arg8087934 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085915 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8087934)          ; call prim_vector_45ref
  %a8085916 = call i64 @prim_procedure_63(i64 %a8085915)                             ; call prim_procedure_63
  %cmp8096849 = icmp eq i64 %a8085916, 15                                            ; false?
  br i1 %cmp8096849, label %else8096851, label %then8096850                          ; if

then8096850:
  %arg8087937 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085917 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8087937)          ; call prim_vector_45ref
  %a8085918 = call i64 @prim__42(i64 %prO$a, i64 %prO$a)                             ; call prim__42
  %a8085919 = call i64 @prim__42(i64 %xD5$b, i64 %xD5$b)                             ; call prim__42
  %a8085920 = call i64 @prim__43(i64 %a8085918, i64 %a8085919)                       ; call prim__43
  %a8085921 = call i64 @prim__42(i64 %UXs$c, i64 %UXs$c)                             ; call prim__42
  %a8085922 = call i64 @prim__61(i64 %a8085920, i64 %a8085921)                       ; call prim__61
  %cloptr8096852 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096854 = getelementptr inbounds i64, i64* %cloptr8096852, i64 1              ; &eptr8096854[1]
  %eptr8096855 = getelementptr inbounds i64, i64* %cloptr8096852, i64 2              ; &eptr8096855[2]
  %eptr8096856 = getelementptr inbounds i64, i64* %cloptr8096852, i64 3              ; &eptr8096856[3]
  store i64 %xD5$b, i64* %eptr8096854                                                ; *eptr8096854 = %xD5$b
  store i64 %prO$a, i64* %eptr8096855                                                ; *eptr8096855 = %prO$a
  store i64 %UXs$c, i64* %eptr8096856                                                ; *eptr8096856 = %UXs$c
  %eptr8096853 = getelementptr inbounds i64, i64* %cloptr8096852, i64 0              ; &cloptr8096852[0]
  %f8096857 = ptrtoint void(i64,i64)* @lam8091398 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096857, i64* %eptr8096853                                             ; store fptr
  %arg8087950 = ptrtoint i64* %cloptr8096852 to i64                                  ; closure cast; i64* -> i64
  %rva8090220 = add i64 0, 0                                                         ; quoted ()
  %rva8090219 = call i64 @prim_cons(i64 %a8085922, i64 %rva8090220)                  ; call prim_cons
  %rva8090218 = call i64 @prim_cons(i64 %arg8087950, i64 %rva8090219)                ; call prim_cons
  %cloptr8096858 = inttoptr i64 %a8085917 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096859 = getelementptr inbounds i64, i64* %cloptr8096858, i64 0             ; &cloptr8096858[0]
  %f8096861 = load i64, i64* %i0ptr8096859, align 8                                  ; load; *i0ptr8096859
  %fptr8096860 = inttoptr i64 %f8096861 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096860(i64 %a8085917, i64 %rva8090218)             ; tail call
  ret void

else8096851:
  %arg8087973 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096862, i32 0, i32 0)); quoted string
  %retprim8086093 = call i64 @prim_halt(i64 %arg8087973)                             ; call prim_halt
  %cloptr8096863 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096865 = getelementptr inbounds i64, i64* %cloptr8096863, i64 1              ; &eptr8096865[1]
  %eptr8096866 = getelementptr inbounds i64, i64* %cloptr8096863, i64 2              ; &eptr8096866[2]
  %eptr8096867 = getelementptr inbounds i64, i64* %cloptr8096863, i64 3              ; &eptr8096867[3]
  store i64 %xD5$b, i64* %eptr8096865                                                ; *eptr8096865 = %xD5$b
  store i64 %prO$a, i64* %eptr8096866                                                ; *eptr8096866 = %prO$a
  store i64 %UXs$c, i64* %eptr8096867                                                ; *eptr8096867 = %UXs$c
  %eptr8096864 = getelementptr inbounds i64, i64* %cloptr8096863, i64 0              ; &cloptr8096863[0]
  %f8096868 = ptrtoint void(i64,i64)* @lam8091416 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096868, i64* %eptr8096864                                             ; store fptr
  %arg8087976 = ptrtoint i64* %cloptr8096863 to i64                                  ; closure cast; i64* -> i64
  %arg8087975 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090245 = add i64 0, 0                                                         ; quoted ()
  %rva8090244 = call i64 @prim_cons(i64 %retprim8086093, i64 %rva8090245)            ; call prim_cons
  %rva8090243 = call i64 @prim_cons(i64 %arg8087975, i64 %rva8090244)                ; call prim_cons
  %cloptr8096869 = inttoptr i64 %arg8087976 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096870 = getelementptr inbounds i64, i64* %cloptr8096869, i64 0             ; &cloptr8096869[0]
  %f8096872 = load i64, i64* %i0ptr8096870, align 8                                  ; load; *i0ptr8096870
  %fptr8096871 = inttoptr i64 %f8096872 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096871(i64 %arg8087976, i64 %rva8090243)           ; tail call
  ret void
}


define void @lam8091416(i64 %env8091417, i64 %rvp8090242) {
  %envptr8096873 = inttoptr i64 %env8091417 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096874 = getelementptr inbounds i64, i64* %envptr8096873, i64 3            ; &envptr8096873[3]
  %UXs$c = load i64, i64* %envptr8096874, align 8                                    ; load; *envptr8096874
  %envptr8096875 = inttoptr i64 %env8091417 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096876 = getelementptr inbounds i64, i64* %envptr8096875, i64 2            ; &envptr8096875[2]
  %prO$a = load i64, i64* %envptr8096876, align 8                                    ; load; *envptr8096876
  %envptr8096877 = inttoptr i64 %env8091417 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096878 = getelementptr inbounds i64, i64* %envptr8096877, i64 1            ; &envptr8096877[1]
  %xD5$b = load i64, i64* %envptr8096878, align 8                                    ; load; *envptr8096878
  %_958086088 = call i64 @prim_car(i64 %rvp8090242)                                  ; call prim_car
  %rvp8090241 = call i64 @prim_cdr(i64 %rvp8090242)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090241)                                    ; call prim_car
  %na8090222 = call i64 @prim_cdr(i64 %rvp8090241)                                   ; call prim_cdr
  %cloptr8096879 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096880 = getelementptr inbounds i64, i64* %cloptr8096879, i64 0              ; &cloptr8096879[0]
  %f8096881 = ptrtoint void(i64,i64)* @lam8091414 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096881, i64* %eptr8096880                                             ; store fptr
  %arg8087978 = ptrtoint i64* %cloptr8096879 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096882 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096884 = getelementptr inbounds i64, i64* %cloptr8096882, i64 1              ; &eptr8096884[1]
  %eptr8096885 = getelementptr inbounds i64, i64* %cloptr8096882, i64 2              ; &eptr8096885[2]
  %eptr8096886 = getelementptr inbounds i64, i64* %cloptr8096882, i64 3              ; &eptr8096886[3]
  store i64 %xD5$b, i64* %eptr8096884                                                ; *eptr8096884 = %xD5$b
  store i64 %prO$a, i64* %eptr8096885                                                ; *eptr8096885 = %prO$a
  store i64 %UXs$c, i64* %eptr8096886                                                ; *eptr8096886 = %UXs$c
  %eptr8096883 = getelementptr inbounds i64, i64* %cloptr8096882, i64 0              ; &cloptr8096882[0]
  %f8096887 = ptrtoint void(i64,i64)* @lam8091410 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096887, i64* %eptr8096883                                             ; store fptr
  %arg8087977 = ptrtoint i64* %cloptr8096882 to i64                                  ; closure cast; i64* -> i64
  %rva8090240 = add i64 0, 0                                                         ; quoted ()
  %rva8090239 = call i64 @prim_cons(i64 %arg8087977, i64 %rva8090240)                ; call prim_cons
  %cloptr8096888 = inttoptr i64 %arg8087978 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096889 = getelementptr inbounds i64, i64* %cloptr8096888, i64 0             ; &cloptr8096888[0]
  %f8096891 = load i64, i64* %i0ptr8096889, align 8                                  ; load; *i0ptr8096889
  %fptr8096890 = inttoptr i64 %f8096891 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096890(i64 %arg8087978, i64 %rva8090239)           ; tail call
  ret void
}


define void @lam8091414(i64 %env8091415, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8087982 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090225 = add i64 0, 0                                                         ; quoted ()
  %rva8090224 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090225)                   ; call prim_cons
  %rva8090223 = call i64 @prim_cons(i64 %arg8087982, i64 %rva8090224)                ; call prim_cons
  %cloptr8096892 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096893 = getelementptr inbounds i64, i64* %cloptr8096892, i64 0             ; &cloptr8096892[0]
  %f8096895 = load i64, i64* %i0ptr8096893, align 8                                  ; load; *i0ptr8096893
  %fptr8096894 = inttoptr i64 %f8096895 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096894(i64 %cont8086091, i64 %rva8090223)          ; tail call
  ret void
}


define void @lam8091410(i64 %env8091411, i64 %rvp8090238) {
  %envptr8096896 = inttoptr i64 %env8091411 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096897 = getelementptr inbounds i64, i64* %envptr8096896, i64 3            ; &envptr8096896[3]
  %UXs$c = load i64, i64* %envptr8096897, align 8                                    ; load; *envptr8096897
  %envptr8096898 = inttoptr i64 %env8091411 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096899 = getelementptr inbounds i64, i64* %envptr8096898, i64 2            ; &envptr8096898[2]
  %prO$a = load i64, i64* %envptr8096899, align 8                                    ; load; *envptr8096899
  %envptr8096900 = inttoptr i64 %env8091411 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096901 = getelementptr inbounds i64, i64* %envptr8096900, i64 1            ; &envptr8096900[1]
  %xD5$b = load i64, i64* %envptr8096901, align 8                                    ; load; *envptr8096901
  %_958086089 = call i64 @prim_car(i64 %rvp8090238)                                  ; call prim_car
  %rvp8090237 = call i64 @prim_cdr(i64 %rvp8090238)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090237)                                    ; call prim_car
  %na8090227 = call i64 @prim_cdr(i64 %rvp8090237)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8087991 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096902, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8087991, i64 %a8085926)              ; call prim_cons
  %cloptr8096903 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096904 = getelementptr inbounds i64, i64* %cloptr8096903, i64 0              ; &cloptr8096903[0]
  %f8096905 = ptrtoint void(i64,i64)* @lam8091407 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096905, i64* %eptr8096904                                             ; store fptr
  %arg8087994 = ptrtoint i64* %cloptr8096903 to i64                                  ; closure cast; i64* -> i64
  %arg8087993 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090236 = add i64 0, 0                                                         ; quoted ()
  %rva8090235 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090236)            ; call prim_cons
  %rva8090234 = call i64 @prim_cons(i64 %arg8087993, i64 %rva8090235)                ; call prim_cons
  %cloptr8096906 = inttoptr i64 %arg8087994 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096907 = getelementptr inbounds i64, i64* %cloptr8096906, i64 0             ; &cloptr8096906[0]
  %f8096909 = load i64, i64* %i0ptr8096907, align 8                                  ; load; *i0ptr8096907
  %fptr8096908 = inttoptr i64 %f8096909 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096908(i64 %arg8087994, i64 %rva8090234)           ; tail call
  ret void
}


define void @lam8091407(i64 %env8091408, i64 %rvp8090233) {
  %_950 = call i64 @prim_car(i64 %rvp8090233)                                        ; call prim_car
  %rvp8090232 = call i64 @prim_cdr(i64 %rvp8090233)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090232)                                           ; call prim_car
  %na8090229 = call i64 @prim_cdr(i64 %rvp8090232)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090231 = add i64 0, 0                                                         ; quoted ()
  %rva8090230 = call i64 @prim_cons(i64 %_951, i64 %rva8090231)                      ; call prim_cons
  %cloptr8096910 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096911 = getelementptr inbounds i64, i64* %cloptr8096910, i64 0             ; &cloptr8096910[0]
  %f8096913 = load i64, i64* %i0ptr8096911, align 8                                  ; load; *i0ptr8096911
  %fptr8096912 = inttoptr i64 %f8096913 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096912(i64 %_951, i64 %rva8090230)                 ; tail call
  ret void
}


define void @lam8091398(i64 %env8091399, i64 %rvp8090217) {
  %envptr8096914 = inttoptr i64 %env8091399 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096915 = getelementptr inbounds i64, i64* %envptr8096914, i64 3            ; &envptr8096914[3]
  %UXs$c = load i64, i64* %envptr8096915, align 8                                    ; load; *envptr8096915
  %envptr8096916 = inttoptr i64 %env8091399 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096917 = getelementptr inbounds i64, i64* %envptr8096916, i64 2            ; &envptr8096916[2]
  %prO$a = load i64, i64* %envptr8096917, align 8                                    ; load; *envptr8096917
  %envptr8096918 = inttoptr i64 %env8091399 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096919 = getelementptr inbounds i64, i64* %envptr8096918, i64 1            ; &envptr8096918[1]
  %xD5$b = load i64, i64* %envptr8096919, align 8                                    ; load; *envptr8096919
  %_958086088 = call i64 @prim_car(i64 %rvp8090217)                                  ; call prim_car
  %rvp8090216 = call i64 @prim_cdr(i64 %rvp8090217)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090216)                                    ; call prim_car
  %na8090197 = call i64 @prim_cdr(i64 %rvp8090216)                                   ; call prim_cdr
  %cloptr8096920 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096921 = getelementptr inbounds i64, i64* %cloptr8096920, i64 0              ; &cloptr8096920[0]
  %f8096922 = ptrtoint void(i64,i64)* @lam8091396 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096922, i64* %eptr8096921                                             ; store fptr
  %arg8087953 = ptrtoint i64* %cloptr8096920 to i64                                  ; closure cast; i64* -> i64
  %cloptr8096923 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096925 = getelementptr inbounds i64, i64* %cloptr8096923, i64 1              ; &eptr8096925[1]
  %eptr8096926 = getelementptr inbounds i64, i64* %cloptr8096923, i64 2              ; &eptr8096926[2]
  %eptr8096927 = getelementptr inbounds i64, i64* %cloptr8096923, i64 3              ; &eptr8096927[3]
  store i64 %xD5$b, i64* %eptr8096925                                                ; *eptr8096925 = %xD5$b
  store i64 %prO$a, i64* %eptr8096926                                                ; *eptr8096926 = %prO$a
  store i64 %UXs$c, i64* %eptr8096927                                                ; *eptr8096927 = %UXs$c
  %eptr8096924 = getelementptr inbounds i64, i64* %cloptr8096923, i64 0              ; &cloptr8096923[0]
  %f8096928 = ptrtoint void(i64,i64)* @lam8091392 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096928, i64* %eptr8096924                                             ; store fptr
  %arg8087952 = ptrtoint i64* %cloptr8096923 to i64                                  ; closure cast; i64* -> i64
  %rva8090215 = add i64 0, 0                                                         ; quoted ()
  %rva8090214 = call i64 @prim_cons(i64 %arg8087952, i64 %rva8090215)                ; call prim_cons
  %cloptr8096929 = inttoptr i64 %arg8087953 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096930 = getelementptr inbounds i64, i64* %cloptr8096929, i64 0             ; &cloptr8096929[0]
  %f8096932 = load i64, i64* %i0ptr8096930, align 8                                  ; load; *i0ptr8096930
  %fptr8096931 = inttoptr i64 %f8096932 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096931(i64 %arg8087953, i64 %rva8090214)           ; tail call
  ret void
}


define void @lam8091396(i64 %env8091397, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8087957 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090200 = add i64 0, 0                                                         ; quoted ()
  %rva8090199 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090200)                   ; call prim_cons
  %rva8090198 = call i64 @prim_cons(i64 %arg8087957, i64 %rva8090199)                ; call prim_cons
  %cloptr8096933 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096934 = getelementptr inbounds i64, i64* %cloptr8096933, i64 0             ; &cloptr8096933[0]
  %f8096936 = load i64, i64* %i0ptr8096934, align 8                                  ; load; *i0ptr8096934
  %fptr8096935 = inttoptr i64 %f8096936 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096935(i64 %cont8086091, i64 %rva8090198)          ; tail call
  ret void
}


define void @lam8091392(i64 %env8091393, i64 %rvp8090213) {
  %envptr8096937 = inttoptr i64 %env8091393 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096938 = getelementptr inbounds i64, i64* %envptr8096937, i64 3            ; &envptr8096937[3]
  %UXs$c = load i64, i64* %envptr8096938, align 8                                    ; load; *envptr8096938
  %envptr8096939 = inttoptr i64 %env8091393 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096940 = getelementptr inbounds i64, i64* %envptr8096939, i64 2            ; &envptr8096939[2]
  %prO$a = load i64, i64* %envptr8096940, align 8                                    ; load; *envptr8096940
  %envptr8096941 = inttoptr i64 %env8091393 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096942 = getelementptr inbounds i64, i64* %envptr8096941, i64 1            ; &envptr8096941[1]
  %xD5$b = load i64, i64* %envptr8096942, align 8                                    ; load; *envptr8096942
  %_958086089 = call i64 @prim_car(i64 %rvp8090213)                                  ; call prim_car
  %rvp8090212 = call i64 @prim_cdr(i64 %rvp8090213)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090212)                                    ; call prim_car
  %na8090202 = call i64 @prim_cdr(i64 %rvp8090212)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8087966 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8096943, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8087966, i64 %a8085926)              ; call prim_cons
  %cloptr8096944 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8096945 = getelementptr inbounds i64, i64* %cloptr8096944, i64 0              ; &cloptr8096944[0]
  %f8096946 = ptrtoint void(i64,i64)* @lam8091389 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096946, i64* %eptr8096945                                             ; store fptr
  %arg8087969 = ptrtoint i64* %cloptr8096944 to i64                                  ; closure cast; i64* -> i64
  %arg8087968 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090211 = add i64 0, 0                                                         ; quoted ()
  %rva8090210 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090211)            ; call prim_cons
  %rva8090209 = call i64 @prim_cons(i64 %arg8087968, i64 %rva8090210)                ; call prim_cons
  %cloptr8096947 = inttoptr i64 %arg8087969 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8096948 = getelementptr inbounds i64, i64* %cloptr8096947, i64 0             ; &cloptr8096947[0]
  %f8096950 = load i64, i64* %i0ptr8096948, align 8                                  ; load; *i0ptr8096948
  %fptr8096949 = inttoptr i64 %f8096950 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096949(i64 %arg8087969, i64 %rva8090209)           ; tail call
  ret void
}


define void @lam8091389(i64 %env8091390, i64 %rvp8090208) {
  %_950 = call i64 @prim_car(i64 %rvp8090208)                                        ; call prim_car
  %rvp8090207 = call i64 @prim_cdr(i64 %rvp8090208)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090207)                                           ; call prim_car
  %na8090204 = call i64 @prim_cdr(i64 %rvp8090207)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090206 = add i64 0, 0                                                         ; quoted ()
  %rva8090205 = call i64 @prim_cons(i64 %_951, i64 %rva8090206)                      ; call prim_cons
  %cloptr8096951 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8096952 = getelementptr inbounds i64, i64* %cloptr8096951, i64 0             ; &cloptr8096951[0]
  %f8096954 = load i64, i64* %i0ptr8096952, align 8                                  ; load; *i0ptr8096952
  %fptr8096953 = inttoptr i64 %f8096954 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096953(i64 %_951, i64 %rva8090205)                 ; tail call
  ret void
}


define void @lam8091379(i64 %env8091380, i64 %N3p$lst8086096) {
  %cont8086095 = call i64 @prim_car(i64 %N3p$lst8086096)                             ; call prim_car
  %N3p$lst = call i64 @prim_cdr(i64 %N3p$lst8086096)                                 ; call prim_cdr
  %arg8087853 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090130 = add i64 0, 0                                                         ; quoted ()
  %rva8090129 = call i64 @prim_cons(i64 %N3p$lst, i64 %rva8090130)                   ; call prim_cons
  %rva8090128 = call i64 @prim_cons(i64 %arg8087853, i64 %rva8090129)                ; call prim_cons
  %cloptr8096955 = inttoptr i64 %cont8086095 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8096956 = getelementptr inbounds i64, i64* %cloptr8096955, i64 0             ; &cloptr8096955[0]
  %f8096958 = load i64, i64* %i0ptr8096956, align 8                                  ; load; *i0ptr8096956
  %fptr8096957 = inttoptr i64 %f8096958 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096957(i64 %cont8086095, i64 %rva8090128)          ; tail call
  ret void
}


define void @lam8091375(i64 %env8091376, i64 %rvp8090191) {
  %envptr8096959 = inttoptr i64 %env8091376 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096960 = getelementptr inbounds i64, i64* %envptr8096959, i64 4            ; &envptr8096959[4]
  %a8085909 = load i64, i64* %envptr8096960, align 8                                 ; load; *envptr8096960
  %envptr8096961 = inttoptr i64 %env8091376 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096962 = getelementptr inbounds i64, i64* %envptr8096961, i64 3            ; &envptr8096961[3]
  %U6p$assert = load i64, i64* %envptr8096962, align 8                               ; load; *envptr8096962
  %envptr8096963 = inttoptr i64 %env8091376 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096964 = getelementptr inbounds i64, i64* %envptr8096963, i64 2            ; &envptr8096963[2]
  %prO$a = load i64, i64* %envptr8096964, align 8                                    ; load; *envptr8096964
  %envptr8096965 = inttoptr i64 %env8091376 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096966 = getelementptr inbounds i64, i64* %envptr8096965, i64 1            ; &envptr8096965[1]
  %xD5$b = load i64, i64* %envptr8096966, align 8                                    ; load; *envptr8096966
  %_958086094 = call i64 @prim_car(i64 %rvp8090191)                                  ; call prim_car
  %rvp8090190 = call i64 @prim_cdr(i64 %rvp8090191)                                  ; call prim_cdr
  %a8085910 = call i64 @prim_car(i64 %rvp8090190)                                    ; call prim_car
  %na8090132 = call i64 @prim_cdr(i64 %rvp8090190)                                   ; call prim_cdr
  %arg8087856 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8085911 = call i64 @prim_cons(i64 %arg8087856, i64 %a8085910)                    ; call prim_cons
  %arg8087858 = call i64 @const_init_int(i64 4)                                      ; quoted int
  %a8085912 = call i64 @prim_cons(i64 %arg8087858, i64 %a8085911)                    ; call prim_cons
  %arg8087860 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %a8085913 = call i64 @prim_cons(i64 %arg8087860, i64 %a8085912)                    ; call prim_cons
  %arg8087862 = call i64 @const_init_int(i64 2)                                      ; quoted int
  %a8085914 = call i64 @prim_cons(i64 %arg8087862, i64 %a8085913)                    ; call prim_cons
  %cloptr8096967 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096969 = getelementptr inbounds i64, i64* %cloptr8096967, i64 1              ; &eptr8096969[1]
  %eptr8096970 = getelementptr inbounds i64, i64* %cloptr8096967, i64 2              ; &eptr8096970[2]
  %eptr8096971 = getelementptr inbounds i64, i64* %cloptr8096967, i64 3              ; &eptr8096971[3]
  store i64 %xD5$b, i64* %eptr8096969                                                ; *eptr8096969 = %xD5$b
  store i64 %prO$a, i64* %eptr8096970                                                ; *eptr8096970 = %prO$a
  store i64 %U6p$assert, i64* %eptr8096971                                           ; *eptr8096971 = %U6p$assert
  %eptr8096968 = getelementptr inbounds i64, i64* %cloptr8096967, i64 0              ; &cloptr8096967[0]
  %f8096972 = ptrtoint void(i64,i64)* @lam8091369 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096972, i64* %eptr8096968                                             ; store fptr
  %arg8087864 = ptrtoint i64* %cloptr8096967 to i64                                  ; closure cast; i64* -> i64
  %rva8090189 = add i64 0, 0                                                         ; quoted ()
  %rva8090188 = call i64 @prim_cons(i64 %a8085914, i64 %rva8090189)                  ; call prim_cons
  %rva8090187 = call i64 @prim_cons(i64 %arg8087864, i64 %rva8090188)                ; call prim_cons
  %cloptr8096973 = inttoptr i64 %a8085909 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096974 = getelementptr inbounds i64, i64* %cloptr8096973, i64 0             ; &cloptr8096973[0]
  %f8096976 = load i64, i64* %i0ptr8096974, align 8                                  ; load; *i0ptr8096974
  %fptr8096975 = inttoptr i64 %f8096976 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096975(i64 %a8085909, i64 %rva8090187)             ; tail call
  ret void
}


define void @lam8091369(i64 %env8091370, i64 %rvp8090186) {
  %envptr8096977 = inttoptr i64 %env8091370 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096978 = getelementptr inbounds i64, i64* %envptr8096977, i64 3            ; &envptr8096977[3]
  %U6p$assert = load i64, i64* %envptr8096978, align 8                               ; load; *envptr8096978
  %envptr8096979 = inttoptr i64 %env8091370 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096980 = getelementptr inbounds i64, i64* %envptr8096979, i64 2            ; &envptr8096979[2]
  %prO$a = load i64, i64* %envptr8096980, align 8                                    ; load; *envptr8096980
  %envptr8096981 = inttoptr i64 %env8091370 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8096982 = getelementptr inbounds i64, i64* %envptr8096981, i64 1            ; &envptr8096981[1]
  %xD5$b = load i64, i64* %envptr8096982, align 8                                    ; load; *envptr8096982
  %_958086087 = call i64 @prim_car(i64 %rvp8090186)                                  ; call prim_car
  %rvp8090185 = call i64 @prim_cdr(i64 %rvp8090186)                                  ; call prim_cdr
  %UXs$c = call i64 @prim_car(i64 %rvp8090185)                                       ; call prim_car
  %na8090134 = call i64 @prim_cdr(i64 %rvp8090185)                                   ; call prim_cdr
  %arg8087866 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085915 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8087866)          ; call prim_vector_45ref
  %a8085916 = call i64 @prim_procedure_63(i64 %a8085915)                             ; call prim_procedure_63
  %cmp8096983 = icmp eq i64 %a8085916, 15                                            ; false?
  br i1 %cmp8096983, label %else8096985, label %then8096984                          ; if

then8096984:
  %arg8087869 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085917 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8087869)          ; call prim_vector_45ref
  %a8085918 = call i64 @prim__42(i64 %prO$a, i64 %prO$a)                             ; call prim__42
  %a8085919 = call i64 @prim__42(i64 %xD5$b, i64 %xD5$b)                             ; call prim__42
  %a8085920 = call i64 @prim__43(i64 %a8085918, i64 %a8085919)                       ; call prim__43
  %a8085921 = call i64 @prim__42(i64 %UXs$c, i64 %UXs$c)                             ; call prim__42
  %a8085922 = call i64 @prim__61(i64 %a8085920, i64 %a8085921)                       ; call prim__61
  %cloptr8096986 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096988 = getelementptr inbounds i64, i64* %cloptr8096986, i64 1              ; &eptr8096988[1]
  %eptr8096989 = getelementptr inbounds i64, i64* %cloptr8096986, i64 2              ; &eptr8096989[2]
  %eptr8096990 = getelementptr inbounds i64, i64* %cloptr8096986, i64 3              ; &eptr8096990[3]
  store i64 %xD5$b, i64* %eptr8096988                                                ; *eptr8096988 = %xD5$b
  store i64 %prO$a, i64* %eptr8096989                                                ; *eptr8096989 = %prO$a
  store i64 %UXs$c, i64* %eptr8096990                                                ; *eptr8096990 = %UXs$c
  %eptr8096987 = getelementptr inbounds i64, i64* %cloptr8096986, i64 0              ; &cloptr8096986[0]
  %f8096991 = ptrtoint void(i64,i64)* @lam8091347 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8096991, i64* %eptr8096987                                             ; store fptr
  %arg8087882 = ptrtoint i64* %cloptr8096986 to i64                                  ; closure cast; i64* -> i64
  %rva8090159 = add i64 0, 0                                                         ; quoted ()
  %rva8090158 = call i64 @prim_cons(i64 %a8085922, i64 %rva8090159)                  ; call prim_cons
  %rva8090157 = call i64 @prim_cons(i64 %arg8087882, i64 %rva8090158)                ; call prim_cons
  %cloptr8096992 = inttoptr i64 %a8085917 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8096993 = getelementptr inbounds i64, i64* %cloptr8096992, i64 0             ; &cloptr8096992[0]
  %f8096995 = load i64, i64* %i0ptr8096993, align 8                                  ; load; *i0ptr8096993
  %fptr8096994 = inttoptr i64 %f8096995 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8096994(i64 %a8085917, i64 %rva8090157)             ; tail call
  ret void

else8096985:
  %arg8087905 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8096996, i32 0, i32 0)); quoted string
  %retprim8086093 = call i64 @prim_halt(i64 %arg8087905)                             ; call prim_halt
  %cloptr8096997 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8096999 = getelementptr inbounds i64, i64* %cloptr8096997, i64 1              ; &eptr8096999[1]
  %eptr8097000 = getelementptr inbounds i64, i64* %cloptr8096997, i64 2              ; &eptr8097000[2]
  %eptr8097001 = getelementptr inbounds i64, i64* %cloptr8096997, i64 3              ; &eptr8097001[3]
  store i64 %xD5$b, i64* %eptr8096999                                                ; *eptr8096999 = %xD5$b
  store i64 %prO$a, i64* %eptr8097000                                                ; *eptr8097000 = %prO$a
  store i64 %UXs$c, i64* %eptr8097001                                                ; *eptr8097001 = %UXs$c
  %eptr8096998 = getelementptr inbounds i64, i64* %cloptr8096997, i64 0              ; &cloptr8096997[0]
  %f8097002 = ptrtoint void(i64,i64)* @lam8091365 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097002, i64* %eptr8096998                                             ; store fptr
  %arg8087908 = ptrtoint i64* %cloptr8096997 to i64                                  ; closure cast; i64* -> i64
  %arg8087907 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090184 = add i64 0, 0                                                         ; quoted ()
  %rva8090183 = call i64 @prim_cons(i64 %retprim8086093, i64 %rva8090184)            ; call prim_cons
  %rva8090182 = call i64 @prim_cons(i64 %arg8087907, i64 %rva8090183)                ; call prim_cons
  %cloptr8097003 = inttoptr i64 %arg8087908 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097004 = getelementptr inbounds i64, i64* %cloptr8097003, i64 0             ; &cloptr8097003[0]
  %f8097006 = load i64, i64* %i0ptr8097004, align 8                                  ; load; *i0ptr8097004
  %fptr8097005 = inttoptr i64 %f8097006 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097005(i64 %arg8087908, i64 %rva8090182)           ; tail call
  ret void
}


define void @lam8091365(i64 %env8091366, i64 %rvp8090181) {
  %envptr8097007 = inttoptr i64 %env8091366 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097008 = getelementptr inbounds i64, i64* %envptr8097007, i64 3            ; &envptr8097007[3]
  %UXs$c = load i64, i64* %envptr8097008, align 8                                    ; load; *envptr8097008
  %envptr8097009 = inttoptr i64 %env8091366 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097010 = getelementptr inbounds i64, i64* %envptr8097009, i64 2            ; &envptr8097009[2]
  %prO$a = load i64, i64* %envptr8097010, align 8                                    ; load; *envptr8097010
  %envptr8097011 = inttoptr i64 %env8091366 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097012 = getelementptr inbounds i64, i64* %envptr8097011, i64 1            ; &envptr8097011[1]
  %xD5$b = load i64, i64* %envptr8097012, align 8                                    ; load; *envptr8097012
  %_958086088 = call i64 @prim_car(i64 %rvp8090181)                                  ; call prim_car
  %rvp8090180 = call i64 @prim_cdr(i64 %rvp8090181)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090180)                                    ; call prim_car
  %na8090161 = call i64 @prim_cdr(i64 %rvp8090180)                                   ; call prim_cdr
  %cloptr8097013 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097014 = getelementptr inbounds i64, i64* %cloptr8097013, i64 0              ; &cloptr8097013[0]
  %f8097015 = ptrtoint void(i64,i64)* @lam8091363 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097015, i64* %eptr8097014                                             ; store fptr
  %arg8087910 = ptrtoint i64* %cloptr8097013 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097016 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097018 = getelementptr inbounds i64, i64* %cloptr8097016, i64 1              ; &eptr8097018[1]
  %eptr8097019 = getelementptr inbounds i64, i64* %cloptr8097016, i64 2              ; &eptr8097019[2]
  %eptr8097020 = getelementptr inbounds i64, i64* %cloptr8097016, i64 3              ; &eptr8097020[3]
  store i64 %xD5$b, i64* %eptr8097018                                                ; *eptr8097018 = %xD5$b
  store i64 %prO$a, i64* %eptr8097019                                                ; *eptr8097019 = %prO$a
  store i64 %UXs$c, i64* %eptr8097020                                                ; *eptr8097020 = %UXs$c
  %eptr8097017 = getelementptr inbounds i64, i64* %cloptr8097016, i64 0              ; &cloptr8097016[0]
  %f8097021 = ptrtoint void(i64,i64)* @lam8091359 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097021, i64* %eptr8097017                                             ; store fptr
  %arg8087909 = ptrtoint i64* %cloptr8097016 to i64                                  ; closure cast; i64* -> i64
  %rva8090179 = add i64 0, 0                                                         ; quoted ()
  %rva8090178 = call i64 @prim_cons(i64 %arg8087909, i64 %rva8090179)                ; call prim_cons
  %cloptr8097022 = inttoptr i64 %arg8087910 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097023 = getelementptr inbounds i64, i64* %cloptr8097022, i64 0             ; &cloptr8097022[0]
  %f8097025 = load i64, i64* %i0ptr8097023, align 8                                  ; load; *i0ptr8097023
  %fptr8097024 = inttoptr i64 %f8097025 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097024(i64 %arg8087910, i64 %rva8090178)           ; tail call
  ret void
}


define void @lam8091363(i64 %env8091364, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8087914 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090164 = add i64 0, 0                                                         ; quoted ()
  %rva8090163 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090164)                   ; call prim_cons
  %rva8090162 = call i64 @prim_cons(i64 %arg8087914, i64 %rva8090163)                ; call prim_cons
  %cloptr8097026 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097027 = getelementptr inbounds i64, i64* %cloptr8097026, i64 0             ; &cloptr8097026[0]
  %f8097029 = load i64, i64* %i0ptr8097027, align 8                                  ; load; *i0ptr8097027
  %fptr8097028 = inttoptr i64 %f8097029 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097028(i64 %cont8086091, i64 %rva8090162)          ; tail call
  ret void
}


define void @lam8091359(i64 %env8091360, i64 %rvp8090177) {
  %envptr8097030 = inttoptr i64 %env8091360 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097031 = getelementptr inbounds i64, i64* %envptr8097030, i64 3            ; &envptr8097030[3]
  %UXs$c = load i64, i64* %envptr8097031, align 8                                    ; load; *envptr8097031
  %envptr8097032 = inttoptr i64 %env8091360 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097033 = getelementptr inbounds i64, i64* %envptr8097032, i64 2            ; &envptr8097032[2]
  %prO$a = load i64, i64* %envptr8097033, align 8                                    ; load; *envptr8097033
  %envptr8097034 = inttoptr i64 %env8091360 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097035 = getelementptr inbounds i64, i64* %envptr8097034, i64 1            ; &envptr8097034[1]
  %xD5$b = load i64, i64* %envptr8097035, align 8                                    ; load; *envptr8097035
  %_958086089 = call i64 @prim_car(i64 %rvp8090177)                                  ; call prim_car
  %rvp8090176 = call i64 @prim_cdr(i64 %rvp8090177)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090176)                                    ; call prim_car
  %na8090166 = call i64 @prim_cdr(i64 %rvp8090176)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8087923 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8097036, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8087923, i64 %a8085926)              ; call prim_cons
  %cloptr8097037 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097038 = getelementptr inbounds i64, i64* %cloptr8097037, i64 0              ; &cloptr8097037[0]
  %f8097039 = ptrtoint void(i64,i64)* @lam8091356 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097039, i64* %eptr8097038                                             ; store fptr
  %arg8087926 = ptrtoint i64* %cloptr8097037 to i64                                  ; closure cast; i64* -> i64
  %arg8087925 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090175 = add i64 0, 0                                                         ; quoted ()
  %rva8090174 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090175)            ; call prim_cons
  %rva8090173 = call i64 @prim_cons(i64 %arg8087925, i64 %rva8090174)                ; call prim_cons
  %cloptr8097040 = inttoptr i64 %arg8087926 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097041 = getelementptr inbounds i64, i64* %cloptr8097040, i64 0             ; &cloptr8097040[0]
  %f8097043 = load i64, i64* %i0ptr8097041, align 8                                  ; load; *i0ptr8097041
  %fptr8097042 = inttoptr i64 %f8097043 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097042(i64 %arg8087926, i64 %rva8090173)           ; tail call
  ret void
}


define void @lam8091356(i64 %env8091357, i64 %rvp8090172) {
  %_950 = call i64 @prim_car(i64 %rvp8090172)                                        ; call prim_car
  %rvp8090171 = call i64 @prim_cdr(i64 %rvp8090172)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090171)                                           ; call prim_car
  %na8090168 = call i64 @prim_cdr(i64 %rvp8090171)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090170 = add i64 0, 0                                                         ; quoted ()
  %rva8090169 = call i64 @prim_cons(i64 %_951, i64 %rva8090170)                      ; call prim_cons
  %cloptr8097044 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8097045 = getelementptr inbounds i64, i64* %cloptr8097044, i64 0             ; &cloptr8097044[0]
  %f8097047 = load i64, i64* %i0ptr8097045, align 8                                  ; load; *i0ptr8097045
  %fptr8097046 = inttoptr i64 %f8097047 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097046(i64 %_951, i64 %rva8090169)                 ; tail call
  ret void
}


define void @lam8091347(i64 %env8091348, i64 %rvp8090156) {
  %envptr8097048 = inttoptr i64 %env8091348 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097049 = getelementptr inbounds i64, i64* %envptr8097048, i64 3            ; &envptr8097048[3]
  %UXs$c = load i64, i64* %envptr8097049, align 8                                    ; load; *envptr8097049
  %envptr8097050 = inttoptr i64 %env8091348 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097051 = getelementptr inbounds i64, i64* %envptr8097050, i64 2            ; &envptr8097050[2]
  %prO$a = load i64, i64* %envptr8097051, align 8                                    ; load; *envptr8097051
  %envptr8097052 = inttoptr i64 %env8091348 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097053 = getelementptr inbounds i64, i64* %envptr8097052, i64 1            ; &envptr8097052[1]
  %xD5$b = load i64, i64* %envptr8097053, align 8                                    ; load; *envptr8097053
  %_958086088 = call i64 @prim_car(i64 %rvp8090156)                                  ; call prim_car
  %rvp8090155 = call i64 @prim_cdr(i64 %rvp8090156)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090155)                                    ; call prim_car
  %na8090136 = call i64 @prim_cdr(i64 %rvp8090155)                                   ; call prim_cdr
  %cloptr8097054 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097055 = getelementptr inbounds i64, i64* %cloptr8097054, i64 0              ; &cloptr8097054[0]
  %f8097056 = ptrtoint void(i64,i64)* @lam8091345 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097056, i64* %eptr8097055                                             ; store fptr
  %arg8087885 = ptrtoint i64* %cloptr8097054 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097057 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097059 = getelementptr inbounds i64, i64* %cloptr8097057, i64 1              ; &eptr8097059[1]
  %eptr8097060 = getelementptr inbounds i64, i64* %cloptr8097057, i64 2              ; &eptr8097060[2]
  %eptr8097061 = getelementptr inbounds i64, i64* %cloptr8097057, i64 3              ; &eptr8097061[3]
  store i64 %xD5$b, i64* %eptr8097059                                                ; *eptr8097059 = %xD5$b
  store i64 %prO$a, i64* %eptr8097060                                                ; *eptr8097060 = %prO$a
  store i64 %UXs$c, i64* %eptr8097061                                                ; *eptr8097061 = %UXs$c
  %eptr8097058 = getelementptr inbounds i64, i64* %cloptr8097057, i64 0              ; &cloptr8097057[0]
  %f8097062 = ptrtoint void(i64,i64)* @lam8091341 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097062, i64* %eptr8097058                                             ; store fptr
  %arg8087884 = ptrtoint i64* %cloptr8097057 to i64                                  ; closure cast; i64* -> i64
  %rva8090154 = add i64 0, 0                                                         ; quoted ()
  %rva8090153 = call i64 @prim_cons(i64 %arg8087884, i64 %rva8090154)                ; call prim_cons
  %cloptr8097063 = inttoptr i64 %arg8087885 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097064 = getelementptr inbounds i64, i64* %cloptr8097063, i64 0             ; &cloptr8097063[0]
  %f8097066 = load i64, i64* %i0ptr8097064, align 8                                  ; load; *i0ptr8097064
  %fptr8097065 = inttoptr i64 %f8097066 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097065(i64 %arg8087885, i64 %rva8090153)           ; tail call
  ret void
}


define void @lam8091345(i64 %env8091346, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8087889 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090139 = add i64 0, 0                                                         ; quoted ()
  %rva8090138 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090139)                   ; call prim_cons
  %rva8090137 = call i64 @prim_cons(i64 %arg8087889, i64 %rva8090138)                ; call prim_cons
  %cloptr8097067 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097068 = getelementptr inbounds i64, i64* %cloptr8097067, i64 0             ; &cloptr8097067[0]
  %f8097070 = load i64, i64* %i0ptr8097068, align 8                                  ; load; *i0ptr8097068
  %fptr8097069 = inttoptr i64 %f8097070 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097069(i64 %cont8086091, i64 %rva8090137)          ; tail call
  ret void
}


define void @lam8091341(i64 %env8091342, i64 %rvp8090152) {
  %envptr8097071 = inttoptr i64 %env8091342 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097072 = getelementptr inbounds i64, i64* %envptr8097071, i64 3            ; &envptr8097071[3]
  %UXs$c = load i64, i64* %envptr8097072, align 8                                    ; load; *envptr8097072
  %envptr8097073 = inttoptr i64 %env8091342 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097074 = getelementptr inbounds i64, i64* %envptr8097073, i64 2            ; &envptr8097073[2]
  %prO$a = load i64, i64* %envptr8097074, align 8                                    ; load; *envptr8097074
  %envptr8097075 = inttoptr i64 %env8091342 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097076 = getelementptr inbounds i64, i64* %envptr8097075, i64 1            ; &envptr8097075[1]
  %xD5$b = load i64, i64* %envptr8097076, align 8                                    ; load; *envptr8097076
  %_958086089 = call i64 @prim_car(i64 %rvp8090152)                                  ; call prim_car
  %rvp8090151 = call i64 @prim_cdr(i64 %rvp8090152)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090151)                                    ; call prim_car
  %na8090141 = call i64 @prim_cdr(i64 %rvp8090151)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8087898 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8097077, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8087898, i64 %a8085926)              ; call prim_cons
  %cloptr8097078 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097079 = getelementptr inbounds i64, i64* %cloptr8097078, i64 0              ; &cloptr8097078[0]
  %f8097080 = ptrtoint void(i64,i64)* @lam8091338 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097080, i64* %eptr8097079                                             ; store fptr
  %arg8087901 = ptrtoint i64* %cloptr8097078 to i64                                  ; closure cast; i64* -> i64
  %arg8087900 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090150 = add i64 0, 0                                                         ; quoted ()
  %rva8090149 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090150)            ; call prim_cons
  %rva8090148 = call i64 @prim_cons(i64 %arg8087900, i64 %rva8090149)                ; call prim_cons
  %cloptr8097081 = inttoptr i64 %arg8087901 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097082 = getelementptr inbounds i64, i64* %cloptr8097081, i64 0             ; &cloptr8097081[0]
  %f8097084 = load i64, i64* %i0ptr8097082, align 8                                  ; load; *i0ptr8097082
  %fptr8097083 = inttoptr i64 %f8097084 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097083(i64 %arg8087901, i64 %rva8090148)           ; tail call
  ret void
}


define void @lam8091338(i64 %env8091339, i64 %rvp8090147) {
  %_950 = call i64 @prim_car(i64 %rvp8090147)                                        ; call prim_car
  %rvp8090146 = call i64 @prim_cdr(i64 %rvp8090147)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090146)                                           ; call prim_car
  %na8090143 = call i64 @prim_cdr(i64 %rvp8090146)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090145 = add i64 0, 0                                                         ; quoted ()
  %rva8090144 = call i64 @prim_cons(i64 %_951, i64 %rva8090145)                      ; call prim_cons
  %cloptr8097085 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8097086 = getelementptr inbounds i64, i64* %cloptr8097085, i64 0             ; &cloptr8097085[0]
  %f8097088 = load i64, i64* %i0ptr8097086, align 8                                  ; load; *i0ptr8097086
  %fptr8097087 = inttoptr i64 %f8097088 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097087(i64 %_951, i64 %rva8090144)                 ; tail call
  ret void
}


define void @lam8091326(i64 %env8091327, i64 %vBs$lst8086100) {
  %cont8086099 = call i64 @prim_car(i64 %vBs$lst8086100)                             ; call prim_car
  %vBs$lst = call i64 @prim_cdr(i64 %vBs$lst8086100)                                 ; call prim_cdr
  %arg8087669 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089989 = add i64 0, 0                                                         ; quoted ()
  %rva8089988 = call i64 @prim_cons(i64 %vBs$lst, i64 %rva8089989)                   ; call prim_cons
  %rva8089987 = call i64 @prim_cons(i64 %arg8087669, i64 %rva8089988)                ; call prim_cons
  %cloptr8097089 = inttoptr i64 %cont8086099 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097090 = getelementptr inbounds i64, i64* %cloptr8097089, i64 0             ; &cloptr8097089[0]
  %f8097092 = load i64, i64* %i0ptr8097090, align 8                                  ; load; *i0ptr8097090
  %fptr8097091 = inttoptr i64 %f8097092 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097091(i64 %cont8086099, i64 %rva8089987)          ; tail call
  ret void
}


define void @lam8091322(i64 %env8091323, i64 %rvp8090123) {
  %envptr8097093 = inttoptr i64 %env8091323 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097094 = getelementptr inbounds i64, i64* %envptr8097093, i64 4            ; &envptr8097093[4]
  %U6p$assert = load i64, i64* %envptr8097094, align 8                               ; load; *envptr8097094
  %envptr8097095 = inttoptr i64 %env8091323 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097096 = getelementptr inbounds i64, i64* %envptr8097095, i64 3            ; &envptr8097095[3]
  %a8085900 = load i64, i64* %envptr8097096, align 8                                 ; load; *envptr8097096
  %envptr8097097 = inttoptr i64 %env8091323 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097098 = getelementptr inbounds i64, i64* %envptr8097097, i64 2            ; &envptr8097097[2]
  %prO$a = load i64, i64* %envptr8097098, align 8                                    ; load; *envptr8097098
  %envptr8097099 = inttoptr i64 %env8091323 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097100 = getelementptr inbounds i64, i64* %envptr8097099, i64 1            ; &envptr8097099[1]
  %I2S$amb = load i64, i64* %envptr8097100, align 8                                  ; load; *envptr8097100
  %_958086098 = call i64 @prim_car(i64 %rvp8090123)                                  ; call prim_car
  %rvp8090122 = call i64 @prim_cdr(i64 %rvp8090123)                                  ; call prim_cdr
  %a8085901 = call i64 @prim_car(i64 %rvp8090122)                                    ; call prim_car
  %na8089991 = call i64 @prim_cdr(i64 %rvp8090122)                                   ; call prim_cdr
  %arg8087672 = call i64 @const_init_int(i64 6)                                      ; quoted int
  %a8085902 = call i64 @prim_cons(i64 %arg8087672, i64 %a8085901)                    ; call prim_cons
  %arg8087674 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8085903 = call i64 @prim_cons(i64 %arg8087674, i64 %a8085902)                    ; call prim_cons
  %arg8087676 = call i64 @const_init_int(i64 4)                                      ; quoted int
  %a8085904 = call i64 @prim_cons(i64 %arg8087676, i64 %a8085903)                    ; call prim_cons
  %arg8087678 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %a8085905 = call i64 @prim_cons(i64 %arg8087678, i64 %a8085904)                    ; call prim_cons
  %arg8087680 = call i64 @const_init_int(i64 2)                                      ; quoted int
  %a8085906 = call i64 @prim_cons(i64 %arg8087680, i64 %a8085905)                    ; call prim_cons
  %cloptr8097101 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097103 = getelementptr inbounds i64, i64* %cloptr8097101, i64 1              ; &eptr8097103[1]
  %eptr8097104 = getelementptr inbounds i64, i64* %cloptr8097101, i64 2              ; &eptr8097104[2]
  %eptr8097105 = getelementptr inbounds i64, i64* %cloptr8097101, i64 3              ; &eptr8097105[3]
  store i64 %I2S$amb, i64* %eptr8097103                                              ; *eptr8097103 = %I2S$amb
  store i64 %prO$a, i64* %eptr8097104                                                ; *eptr8097104 = %prO$a
  store i64 %U6p$assert, i64* %eptr8097105                                           ; *eptr8097105 = %U6p$assert
  %eptr8097102 = getelementptr inbounds i64, i64* %cloptr8097101, i64 0              ; &cloptr8097101[0]
  %f8097106 = ptrtoint void(i64,i64)* @lam8091315 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097106, i64* %eptr8097102                                             ; store fptr
  %arg8087682 = ptrtoint i64* %cloptr8097101 to i64                                  ; closure cast; i64* -> i64
  %rva8090121 = add i64 0, 0                                                         ; quoted ()
  %rva8090120 = call i64 @prim_cons(i64 %a8085906, i64 %rva8090121)                  ; call prim_cons
  %rva8090119 = call i64 @prim_cons(i64 %arg8087682, i64 %rva8090120)                ; call prim_cons
  %cloptr8097107 = inttoptr i64 %a8085900 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8097108 = getelementptr inbounds i64, i64* %cloptr8097107, i64 0             ; &cloptr8097107[0]
  %f8097110 = load i64, i64* %i0ptr8097108, align 8                                  ; load; *i0ptr8097108
  %fptr8097109 = inttoptr i64 %f8097110 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097109(i64 %a8085900, i64 %rva8090119)             ; tail call
  ret void
}


define void @lam8091315(i64 %env8091316, i64 %rvp8090118) {
  %envptr8097111 = inttoptr i64 %env8091316 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097112 = getelementptr inbounds i64, i64* %envptr8097111, i64 3            ; &envptr8097111[3]
  %U6p$assert = load i64, i64* %envptr8097112, align 8                               ; load; *envptr8097112
  %envptr8097113 = inttoptr i64 %env8091316 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097114 = getelementptr inbounds i64, i64* %envptr8097113, i64 2            ; &envptr8097113[2]
  %prO$a = load i64, i64* %envptr8097114, align 8                                    ; load; *envptr8097114
  %envptr8097115 = inttoptr i64 %env8091316 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097116 = getelementptr inbounds i64, i64* %envptr8097115, i64 1            ; &envptr8097115[1]
  %I2S$amb = load i64, i64* %envptr8097116, align 8                                  ; load; *envptr8097116
  %_958086086 = call i64 @prim_car(i64 %rvp8090118)                                  ; call prim_car
  %rvp8090117 = call i64 @prim_cdr(i64 %rvp8090118)                                  ; call prim_cdr
  %xD5$b = call i64 @prim_car(i64 %rvp8090117)                                       ; call prim_car
  %na8089993 = call i64 @prim_cdr(i64 %rvp8090117)                                   ; call prim_cdr
  %arg8087684 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085907 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8087684)             ; call prim_vector_45ref
  %a8085908 = call i64 @prim_procedure_63(i64 %a8085907)                             ; call prim_procedure_63
  %cmp8097117 = icmp eq i64 %a8085908, 15                                            ; false?
  br i1 %cmp8097117, label %else8097119, label %then8097118                          ; if

then8097118:
  %arg8087687 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085909 = call i64 @prim_vector_45ref(i64 %I2S$amb, i64 %arg8087687)             ; call prim_vector_45ref
  %cloptr8097120 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097121 = getelementptr inbounds i64, i64* %cloptr8097120, i64 0              ; &cloptr8097120[0]
  %f8097122 = ptrtoint void(i64,i64)* @lam8091270 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097122, i64* %eptr8097121                                             ; store fptr
  %arg8087690 = ptrtoint i64* %cloptr8097120 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097123 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8097125 = getelementptr inbounds i64, i64* %cloptr8097123, i64 1              ; &eptr8097125[1]
  %eptr8097126 = getelementptr inbounds i64, i64* %cloptr8097123, i64 2              ; &eptr8097126[2]
  %eptr8097127 = getelementptr inbounds i64, i64* %cloptr8097123, i64 3              ; &eptr8097127[3]
  %eptr8097128 = getelementptr inbounds i64, i64* %cloptr8097123, i64 4              ; &eptr8097128[4]
  store i64 %xD5$b, i64* %eptr8097125                                                ; *eptr8097125 = %xD5$b
  store i64 %prO$a, i64* %eptr8097126                                                ; *eptr8097126 = %prO$a
  store i64 %U6p$assert, i64* %eptr8097127                                           ; *eptr8097127 = %U6p$assert
  store i64 %a8085909, i64* %eptr8097128                                             ; *eptr8097128 = %a8085909
  %eptr8097124 = getelementptr inbounds i64, i64* %cloptr8097123, i64 0              ; &cloptr8097123[0]
  %f8097129 = ptrtoint void(i64,i64)* @lam8091266 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097129, i64* %eptr8097124                                             ; store fptr
  %arg8087689 = ptrtoint i64* %cloptr8097123 to i64                                  ; closure cast; i64* -> i64
  %rva8090059 = add i64 0, 0                                                         ; quoted ()
  %rva8090058 = call i64 @prim_cons(i64 %arg8087689, i64 %rva8090059)                ; call prim_cons
  %cloptr8097130 = inttoptr i64 %arg8087690 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097131 = getelementptr inbounds i64, i64* %cloptr8097130, i64 0             ; &cloptr8097130[0]
  %f8097133 = load i64, i64* %i0ptr8097131, align 8                                  ; load; *i0ptr8097131
  %fptr8097132 = inttoptr i64 %f8097133 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097132(i64 %arg8087690, i64 %rva8090058)           ; tail call
  ret void

else8097119:
  %arg8087771 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8097134, i32 0, i32 0)); quoted string
  %retprim8086097 = call i64 @prim_halt(i64 %arg8087771)                             ; call prim_halt
  %cloptr8097135 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097137 = getelementptr inbounds i64, i64* %cloptr8097135, i64 1              ; &eptr8097137[1]
  %eptr8097138 = getelementptr inbounds i64, i64* %cloptr8097135, i64 2              ; &eptr8097138[2]
  %eptr8097139 = getelementptr inbounds i64, i64* %cloptr8097135, i64 3              ; &eptr8097139[3]
  store i64 %xD5$b, i64* %eptr8097137                                                ; *eptr8097137 = %xD5$b
  store i64 %prO$a, i64* %eptr8097138                                                ; *eptr8097138 = %prO$a
  store i64 %U6p$assert, i64* %eptr8097139                                           ; *eptr8097139 = %U6p$assert
  %eptr8097136 = getelementptr inbounds i64, i64* %cloptr8097135, i64 0              ; &cloptr8097135[0]
  %f8097140 = ptrtoint void(i64,i64)* @lam8091311 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097140, i64* %eptr8097136                                             ; store fptr
  %arg8087774 = ptrtoint i64* %cloptr8097135 to i64                                  ; closure cast; i64* -> i64
  %arg8087773 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090116 = add i64 0, 0                                                         ; quoted ()
  %rva8090115 = call i64 @prim_cons(i64 %retprim8086097, i64 %rva8090116)            ; call prim_cons
  %rva8090114 = call i64 @prim_cons(i64 %arg8087773, i64 %rva8090115)                ; call prim_cons
  %cloptr8097141 = inttoptr i64 %arg8087774 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097142 = getelementptr inbounds i64, i64* %cloptr8097141, i64 0             ; &cloptr8097141[0]
  %f8097144 = load i64, i64* %i0ptr8097142, align 8                                  ; load; *i0ptr8097142
  %fptr8097143 = inttoptr i64 %f8097144 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097143(i64 %arg8087774, i64 %rva8090114)           ; tail call
  ret void
}


define void @lam8091311(i64 %env8091312, i64 %rvp8090113) {
  %envptr8097145 = inttoptr i64 %env8091312 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097146 = getelementptr inbounds i64, i64* %envptr8097145, i64 3            ; &envptr8097145[3]
  %U6p$assert = load i64, i64* %envptr8097146, align 8                               ; load; *envptr8097146
  %envptr8097147 = inttoptr i64 %env8091312 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097148 = getelementptr inbounds i64, i64* %envptr8097147, i64 2            ; &envptr8097147[2]
  %prO$a = load i64, i64* %envptr8097148, align 8                                    ; load; *envptr8097148
  %envptr8097149 = inttoptr i64 %env8091312 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097150 = getelementptr inbounds i64, i64* %envptr8097149, i64 1            ; &envptr8097149[1]
  %xD5$b = load i64, i64* %envptr8097150, align 8                                    ; load; *envptr8097150
  %_958086087 = call i64 @prim_car(i64 %rvp8090113)                                  ; call prim_car
  %rvp8090112 = call i64 @prim_cdr(i64 %rvp8090113)                                  ; call prim_cdr
  %UXs$c = call i64 @prim_car(i64 %rvp8090112)                                       ; call prim_car
  %na8090061 = call i64 @prim_cdr(i64 %rvp8090112)                                   ; call prim_cdr
  %arg8087775 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085915 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8087775)          ; call prim_vector_45ref
  %a8085916 = call i64 @prim_procedure_63(i64 %a8085915)                             ; call prim_procedure_63
  %cmp8097151 = icmp eq i64 %a8085916, 15                                            ; false?
  br i1 %cmp8097151, label %else8097153, label %then8097152                          ; if

then8097152:
  %arg8087778 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085917 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8087778)          ; call prim_vector_45ref
  %a8085918 = call i64 @prim__42(i64 %prO$a, i64 %prO$a)                             ; call prim__42
  %a8085919 = call i64 @prim__42(i64 %xD5$b, i64 %xD5$b)                             ; call prim__42
  %a8085920 = call i64 @prim__43(i64 %a8085918, i64 %a8085919)                       ; call prim__43
  %a8085921 = call i64 @prim__42(i64 %UXs$c, i64 %UXs$c)                             ; call prim__42
  %a8085922 = call i64 @prim__61(i64 %a8085920, i64 %a8085921)                       ; call prim__61
  %cloptr8097154 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097156 = getelementptr inbounds i64, i64* %cloptr8097154, i64 1              ; &eptr8097156[1]
  %eptr8097157 = getelementptr inbounds i64, i64* %cloptr8097154, i64 2              ; &eptr8097157[2]
  %eptr8097158 = getelementptr inbounds i64, i64* %cloptr8097154, i64 3              ; &eptr8097158[3]
  store i64 %xD5$b, i64* %eptr8097156                                                ; *eptr8097156 = %xD5$b
  store i64 %prO$a, i64* %eptr8097157                                                ; *eptr8097157 = %prO$a
  store i64 %UXs$c, i64* %eptr8097158                                                ; *eptr8097158 = %UXs$c
  %eptr8097155 = getelementptr inbounds i64, i64* %cloptr8097154, i64 0              ; &cloptr8097154[0]
  %f8097159 = ptrtoint void(i64,i64)* @lam8091289 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097159, i64* %eptr8097155                                             ; store fptr
  %arg8087791 = ptrtoint i64* %cloptr8097154 to i64                                  ; closure cast; i64* -> i64
  %rva8090086 = add i64 0, 0                                                         ; quoted ()
  %rva8090085 = call i64 @prim_cons(i64 %a8085922, i64 %rva8090086)                  ; call prim_cons
  %rva8090084 = call i64 @prim_cons(i64 %arg8087791, i64 %rva8090085)                ; call prim_cons
  %cloptr8097160 = inttoptr i64 %a8085917 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8097161 = getelementptr inbounds i64, i64* %cloptr8097160, i64 0             ; &cloptr8097160[0]
  %f8097163 = load i64, i64* %i0ptr8097161, align 8                                  ; load; *i0ptr8097161
  %fptr8097162 = inttoptr i64 %f8097163 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097162(i64 %a8085917, i64 %rva8090084)             ; tail call
  ret void

else8097153:
  %arg8087814 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8097164, i32 0, i32 0)); quoted string
  %retprim8086093 = call i64 @prim_halt(i64 %arg8087814)                             ; call prim_halt
  %cloptr8097165 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097167 = getelementptr inbounds i64, i64* %cloptr8097165, i64 1              ; &eptr8097167[1]
  %eptr8097168 = getelementptr inbounds i64, i64* %cloptr8097165, i64 2              ; &eptr8097168[2]
  %eptr8097169 = getelementptr inbounds i64, i64* %cloptr8097165, i64 3              ; &eptr8097169[3]
  store i64 %xD5$b, i64* %eptr8097167                                                ; *eptr8097167 = %xD5$b
  store i64 %prO$a, i64* %eptr8097168                                                ; *eptr8097168 = %prO$a
  store i64 %UXs$c, i64* %eptr8097169                                                ; *eptr8097169 = %UXs$c
  %eptr8097166 = getelementptr inbounds i64, i64* %cloptr8097165, i64 0              ; &cloptr8097165[0]
  %f8097170 = ptrtoint void(i64,i64)* @lam8091307 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097170, i64* %eptr8097166                                             ; store fptr
  %arg8087817 = ptrtoint i64* %cloptr8097165 to i64                                  ; closure cast; i64* -> i64
  %arg8087816 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090111 = add i64 0, 0                                                         ; quoted ()
  %rva8090110 = call i64 @prim_cons(i64 %retprim8086093, i64 %rva8090111)            ; call prim_cons
  %rva8090109 = call i64 @prim_cons(i64 %arg8087816, i64 %rva8090110)                ; call prim_cons
  %cloptr8097171 = inttoptr i64 %arg8087817 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097172 = getelementptr inbounds i64, i64* %cloptr8097171, i64 0             ; &cloptr8097171[0]
  %f8097174 = load i64, i64* %i0ptr8097172, align 8                                  ; load; *i0ptr8097172
  %fptr8097173 = inttoptr i64 %f8097174 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097173(i64 %arg8087817, i64 %rva8090109)           ; tail call
  ret void
}


define void @lam8091307(i64 %env8091308, i64 %rvp8090108) {
  %envptr8097175 = inttoptr i64 %env8091308 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097176 = getelementptr inbounds i64, i64* %envptr8097175, i64 3            ; &envptr8097175[3]
  %UXs$c = load i64, i64* %envptr8097176, align 8                                    ; load; *envptr8097176
  %envptr8097177 = inttoptr i64 %env8091308 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097178 = getelementptr inbounds i64, i64* %envptr8097177, i64 2            ; &envptr8097177[2]
  %prO$a = load i64, i64* %envptr8097178, align 8                                    ; load; *envptr8097178
  %envptr8097179 = inttoptr i64 %env8091308 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097180 = getelementptr inbounds i64, i64* %envptr8097179, i64 1            ; &envptr8097179[1]
  %xD5$b = load i64, i64* %envptr8097180, align 8                                    ; load; *envptr8097180
  %_958086088 = call i64 @prim_car(i64 %rvp8090108)                                  ; call prim_car
  %rvp8090107 = call i64 @prim_cdr(i64 %rvp8090108)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090107)                                    ; call prim_car
  %na8090088 = call i64 @prim_cdr(i64 %rvp8090107)                                   ; call prim_cdr
  %cloptr8097181 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097182 = getelementptr inbounds i64, i64* %cloptr8097181, i64 0              ; &cloptr8097181[0]
  %f8097183 = ptrtoint void(i64,i64)* @lam8091305 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097183, i64* %eptr8097182                                             ; store fptr
  %arg8087819 = ptrtoint i64* %cloptr8097181 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097184 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097186 = getelementptr inbounds i64, i64* %cloptr8097184, i64 1              ; &eptr8097186[1]
  %eptr8097187 = getelementptr inbounds i64, i64* %cloptr8097184, i64 2              ; &eptr8097187[2]
  %eptr8097188 = getelementptr inbounds i64, i64* %cloptr8097184, i64 3              ; &eptr8097188[3]
  store i64 %xD5$b, i64* %eptr8097186                                                ; *eptr8097186 = %xD5$b
  store i64 %prO$a, i64* %eptr8097187                                                ; *eptr8097187 = %prO$a
  store i64 %UXs$c, i64* %eptr8097188                                                ; *eptr8097188 = %UXs$c
  %eptr8097185 = getelementptr inbounds i64, i64* %cloptr8097184, i64 0              ; &cloptr8097184[0]
  %f8097189 = ptrtoint void(i64,i64)* @lam8091301 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097189, i64* %eptr8097185                                             ; store fptr
  %arg8087818 = ptrtoint i64* %cloptr8097184 to i64                                  ; closure cast; i64* -> i64
  %rva8090106 = add i64 0, 0                                                         ; quoted ()
  %rva8090105 = call i64 @prim_cons(i64 %arg8087818, i64 %rva8090106)                ; call prim_cons
  %cloptr8097190 = inttoptr i64 %arg8087819 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097191 = getelementptr inbounds i64, i64* %cloptr8097190, i64 0             ; &cloptr8097190[0]
  %f8097193 = load i64, i64* %i0ptr8097191, align 8                                  ; load; *i0ptr8097191
  %fptr8097192 = inttoptr i64 %f8097193 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097192(i64 %arg8087819, i64 %rva8090105)           ; tail call
  ret void
}


define void @lam8091305(i64 %env8091306, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8087823 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090091 = add i64 0, 0                                                         ; quoted ()
  %rva8090090 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090091)                   ; call prim_cons
  %rva8090089 = call i64 @prim_cons(i64 %arg8087823, i64 %rva8090090)                ; call prim_cons
  %cloptr8097194 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097195 = getelementptr inbounds i64, i64* %cloptr8097194, i64 0             ; &cloptr8097194[0]
  %f8097197 = load i64, i64* %i0ptr8097195, align 8                                  ; load; *i0ptr8097195
  %fptr8097196 = inttoptr i64 %f8097197 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097196(i64 %cont8086091, i64 %rva8090089)          ; tail call
  ret void
}


define void @lam8091301(i64 %env8091302, i64 %rvp8090104) {
  %envptr8097198 = inttoptr i64 %env8091302 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097199 = getelementptr inbounds i64, i64* %envptr8097198, i64 3            ; &envptr8097198[3]
  %UXs$c = load i64, i64* %envptr8097199, align 8                                    ; load; *envptr8097199
  %envptr8097200 = inttoptr i64 %env8091302 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097201 = getelementptr inbounds i64, i64* %envptr8097200, i64 2            ; &envptr8097200[2]
  %prO$a = load i64, i64* %envptr8097201, align 8                                    ; load; *envptr8097201
  %envptr8097202 = inttoptr i64 %env8091302 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097203 = getelementptr inbounds i64, i64* %envptr8097202, i64 1            ; &envptr8097202[1]
  %xD5$b = load i64, i64* %envptr8097203, align 8                                    ; load; *envptr8097203
  %_958086089 = call i64 @prim_car(i64 %rvp8090104)                                  ; call prim_car
  %rvp8090103 = call i64 @prim_cdr(i64 %rvp8090104)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090103)                                    ; call prim_car
  %na8090093 = call i64 @prim_cdr(i64 %rvp8090103)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8087832 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8097204, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8087832, i64 %a8085926)              ; call prim_cons
  %cloptr8097205 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097206 = getelementptr inbounds i64, i64* %cloptr8097205, i64 0              ; &cloptr8097205[0]
  %f8097207 = ptrtoint void(i64,i64)* @lam8091298 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097207, i64* %eptr8097206                                             ; store fptr
  %arg8087835 = ptrtoint i64* %cloptr8097205 to i64                                  ; closure cast; i64* -> i64
  %arg8087834 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090102 = add i64 0, 0                                                         ; quoted ()
  %rva8090101 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090102)            ; call prim_cons
  %rva8090100 = call i64 @prim_cons(i64 %arg8087834, i64 %rva8090101)                ; call prim_cons
  %cloptr8097208 = inttoptr i64 %arg8087835 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097209 = getelementptr inbounds i64, i64* %cloptr8097208, i64 0             ; &cloptr8097208[0]
  %f8097211 = load i64, i64* %i0ptr8097209, align 8                                  ; load; *i0ptr8097209
  %fptr8097210 = inttoptr i64 %f8097211 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097210(i64 %arg8087835, i64 %rva8090100)           ; tail call
  ret void
}


define void @lam8091298(i64 %env8091299, i64 %rvp8090099) {
  %_950 = call i64 @prim_car(i64 %rvp8090099)                                        ; call prim_car
  %rvp8090098 = call i64 @prim_cdr(i64 %rvp8090099)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090098)                                           ; call prim_car
  %na8090095 = call i64 @prim_cdr(i64 %rvp8090098)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090097 = add i64 0, 0                                                         ; quoted ()
  %rva8090096 = call i64 @prim_cons(i64 %_951, i64 %rva8090097)                      ; call prim_cons
  %cloptr8097212 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8097213 = getelementptr inbounds i64, i64* %cloptr8097212, i64 0             ; &cloptr8097212[0]
  %f8097215 = load i64, i64* %i0ptr8097213, align 8                                  ; load; *i0ptr8097213
  %fptr8097214 = inttoptr i64 %f8097215 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097214(i64 %_951, i64 %rva8090096)                 ; tail call
  ret void
}


define void @lam8091289(i64 %env8091290, i64 %rvp8090083) {
  %envptr8097216 = inttoptr i64 %env8091290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097217 = getelementptr inbounds i64, i64* %envptr8097216, i64 3            ; &envptr8097216[3]
  %UXs$c = load i64, i64* %envptr8097217, align 8                                    ; load; *envptr8097217
  %envptr8097218 = inttoptr i64 %env8091290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097219 = getelementptr inbounds i64, i64* %envptr8097218, i64 2            ; &envptr8097218[2]
  %prO$a = load i64, i64* %envptr8097219, align 8                                    ; load; *envptr8097219
  %envptr8097220 = inttoptr i64 %env8091290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097221 = getelementptr inbounds i64, i64* %envptr8097220, i64 1            ; &envptr8097220[1]
  %xD5$b = load i64, i64* %envptr8097221, align 8                                    ; load; *envptr8097221
  %_958086088 = call i64 @prim_car(i64 %rvp8090083)                                  ; call prim_car
  %rvp8090082 = call i64 @prim_cdr(i64 %rvp8090083)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090082)                                    ; call prim_car
  %na8090063 = call i64 @prim_cdr(i64 %rvp8090082)                                   ; call prim_cdr
  %cloptr8097222 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097223 = getelementptr inbounds i64, i64* %cloptr8097222, i64 0              ; &cloptr8097222[0]
  %f8097224 = ptrtoint void(i64,i64)* @lam8091287 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097224, i64* %eptr8097223                                             ; store fptr
  %arg8087794 = ptrtoint i64* %cloptr8097222 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097225 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097227 = getelementptr inbounds i64, i64* %cloptr8097225, i64 1              ; &eptr8097227[1]
  %eptr8097228 = getelementptr inbounds i64, i64* %cloptr8097225, i64 2              ; &eptr8097228[2]
  %eptr8097229 = getelementptr inbounds i64, i64* %cloptr8097225, i64 3              ; &eptr8097229[3]
  store i64 %xD5$b, i64* %eptr8097227                                                ; *eptr8097227 = %xD5$b
  store i64 %prO$a, i64* %eptr8097228                                                ; *eptr8097228 = %prO$a
  store i64 %UXs$c, i64* %eptr8097229                                                ; *eptr8097229 = %UXs$c
  %eptr8097226 = getelementptr inbounds i64, i64* %cloptr8097225, i64 0              ; &cloptr8097225[0]
  %f8097230 = ptrtoint void(i64,i64)* @lam8091283 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097230, i64* %eptr8097226                                             ; store fptr
  %arg8087793 = ptrtoint i64* %cloptr8097225 to i64                                  ; closure cast; i64* -> i64
  %rva8090081 = add i64 0, 0                                                         ; quoted ()
  %rva8090080 = call i64 @prim_cons(i64 %arg8087793, i64 %rva8090081)                ; call prim_cons
  %cloptr8097231 = inttoptr i64 %arg8087794 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097232 = getelementptr inbounds i64, i64* %cloptr8097231, i64 0             ; &cloptr8097231[0]
  %f8097234 = load i64, i64* %i0ptr8097232, align 8                                  ; load; *i0ptr8097232
  %fptr8097233 = inttoptr i64 %f8097234 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097233(i64 %arg8087794, i64 %rva8090080)           ; tail call
  ret void
}


define void @lam8091287(i64 %env8091288, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8087798 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090066 = add i64 0, 0                                                         ; quoted ()
  %rva8090065 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090066)                   ; call prim_cons
  %rva8090064 = call i64 @prim_cons(i64 %arg8087798, i64 %rva8090065)                ; call prim_cons
  %cloptr8097235 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097236 = getelementptr inbounds i64, i64* %cloptr8097235, i64 0             ; &cloptr8097235[0]
  %f8097238 = load i64, i64* %i0ptr8097236, align 8                                  ; load; *i0ptr8097236
  %fptr8097237 = inttoptr i64 %f8097238 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097237(i64 %cont8086091, i64 %rva8090064)          ; tail call
  ret void
}


define void @lam8091283(i64 %env8091284, i64 %rvp8090079) {
  %envptr8097239 = inttoptr i64 %env8091284 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097240 = getelementptr inbounds i64, i64* %envptr8097239, i64 3            ; &envptr8097239[3]
  %UXs$c = load i64, i64* %envptr8097240, align 8                                    ; load; *envptr8097240
  %envptr8097241 = inttoptr i64 %env8091284 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097242 = getelementptr inbounds i64, i64* %envptr8097241, i64 2            ; &envptr8097241[2]
  %prO$a = load i64, i64* %envptr8097242, align 8                                    ; load; *envptr8097242
  %envptr8097243 = inttoptr i64 %env8091284 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097244 = getelementptr inbounds i64, i64* %envptr8097243, i64 1            ; &envptr8097243[1]
  %xD5$b = load i64, i64* %envptr8097244, align 8                                    ; load; *envptr8097244
  %_958086089 = call i64 @prim_car(i64 %rvp8090079)                                  ; call prim_car
  %rvp8090078 = call i64 @prim_cdr(i64 %rvp8090079)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090078)                                    ; call prim_car
  %na8090068 = call i64 @prim_cdr(i64 %rvp8090078)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8087807 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8097245, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8087807, i64 %a8085926)              ; call prim_cons
  %cloptr8097246 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097247 = getelementptr inbounds i64, i64* %cloptr8097246, i64 0              ; &cloptr8097246[0]
  %f8097248 = ptrtoint void(i64,i64)* @lam8091280 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097248, i64* %eptr8097247                                             ; store fptr
  %arg8087810 = ptrtoint i64* %cloptr8097246 to i64                                  ; closure cast; i64* -> i64
  %arg8087809 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090077 = add i64 0, 0                                                         ; quoted ()
  %rva8090076 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090077)            ; call prim_cons
  %rva8090075 = call i64 @prim_cons(i64 %arg8087809, i64 %rva8090076)                ; call prim_cons
  %cloptr8097249 = inttoptr i64 %arg8087810 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097250 = getelementptr inbounds i64, i64* %cloptr8097249, i64 0             ; &cloptr8097249[0]
  %f8097252 = load i64, i64* %i0ptr8097250, align 8                                  ; load; *i0ptr8097250
  %fptr8097251 = inttoptr i64 %f8097252 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097251(i64 %arg8087810, i64 %rva8090075)           ; tail call
  ret void
}


define void @lam8091280(i64 %env8091281, i64 %rvp8090074) {
  %_950 = call i64 @prim_car(i64 %rvp8090074)                                        ; call prim_car
  %rvp8090073 = call i64 @prim_cdr(i64 %rvp8090074)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090073)                                           ; call prim_car
  %na8090070 = call i64 @prim_cdr(i64 %rvp8090073)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090072 = add i64 0, 0                                                         ; quoted ()
  %rva8090071 = call i64 @prim_cons(i64 %_951, i64 %rva8090072)                      ; call prim_cons
  %cloptr8097253 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8097254 = getelementptr inbounds i64, i64* %cloptr8097253, i64 0             ; &cloptr8097253[0]
  %f8097256 = load i64, i64* %i0ptr8097254, align 8                                  ; load; *i0ptr8097254
  %fptr8097255 = inttoptr i64 %f8097256 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097255(i64 %_951, i64 %rva8090071)                 ; tail call
  ret void
}


define void @lam8091270(i64 %env8091271, i64 %N3p$lst8086096) {
  %cont8086095 = call i64 @prim_car(i64 %N3p$lst8086096)                             ; call prim_car
  %N3p$lst = call i64 @prim_cdr(i64 %N3p$lst8086096)                                 ; call prim_cdr
  %arg8087694 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8089996 = add i64 0, 0                                                         ; quoted ()
  %rva8089995 = call i64 @prim_cons(i64 %N3p$lst, i64 %rva8089996)                   ; call prim_cons
  %rva8089994 = call i64 @prim_cons(i64 %arg8087694, i64 %rva8089995)                ; call prim_cons
  %cloptr8097257 = inttoptr i64 %cont8086095 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097258 = getelementptr inbounds i64, i64* %cloptr8097257, i64 0             ; &cloptr8097257[0]
  %f8097260 = load i64, i64* %i0ptr8097258, align 8                                  ; load; *i0ptr8097258
  %fptr8097259 = inttoptr i64 %f8097260 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097259(i64 %cont8086095, i64 %rva8089994)          ; tail call
  ret void
}


define void @lam8091266(i64 %env8091267, i64 %rvp8090057) {
  %envptr8097261 = inttoptr i64 %env8091267 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097262 = getelementptr inbounds i64, i64* %envptr8097261, i64 4            ; &envptr8097261[4]
  %a8085909 = load i64, i64* %envptr8097262, align 8                                 ; load; *envptr8097262
  %envptr8097263 = inttoptr i64 %env8091267 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097264 = getelementptr inbounds i64, i64* %envptr8097263, i64 3            ; &envptr8097263[3]
  %U6p$assert = load i64, i64* %envptr8097264, align 8                               ; load; *envptr8097264
  %envptr8097265 = inttoptr i64 %env8091267 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097266 = getelementptr inbounds i64, i64* %envptr8097265, i64 2            ; &envptr8097265[2]
  %prO$a = load i64, i64* %envptr8097266, align 8                                    ; load; *envptr8097266
  %envptr8097267 = inttoptr i64 %env8091267 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097268 = getelementptr inbounds i64, i64* %envptr8097267, i64 1            ; &envptr8097267[1]
  %xD5$b = load i64, i64* %envptr8097268, align 8                                    ; load; *envptr8097268
  %_958086094 = call i64 @prim_car(i64 %rvp8090057)                                  ; call prim_car
  %rvp8090056 = call i64 @prim_cdr(i64 %rvp8090057)                                  ; call prim_cdr
  %a8085910 = call i64 @prim_car(i64 %rvp8090056)                                    ; call prim_car
  %na8089998 = call i64 @prim_cdr(i64 %rvp8090056)                                   ; call prim_cdr
  %arg8087697 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8085911 = call i64 @prim_cons(i64 %arg8087697, i64 %a8085910)                    ; call prim_cons
  %arg8087699 = call i64 @const_init_int(i64 4)                                      ; quoted int
  %a8085912 = call i64 @prim_cons(i64 %arg8087699, i64 %a8085911)                    ; call prim_cons
  %arg8087701 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %a8085913 = call i64 @prim_cons(i64 %arg8087701, i64 %a8085912)                    ; call prim_cons
  %arg8087703 = call i64 @const_init_int(i64 2)                                      ; quoted int
  %a8085914 = call i64 @prim_cons(i64 %arg8087703, i64 %a8085913)                    ; call prim_cons
  %cloptr8097269 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097271 = getelementptr inbounds i64, i64* %cloptr8097269, i64 1              ; &eptr8097271[1]
  %eptr8097272 = getelementptr inbounds i64, i64* %cloptr8097269, i64 2              ; &eptr8097272[2]
  %eptr8097273 = getelementptr inbounds i64, i64* %cloptr8097269, i64 3              ; &eptr8097273[3]
  store i64 %xD5$b, i64* %eptr8097271                                                ; *eptr8097271 = %xD5$b
  store i64 %prO$a, i64* %eptr8097272                                                ; *eptr8097272 = %prO$a
  store i64 %U6p$assert, i64* %eptr8097273                                           ; *eptr8097273 = %U6p$assert
  %eptr8097270 = getelementptr inbounds i64, i64* %cloptr8097269, i64 0              ; &cloptr8097269[0]
  %f8097274 = ptrtoint void(i64,i64)* @lam8091260 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097274, i64* %eptr8097270                                             ; store fptr
  %arg8087705 = ptrtoint i64* %cloptr8097269 to i64                                  ; closure cast; i64* -> i64
  %rva8090055 = add i64 0, 0                                                         ; quoted ()
  %rva8090054 = call i64 @prim_cons(i64 %a8085914, i64 %rva8090055)                  ; call prim_cons
  %rva8090053 = call i64 @prim_cons(i64 %arg8087705, i64 %rva8090054)                ; call prim_cons
  %cloptr8097275 = inttoptr i64 %a8085909 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8097276 = getelementptr inbounds i64, i64* %cloptr8097275, i64 0             ; &cloptr8097275[0]
  %f8097278 = load i64, i64* %i0ptr8097276, align 8                                  ; load; *i0ptr8097276
  %fptr8097277 = inttoptr i64 %f8097278 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097277(i64 %a8085909, i64 %rva8090053)             ; tail call
  ret void
}


define void @lam8091260(i64 %env8091261, i64 %rvp8090052) {
  %envptr8097279 = inttoptr i64 %env8091261 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097280 = getelementptr inbounds i64, i64* %envptr8097279, i64 3            ; &envptr8097279[3]
  %U6p$assert = load i64, i64* %envptr8097280, align 8                               ; load; *envptr8097280
  %envptr8097281 = inttoptr i64 %env8091261 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097282 = getelementptr inbounds i64, i64* %envptr8097281, i64 2            ; &envptr8097281[2]
  %prO$a = load i64, i64* %envptr8097282, align 8                                    ; load; *envptr8097282
  %envptr8097283 = inttoptr i64 %env8091261 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097284 = getelementptr inbounds i64, i64* %envptr8097283, i64 1            ; &envptr8097283[1]
  %xD5$b = load i64, i64* %envptr8097284, align 8                                    ; load; *envptr8097284
  %_958086087 = call i64 @prim_car(i64 %rvp8090052)                                  ; call prim_car
  %rvp8090051 = call i64 @prim_cdr(i64 %rvp8090052)                                  ; call prim_cdr
  %UXs$c = call i64 @prim_car(i64 %rvp8090051)                                       ; call prim_car
  %na8090000 = call i64 @prim_cdr(i64 %rvp8090051)                                   ; call prim_cdr
  %arg8087707 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085915 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8087707)          ; call prim_vector_45ref
  %a8085916 = call i64 @prim_procedure_63(i64 %a8085915)                             ; call prim_procedure_63
  %cmp8097285 = icmp eq i64 %a8085916, 15                                            ; false?
  br i1 %cmp8097285, label %else8097287, label %then8097286                          ; if

then8097286:
  %arg8087710 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085917 = call i64 @prim_vector_45ref(i64 %U6p$assert, i64 %arg8087710)          ; call prim_vector_45ref
  %a8085918 = call i64 @prim__42(i64 %prO$a, i64 %prO$a)                             ; call prim__42
  %a8085919 = call i64 @prim__42(i64 %xD5$b, i64 %xD5$b)                             ; call prim__42
  %a8085920 = call i64 @prim__43(i64 %a8085918, i64 %a8085919)                       ; call prim__43
  %a8085921 = call i64 @prim__42(i64 %UXs$c, i64 %UXs$c)                             ; call prim__42
  %a8085922 = call i64 @prim__61(i64 %a8085920, i64 %a8085921)                       ; call prim__61
  %cloptr8097288 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097290 = getelementptr inbounds i64, i64* %cloptr8097288, i64 1              ; &eptr8097290[1]
  %eptr8097291 = getelementptr inbounds i64, i64* %cloptr8097288, i64 2              ; &eptr8097291[2]
  %eptr8097292 = getelementptr inbounds i64, i64* %cloptr8097288, i64 3              ; &eptr8097292[3]
  store i64 %xD5$b, i64* %eptr8097290                                                ; *eptr8097290 = %xD5$b
  store i64 %prO$a, i64* %eptr8097291                                                ; *eptr8097291 = %prO$a
  store i64 %UXs$c, i64* %eptr8097292                                                ; *eptr8097292 = %UXs$c
  %eptr8097289 = getelementptr inbounds i64, i64* %cloptr8097288, i64 0              ; &cloptr8097288[0]
  %f8097293 = ptrtoint void(i64,i64)* @lam8091238 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097293, i64* %eptr8097289                                             ; store fptr
  %arg8087723 = ptrtoint i64* %cloptr8097288 to i64                                  ; closure cast; i64* -> i64
  %rva8090025 = add i64 0, 0                                                         ; quoted ()
  %rva8090024 = call i64 @prim_cons(i64 %a8085922, i64 %rva8090025)                  ; call prim_cons
  %rva8090023 = call i64 @prim_cons(i64 %arg8087723, i64 %rva8090024)                ; call prim_cons
  %cloptr8097294 = inttoptr i64 %a8085917 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8097295 = getelementptr inbounds i64, i64* %cloptr8097294, i64 0             ; &cloptr8097294[0]
  %f8097297 = load i64, i64* %i0ptr8097295, align 8                                  ; load; *i0ptr8097295
  %fptr8097296 = inttoptr i64 %f8097297 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097296(i64 %a8085917, i64 %rva8090023)             ; tail call
  ret void

else8097287:
  %arg8087746 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8097298, i32 0, i32 0)); quoted string
  %retprim8086093 = call i64 @prim_halt(i64 %arg8087746)                             ; call prim_halt
  %cloptr8097299 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097301 = getelementptr inbounds i64, i64* %cloptr8097299, i64 1              ; &eptr8097301[1]
  %eptr8097302 = getelementptr inbounds i64, i64* %cloptr8097299, i64 2              ; &eptr8097302[2]
  %eptr8097303 = getelementptr inbounds i64, i64* %cloptr8097299, i64 3              ; &eptr8097303[3]
  store i64 %xD5$b, i64* %eptr8097301                                                ; *eptr8097301 = %xD5$b
  store i64 %prO$a, i64* %eptr8097302                                                ; *eptr8097302 = %prO$a
  store i64 %UXs$c, i64* %eptr8097303                                                ; *eptr8097303 = %UXs$c
  %eptr8097300 = getelementptr inbounds i64, i64* %cloptr8097299, i64 0              ; &cloptr8097299[0]
  %f8097304 = ptrtoint void(i64,i64)* @lam8091256 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097304, i64* %eptr8097300                                             ; store fptr
  %arg8087749 = ptrtoint i64* %cloptr8097299 to i64                                  ; closure cast; i64* -> i64
  %arg8087748 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090050 = add i64 0, 0                                                         ; quoted ()
  %rva8090049 = call i64 @prim_cons(i64 %retprim8086093, i64 %rva8090050)            ; call prim_cons
  %rva8090048 = call i64 @prim_cons(i64 %arg8087748, i64 %rva8090049)                ; call prim_cons
  %cloptr8097305 = inttoptr i64 %arg8087749 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097306 = getelementptr inbounds i64, i64* %cloptr8097305, i64 0             ; &cloptr8097305[0]
  %f8097308 = load i64, i64* %i0ptr8097306, align 8                                  ; load; *i0ptr8097306
  %fptr8097307 = inttoptr i64 %f8097308 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097307(i64 %arg8087749, i64 %rva8090048)           ; tail call
  ret void
}


define void @lam8091256(i64 %env8091257, i64 %rvp8090047) {
  %envptr8097309 = inttoptr i64 %env8091257 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097310 = getelementptr inbounds i64, i64* %envptr8097309, i64 3            ; &envptr8097309[3]
  %UXs$c = load i64, i64* %envptr8097310, align 8                                    ; load; *envptr8097310
  %envptr8097311 = inttoptr i64 %env8091257 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097312 = getelementptr inbounds i64, i64* %envptr8097311, i64 2            ; &envptr8097311[2]
  %prO$a = load i64, i64* %envptr8097312, align 8                                    ; load; *envptr8097312
  %envptr8097313 = inttoptr i64 %env8091257 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097314 = getelementptr inbounds i64, i64* %envptr8097313, i64 1            ; &envptr8097313[1]
  %xD5$b = load i64, i64* %envptr8097314, align 8                                    ; load; *envptr8097314
  %_958086088 = call i64 @prim_car(i64 %rvp8090047)                                  ; call prim_car
  %rvp8090046 = call i64 @prim_cdr(i64 %rvp8090047)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090046)                                    ; call prim_car
  %na8090027 = call i64 @prim_cdr(i64 %rvp8090046)                                   ; call prim_cdr
  %cloptr8097315 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097316 = getelementptr inbounds i64, i64* %cloptr8097315, i64 0              ; &cloptr8097315[0]
  %f8097317 = ptrtoint void(i64,i64)* @lam8091254 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097317, i64* %eptr8097316                                             ; store fptr
  %arg8087751 = ptrtoint i64* %cloptr8097315 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097318 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097320 = getelementptr inbounds i64, i64* %cloptr8097318, i64 1              ; &eptr8097320[1]
  %eptr8097321 = getelementptr inbounds i64, i64* %cloptr8097318, i64 2              ; &eptr8097321[2]
  %eptr8097322 = getelementptr inbounds i64, i64* %cloptr8097318, i64 3              ; &eptr8097322[3]
  store i64 %xD5$b, i64* %eptr8097320                                                ; *eptr8097320 = %xD5$b
  store i64 %prO$a, i64* %eptr8097321                                                ; *eptr8097321 = %prO$a
  store i64 %UXs$c, i64* %eptr8097322                                                ; *eptr8097322 = %UXs$c
  %eptr8097319 = getelementptr inbounds i64, i64* %cloptr8097318, i64 0              ; &cloptr8097318[0]
  %f8097323 = ptrtoint void(i64,i64)* @lam8091250 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097323, i64* %eptr8097319                                             ; store fptr
  %arg8087750 = ptrtoint i64* %cloptr8097318 to i64                                  ; closure cast; i64* -> i64
  %rva8090045 = add i64 0, 0                                                         ; quoted ()
  %rva8090044 = call i64 @prim_cons(i64 %arg8087750, i64 %rva8090045)                ; call prim_cons
  %cloptr8097324 = inttoptr i64 %arg8087751 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097325 = getelementptr inbounds i64, i64* %cloptr8097324, i64 0             ; &cloptr8097324[0]
  %f8097327 = load i64, i64* %i0ptr8097325, align 8                                  ; load; *i0ptr8097325
  %fptr8097326 = inttoptr i64 %f8097327 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097326(i64 %arg8087751, i64 %rva8090044)           ; tail call
  ret void
}


define void @lam8091254(i64 %env8091255, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8087755 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090030 = add i64 0, 0                                                         ; quoted ()
  %rva8090029 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090030)                   ; call prim_cons
  %rva8090028 = call i64 @prim_cons(i64 %arg8087755, i64 %rva8090029)                ; call prim_cons
  %cloptr8097328 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097329 = getelementptr inbounds i64, i64* %cloptr8097328, i64 0             ; &cloptr8097328[0]
  %f8097331 = load i64, i64* %i0ptr8097329, align 8                                  ; load; *i0ptr8097329
  %fptr8097330 = inttoptr i64 %f8097331 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097330(i64 %cont8086091, i64 %rva8090028)          ; tail call
  ret void
}


define void @lam8091250(i64 %env8091251, i64 %rvp8090043) {
  %envptr8097332 = inttoptr i64 %env8091251 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097333 = getelementptr inbounds i64, i64* %envptr8097332, i64 3            ; &envptr8097332[3]
  %UXs$c = load i64, i64* %envptr8097333, align 8                                    ; load; *envptr8097333
  %envptr8097334 = inttoptr i64 %env8091251 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097335 = getelementptr inbounds i64, i64* %envptr8097334, i64 2            ; &envptr8097334[2]
  %prO$a = load i64, i64* %envptr8097335, align 8                                    ; load; *envptr8097335
  %envptr8097336 = inttoptr i64 %env8091251 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097337 = getelementptr inbounds i64, i64* %envptr8097336, i64 1            ; &envptr8097336[1]
  %xD5$b = load i64, i64* %envptr8097337, align 8                                    ; load; *envptr8097337
  %_958086089 = call i64 @prim_car(i64 %rvp8090043)                                  ; call prim_car
  %rvp8090042 = call i64 @prim_cdr(i64 %rvp8090043)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090042)                                    ; call prim_car
  %na8090032 = call i64 @prim_cdr(i64 %rvp8090042)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8087764 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8097338, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8087764, i64 %a8085926)              ; call prim_cons
  %cloptr8097339 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097340 = getelementptr inbounds i64, i64* %cloptr8097339, i64 0              ; &cloptr8097339[0]
  %f8097341 = ptrtoint void(i64,i64)* @lam8091247 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097341, i64* %eptr8097340                                             ; store fptr
  %arg8087767 = ptrtoint i64* %cloptr8097339 to i64                                  ; closure cast; i64* -> i64
  %arg8087766 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090041 = add i64 0, 0                                                         ; quoted ()
  %rva8090040 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090041)            ; call prim_cons
  %rva8090039 = call i64 @prim_cons(i64 %arg8087766, i64 %rva8090040)                ; call prim_cons
  %cloptr8097342 = inttoptr i64 %arg8087767 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097343 = getelementptr inbounds i64, i64* %cloptr8097342, i64 0             ; &cloptr8097342[0]
  %f8097345 = load i64, i64* %i0ptr8097343, align 8                                  ; load; *i0ptr8097343
  %fptr8097344 = inttoptr i64 %f8097345 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097344(i64 %arg8087767, i64 %rva8090039)           ; tail call
  ret void
}


define void @lam8091247(i64 %env8091248, i64 %rvp8090038) {
  %_950 = call i64 @prim_car(i64 %rvp8090038)                                        ; call prim_car
  %rvp8090037 = call i64 @prim_cdr(i64 %rvp8090038)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090037)                                           ; call prim_car
  %na8090034 = call i64 @prim_cdr(i64 %rvp8090037)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090036 = add i64 0, 0                                                         ; quoted ()
  %rva8090035 = call i64 @prim_cons(i64 %_951, i64 %rva8090036)                      ; call prim_cons
  %cloptr8097346 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8097347 = getelementptr inbounds i64, i64* %cloptr8097346, i64 0             ; &cloptr8097346[0]
  %f8097349 = load i64, i64* %i0ptr8097347, align 8                                  ; load; *i0ptr8097347
  %fptr8097348 = inttoptr i64 %f8097349 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097348(i64 %_951, i64 %rva8090035)                 ; tail call
  ret void
}


define void @lam8091238(i64 %env8091239, i64 %rvp8090022) {
  %envptr8097350 = inttoptr i64 %env8091239 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097351 = getelementptr inbounds i64, i64* %envptr8097350, i64 3            ; &envptr8097350[3]
  %UXs$c = load i64, i64* %envptr8097351, align 8                                    ; load; *envptr8097351
  %envptr8097352 = inttoptr i64 %env8091239 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097353 = getelementptr inbounds i64, i64* %envptr8097352, i64 2            ; &envptr8097352[2]
  %prO$a = load i64, i64* %envptr8097353, align 8                                    ; load; *envptr8097353
  %envptr8097354 = inttoptr i64 %env8091239 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097355 = getelementptr inbounds i64, i64* %envptr8097354, i64 1            ; &envptr8097354[1]
  %xD5$b = load i64, i64* %envptr8097355, align 8                                    ; load; *envptr8097355
  %_958086088 = call i64 @prim_car(i64 %rvp8090022)                                  ; call prim_car
  %rvp8090021 = call i64 @prim_cdr(i64 %rvp8090022)                                  ; call prim_cdr
  %cVG$_95t = call i64 @prim_car(i64 %rvp8090021)                                    ; call prim_car
  %na8090002 = call i64 @prim_cdr(i64 %rvp8090021)                                   ; call prim_cdr
  %cloptr8097356 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097357 = getelementptr inbounds i64, i64* %cloptr8097356, i64 0              ; &cloptr8097356[0]
  %f8097358 = ptrtoint void(i64,i64)* @lam8091236 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097358, i64* %eptr8097357                                             ; store fptr
  %arg8087726 = ptrtoint i64* %cloptr8097356 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097359 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097361 = getelementptr inbounds i64, i64* %cloptr8097359, i64 1              ; &eptr8097361[1]
  %eptr8097362 = getelementptr inbounds i64, i64* %cloptr8097359, i64 2              ; &eptr8097362[2]
  %eptr8097363 = getelementptr inbounds i64, i64* %cloptr8097359, i64 3              ; &eptr8097363[3]
  store i64 %xD5$b, i64* %eptr8097361                                                ; *eptr8097361 = %xD5$b
  store i64 %prO$a, i64* %eptr8097362                                                ; *eptr8097362 = %prO$a
  store i64 %UXs$c, i64* %eptr8097363                                                ; *eptr8097363 = %UXs$c
  %eptr8097360 = getelementptr inbounds i64, i64* %cloptr8097359, i64 0              ; &cloptr8097359[0]
  %f8097364 = ptrtoint void(i64,i64)* @lam8091232 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097364, i64* %eptr8097360                                             ; store fptr
  %arg8087725 = ptrtoint i64* %cloptr8097359 to i64                                  ; closure cast; i64* -> i64
  %rva8090020 = add i64 0, 0                                                         ; quoted ()
  %rva8090019 = call i64 @prim_cons(i64 %arg8087725, i64 %rva8090020)                ; call prim_cons
  %cloptr8097365 = inttoptr i64 %arg8087726 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097366 = getelementptr inbounds i64, i64* %cloptr8097365, i64 0             ; &cloptr8097365[0]
  %f8097368 = load i64, i64* %i0ptr8097366, align 8                                  ; load; *i0ptr8097366
  %fptr8097367 = inttoptr i64 %f8097368 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097367(i64 %arg8087726, i64 %rva8090019)           ; tail call
  ret void
}


define void @lam8091236(i64 %env8091237, i64 %kM3$lst8086092) {
  %cont8086091 = call i64 @prim_car(i64 %kM3$lst8086092)                             ; call prim_car
  %kM3$lst = call i64 @prim_cdr(i64 %kM3$lst8086092)                                 ; call prim_cdr
  %arg8087730 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090005 = add i64 0, 0                                                         ; quoted ()
  %rva8090004 = call i64 @prim_cons(i64 %kM3$lst, i64 %rva8090005)                   ; call prim_cons
  %rva8090003 = call i64 @prim_cons(i64 %arg8087730, i64 %rva8090004)                ; call prim_cons
  %cloptr8097369 = inttoptr i64 %cont8086091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097370 = getelementptr inbounds i64, i64* %cloptr8097369, i64 0             ; &cloptr8097369[0]
  %f8097372 = load i64, i64* %i0ptr8097370, align 8                                  ; load; *i0ptr8097370
  %fptr8097371 = inttoptr i64 %f8097372 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097371(i64 %cont8086091, i64 %rva8090003)          ; tail call
  ret void
}


define void @lam8091232(i64 %env8091233, i64 %rvp8090018) {
  %envptr8097373 = inttoptr i64 %env8091233 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097374 = getelementptr inbounds i64, i64* %envptr8097373, i64 3            ; &envptr8097373[3]
  %UXs$c = load i64, i64* %envptr8097374, align 8                                    ; load; *envptr8097374
  %envptr8097375 = inttoptr i64 %env8091233 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097376 = getelementptr inbounds i64, i64* %envptr8097375, i64 2            ; &envptr8097375[2]
  %prO$a = load i64, i64* %envptr8097376, align 8                                    ; load; *envptr8097376
  %envptr8097377 = inttoptr i64 %env8091233 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097378 = getelementptr inbounds i64, i64* %envptr8097377, i64 1            ; &envptr8097377[1]
  %xD5$b = load i64, i64* %envptr8097378, align 8                                    ; load; *envptr8097378
  %_958086089 = call i64 @prim_car(i64 %rvp8090018)                                  ; call prim_car
  %rvp8090017 = call i64 @prim_cdr(i64 %rvp8090018)                                  ; call prim_cdr
  %a8085923 = call i64 @prim_car(i64 %rvp8090017)                                    ; call prim_car
  %na8090007 = call i64 @prim_cdr(i64 %rvp8090017)                                   ; call prim_cdr
  %a8085924 = call i64 @prim_cons(i64 %UXs$c, i64 %a8085923)                         ; call prim_cons
  %a8085925 = call i64 @prim_cons(i64 %xD5$b, i64 %a8085924)                         ; call prim_cons
  %a8085926 = call i64 @prim_cons(i64 %prO$a, i64 %a8085925)                         ; call prim_cons
  %arg8087739 = call i64 @const_init_symbol(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @sym8097379, i32 0, i32 0)); quoted string
  %retprim8086090 = call i64 @prim_cons(i64 %arg8087739, i64 %a8085926)              ; call prim_cons
  %cloptr8097380 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097381 = getelementptr inbounds i64, i64* %cloptr8097380, i64 0              ; &cloptr8097380[0]
  %f8097382 = ptrtoint void(i64,i64)* @lam8091229 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097382, i64* %eptr8097381                                             ; store fptr
  %arg8087742 = ptrtoint i64* %cloptr8097380 to i64                                  ; closure cast; i64* -> i64
  %arg8087741 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090016 = add i64 0, 0                                                         ; quoted ()
  %rva8090015 = call i64 @prim_cons(i64 %retprim8086090, i64 %rva8090016)            ; call prim_cons
  %rva8090014 = call i64 @prim_cons(i64 %arg8087741, i64 %rva8090015)                ; call prim_cons
  %cloptr8097383 = inttoptr i64 %arg8087742 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097384 = getelementptr inbounds i64, i64* %cloptr8097383, i64 0             ; &cloptr8097383[0]
  %f8097386 = load i64, i64* %i0ptr8097384, align 8                                  ; load; *i0ptr8097384
  %fptr8097385 = inttoptr i64 %f8097386 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097385(i64 %arg8087742, i64 %rva8090014)           ; tail call
  ret void
}


define void @lam8091229(i64 %env8091230, i64 %rvp8090013) {
  %_950 = call i64 @prim_car(i64 %rvp8090013)                                        ; call prim_car
  %rvp8090012 = call i64 @prim_cdr(i64 %rvp8090013)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8090012)                                           ; call prim_car
  %na8090009 = call i64 @prim_cdr(i64 %rvp8090012)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8090011 = add i64 0, 0                                                         ; quoted ()
  %rva8090010 = call i64 @prim_cons(i64 %_951, i64 %rva8090011)                      ; call prim_cons
  %cloptr8097387 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8097388 = getelementptr inbounds i64, i64* %cloptr8097387, i64 0             ; &cloptr8097387[0]
  %f8097390 = load i64, i64* %i0ptr8097388, align 8                                  ; load; *i0ptr8097388
  %fptr8097389 = inttoptr i64 %f8097390 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097389(i64 %_951, i64 %rva8090010)                 ; tail call
  ret void
}


define void @lam8091197(i64 %env8091198, i64 %rvp8090695) {
  %envptr8097391 = inttoptr i64 %env8091198 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097392 = getelementptr inbounds i64, i64* %envptr8097391, i64 3            ; &envptr8097391[3]
  %eoK$_37foldr = load i64, i64* %envptr8097392, align 8                             ; load; *envptr8097392
  %envptr8097393 = inttoptr i64 %env8091198 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097394 = getelementptr inbounds i64, i64* %envptr8097393, i64 2            ; &envptr8097393[2]
  %HSO$_37map1 = load i64, i64* %envptr8097394, align 8                              ; load; *envptr8097394
  %envptr8097395 = inttoptr i64 %env8091198 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097396 = getelementptr inbounds i64, i64* %envptr8097395, i64 1            ; &envptr8097395[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097396, align 8                            ; load; *envptr8097396
  %cont8086134 = call i64 @prim_car(i64 %rvp8090695)                                 ; call prim_car
  %rvp8090694 = call i64 @prim_cdr(i64 %rvp8090695)                                  ; call prim_cdr
  %ijQ$_37foldl = call i64 @prim_car(i64 %rvp8090694)                                ; call prim_car
  %na8090602 = call i64 @prim_cdr(i64 %rvp8090694)                                   ; call prim_cdr
  %arg8088342 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8097397 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8097399 = getelementptr inbounds i64, i64* %cloptr8097397, i64 1              ; &eptr8097399[1]
  %eptr8097400 = getelementptr inbounds i64, i64* %cloptr8097397, i64 2              ; &eptr8097400[2]
  %eptr8097401 = getelementptr inbounds i64, i64* %cloptr8097397, i64 3              ; &eptr8097401[3]
  %eptr8097402 = getelementptr inbounds i64, i64* %cloptr8097397, i64 4              ; &eptr8097402[4]
  store i64 %hHO$_37foldr1, i64* %eptr8097399                                        ; *eptr8097399 = %hHO$_37foldr1
  store i64 %ijQ$_37foldl, i64* %eptr8097400                                         ; *eptr8097400 = %ijQ$_37foldl
  store i64 %HSO$_37map1, i64* %eptr8097401                                          ; *eptr8097401 = %HSO$_37map1
  store i64 %eoK$_37foldr, i64* %eptr8097402                                         ; *eptr8097402 = %eoK$_37foldr
  %eptr8097398 = getelementptr inbounds i64, i64* %cloptr8097397, i64 0              ; &cloptr8097397[0]
  %f8097403 = ptrtoint void(i64,i64)* @lam8091194 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097403, i64* %eptr8097398                                             ; store fptr
  %arg8088341 = ptrtoint i64* %cloptr8097397 to i64                                  ; closure cast; i64* -> i64
  %rva8090693 = add i64 0, 0                                                         ; quoted ()
  %rva8090692 = call i64 @prim_cons(i64 %arg8088341, i64 %rva8090693)                ; call prim_cons
  %rva8090691 = call i64 @prim_cons(i64 %arg8088342, i64 %rva8090692)                ; call prim_cons
  %cloptr8097404 = inttoptr i64 %cont8086134 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097405 = getelementptr inbounds i64, i64* %cloptr8097404, i64 0             ; &cloptr8097404[0]
  %f8097407 = load i64, i64* %i0ptr8097405, align 8                                  ; load; *i0ptr8097405
  %fptr8097406 = inttoptr i64 %f8097407 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097406(i64 %cont8086134, i64 %rva8090691)          ; tail call
  ret void
}


define void @lam8091194(i64 %env8091195, i64 %jSs$args8086136) {
  %envptr8097408 = inttoptr i64 %env8091195 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097409 = getelementptr inbounds i64, i64* %envptr8097408, i64 4            ; &envptr8097408[4]
  %eoK$_37foldr = load i64, i64* %envptr8097409, align 8                             ; load; *envptr8097409
  %envptr8097410 = inttoptr i64 %env8091195 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097411 = getelementptr inbounds i64, i64* %envptr8097410, i64 3            ; &envptr8097410[3]
  %HSO$_37map1 = load i64, i64* %envptr8097411, align 8                              ; load; *envptr8097411
  %envptr8097412 = inttoptr i64 %env8091195 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097413 = getelementptr inbounds i64, i64* %envptr8097412, i64 2            ; &envptr8097412[2]
  %ijQ$_37foldl = load i64, i64* %envptr8097413, align 8                             ; load; *envptr8097413
  %envptr8097414 = inttoptr i64 %env8091195 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097415 = getelementptr inbounds i64, i64* %envptr8097414, i64 1            ; &envptr8097414[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097415, align 8                            ; load; *envptr8097415
  %cont8086135 = call i64 @prim_car(i64 %jSs$args8086136)                            ; call prim_car
  %jSs$args = call i64 @prim_cdr(i64 %jSs$args8086136)                               ; call prim_cdr
  %ptD$f = call i64 @prim_car(i64 %jSs$args)                                         ; call prim_car
  %a8085753 = call i64 @prim_cdr(i64 %jSs$args)                                      ; call prim_cdr
  %retprim8086155 = call i64 @prim_car(i64 %a8085753)                                ; call prim_car
  %cloptr8097416 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8097418 = getelementptr inbounds i64, i64* %cloptr8097416, i64 1              ; &eptr8097418[1]
  %eptr8097419 = getelementptr inbounds i64, i64* %cloptr8097416, i64 2              ; &eptr8097419[2]
  %eptr8097420 = getelementptr inbounds i64, i64* %cloptr8097416, i64 3              ; &eptr8097420[3]
  %eptr8097421 = getelementptr inbounds i64, i64* %cloptr8097416, i64 4              ; &eptr8097421[4]
  %eptr8097422 = getelementptr inbounds i64, i64* %cloptr8097416, i64 5              ; &eptr8097422[5]
  %eptr8097423 = getelementptr inbounds i64, i64* %cloptr8097416, i64 6              ; &eptr8097423[6]
  %eptr8097424 = getelementptr inbounds i64, i64* %cloptr8097416, i64 7              ; &eptr8097424[7]
  store i64 %hHO$_37foldr1, i64* %eptr8097418                                        ; *eptr8097418 = %hHO$_37foldr1
  store i64 %ijQ$_37foldl, i64* %eptr8097419                                         ; *eptr8097419 = %ijQ$_37foldl
  store i64 %HSO$_37map1, i64* %eptr8097420                                          ; *eptr8097420 = %HSO$_37map1
  store i64 %cont8086135, i64* %eptr8097421                                          ; *eptr8097421 = %cont8086135
  store i64 %eoK$_37foldr, i64* %eptr8097422                                         ; *eptr8097422 = %eoK$_37foldr
  store i64 %ptD$f, i64* %eptr8097423                                                ; *eptr8097423 = %ptD$f
  store i64 %jSs$args, i64* %eptr8097424                                             ; *eptr8097424 = %jSs$args
  %eptr8097417 = getelementptr inbounds i64, i64* %cloptr8097416, i64 0              ; &cloptr8097416[0]
  %f8097425 = ptrtoint void(i64,i64)* @lam8091192 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097425, i64* %eptr8097417                                             ; store fptr
  %arg8088351 = ptrtoint i64* %cloptr8097416 to i64                                  ; closure cast; i64* -> i64
  %arg8088350 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090690 = add i64 0, 0                                                         ; quoted ()
  %rva8090689 = call i64 @prim_cons(i64 %retprim8086155, i64 %rva8090690)            ; call prim_cons
  %rva8090688 = call i64 @prim_cons(i64 %arg8088350, i64 %rva8090689)                ; call prim_cons
  %cloptr8097426 = inttoptr i64 %arg8088351 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097427 = getelementptr inbounds i64, i64* %cloptr8097426, i64 0             ; &cloptr8097426[0]
  %f8097429 = load i64, i64* %i0ptr8097427, align 8                                  ; load; *i0ptr8097427
  %fptr8097428 = inttoptr i64 %f8097429 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097428(i64 %arg8088351, i64 %rva8090688)           ; tail call
  ret void
}


define void @lam8091192(i64 %env8091193, i64 %rvp8090687) {
  %envptr8097430 = inttoptr i64 %env8091193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097431 = getelementptr inbounds i64, i64* %envptr8097430, i64 7            ; &envptr8097430[7]
  %jSs$args = load i64, i64* %envptr8097431, align 8                                 ; load; *envptr8097431
  %envptr8097432 = inttoptr i64 %env8091193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097433 = getelementptr inbounds i64, i64* %envptr8097432, i64 6            ; &envptr8097432[6]
  %ptD$f = load i64, i64* %envptr8097433, align 8                                    ; load; *envptr8097433
  %envptr8097434 = inttoptr i64 %env8091193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097435 = getelementptr inbounds i64, i64* %envptr8097434, i64 5            ; &envptr8097434[5]
  %eoK$_37foldr = load i64, i64* %envptr8097435, align 8                             ; load; *envptr8097435
  %envptr8097436 = inttoptr i64 %env8091193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097437 = getelementptr inbounds i64, i64* %envptr8097436, i64 4            ; &envptr8097436[4]
  %cont8086135 = load i64, i64* %envptr8097437, align 8                              ; load; *envptr8097437
  %envptr8097438 = inttoptr i64 %env8091193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097439 = getelementptr inbounds i64, i64* %envptr8097438, i64 3            ; &envptr8097438[3]
  %HSO$_37map1 = load i64, i64* %envptr8097439, align 8                              ; load; *envptr8097439
  %envptr8097440 = inttoptr i64 %env8091193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097441 = getelementptr inbounds i64, i64* %envptr8097440, i64 2            ; &envptr8097440[2]
  %ijQ$_37foldl = load i64, i64* %envptr8097441, align 8                             ; load; *envptr8097441
  %envptr8097442 = inttoptr i64 %env8091193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097443 = getelementptr inbounds i64, i64* %envptr8097442, i64 1            ; &envptr8097442[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097443, align 8                            ; load; *envptr8097443
  %_958086137 = call i64 @prim_car(i64 %rvp8090687)                                  ; call prim_car
  %rvp8090686 = call i64 @prim_cdr(i64 %rvp8090687)                                  ; call prim_cdr
  %S9H$acc = call i64 @prim_car(i64 %rvp8090686)                                     ; call prim_car
  %na8090604 = call i64 @prim_cdr(i64 %rvp8090686)                                   ; call prim_cdr
  %a8085754 = call i64 @prim_cdr(i64 %jSs$args)                                      ; call prim_cdr
  %retprim8086154 = call i64 @prim_cdr(i64 %a8085754)                                ; call prim_cdr
  %cloptr8097444 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8097446 = getelementptr inbounds i64, i64* %cloptr8097444, i64 1              ; &eptr8097446[1]
  %eptr8097447 = getelementptr inbounds i64, i64* %cloptr8097444, i64 2              ; &eptr8097447[2]
  %eptr8097448 = getelementptr inbounds i64, i64* %cloptr8097444, i64 3              ; &eptr8097448[3]
  %eptr8097449 = getelementptr inbounds i64, i64* %cloptr8097444, i64 4              ; &eptr8097449[4]
  %eptr8097450 = getelementptr inbounds i64, i64* %cloptr8097444, i64 5              ; &eptr8097450[5]
  %eptr8097451 = getelementptr inbounds i64, i64* %cloptr8097444, i64 6              ; &eptr8097451[6]
  %eptr8097452 = getelementptr inbounds i64, i64* %cloptr8097444, i64 7              ; &eptr8097452[7]
  store i64 %S9H$acc, i64* %eptr8097446                                              ; *eptr8097446 = %S9H$acc
  store i64 %hHO$_37foldr1, i64* %eptr8097447                                        ; *eptr8097447 = %hHO$_37foldr1
  store i64 %ijQ$_37foldl, i64* %eptr8097448                                         ; *eptr8097448 = %ijQ$_37foldl
  store i64 %HSO$_37map1, i64* %eptr8097449                                          ; *eptr8097449 = %HSO$_37map1
  store i64 %cont8086135, i64* %eptr8097450                                          ; *eptr8097450 = %cont8086135
  store i64 %eoK$_37foldr, i64* %eptr8097451                                         ; *eptr8097451 = %eoK$_37foldr
  store i64 %ptD$f, i64* %eptr8097452                                                ; *eptr8097452 = %ptD$f
  %eptr8097445 = getelementptr inbounds i64, i64* %cloptr8097444, i64 0              ; &cloptr8097444[0]
  %f8097453 = ptrtoint void(i64,i64)* @lam8091190 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097453, i64* %eptr8097445                                             ; store fptr
  %arg8088356 = ptrtoint i64* %cloptr8097444 to i64                                  ; closure cast; i64* -> i64
  %arg8088355 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090685 = add i64 0, 0                                                         ; quoted ()
  %rva8090684 = call i64 @prim_cons(i64 %retprim8086154, i64 %rva8090685)            ; call prim_cons
  %rva8090683 = call i64 @prim_cons(i64 %arg8088355, i64 %rva8090684)                ; call prim_cons
  %cloptr8097454 = inttoptr i64 %arg8088356 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097455 = getelementptr inbounds i64, i64* %cloptr8097454, i64 0             ; &cloptr8097454[0]
  %f8097457 = load i64, i64* %i0ptr8097455, align 8                                  ; load; *i0ptr8097455
  %fptr8097456 = inttoptr i64 %f8097457 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097456(i64 %arg8088356, i64 %rva8090683)           ; tail call
  ret void
}


define void @lam8091190(i64 %env8091191, i64 %rvp8090682) {
  %envptr8097458 = inttoptr i64 %env8091191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097459 = getelementptr inbounds i64, i64* %envptr8097458, i64 7            ; &envptr8097458[7]
  %ptD$f = load i64, i64* %envptr8097459, align 8                                    ; load; *envptr8097459
  %envptr8097460 = inttoptr i64 %env8091191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097461 = getelementptr inbounds i64, i64* %envptr8097460, i64 6            ; &envptr8097460[6]
  %eoK$_37foldr = load i64, i64* %envptr8097461, align 8                             ; load; *envptr8097461
  %envptr8097462 = inttoptr i64 %env8091191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097463 = getelementptr inbounds i64, i64* %envptr8097462, i64 5            ; &envptr8097462[5]
  %cont8086135 = load i64, i64* %envptr8097463, align 8                              ; load; *envptr8097463
  %envptr8097464 = inttoptr i64 %env8091191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097465 = getelementptr inbounds i64, i64* %envptr8097464, i64 4            ; &envptr8097464[4]
  %HSO$_37map1 = load i64, i64* %envptr8097465, align 8                              ; load; *envptr8097465
  %envptr8097466 = inttoptr i64 %env8091191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097467 = getelementptr inbounds i64, i64* %envptr8097466, i64 3            ; &envptr8097466[3]
  %ijQ$_37foldl = load i64, i64* %envptr8097467, align 8                             ; load; *envptr8097467
  %envptr8097468 = inttoptr i64 %env8091191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097469 = getelementptr inbounds i64, i64* %envptr8097468, i64 2            ; &envptr8097468[2]
  %hHO$_37foldr1 = load i64, i64* %envptr8097469, align 8                            ; load; *envptr8097469
  %envptr8097470 = inttoptr i64 %env8091191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097471 = getelementptr inbounds i64, i64* %envptr8097470, i64 1            ; &envptr8097470[1]
  %S9H$acc = load i64, i64* %envptr8097471, align 8                                  ; load; *envptr8097471
  %_958086138 = call i64 @prim_car(i64 %rvp8090682)                                  ; call prim_car
  %rvp8090681 = call i64 @prim_cdr(i64 %rvp8090682)                                  ; call prim_cdr
  %F1q$lsts = call i64 @prim_car(i64 %rvp8090681)                                    ; call prim_car
  %na8090606 = call i64 @prim_cdr(i64 %rvp8090681)                                   ; call prim_cdr
  %cloptr8097472 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8097474 = getelementptr inbounds i64, i64* %cloptr8097472, i64 1              ; &eptr8097474[1]
  %eptr8097475 = getelementptr inbounds i64, i64* %cloptr8097472, i64 2              ; &eptr8097475[2]
  %eptr8097476 = getelementptr inbounds i64, i64* %cloptr8097472, i64 3              ; &eptr8097476[3]
  %eptr8097477 = getelementptr inbounds i64, i64* %cloptr8097472, i64 4              ; &eptr8097477[4]
  %eptr8097478 = getelementptr inbounds i64, i64* %cloptr8097472, i64 5              ; &eptr8097478[5]
  %eptr8097479 = getelementptr inbounds i64, i64* %cloptr8097472, i64 6              ; &eptr8097479[6]
  %eptr8097480 = getelementptr inbounds i64, i64* %cloptr8097472, i64 7              ; &eptr8097480[7]
  store i64 %S9H$acc, i64* %eptr8097474                                              ; *eptr8097474 = %S9H$acc
  store i64 %ijQ$_37foldl, i64* %eptr8097475                                         ; *eptr8097475 = %ijQ$_37foldl
  store i64 %HSO$_37map1, i64* %eptr8097476                                          ; *eptr8097476 = %HSO$_37map1
  store i64 %cont8086135, i64* %eptr8097477                                          ; *eptr8097477 = %cont8086135
  store i64 %eoK$_37foldr, i64* %eptr8097478                                         ; *eptr8097478 = %eoK$_37foldr
  store i64 %ptD$f, i64* %eptr8097479                                                ; *eptr8097479 = %ptD$f
  store i64 %F1q$lsts, i64* %eptr8097480                                             ; *eptr8097480 = %F1q$lsts
  %eptr8097473 = getelementptr inbounds i64, i64* %cloptr8097472, i64 0              ; &cloptr8097472[0]
  %f8097481 = ptrtoint void(i64,i64)* @lam8091188 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097481, i64* %eptr8097473                                             ; store fptr
  %arg8088360 = ptrtoint i64* %cloptr8097472 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097482 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097483 = getelementptr inbounds i64, i64* %cloptr8097482, i64 0              ; &cloptr8097482[0]
  %f8097484 = ptrtoint void(i64,i64)* @lam8091160 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097484, i64* %eptr8097483                                             ; store fptr
  %arg8088359 = ptrtoint i64* %cloptr8097482 to i64                                  ; closure cast; i64* -> i64
  %arg8088358 = call i64 @const_init_false()                                         ; quoted #f
  %rva8090680 = add i64 0, 0                                                         ; quoted ()
  %rva8090679 = call i64 @prim_cons(i64 %F1q$lsts, i64 %rva8090680)                  ; call prim_cons
  %rva8090678 = call i64 @prim_cons(i64 %arg8088358, i64 %rva8090679)                ; call prim_cons
  %rva8090677 = call i64 @prim_cons(i64 %arg8088359, i64 %rva8090678)                ; call prim_cons
  %rva8090676 = call i64 @prim_cons(i64 %arg8088360, i64 %rva8090677)                ; call prim_cons
  %cloptr8097485 = inttoptr i64 %hHO$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8097486 = getelementptr inbounds i64, i64* %cloptr8097485, i64 0             ; &cloptr8097485[0]
  %f8097488 = load i64, i64* %i0ptr8097486, align 8                                  ; load; *i0ptr8097486
  %fptr8097487 = inttoptr i64 %f8097488 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097487(i64 %hHO$_37foldr1, i64 %rva8090676)        ; tail call
  ret void
}


define void @lam8091188(i64 %env8091189, i64 %rvp8090664) {
  %envptr8097489 = inttoptr i64 %env8091189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097490 = getelementptr inbounds i64, i64* %envptr8097489, i64 7            ; &envptr8097489[7]
  %F1q$lsts = load i64, i64* %envptr8097490, align 8                                 ; load; *envptr8097490
  %envptr8097491 = inttoptr i64 %env8091189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097492 = getelementptr inbounds i64, i64* %envptr8097491, i64 6            ; &envptr8097491[6]
  %ptD$f = load i64, i64* %envptr8097492, align 8                                    ; load; *envptr8097492
  %envptr8097493 = inttoptr i64 %env8091189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097494 = getelementptr inbounds i64, i64* %envptr8097493, i64 5            ; &envptr8097493[5]
  %eoK$_37foldr = load i64, i64* %envptr8097494, align 8                             ; load; *envptr8097494
  %envptr8097495 = inttoptr i64 %env8091189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097496 = getelementptr inbounds i64, i64* %envptr8097495, i64 4            ; &envptr8097495[4]
  %cont8086135 = load i64, i64* %envptr8097496, align 8                              ; load; *envptr8097496
  %envptr8097497 = inttoptr i64 %env8091189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097498 = getelementptr inbounds i64, i64* %envptr8097497, i64 3            ; &envptr8097497[3]
  %HSO$_37map1 = load i64, i64* %envptr8097498, align 8                              ; load; *envptr8097498
  %envptr8097499 = inttoptr i64 %env8091189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097500 = getelementptr inbounds i64, i64* %envptr8097499, i64 2            ; &envptr8097499[2]
  %ijQ$_37foldl = load i64, i64* %envptr8097500, align 8                             ; load; *envptr8097500
  %envptr8097501 = inttoptr i64 %env8091189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097502 = getelementptr inbounds i64, i64* %envptr8097501, i64 1            ; &envptr8097501[1]
  %S9H$acc = load i64, i64* %envptr8097502, align 8                                  ; load; *envptr8097502
  %_958086139 = call i64 @prim_car(i64 %rvp8090664)                                  ; call prim_car
  %rvp8090663 = call i64 @prim_cdr(i64 %rvp8090664)                                  ; call prim_cdr
  %a8085755 = call i64 @prim_car(i64 %rvp8090663)                                    ; call prim_car
  %na8090608 = call i64 @prim_cdr(i64 %rvp8090663)                                   ; call prim_cdr
  %cmp8097503 = icmp eq i64 %a8085755, 15                                            ; false?
  br i1 %cmp8097503, label %else8097505, label %then8097504                          ; if

then8097504:
  %arg8088363 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090611 = add i64 0, 0                                                         ; quoted ()
  %rva8090610 = call i64 @prim_cons(i64 %S9H$acc, i64 %rva8090611)                   ; call prim_cons
  %rva8090609 = call i64 @prim_cons(i64 %arg8088363, i64 %rva8090610)                ; call prim_cons
  %cloptr8097506 = inttoptr i64 %cont8086135 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097507 = getelementptr inbounds i64, i64* %cloptr8097506, i64 0             ; &cloptr8097506[0]
  %f8097509 = load i64, i64* %i0ptr8097507, align 8                                  ; load; *i0ptr8097507
  %fptr8097508 = inttoptr i64 %f8097509 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097508(i64 %cont8086135, i64 %rva8090609)          ; tail call
  ret void

else8097505:
  %cloptr8097510 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8097512 = getelementptr inbounds i64, i64* %cloptr8097510, i64 1              ; &eptr8097512[1]
  %eptr8097513 = getelementptr inbounds i64, i64* %cloptr8097510, i64 2              ; &eptr8097513[2]
  %eptr8097514 = getelementptr inbounds i64, i64* %cloptr8097510, i64 3              ; &eptr8097514[3]
  %eptr8097515 = getelementptr inbounds i64, i64* %cloptr8097510, i64 4              ; &eptr8097515[4]
  %eptr8097516 = getelementptr inbounds i64, i64* %cloptr8097510, i64 5              ; &eptr8097516[5]
  %eptr8097517 = getelementptr inbounds i64, i64* %cloptr8097510, i64 6              ; &eptr8097517[6]
  %eptr8097518 = getelementptr inbounds i64, i64* %cloptr8097510, i64 7              ; &eptr8097518[7]
  store i64 %S9H$acc, i64* %eptr8097512                                              ; *eptr8097512 = %S9H$acc
  store i64 %ijQ$_37foldl, i64* %eptr8097513                                         ; *eptr8097513 = %ijQ$_37foldl
  store i64 %HSO$_37map1, i64* %eptr8097514                                          ; *eptr8097514 = %HSO$_37map1
  store i64 %cont8086135, i64* %eptr8097515                                          ; *eptr8097515 = %cont8086135
  store i64 %eoK$_37foldr, i64* %eptr8097516                                         ; *eptr8097516 = %eoK$_37foldr
  store i64 %ptD$f, i64* %eptr8097517                                                ; *eptr8097517 = %ptD$f
  store i64 %F1q$lsts, i64* %eptr8097518                                             ; *eptr8097518 = %F1q$lsts
  %eptr8097511 = getelementptr inbounds i64, i64* %cloptr8097510, i64 0              ; &cloptr8097510[0]
  %f8097519 = ptrtoint void(i64,i64)* @lam8091186 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097519, i64* %eptr8097511                                             ; store fptr
  %arg8088367 = ptrtoint i64* %cloptr8097510 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097520 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097521 = getelementptr inbounds i64, i64* %cloptr8097520, i64 0              ; &cloptr8097520[0]
  %f8097522 = ptrtoint void(i64,i64)* @lam8091167 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097522, i64* %eptr8097521                                             ; store fptr
  %arg8088366 = ptrtoint i64* %cloptr8097520 to i64                                  ; closure cast; i64* -> i64
  %rva8090662 = add i64 0, 0                                                         ; quoted ()
  %rva8090661 = call i64 @prim_cons(i64 %F1q$lsts, i64 %rva8090662)                  ; call prim_cons
  %rva8090660 = call i64 @prim_cons(i64 %arg8088366, i64 %rva8090661)                ; call prim_cons
  %rva8090659 = call i64 @prim_cons(i64 %arg8088367, i64 %rva8090660)                ; call prim_cons
  %cloptr8097523 = inttoptr i64 %HSO$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097524 = getelementptr inbounds i64, i64* %cloptr8097523, i64 0             ; &cloptr8097523[0]
  %f8097526 = load i64, i64* %i0ptr8097524, align 8                                  ; load; *i0ptr8097524
  %fptr8097525 = inttoptr i64 %f8097526 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097525(i64 %HSO$_37map1, i64 %rva8090659)          ; tail call
  ret void
}


define void @lam8091186(i64 %env8091187, i64 %rvp8090651) {
  %envptr8097527 = inttoptr i64 %env8091187 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097528 = getelementptr inbounds i64, i64* %envptr8097527, i64 7            ; &envptr8097527[7]
  %F1q$lsts = load i64, i64* %envptr8097528, align 8                                 ; load; *envptr8097528
  %envptr8097529 = inttoptr i64 %env8091187 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097530 = getelementptr inbounds i64, i64* %envptr8097529, i64 6            ; &envptr8097529[6]
  %ptD$f = load i64, i64* %envptr8097530, align 8                                    ; load; *envptr8097530
  %envptr8097531 = inttoptr i64 %env8091187 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097532 = getelementptr inbounds i64, i64* %envptr8097531, i64 5            ; &envptr8097531[5]
  %eoK$_37foldr = load i64, i64* %envptr8097532, align 8                             ; load; *envptr8097532
  %envptr8097533 = inttoptr i64 %env8091187 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097534 = getelementptr inbounds i64, i64* %envptr8097533, i64 4            ; &envptr8097533[4]
  %cont8086135 = load i64, i64* %envptr8097534, align 8                              ; load; *envptr8097534
  %envptr8097535 = inttoptr i64 %env8091187 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097536 = getelementptr inbounds i64, i64* %envptr8097535, i64 3            ; &envptr8097535[3]
  %HSO$_37map1 = load i64, i64* %envptr8097536, align 8                              ; load; *envptr8097536
  %envptr8097537 = inttoptr i64 %env8091187 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097538 = getelementptr inbounds i64, i64* %envptr8097537, i64 2            ; &envptr8097537[2]
  %ijQ$_37foldl = load i64, i64* %envptr8097538, align 8                             ; load; *envptr8097538
  %envptr8097539 = inttoptr i64 %env8091187 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097540 = getelementptr inbounds i64, i64* %envptr8097539, i64 1            ; &envptr8097539[1]
  %S9H$acc = load i64, i64* %envptr8097540, align 8                                  ; load; *envptr8097540
  %_958086140 = call i64 @prim_car(i64 %rvp8090651)                                  ; call prim_car
  %rvp8090650 = call i64 @prim_cdr(i64 %rvp8090651)                                  ; call prim_cdr
  %ddx$lsts_43 = call i64 @prim_car(i64 %rvp8090650)                                 ; call prim_car
  %na8090613 = call i64 @prim_cdr(i64 %rvp8090650)                                   ; call prim_cdr
  %cloptr8097541 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8097543 = getelementptr inbounds i64, i64* %cloptr8097541, i64 1              ; &eptr8097543[1]
  %eptr8097544 = getelementptr inbounds i64, i64* %cloptr8097541, i64 2              ; &eptr8097544[2]
  %eptr8097545 = getelementptr inbounds i64, i64* %cloptr8097541, i64 3              ; &eptr8097545[3]
  %eptr8097546 = getelementptr inbounds i64, i64* %cloptr8097541, i64 4              ; &eptr8097546[4]
  %eptr8097547 = getelementptr inbounds i64, i64* %cloptr8097541, i64 5              ; &eptr8097547[5]
  %eptr8097548 = getelementptr inbounds i64, i64* %cloptr8097541, i64 6              ; &eptr8097548[6]
  store i64 %ddx$lsts_43, i64* %eptr8097543                                          ; *eptr8097543 = %ddx$lsts_43
  store i64 %S9H$acc, i64* %eptr8097544                                              ; *eptr8097544 = %S9H$acc
  store i64 %ijQ$_37foldl, i64* %eptr8097545                                         ; *eptr8097545 = %ijQ$_37foldl
  store i64 %cont8086135, i64* %eptr8097546                                          ; *eptr8097546 = %cont8086135
  store i64 %eoK$_37foldr, i64* %eptr8097547                                         ; *eptr8097547 = %eoK$_37foldr
  store i64 %ptD$f, i64* %eptr8097548                                                ; *eptr8097548 = %ptD$f
  %eptr8097542 = getelementptr inbounds i64, i64* %cloptr8097541, i64 0              ; &cloptr8097541[0]
  %f8097549 = ptrtoint void(i64,i64)* @lam8091184 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097549, i64* %eptr8097542                                             ; store fptr
  %arg8088371 = ptrtoint i64* %cloptr8097541 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097550 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097551 = getelementptr inbounds i64, i64* %cloptr8097550, i64 0              ; &cloptr8097550[0]
  %f8097552 = ptrtoint void(i64,i64)* @lam8091172 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097552, i64* %eptr8097551                                             ; store fptr
  %arg8088370 = ptrtoint i64* %cloptr8097550 to i64                                  ; closure cast; i64* -> i64
  %rva8090649 = add i64 0, 0                                                         ; quoted ()
  %rva8090648 = call i64 @prim_cons(i64 %F1q$lsts, i64 %rva8090649)                  ; call prim_cons
  %rva8090647 = call i64 @prim_cons(i64 %arg8088370, i64 %rva8090648)                ; call prim_cons
  %rva8090646 = call i64 @prim_cons(i64 %arg8088371, i64 %rva8090647)                ; call prim_cons
  %cloptr8097553 = inttoptr i64 %HSO$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097554 = getelementptr inbounds i64, i64* %cloptr8097553, i64 0             ; &cloptr8097553[0]
  %f8097556 = load i64, i64* %i0ptr8097554, align 8                                  ; load; *i0ptr8097554
  %fptr8097555 = inttoptr i64 %f8097556 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097555(i64 %HSO$_37map1, i64 %rva8090646)          ; tail call
  ret void
}


define void @lam8091184(i64 %env8091185, i64 %rvp8090638) {
  %envptr8097557 = inttoptr i64 %env8091185 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097558 = getelementptr inbounds i64, i64* %envptr8097557, i64 6            ; &envptr8097557[6]
  %ptD$f = load i64, i64* %envptr8097558, align 8                                    ; load; *envptr8097558
  %envptr8097559 = inttoptr i64 %env8091185 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097560 = getelementptr inbounds i64, i64* %envptr8097559, i64 5            ; &envptr8097559[5]
  %eoK$_37foldr = load i64, i64* %envptr8097560, align 8                             ; load; *envptr8097560
  %envptr8097561 = inttoptr i64 %env8091185 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097562 = getelementptr inbounds i64, i64* %envptr8097561, i64 4            ; &envptr8097561[4]
  %cont8086135 = load i64, i64* %envptr8097562, align 8                              ; load; *envptr8097562
  %envptr8097563 = inttoptr i64 %env8091185 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097564 = getelementptr inbounds i64, i64* %envptr8097563, i64 3            ; &envptr8097563[3]
  %ijQ$_37foldl = load i64, i64* %envptr8097564, align 8                             ; load; *envptr8097564
  %envptr8097565 = inttoptr i64 %env8091185 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097566 = getelementptr inbounds i64, i64* %envptr8097565, i64 2            ; &envptr8097565[2]
  %S9H$acc = load i64, i64* %envptr8097566, align 8                                  ; load; *envptr8097566
  %envptr8097567 = inttoptr i64 %env8091185 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097568 = getelementptr inbounds i64, i64* %envptr8097567, i64 1            ; &envptr8097567[1]
  %ddx$lsts_43 = load i64, i64* %envptr8097568, align 8                              ; load; *envptr8097568
  %_958086141 = call i64 @prim_car(i64 %rvp8090638)                                  ; call prim_car
  %rvp8090637 = call i64 @prim_cdr(i64 %rvp8090638)                                  ; call prim_cdr
  %cQK$vs = call i64 @prim_car(i64 %rvp8090637)                                      ; call prim_car
  %na8090615 = call i64 @prim_cdr(i64 %rvp8090637)                                   ; call prim_cdr
  %arg8088373 = add i64 0, 0                                                         ; quoted ()
  %a8085756 = call i64 @prim_cons(i64 %S9H$acc, i64 %arg8088373)                     ; call prim_cons
  %cloptr8097569 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8097571 = getelementptr inbounds i64, i64* %cloptr8097569, i64 1              ; &eptr8097571[1]
  %eptr8097572 = getelementptr inbounds i64, i64* %cloptr8097569, i64 2              ; &eptr8097572[2]
  %eptr8097573 = getelementptr inbounds i64, i64* %cloptr8097569, i64 3              ; &eptr8097573[3]
  %eptr8097574 = getelementptr inbounds i64, i64* %cloptr8097569, i64 4              ; &eptr8097574[4]
  store i64 %ddx$lsts_43, i64* %eptr8097571                                          ; *eptr8097571 = %ddx$lsts_43
  store i64 %ijQ$_37foldl, i64* %eptr8097572                                         ; *eptr8097572 = %ijQ$_37foldl
  store i64 %cont8086135, i64* %eptr8097573                                          ; *eptr8097573 = %cont8086135
  store i64 %ptD$f, i64* %eptr8097574                                                ; *eptr8097574 = %ptD$f
  %eptr8097570 = getelementptr inbounds i64, i64* %cloptr8097569, i64 0              ; &cloptr8097569[0]
  %f8097575 = ptrtoint void(i64,i64)* @lam8091181 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097575, i64* %eptr8097570                                             ; store fptr
  %arg8088378 = ptrtoint i64* %cloptr8097569 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097576 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097577 = getelementptr inbounds i64, i64* %cloptr8097576, i64 0              ; &cloptr8097576[0]
  %f8097578 = ptrtoint void(i64,i64)* @lam8091177 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097578, i64* %eptr8097577                                             ; store fptr
  %arg8088377 = ptrtoint i64* %cloptr8097576 to i64                                  ; closure cast; i64* -> i64
  %rva8090636 = add i64 0, 0                                                         ; quoted ()
  %rva8090635 = call i64 @prim_cons(i64 %cQK$vs, i64 %rva8090636)                    ; call prim_cons
  %rva8090634 = call i64 @prim_cons(i64 %a8085756, i64 %rva8090635)                  ; call prim_cons
  %rva8090633 = call i64 @prim_cons(i64 %arg8088377, i64 %rva8090634)                ; call prim_cons
  %rva8090632 = call i64 @prim_cons(i64 %arg8088378, i64 %rva8090633)                ; call prim_cons
  %cloptr8097579 = inttoptr i64 %eoK$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr8097580 = getelementptr inbounds i64, i64* %cloptr8097579, i64 0             ; &cloptr8097579[0]
  %f8097582 = load i64, i64* %i0ptr8097580, align 8                                  ; load; *i0ptr8097580
  %fptr8097581 = inttoptr i64 %f8097582 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097581(i64 %eoK$_37foldr, i64 %rva8090632)         ; tail call
  ret void
}


define void @lam8091181(i64 %env8091182, i64 %rvp8090623) {
  %envptr8097583 = inttoptr i64 %env8091182 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097584 = getelementptr inbounds i64, i64* %envptr8097583, i64 4            ; &envptr8097583[4]
  %ptD$f = load i64, i64* %envptr8097584, align 8                                    ; load; *envptr8097584
  %envptr8097585 = inttoptr i64 %env8091182 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097586 = getelementptr inbounds i64, i64* %envptr8097585, i64 3            ; &envptr8097585[3]
  %cont8086135 = load i64, i64* %envptr8097586, align 8                              ; load; *envptr8097586
  %envptr8097587 = inttoptr i64 %env8091182 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097588 = getelementptr inbounds i64, i64* %envptr8097587, i64 2            ; &envptr8097587[2]
  %ijQ$_37foldl = load i64, i64* %envptr8097588, align 8                             ; load; *envptr8097588
  %envptr8097589 = inttoptr i64 %env8091182 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097590 = getelementptr inbounds i64, i64* %envptr8097589, i64 1            ; &envptr8097589[1]
  %ddx$lsts_43 = load i64, i64* %envptr8097590, align 8                              ; load; *envptr8097590
  %_958086144 = call i64 @prim_car(i64 %rvp8090623)                                  ; call prim_car
  %rvp8090622 = call i64 @prim_cdr(i64 %rvp8090623)                                  ; call prim_cdr
  %a8085757 = call i64 @prim_car(i64 %rvp8090622)                                    ; call prim_car
  %na8090617 = call i64 @prim_cdr(i64 %rvp8090622)                                   ; call prim_cdr
  %cloptr8097591 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8097593 = getelementptr inbounds i64, i64* %cloptr8097591, i64 1              ; &eptr8097593[1]
  %eptr8097594 = getelementptr inbounds i64, i64* %cloptr8097591, i64 2              ; &eptr8097594[2]
  %eptr8097595 = getelementptr inbounds i64, i64* %cloptr8097591, i64 3              ; &eptr8097595[3]
  %eptr8097596 = getelementptr inbounds i64, i64* %cloptr8097591, i64 4              ; &eptr8097596[4]
  store i64 %ddx$lsts_43, i64* %eptr8097593                                          ; *eptr8097593 = %ddx$lsts_43
  store i64 %ijQ$_37foldl, i64* %eptr8097594                                         ; *eptr8097594 = %ijQ$_37foldl
  store i64 %cont8086135, i64* %eptr8097595                                          ; *eptr8097595 = %cont8086135
  store i64 %ptD$f, i64* %eptr8097596                                                ; *eptr8097596 = %ptD$f
  %eptr8097592 = getelementptr inbounds i64, i64* %cloptr8097591, i64 0              ; &cloptr8097591[0]
  %f8097597 = ptrtoint void(i64,i64)* @lam8091179 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097597, i64* %eptr8097592                                             ; store fptr
  %arg8088381 = ptrtoint i64* %cloptr8097591 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst8086145 = call i64 @prim_cons(i64 %arg8088381, i64 %a8085757)            ; call prim_cons
  %cloptr8097598 = inttoptr i64 %ptD$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8097599 = getelementptr inbounds i64, i64* %cloptr8097598, i64 0             ; &cloptr8097598[0]
  %f8097601 = load i64, i64* %i0ptr8097599, align 8                                  ; load; *i0ptr8097599
  %fptr8097600 = inttoptr i64 %f8097601 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097600(i64 %ptD$f, i64 %cps_45lst8086145)          ; tail call
  ret void
}


define void @lam8091179(i64 %env8091180, i64 %rvp8090621) {
  %envptr8097602 = inttoptr i64 %env8091180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097603 = getelementptr inbounds i64, i64* %envptr8097602, i64 4            ; &envptr8097602[4]
  %ptD$f = load i64, i64* %envptr8097603, align 8                                    ; load; *envptr8097603
  %envptr8097604 = inttoptr i64 %env8091180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097605 = getelementptr inbounds i64, i64* %envptr8097604, i64 3            ; &envptr8097604[3]
  %cont8086135 = load i64, i64* %envptr8097605, align 8                              ; load; *envptr8097605
  %envptr8097606 = inttoptr i64 %env8091180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097607 = getelementptr inbounds i64, i64* %envptr8097606, i64 2            ; &envptr8097606[2]
  %ijQ$_37foldl = load i64, i64* %envptr8097607, align 8                             ; load; *envptr8097607
  %envptr8097608 = inttoptr i64 %env8091180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097609 = getelementptr inbounds i64, i64* %envptr8097608, i64 1            ; &envptr8097608[1]
  %ddx$lsts_43 = load i64, i64* %envptr8097609, align 8                              ; load; *envptr8097609
  %_958086142 = call i64 @prim_car(i64 %rvp8090621)                                  ; call prim_car
  %rvp8090620 = call i64 @prim_cdr(i64 %rvp8090621)                                  ; call prim_cdr
  %sY3$acc_43 = call i64 @prim_car(i64 %rvp8090620)                                  ; call prim_car
  %na8090619 = call i64 @prim_cdr(i64 %rvp8090620)                                   ; call prim_cdr
  %a8085758 = call i64 @prim_cons(i64 %sY3$acc_43, i64 %ddx$lsts_43)                 ; call prim_cons
  %a8085759 = call i64 @prim_cons(i64 %ptD$f, i64 %a8085758)                         ; call prim_cons
  %cps_45lst8086143 = call i64 @prim_cons(i64 %cont8086135, i64 %a8085759)           ; call prim_cons
  %cloptr8097610 = inttoptr i64 %ijQ$_37foldl to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr8097611 = getelementptr inbounds i64, i64* %cloptr8097610, i64 0             ; &cloptr8097610[0]
  %f8097613 = load i64, i64* %i0ptr8097611, align 8                                  ; load; *i0ptr8097611
  %fptr8097612 = inttoptr i64 %f8097613 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097612(i64 %ijQ$_37foldl, i64 %cps_45lst8086143)   ; tail call
  ret void
}


define void @lam8091177(i64 %env8091178, i64 %rvp8090631) {
  %cont8086146 = call i64 @prim_car(i64 %rvp8090631)                                 ; call prim_car
  %rvp8090630 = call i64 @prim_cdr(i64 %rvp8090631)                                  ; call prim_cdr
  %OgH$a = call i64 @prim_car(i64 %rvp8090630)                                       ; call prim_car
  %rvp8090629 = call i64 @prim_cdr(i64 %rvp8090630)                                  ; call prim_cdr
  %woA$b = call i64 @prim_car(i64 %rvp8090629)                                       ; call prim_car
  %na8090625 = call i64 @prim_cdr(i64 %rvp8090629)                                   ; call prim_cdr
  %retprim8086147 = call i64 @prim_cons(i64 %OgH$a, i64 %woA$b)                      ; call prim_cons
  %arg8088391 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090628 = add i64 0, 0                                                         ; quoted ()
  %rva8090627 = call i64 @prim_cons(i64 %retprim8086147, i64 %rva8090628)            ; call prim_cons
  %rva8090626 = call i64 @prim_cons(i64 %arg8088391, i64 %rva8090627)                ; call prim_cons
  %cloptr8097614 = inttoptr i64 %cont8086146 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097615 = getelementptr inbounds i64, i64* %cloptr8097614, i64 0             ; &cloptr8097614[0]
  %f8097617 = load i64, i64* %i0ptr8097615, align 8                                  ; load; *i0ptr8097615
  %fptr8097616 = inttoptr i64 %f8097617 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097616(i64 %cont8086146, i64 %rva8090626)          ; tail call
  ret void
}


define void @lam8091172(i64 %env8091173, i64 %rvp8090645) {
  %cont8086148 = call i64 @prim_car(i64 %rvp8090645)                                 ; call prim_car
  %rvp8090644 = call i64 @prim_cdr(i64 %rvp8090645)                                  ; call prim_cdr
  %zwV$x = call i64 @prim_car(i64 %rvp8090644)                                       ; call prim_car
  %na8090640 = call i64 @prim_cdr(i64 %rvp8090644)                                   ; call prim_cdr
  %retprim8086149 = call i64 @prim_car(i64 %zwV$x)                                   ; call prim_car
  %arg8088395 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090643 = add i64 0, 0                                                         ; quoted ()
  %rva8090642 = call i64 @prim_cons(i64 %retprim8086149, i64 %rva8090643)            ; call prim_cons
  %rva8090641 = call i64 @prim_cons(i64 %arg8088395, i64 %rva8090642)                ; call prim_cons
  %cloptr8097618 = inttoptr i64 %cont8086148 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097619 = getelementptr inbounds i64, i64* %cloptr8097618, i64 0             ; &cloptr8097618[0]
  %f8097621 = load i64, i64* %i0ptr8097619, align 8                                  ; load; *i0ptr8097619
  %fptr8097620 = inttoptr i64 %f8097621 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097620(i64 %cont8086148, i64 %rva8090641)          ; tail call
  ret void
}


define void @lam8091167(i64 %env8091168, i64 %rvp8090658) {
  %cont8086150 = call i64 @prim_car(i64 %rvp8090658)                                 ; call prim_car
  %rvp8090657 = call i64 @prim_cdr(i64 %rvp8090658)                                  ; call prim_cdr
  %vOy$x = call i64 @prim_car(i64 %rvp8090657)                                       ; call prim_car
  %na8090653 = call i64 @prim_cdr(i64 %rvp8090657)                                   ; call prim_cdr
  %retprim8086151 = call i64 @prim_cdr(i64 %vOy$x)                                   ; call prim_cdr
  %arg8088399 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090656 = add i64 0, 0                                                         ; quoted ()
  %rva8090655 = call i64 @prim_cons(i64 %retprim8086151, i64 %rva8090656)            ; call prim_cons
  %rva8090654 = call i64 @prim_cons(i64 %arg8088399, i64 %rva8090655)                ; call prim_cons
  %cloptr8097622 = inttoptr i64 %cont8086150 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097623 = getelementptr inbounds i64, i64* %cloptr8097622, i64 0             ; &cloptr8097622[0]
  %f8097625 = load i64, i64* %i0ptr8097623, align 8                                  ; load; *i0ptr8097623
  %fptr8097624 = inttoptr i64 %f8097625 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097624(i64 %cont8086150, i64 %rva8090654)          ; tail call
  ret void
}


define void @lam8091160(i64 %env8091161, i64 %rvp8090675) {
  %cont8086152 = call i64 @prim_car(i64 %rvp8090675)                                 ; call prim_car
  %rvp8090674 = call i64 @prim_cdr(i64 %rvp8090675)                                  ; call prim_cdr
  %vu6$lst = call i64 @prim_car(i64 %rvp8090674)                                     ; call prim_car
  %rvp8090673 = call i64 @prim_cdr(i64 %rvp8090674)                                  ; call prim_cdr
  %QLG$b = call i64 @prim_car(i64 %rvp8090673)                                       ; call prim_car
  %na8090666 = call i64 @prim_cdr(i64 %rvp8090673)                                   ; call prim_cdr
  %cmp8097626 = icmp eq i64 %QLG$b, 15                                               ; false?
  br i1 %cmp8097626, label %else8097628, label %then8097627                          ; if

then8097627:
  %arg8088402 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090669 = add i64 0, 0                                                         ; quoted ()
  %rva8090668 = call i64 @prim_cons(i64 %QLG$b, i64 %rva8090669)                     ; call prim_cons
  %rva8090667 = call i64 @prim_cons(i64 %arg8088402, i64 %rva8090668)                ; call prim_cons
  %cloptr8097629 = inttoptr i64 %cont8086152 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097630 = getelementptr inbounds i64, i64* %cloptr8097629, i64 0             ; &cloptr8097629[0]
  %f8097632 = load i64, i64* %i0ptr8097630, align 8                                  ; load; *i0ptr8097630
  %fptr8097631 = inttoptr i64 %f8097632 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097631(i64 %cont8086152, i64 %rva8090667)          ; tail call
  ret void

else8097628:
  %retprim8086153 = call i64 @prim_null_63(i64 %vu6$lst)                             ; call prim_null_63
  %arg8088406 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090672 = add i64 0, 0                                                         ; quoted ()
  %rva8090671 = call i64 @prim_cons(i64 %retprim8086153, i64 %rva8090672)            ; call prim_cons
  %rva8090670 = call i64 @prim_cons(i64 %arg8088406, i64 %rva8090671)                ; call prim_cons
  %cloptr8097633 = inttoptr i64 %cont8086152 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097634 = getelementptr inbounds i64, i64* %cloptr8097633, i64 0             ; &cloptr8097633[0]
  %f8097636 = load i64, i64* %i0ptr8097634, align 8                                  ; load; *i0ptr8097634
  %fptr8097635 = inttoptr i64 %f8097636 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097635(i64 %cont8086152, i64 %rva8090670)          ; tail call
  ret void
}


define void @lam8091146(i64 %env8091147, i64 %rvp8090795) {
  %envptr8097637 = inttoptr i64 %env8091147 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097638 = getelementptr inbounds i64, i64* %envptr8097637, i64 2            ; &envptr8097637[2]
  %C1x$_37map1 = load i64, i64* %envptr8097638, align 8                              ; load; *envptr8097638
  %envptr8097639 = inttoptr i64 %env8091147 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097640 = getelementptr inbounds i64, i64* %envptr8097639, i64 1            ; &envptr8097639[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097640, align 8                            ; load; *envptr8097640
  %cont8086156 = call i64 @prim_car(i64 %rvp8090795)                                 ; call prim_car
  %rvp8090794 = call i64 @prim_cdr(i64 %rvp8090795)                                  ; call prim_cdr
  %vNL$_37foldr = call i64 @prim_car(i64 %rvp8090794)                                ; call prim_car
  %na8090702 = call i64 @prim_cdr(i64 %rvp8090794)                                   ; call prim_cdr
  %arg8088409 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8097641 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8097643 = getelementptr inbounds i64, i64* %cloptr8097641, i64 1              ; &eptr8097643[1]
  %eptr8097644 = getelementptr inbounds i64, i64* %cloptr8097641, i64 2              ; &eptr8097644[2]
  %eptr8097645 = getelementptr inbounds i64, i64* %cloptr8097641, i64 3              ; &eptr8097645[3]
  store i64 %hHO$_37foldr1, i64* %eptr8097643                                        ; *eptr8097643 = %hHO$_37foldr1
  store i64 %C1x$_37map1, i64* %eptr8097644                                          ; *eptr8097644 = %C1x$_37map1
  store i64 %vNL$_37foldr, i64* %eptr8097645                                         ; *eptr8097645 = %vNL$_37foldr
  %eptr8097642 = getelementptr inbounds i64, i64* %cloptr8097641, i64 0              ; &cloptr8097641[0]
  %f8097646 = ptrtoint void(i64,i64)* @lam8091143 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097646, i64* %eptr8097642                                             ; store fptr
  %arg8088408 = ptrtoint i64* %cloptr8097641 to i64                                  ; closure cast; i64* -> i64
  %rva8090793 = add i64 0, 0                                                         ; quoted ()
  %rva8090792 = call i64 @prim_cons(i64 %arg8088408, i64 %rva8090793)                ; call prim_cons
  %rva8090791 = call i64 @prim_cons(i64 %arg8088409, i64 %rva8090792)                ; call prim_cons
  %cloptr8097647 = inttoptr i64 %cont8086156 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097648 = getelementptr inbounds i64, i64* %cloptr8097647, i64 0             ; &cloptr8097647[0]
  %f8097650 = load i64, i64* %i0ptr8097648, align 8                                  ; load; *i0ptr8097648
  %fptr8097649 = inttoptr i64 %f8097650 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097649(i64 %cont8086156, i64 %rva8090791)          ; tail call
  ret void
}


define void @lam8091143(i64 %env8091144, i64 %ZT7$args8086158) {
  %envptr8097651 = inttoptr i64 %env8091144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097652 = getelementptr inbounds i64, i64* %envptr8097651, i64 3            ; &envptr8097651[3]
  %vNL$_37foldr = load i64, i64* %envptr8097652, align 8                             ; load; *envptr8097652
  %envptr8097653 = inttoptr i64 %env8091144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097654 = getelementptr inbounds i64, i64* %envptr8097653, i64 2            ; &envptr8097653[2]
  %C1x$_37map1 = load i64, i64* %envptr8097654, align 8                              ; load; *envptr8097654
  %envptr8097655 = inttoptr i64 %env8091144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097656 = getelementptr inbounds i64, i64* %envptr8097655, i64 1            ; &envptr8097655[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097656, align 8                            ; load; *envptr8097656
  %cont8086157 = call i64 @prim_car(i64 %ZT7$args8086158)                            ; call prim_car
  %ZT7$args = call i64 @prim_cdr(i64 %ZT7$args8086158)                               ; call prim_cdr
  %PGT$f = call i64 @prim_car(i64 %ZT7$args)                                         ; call prim_car
  %a8085739 = call i64 @prim_cdr(i64 %ZT7$args)                                      ; call prim_cdr
  %retprim8086177 = call i64 @prim_car(i64 %a8085739)                                ; call prim_car
  %cloptr8097657 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8097659 = getelementptr inbounds i64, i64* %cloptr8097657, i64 1              ; &eptr8097659[1]
  %eptr8097660 = getelementptr inbounds i64, i64* %cloptr8097657, i64 2              ; &eptr8097660[2]
  %eptr8097661 = getelementptr inbounds i64, i64* %cloptr8097657, i64 3              ; &eptr8097661[3]
  %eptr8097662 = getelementptr inbounds i64, i64* %cloptr8097657, i64 4              ; &eptr8097662[4]
  %eptr8097663 = getelementptr inbounds i64, i64* %cloptr8097657, i64 5              ; &eptr8097663[5]
  %eptr8097664 = getelementptr inbounds i64, i64* %cloptr8097657, i64 6              ; &eptr8097664[6]
  store i64 %hHO$_37foldr1, i64* %eptr8097659                                        ; *eptr8097659 = %hHO$_37foldr1
  store i64 %ZT7$args, i64* %eptr8097660                                             ; *eptr8097660 = %ZT7$args
  store i64 %cont8086157, i64* %eptr8097661                                          ; *eptr8097661 = %cont8086157
  store i64 %PGT$f, i64* %eptr8097662                                                ; *eptr8097662 = %PGT$f
  store i64 %C1x$_37map1, i64* %eptr8097663                                          ; *eptr8097663 = %C1x$_37map1
  store i64 %vNL$_37foldr, i64* %eptr8097664                                         ; *eptr8097664 = %vNL$_37foldr
  %eptr8097658 = getelementptr inbounds i64, i64* %cloptr8097657, i64 0              ; &cloptr8097657[0]
  %f8097665 = ptrtoint void(i64,i64)* @lam8091141 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097665, i64* %eptr8097658                                             ; store fptr
  %arg8088418 = ptrtoint i64* %cloptr8097657 to i64                                  ; closure cast; i64* -> i64
  %arg8088417 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090790 = add i64 0, 0                                                         ; quoted ()
  %rva8090789 = call i64 @prim_cons(i64 %retprim8086177, i64 %rva8090790)            ; call prim_cons
  %rva8090788 = call i64 @prim_cons(i64 %arg8088417, i64 %rva8090789)                ; call prim_cons
  %cloptr8097666 = inttoptr i64 %arg8088418 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097667 = getelementptr inbounds i64, i64* %cloptr8097666, i64 0             ; &cloptr8097666[0]
  %f8097669 = load i64, i64* %i0ptr8097667, align 8                                  ; load; *i0ptr8097667
  %fptr8097668 = inttoptr i64 %f8097669 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097668(i64 %arg8088418, i64 %rva8090788)           ; tail call
  ret void
}


define void @lam8091141(i64 %env8091142, i64 %rvp8090787) {
  %envptr8097670 = inttoptr i64 %env8091142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097671 = getelementptr inbounds i64, i64* %envptr8097670, i64 6            ; &envptr8097670[6]
  %vNL$_37foldr = load i64, i64* %envptr8097671, align 8                             ; load; *envptr8097671
  %envptr8097672 = inttoptr i64 %env8091142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097673 = getelementptr inbounds i64, i64* %envptr8097672, i64 5            ; &envptr8097672[5]
  %C1x$_37map1 = load i64, i64* %envptr8097673, align 8                              ; load; *envptr8097673
  %envptr8097674 = inttoptr i64 %env8091142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097675 = getelementptr inbounds i64, i64* %envptr8097674, i64 4            ; &envptr8097674[4]
  %PGT$f = load i64, i64* %envptr8097675, align 8                                    ; load; *envptr8097675
  %envptr8097676 = inttoptr i64 %env8091142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097677 = getelementptr inbounds i64, i64* %envptr8097676, i64 3            ; &envptr8097676[3]
  %cont8086157 = load i64, i64* %envptr8097677, align 8                              ; load; *envptr8097677
  %envptr8097678 = inttoptr i64 %env8091142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097679 = getelementptr inbounds i64, i64* %envptr8097678, i64 2            ; &envptr8097678[2]
  %ZT7$args = load i64, i64* %envptr8097679, align 8                                 ; load; *envptr8097679
  %envptr8097680 = inttoptr i64 %env8091142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097681 = getelementptr inbounds i64, i64* %envptr8097680, i64 1            ; &envptr8097680[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097681, align 8                            ; load; *envptr8097681
  %_958086159 = call i64 @prim_car(i64 %rvp8090787)                                  ; call prim_car
  %rvp8090786 = call i64 @prim_cdr(i64 %rvp8090787)                                  ; call prim_cdr
  %Yhi$acc = call i64 @prim_car(i64 %rvp8090786)                                     ; call prim_car
  %na8090704 = call i64 @prim_cdr(i64 %rvp8090786)                                   ; call prim_cdr
  %a8085740 = call i64 @prim_cdr(i64 %ZT7$args)                                      ; call prim_cdr
  %retprim8086176 = call i64 @prim_cdr(i64 %a8085740)                                ; call prim_cdr
  %cloptr8097682 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8097684 = getelementptr inbounds i64, i64* %cloptr8097682, i64 1              ; &eptr8097684[1]
  %eptr8097685 = getelementptr inbounds i64, i64* %cloptr8097682, i64 2              ; &eptr8097685[2]
  %eptr8097686 = getelementptr inbounds i64, i64* %cloptr8097682, i64 3              ; &eptr8097686[3]
  %eptr8097687 = getelementptr inbounds i64, i64* %cloptr8097682, i64 4              ; &eptr8097687[4]
  %eptr8097688 = getelementptr inbounds i64, i64* %cloptr8097682, i64 5              ; &eptr8097688[5]
  %eptr8097689 = getelementptr inbounds i64, i64* %cloptr8097682, i64 6              ; &eptr8097689[6]
  store i64 %hHO$_37foldr1, i64* %eptr8097684                                        ; *eptr8097684 = %hHO$_37foldr1
  store i64 %cont8086157, i64* %eptr8097685                                          ; *eptr8097685 = %cont8086157
  store i64 %PGT$f, i64* %eptr8097686                                                ; *eptr8097686 = %PGT$f
  store i64 %C1x$_37map1, i64* %eptr8097687                                          ; *eptr8097687 = %C1x$_37map1
  store i64 %Yhi$acc, i64* %eptr8097688                                              ; *eptr8097688 = %Yhi$acc
  store i64 %vNL$_37foldr, i64* %eptr8097689                                         ; *eptr8097689 = %vNL$_37foldr
  %eptr8097683 = getelementptr inbounds i64, i64* %cloptr8097682, i64 0              ; &cloptr8097682[0]
  %f8097690 = ptrtoint void(i64,i64)* @lam8091139 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097690, i64* %eptr8097683                                             ; store fptr
  %arg8088423 = ptrtoint i64* %cloptr8097682 to i64                                  ; closure cast; i64* -> i64
  %arg8088422 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090785 = add i64 0, 0                                                         ; quoted ()
  %rva8090784 = call i64 @prim_cons(i64 %retprim8086176, i64 %rva8090785)            ; call prim_cons
  %rva8090783 = call i64 @prim_cons(i64 %arg8088422, i64 %rva8090784)                ; call prim_cons
  %cloptr8097691 = inttoptr i64 %arg8088423 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8097692 = getelementptr inbounds i64, i64* %cloptr8097691, i64 0             ; &cloptr8097691[0]
  %f8097694 = load i64, i64* %i0ptr8097692, align 8                                  ; load; *i0ptr8097692
  %fptr8097693 = inttoptr i64 %f8097694 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097693(i64 %arg8088423, i64 %rva8090783)           ; tail call
  ret void
}


define void @lam8091139(i64 %env8091140, i64 %rvp8090782) {
  %envptr8097695 = inttoptr i64 %env8091140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097696 = getelementptr inbounds i64, i64* %envptr8097695, i64 6            ; &envptr8097695[6]
  %vNL$_37foldr = load i64, i64* %envptr8097696, align 8                             ; load; *envptr8097696
  %envptr8097697 = inttoptr i64 %env8091140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097698 = getelementptr inbounds i64, i64* %envptr8097697, i64 5            ; &envptr8097697[5]
  %Yhi$acc = load i64, i64* %envptr8097698, align 8                                  ; load; *envptr8097698
  %envptr8097699 = inttoptr i64 %env8091140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097700 = getelementptr inbounds i64, i64* %envptr8097699, i64 4            ; &envptr8097699[4]
  %C1x$_37map1 = load i64, i64* %envptr8097700, align 8                              ; load; *envptr8097700
  %envptr8097701 = inttoptr i64 %env8091140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097702 = getelementptr inbounds i64, i64* %envptr8097701, i64 3            ; &envptr8097701[3]
  %PGT$f = load i64, i64* %envptr8097702, align 8                                    ; load; *envptr8097702
  %envptr8097703 = inttoptr i64 %env8091140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097704 = getelementptr inbounds i64, i64* %envptr8097703, i64 2            ; &envptr8097703[2]
  %cont8086157 = load i64, i64* %envptr8097704, align 8                              ; load; *envptr8097704
  %envptr8097705 = inttoptr i64 %env8091140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097706 = getelementptr inbounds i64, i64* %envptr8097705, i64 1            ; &envptr8097705[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097706, align 8                            ; load; *envptr8097706
  %_958086160 = call i64 @prim_car(i64 %rvp8090782)                                  ; call prim_car
  %rvp8090781 = call i64 @prim_cdr(i64 %rvp8090782)                                  ; call prim_cdr
  %rPH$lsts = call i64 @prim_car(i64 %rvp8090781)                                    ; call prim_car
  %na8090706 = call i64 @prim_cdr(i64 %rvp8090781)                                   ; call prim_cdr
  %cloptr8097707 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8097709 = getelementptr inbounds i64, i64* %cloptr8097707, i64 1              ; &eptr8097709[1]
  %eptr8097710 = getelementptr inbounds i64, i64* %cloptr8097707, i64 2              ; &eptr8097710[2]
  %eptr8097711 = getelementptr inbounds i64, i64* %cloptr8097707, i64 3              ; &eptr8097711[3]
  %eptr8097712 = getelementptr inbounds i64, i64* %cloptr8097707, i64 4              ; &eptr8097712[4]
  %eptr8097713 = getelementptr inbounds i64, i64* %cloptr8097707, i64 5              ; &eptr8097713[5]
  %eptr8097714 = getelementptr inbounds i64, i64* %cloptr8097707, i64 6              ; &eptr8097714[6]
  %eptr8097715 = getelementptr inbounds i64, i64* %cloptr8097707, i64 7              ; &eptr8097715[7]
  store i64 %hHO$_37foldr1, i64* %eptr8097709                                        ; *eptr8097709 = %hHO$_37foldr1
  store i64 %rPH$lsts, i64* %eptr8097710                                             ; *eptr8097710 = %rPH$lsts
  store i64 %cont8086157, i64* %eptr8097711                                          ; *eptr8097711 = %cont8086157
  store i64 %PGT$f, i64* %eptr8097712                                                ; *eptr8097712 = %PGT$f
  store i64 %C1x$_37map1, i64* %eptr8097713                                          ; *eptr8097713 = %C1x$_37map1
  store i64 %Yhi$acc, i64* %eptr8097714                                              ; *eptr8097714 = %Yhi$acc
  store i64 %vNL$_37foldr, i64* %eptr8097715                                         ; *eptr8097715 = %vNL$_37foldr
  %eptr8097708 = getelementptr inbounds i64, i64* %cloptr8097707, i64 0              ; &cloptr8097707[0]
  %f8097716 = ptrtoint void(i64,i64)* @lam8091137 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097716, i64* %eptr8097708                                             ; store fptr
  %arg8088427 = ptrtoint i64* %cloptr8097707 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097717 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097718 = getelementptr inbounds i64, i64* %cloptr8097717, i64 0              ; &cloptr8097717[0]
  %f8097719 = ptrtoint void(i64,i64)* @lam8091109 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097719, i64* %eptr8097718                                             ; store fptr
  %arg8088426 = ptrtoint i64* %cloptr8097717 to i64                                  ; closure cast; i64* -> i64
  %arg8088425 = call i64 @const_init_false()                                         ; quoted #f
  %rva8090780 = add i64 0, 0                                                         ; quoted ()
  %rva8090779 = call i64 @prim_cons(i64 %rPH$lsts, i64 %rva8090780)                  ; call prim_cons
  %rva8090778 = call i64 @prim_cons(i64 %arg8088425, i64 %rva8090779)                ; call prim_cons
  %rva8090777 = call i64 @prim_cons(i64 %arg8088426, i64 %rva8090778)                ; call prim_cons
  %rva8090776 = call i64 @prim_cons(i64 %arg8088427, i64 %rva8090777)                ; call prim_cons
  %cloptr8097720 = inttoptr i64 %hHO$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8097721 = getelementptr inbounds i64, i64* %cloptr8097720, i64 0             ; &cloptr8097720[0]
  %f8097723 = load i64, i64* %i0ptr8097721, align 8                                  ; load; *i0ptr8097721
  %fptr8097722 = inttoptr i64 %f8097723 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097722(i64 %hHO$_37foldr1, i64 %rva8090776)        ; tail call
  ret void
}


define void @lam8091137(i64 %env8091138, i64 %rvp8090764) {
  %envptr8097724 = inttoptr i64 %env8091138 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097725 = getelementptr inbounds i64, i64* %envptr8097724, i64 7            ; &envptr8097724[7]
  %vNL$_37foldr = load i64, i64* %envptr8097725, align 8                             ; load; *envptr8097725
  %envptr8097726 = inttoptr i64 %env8091138 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097727 = getelementptr inbounds i64, i64* %envptr8097726, i64 6            ; &envptr8097726[6]
  %Yhi$acc = load i64, i64* %envptr8097727, align 8                                  ; load; *envptr8097727
  %envptr8097728 = inttoptr i64 %env8091138 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097729 = getelementptr inbounds i64, i64* %envptr8097728, i64 5            ; &envptr8097728[5]
  %C1x$_37map1 = load i64, i64* %envptr8097729, align 8                              ; load; *envptr8097729
  %envptr8097730 = inttoptr i64 %env8091138 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097731 = getelementptr inbounds i64, i64* %envptr8097730, i64 4            ; &envptr8097730[4]
  %PGT$f = load i64, i64* %envptr8097731, align 8                                    ; load; *envptr8097731
  %envptr8097732 = inttoptr i64 %env8091138 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097733 = getelementptr inbounds i64, i64* %envptr8097732, i64 3            ; &envptr8097732[3]
  %cont8086157 = load i64, i64* %envptr8097733, align 8                              ; load; *envptr8097733
  %envptr8097734 = inttoptr i64 %env8091138 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097735 = getelementptr inbounds i64, i64* %envptr8097734, i64 2            ; &envptr8097734[2]
  %rPH$lsts = load i64, i64* %envptr8097735, align 8                                 ; load; *envptr8097735
  %envptr8097736 = inttoptr i64 %env8091138 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097737 = getelementptr inbounds i64, i64* %envptr8097736, i64 1            ; &envptr8097736[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097737, align 8                            ; load; *envptr8097737
  %_958086161 = call i64 @prim_car(i64 %rvp8090764)                                  ; call prim_car
  %rvp8090763 = call i64 @prim_cdr(i64 %rvp8090764)                                  ; call prim_cdr
  %a8085741 = call i64 @prim_car(i64 %rvp8090763)                                    ; call prim_car
  %na8090708 = call i64 @prim_cdr(i64 %rvp8090763)                                   ; call prim_cdr
  %cmp8097738 = icmp eq i64 %a8085741, 15                                            ; false?
  br i1 %cmp8097738, label %else8097740, label %then8097739                          ; if

then8097739:
  %arg8088430 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090711 = add i64 0, 0                                                         ; quoted ()
  %rva8090710 = call i64 @prim_cons(i64 %Yhi$acc, i64 %rva8090711)                   ; call prim_cons
  %rva8090709 = call i64 @prim_cons(i64 %arg8088430, i64 %rva8090710)                ; call prim_cons
  %cloptr8097741 = inttoptr i64 %cont8086157 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097742 = getelementptr inbounds i64, i64* %cloptr8097741, i64 0             ; &cloptr8097741[0]
  %f8097744 = load i64, i64* %i0ptr8097742, align 8                                  ; load; *i0ptr8097742
  %fptr8097743 = inttoptr i64 %f8097744 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097743(i64 %cont8086157, i64 %rva8090709)          ; tail call
  ret void

else8097740:
  %cloptr8097745 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8097747 = getelementptr inbounds i64, i64* %cloptr8097745, i64 1              ; &eptr8097747[1]
  %eptr8097748 = getelementptr inbounds i64, i64* %cloptr8097745, i64 2              ; &eptr8097748[2]
  %eptr8097749 = getelementptr inbounds i64, i64* %cloptr8097745, i64 3              ; &eptr8097749[3]
  %eptr8097750 = getelementptr inbounds i64, i64* %cloptr8097745, i64 4              ; &eptr8097750[4]
  %eptr8097751 = getelementptr inbounds i64, i64* %cloptr8097745, i64 5              ; &eptr8097751[5]
  %eptr8097752 = getelementptr inbounds i64, i64* %cloptr8097745, i64 6              ; &eptr8097752[6]
  %eptr8097753 = getelementptr inbounds i64, i64* %cloptr8097745, i64 7              ; &eptr8097753[7]
  store i64 %hHO$_37foldr1, i64* %eptr8097747                                        ; *eptr8097747 = %hHO$_37foldr1
  store i64 %rPH$lsts, i64* %eptr8097748                                             ; *eptr8097748 = %rPH$lsts
  store i64 %cont8086157, i64* %eptr8097749                                          ; *eptr8097749 = %cont8086157
  store i64 %PGT$f, i64* %eptr8097750                                                ; *eptr8097750 = %PGT$f
  store i64 %C1x$_37map1, i64* %eptr8097751                                          ; *eptr8097751 = %C1x$_37map1
  store i64 %Yhi$acc, i64* %eptr8097752                                              ; *eptr8097752 = %Yhi$acc
  store i64 %vNL$_37foldr, i64* %eptr8097753                                         ; *eptr8097753 = %vNL$_37foldr
  %eptr8097746 = getelementptr inbounds i64, i64* %cloptr8097745, i64 0              ; &cloptr8097745[0]
  %f8097754 = ptrtoint void(i64,i64)* @lam8091135 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097754, i64* %eptr8097746                                             ; store fptr
  %arg8088434 = ptrtoint i64* %cloptr8097745 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097755 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097756 = getelementptr inbounds i64, i64* %cloptr8097755, i64 0              ; &cloptr8097755[0]
  %f8097757 = ptrtoint void(i64,i64)* @lam8091116 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097757, i64* %eptr8097756                                             ; store fptr
  %arg8088433 = ptrtoint i64* %cloptr8097755 to i64                                  ; closure cast; i64* -> i64
  %rva8090762 = add i64 0, 0                                                         ; quoted ()
  %rva8090761 = call i64 @prim_cons(i64 %rPH$lsts, i64 %rva8090762)                  ; call prim_cons
  %rva8090760 = call i64 @prim_cons(i64 %arg8088433, i64 %rva8090761)                ; call prim_cons
  %rva8090759 = call i64 @prim_cons(i64 %arg8088434, i64 %rva8090760)                ; call prim_cons
  %cloptr8097758 = inttoptr i64 %C1x$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097759 = getelementptr inbounds i64, i64* %cloptr8097758, i64 0             ; &cloptr8097758[0]
  %f8097761 = load i64, i64* %i0ptr8097759, align 8                                  ; load; *i0ptr8097759
  %fptr8097760 = inttoptr i64 %f8097761 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097760(i64 %C1x$_37map1, i64 %rva8090759)          ; tail call
  ret void
}


define void @lam8091135(i64 %env8091136, i64 %rvp8090751) {
  %envptr8097762 = inttoptr i64 %env8091136 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097763 = getelementptr inbounds i64, i64* %envptr8097762, i64 7            ; &envptr8097762[7]
  %vNL$_37foldr = load i64, i64* %envptr8097763, align 8                             ; load; *envptr8097763
  %envptr8097764 = inttoptr i64 %env8091136 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097765 = getelementptr inbounds i64, i64* %envptr8097764, i64 6            ; &envptr8097764[6]
  %Yhi$acc = load i64, i64* %envptr8097765, align 8                                  ; load; *envptr8097765
  %envptr8097766 = inttoptr i64 %env8091136 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097767 = getelementptr inbounds i64, i64* %envptr8097766, i64 5            ; &envptr8097766[5]
  %C1x$_37map1 = load i64, i64* %envptr8097767, align 8                              ; load; *envptr8097767
  %envptr8097768 = inttoptr i64 %env8091136 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097769 = getelementptr inbounds i64, i64* %envptr8097768, i64 4            ; &envptr8097768[4]
  %PGT$f = load i64, i64* %envptr8097769, align 8                                    ; load; *envptr8097769
  %envptr8097770 = inttoptr i64 %env8091136 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097771 = getelementptr inbounds i64, i64* %envptr8097770, i64 3            ; &envptr8097770[3]
  %cont8086157 = load i64, i64* %envptr8097771, align 8                              ; load; *envptr8097771
  %envptr8097772 = inttoptr i64 %env8091136 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097773 = getelementptr inbounds i64, i64* %envptr8097772, i64 2            ; &envptr8097772[2]
  %rPH$lsts = load i64, i64* %envptr8097773, align 8                                 ; load; *envptr8097773
  %envptr8097774 = inttoptr i64 %env8091136 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097775 = getelementptr inbounds i64, i64* %envptr8097774, i64 1            ; &envptr8097774[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097775, align 8                            ; load; *envptr8097775
  %_958086162 = call i64 @prim_car(i64 %rvp8090751)                                  ; call prim_car
  %rvp8090750 = call i64 @prim_cdr(i64 %rvp8090751)                                  ; call prim_cdr
  %wEH$lsts_43 = call i64 @prim_car(i64 %rvp8090750)                                 ; call prim_car
  %na8090713 = call i64 @prim_cdr(i64 %rvp8090750)                                   ; call prim_cdr
  %cloptr8097776 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8097778 = getelementptr inbounds i64, i64* %cloptr8097776, i64 1              ; &eptr8097778[1]
  %eptr8097779 = getelementptr inbounds i64, i64* %cloptr8097776, i64 2              ; &eptr8097779[2]
  %eptr8097780 = getelementptr inbounds i64, i64* %cloptr8097776, i64 3              ; &eptr8097780[3]
  %eptr8097781 = getelementptr inbounds i64, i64* %cloptr8097776, i64 4              ; &eptr8097781[4]
  %eptr8097782 = getelementptr inbounds i64, i64* %cloptr8097776, i64 5              ; &eptr8097782[5]
  %eptr8097783 = getelementptr inbounds i64, i64* %cloptr8097776, i64 6              ; &eptr8097783[6]
  store i64 %wEH$lsts_43, i64* %eptr8097778                                          ; *eptr8097778 = %wEH$lsts_43
  store i64 %hHO$_37foldr1, i64* %eptr8097779                                        ; *eptr8097779 = %hHO$_37foldr1
  store i64 %cont8086157, i64* %eptr8097780                                          ; *eptr8097780 = %cont8086157
  store i64 %PGT$f, i64* %eptr8097781                                                ; *eptr8097781 = %PGT$f
  store i64 %Yhi$acc, i64* %eptr8097782                                              ; *eptr8097782 = %Yhi$acc
  store i64 %vNL$_37foldr, i64* %eptr8097783                                         ; *eptr8097783 = %vNL$_37foldr
  %eptr8097777 = getelementptr inbounds i64, i64* %cloptr8097776, i64 0              ; &cloptr8097776[0]
  %f8097784 = ptrtoint void(i64,i64)* @lam8091133 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097784, i64* %eptr8097777                                             ; store fptr
  %arg8088438 = ptrtoint i64* %cloptr8097776 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097785 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097786 = getelementptr inbounds i64, i64* %cloptr8097785, i64 0              ; &cloptr8097785[0]
  %f8097787 = ptrtoint void(i64,i64)* @lam8091121 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097787, i64* %eptr8097786                                             ; store fptr
  %arg8088437 = ptrtoint i64* %cloptr8097785 to i64                                  ; closure cast; i64* -> i64
  %rva8090749 = add i64 0, 0                                                         ; quoted ()
  %rva8090748 = call i64 @prim_cons(i64 %rPH$lsts, i64 %rva8090749)                  ; call prim_cons
  %rva8090747 = call i64 @prim_cons(i64 %arg8088437, i64 %rva8090748)                ; call prim_cons
  %rva8090746 = call i64 @prim_cons(i64 %arg8088438, i64 %rva8090747)                ; call prim_cons
  %cloptr8097788 = inttoptr i64 %C1x$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097789 = getelementptr inbounds i64, i64* %cloptr8097788, i64 0             ; &cloptr8097788[0]
  %f8097791 = load i64, i64* %i0ptr8097789, align 8                                  ; load; *i0ptr8097789
  %fptr8097790 = inttoptr i64 %f8097791 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097790(i64 %C1x$_37map1, i64 %rva8090746)          ; tail call
  ret void
}


define void @lam8091133(i64 %env8091134, i64 %rvp8090738) {
  %envptr8097792 = inttoptr i64 %env8091134 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097793 = getelementptr inbounds i64, i64* %envptr8097792, i64 6            ; &envptr8097792[6]
  %vNL$_37foldr = load i64, i64* %envptr8097793, align 8                             ; load; *envptr8097793
  %envptr8097794 = inttoptr i64 %env8091134 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097795 = getelementptr inbounds i64, i64* %envptr8097794, i64 5            ; &envptr8097794[5]
  %Yhi$acc = load i64, i64* %envptr8097795, align 8                                  ; load; *envptr8097795
  %envptr8097796 = inttoptr i64 %env8091134 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097797 = getelementptr inbounds i64, i64* %envptr8097796, i64 4            ; &envptr8097796[4]
  %PGT$f = load i64, i64* %envptr8097797, align 8                                    ; load; *envptr8097797
  %envptr8097798 = inttoptr i64 %env8091134 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097799 = getelementptr inbounds i64, i64* %envptr8097798, i64 3            ; &envptr8097798[3]
  %cont8086157 = load i64, i64* %envptr8097799, align 8                              ; load; *envptr8097799
  %envptr8097800 = inttoptr i64 %env8091134 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097801 = getelementptr inbounds i64, i64* %envptr8097800, i64 2            ; &envptr8097800[2]
  %hHO$_37foldr1 = load i64, i64* %envptr8097801, align 8                            ; load; *envptr8097801
  %envptr8097802 = inttoptr i64 %env8091134 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097803 = getelementptr inbounds i64, i64* %envptr8097802, i64 1            ; &envptr8097802[1]
  %wEH$lsts_43 = load i64, i64* %envptr8097803, align 8                              ; load; *envptr8097803
  %_958086163 = call i64 @prim_car(i64 %rvp8090738)                                  ; call prim_car
  %rvp8090737 = call i64 @prim_cdr(i64 %rvp8090738)                                  ; call prim_cdr
  %Pmq$vs = call i64 @prim_car(i64 %rvp8090737)                                      ; call prim_car
  %na8090715 = call i64 @prim_cdr(i64 %rvp8090737)                                   ; call prim_cdr
  %a8085742 = call i64 @prim_cons(i64 %Yhi$acc, i64 %wEH$lsts_43)                    ; call prim_cons
  %a8085743 = call i64 @prim_cons(i64 %PGT$f, i64 %a8085742)                         ; call prim_cons
  %cloptr8097804 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8097806 = getelementptr inbounds i64, i64* %cloptr8097804, i64 1              ; &eptr8097806[1]
  %eptr8097807 = getelementptr inbounds i64, i64* %cloptr8097804, i64 2              ; &eptr8097807[2]
  %eptr8097808 = getelementptr inbounds i64, i64* %cloptr8097804, i64 3              ; &eptr8097808[3]
  %eptr8097809 = getelementptr inbounds i64, i64* %cloptr8097804, i64 4              ; &eptr8097809[4]
  store i64 %hHO$_37foldr1, i64* %eptr8097806                                        ; *eptr8097806 = %hHO$_37foldr1
  store i64 %cont8086157, i64* %eptr8097807                                          ; *eptr8097807 = %cont8086157
  store i64 %Pmq$vs, i64* %eptr8097808                                               ; *eptr8097808 = %Pmq$vs
  store i64 %PGT$f, i64* %eptr8097809                                                ; *eptr8097809 = %PGT$f
  %eptr8097805 = getelementptr inbounds i64, i64* %cloptr8097804, i64 0              ; &cloptr8097804[0]
  %f8097810 = ptrtoint void(i64,i64)* @lam8091131 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097810, i64* %eptr8097805                                             ; store fptr
  %arg8088445 = ptrtoint i64* %cloptr8097804 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst8086169 = call i64 @prim_cons(i64 %arg8088445, i64 %a8085743)            ; call prim_cons
  %cloptr8097811 = inttoptr i64 %vNL$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr8097812 = getelementptr inbounds i64, i64* %cloptr8097811, i64 0             ; &cloptr8097811[0]
  %f8097814 = load i64, i64* %i0ptr8097812, align 8                                  ; load; *i0ptr8097812
  %fptr8097813 = inttoptr i64 %f8097814 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097813(i64 %vNL$_37foldr, i64 %cps_45lst8086169)   ; tail call
  ret void
}


define void @lam8091131(i64 %env8091132, i64 %rvp8090736) {
  %envptr8097815 = inttoptr i64 %env8091132 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097816 = getelementptr inbounds i64, i64* %envptr8097815, i64 4            ; &envptr8097815[4]
  %PGT$f = load i64, i64* %envptr8097816, align 8                                    ; load; *envptr8097816
  %envptr8097817 = inttoptr i64 %env8091132 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097818 = getelementptr inbounds i64, i64* %envptr8097817, i64 3            ; &envptr8097817[3]
  %Pmq$vs = load i64, i64* %envptr8097818, align 8                                   ; load; *envptr8097818
  %envptr8097819 = inttoptr i64 %env8091132 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097820 = getelementptr inbounds i64, i64* %envptr8097819, i64 2            ; &envptr8097819[2]
  %cont8086157 = load i64, i64* %envptr8097820, align 8                              ; load; *envptr8097820
  %envptr8097821 = inttoptr i64 %env8091132 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097822 = getelementptr inbounds i64, i64* %envptr8097821, i64 1            ; &envptr8097821[1]
  %hHO$_37foldr1 = load i64, i64* %envptr8097822, align 8                            ; load; *envptr8097822
  %_958086164 = call i64 @prim_car(i64 %rvp8090736)                                  ; call prim_car
  %rvp8090735 = call i64 @prim_cdr(i64 %rvp8090736)                                  ; call prim_cdr
  %a8085744 = call i64 @prim_car(i64 %rvp8090735)                                    ; call prim_car
  %na8090717 = call i64 @prim_cdr(i64 %rvp8090735)                                   ; call prim_cdr
  %arg8088446 = add i64 0, 0                                                         ; quoted ()
  %a8085745 = call i64 @prim_cons(i64 %a8085744, i64 %arg8088446)                    ; call prim_cons
  %cloptr8097823 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8097825 = getelementptr inbounds i64, i64* %cloptr8097823, i64 1              ; &eptr8097825[1]
  %eptr8097826 = getelementptr inbounds i64, i64* %cloptr8097823, i64 2              ; &eptr8097826[2]
  store i64 %cont8086157, i64* %eptr8097825                                          ; *eptr8097825 = %cont8086157
  store i64 %PGT$f, i64* %eptr8097826                                                ; *eptr8097826 = %PGT$f
  %eptr8097824 = getelementptr inbounds i64, i64* %cloptr8097823, i64 0              ; &cloptr8097823[0]
  %f8097827 = ptrtoint void(i64,i64)* @lam8091128 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097827, i64* %eptr8097824                                             ; store fptr
  %arg8088451 = ptrtoint i64* %cloptr8097823 to i64                                  ; closure cast; i64* -> i64
  %cloptr8097828 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8097829 = getelementptr inbounds i64, i64* %cloptr8097828, i64 0              ; &cloptr8097828[0]
  %f8097830 = ptrtoint void(i64,i64)* @lam8091126 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097830, i64* %eptr8097829                                             ; store fptr
  %arg8088450 = ptrtoint i64* %cloptr8097828 to i64                                  ; closure cast; i64* -> i64
  %rva8090734 = add i64 0, 0                                                         ; quoted ()
  %rva8090733 = call i64 @prim_cons(i64 %Pmq$vs, i64 %rva8090734)                    ; call prim_cons
  %rva8090732 = call i64 @prim_cons(i64 %a8085745, i64 %rva8090733)                  ; call prim_cons
  %rva8090731 = call i64 @prim_cons(i64 %arg8088450, i64 %rva8090732)                ; call prim_cons
  %rva8090730 = call i64 @prim_cons(i64 %arg8088451, i64 %rva8090731)                ; call prim_cons
  %cloptr8097831 = inttoptr i64 %hHO$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8097832 = getelementptr inbounds i64, i64* %cloptr8097831, i64 0             ; &cloptr8097831[0]
  %f8097834 = load i64, i64* %i0ptr8097832, align 8                                  ; load; *i0ptr8097832
  %fptr8097833 = inttoptr i64 %f8097834 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097833(i64 %hHO$_37foldr1, i64 %rva8090730)        ; tail call
  ret void
}


define void @lam8091128(i64 %env8091129, i64 %rvp8090721) {
  %envptr8097835 = inttoptr i64 %env8091129 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097836 = getelementptr inbounds i64, i64* %envptr8097835, i64 2            ; &envptr8097835[2]
  %PGT$f = load i64, i64* %envptr8097836, align 8                                    ; load; *envptr8097836
  %envptr8097837 = inttoptr i64 %env8091129 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097838 = getelementptr inbounds i64, i64* %envptr8097837, i64 1            ; &envptr8097837[1]
  %cont8086157 = load i64, i64* %envptr8097838, align 8                              ; load; *envptr8097838
  %_958086165 = call i64 @prim_car(i64 %rvp8090721)                                  ; call prim_car
  %rvp8090720 = call i64 @prim_cdr(i64 %rvp8090721)                                  ; call prim_cdr
  %a8085746 = call i64 @prim_car(i64 %rvp8090720)                                    ; call prim_car
  %na8090719 = call i64 @prim_cdr(i64 %rvp8090720)                                   ; call prim_cdr
  %cps_45lst8086166 = call i64 @prim_cons(i64 %cont8086157, i64 %a8085746)           ; call prim_cons
  %cloptr8097839 = inttoptr i64 %PGT$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8097840 = getelementptr inbounds i64, i64* %cloptr8097839, i64 0             ; &cloptr8097839[0]
  %f8097842 = load i64, i64* %i0ptr8097840, align 8                                  ; load; *i0ptr8097840
  %fptr8097841 = inttoptr i64 %f8097842 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097841(i64 %PGT$f, i64 %cps_45lst8086166)          ; tail call
  ret void
}


define void @lam8091126(i64 %env8091127, i64 %rvp8090729) {
  %cont8086167 = call i64 @prim_car(i64 %rvp8090729)                                 ; call prim_car
  %rvp8090728 = call i64 @prim_cdr(i64 %rvp8090729)                                  ; call prim_cdr
  %Nqf$a = call i64 @prim_car(i64 %rvp8090728)                                       ; call prim_car
  %rvp8090727 = call i64 @prim_cdr(i64 %rvp8090728)                                  ; call prim_cdr
  %scd$b = call i64 @prim_car(i64 %rvp8090727)                                       ; call prim_car
  %na8090723 = call i64 @prim_cdr(i64 %rvp8090727)                                   ; call prim_cdr
  %retprim8086168 = call i64 @prim_cons(i64 %Nqf$a, i64 %scd$b)                      ; call prim_cons
  %arg8088458 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090726 = add i64 0, 0                                                         ; quoted ()
  %rva8090725 = call i64 @prim_cons(i64 %retprim8086168, i64 %rva8090726)            ; call prim_cons
  %rva8090724 = call i64 @prim_cons(i64 %arg8088458, i64 %rva8090725)                ; call prim_cons
  %cloptr8097843 = inttoptr i64 %cont8086167 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097844 = getelementptr inbounds i64, i64* %cloptr8097843, i64 0             ; &cloptr8097843[0]
  %f8097846 = load i64, i64* %i0ptr8097844, align 8                                  ; load; *i0ptr8097844
  %fptr8097845 = inttoptr i64 %f8097846 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097845(i64 %cont8086167, i64 %rva8090724)          ; tail call
  ret void
}


define void @lam8091121(i64 %env8091122, i64 %rvp8090745) {
  %cont8086170 = call i64 @prim_car(i64 %rvp8090745)                                 ; call prim_car
  %rvp8090744 = call i64 @prim_cdr(i64 %rvp8090745)                                  ; call prim_cdr
  %hi3$x = call i64 @prim_car(i64 %rvp8090744)                                       ; call prim_car
  %na8090740 = call i64 @prim_cdr(i64 %rvp8090744)                                   ; call prim_cdr
  %retprim8086171 = call i64 @prim_car(i64 %hi3$x)                                   ; call prim_car
  %arg8088462 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090743 = add i64 0, 0                                                         ; quoted ()
  %rva8090742 = call i64 @prim_cons(i64 %retprim8086171, i64 %rva8090743)            ; call prim_cons
  %rva8090741 = call i64 @prim_cons(i64 %arg8088462, i64 %rva8090742)                ; call prim_cons
  %cloptr8097847 = inttoptr i64 %cont8086170 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097848 = getelementptr inbounds i64, i64* %cloptr8097847, i64 0             ; &cloptr8097847[0]
  %f8097850 = load i64, i64* %i0ptr8097848, align 8                                  ; load; *i0ptr8097848
  %fptr8097849 = inttoptr i64 %f8097850 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097849(i64 %cont8086170, i64 %rva8090741)          ; tail call
  ret void
}


define void @lam8091116(i64 %env8091117, i64 %rvp8090758) {
  %cont8086172 = call i64 @prim_car(i64 %rvp8090758)                                 ; call prim_car
  %rvp8090757 = call i64 @prim_cdr(i64 %rvp8090758)                                  ; call prim_cdr
  %lAJ$x = call i64 @prim_car(i64 %rvp8090757)                                       ; call prim_car
  %na8090753 = call i64 @prim_cdr(i64 %rvp8090757)                                   ; call prim_cdr
  %retprim8086173 = call i64 @prim_cdr(i64 %lAJ$x)                                   ; call prim_cdr
  %arg8088466 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090756 = add i64 0, 0                                                         ; quoted ()
  %rva8090755 = call i64 @prim_cons(i64 %retprim8086173, i64 %rva8090756)            ; call prim_cons
  %rva8090754 = call i64 @prim_cons(i64 %arg8088466, i64 %rva8090755)                ; call prim_cons
  %cloptr8097851 = inttoptr i64 %cont8086172 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097852 = getelementptr inbounds i64, i64* %cloptr8097851, i64 0             ; &cloptr8097851[0]
  %f8097854 = load i64, i64* %i0ptr8097852, align 8                                  ; load; *i0ptr8097852
  %fptr8097853 = inttoptr i64 %f8097854 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097853(i64 %cont8086172, i64 %rva8090754)          ; tail call
  ret void
}


define void @lam8091109(i64 %env8091110, i64 %rvp8090775) {
  %cont8086174 = call i64 @prim_car(i64 %rvp8090775)                                 ; call prim_car
  %rvp8090774 = call i64 @prim_cdr(i64 %rvp8090775)                                  ; call prim_cdr
  %eLA$lst = call i64 @prim_car(i64 %rvp8090774)                                     ; call prim_car
  %rvp8090773 = call i64 @prim_cdr(i64 %rvp8090774)                                  ; call prim_cdr
  %rcm$b = call i64 @prim_car(i64 %rvp8090773)                                       ; call prim_car
  %na8090766 = call i64 @prim_cdr(i64 %rvp8090773)                                   ; call prim_cdr
  %cmp8097855 = icmp eq i64 %rcm$b, 15                                               ; false?
  br i1 %cmp8097855, label %else8097857, label %then8097856                          ; if

then8097856:
  %arg8088469 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090769 = add i64 0, 0                                                         ; quoted ()
  %rva8090768 = call i64 @prim_cons(i64 %rcm$b, i64 %rva8090769)                     ; call prim_cons
  %rva8090767 = call i64 @prim_cons(i64 %arg8088469, i64 %rva8090768)                ; call prim_cons
  %cloptr8097858 = inttoptr i64 %cont8086174 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097859 = getelementptr inbounds i64, i64* %cloptr8097858, i64 0             ; &cloptr8097858[0]
  %f8097861 = load i64, i64* %i0ptr8097859, align 8                                  ; load; *i0ptr8097859
  %fptr8097860 = inttoptr i64 %f8097861 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097860(i64 %cont8086174, i64 %rva8090767)          ; tail call
  ret void

else8097857:
  %retprim8086175 = call i64 @prim_null_63(i64 %eLA$lst)                             ; call prim_null_63
  %arg8088473 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090772 = add i64 0, 0                                                         ; quoted ()
  %rva8090771 = call i64 @prim_cons(i64 %retprim8086175, i64 %rva8090772)            ; call prim_cons
  %rva8090770 = call i64 @prim_cons(i64 %arg8088473, i64 %rva8090771)                ; call prim_cons
  %cloptr8097862 = inttoptr i64 %cont8086174 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097863 = getelementptr inbounds i64, i64* %cloptr8097862, i64 0             ; &cloptr8097862[0]
  %f8097865 = load i64, i64* %i0ptr8097863, align 8                                  ; load; *i0ptr8097863
  %fptr8097864 = inttoptr i64 %f8097865 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097864(i64 %cont8086174, i64 %rva8090770)          ; tail call
  ret void
}


define void @lam8091095(i64 %env8091096, i64 %rvp8090829) {
  %cont8086178 = call i64 @prim_car(i64 %rvp8090829)                                 ; call prim_car
  %rvp8090828 = call i64 @prim_cdr(i64 %rvp8090829)                                  ; call prim_cdr
  %POp$_37foldl1 = call i64 @prim_car(i64 %rvp8090828)                               ; call prim_car
  %na8090802 = call i64 @prim_cdr(i64 %rvp8090828)                                   ; call prim_cdr
  %arg8088476 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8097866 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8097868 = getelementptr inbounds i64, i64* %cloptr8097866, i64 1              ; &eptr8097868[1]
  store i64 %POp$_37foldl1, i64* %eptr8097868                                        ; *eptr8097868 = %POp$_37foldl1
  %eptr8097867 = getelementptr inbounds i64, i64* %cloptr8097866, i64 0              ; &cloptr8097866[0]
  %f8097869 = ptrtoint void(i64,i64)* @lam8091092 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097869, i64* %eptr8097867                                             ; store fptr
  %arg8088475 = ptrtoint i64* %cloptr8097866 to i64                                  ; closure cast; i64* -> i64
  %rva8090827 = add i64 0, 0                                                         ; quoted ()
  %rva8090826 = call i64 @prim_cons(i64 %arg8088475, i64 %rva8090827)                ; call prim_cons
  %rva8090825 = call i64 @prim_cons(i64 %arg8088476, i64 %rva8090826)                ; call prim_cons
  %cloptr8097870 = inttoptr i64 %cont8086178 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097871 = getelementptr inbounds i64, i64* %cloptr8097870, i64 0             ; &cloptr8097870[0]
  %f8097873 = load i64, i64* %i0ptr8097871, align 8                                  ; load; *i0ptr8097871
  %fptr8097872 = inttoptr i64 %f8097873 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097872(i64 %cont8086178, i64 %rva8090825)          ; tail call
  ret void
}


define void @lam8091092(i64 %env8091093, i64 %rvp8090824) {
  %envptr8097874 = inttoptr i64 %env8091093 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097875 = getelementptr inbounds i64, i64* %envptr8097874, i64 1            ; &envptr8097874[1]
  %POp$_37foldl1 = load i64, i64* %envptr8097875, align 8                            ; load; *envptr8097875
  %cont8086179 = call i64 @prim_car(i64 %rvp8090824)                                 ; call prim_car
  %rvp8090823 = call i64 @prim_cdr(i64 %rvp8090824)                                  ; call prim_cdr
  %wvT$f = call i64 @prim_car(i64 %rvp8090823)                                       ; call prim_car
  %rvp8090822 = call i64 @prim_cdr(i64 %rvp8090823)                                  ; call prim_cdr
  %ieb$acc = call i64 @prim_car(i64 %rvp8090822)                                     ; call prim_car
  %rvp8090821 = call i64 @prim_cdr(i64 %rvp8090822)                                  ; call prim_cdr
  %Ief$lst = call i64 @prim_car(i64 %rvp8090821)                                     ; call prim_car
  %na8090804 = call i64 @prim_cdr(i64 %rvp8090821)                                   ; call prim_cdr
  %a8085733 = call i64 @prim_null_63(i64 %Ief$lst)                                   ; call prim_null_63
  %cmp8097876 = icmp eq i64 %a8085733, 15                                            ; false?
  br i1 %cmp8097876, label %else8097878, label %then8097877                          ; if

then8097877:
  %arg8088480 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090807 = add i64 0, 0                                                         ; quoted ()
  %rva8090806 = call i64 @prim_cons(i64 %ieb$acc, i64 %rva8090807)                   ; call prim_cons
  %rva8090805 = call i64 @prim_cons(i64 %arg8088480, i64 %rva8090806)                ; call prim_cons
  %cloptr8097879 = inttoptr i64 %cont8086179 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097880 = getelementptr inbounds i64, i64* %cloptr8097879, i64 0             ; &cloptr8097879[0]
  %f8097882 = load i64, i64* %i0ptr8097880, align 8                                  ; load; *i0ptr8097880
  %fptr8097881 = inttoptr i64 %f8097882 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097881(i64 %cont8086179, i64 %rva8090805)          ; tail call
  ret void

else8097878:
  %a8085734 = call i64 @prim_car(i64 %Ief$lst)                                       ; call prim_car
  %cloptr8097883 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8097885 = getelementptr inbounds i64, i64* %cloptr8097883, i64 1              ; &eptr8097885[1]
  %eptr8097886 = getelementptr inbounds i64, i64* %cloptr8097883, i64 2              ; &eptr8097886[2]
  %eptr8097887 = getelementptr inbounds i64, i64* %cloptr8097883, i64 3              ; &eptr8097887[3]
  %eptr8097888 = getelementptr inbounds i64, i64* %cloptr8097883, i64 4              ; &eptr8097888[4]
  store i64 %wvT$f, i64* %eptr8097885                                                ; *eptr8097885 = %wvT$f
  store i64 %POp$_37foldl1, i64* %eptr8097886                                        ; *eptr8097886 = %POp$_37foldl1
  store i64 %Ief$lst, i64* %eptr8097887                                              ; *eptr8097887 = %Ief$lst
  store i64 %cont8086179, i64* %eptr8097888                                          ; *eptr8097888 = %cont8086179
  %eptr8097884 = getelementptr inbounds i64, i64* %cloptr8097883, i64 0              ; &cloptr8097883[0]
  %f8097889 = ptrtoint void(i64,i64)* @lam8091090 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097889, i64* %eptr8097884                                             ; store fptr
  %arg8088485 = ptrtoint i64* %cloptr8097883 to i64                                  ; closure cast; i64* -> i64
  %rva8090820 = add i64 0, 0                                                         ; quoted ()
  %rva8090819 = call i64 @prim_cons(i64 %ieb$acc, i64 %rva8090820)                   ; call prim_cons
  %rva8090818 = call i64 @prim_cons(i64 %a8085734, i64 %rva8090819)                  ; call prim_cons
  %rva8090817 = call i64 @prim_cons(i64 %arg8088485, i64 %rva8090818)                ; call prim_cons
  %cloptr8097890 = inttoptr i64 %wvT$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8097891 = getelementptr inbounds i64, i64* %cloptr8097890, i64 0             ; &cloptr8097890[0]
  %f8097893 = load i64, i64* %i0ptr8097891, align 8                                  ; load; *i0ptr8097891
  %fptr8097892 = inttoptr i64 %f8097893 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097892(i64 %wvT$f, i64 %rva8090817)                ; tail call
  ret void
}


define void @lam8091090(i64 %env8091091, i64 %rvp8090816) {
  %envptr8097894 = inttoptr i64 %env8091091 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097895 = getelementptr inbounds i64, i64* %envptr8097894, i64 4            ; &envptr8097894[4]
  %cont8086179 = load i64, i64* %envptr8097895, align 8                              ; load; *envptr8097895
  %envptr8097896 = inttoptr i64 %env8091091 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097897 = getelementptr inbounds i64, i64* %envptr8097896, i64 3            ; &envptr8097896[3]
  %Ief$lst = load i64, i64* %envptr8097897, align 8                                  ; load; *envptr8097897
  %envptr8097898 = inttoptr i64 %env8091091 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097899 = getelementptr inbounds i64, i64* %envptr8097898, i64 2            ; &envptr8097898[2]
  %POp$_37foldl1 = load i64, i64* %envptr8097899, align 8                            ; load; *envptr8097899
  %envptr8097900 = inttoptr i64 %env8091091 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097901 = getelementptr inbounds i64, i64* %envptr8097900, i64 1            ; &envptr8097900[1]
  %wvT$f = load i64, i64* %envptr8097901, align 8                                    ; load; *envptr8097901
  %_958086180 = call i64 @prim_car(i64 %rvp8090816)                                  ; call prim_car
  %rvp8090815 = call i64 @prim_cdr(i64 %rvp8090816)                                  ; call prim_cdr
  %a8085735 = call i64 @prim_car(i64 %rvp8090815)                                    ; call prim_car
  %na8090809 = call i64 @prim_cdr(i64 %rvp8090815)                                   ; call prim_cdr
  %a8085736 = call i64 @prim_cdr(i64 %Ief$lst)                                       ; call prim_cdr
  %rva8090814 = add i64 0, 0                                                         ; quoted ()
  %rva8090813 = call i64 @prim_cons(i64 %a8085736, i64 %rva8090814)                  ; call prim_cons
  %rva8090812 = call i64 @prim_cons(i64 %a8085735, i64 %rva8090813)                  ; call prim_cons
  %rva8090811 = call i64 @prim_cons(i64 %wvT$f, i64 %rva8090812)                     ; call prim_cons
  %rva8090810 = call i64 @prim_cons(i64 %cont8086179, i64 %rva8090811)               ; call prim_cons
  %cloptr8097902 = inttoptr i64 %POp$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8097903 = getelementptr inbounds i64, i64* %cloptr8097902, i64 0             ; &cloptr8097902[0]
  %f8097905 = load i64, i64* %i0ptr8097903, align 8                                  ; load; *i0ptr8097903
  %fptr8097904 = inttoptr i64 %f8097905 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097904(i64 %POp$_37foldl1, i64 %rva8090810)        ; tail call
  ret void
}


define void @lam8091082(i64 %env8091083, i64 %rvp8090858) {
  %cont8086181 = call i64 @prim_car(i64 %rvp8090858)                                 ; call prim_car
  %rvp8090857 = call i64 @prim_cdr(i64 %rvp8090858)                                  ; call prim_cdr
  %meK$_37length = call i64 @prim_car(i64 %rvp8090857)                               ; call prim_car
  %na8090836 = call i64 @prim_cdr(i64 %rvp8090857)                                   ; call prim_cdr
  %arg8088494 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8097906 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8097908 = getelementptr inbounds i64, i64* %cloptr8097906, i64 1              ; &eptr8097908[1]
  store i64 %meK$_37length, i64* %eptr8097908                                        ; *eptr8097908 = %meK$_37length
  %eptr8097907 = getelementptr inbounds i64, i64* %cloptr8097906, i64 0              ; &cloptr8097906[0]
  %f8097909 = ptrtoint void(i64,i64)* @lam8091079 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097909, i64* %eptr8097907                                             ; store fptr
  %arg8088493 = ptrtoint i64* %cloptr8097906 to i64                                  ; closure cast; i64* -> i64
  %rva8090856 = add i64 0, 0                                                         ; quoted ()
  %rva8090855 = call i64 @prim_cons(i64 %arg8088493, i64 %rva8090856)                ; call prim_cons
  %rva8090854 = call i64 @prim_cons(i64 %arg8088494, i64 %rva8090855)                ; call prim_cons
  %cloptr8097910 = inttoptr i64 %cont8086181 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097911 = getelementptr inbounds i64, i64* %cloptr8097910, i64 0             ; &cloptr8097910[0]
  %f8097913 = load i64, i64* %i0ptr8097911, align 8                                  ; load; *i0ptr8097911
  %fptr8097912 = inttoptr i64 %f8097913 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097912(i64 %cont8086181, i64 %rva8090854)          ; tail call
  ret void
}


define void @lam8091079(i64 %env8091080, i64 %rvp8090853) {
  %envptr8097914 = inttoptr i64 %env8091080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097915 = getelementptr inbounds i64, i64* %envptr8097914, i64 1            ; &envptr8097914[1]
  %meK$_37length = load i64, i64* %envptr8097915, align 8                            ; load; *envptr8097915
  %cont8086182 = call i64 @prim_car(i64 %rvp8090853)                                 ; call prim_car
  %rvp8090852 = call i64 @prim_cdr(i64 %rvp8090853)                                  ; call prim_cdr
  %RCQ$lst = call i64 @prim_car(i64 %rvp8090852)                                     ; call prim_car
  %na8090838 = call i64 @prim_cdr(i64 %rvp8090852)                                   ; call prim_cdr
  %a8085730 = call i64 @prim_null_63(i64 %RCQ$lst)                                   ; call prim_null_63
  %cmp8097916 = icmp eq i64 %a8085730, 15                                            ; false?
  br i1 %cmp8097916, label %else8097918, label %then8097917                          ; if

then8097917:
  %arg8088498 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8088497 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090841 = add i64 0, 0                                                         ; quoted ()
  %rva8090840 = call i64 @prim_cons(i64 %arg8088497, i64 %rva8090841)                ; call prim_cons
  %rva8090839 = call i64 @prim_cons(i64 %arg8088498, i64 %rva8090840)                ; call prim_cons
  %cloptr8097919 = inttoptr i64 %cont8086182 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097920 = getelementptr inbounds i64, i64* %cloptr8097919, i64 0             ; &cloptr8097919[0]
  %f8097922 = load i64, i64* %i0ptr8097920, align 8                                  ; load; *i0ptr8097920
  %fptr8097921 = inttoptr i64 %f8097922 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097921(i64 %cont8086182, i64 %rva8090839)          ; tail call
  ret void

else8097918:
  %a8085731 = call i64 @prim_cdr(i64 %RCQ$lst)                                       ; call prim_cdr
  %cloptr8097923 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8097925 = getelementptr inbounds i64, i64* %cloptr8097923, i64 1              ; &eptr8097925[1]
  store i64 %cont8086182, i64* %eptr8097925                                          ; *eptr8097925 = %cont8086182
  %eptr8097924 = getelementptr inbounds i64, i64* %cloptr8097923, i64 0              ; &cloptr8097923[0]
  %f8097926 = ptrtoint void(i64,i64)* @lam8091077 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097926, i64* %eptr8097924                                             ; store fptr
  %arg8088502 = ptrtoint i64* %cloptr8097923 to i64                                  ; closure cast; i64* -> i64
  %rva8090851 = add i64 0, 0                                                         ; quoted ()
  %rva8090850 = call i64 @prim_cons(i64 %a8085731, i64 %rva8090851)                  ; call prim_cons
  %rva8090849 = call i64 @prim_cons(i64 %arg8088502, i64 %rva8090850)                ; call prim_cons
  %cloptr8097927 = inttoptr i64 %meK$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8097928 = getelementptr inbounds i64, i64* %cloptr8097927, i64 0             ; &cloptr8097927[0]
  %f8097930 = load i64, i64* %i0ptr8097928, align 8                                  ; load; *i0ptr8097928
  %fptr8097929 = inttoptr i64 %f8097930 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097929(i64 %meK$_37length, i64 %rva8090849)        ; tail call
  ret void
}


define void @lam8091077(i64 %env8091078, i64 %rvp8090848) {
  %envptr8097931 = inttoptr i64 %env8091078 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097932 = getelementptr inbounds i64, i64* %envptr8097931, i64 1            ; &envptr8097931[1]
  %cont8086182 = load i64, i64* %envptr8097932, align 8                              ; load; *envptr8097932
  %_958086183 = call i64 @prim_car(i64 %rvp8090848)                                  ; call prim_car
  %rvp8090847 = call i64 @prim_cdr(i64 %rvp8090848)                                  ; call prim_cdr
  %a8085732 = call i64 @prim_car(i64 %rvp8090847)                                    ; call prim_car
  %na8090843 = call i64 @prim_cdr(i64 %rvp8090847)                                   ; call prim_cdr
  %arg8088505 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8086184 = call i64 @prim__43(i64 %arg8088505, i64 %a8085732)               ; call prim__43
  %arg8088507 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090846 = add i64 0, 0                                                         ; quoted ()
  %rva8090845 = call i64 @prim_cons(i64 %retprim8086184, i64 %rva8090846)            ; call prim_cons
  %rva8090844 = call i64 @prim_cons(i64 %arg8088507, i64 %rva8090845)                ; call prim_cons
  %cloptr8097933 = inttoptr i64 %cont8086182 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097934 = getelementptr inbounds i64, i64* %cloptr8097933, i64 0             ; &cloptr8097933[0]
  %f8097936 = load i64, i64* %i0ptr8097934, align 8                                  ; load; *i0ptr8097934
  %fptr8097935 = inttoptr i64 %f8097936 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097935(i64 %cont8086182, i64 %rva8090844)          ; tail call
  ret void
}


define void @lam8091066(i64 %env8091067, i64 %rvp8090892) {
  %cont8086185 = call i64 @prim_car(i64 %rvp8090892)                                 ; call prim_car
  %rvp8090891 = call i64 @prim_cdr(i64 %rvp8090892)                                  ; call prim_cdr
  %Ncq$_37take = call i64 @prim_car(i64 %rvp8090891)                                 ; call prim_car
  %na8090865 = call i64 @prim_cdr(i64 %rvp8090891)                                   ; call prim_cdr
  %arg8088510 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8097937 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8097939 = getelementptr inbounds i64, i64* %cloptr8097937, i64 1              ; &eptr8097939[1]
  store i64 %Ncq$_37take, i64* %eptr8097939                                          ; *eptr8097939 = %Ncq$_37take
  %eptr8097938 = getelementptr inbounds i64, i64* %cloptr8097937, i64 0              ; &cloptr8097937[0]
  %f8097940 = ptrtoint void(i64,i64)* @lam8091063 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097940, i64* %eptr8097938                                             ; store fptr
  %arg8088509 = ptrtoint i64* %cloptr8097937 to i64                                  ; closure cast; i64* -> i64
  %rva8090890 = add i64 0, 0                                                         ; quoted ()
  %rva8090889 = call i64 @prim_cons(i64 %arg8088509, i64 %rva8090890)                ; call prim_cons
  %rva8090888 = call i64 @prim_cons(i64 %arg8088510, i64 %rva8090889)                ; call prim_cons
  %cloptr8097941 = inttoptr i64 %cont8086185 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097942 = getelementptr inbounds i64, i64* %cloptr8097941, i64 0             ; &cloptr8097941[0]
  %f8097944 = load i64, i64* %i0ptr8097942, align 8                                  ; load; *i0ptr8097942
  %fptr8097943 = inttoptr i64 %f8097944 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097943(i64 %cont8086185, i64 %rva8090888)          ; tail call
  ret void
}


define void @lam8091063(i64 %env8091064, i64 %rvp8090887) {
  %envptr8097945 = inttoptr i64 %env8091064 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097946 = getelementptr inbounds i64, i64* %envptr8097945, i64 1            ; &envptr8097945[1]
  %Ncq$_37take = load i64, i64* %envptr8097946, align 8                              ; load; *envptr8097946
  %cont8086186 = call i64 @prim_car(i64 %rvp8090887)                                 ; call prim_car
  %rvp8090886 = call i64 @prim_cdr(i64 %rvp8090887)                                  ; call prim_cdr
  %i30$lst = call i64 @prim_car(i64 %rvp8090886)                                     ; call prim_car
  %rvp8090885 = call i64 @prim_cdr(i64 %rvp8090886)                                  ; call prim_cdr
  %N6C$n = call i64 @prim_car(i64 %rvp8090885)                                       ; call prim_car
  %na8090867 = call i64 @prim_cdr(i64 %rvp8090885)                                   ; call prim_cdr
  %arg8088512 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8085724 = call i64 @prim__61(i64 %N6C$n, i64 %arg8088512)                        ; call prim__61
  %cmp8097947 = icmp eq i64 %a8085724, 15                                            ; false?
  br i1 %cmp8097947, label %else8097949, label %then8097948                          ; if

then8097948:
  %arg8088515 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8088514 = add i64 0, 0                                                         ; quoted ()
  %rva8090870 = add i64 0, 0                                                         ; quoted ()
  %rva8090869 = call i64 @prim_cons(i64 %arg8088514, i64 %rva8090870)                ; call prim_cons
  %rva8090868 = call i64 @prim_cons(i64 %arg8088515, i64 %rva8090869)                ; call prim_cons
  %cloptr8097950 = inttoptr i64 %cont8086186 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097951 = getelementptr inbounds i64, i64* %cloptr8097950, i64 0             ; &cloptr8097950[0]
  %f8097953 = load i64, i64* %i0ptr8097951, align 8                                  ; load; *i0ptr8097951
  %fptr8097952 = inttoptr i64 %f8097953 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097952(i64 %cont8086186, i64 %rva8090868)          ; tail call
  ret void

else8097949:
  %a8085725 = call i64 @prim_null_63(i64 %i30$lst)                                   ; call prim_null_63
  %cmp8097954 = icmp eq i64 %a8085725, 15                                            ; false?
  br i1 %cmp8097954, label %else8097956, label %then8097955                          ; if

then8097955:
  %arg8088519 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8088518 = add i64 0, 0                                                         ; quoted ()
  %rva8090873 = add i64 0, 0                                                         ; quoted ()
  %rva8090872 = call i64 @prim_cons(i64 %arg8088518, i64 %rva8090873)                ; call prim_cons
  %rva8090871 = call i64 @prim_cons(i64 %arg8088519, i64 %rva8090872)                ; call prim_cons
  %cloptr8097957 = inttoptr i64 %cont8086186 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097958 = getelementptr inbounds i64, i64* %cloptr8097957, i64 0             ; &cloptr8097957[0]
  %f8097960 = load i64, i64* %i0ptr8097958, align 8                                  ; load; *i0ptr8097958
  %fptr8097959 = inttoptr i64 %f8097960 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097959(i64 %cont8086186, i64 %rva8090871)          ; tail call
  ret void

else8097956:
  %a8085726 = call i64 @prim_car(i64 %i30$lst)                                       ; call prim_car
  %a8085727 = call i64 @prim_cdr(i64 %i30$lst)                                       ; call prim_cdr
  %arg8088523 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a8085728 = call i64 @prim__45(i64 %N6C$n, i64 %arg8088523)                        ; call prim__45
  %cloptr8097961 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8097963 = getelementptr inbounds i64, i64* %cloptr8097961, i64 1              ; &eptr8097963[1]
  %eptr8097964 = getelementptr inbounds i64, i64* %cloptr8097961, i64 2              ; &eptr8097964[2]
  store i64 %a8085726, i64* %eptr8097963                                             ; *eptr8097963 = %a8085726
  store i64 %cont8086186, i64* %eptr8097964                                          ; *eptr8097964 = %cont8086186
  %eptr8097962 = getelementptr inbounds i64, i64* %cloptr8097961, i64 0              ; &cloptr8097961[0]
  %f8097965 = ptrtoint void(i64,i64)* @lam8091059 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097965, i64* %eptr8097962                                             ; store fptr
  %arg8088527 = ptrtoint i64* %cloptr8097961 to i64                                  ; closure cast; i64* -> i64
  %rva8090884 = add i64 0, 0                                                         ; quoted ()
  %rva8090883 = call i64 @prim_cons(i64 %a8085728, i64 %rva8090884)                  ; call prim_cons
  %rva8090882 = call i64 @prim_cons(i64 %a8085727, i64 %rva8090883)                  ; call prim_cons
  %rva8090881 = call i64 @prim_cons(i64 %arg8088527, i64 %rva8090882)                ; call prim_cons
  %cloptr8097966 = inttoptr i64 %Ncq$_37take to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097967 = getelementptr inbounds i64, i64* %cloptr8097966, i64 0             ; &cloptr8097966[0]
  %f8097969 = load i64, i64* %i0ptr8097967, align 8                                  ; load; *i0ptr8097967
  %fptr8097968 = inttoptr i64 %f8097969 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097968(i64 %Ncq$_37take, i64 %rva8090881)          ; tail call
  ret void
}


define void @lam8091059(i64 %env8091060, i64 %rvp8090880) {
  %envptr8097970 = inttoptr i64 %env8091060 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097971 = getelementptr inbounds i64, i64* %envptr8097970, i64 2            ; &envptr8097970[2]
  %cont8086186 = load i64, i64* %envptr8097971, align 8                              ; load; *envptr8097971
  %envptr8097972 = inttoptr i64 %env8091060 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097973 = getelementptr inbounds i64, i64* %envptr8097972, i64 1            ; &envptr8097972[1]
  %a8085726 = load i64, i64* %envptr8097973, align 8                                 ; load; *envptr8097973
  %_958086187 = call i64 @prim_car(i64 %rvp8090880)                                  ; call prim_car
  %rvp8090879 = call i64 @prim_cdr(i64 %rvp8090880)                                  ; call prim_cdr
  %a8085729 = call i64 @prim_car(i64 %rvp8090879)                                    ; call prim_car
  %na8090875 = call i64 @prim_cdr(i64 %rvp8090879)                                   ; call prim_cdr
  %retprim8086188 = call i64 @prim_cons(i64 %a8085726, i64 %a8085729)                ; call prim_cons
  %arg8088532 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090878 = add i64 0, 0                                                         ; quoted ()
  %rva8090877 = call i64 @prim_cons(i64 %retprim8086188, i64 %rva8090878)            ; call prim_cons
  %rva8090876 = call i64 @prim_cons(i64 %arg8088532, i64 %rva8090877)                ; call prim_cons
  %cloptr8097974 = inttoptr i64 %cont8086186 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097975 = getelementptr inbounds i64, i64* %cloptr8097974, i64 0             ; &cloptr8097974[0]
  %f8097977 = load i64, i64* %i0ptr8097975, align 8                                  ; load; *i0ptr8097975
  %fptr8097976 = inttoptr i64 %f8097977 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097976(i64 %cont8086186, i64 %rva8090876)          ; tail call
  ret void
}


define void @lam8091046(i64 %env8091047, i64 %rvp8090930) {
  %cont8086189 = call i64 @prim_car(i64 %rvp8090930)                                 ; call prim_car
  %rvp8090929 = call i64 @prim_cdr(i64 %rvp8090930)                                  ; call prim_cdr
  %DsR$_37map = call i64 @prim_car(i64 %rvp8090929)                                  ; call prim_car
  %na8090899 = call i64 @prim_cdr(i64 %rvp8090929)                                   ; call prim_cdr
  %arg8088535 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8097978 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8097980 = getelementptr inbounds i64, i64* %cloptr8097978, i64 1              ; &eptr8097980[1]
  store i64 %DsR$_37map, i64* %eptr8097980                                           ; *eptr8097980 = %DsR$_37map
  %eptr8097979 = getelementptr inbounds i64, i64* %cloptr8097978, i64 0              ; &cloptr8097978[0]
  %f8097981 = ptrtoint void(i64,i64)* @lam8091043 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8097981, i64* %eptr8097979                                             ; store fptr
  %arg8088534 = ptrtoint i64* %cloptr8097978 to i64                                  ; closure cast; i64* -> i64
  %rva8090928 = add i64 0, 0                                                         ; quoted ()
  %rva8090927 = call i64 @prim_cons(i64 %arg8088534, i64 %rva8090928)                ; call prim_cons
  %rva8090926 = call i64 @prim_cons(i64 %arg8088535, i64 %rva8090927)                ; call prim_cons
  %cloptr8097982 = inttoptr i64 %cont8086189 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097983 = getelementptr inbounds i64, i64* %cloptr8097982, i64 0             ; &cloptr8097982[0]
  %f8097985 = load i64, i64* %i0ptr8097983, align 8                                  ; load; *i0ptr8097983
  %fptr8097984 = inttoptr i64 %f8097985 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097984(i64 %cont8086189, i64 %rva8090926)          ; tail call
  ret void
}


define void @lam8091043(i64 %env8091044, i64 %rvp8090925) {
  %envptr8097986 = inttoptr i64 %env8091044 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8097987 = getelementptr inbounds i64, i64* %envptr8097986, i64 1            ; &envptr8097986[1]
  %DsR$_37map = load i64, i64* %envptr8097987, align 8                               ; load; *envptr8097987
  %cont8086190 = call i64 @prim_car(i64 %rvp8090925)                                 ; call prim_car
  %rvp8090924 = call i64 @prim_cdr(i64 %rvp8090925)                                  ; call prim_cdr
  %U3c$f = call i64 @prim_car(i64 %rvp8090924)                                       ; call prim_car
  %rvp8090923 = call i64 @prim_cdr(i64 %rvp8090924)                                  ; call prim_cdr
  %bPR$lst = call i64 @prim_car(i64 %rvp8090923)                                     ; call prim_car
  %na8090901 = call i64 @prim_cdr(i64 %rvp8090923)                                   ; call prim_cdr
  %a8085719 = call i64 @prim_null_63(i64 %bPR$lst)                                   ; call prim_null_63
  %cmp8097988 = icmp eq i64 %a8085719, 15                                            ; false?
  br i1 %cmp8097988, label %else8097990, label %then8097989                          ; if

then8097989:
  %arg8088539 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8088538 = add i64 0, 0                                                         ; quoted ()
  %rva8090904 = add i64 0, 0                                                         ; quoted ()
  %rva8090903 = call i64 @prim_cons(i64 %arg8088538, i64 %rva8090904)                ; call prim_cons
  %rva8090902 = call i64 @prim_cons(i64 %arg8088539, i64 %rva8090903)                ; call prim_cons
  %cloptr8097991 = inttoptr i64 %cont8086190 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8097992 = getelementptr inbounds i64, i64* %cloptr8097991, i64 0             ; &cloptr8097991[0]
  %f8097994 = load i64, i64* %i0ptr8097992, align 8                                  ; load; *i0ptr8097992
  %fptr8097993 = inttoptr i64 %f8097994 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8097993(i64 %cont8086190, i64 %rva8090902)          ; tail call
  ret void

else8097990:
  %a8085720 = call i64 @prim_car(i64 %bPR$lst)                                       ; call prim_car
  %cloptr8097995 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8097997 = getelementptr inbounds i64, i64* %cloptr8097995, i64 1              ; &eptr8097997[1]
  %eptr8097998 = getelementptr inbounds i64, i64* %cloptr8097995, i64 2              ; &eptr8097998[2]
  %eptr8097999 = getelementptr inbounds i64, i64* %cloptr8097995, i64 3              ; &eptr8097999[3]
  %eptr8098000 = getelementptr inbounds i64, i64* %cloptr8097995, i64 4              ; &eptr8098000[4]
  store i64 %cont8086190, i64* %eptr8097997                                          ; *eptr8097997 = %cont8086190
  store i64 %DsR$_37map, i64* %eptr8097998                                           ; *eptr8097998 = %DsR$_37map
  store i64 %bPR$lst, i64* %eptr8097999                                              ; *eptr8097999 = %bPR$lst
  store i64 %U3c$f, i64* %eptr8098000                                                ; *eptr8098000 = %U3c$f
  %eptr8097996 = getelementptr inbounds i64, i64* %cloptr8097995, i64 0              ; &cloptr8097995[0]
  %f8098001 = ptrtoint void(i64,i64)* @lam8091041 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8098001, i64* %eptr8097996                                             ; store fptr
  %arg8088543 = ptrtoint i64* %cloptr8097995 to i64                                  ; closure cast; i64* -> i64
  %rva8090922 = add i64 0, 0                                                         ; quoted ()
  %rva8090921 = call i64 @prim_cons(i64 %a8085720, i64 %rva8090922)                  ; call prim_cons
  %rva8090920 = call i64 @prim_cons(i64 %arg8088543, i64 %rva8090921)                ; call prim_cons
  %cloptr8098002 = inttoptr i64 %U3c$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8098003 = getelementptr inbounds i64, i64* %cloptr8098002, i64 0             ; &cloptr8098002[0]
  %f8098005 = load i64, i64* %i0ptr8098003, align 8                                  ; load; *i0ptr8098003
  %fptr8098004 = inttoptr i64 %f8098005 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098004(i64 %U3c$f, i64 %rva8090920)                ; tail call
  ret void
}


define void @lam8091041(i64 %env8091042, i64 %rvp8090919) {
  %envptr8098006 = inttoptr i64 %env8091042 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098007 = getelementptr inbounds i64, i64* %envptr8098006, i64 4            ; &envptr8098006[4]
  %U3c$f = load i64, i64* %envptr8098007, align 8                                    ; load; *envptr8098007
  %envptr8098008 = inttoptr i64 %env8091042 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098009 = getelementptr inbounds i64, i64* %envptr8098008, i64 3            ; &envptr8098008[3]
  %bPR$lst = load i64, i64* %envptr8098009, align 8                                  ; load; *envptr8098009
  %envptr8098010 = inttoptr i64 %env8091042 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098011 = getelementptr inbounds i64, i64* %envptr8098010, i64 2            ; &envptr8098010[2]
  %DsR$_37map = load i64, i64* %envptr8098011, align 8                               ; load; *envptr8098011
  %envptr8098012 = inttoptr i64 %env8091042 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098013 = getelementptr inbounds i64, i64* %envptr8098012, i64 1            ; &envptr8098012[1]
  %cont8086190 = load i64, i64* %envptr8098013, align 8                              ; load; *envptr8098013
  %_958086191 = call i64 @prim_car(i64 %rvp8090919)                                  ; call prim_car
  %rvp8090918 = call i64 @prim_cdr(i64 %rvp8090919)                                  ; call prim_cdr
  %a8085721 = call i64 @prim_car(i64 %rvp8090918)                                    ; call prim_car
  %na8090906 = call i64 @prim_cdr(i64 %rvp8090918)                                   ; call prim_cdr
  %a8085722 = call i64 @prim_cdr(i64 %bPR$lst)                                       ; call prim_cdr
  %cloptr8098014 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8098016 = getelementptr inbounds i64, i64* %cloptr8098014, i64 1              ; &eptr8098016[1]
  %eptr8098017 = getelementptr inbounds i64, i64* %cloptr8098014, i64 2              ; &eptr8098017[2]
  store i64 %cont8086190, i64* %eptr8098016                                          ; *eptr8098016 = %cont8086190
  store i64 %a8085721, i64* %eptr8098017                                             ; *eptr8098017 = %a8085721
  %eptr8098015 = getelementptr inbounds i64, i64* %cloptr8098014, i64 0              ; &cloptr8098014[0]
  %f8098018 = ptrtoint void(i64,i64)* @lam8091039 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8098018, i64* %eptr8098015                                             ; store fptr
  %arg8088548 = ptrtoint i64* %cloptr8098014 to i64                                  ; closure cast; i64* -> i64
  %rva8090917 = add i64 0, 0                                                         ; quoted ()
  %rva8090916 = call i64 @prim_cons(i64 %a8085722, i64 %rva8090917)                  ; call prim_cons
  %rva8090915 = call i64 @prim_cons(i64 %U3c$f, i64 %rva8090916)                     ; call prim_cons
  %rva8090914 = call i64 @prim_cons(i64 %arg8088548, i64 %rva8090915)                ; call prim_cons
  %cloptr8098019 = inttoptr i64 %DsR$_37map to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8098020 = getelementptr inbounds i64, i64* %cloptr8098019, i64 0             ; &cloptr8098019[0]
  %f8098022 = load i64, i64* %i0ptr8098020, align 8                                  ; load; *i0ptr8098020
  %fptr8098021 = inttoptr i64 %f8098022 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098021(i64 %DsR$_37map, i64 %rva8090914)           ; tail call
  ret void
}


define void @lam8091039(i64 %env8091040, i64 %rvp8090913) {
  %envptr8098023 = inttoptr i64 %env8091040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098024 = getelementptr inbounds i64, i64* %envptr8098023, i64 2            ; &envptr8098023[2]
  %a8085721 = load i64, i64* %envptr8098024, align 8                                 ; load; *envptr8098024
  %envptr8098025 = inttoptr i64 %env8091040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098026 = getelementptr inbounds i64, i64* %envptr8098025, i64 1            ; &envptr8098025[1]
  %cont8086190 = load i64, i64* %envptr8098026, align 8                              ; load; *envptr8098026
  %_958086192 = call i64 @prim_car(i64 %rvp8090913)                                  ; call prim_car
  %rvp8090912 = call i64 @prim_cdr(i64 %rvp8090913)                                  ; call prim_cdr
  %a8085723 = call i64 @prim_car(i64 %rvp8090912)                                    ; call prim_car
  %na8090908 = call i64 @prim_cdr(i64 %rvp8090912)                                   ; call prim_cdr
  %retprim8086193 = call i64 @prim_cons(i64 %a8085721, i64 %a8085723)                ; call prim_cons
  %arg8088553 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090911 = add i64 0, 0                                                         ; quoted ()
  %rva8090910 = call i64 @prim_cons(i64 %retprim8086193, i64 %rva8090911)            ; call prim_cons
  %rva8090909 = call i64 @prim_cons(i64 %arg8088553, i64 %rva8090910)                ; call prim_cons
  %cloptr8098027 = inttoptr i64 %cont8086190 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8098028 = getelementptr inbounds i64, i64* %cloptr8098027, i64 0             ; &cloptr8098027[0]
  %f8098030 = load i64, i64* %i0ptr8098028, align 8                                  ; load; *i0ptr8098028
  %fptr8098029 = inttoptr i64 %f8098030 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098029(i64 %cont8086190, i64 %rva8090909)          ; tail call
  ret void
}


define void @lam8091028(i64 %env8091029, i64 %rvp8090964) {
  %cont8086194 = call i64 @prim_car(i64 %rvp8090964)                                 ; call prim_car
  %rvp8090963 = call i64 @prim_cdr(i64 %rvp8090964)                                  ; call prim_cdr
  %CyT$_37foldr1 = call i64 @prim_car(i64 %rvp8090963)                               ; call prim_car
  %na8090937 = call i64 @prim_cdr(i64 %rvp8090963)                                   ; call prim_cdr
  %arg8088556 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8098031 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8098033 = getelementptr inbounds i64, i64* %cloptr8098031, i64 1              ; &eptr8098033[1]
  store i64 %CyT$_37foldr1, i64* %eptr8098033                                        ; *eptr8098033 = %CyT$_37foldr1
  %eptr8098032 = getelementptr inbounds i64, i64* %cloptr8098031, i64 0              ; &cloptr8098031[0]
  %f8098034 = ptrtoint void(i64,i64)* @lam8091025 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8098034, i64* %eptr8098032                                             ; store fptr
  %arg8088555 = ptrtoint i64* %cloptr8098031 to i64                                  ; closure cast; i64* -> i64
  %rva8090962 = add i64 0, 0                                                         ; quoted ()
  %rva8090961 = call i64 @prim_cons(i64 %arg8088555, i64 %rva8090962)                ; call prim_cons
  %rva8090960 = call i64 @prim_cons(i64 %arg8088556, i64 %rva8090961)                ; call prim_cons
  %cloptr8098035 = inttoptr i64 %cont8086194 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8098036 = getelementptr inbounds i64, i64* %cloptr8098035, i64 0             ; &cloptr8098035[0]
  %f8098038 = load i64, i64* %i0ptr8098036, align 8                                  ; load; *i0ptr8098036
  %fptr8098037 = inttoptr i64 %f8098038 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098037(i64 %cont8086194, i64 %rva8090960)          ; tail call
  ret void
}


define void @lam8091025(i64 %env8091026, i64 %rvp8090959) {
  %envptr8098039 = inttoptr i64 %env8091026 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098040 = getelementptr inbounds i64, i64* %envptr8098039, i64 1            ; &envptr8098039[1]
  %CyT$_37foldr1 = load i64, i64* %envptr8098040, align 8                            ; load; *envptr8098040
  %cont8086195 = call i64 @prim_car(i64 %rvp8090959)                                 ; call prim_car
  %rvp8090958 = call i64 @prim_cdr(i64 %rvp8090959)                                  ; call prim_cdr
  %bLm$f = call i64 @prim_car(i64 %rvp8090958)                                       ; call prim_car
  %rvp8090957 = call i64 @prim_cdr(i64 %rvp8090958)                                  ; call prim_cdr
  %GGS$acc = call i64 @prim_car(i64 %rvp8090957)                                     ; call prim_car
  %rvp8090956 = call i64 @prim_cdr(i64 %rvp8090957)                                  ; call prim_cdr
  %JL1$lst = call i64 @prim_car(i64 %rvp8090956)                                     ; call prim_car
  %na8090939 = call i64 @prim_cdr(i64 %rvp8090956)                                   ; call prim_cdr
  %a8085715 = call i64 @prim_null_63(i64 %JL1$lst)                                   ; call prim_null_63
  %cmp8098041 = icmp eq i64 %a8085715, 15                                            ; false?
  br i1 %cmp8098041, label %else8098043, label %then8098042                          ; if

then8098042:
  %arg8088560 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8090942 = add i64 0, 0                                                         ; quoted ()
  %rva8090941 = call i64 @prim_cons(i64 %GGS$acc, i64 %rva8090942)                   ; call prim_cons
  %rva8090940 = call i64 @prim_cons(i64 %arg8088560, i64 %rva8090941)                ; call prim_cons
  %cloptr8098044 = inttoptr i64 %cont8086195 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8098045 = getelementptr inbounds i64, i64* %cloptr8098044, i64 0             ; &cloptr8098044[0]
  %f8098047 = load i64, i64* %i0ptr8098045, align 8                                  ; load; *i0ptr8098045
  %fptr8098046 = inttoptr i64 %f8098047 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098046(i64 %cont8086195, i64 %rva8090940)          ; tail call
  ret void

else8098043:
  %a8085716 = call i64 @prim_car(i64 %JL1$lst)                                       ; call prim_car
  %a8085717 = call i64 @prim_cdr(i64 %JL1$lst)                                       ; call prim_cdr
  %cloptr8098048 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8098050 = getelementptr inbounds i64, i64* %cloptr8098048, i64 1              ; &eptr8098050[1]
  %eptr8098051 = getelementptr inbounds i64, i64* %cloptr8098048, i64 2              ; &eptr8098051[2]
  %eptr8098052 = getelementptr inbounds i64, i64* %cloptr8098048, i64 3              ; &eptr8098052[3]
  store i64 %bLm$f, i64* %eptr8098050                                                ; *eptr8098050 = %bLm$f
  store i64 %cont8086195, i64* %eptr8098051                                          ; *eptr8098051 = %cont8086195
  store i64 %a8085716, i64* %eptr8098052                                             ; *eptr8098052 = %a8085716
  %eptr8098049 = getelementptr inbounds i64, i64* %cloptr8098048, i64 0              ; &cloptr8098048[0]
  %f8098053 = ptrtoint void(i64,i64)* @lam8091023 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8098053, i64* %eptr8098049                                             ; store fptr
  %arg8088567 = ptrtoint i64* %cloptr8098048 to i64                                  ; closure cast; i64* -> i64
  %rva8090955 = add i64 0, 0                                                         ; quoted ()
  %rva8090954 = call i64 @prim_cons(i64 %a8085717, i64 %rva8090955)                  ; call prim_cons
  %rva8090953 = call i64 @prim_cons(i64 %GGS$acc, i64 %rva8090954)                   ; call prim_cons
  %rva8090952 = call i64 @prim_cons(i64 %bLm$f, i64 %rva8090953)                     ; call prim_cons
  %rva8090951 = call i64 @prim_cons(i64 %arg8088567, i64 %rva8090952)                ; call prim_cons
  %cloptr8098054 = inttoptr i64 %CyT$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8098055 = getelementptr inbounds i64, i64* %cloptr8098054, i64 0             ; &cloptr8098054[0]
  %f8098057 = load i64, i64* %i0ptr8098055, align 8                                  ; load; *i0ptr8098055
  %fptr8098056 = inttoptr i64 %f8098057 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098056(i64 %CyT$_37foldr1, i64 %rva8090951)        ; tail call
  ret void
}


define void @lam8091023(i64 %env8091024, i64 %rvp8090950) {
  %envptr8098058 = inttoptr i64 %env8091024 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098059 = getelementptr inbounds i64, i64* %envptr8098058, i64 3            ; &envptr8098058[3]
  %a8085716 = load i64, i64* %envptr8098059, align 8                                 ; load; *envptr8098059
  %envptr8098060 = inttoptr i64 %env8091024 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098061 = getelementptr inbounds i64, i64* %envptr8098060, i64 2            ; &envptr8098060[2]
  %cont8086195 = load i64, i64* %envptr8098061, align 8                              ; load; *envptr8098061
  %envptr8098062 = inttoptr i64 %env8091024 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098063 = getelementptr inbounds i64, i64* %envptr8098062, i64 1            ; &envptr8098062[1]
  %bLm$f = load i64, i64* %envptr8098063, align 8                                    ; load; *envptr8098063
  %_958086196 = call i64 @prim_car(i64 %rvp8090950)                                  ; call prim_car
  %rvp8090949 = call i64 @prim_cdr(i64 %rvp8090950)                                  ; call prim_cdr
  %a8085718 = call i64 @prim_car(i64 %rvp8090949)                                    ; call prim_car
  %na8090944 = call i64 @prim_cdr(i64 %rvp8090949)                                   ; call prim_cdr
  %rva8090948 = add i64 0, 0                                                         ; quoted ()
  %rva8090947 = call i64 @prim_cons(i64 %a8085718, i64 %rva8090948)                  ; call prim_cons
  %rva8090946 = call i64 @prim_cons(i64 %a8085716, i64 %rva8090947)                  ; call prim_cons
  %rva8090945 = call i64 @prim_cons(i64 %cont8086195, i64 %rva8090946)               ; call prim_cons
  %cloptr8098064 = inttoptr i64 %bLm$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8098065 = getelementptr inbounds i64, i64* %cloptr8098064, i64 0             ; &cloptr8098064[0]
  %f8098067 = load i64, i64* %i0ptr8098065, align 8                                  ; load; *i0ptr8098065
  %fptr8098066 = inttoptr i64 %f8098067 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098066(i64 %bLm$f, i64 %rva8090945)                ; tail call
  ret void
}


define void @lam8091015(i64 %env8091016, i64 %rvp8090997) {
  %cont8086198 = call i64 @prim_car(i64 %rvp8090997)                                 ; call prim_car
  %rvp8090996 = call i64 @prim_cdr(i64 %rvp8090997)                                  ; call prim_cdr
  %yGn$y = call i64 @prim_car(i64 %rvp8090996)                                       ; call prim_car
  %na8090971 = call i64 @prim_cdr(i64 %rvp8090996)                                   ; call prim_cdr
  %arg8088574 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8098068 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8098070 = getelementptr inbounds i64, i64* %cloptr8098068, i64 1              ; &eptr8098070[1]
  store i64 %yGn$y, i64* %eptr8098070                                                ; *eptr8098070 = %yGn$y
  %eptr8098069 = getelementptr inbounds i64, i64* %cloptr8098068, i64 0              ; &cloptr8098068[0]
  %f8098071 = ptrtoint void(i64,i64)* @lam8091012 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8098071, i64* %eptr8098069                                             ; store fptr
  %arg8088573 = ptrtoint i64* %cloptr8098068 to i64                                  ; closure cast; i64* -> i64
  %rva8090995 = add i64 0, 0                                                         ; quoted ()
  %rva8090994 = call i64 @prim_cons(i64 %arg8088573, i64 %rva8090995)                ; call prim_cons
  %rva8090993 = call i64 @prim_cons(i64 %arg8088574, i64 %rva8090994)                ; call prim_cons
  %cloptr8098072 = inttoptr i64 %cont8086198 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8098073 = getelementptr inbounds i64, i64* %cloptr8098072, i64 0             ; &cloptr8098072[0]
  %f8098075 = load i64, i64* %i0ptr8098073, align 8                                  ; load; *i0ptr8098073
  %fptr8098074 = inttoptr i64 %f8098075 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098074(i64 %cont8086198, i64 %rva8090993)          ; tail call
  ret void
}


define void @lam8091012(i64 %env8091013, i64 %rvp8090992) {
  %envptr8098076 = inttoptr i64 %env8091013 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098077 = getelementptr inbounds i64, i64* %envptr8098076, i64 1            ; &envptr8098076[1]
  %yGn$y = load i64, i64* %envptr8098077, align 8                                    ; load; *envptr8098077
  %cont8086199 = call i64 @prim_car(i64 %rvp8090992)                                 ; call prim_car
  %rvp8090991 = call i64 @prim_cdr(i64 %rvp8090992)                                  ; call prim_cdr
  %QwP$f = call i64 @prim_car(i64 %rvp8090991)                                       ; call prim_car
  %na8090973 = call i64 @prim_cdr(i64 %rvp8090991)                                   ; call prim_cdr
  %cloptr8098078 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8098080 = getelementptr inbounds i64, i64* %cloptr8098078, i64 1              ; &eptr8098080[1]
  %eptr8098081 = getelementptr inbounds i64, i64* %cloptr8098078, i64 2              ; &eptr8098081[2]
  store i64 %QwP$f, i64* %eptr8098080                                                ; *eptr8098080 = %QwP$f
  store i64 %yGn$y, i64* %eptr8098081                                                ; *eptr8098081 = %yGn$y
  %eptr8098079 = getelementptr inbounds i64, i64* %cloptr8098078, i64 0              ; &cloptr8098078[0]
  %f8098082 = ptrtoint void(i64,i64)* @lam8091010 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8098082, i64* %eptr8098079                                             ; store fptr
  %arg8088576 = ptrtoint i64* %cloptr8098078 to i64                                  ; closure cast; i64* -> i64
  %rva8090990 = add i64 0, 0                                                         ; quoted ()
  %rva8090989 = call i64 @prim_cons(i64 %arg8088576, i64 %rva8090990)                ; call prim_cons
  %rva8090988 = call i64 @prim_cons(i64 %cont8086199, i64 %rva8090989)               ; call prim_cons
  %cloptr8098083 = inttoptr i64 %QwP$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8098084 = getelementptr inbounds i64, i64* %cloptr8098083, i64 0             ; &cloptr8098083[0]
  %f8098086 = load i64, i64* %i0ptr8098084, align 8                                  ; load; *i0ptr8098084
  %fptr8098085 = inttoptr i64 %f8098086 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098085(i64 %QwP$f, i64 %rva8090988)                ; tail call
  ret void
}


define void @lam8091010(i64 %env8091011, i64 %NFU$args8086201) {
  %envptr8098087 = inttoptr i64 %env8091011 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098088 = getelementptr inbounds i64, i64* %envptr8098087, i64 2            ; &envptr8098087[2]
  %yGn$y = load i64, i64* %envptr8098088, align 8                                    ; load; *envptr8098088
  %envptr8098089 = inttoptr i64 %env8091011 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098090 = getelementptr inbounds i64, i64* %envptr8098089, i64 1            ; &envptr8098089[1]
  %QwP$f = load i64, i64* %envptr8098090, align 8                                    ; load; *envptr8098090
  %cont8086200 = call i64 @prim_car(i64 %NFU$args8086201)                            ; call prim_car
  %NFU$args = call i64 @prim_cdr(i64 %NFU$args8086201)                               ; call prim_cdr
  %cloptr8098091 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8098093 = getelementptr inbounds i64, i64* %cloptr8098091, i64 1              ; &eptr8098093[1]
  %eptr8098094 = getelementptr inbounds i64, i64* %cloptr8098091, i64 2              ; &eptr8098094[2]
  %eptr8098095 = getelementptr inbounds i64, i64* %cloptr8098091, i64 3              ; &eptr8098095[3]
  store i64 %cont8086200, i64* %eptr8098093                                          ; *eptr8098093 = %cont8086200
  store i64 %NFU$args, i64* %eptr8098094                                             ; *eptr8098094 = %NFU$args
  store i64 %QwP$f, i64* %eptr8098095                                                ; *eptr8098095 = %QwP$f
  %eptr8098092 = getelementptr inbounds i64, i64* %cloptr8098091, i64 0              ; &cloptr8098091[0]
  %f8098096 = ptrtoint void(i64,i64)* @lam8091008 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8098096, i64* %eptr8098092                                             ; store fptr
  %arg8088582 = ptrtoint i64* %cloptr8098091 to i64                                  ; closure cast; i64* -> i64
  %rva8090987 = add i64 0, 0                                                         ; quoted ()
  %rva8090986 = call i64 @prim_cons(i64 %yGn$y, i64 %rva8090987)                     ; call prim_cons
  %rva8090985 = call i64 @prim_cons(i64 %arg8088582, i64 %rva8090986)                ; call prim_cons
  %cloptr8098097 = inttoptr i64 %yGn$y to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8098098 = getelementptr inbounds i64, i64* %cloptr8098097, i64 0             ; &cloptr8098097[0]
  %f8098100 = load i64, i64* %i0ptr8098098, align 8                                  ; load; *i0ptr8098098
  %fptr8098099 = inttoptr i64 %f8098100 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098099(i64 %yGn$y, i64 %rva8090985)                ; tail call
  ret void
}


define void @lam8091008(i64 %env8091009, i64 %rvp8090984) {
  %envptr8098101 = inttoptr i64 %env8091009 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098102 = getelementptr inbounds i64, i64* %envptr8098101, i64 3            ; &envptr8098101[3]
  %QwP$f = load i64, i64* %envptr8098102, align 8                                    ; load; *envptr8098102
  %envptr8098103 = inttoptr i64 %env8091009 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098104 = getelementptr inbounds i64, i64* %envptr8098103, i64 2            ; &envptr8098103[2]
  %NFU$args = load i64, i64* %envptr8098104, align 8                                 ; load; *envptr8098104
  %envptr8098105 = inttoptr i64 %env8091009 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098106 = getelementptr inbounds i64, i64* %envptr8098105, i64 1            ; &envptr8098105[1]
  %cont8086200 = load i64, i64* %envptr8098106, align 8                              ; load; *envptr8098106
  %_958086202 = call i64 @prim_car(i64 %rvp8090984)                                  ; call prim_car
  %rvp8090983 = call i64 @prim_cdr(i64 %rvp8090984)                                  ; call prim_cdr
  %a8085713 = call i64 @prim_car(i64 %rvp8090983)                                    ; call prim_car
  %na8090975 = call i64 @prim_cdr(i64 %rvp8090983)                                   ; call prim_cdr
  %cloptr8098107 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8098109 = getelementptr inbounds i64, i64* %cloptr8098107, i64 1              ; &eptr8098109[1]
  %eptr8098110 = getelementptr inbounds i64, i64* %cloptr8098107, i64 2              ; &eptr8098110[2]
  store i64 %cont8086200, i64* %eptr8098109                                          ; *eptr8098109 = %cont8086200
  store i64 %NFU$args, i64* %eptr8098110                                             ; *eptr8098110 = %NFU$args
  %eptr8098108 = getelementptr inbounds i64, i64* %cloptr8098107, i64 0              ; &cloptr8098107[0]
  %f8098111 = ptrtoint void(i64,i64)* @lam8091006 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8098111, i64* %eptr8098108                                             ; store fptr
  %arg8088585 = ptrtoint i64* %cloptr8098107 to i64                                  ; closure cast; i64* -> i64
  %rva8090982 = add i64 0, 0                                                         ; quoted ()
  %rva8090981 = call i64 @prim_cons(i64 %QwP$f, i64 %rva8090982)                     ; call prim_cons
  %rva8090980 = call i64 @prim_cons(i64 %arg8088585, i64 %rva8090981)                ; call prim_cons
  %cloptr8098112 = inttoptr i64 %a8085713 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8098113 = getelementptr inbounds i64, i64* %cloptr8098112, i64 0             ; &cloptr8098112[0]
  %f8098115 = load i64, i64* %i0ptr8098113, align 8                                  ; load; *i0ptr8098113
  %fptr8098114 = inttoptr i64 %f8098115 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098114(i64 %a8085713, i64 %rva8090980)             ; tail call
  ret void
}


define void @lam8091006(i64 %env8091007, i64 %rvp8090979) {
  %envptr8098116 = inttoptr i64 %env8091007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098117 = getelementptr inbounds i64, i64* %envptr8098116, i64 2            ; &envptr8098116[2]
  %NFU$args = load i64, i64* %envptr8098117, align 8                                 ; load; *envptr8098117
  %envptr8098118 = inttoptr i64 %env8091007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8098119 = getelementptr inbounds i64, i64* %envptr8098118, i64 1            ; &envptr8098118[1]
  %cont8086200 = load i64, i64* %envptr8098119, align 8                              ; load; *envptr8098119
  %_958086203 = call i64 @prim_car(i64 %rvp8090979)                                  ; call prim_car
  %rvp8090978 = call i64 @prim_cdr(i64 %rvp8090979)                                  ; call prim_cdr
  %a8085714 = call i64 @prim_car(i64 %rvp8090978)                                    ; call prim_car
  %na8090977 = call i64 @prim_cdr(i64 %rvp8090978)                                   ; call prim_cdr
  %cps_45lst8086204 = call i64 @prim_cons(i64 %cont8086200, i64 %NFU$args)           ; call prim_cons
  %cloptr8098120 = inttoptr i64 %a8085714 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8098121 = getelementptr inbounds i64, i64* %cloptr8098120, i64 0             ; &cloptr8098120[0]
  %f8098123 = load i64, i64* %i0ptr8098121, align 8                                  ; load; *i0ptr8098121
  %fptr8098122 = inttoptr i64 %f8098123 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8098122(i64 %a8085714, i64 %cps_45lst8086204)       ; tail call
  ret void
}





@sym8093643 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8093664 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8093906 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8093992 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094046 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094070 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094088 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094159 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094186 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094220 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094270 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094367 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094394 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094428 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094478 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094580 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094634 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094658 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094676 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094747 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094774 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094808 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094858 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094955 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8094982 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095016 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095066 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095114 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095169 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095214 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095274 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095342 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095387 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095447 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095740 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095760 = private unnamed_addr constant [12 x i8] c"no-solution\00", align 8
@sym8095765 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095803 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095824 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095884 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095896 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095917 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095941 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095965 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8095983 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096006 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096084 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096165 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096199 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096229 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096269 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096310 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096363 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096403 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096444 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096501 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096531 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096571 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096612 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096665 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096705 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096746 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096798 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096832 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096862 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8096902 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096943 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8096996 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8097036 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8097077 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8097134 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8097164 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8097204 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8097245 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8097298 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8097338 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
@sym8097379 = private unnamed_addr constant [9 x i8] c"solution\00", align 8
