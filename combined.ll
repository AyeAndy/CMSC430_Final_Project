; ModuleID = 'header.cpp'
source_filename = "header.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

%class.hamt = type { [7 x %class.KV], i64 }
%class.KV = type { %"union.KV<c_d, c_d, 0>::Key", %"union.KV<c_d, c_d, 0>::Val" }
%"union.KV<c_d, c_d, 0>::Key" = type { i64 }
%"union.KV<c_d, c_d, 0>::Val" = type { %class.KV.0* }
%class.KV.0 = type { %"union.KV<c_d, c_d, 1>::Key", %"union.KV<c_d, c_d, 1>::Val" }
%"union.KV<c_d, c_d, 1>::Key" = type { i64 }
%"union.KV<c_d, c_d, 1>::Val" = type { %class.KV.2* }
%class.KV.2 = type { %"union.KV<c_d, c_d, 2>::Key", %"union.KV<c_d, c_d, 2>::Val" }
%"union.KV<c_d, c_d, 2>::Key" = type { i64 }
%"union.KV<c_d, c_d, 2>::Val" = type { %class.KV.3* }
%class.KV.3 = type { %"union.KV<c_d, c_d, 3>::Key", %"union.KV<c_d, c_d, 3>::Val" }
%"union.KV<c_d, c_d, 3>::Key" = type { i64 }
%"union.KV<c_d, c_d, 3>::Val" = type { %class.KV.4* }
%class.KV.4 = type { %"union.KV<c_d, c_d, 4>::Key", %"union.KV<c_d, c_d, 4>::Val" }
%"union.KV<c_d, c_d, 4>::Key" = type { i64 }
%"union.KV<c_d, c_d, 4>::Val" = type { %class.KV.5* }
%class.KV.5 = type { %"union.KV<c_d, c_d, 5>::Key", %"union.KV<c_d, c_d, 5>::Val" }
%"union.KV<c_d, c_d, 5>::Key" = type { i64 }
%"union.KV<c_d, c_d, 5>::Val" = type { %class.KV.6* }
%class.KV.6 = type { %"union.KV<c_d, c_d, 6>::Key", %"union.KV<c_d, c_d, 6>::Val" }
%"union.KV<c_d, c_d, 6>::Key" = type { i64 }
%"union.KV<c_d, c_d, 6>::Val" = type { %class.KV.7* }
%class.KV.7 = type { %"union.KV<c_d, c_d, 7>::Key", %"union.KV<c_d, c_d, 7>::Val" }
%"union.KV<c_d, c_d, 7>::Key" = type { i64 }
%"union.KV<c_d, c_d, 7>::Val" = type { %class.KV.8* }
%class.KV.8 = type { %"union.KV<c_d, c_d, 8>::Key", %"union.KV<c_d, c_d, 8>::Val" }
%"union.KV<c_d, c_d, 8>::Key" = type { i64 }
%"union.KV<c_d, c_d, 8>::Val" = type { %class.KV.9* }
%class.KV.9 = type { %"union.KV<c_d, c_d, 9>::Key", %"union.KV<c_d, c_d, 9>::Val" }
%"union.KV<c_d, c_d, 9>::Key" = type { i64 }
%"union.KV<c_d, c_d, 9>::Val" = type { %class.KV.10* }
%class.KV.10 = type { %"union.KV<c_d, c_d, 10>::Key", %"union.KV<c_d, c_d, 10>::Val" }
%"union.KV<c_d, c_d, 10>::Key" = type { i64 }
%"union.KV<c_d, c_d, 10>::Val" = type { %class.LL* }
%class.LL = type { %class.c_d*, %class.c_d*, %class.LL* }
%class.c_d = type { i64 }
%class.hamt.1 = type opaque

@current_memory = global i64 0, align 8
@.str = private unnamed_addr constant [25 x i8] c"library run-time error: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"Ran out of memory.\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%llu\0A\00", align 1
@.str.5 = private unnamed_addr constant [68 x i8] c"Expected value: null (in expect_args0). Prim cannot take arguments.\00", align 1
@.str.6 = private unnamed_addr constant [79 x i8] c"Expected cons value (in expect_args1). Prim applied on an empty argument list.\00", align 1
@.str.7 = private unnamed_addr constant [70 x i8] c"Expected null value (in expect_args1). Prim can only take 1 argument.\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"Expected a cons value. (expect_cons)\00", align 1
@.str.9 = private unnamed_addr constant [51 x i8] c"Expected a vector or special value. (expect_other)\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"#<procedure>\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c" . \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"\22%s\22\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"#(\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.19 = private unnamed_addr constant [37 x i8] c"(print.. v); unrecognized value %llu\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"'()\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"'(\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"'%s\00", align 1
@.str.23 = private unnamed_addr constant [35 x i8] c"(print v); unrecognized value %llu\00", align 1
@.str.24 = private unnamed_addr constant [49 x i8] c"first argument to make-vector must be an integer\00", align 1
@.str.25 = private unnamed_addr constant [39 x i8] c"prim applied on more than 2 arguments.\00", align 1
@.str.26 = private unnamed_addr constant [49 x i8] c"second argument to vector-ref must be an integer\00", align 1
@.str.27 = private unnamed_addr constant [46 x i8] c"first argument to vector-ref must be a vector\00", align 1
@.str.28 = private unnamed_addr constant [46 x i8] c"vector-ref not given a properly formed vector\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"index out of bounds exception\00", align 1
@.str.30 = private unnamed_addr constant [48 x i8] c"first argument to vector-ref must be an integer\00", align 1
@.str.31 = private unnamed_addr constant [34 x i8] c"(prim + a b); a is not an integer\00", align 1
@.str.32 = private unnamed_addr constant [34 x i8] c"(prim + a b); b is not an integer\00", align 1
@.str.33 = private unnamed_addr constant [36 x i8] c"Tried to apply + on non list value.\00", align 1
@.str.34 = private unnamed_addr constant [34 x i8] c"(prim - a b); b is not an integer\00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"(prim * a b); a is not an integer\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"(prim * a b); b is not an integer\00", align 1
@.str.37 = private unnamed_addr constant [34 x i8] c"(prim / a b); a is not an integer\00", align 1
@.str.38 = private unnamed_addr constant [34 x i8] c"(prim / a b); b is not an integer\00", align 1
@.str.39 = private unnamed_addr constant [34 x i8] c"(prim = a b); a is not an integer\00", align 1
@.str.40 = private unnamed_addr constant [34 x i8] c"(prim = a b); b is not an integer\00", align 1
@.str.41 = private unnamed_addr constant [34 x i8] c"(prim < a b); a is not an integer\00", align 1
@.str.42 = private unnamed_addr constant [34 x i8] c"(prim < a b); b is not an integer\00", align 1
@.str.43 = private unnamed_addr constant [35 x i8] c"(prim <= a b); a is not an integer\00", align 1
@.str.44 = private unnamed_addr constant [35 x i8] c"(prim <= a b); b is not an integer\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"key does not exist in hash\00", align 1

; Function Attrs: ssp uwtable
define void @fatal_err(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  %4 = load i8*, i8** %2, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %4)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable
                                                  ; No predecessors!
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

; Function Attrs: ssp uwtable
define i64* @alloc(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* @current_memory, align 8
  %4 = load i64, i64* %2, align 8
  %5 = add i64 %3, %4
  store i64 %5, i64* @current_memory, align 8
  %6 = load i64, i64* @current_memory, align 8
  %7 = icmp ugt i64 %6, 250000000
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %1
  %10 = load i64, i64* %2, align 8
  %11 = call i8* @malloc(i64 %10)
  %12 = bitcast i8* %11 to i64*
  ret i64* %12
}

declare i8* @malloc(i64) #1

; Function Attrs: ssp uwtable
define void @print_u64(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i64 %3)
  ret void
}

; Function Attrs: ssp uwtable
define i64 @expect_args0(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.5, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %5, %1
  ret i64 0
}

; Function Attrs: ssp uwtable
define i64 @expect_args1(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = and i64 %4, 7
  %6 = icmp ne i64 %5, 1
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.6, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %1
  %9 = load i64, i64* %2, align 8
  %10 = and i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64* %11, i64** %3, align 8
  %12 = load i64*, i64** %3, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7, i32 0, i32 0))
  br label %17

; <label>:17                                      ; preds = %16, %8
  %18 = load i64*, i64** %3, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: ssp uwtable
define i64 @expect_cons(i64, i64*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 1
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64* %13, i64** %5, align 8
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load i64*, i64** %4, align 8
  store i64 %16, i64* %17, align 8
  %18 = load i64*, i64** %5, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: ssp uwtable
define i64 @expect_other(i64, i64*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 6
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.9, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64* %13, i64** %5, align 8
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load i64*, i64** %4, align 8
  store i64 %16, i64* %17, align 8
  %18 = load i64*, i64** %5, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_int(i64) #3 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = zext i32 %4 to i64
  %6 = shl i64 %5, 32
  %7 = or i64 %6, 2
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_void() #3 {
  ret i64 39
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_null() #3 {
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_true() #3 {
  ret i64 31
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_false() #3 {
  ret i64 15
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_string(i8*) #3 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = or i64 %4, 3
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_symbol(i8*) #3 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = or i64 %4, 4
  ret i64 %5
}

; Function Attrs: ssp uwtable
define i64 @prim_print_aux(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %113

; <label>:11                                      ; preds = %1
  %12 = load i64, i64* %2, align 8
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %11
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0))
  br label %112

; <label>:17                                      ; preds = %11
  %18 = load i64, i64* %2, align 8
  %19 = and i64 %18, 7
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %21, label %36

; <label>:21                                      ; preds = %17
  %22 = load i64, i64* %2, align 8
  %23 = and i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64* %24, i64** %3, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  %26 = load i64*, i64** %3, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 0
  %28 = load i64, i64* %27, align 8
  %29 = call i64 @prim_print_aux(i64 %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  %31 = load i64*, i64** %3, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = call i64 @prim_print_aux(i64 %33)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %111

; <label>:36                                      ; preds = %17
  %37 = load i64, i64* %2, align 8
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 2
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %36
  %41 = load i64, i64* %2, align 8
  %42 = lshr i64 %41, 32
  %43 = trunc i64 %42 to i32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 %43)
  br label %110

; <label>:45                                      ; preds = %36
  %46 = load i64, i64* %2, align 8
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 3
  br i1 %48, label %49, label %54

; <label>:49                                      ; preds = %45
  %50 = load i64, i64* %2, align 8
  %51 = and i64 %50, -8
  %52 = inttoptr i64 %51 to i8*
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* %52)
  br label %109

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %2, align 8
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 4
  br i1 %57, label %58, label %63

; <label>:58                                      ; preds = %54
  %59 = load i64, i64* %2, align 8
  %60 = and i64 %59, -8
  %61 = inttoptr i64 %60 to i8*
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %61)
  br label %108

; <label>:63                                      ; preds = %54
  %64 = load i64, i64* %2, align 8
  %65 = and i64 %64, 7
  %66 = icmp eq i64 %65, 6
  br i1 %66, label %67, label %104

; <label>:67                                      ; preds = %63
  %68 = load i64, i64* %2, align 8
  %69 = and i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  %71 = getelementptr inbounds i64, i64* %70, i64 0
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 7
  %74 = icmp eq i64 1, %73
  br i1 %74, label %75, label %104

; <label>:75                                      ; preds = %67
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  %77 = load i64, i64* %2, align 8
  %78 = and i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64* %79, i64** %4, align 8
  %80 = load i64*, i64** %4, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 0
  %82 = load i64, i64* %81, align 8
  %83 = lshr i64 %82, 3
  store i64 %83, i64* %5, align 8
  %84 = load i64*, i64** %4, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 1
  %86 = load i64, i64* %85, align 8
  %87 = call i64 @prim_print_aux(i64 %86)
  store i64 2, i64* %6, align 8
  br label %88

; <label>:88                                      ; preds = %99, %75
  %89 = load i64, i64* %6, align 8
  %90 = load i64, i64* %5, align 8
  %91 = icmp ule i64 %89, %90
  br i1 %91, label %92, label %102

; <label>:92                                      ; preds = %88
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  %94 = load i64, i64* %6, align 8
  %95 = load i64*, i64** %4, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 %94
  %97 = load i64, i64* %96, align 8
  %98 = call i64 @prim_print_aux(i64 %97)
  br label %99

; <label>:99                                      ; preds = %92
  %100 = load i64, i64* %6, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %6, align 8
  br label %88

; <label>:102                                     ; preds = %88
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %107

; <label>:104                                     ; preds = %67, %63
  %105 = load i64, i64* %2, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.19, i32 0, i32 0), i64 %105)
  br label %107

; <label>:107                                     ; preds = %104, %102
  br label %108

; <label>:108                                     ; preds = %107, %58
  br label %109

; <label>:109                                     ; preds = %108, %49
  br label %110

; <label>:110                                     ; preds = %109, %40
  br label %111

; <label>:111                                     ; preds = %110, %21
  br label %112

; <label>:112                                     ; preds = %111, %15
  br label %113

; <label>:113                                     ; preds = %112, %9
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @prim_print(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0))
  br label %113

; <label>:11                                      ; preds = %1
  %12 = load i64, i64* %2, align 8
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %11
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0))
  br label %112

; <label>:17                                      ; preds = %11
  %18 = load i64, i64* %2, align 8
  %19 = and i64 %18, 7
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %21, label %36

; <label>:21                                      ; preds = %17
  %22 = load i64, i64* %2, align 8
  %23 = and i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64* %24, i64** %3, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0))
  %26 = load i64*, i64** %3, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 0
  %28 = load i64, i64* %27, align 8
  %29 = call i64 @prim_print_aux(i64 %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  %31 = load i64*, i64** %3, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = call i64 @prim_print_aux(i64 %33)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %111

; <label>:36                                      ; preds = %17
  %37 = load i64, i64* %2, align 8
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 2
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %36
  %41 = load i64, i64* %2, align 8
  %42 = lshr i64 %41, 32
  %43 = trunc i64 %42 to i32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 %43)
  br label %110

; <label>:45                                      ; preds = %36
  %46 = load i64, i64* %2, align 8
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 3
  br i1 %48, label %49, label %54

; <label>:49                                      ; preds = %45
  %50 = load i64, i64* %2, align 8
  %51 = and i64 %50, -8
  %52 = inttoptr i64 %51 to i8*
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* %52)
  br label %109

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %2, align 8
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 4
  br i1 %57, label %58, label %63

; <label>:58                                      ; preds = %54
  %59 = load i64, i64* %2, align 8
  %60 = and i64 %59, -8
  %61 = inttoptr i64 %60 to i8*
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), i8* %61)
  br label %108

; <label>:63                                      ; preds = %54
  %64 = load i64, i64* %2, align 8
  %65 = and i64 %64, 7
  %66 = icmp eq i64 %65, 6
  br i1 %66, label %67, label %104

; <label>:67                                      ; preds = %63
  %68 = load i64, i64* %2, align 8
  %69 = and i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  %71 = getelementptr inbounds i64, i64* %70, i64 0
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 7
  %74 = icmp eq i64 1, %73
  br i1 %74, label %75, label %104

; <label>:75                                      ; preds = %67
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  %77 = load i64, i64* %2, align 8
  %78 = and i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64* %79, i64** %4, align 8
  %80 = load i64*, i64** %4, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 0
  %82 = load i64, i64* %81, align 8
  %83 = lshr i64 %82, 3
  store i64 %83, i64* %5, align 8
  %84 = load i64*, i64** %4, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 1
  %86 = load i64, i64* %85, align 8
  %87 = call i64 @prim_print(i64 %86)
  store i64 2, i64* %6, align 8
  br label %88

; <label>:88                                      ; preds = %99, %75
  %89 = load i64, i64* %6, align 8
  %90 = load i64, i64* %5, align 8
  %91 = icmp ule i64 %89, %90
  br i1 %91, label %92, label %102

; <label>:92                                      ; preds = %88
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  %94 = load i64, i64* %6, align 8
  %95 = load i64*, i64** %4, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 %94
  %97 = load i64, i64* %96, align 8
  %98 = call i64 @prim_print(i64 %97)
  br label %99

; <label>:99                                      ; preds = %92
  %100 = load i64, i64* %6, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %6, align 8
  br label %88

; <label>:102                                     ; preds = %88
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %107

; <label>:104                                     ; preds = %67, %63
  %105 = load i64, i64* %2, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.23, i32 0, i32 0), i64 %105)
  br label %107

; <label>:107                                     ; preds = %104, %102
  br label %108

; <label>:108                                     ; preds = %107, %58
  br label %109

; <label>:109                                     ; preds = %108, %49
  br label %110

; <label>:110                                     ; preds = %109, %40
  br label %111

; <label>:111                                     ; preds = %110, %21
  br label %112

; <label>:112                                     ; preds = %111, %15
  br label %113

; <label>:113                                     ; preds = %112, %9
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @applyprim_print(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_print(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_halt(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = call i64 @prim_print(i64 %4)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 0) #7
  unreachable
                                                  ; No predecessors!
  %8 = load i64, i64* %2, align 8
  ret i64 %8
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 4096
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = icmp ugt i64 %9, 250000000
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %12

; <label>:12                                      ; preds = %11, %1
  %13 = call i8* @malloc(i64 4096)
  %14 = bitcast i8* %13 to i64*
  store i64* %14, i64** %3, align 8
  store i64 0, i64* %4, align 8
  br label %15

; <label>:15                                      ; preds = %24, %12
  %16 = load i64, i64* %2, align 8
  %17 = and i64 %16, 7
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %15
  %20 = load i64, i64* %4, align 8
  %21 = icmp ult i64 %20, 512
  br label %22

; <label>:22                                      ; preds = %19, %15
  %23 = phi i1 [ false, %15 ], [ %21, %19 ]
  br i1 %23, label %24, label %31

; <label>:24                                      ; preds = %22
  %25 = load i64, i64* %2, align 8
  %26 = call i64 @expect_cons(i64 %25, i64* %2)
  %27 = load i64, i64* %4, align 8
  %28 = add i64 %27, 1
  store i64 %28, i64* %4, align 8
  %29 = load i64*, i64** %3, align 8
  %30 = getelementptr inbounds i64, i64* %29, i64 %27
  store i64 %26, i64* %30, align 8
  br label %15

; <label>:31                                      ; preds = %22
  %32 = load i64, i64* %4, align 8
  %33 = add i64 %32, 1
  %34 = mul i64 %33, 8
  %35 = call i64* @alloc(i64 %34)
  store i64* %35, i64** %5, align 8
  %36 = load i64, i64* %4, align 8
  %37 = shl i64 %36, 3
  %38 = or i64 %37, 1
  %39 = load i64*, i64** %5, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 0
  store i64 %38, i64* %40, align 8
  store i64 0, i64* %6, align 8
  br label %41

; <label>:41                                      ; preds = %54, %31
  %42 = load i64, i64* %6, align 8
  %43 = load i64, i64* %4, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %57

; <label>:45                                      ; preds = %41
  %46 = load i64, i64* %6, align 8
  %47 = load i64*, i64** %3, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 %46
  %49 = load i64, i64* %48, align 8
  %50 = load i64, i64* %6, align 8
  %51 = add i64 %50, 1
  %52 = load i64*, i64** %5, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 %51
  store i64 %49, i64* %53, align 8
  br label %54

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %6, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %6, align 8
  br label %41

; <label>:57                                      ; preds = %41
  %58 = load i64*, i64** %3, align 8
  %59 = icmp eq i64* %58, null
  br i1 %59, label %62, label %60

; <label>:60                                      ; preds = %57
  %61 = bitcast i64* %58 to i8*
  call void @_ZdaPv(i8* %61) #8
  br label %62

; <label>:62                                      ; preds = %60, %57
  %63 = load i64*, i64** %5, align 8
  %64 = ptrtoint i64* %63 to i64
  %65 = or i64 %64, 6
  ret i64 %65
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #4

; Function Attrs: ssp uwtable
define i64 @prim_make_45vector(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = and i64 %8, 7
  %10 = icmp ne i64 %9, 2
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.24, i32 0, i32 0))
  br label %12

; <label>:12                                      ; preds = %11, %2
  %13 = load i64, i64* %3, align 8
  %14 = and i64 %13, -8
  %15 = lshr i64 %14, 32
  %16 = trunc i64 %15 to i32
  %17 = sext i32 %16 to i64
  store i64 %17, i64* %5, align 8
  %18 = load i64, i64* %5, align 8
  %19 = add i64 %18, 1
  %20 = mul i64 %19, 8
  %21 = call i64* @alloc(i64 %20)
  store i64* %21, i64** %6, align 8
  %22 = load i64, i64* %5, align 8
  %23 = shl i64 %22, 3
  %24 = or i64 %23, 1
  %25 = load i64*, i64** %6, align 8
  %26 = getelementptr inbounds i64, i64* %25, i64 0
  store i64 %24, i64* %26, align 8
  store i64 1, i64* %7, align 8
  br label %27

; <label>:27                                      ; preds = %36, %12
  %28 = load i64, i64* %7, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp ule i64 %28, %29
  br i1 %30, label %31, label %39

; <label>:31                                      ; preds = %27
  %32 = load i64, i64* %4, align 8
  %33 = load i64, i64* %7, align 8
  %34 = load i64*, i64** %6, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 %33
  store i64 %32, i64* %35, align 8
  br label %36

; <label>:36                                      ; preds = %31
  %37 = load i64, i64* %7, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %7, align 8
  br label %27

; <label>:39                                      ; preds = %27
  %40 = load i64*, i64** %6, align 8
  %41 = ptrtoint i64* %40 to i64
  %42 = or i64 %41, 6
  ret i64 %42
}

; Function Attrs: ssp uwtable
define i64 @applyprim_make_45vector(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_make_45vector(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_vector_45ref(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.26, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %3, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 6
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.27, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 7
  %21 = icmp ne i64 %20, 1
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %14
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.28, i32 0, i32 0))
  br label %23

; <label>:23                                      ; preds = %22, %14
  %24 = load i64, i64* %4, align 8
  %25 = and i64 %24, -8
  %26 = lshr i64 %25, 32
  %27 = trunc i64 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = load i64, i64* %3, align 8
  %30 = and i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  %32 = getelementptr inbounds i64, i64* %31, i64 0
  %33 = load i64, i64* %32, align 8
  %34 = lshr i64 %33, 3
  %35 = icmp uge i64 %28, %34
  br i1 %35, label %36, label %37

; <label>:36                                      ; preds = %23
  call void @fatal_err(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i32 0, i32 0))
  br label %37

; <label>:37                                      ; preds = %36, %23
  %38 = load i64, i64* %4, align 8
  %39 = and i64 %38, -8
  %40 = lshr i64 %39, 32
  %41 = trunc i64 %40 to i32
  %42 = add nsw i32 1, %41
  %43 = sext i32 %42 to i64
  %44 = load i64, i64* %3, align 8
  %45 = and i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = getelementptr inbounds i64, i64* %46, i64 %43
  %48 = load i64, i64* %47, align 8
  ret i64 %48
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector_45ref(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_vector_45ref(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_vector_45set_33(i64, i64, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = and i64 %7, 7
  %9 = icmp ne i64 %8, 2
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %3
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.26, i32 0, i32 0))
  br label %11

; <label>:11                                      ; preds = %10, %3
  %12 = load i64, i64* %4, align 8
  %13 = and i64 %12, 7
  %14 = icmp ne i64 %13, 6
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %11
  call void @fatal_err(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.30, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %11
  %17 = load i64, i64* %4, align 8
  %18 = and i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  %20 = getelementptr inbounds i64, i64* %19, i64 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, 7
  %23 = icmp ne i64 %22, 1
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %16
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.28, i32 0, i32 0))
  br label %25

; <label>:25                                      ; preds = %24, %16
  %26 = load i64, i64* %5, align 8
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = load i64, i64* %4, align 8
  %32 = and i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = lshr i64 %35, 3
  %37 = icmp uge i64 %30, %36
  br i1 %37, label %38, label %39

; <label>:38                                      ; preds = %25
  call void @fatal_err(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i32 0, i32 0))
  br label %39

; <label>:39                                      ; preds = %38, %25
  %40 = load i64, i64* %6, align 8
  %41 = load i64, i64* %5, align 8
  %42 = and i64 %41, -8
  %43 = lshr i64 %42, 32
  %44 = trunc i64 %43 to i32
  %45 = add nsw i32 1, %44
  %46 = sext i32 %45 to i64
  %47 = load i64, i64* %4, align 8
  %48 = and i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  %50 = getelementptr inbounds i64, i64* %49, i64 %46
  store i64 %40, i64* %50, align 8
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector_45set_33(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = call i64 @expect_cons(i64 %7, i64* %3)
  store i64 %8, i64* %4, align 8
  %9 = load i64, i64* %3, align 8
  %10 = call i64 @expect_cons(i64 %9, i64* %3)
  store i64 %10, i64* %5, align 8
  %11 = load i64, i64* %3, align 8
  %12 = call i64 @expect_cons(i64 %11, i64* %3)
  store i64 %12, i64* %6, align 8
  %13 = load i64, i64* %3, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %1
  %17 = load i64, i64* %4, align 8
  %18 = load i64, i64* %5, align 8
  %19 = load i64, i64* %6, align 8
  %20 = call i64 @prim_vector_45set_33(i64 %17, i64 %18, i64 %19)
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_void() #3 {
  ret i64 39
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_eq_63(i64, i64) #3 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  store i64 31, i64* %3, align 8
  br label %11

; <label>:10                                      ; preds = %2
  store i64 15, i64* %3, align 8
  br label %11

; <label>:11                                      ; preds = %10, %9
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: ssp uwtable
define i64 @applyprim_eq_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_eq_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_eqv_63(i64, i64) #3 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  store i64 31, i64* %3, align 8
  br label %11

; <label>:10                                      ; preds = %2
  store i64 15, i64* %3, align 8
  br label %11

; <label>:11                                      ; preds = %10, %9
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: ssp uwtable
define i64 @applyprim_eqv_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_eqv_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_number_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_number_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_number_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_integer_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_integer_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_integer_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_void_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 39
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_void_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_void_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_procedure_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_procedure_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_procedure_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_null_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_null_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_null_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_cons_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cons_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_cons_63(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_cons(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = call i64* @alloc(i64 16)
  store i64* %6, i64** %5, align 8
  %7 = load i64, i64* %3, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = getelementptr inbounds i64, i64* %8, i64 0
  store i64 %7, i64* %9, align 8
  %10 = load i64, i64* %4, align 8
  %11 = load i64*, i64** %5, align 8
  %12 = getelementptr inbounds i64, i64* %11, i64 1
  store i64 %10, i64* %12, align 8
  %13 = load i64*, i64** %5, align 8
  %14 = ptrtoint i64* %13 to i64
  %15 = or i64 %14, 1
  ret i64 %15
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cons(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_cons(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_car(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = call i64 @expect_cons(i64 %5, i64* %3)
  store i64 %6, i64* %4, align 8
  %7 = load i64, i64* %4, align 8
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @applyprim_car(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_car(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_cdr(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = call i64 @expect_cons(i64 %5, i64* %3)
  store i64 %6, i64* %4, align 8
  %7 = load i64, i64* %3, align 8
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cdr(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_cdr(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim__43(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.31, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.32, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = add nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__43(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 2, i64* %2, align 8
  br label %34

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = load i64*, i64** %4, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @applyprim__43(i64 %25)
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = add nsw i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 32
  %33 = or i64 %32, 2
  store i64 %33, i64* %2, align 8
  br label %34

; <label>:34                                      ; preds = %13, %7
  %35 = load i64, i64* %2, align 8
  ret i64 %35
}

; Function Attrs: ssp uwtable
define i64 @prim__45(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.31, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.34, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = sub nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__45(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 2, i64* %2, align 8
  br label %50

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %32

; <label>:21                                      ; preds = %13
  %22 = load i64*, i64** %4, align 8
  %23 = getelementptr inbounds i64, i64* %22, i64 0
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, -8
  %26 = lshr i64 %25, 32
  %27 = trunc i64 %26 to i32
  %28 = sub nsw i32 0, %27
  %29 = zext i32 %28 to i64
  %30 = shl i64 %29, 32
  %31 = or i64 %30, 2
  store i64 %31, i64* %2, align 8
  br label %50

; <label>:32                                      ; preds = %13
  %33 = load i64*, i64** %4, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = and i64 %35, -8
  %37 = lshr i64 %36, 32
  %38 = trunc i64 %37 to i32
  %39 = load i64*, i64** %4, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 1
  %41 = load i64, i64* %40, align 8
  %42 = call i64 @applyprim__43(i64 %41)
  %43 = and i64 %42, -8
  %44 = lshr i64 %43, 32
  %45 = trunc i64 %44 to i32
  %46 = sub nsw i32 %38, %45
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 32
  %49 = or i64 %48, 2
  store i64 %49, i64* %2, align 8
  br label %50

; <label>:50                                      ; preds = %32, %21, %7
  %51 = load i64, i64* %2, align 8
  ret i64 %51
}

; Function Attrs: ssp uwtable
define i64 @prim__42(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = mul nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__42(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 4294967298, i64* %2, align 8
  br label %34

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = load i64*, i64** %4, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @applyprim__42(i64 %25)
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = mul nsw i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 32
  %33 = or i64 %32, 2
  store i64 %33, i64* %2, align 8
  br label %34

; <label>:34                                      ; preds = %13, %7
  %35 = load i64, i64* %2, align 8
  ret i64 %35
}

; Function Attrs: ssp uwtable
define i64 @prim__47(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.38, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = sdiv i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @prim__61(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.40, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp eq i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: ssp uwtable
define i64 @prim__60(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.41, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.42, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: ssp uwtable
define i64 @prim__60_61(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.43, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.44, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp sle i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_not(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 15
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_not(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_not(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_hash() #0 {
  %1 = alloca %class.hamt*, align 8
  %2 = load i64, i64* @current_memory, align 8
  %3 = add i64 %2, 120
  store i64 %3, i64* @current_memory, align 8
  %4 = load i64, i64* @current_memory, align 8
  %5 = add i64 %4, 120
  %6 = icmp ugt i64 %5, 250000000
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %0
  %9 = call i8* @malloc(i64 120)
  %10 = bitcast i8* %9 to %class.hamt.1*
  %11 = bitcast %class.hamt.1* %10 to i8*
  %12 = bitcast i8* %11 to %class.hamt*
  call void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt* %12)
  store %class.hamt* %12, %class.hamt** %1, align 8
  %13 = load %class.hamt*, %class.hamt** %1, align 8
  %14 = ptrtoint %class.hamt* %13 to i64
  ret i64 %14
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt*) unnamed_addr #0 align 2 {
  %2 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %2, align 8
  %3 = load %class.hamt*, %class.hamt** %2, align 8
  call void @_ZN4hamtI3c_dS0_EC2Ev(%class.hamt* %3)
  ret void
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45ref(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  %21 = load %class.c_d*, %class.c_d** %5, align 8
  %22 = call %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt* %20, %class.c_d* %21)
  store %class.c_d* %22, %class.c_d** %6, align 8
  %23 = load %class.c_d*, %class.c_d** %6, align 8
  %24 = icmp eq %class.c_d* %23, null
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %13
  call void @fatal_err(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i32 0, i32 0))
  br label %26

; <label>:26                                      ; preds = %25, %13
  %27 = load %class.c_d*, %class.c_d** %6, align 8
  %28 = getelementptr inbounds %class.c_d, %class.c_d* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  ret i64 %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN3c_dC1Ey(%class.c_d*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca i64, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN3c_dC2Ey(%class.c_d* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %8 = load %class.hamt*, %class.hamt** %4, align 8
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  %10 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %9)
  store i64 %10, i64* %6, align 8
  %11 = load i64, i64* %6, align 8
  %12 = and i64 %11, 15
  %13 = urem i64 %12, 7
  store i64 %13, i64* %7, align 8
  %14 = load i64, i64* %7, align 8
  %15 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %16 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %15, i64 0, i64 %14
  %17 = getelementptr inbounds %class.KV, %class.KV* %16, i32 0, i32 0
  %18 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %2
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %56

; <label>:22                                      ; preds = %2
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %25 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %24, i64 0, i64 %23
  %26 = getelementptr inbounds %class.KV, %class.KV* %25, i32 0, i32 0
  %27 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %48

; <label>:31                                      ; preds = %22
  %32 = load i64, i64* %7, align 8
  %33 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %34 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %33, i64 0, i64 %32
  %35 = getelementptr inbounds %class.KV, %class.KV* %34, i32 0, i32 0
  %36 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %35 to %class.c_d**
  %37 = load %class.c_d*, %class.c_d** %36, align 8
  %38 = load %class.c_d*, %class.c_d** %5, align 8
  %39 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %37, %class.c_d* dereferenceable(8) %38)
  br i1 %39, label %40, label %47

; <label>:40                                      ; preds = %31
  %41 = load i64, i64* %7, align 8
  %42 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %43 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %42, i64 0, i64 %41
  %44 = getelementptr inbounds %class.KV, %class.KV* %43, i32 0, i32 1
  %45 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %44 to %class.c_d**
  %46 = load %class.c_d*, %class.c_d** %45, align 8
  store %class.c_d* %46, %class.c_d** %3, align 8
  br label %56

; <label>:47                                      ; preds = %31
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %56

; <label>:48                                      ; preds = %22
  %49 = load i64, i64* %7, align 8
  %50 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %51 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %50, i64 0, i64 %49
  %52 = load i64, i64* %6, align 8
  %53 = lshr i64 %52, 4
  %54 = load %class.c_d*, %class.c_d** %5, align 8
  %55 = call %class.c_d* @_ZN2KVI3c_dS0_Lj0EE10inner_findERKS1_yPKS0_(%class.KV* dereferenceable(16) %51, i64 %53, %class.c_d* %54)
  store %class.c_d* %55, %class.c_d** %3, align 8
  br label %56

; <label>:56                                      ; preds = %48, %47, %40, %21
  %57 = load %class.c_d*, %class.c_d** %3, align 8
  ret %class.c_d* %57
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45set(i64, i64, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca %class.hamt*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %10 = load i64, i64* @current_memory, align 8
  %11 = add i64 %10, 16
  store i64 %11, i64* @current_memory, align 8
  %12 = load i64, i64* @current_memory, align 8
  %13 = add i64 %12, 16
  %14 = icmp ugt i64 %13, 250000000
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %3
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %3
  %17 = call i8* @malloc(i64 8)
  %18 = bitcast i8* %17 to %class.c_d*
  %19 = bitcast %class.c_d* %18 to i8*
  %20 = bitcast i8* %19 to %class.c_d*
  %21 = load i64, i64* %5, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %20, i64 %21)
  store %class.c_d* %20, %class.c_d** %7, align 8
  %22 = call i8* @malloc(i64 8)
  %23 = bitcast i8* %22 to %class.c_d*
  %24 = bitcast %class.c_d* %23 to i8*
  %25 = bitcast i8* %24 to %class.c_d*
  %26 = load i64, i64* %6, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %25, i64 %26)
  store %class.c_d* %25, %class.c_d** %8, align 8
  %27 = load i64, i64* %4, align 8
  %28 = inttoptr i64 %27 to %class.hamt*
  store %class.hamt* %28, %class.hamt** %9, align 8
  %29 = load %class.hamt*, %class.hamt** %9, align 8
  %30 = load %class.c_d*, %class.c_d** %7, align 8
  %31 = load %class.c_d*, %class.c_d** %8, align 8
  %32 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt* %29, %class.c_d* %30, %class.c_d* %31)
  %33 = ptrtoint %class.hamt* %32 to i64
  ret i64 %33
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt*, %class.c_d*, %class.c_d*) #0 align 2 {
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %10 = load %class.hamt*, %class.hamt** %4, align 8
  %11 = load %class.c_d*, %class.c_d** %5, align 8
  %12 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %11)
  store i64 %12, i64* %7, align 8
  %13 = load i64, i64* %7, align 8
  %14 = and i64 %13, 15
  %15 = urem i64 %14, 7
  store i64 %15, i64* %8, align 8
  %16 = call i8* @malloc(i64 120)
  %17 = bitcast i8* %16 to %class.hamt*
  store %class.hamt* %17, %class.hamt** %9, align 8
  %18 = load %class.hamt*, %class.hamt** %9, align 8
  %19 = bitcast %class.hamt* %18 to i8*
  %20 = bitcast %class.hamt* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 120, i32 8, i1 false)
  %21 = load i64, i64* %8, align 8
  %22 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %23 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %22, i64 0, i64 %21
  %24 = getelementptr inbounds %class.KV, %class.KV* %23, i32 0, i32 0
  %25 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %41

; <label>:28                                      ; preds = %3
  %29 = load i64, i64* %8, align 8
  %30 = load %class.hamt*, %class.hamt** %9, align 8
  %31 = getelementptr inbounds %class.hamt, %class.hamt* %30, i32 0, i32 0
  %32 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %31, i64 0, i64 %29
  %33 = bitcast %class.KV* %32 to i8*
  %34 = bitcast i8* %33 to %class.KV*
  %35 = load %class.c_d*, %class.c_d** %5, align 8
  %36 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %34, %class.c_d* %35, %class.c_d* %36)
  %37 = load %class.hamt*, %class.hamt** %9, align 8
  %38 = getelementptr inbounds %class.hamt, %class.hamt* %37, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %38, align 8
  br label %121

; <label>:41                                      ; preds = %3
  %42 = load i64, i64* %8, align 8
  %43 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %44 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %43, i64 0, i64 %42
  %45 = getelementptr inbounds %class.KV, %class.KV* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %104

; <label>:50                                      ; preds = %41
  %51 = load i64, i64* %8, align 8
  %52 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %53 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %52, i64 0, i64 %51
  %54 = getelementptr inbounds %class.KV, %class.KV* %53, i32 0, i32 0
  %55 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %54 to %class.c_d**
  %56 = load %class.c_d*, %class.c_d** %55, align 8
  %57 = load %class.c_d*, %class.c_d** %5, align 8
  %58 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %56, %class.c_d* dereferenceable(8) %57)
  br i1 %58, label %59, label %68

; <label>:59                                      ; preds = %50
  %60 = load i64, i64* %8, align 8
  %61 = load %class.hamt*, %class.hamt** %9, align 8
  %62 = getelementptr inbounds %class.hamt, %class.hamt* %61, i32 0, i32 0
  %63 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %62, i64 0, i64 %60
  %64 = bitcast %class.KV* %63 to i8*
  %65 = bitcast i8* %64 to %class.KV*
  %66 = load %class.c_d*, %class.c_d** %5, align 8
  %67 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %65, %class.c_d* %66, %class.c_d* %67)
  br label %103

; <label>:68                                      ; preds = %50
  %69 = load %class.hamt*, %class.hamt** %9, align 8
  %70 = getelementptr inbounds %class.hamt, %class.hamt* %69, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %70, align 8
  %73 = load i64, i64* %8, align 8
  %74 = load %class.hamt*, %class.hamt** %9, align 8
  %75 = getelementptr inbounds %class.hamt, %class.hamt* %74, i32 0, i32 0
  %76 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %75, i64 0, i64 %73
  %77 = bitcast %class.KV* %76 to i8*
  %78 = bitcast i8* %77 to %class.KV*
  %79 = load i64, i64* %8, align 8
  %80 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %81 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %80, i64 0, i64 %79
  %82 = getelementptr inbounds %class.KV, %class.KV* %81, i32 0, i32 0
  %83 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %82 to %class.c_d**
  %84 = load %class.c_d*, %class.c_d** %83, align 8
  %85 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %84)
  %86 = lshr i64 %85, 4
  %87 = load i64, i64* %8, align 8
  %88 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %89 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %88, i64 0, i64 %87
  %90 = getelementptr inbounds %class.KV, %class.KV* %89, i32 0, i32 0
  %91 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %90 to %class.c_d**
  %92 = load %class.c_d*, %class.c_d** %91, align 8
  %93 = load i64, i64* %8, align 8
  %94 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %95 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %94, i64 0, i64 %93
  %96 = getelementptr inbounds %class.KV, %class.KV* %95, i32 0, i32 1
  %97 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %96 to %class.c_d**
  %98 = load %class.c_d*, %class.c_d** %97, align 8
  %99 = load i64, i64* %7, align 8
  %100 = lshr i64 %99, 4
  %101 = load %class.c_d*, %class.c_d** %5, align 8
  %102 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV* sret %78, i64 %86, %class.c_d* %92, %class.c_d* %98, i64 %100, %class.c_d* %101, %class.c_d* %102)
  br label %103

; <label>:103                                     ; preds = %68, %59
  br label %120

; <label>:104                                     ; preds = %41
  %105 = load i64, i64* %8, align 8
  %106 = load %class.hamt*, %class.hamt** %9, align 8
  %107 = getelementptr inbounds %class.hamt, %class.hamt* %106, i32 0, i32 0
  %108 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %107, i64 0, i64 %105
  %109 = bitcast %class.KV* %108 to i8*
  %110 = bitcast i8* %109 to %class.KV*
  %111 = load i64, i64* %8, align 8
  %112 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %113 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %112, i64 0, i64 %111
  %114 = load i64, i64* %7, align 8
  %115 = lshr i64 %114, 4
  %116 = load %class.c_d*, %class.c_d** %5, align 8
  %117 = load %class.c_d*, %class.c_d** %6, align 8
  %118 = load %class.hamt*, %class.hamt** %9, align 8
  %119 = getelementptr inbounds %class.hamt, %class.hamt* %118, i32 0, i32 1
  call void @_ZN2KVI3c_dS0_Lj0EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV* sret %110, %class.KV* dereferenceable(16) %113, i64 %115, %class.c_d* %116, %class.c_d* %117, i64* %119)
  br label %120

; <label>:120                                     ; preds = %104, %103
  br label %121

; <label>:121                                     ; preds = %120, %28
  %122 = load %class.hamt*, %class.hamt** %9, align 8
  ret %class.hamt* %122
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45remove(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  store %class.hamt* %20, %class.hamt** %6, align 8
  %21 = load %class.hamt*, %class.hamt** %6, align 8
  %22 = load %class.c_d*, %class.c_d** %5, align 8
  %23 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt* %21, %class.c_d* %22)
  %24 = ptrtoint %class.hamt* %23 to i64
  ret i64 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.hamt*, align 8
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.hamt*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.KV, align 8
  %11 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %12 = load %class.hamt*, %class.hamt** %4, align 8
  %13 = load %class.c_d*, %class.c_d** %5, align 8
  %14 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %13)
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = and i64 %15, 15
  %17 = urem i64 %16, 7
  store i64 %17, i64* %7, align 8
  %18 = load i64, i64* %7, align 8
  %19 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %20 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %19, i64 0, i64 %18
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %2
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:26                                      ; preds = %2
  %27 = load i64, i64* %7, align 8
  %28 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %29 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %28, i64 0, i64 %27
  %30 = getelementptr inbounds %class.KV, %class.KV* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %61

; <label>:35                                      ; preds = %26
  %36 = load i64, i64* %7, align 8
  %37 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %38 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %37, i64 0, i64 %36
  %39 = getelementptr inbounds %class.KV, %class.KV* %38, i32 0, i32 0
  %40 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %39 to %class.c_d**
  %41 = load %class.c_d*, %class.c_d** %40, align 8
  %42 = load %class.c_d*, %class.c_d** %5, align 8
  %43 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %41, %class.c_d* dereferenceable(8) %42)
  br i1 %43, label %44, label %60

; <label>:44                                      ; preds = %35
  %45 = call i8* @malloc(i64 120)
  %46 = bitcast i8* %45 to %class.hamt*
  store %class.hamt* %46, %class.hamt** %8, align 8
  %47 = load %class.hamt*, %class.hamt** %8, align 8
  %48 = bitcast %class.hamt* %47 to i8*
  %49 = bitcast %class.hamt* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 120, i32 8, i1 false)
  %50 = load i64, i64* %7, align 8
  %51 = load %class.hamt*, %class.hamt** %8, align 8
  %52 = getelementptr inbounds %class.hamt, %class.hamt* %51, i64 %50
  %53 = bitcast %class.hamt* %52 to i8*
  %54 = bitcast i8* %53 to %class.KV*
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %54, %class.c_d* null, %class.c_d* null)
  %55 = load %class.hamt*, %class.hamt** %8, align 8
  %56 = getelementptr inbounds %class.hamt, %class.hamt* %55, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, -1
  store i64 %58, i64* %56, align 8
  %59 = load %class.hamt*, %class.hamt** %8, align 8
  store %class.hamt* %59, %class.hamt** %3, align 8
  br label %91

; <label>:60                                      ; preds = %35
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:61                                      ; preds = %26
  %62 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %9, align 8
  %64 = load i64, i64* %7, align 8
  %65 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %66 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %65, i64 0, i64 %64
  %67 = load i64, i64* %6, align 8
  %68 = lshr i64 %67, 4
  %69 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE12remove_innerERKS1_yPKS0_Py(%class.KV* sret %10, %class.KV* dereferenceable(16) %66, i64 %68, %class.c_d* %69, i64* %9)
  %70 = load i64, i64* %7, align 8
  %71 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %72 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %71, i64 0, i64 %70
  %73 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj0EEeqERKS1_(%class.KV* %10, %class.KV* dereferenceable(16) %72)
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %61
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:75                                      ; preds = %61
  %76 = call i8* @malloc(i64 120)
  %77 = bitcast i8* %76 to %class.hamt*
  store %class.hamt* %77, %class.hamt** %11, align 8
  %78 = load %class.hamt*, %class.hamt** %11, align 8
  %79 = bitcast %class.hamt* %78 to i8*
  %80 = bitcast %class.hamt* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 120, i32 8, i1 false)
  %81 = load i64, i64* %7, align 8
  %82 = load %class.hamt*, %class.hamt** %11, align 8
  %83 = getelementptr inbounds %class.hamt, %class.hamt* %82, i32 0, i32 0
  %84 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %83, i64 0, i64 %81
  %85 = bitcast %class.KV* %84 to i8*
  %86 = bitcast i8* %85 to %class.KV*
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %86, %class.KV* dereferenceable(16) %10)
  %87 = load i64, i64* %9, align 8
  %88 = load %class.hamt*, %class.hamt** %11, align 8
  %89 = getelementptr inbounds %class.hamt, %class.hamt* %88, i32 0, i32 1
  store i64 %87, i64* %89, align 8
  %90 = load %class.hamt*, %class.hamt** %11, align 8
  store %class.hamt* %90, %class.hamt** %3, align 8
  br label %91

; <label>:91                                      ; preds = %75, %74, %60, %44, %25
  %92 = load %class.hamt*, %class.hamt** %3, align 8
  ret %class.hamt* %92
}

; Function Attrs: ssp uwtable
define i64 @prim_set() #0 {
  %1 = alloca %class.hamt*, align 8
  %2 = load i64, i64* @current_memory, align 8
  %3 = add i64 %2, 120
  store i64 %3, i64* @current_memory, align 8
  %4 = load i64, i64* @current_memory, align 8
  %5 = add i64 %4, 120
  %6 = icmp ugt i64 %5, 250000000
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %0
  %9 = call i8* @malloc(i64 120)
  %10 = bitcast i8* %9 to %class.hamt.1*
  %11 = bitcast %class.hamt.1* %10 to i8*
  %12 = bitcast i8* %11 to %class.hamt*
  call void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt* %12)
  store %class.hamt* %12, %class.hamt** %1, align 8
  %13 = load %class.hamt*, %class.hamt** %1, align 8
  %14 = ptrtoint %class.hamt* %13 to i64
  ret i64 %14
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45add(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* @current_memory, align 8
  %9 = add i64 %8, 16
  store i64 %9, i64* @current_memory, align 8
  %10 = load i64, i64* @current_memory, align 8
  %11 = add i64 %10, 16
  %12 = icmp ugt i64 %11, 250000000
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %2
  %15 = call i8* @malloc(i64 8)
  %16 = bitcast i8* %15 to %class.c_d*
  %17 = bitcast %class.c_d* %16 to i8*
  %18 = bitcast i8* %17 to %class.c_d*
  %19 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %18, i64 %19)
  store %class.c_d* %18, %class.c_d** %5, align 8
  %20 = call i8* @malloc(i64 8)
  %21 = bitcast i8* %20 to %class.c_d*
  %22 = bitcast %class.c_d* %21 to i8*
  %23 = bitcast i8* %22 to %class.c_d*
  %24 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %23, i64 %24)
  store %class.c_d* %23, %class.c_d** %6, align 8
  %25 = load i64, i64* %3, align 8
  %26 = inttoptr i64 %25 to %class.hamt*
  store %class.hamt* %26, %class.hamt** %7, align 8
  %27 = load %class.hamt*, %class.hamt** %7, align 8
  %28 = load %class.c_d*, %class.c_d** %5, align 8
  %29 = load %class.c_d*, %class.c_d** %6, align 8
  %30 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt* %27, %class.c_d* %28, %class.c_d* %29)
  %31 = ptrtoint %class.hamt* %30 to i64
  ret i64 %31
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45remove(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  store %class.hamt* %20, %class.hamt** %6, align 8
  %21 = load %class.hamt*, %class.hamt** %6, align 8
  %22 = load %class.c_d*, %class.c_d** %5, align 8
  %23 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt* %21, %class.c_d* %22)
  %24 = ptrtoint %class.hamt* %23 to i64
  ret i64 %24
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45member_63(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.hamt*, align 8
  %8 = alloca %class.c_d*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  store i64 %10, i64* @current_memory, align 8
  %11 = load i64, i64* @current_memory, align 8
  %12 = add i64 %11, 8
  %13 = icmp ugt i64 %12, 250000000
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %2
  %16 = call i8* @malloc(i64 8)
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = bitcast %class.c_d* %17 to i8*
  %19 = bitcast i8* %18 to %class.c_d*
  %20 = load i64, i64* %5, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %19, i64 %20)
  store %class.c_d* %19, %class.c_d** %6, align 8
  %21 = load i64, i64* %4, align 8
  %22 = inttoptr i64 %21 to %class.hamt*
  store %class.hamt* %22, %class.hamt** %7, align 8
  %23 = load %class.hamt*, %class.hamt** %7, align 8
  %24 = load %class.c_d*, %class.c_d** %6, align 8
  %25 = call %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt* %23, %class.c_d* %24)
  store %class.c_d* %25, %class.c_d** %8, align 8
  %26 = load %class.c_d*, %class.c_d** %8, align 8
  %27 = icmp eq %class.c_d* %26, null
  br i1 %27, label %28, label %29

; <label>:28                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %30

; <label>:29                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %30

; <label>:30                                      ; preds = %29, %28
  %31 = load i64, i64* %3, align 8
  ret i64 %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN3c_dC2Ey(%class.c_d*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca i64, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = getelementptr inbounds %class.c_d, %class.c_d* %5, i32 0, i32 0
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN4hamtI3c_dS0_EC2Ev(%class.hamt*) unnamed_addr #0 align 2 {
  %2 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %2, align 8
  %3 = load %class.hamt*, %class.hamt** %2, align 8
  %4 = getelementptr inbounds %class.hamt, %class.hamt* %3, i32 0, i32 0
  %5 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %4, i32 0, i32 0
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i64 7
  br label %7

; <label>:7                                       ; preds = %7, %1
  %8 = phi %class.KV* [ %5, %1 ], [ %9, %7 ]
  call void @_ZN2KVI3c_dS0_Lj0EEC1Ev(%class.KV* %8)
  %9 = getelementptr inbounds %class.KV, %class.KV* %8, i64 1
  %10 = icmp eq %class.KV* %9, %6
  br i1 %10, label %11, label %7

; <label>:11                                      ; preds = %7
  %12 = getelementptr inbounds %class.hamt, %class.hamt* %3, i32 0, i32 1
  store i64 0, i64* %12, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1Ev(%class.KV*) unnamed_addr #0 align 2 {
  %2 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %2, align 8
  %3 = load %class.KV*, %class.KV** %2, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2Ev(%class.KV* %3)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2Ev(%class.KV*) unnamed_addr #0 align 2 {
  %2 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %2, align 8
  %3 = load %class.KV*, %class.KV** %2, align 8
  %4 = getelementptr inbounds %class.KV, %class.KV* %3, i32 0, i32 0
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"* %4, i64 0)
  %5 = getelementptr inbounds %class.KV, %class.KV* %3, i32 0, i32 1
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.c_d* null)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC2Ey(%"union.KV<c_d, c_d, 0>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC2Ey(%"union.KV<c_d, c_d, 0>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 0>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i64 @_ZNK3c_d4hashEv(%class.c_d*) #3 align 2 {
  %2 = alloca %class.c_d*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store %class.c_d* %0, %class.c_d** %2, align 8
  %6 = load %class.c_d*, %class.c_d** %2, align 8
  %7 = bitcast %class.c_d* %6 to i8*
  store i8* %7, i8** %3, align 8
  store i64 -3750763034362895579, i64* %4, align 8
  store i32 0, i32* %5, align 4
  br label %8

; <label>:8                                       ; preds = %28, %1
  %9 = load i32, i32* %5, align 4
  %10 = zext i32 %9 to i64
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %12, label %30

; <label>:12                                      ; preds = %8
  %13 = load i64, i64* %4, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = xor i64 %13, %16
  store i64 %17, i64* %4, align 8
  %18 = load i64, i64* %4, align 8
  %19 = mul i64 %18, 1099511628211
  store i64 %19, i64* %4, align 8
  br label %20

; <label>:20                                      ; preds = %12
  %21 = load i32, i32* %5, align 4
  %22 = add i32 %21, 1
  store i32 %22, i32* %5, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %20
  %25 = load i8*, i8** %3, align 8
  %26 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %26, i8** %3, align 8
  %27 = icmp ne i8* %26, null
  br label %28

; <label>:28                                      ; preds = %24, %20
  %29 = phi i1 [ false, %20 ], [ %27, %24 ]
  br label %8

; <label>:30                                      ; preds = %8
  %31 = load i64, i64* %4, align 8
  ret i64 %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK3c_deqERKS_(%class.c_d*, %class.c_d* dereferenceable(8)) #3 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.c_d*, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  %7 = getelementptr inbounds %class.c_d, %class.c_d* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.c_d, %class.c_d* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  ret i1 %11
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj0EE10inner_findERKS1_yPKS0_(%class.KV* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.0*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV* %0, %class.KV** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV*, %class.KV** %5, align 8
  %17 = getelementptr inbounds %class.KV, %class.KV* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %17 to %class.KV.0**
  %19 = load %class.KV.0*, %class.KV.0** %18, align 8
  store %class.KV.0* %19, %class.KV.0** %9, align 8
  %20 = load %class.KV*, %class.KV** %5, align 8
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.0*, %class.KV.0** %9, align 8
  %44 = getelementptr inbounds %class.KV.0, %class.KV.0* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.0, %class.KV.0* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.0*, %class.KV.0** %9, align 8
  %54 = getelementptr inbounds %class.KV.0, %class.KV.0* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.0, %class.KV.0* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.0*, %class.KV.0** %9, align 8
  %64 = getelementptr inbounds %class.KV.0, %class.KV.0* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.0*, %class.KV.0** %9, align 8
  %73 = getelementptr inbounds %class.KV.0, %class.KV.0* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj1EE10inner_findERKS1_yPKS0_(%class.KV.0* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: nounwind readnone
declare i64 @llvm.ctpop.i64(i64) #5

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj1EE10inner_findERKS1_yPKS0_(%class.KV.0* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.0*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.2*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.0* %0, %class.KV.0** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.0*, %class.KV.0** %5, align 8
  %17 = getelementptr inbounds %class.KV.0, %class.KV.0* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %17 to %class.KV.2**
  %19 = load %class.KV.2*, %class.KV.2** %18, align 8
  store %class.KV.2* %19, %class.KV.2** %9, align 8
  %20 = load %class.KV.0*, %class.KV.0** %5, align 8
  %21 = getelementptr inbounds %class.KV.0, %class.KV.0* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.2*, %class.KV.2** %9, align 8
  %44 = getelementptr inbounds %class.KV.2, %class.KV.2* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.2, %class.KV.2* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.2*, %class.KV.2** %9, align 8
  %54 = getelementptr inbounds %class.KV.2, %class.KV.2* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.2, %class.KV.2* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.2*, %class.KV.2** %9, align 8
  %64 = getelementptr inbounds %class.KV.2, %class.KV.2* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.2*, %class.KV.2** %9, align 8
  %73 = getelementptr inbounds %class.KV.2, %class.KV.2* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj2EE10inner_findERKS1_yPKS0_(%class.KV.2* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj2EE10inner_findERKS1_yPKS0_(%class.KV.2* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.2*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.3*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.2* %0, %class.KV.2** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.2*, %class.KV.2** %5, align 8
  %17 = getelementptr inbounds %class.KV.2, %class.KV.2* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %17 to %class.KV.3**
  %19 = load %class.KV.3*, %class.KV.3** %18, align 8
  store %class.KV.3* %19, %class.KV.3** %9, align 8
  %20 = load %class.KV.2*, %class.KV.2** %5, align 8
  %21 = getelementptr inbounds %class.KV.2, %class.KV.2* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.3*, %class.KV.3** %9, align 8
  %44 = getelementptr inbounds %class.KV.3, %class.KV.3* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.3, %class.KV.3* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.3*, %class.KV.3** %9, align 8
  %54 = getelementptr inbounds %class.KV.3, %class.KV.3* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.3, %class.KV.3* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.3*, %class.KV.3** %9, align 8
  %64 = getelementptr inbounds %class.KV.3, %class.KV.3* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.3*, %class.KV.3** %9, align 8
  %73 = getelementptr inbounds %class.KV.3, %class.KV.3* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj3EE10inner_findERKS1_yPKS0_(%class.KV.3* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj3EE10inner_findERKS1_yPKS0_(%class.KV.3* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.3*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.4*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.3* %0, %class.KV.3** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.3*, %class.KV.3** %5, align 8
  %17 = getelementptr inbounds %class.KV.3, %class.KV.3* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %17 to %class.KV.4**
  %19 = load %class.KV.4*, %class.KV.4** %18, align 8
  store %class.KV.4* %19, %class.KV.4** %9, align 8
  %20 = load %class.KV.3*, %class.KV.3** %5, align 8
  %21 = getelementptr inbounds %class.KV.3, %class.KV.3* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.4*, %class.KV.4** %9, align 8
  %44 = getelementptr inbounds %class.KV.4, %class.KV.4* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.4, %class.KV.4* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.4*, %class.KV.4** %9, align 8
  %54 = getelementptr inbounds %class.KV.4, %class.KV.4* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.4, %class.KV.4* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.4*, %class.KV.4** %9, align 8
  %64 = getelementptr inbounds %class.KV.4, %class.KV.4* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.4*, %class.KV.4** %9, align 8
  %73 = getelementptr inbounds %class.KV.4, %class.KV.4* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj4EE10inner_findERKS1_yPKS0_(%class.KV.4* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj4EE10inner_findERKS1_yPKS0_(%class.KV.4* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.4*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.5*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.4* %0, %class.KV.4** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.4*, %class.KV.4** %5, align 8
  %17 = getelementptr inbounds %class.KV.4, %class.KV.4* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %17 to %class.KV.5**
  %19 = load %class.KV.5*, %class.KV.5** %18, align 8
  store %class.KV.5* %19, %class.KV.5** %9, align 8
  %20 = load %class.KV.4*, %class.KV.4** %5, align 8
  %21 = getelementptr inbounds %class.KV.4, %class.KV.4* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.5*, %class.KV.5** %9, align 8
  %44 = getelementptr inbounds %class.KV.5, %class.KV.5* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.5, %class.KV.5* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.5*, %class.KV.5** %9, align 8
  %54 = getelementptr inbounds %class.KV.5, %class.KV.5* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.5, %class.KV.5* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.5*, %class.KV.5** %9, align 8
  %64 = getelementptr inbounds %class.KV.5, %class.KV.5* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.5*, %class.KV.5** %9, align 8
  %73 = getelementptr inbounds %class.KV.5, %class.KV.5* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj5EE10inner_findERKS1_yPKS0_(%class.KV.5* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj5EE10inner_findERKS1_yPKS0_(%class.KV.5* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.5*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.6*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.5* %0, %class.KV.5** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.5*, %class.KV.5** %5, align 8
  %17 = getelementptr inbounds %class.KV.5, %class.KV.5* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %17 to %class.KV.6**
  %19 = load %class.KV.6*, %class.KV.6** %18, align 8
  store %class.KV.6* %19, %class.KV.6** %9, align 8
  %20 = load %class.KV.5*, %class.KV.5** %5, align 8
  %21 = getelementptr inbounds %class.KV.5, %class.KV.5* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.6*, %class.KV.6** %9, align 8
  %44 = getelementptr inbounds %class.KV.6, %class.KV.6* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.6, %class.KV.6* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.6*, %class.KV.6** %9, align 8
  %54 = getelementptr inbounds %class.KV.6, %class.KV.6* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.6, %class.KV.6* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.6*, %class.KV.6** %9, align 8
  %64 = getelementptr inbounds %class.KV.6, %class.KV.6* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.6*, %class.KV.6** %9, align 8
  %73 = getelementptr inbounds %class.KV.6, %class.KV.6* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj6EE10inner_findERKS1_yPKS0_(%class.KV.6* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj6EE10inner_findERKS1_yPKS0_(%class.KV.6* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.6*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.7*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.6* %0, %class.KV.6** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.6*, %class.KV.6** %5, align 8
  %17 = getelementptr inbounds %class.KV.6, %class.KV.6* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %17 to %class.KV.7**
  %19 = load %class.KV.7*, %class.KV.7** %18, align 8
  store %class.KV.7* %19, %class.KV.7** %9, align 8
  %20 = load %class.KV.6*, %class.KV.6** %5, align 8
  %21 = getelementptr inbounds %class.KV.6, %class.KV.6* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.7*, %class.KV.7** %9, align 8
  %44 = getelementptr inbounds %class.KV.7, %class.KV.7* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.7, %class.KV.7* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.7*, %class.KV.7** %9, align 8
  %54 = getelementptr inbounds %class.KV.7, %class.KV.7* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.7, %class.KV.7* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.7*, %class.KV.7** %9, align 8
  %64 = getelementptr inbounds %class.KV.7, %class.KV.7* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.7*, %class.KV.7** %9, align 8
  %73 = getelementptr inbounds %class.KV.7, %class.KV.7* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj7EE10inner_findERKS1_yPKS0_(%class.KV.7* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj7EE10inner_findERKS1_yPKS0_(%class.KV.7* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.7*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.7* %0, %class.KV.7** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.7*, %class.KV.7** %5, align 8
  %17 = getelementptr inbounds %class.KV.7, %class.KV.7* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %17 to %class.KV.8**
  %19 = load %class.KV.8*, %class.KV.8** %18, align 8
  store %class.KV.8* %19, %class.KV.8** %9, align 8
  %20 = load %class.KV.7*, %class.KV.7** %5, align 8
  %21 = getelementptr inbounds %class.KV.7, %class.KV.7* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.8*, %class.KV.8** %9, align 8
  %44 = getelementptr inbounds %class.KV.8, %class.KV.8* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.8, %class.KV.8* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.8*, %class.KV.8** %9, align 8
  %54 = getelementptr inbounds %class.KV.8, %class.KV.8* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.8, %class.KV.8* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.8*, %class.KV.8** %9, align 8
  %64 = getelementptr inbounds %class.KV.8, %class.KV.8* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.8*, %class.KV.8** %9, align 8
  %73 = getelementptr inbounds %class.KV.8, %class.KV.8* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj8EE10inner_findERKS1_yPKS0_(%class.KV.8* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj8EE10inner_findERKS1_yPKS0_(%class.KV.8* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.9*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.8* %0, %class.KV.8** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.8*, %class.KV.8** %5, align 8
  %17 = getelementptr inbounds %class.KV.8, %class.KV.8* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %17 to %class.KV.9**
  %19 = load %class.KV.9*, %class.KV.9** %18, align 8
  store %class.KV.9* %19, %class.KV.9** %9, align 8
  %20 = load %class.KV.8*, %class.KV.8** %5, align 8
  %21 = getelementptr inbounds %class.KV.8, %class.KV.8* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.9*, %class.KV.9** %9, align 8
  %44 = getelementptr inbounds %class.KV.9, %class.KV.9* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.9, %class.KV.9* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.9*, %class.KV.9** %9, align 8
  %54 = getelementptr inbounds %class.KV.9, %class.KV.9* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.9, %class.KV.9* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.9*, %class.KV.9** %9, align 8
  %64 = getelementptr inbounds %class.KV.9, %class.KV.9* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.9*, %class.KV.9** %9, align 8
  %73 = getelementptr inbounds %class.KV.9, %class.KV.9* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj9EE10inner_findERKS1_yPKS0_(%class.KV.9* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj9EE10inner_findERKS1_yPKS0_(%class.KV.9* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.9*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.10*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.9* %0, %class.KV.9** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.9*, %class.KV.9** %5, align 8
  %17 = getelementptr inbounds %class.KV.9, %class.KV.9* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %17 to %class.KV.10**
  %19 = load %class.KV.10*, %class.KV.10** %18, align 8
  store %class.KV.10* %19, %class.KV.10** %9, align 8
  %20 = load %class.KV.9*, %class.KV.9** %5, align 8
  %21 = getelementptr inbounds %class.KV.9, %class.KV.9* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.10*, %class.KV.10** %9, align 8
  %44 = getelementptr inbounds %class.KV.10, %class.KV.10* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.10, %class.KV.10* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.10*, %class.KV.10** %9, align 8
  %54 = getelementptr inbounds %class.KV.10, %class.KV.10* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.10, %class.KV.10* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.10*, %class.KV.10** %9, align 8
  %64 = getelementptr inbounds %class.KV.10, %class.KV.10* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.10, %class.KV.10* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.10*, %class.KV.10** %9, align 8
  %73 = getelementptr inbounds %class.KV.10, %class.KV.10* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj10EE10inner_findERKS1_yPKS0_(%class.KV.10* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj10EE10inner_findERKS1_yPKS0_(%class.KV.10* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.10*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %8 = load %class.KV.10*, %class.KV.10** %5, align 8
  %9 = getelementptr inbounds %class.KV.10, %class.KV.10* %8, i32 0, i32 1
  %10 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %9 to %class.LL**
  %11 = load %class.LL*, %class.LL** %10, align 8
  %12 = icmp ne %class.LL* %11, null
  br i1 %12, label %13, label %20

; <label>:13                                      ; preds = %3
  %14 = load %class.KV.10*, %class.KV.10** %5, align 8
  %15 = getelementptr inbounds %class.KV.10, %class.KV.10* %14, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %15 to %class.LL**
  %17 = load %class.LL*, %class.LL** %16, align 8
  %18 = load %class.c_d*, %class.c_d** %7, align 8
  %19 = call %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL* %17, %class.c_d* %18)
  store %class.c_d* %19, %class.c_d** %4, align 8
  br label %21

; <label>:20                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %21

; <label>:21                                      ; preds = %20, %13
  %22 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %22
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.LL*, align 8
  %5 = alloca %class.c_d*, align 8
  store %class.LL* %0, %class.LL** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %6 = load %class.LL*, %class.LL** %4, align 8
  %7 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 0
  %8 = load %class.c_d*, %class.c_d** %7, align 8
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  %10 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %8, %class.c_d* dereferenceable(8) %9)
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %2
  %12 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 1
  %13 = load %class.c_d*, %class.c_d** %12, align 8
  store %class.c_d* %13, %class.c_d** %3, align 8
  br label %24

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 2
  %16 = load %class.LL*, %class.LL** %15, align 8
  %17 = icmp ne %class.LL* %16, null
  br i1 %17, label %18, label %23

; <label>:18                                      ; preds = %14
  %19 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 2
  %20 = load %class.LL*, %class.LL** %19, align 8
  %21 = load %class.c_d*, %class.c_d** %5, align 8
  %22 = call %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL* %20, %class.c_d* %21)
  store %class.c_d* %22, %class.c_d** %3, align 8
  br label %24

; <label>:23                                      ; preds = %14
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %24

; <label>:24                                      ; preds = %23, %18, %11
  %25 = load %class.c_d*, %class.c_d** %3, align 8
  ret %class.c_d* %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2EPKS0_S3_(%class.KV* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.0, align 8
  %17 = alloca %class.KV.0*, align 8
  %18 = alloca %class.KV.0*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.0*
  store %class.KV.0* %40, %class.KV.0** %17, align 8
  %41 = load %class.KV.0*, %class.KV.0** %17, align 8
  %42 = getelementptr inbounds %class.KV.0, %class.KV.0* %41, i64 0
  %43 = bitcast %class.KV.0* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.0*
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %44, %class.KV.0* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.0*, %class.KV.0** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %49, %class.KV.0* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.0*
  store %class.KV.0* %53, %class.KV.0** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.0*, %class.KV.0** %18, align 8
  %59 = getelementptr inbounds %class.KV.0, %class.KV.0* %58, i64 0
  %60 = bitcast %class.KV.0* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.0*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.0*, %class.KV.0** %18, align 8
  %65 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i64 1
  %66 = bitcast %class.KV.0* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.0*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.0*, %class.KV.0** %18, align 8
  %72 = getelementptr inbounds %class.KV.0, %class.KV.0* %71, i64 0
  %73 = bitcast %class.KV.0* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.0*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.0*, %class.KV.0** %18, align 8
  %78 = getelementptr inbounds %class.KV.0, %class.KV.0* %77, i64 1
  %79 = bitcast %class.KV.0* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.0*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.0*, %class.KV.0** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %92, %class.KV.0* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV* noalias sret, %class.KV* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.0*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.0*, align 8
  %19 = alloca %class.KV.0, align 8
  %20 = alloca %class.KV.0, align 8
  %21 = alloca %class.KV.0*, align 8
  %22 = alloca %class.KV.0, align 8
  %23 = alloca %class.KV.0*, align 8
  %24 = alloca %class.KV.0*, align 8
  store %class.KV* %1, %class.KV** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV*, %class.KV** %7, align 8
  %26 = getelementptr inbounds %class.KV, %class.KV* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %26 to %class.KV.0**
  %28 = load %class.KV.0*, %class.KV.0** %27, align 8
  store %class.KV.0* %28, %class.KV.0** %12, align 8
  %29 = load %class.KV*, %class.KV** %7, align 8
  %30 = getelementptr inbounds %class.KV, %class.KV* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.0*, %class.KV.0** %12, align 8
  %62 = getelementptr inbounds %class.KV.0, %class.KV.0* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.0, %class.KV.0* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.0*, %class.KV.0** %12, align 8
  %72 = getelementptr inbounds %class.KV.0, %class.KV.0* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.0, %class.KV.0* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.0*, %class.KV.0** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %79, i32 %80, i32 %81, %class.KV.0* dereferenceable(16) %19)
  store %class.KV.0* %84, %class.KV.0** %18, align 8
  %85 = load %class.KV*, %class.KV** %7, align 8
  %86 = getelementptr inbounds %class.KV, %class.KV* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.0*, %class.KV.0** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %88, %class.KV.0* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.0*, %class.KV.0** %12, align 8
  %97 = getelementptr inbounds %class.KV.0, %class.KV.0* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.0, %class.KV.0* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 10
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.0*, %class.KV.0** %12, align 8
  %106 = getelementptr inbounds %class.KV.0, %class.KV.0* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.0, %class.KV.0* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.0*, %class.KV.0** %12, align 8
  %113 = getelementptr inbounds %class.KV.0, %class.KV.0* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.0, %class.KV.0* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.0*, %class.KV.0** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %121, i32 %122, i32 %123, %class.KV.0* dereferenceable(16) %20)
  store %class.KV.0* %124, %class.KV.0** %21, align 8
  %125 = load %class.KV*, %class.KV** %7, align 8
  %126 = getelementptr inbounds %class.KV, %class.KV* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.0*, %class.KV.0** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %128, %class.KV.0* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.0*, %class.KV.0** %12, align 8
  %134 = getelementptr inbounds %class.KV.0, %class.KV.0* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.0* sret %22, %class.KV.0* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.0*, %class.KV.0** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %140, i32 %141, i32 %142, %class.KV.0* dereferenceable(16) %22)
  store %class.KV.0* %143, %class.KV.0** %23, align 8
  %144 = load %class.KV*, %class.KV** %7, align 8
  %145 = getelementptr inbounds %class.KV, %class.KV* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.0*, %class.KV.0** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %147, %class.KV.0* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.0*
  store %class.KV.0* %158, %class.KV.0** %24, align 8
  %159 = load %class.KV.0*, %class.KV.0** %24, align 8
  %160 = bitcast %class.KV.0* %159 to i8*
  %161 = load %class.KV.0*, %class.KV.0** %12, align 8
  %162 = bitcast %class.KV.0* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.0*, %class.KV.0** %24, align 8
  %170 = getelementptr inbounds %class.KV.0, %class.KV.0* %169, i64 %168
  %171 = bitcast %class.KV.0* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.0*, %class.KV.0** %12, align 8
  %175 = getelementptr inbounds %class.KV.0, %class.KV.0* %174, i64 %173
  %176 = bitcast %class.KV.0* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.0*, %class.KV.0** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.0, %class.KV.0* %182, i64 %184
  %186 = bitcast %class.KV.0* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.0*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.0*, %class.KV.0** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %196, %class.KV.0* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2EPKS0_S3_(%class.KV*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 0>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 0>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 0>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 0>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.2, align 8
  %17 = alloca %class.KV.2*, align 8
  %18 = alloca %class.KV.2*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.2*
  store %class.KV.2* %40, %class.KV.2** %17, align 8
  %41 = load %class.KV.2*, %class.KV.2** %17, align 8
  %42 = getelementptr inbounds %class.KV.2, %class.KV.2* %41, i64 0
  %43 = bitcast %class.KV.2* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.2*
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %44, %class.KV.2* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.2*, %class.KV.2** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %49, %class.KV.2* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.2*
  store %class.KV.2* %53, %class.KV.2** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.2*, %class.KV.2** %18, align 8
  %59 = getelementptr inbounds %class.KV.2, %class.KV.2* %58, i64 0
  %60 = bitcast %class.KV.2* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.2*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.2*, %class.KV.2** %18, align 8
  %65 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i64 1
  %66 = bitcast %class.KV.2* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.2*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.2*, %class.KV.2** %18, align 8
  %72 = getelementptr inbounds %class.KV.2, %class.KV.2* %71, i64 0
  %73 = bitcast %class.KV.2* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.2*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.2*, %class.KV.2** %18, align 8
  %78 = getelementptr inbounds %class.KV.2, %class.KV.2* %77, i64 1
  %79 = bitcast %class.KV.2* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.2*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.2*, %class.KV.2** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %92, %class.KV.2* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = load %class.KV.0*, %class.KV.0** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2ERKS1_(%class.KV.0* %5, %class.KV.0* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV*, i64, %class.KV.0*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.0*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.0* %2, %class.KV.0** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2EyPKS_IS0_S0_Lj1EE(%class.KV* %7, i64 %8, %class.KV.0* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.3, align 8
  %17 = alloca %class.KV.3*, align 8
  %18 = alloca %class.KV.3*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.3*
  store %class.KV.3* %40, %class.KV.3** %17, align 8
  %41 = load %class.KV.3*, %class.KV.3** %17, align 8
  %42 = getelementptr inbounds %class.KV.3, %class.KV.3* %41, i64 0
  %43 = bitcast %class.KV.3* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.3*
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %44, %class.KV.3* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.3*, %class.KV.3** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %49, %class.KV.3* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.3*
  store %class.KV.3* %53, %class.KV.3** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.3*, %class.KV.3** %18, align 8
  %59 = getelementptr inbounds %class.KV.3, %class.KV.3* %58, i64 0
  %60 = bitcast %class.KV.3* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.3*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.3*, %class.KV.3** %18, align 8
  %65 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i64 1
  %66 = bitcast %class.KV.3* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.3*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.3*, %class.KV.3** %18, align 8
  %72 = getelementptr inbounds %class.KV.3, %class.KV.3* %71, i64 0
  %73 = bitcast %class.KV.3* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.3*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.3*, %class.KV.3** %18, align 8
  %78 = getelementptr inbounds %class.KV.3, %class.KV.3* %77, i64 1
  %79 = bitcast %class.KV.3* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.3*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.3*, %class.KV.3** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %92, %class.KV.3* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = load %class.KV.2*, %class.KV.2** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2ERKS1_(%class.KV.2* %5, %class.KV.2* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0*, i64, %class.KV.2*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.2*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.2* %2, %class.KV.2** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2EyPKS_IS0_S0_Lj2EE(%class.KV.0* %7, i64 %8, %class.KV.2* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2EPKS0_S3_(%class.KV.2* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.4, align 8
  %17 = alloca %class.KV.4*, align 8
  %18 = alloca %class.KV.4*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.4*
  store %class.KV.4* %40, %class.KV.4** %17, align 8
  %41 = load %class.KV.4*, %class.KV.4** %17, align 8
  %42 = getelementptr inbounds %class.KV.4, %class.KV.4* %41, i64 0
  %43 = bitcast %class.KV.4* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.4*
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %44, %class.KV.4* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.4*, %class.KV.4** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %49, %class.KV.4* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.4*
  store %class.KV.4* %53, %class.KV.4** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.4*, %class.KV.4** %18, align 8
  %59 = getelementptr inbounds %class.KV.4, %class.KV.4* %58, i64 0
  %60 = bitcast %class.KV.4* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.4*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.4*, %class.KV.4** %18, align 8
  %65 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i64 1
  %66 = bitcast %class.KV.4* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.4*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.4*, %class.KV.4** %18, align 8
  %72 = getelementptr inbounds %class.KV.4, %class.KV.4* %71, i64 0
  %73 = bitcast %class.KV.4* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.4*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.4*, %class.KV.4** %18, align 8
  %78 = getelementptr inbounds %class.KV.4, %class.KV.4* %77, i64 1
  %79 = bitcast %class.KV.4* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.4*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.4*, %class.KV.4** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %92, %class.KV.4* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = load %class.KV.3*, %class.KV.3** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2ERKS1_(%class.KV.3* %5, %class.KV.3* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2*, i64, %class.KV.3*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.3*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.3* %2, %class.KV.3** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2EyPKS_IS0_S0_Lj3EE(%class.KV.2* %7, i64 %8, %class.KV.3* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2EPKS0_S3_(%class.KV.3* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.5, align 8
  %17 = alloca %class.KV.5*, align 8
  %18 = alloca %class.KV.5*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.5*
  store %class.KV.5* %40, %class.KV.5** %17, align 8
  %41 = load %class.KV.5*, %class.KV.5** %17, align 8
  %42 = getelementptr inbounds %class.KV.5, %class.KV.5* %41, i64 0
  %43 = bitcast %class.KV.5* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.5*
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %44, %class.KV.5* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.5*, %class.KV.5** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %49, %class.KV.5* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.5*
  store %class.KV.5* %53, %class.KV.5** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.5*, %class.KV.5** %18, align 8
  %59 = getelementptr inbounds %class.KV.5, %class.KV.5* %58, i64 0
  %60 = bitcast %class.KV.5* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.5*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.5*, %class.KV.5** %18, align 8
  %65 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i64 1
  %66 = bitcast %class.KV.5* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.5*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.5*, %class.KV.5** %18, align 8
  %72 = getelementptr inbounds %class.KV.5, %class.KV.5* %71, i64 0
  %73 = bitcast %class.KV.5* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.5*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.5*, %class.KV.5** %18, align 8
  %78 = getelementptr inbounds %class.KV.5, %class.KV.5* %77, i64 1
  %79 = bitcast %class.KV.5* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.5*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.5*, %class.KV.5** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %92, %class.KV.5* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = load %class.KV.4*, %class.KV.4** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2ERKS1_(%class.KV.4* %5, %class.KV.4* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3*, i64, %class.KV.4*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.4*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.4* %2, %class.KV.4** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2EyPKS_IS0_S0_Lj4EE(%class.KV.3* %7, i64 %8, %class.KV.4* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2EPKS0_S3_(%class.KV.4* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.6, align 8
  %17 = alloca %class.KV.6*, align 8
  %18 = alloca %class.KV.6*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.6*
  store %class.KV.6* %40, %class.KV.6** %17, align 8
  %41 = load %class.KV.6*, %class.KV.6** %17, align 8
  %42 = getelementptr inbounds %class.KV.6, %class.KV.6* %41, i64 0
  %43 = bitcast %class.KV.6* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.6*
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %44, %class.KV.6* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.6*, %class.KV.6** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %49, %class.KV.6* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.6*
  store %class.KV.6* %53, %class.KV.6** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.6*, %class.KV.6** %18, align 8
  %59 = getelementptr inbounds %class.KV.6, %class.KV.6* %58, i64 0
  %60 = bitcast %class.KV.6* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.6*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.6*, %class.KV.6** %18, align 8
  %65 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i64 1
  %66 = bitcast %class.KV.6* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.6*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.6*, %class.KV.6** %18, align 8
  %72 = getelementptr inbounds %class.KV.6, %class.KV.6* %71, i64 0
  %73 = bitcast %class.KV.6* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.6*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.6*, %class.KV.6** %18, align 8
  %78 = getelementptr inbounds %class.KV.6, %class.KV.6* %77, i64 1
  %79 = bitcast %class.KV.6* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.6*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.6*, %class.KV.6** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %92, %class.KV.6* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = load %class.KV.5*, %class.KV.5** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2ERKS1_(%class.KV.5* %5, %class.KV.5* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4*, i64, %class.KV.5*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.5*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.5* %2, %class.KV.5** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2EyPKS_IS0_S0_Lj5EE(%class.KV.4* %7, i64 %8, %class.KV.5* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2EPKS0_S3_(%class.KV.5* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.7, align 8
  %17 = alloca %class.KV.7*, align 8
  %18 = alloca %class.KV.7*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.7*
  store %class.KV.7* %40, %class.KV.7** %17, align 8
  %41 = load %class.KV.7*, %class.KV.7** %17, align 8
  %42 = getelementptr inbounds %class.KV.7, %class.KV.7* %41, i64 0
  %43 = bitcast %class.KV.7* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.7*
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %44, %class.KV.7* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.7*, %class.KV.7** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %49, %class.KV.7* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.7*
  store %class.KV.7* %53, %class.KV.7** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.7*, %class.KV.7** %18, align 8
  %59 = getelementptr inbounds %class.KV.7, %class.KV.7* %58, i64 0
  %60 = bitcast %class.KV.7* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.7*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.7*, %class.KV.7** %18, align 8
  %65 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i64 1
  %66 = bitcast %class.KV.7* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.7*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.7*, %class.KV.7** %18, align 8
  %72 = getelementptr inbounds %class.KV.7, %class.KV.7* %71, i64 0
  %73 = bitcast %class.KV.7* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.7*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.7*, %class.KV.7** %18, align 8
  %78 = getelementptr inbounds %class.KV.7, %class.KV.7* %77, i64 1
  %79 = bitcast %class.KV.7* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.7*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.7*, %class.KV.7** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %92, %class.KV.7* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = load %class.KV.6*, %class.KV.6** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2ERKS1_(%class.KV.6* %5, %class.KV.6* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5*, i64, %class.KV.6*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.6*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.6* %2, %class.KV.6** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2EyPKS_IS0_S0_Lj6EE(%class.KV.5* %7, i64 %8, %class.KV.6* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2EPKS0_S3_(%class.KV.6* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.8, align 8
  %17 = alloca %class.KV.8*, align 8
  %18 = alloca %class.KV.8*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.8*
  store %class.KV.8* %40, %class.KV.8** %17, align 8
  %41 = load %class.KV.8*, %class.KV.8** %17, align 8
  %42 = getelementptr inbounds %class.KV.8, %class.KV.8* %41, i64 0
  %43 = bitcast %class.KV.8* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.8*
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %44, %class.KV.8* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.8*, %class.KV.8** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %49, %class.KV.8* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.8*
  store %class.KV.8* %53, %class.KV.8** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.8*, %class.KV.8** %18, align 8
  %59 = getelementptr inbounds %class.KV.8, %class.KV.8* %58, i64 0
  %60 = bitcast %class.KV.8* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.8*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.8*, %class.KV.8** %18, align 8
  %65 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i64 1
  %66 = bitcast %class.KV.8* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.8*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.8*, %class.KV.8** %18, align 8
  %72 = getelementptr inbounds %class.KV.8, %class.KV.8* %71, i64 0
  %73 = bitcast %class.KV.8* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.8*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.8*, %class.KV.8** %18, align 8
  %78 = getelementptr inbounds %class.KV.8, %class.KV.8* %77, i64 1
  %79 = bitcast %class.KV.8* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.8*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.8*, %class.KV.8** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %92, %class.KV.8* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = load %class.KV.7*, %class.KV.7** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2ERKS1_(%class.KV.7* %5, %class.KV.7* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6*, i64, %class.KV.7*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.7*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.7* %2, %class.KV.7** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2EyPKS_IS0_S0_Lj7EE(%class.KV.6* %7, i64 %8, %class.KV.7* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2EPKS0_S3_(%class.KV.7* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.9, align 8
  %17 = alloca %class.KV.9*, align 8
  %18 = alloca %class.KV.9*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.9*
  store %class.KV.9* %40, %class.KV.9** %17, align 8
  %41 = load %class.KV.9*, %class.KV.9** %17, align 8
  %42 = getelementptr inbounds %class.KV.9, %class.KV.9* %41, i64 0
  %43 = bitcast %class.KV.9* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.9*
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %44, %class.KV.9* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.9*, %class.KV.9** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %49, %class.KV.9* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.9*
  store %class.KV.9* %53, %class.KV.9** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.9*, %class.KV.9** %18, align 8
  %59 = getelementptr inbounds %class.KV.9, %class.KV.9* %58, i64 0
  %60 = bitcast %class.KV.9* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.9*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.9*, %class.KV.9** %18, align 8
  %65 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i64 1
  %66 = bitcast %class.KV.9* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.9*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.9*, %class.KV.9** %18, align 8
  %72 = getelementptr inbounds %class.KV.9, %class.KV.9* %71, i64 0
  %73 = bitcast %class.KV.9* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.9*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.9*, %class.KV.9** %18, align 8
  %78 = getelementptr inbounds %class.KV.9, %class.KV.9* %77, i64 1
  %79 = bitcast %class.KV.9* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.9*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.9*, %class.KV.9** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %92, %class.KV.9* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = load %class.KV.8*, %class.KV.8** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2ERKS1_(%class.KV.8* %5, %class.KV.8* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7*, i64, %class.KV.8*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.8*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.8* %2, %class.KV.8** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2EyPKS_IS0_S0_Lj8EE(%class.KV.7* %7, i64 %8, %class.KV.8* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2EPKS0_S3_(%class.KV.8* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.10, align 8
  %17 = alloca %class.KV.10*, align 8
  %18 = alloca %class.KV.10*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.10*
  store %class.KV.10* %40, %class.KV.10** %17, align 8
  %41 = load %class.KV.10*, %class.KV.10** %17, align 8
  %42 = getelementptr inbounds %class.KV.10, %class.KV.10* %41, i64 0
  %43 = bitcast %class.KV.10* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.10*
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %44, %class.KV.10* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.10*, %class.KV.10** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %49, %class.KV.10* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.10*
  store %class.KV.10* %53, %class.KV.10** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.10*, %class.KV.10** %18, align 8
  %59 = getelementptr inbounds %class.KV.10, %class.KV.10* %58, i64 0
  %60 = bitcast %class.KV.10* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.10*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.10*, %class.KV.10** %18, align 8
  %65 = getelementptr inbounds %class.KV.10, %class.KV.10* %64, i64 1
  %66 = bitcast %class.KV.10* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.10*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.10*, %class.KV.10** %18, align 8
  %72 = getelementptr inbounds %class.KV.10, %class.KV.10* %71, i64 0
  %73 = bitcast %class.KV.10* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.10*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.10*, %class.KV.10** %18, align 8
  %78 = getelementptr inbounds %class.KV.10, %class.KV.10* %77, i64 1
  %79 = bitcast %class.KV.10* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.10*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.10*, %class.KV.10** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %92, %class.KV.10* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = load %class.KV.9*, %class.KV.9** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2ERKS1_(%class.KV.9* %5, %class.KV.9* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8*, i64, %class.KV.9*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.9*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.9* %2, %class.KV.9** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2EyPKS_IS0_S0_Lj9EE(%class.KV.8* %7, i64 %8, %class.KV.9* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2EPKS0_S3_(%class.KV.9* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca %class.LL*, align 8
  %15 = alloca %class.LL*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %16 = call i8* @malloc(i64 24)
  %17 = bitcast i8* %16 to %class.LL*
  %18 = bitcast %class.LL* %17 to i8*
  %19 = bitcast i8* %18 to %class.LL*
  %20 = load %class.c_d*, %class.c_d** %9, align 8
  %21 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %19, %class.c_d* %20, %class.c_d* %21, %class.LL* null)
  store %class.LL* %19, %class.LL** %14, align 8
  %22 = call i8* @malloc(i64 24)
  %23 = bitcast i8* %22 to %class.LL*
  %24 = bitcast %class.LL* %23 to i8*
  %25 = bitcast i8* %24 to %class.LL*
  %26 = load %class.c_d*, %class.c_d** %12, align 8
  %27 = load %class.c_d*, %class.c_d** %13, align 8
  %28 = load %class.LL*, %class.LL** %14, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %25, %class.c_d* %26, %class.c_d* %27, %class.LL* %28)
  store %class.LL* %25, %class.LL** %15, align 8
  %29 = load %class.LL*, %class.LL** %15, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %29)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = load %class.KV.10*, %class.KV.10** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2ERKS1_(%class.KV.10* %5, %class.KV.10* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9*, i64, %class.KV.10*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.10*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.10* %2, %class.KV.10** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2EyPKS_IS0_S0_Lj10EE(%class.KV.9* %7, i64 %8, %class.KV.10* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2EPKS0_S3_(%class.KV.10* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL*, %class.c_d*, %class.c_d*, %class.LL*) unnamed_addr #0 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  store %class.LL* %3, %class.LL** %8, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = load %class.c_d*, %class.c_d** %6, align 8
  %11 = load %class.c_d*, %class.c_d** %7, align 8
  %12 = load %class.LL*, %class.LL** %8, align 8
  call void @_ZN2LLI3c_dS0_EC2EPKS0_S3_PKS1_(%class.LL* %9, %class.c_d* %10, %class.c_d* %11, %class.LL* %12)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10*, i64, %class.LL*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.LL*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.LL* %2, %class.LL** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.LL*, %class.LL** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2EyPK2LLIS0_S0_E(%class.KV.10* %7, i64 %8, %class.LL* %9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2LLI3c_dS0_EC2EPKS0_S3_PKS1_(%class.LL*, %class.c_d*, %class.c_d*, %class.LL*) unnamed_addr #3 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  store %class.LL* %3, %class.LL** %8, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  store %class.c_d* %11, %class.c_d** %10, align 8
  %12 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 1
  %13 = load %class.c_d*, %class.c_d** %7, align 8
  store %class.c_d* %13, %class.c_d** %12, align 8
  %14 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %15 = load %class.LL*, %class.LL** %8, align 8
  store %class.LL* %15, %class.LL** %14, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2EyPK2LLIS0_S0_E(%class.KV.10*, i64, %class.LL*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.LL*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.LL* %2, %class.LL** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC1Ey(%"union.KV<c_d, c_d, 10>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 1
  %11 = load %class.LL*, %class.LL** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"* %10, %class.LL* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC1Ey(%"union.KV<c_d, c_d, 10>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC2Ey(%"union.KV<c_d, c_d, 10>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"*, %class.LL*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.LL*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.LL* %1, %class.LL** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = load %class.LL*, %class.LL** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"* %5, %class.LL* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC2Ey(%"union.KV<c_d, c_d, 10>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"*, %class.LL*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.LL*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.LL* %1, %class.LL** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %5 to %class.LL**
  %7 = load %class.LL*, %class.LL** %4, align 8
  store %class.LL* %7, %class.LL** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2ERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 0
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 1
  %12 = load %class.KV.10*, %class.KV.10** %4, align 8
  %13 = getelementptr inbounds %class.KV.10, %class.KV.10* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2EyPKS_IS0_S0_Lj10EE(%class.KV.9*, i64, %class.KV.10*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.10*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.10* %2, %class.KV.10** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC1Ey(%"union.KV<c_d, c_d, 9>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 1
  %11 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"* %10, %class.KV.10* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC1Ey(%"union.KV<c_d, c_d, 9>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC2Ey(%"union.KV<c_d, c_d, 9>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"*, %class.KV.10*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = load %class.KV.10*, %class.KV.10** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"* %5, %class.KV.10* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC2Ey(%"union.KV<c_d, c_d, 9>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"*, %class.KV.10*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %5 to %class.KV.10**
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  store %class.KV.10* %7, %class.KV.10** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2EPKS0_S3_(%class.KV.10*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 10>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 10>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 10>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 10>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 10>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 10>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 10>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 10>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2ERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 0
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 1
  %12 = load %class.KV.9*, %class.KV.9** %4, align 8
  %13 = getelementptr inbounds %class.KV.9, %class.KV.9* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2EyPKS_IS0_S0_Lj9EE(%class.KV.8*, i64, %class.KV.9*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.9*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.9* %2, %class.KV.9** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC1Ey(%"union.KV<c_d, c_d, 8>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 1
  %11 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"* %10, %class.KV.9* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC1Ey(%"union.KV<c_d, c_d, 8>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC2Ey(%"union.KV<c_d, c_d, 8>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"*, %class.KV.9*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = load %class.KV.9*, %class.KV.9** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"* %5, %class.KV.9* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC2Ey(%"union.KV<c_d, c_d, 8>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"*, %class.KV.9*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %5 to %class.KV.9**
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  store %class.KV.9* %7, %class.KV.9** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2EPKS0_S3_(%class.KV.9*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 9>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 9>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 9>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 9>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 9>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 9>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 9>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 9>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2ERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 0
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 1
  %12 = load %class.KV.8*, %class.KV.8** %4, align 8
  %13 = getelementptr inbounds %class.KV.8, %class.KV.8* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2EyPKS_IS0_S0_Lj8EE(%class.KV.7*, i64, %class.KV.8*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.8*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.8* %2, %class.KV.8** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC1Ey(%"union.KV<c_d, c_d, 7>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 1
  %11 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"* %10, %class.KV.8* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC1Ey(%"union.KV<c_d, c_d, 7>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC2Ey(%"union.KV<c_d, c_d, 7>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"*, %class.KV.8*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = load %class.KV.8*, %class.KV.8** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"* %5, %class.KV.8* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC2Ey(%"union.KV<c_d, c_d, 7>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"*, %class.KV.8*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %5 to %class.KV.8**
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  store %class.KV.8* %7, %class.KV.8** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2EPKS0_S3_(%class.KV.8*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 8>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 8>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 8>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 8>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 8>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 8>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 8>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 8>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2ERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 0
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 1
  %12 = load %class.KV.7*, %class.KV.7** %4, align 8
  %13 = getelementptr inbounds %class.KV.7, %class.KV.7* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2EyPKS_IS0_S0_Lj7EE(%class.KV.6*, i64, %class.KV.7*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.7*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.7* %2, %class.KV.7** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC1Ey(%"union.KV<c_d, c_d, 6>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 1
  %11 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"* %10, %class.KV.7* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC1Ey(%"union.KV<c_d, c_d, 6>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC2Ey(%"union.KV<c_d, c_d, 6>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"*, %class.KV.7*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = load %class.KV.7*, %class.KV.7** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"* %5, %class.KV.7* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC2Ey(%"union.KV<c_d, c_d, 6>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"*, %class.KV.7*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %5 to %class.KV.7**
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  store %class.KV.7* %7, %class.KV.7** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2EPKS0_S3_(%class.KV.7*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 7>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 7>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 7>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 7>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 7>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 7>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 7>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 7>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2ERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 0
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 1
  %12 = load %class.KV.6*, %class.KV.6** %4, align 8
  %13 = getelementptr inbounds %class.KV.6, %class.KV.6* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2EyPKS_IS0_S0_Lj6EE(%class.KV.5*, i64, %class.KV.6*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.6*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.6* %2, %class.KV.6** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC1Ey(%"union.KV<c_d, c_d, 5>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 1
  %11 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"* %10, %class.KV.6* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC1Ey(%"union.KV<c_d, c_d, 5>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC2Ey(%"union.KV<c_d, c_d, 5>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"*, %class.KV.6*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = load %class.KV.6*, %class.KV.6** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"* %5, %class.KV.6* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC2Ey(%"union.KV<c_d, c_d, 5>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"*, %class.KV.6*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %5 to %class.KV.6**
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  store %class.KV.6* %7, %class.KV.6** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2EPKS0_S3_(%class.KV.6*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 6>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 6>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 6>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 6>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 6>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 6>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 6>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 6>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2ERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 0
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 1
  %12 = load %class.KV.5*, %class.KV.5** %4, align 8
  %13 = getelementptr inbounds %class.KV.5, %class.KV.5* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2EyPKS_IS0_S0_Lj5EE(%class.KV.4*, i64, %class.KV.5*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.5*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.5* %2, %class.KV.5** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC1Ey(%"union.KV<c_d, c_d, 4>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 1
  %11 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"* %10, %class.KV.5* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC1Ey(%"union.KV<c_d, c_d, 4>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC2Ey(%"union.KV<c_d, c_d, 4>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"*, %class.KV.5*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = load %class.KV.5*, %class.KV.5** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"* %5, %class.KV.5* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC2Ey(%"union.KV<c_d, c_d, 4>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"*, %class.KV.5*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %5 to %class.KV.5**
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  store %class.KV.5* %7, %class.KV.5** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2EPKS0_S3_(%class.KV.5*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 5>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 5>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 5>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 5>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 5>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 5>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 5>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 5>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2ERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 0
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 1
  %12 = load %class.KV.4*, %class.KV.4** %4, align 8
  %13 = getelementptr inbounds %class.KV.4, %class.KV.4* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2EyPKS_IS0_S0_Lj4EE(%class.KV.3*, i64, %class.KV.4*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.4*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.4* %2, %class.KV.4** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC1Ey(%"union.KV<c_d, c_d, 3>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 1
  %11 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"* %10, %class.KV.4* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC1Ey(%"union.KV<c_d, c_d, 3>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC2Ey(%"union.KV<c_d, c_d, 3>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"*, %class.KV.4*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = load %class.KV.4*, %class.KV.4** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"* %5, %class.KV.4* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC2Ey(%"union.KV<c_d, c_d, 3>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"*, %class.KV.4*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %5 to %class.KV.4**
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  store %class.KV.4* %7, %class.KV.4** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2EPKS0_S3_(%class.KV.4*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 4>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 4>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 4>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 4>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 4>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 4>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 4>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 4>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2ERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 0
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 1
  %12 = load %class.KV.3*, %class.KV.3** %4, align 8
  %13 = getelementptr inbounds %class.KV.3, %class.KV.3* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2EyPKS_IS0_S0_Lj3EE(%class.KV.2*, i64, %class.KV.3*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.3*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.3* %2, %class.KV.3** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC1Ey(%"union.KV<c_d, c_d, 2>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 1
  %11 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"* %10, %class.KV.3* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC1Ey(%"union.KV<c_d, c_d, 2>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC2Ey(%"union.KV<c_d, c_d, 2>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"*, %class.KV.3*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = load %class.KV.3*, %class.KV.3** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"* %5, %class.KV.3* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC2Ey(%"union.KV<c_d, c_d, 2>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"*, %class.KV.3*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %5 to %class.KV.3**
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  store %class.KV.3* %7, %class.KV.3** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2EPKS0_S3_(%class.KV.3*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 3>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 3>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 3>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 3>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 3>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 3>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 3>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 3>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2ERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 0
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 1
  %12 = load %class.KV.2*, %class.KV.2** %4, align 8
  %13 = getelementptr inbounds %class.KV.2, %class.KV.2* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2EyPKS_IS0_S0_Lj2EE(%class.KV.0*, i64, %class.KV.2*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.2*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.2* %2, %class.KV.2** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC1Ey(%"union.KV<c_d, c_d, 1>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 1
  %11 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"* %10, %class.KV.2* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC1Ey(%"union.KV<c_d, c_d, 1>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC2Ey(%"union.KV<c_d, c_d, 1>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"*, %class.KV.2*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = load %class.KV.2*, %class.KV.2** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"* %5, %class.KV.2* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC2Ey(%"union.KV<c_d, c_d, 1>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"*, %class.KV.2*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %5 to %class.KV.2**
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  store %class.KV.2* %7, %class.KV.2** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2EPKS0_S3_(%class.KV.2*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 2>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 2>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 2>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 2>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 2>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 2>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 2>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 2>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2ERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 0
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 1
  %12 = load %class.KV.0*, %class.KV.0** %4, align 8
  %13 = getelementptr inbounds %class.KV.0, %class.KV.0* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2EyPKS_IS0_S0_Lj1EE(%class.KV*, i64, %class.KV.0*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.0*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.0* %2, %class.KV.0** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 1
  %11 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"* %10, %class.KV.0* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"*, %class.KV.0*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = load %class.KV.0*, %class.KV.0** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.KV.0* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"*, %class.KV.0*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %5 to %class.KV.0**
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  store %class.KV.0* %7, %class.KV.0** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2EPKS0_S3_(%class.KV.0*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 1>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 1>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 1>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 1>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 1>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 1>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 1>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 1>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0*, i32, i32, %class.KV.0* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.0*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.0*, align 8
  %9 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.0* %3, %class.KV.0** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.0*
  store %class.KV.0* %14, %class.KV.0** %9, align 8
  %15 = load %class.KV.0*, %class.KV.0** %9, align 8
  %16 = bitcast %class.KV.0* %15 to i8*
  %17 = load %class.KV.0*, %class.KV.0** %5, align 8
  %18 = bitcast %class.KV.0* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.0*, %class.KV.0** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.0, %class.KV.0* %22, i64 %24
  %26 = bitcast %class.KV.0* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.0*
  %28 = load %class.KV.0*, %class.KV.0** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %27, %class.KV.0* dereferenceable(16) %28)
  %29 = load %class.KV.0*, %class.KV.0** %9, align 8
  ret %class.KV.0* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.0* noalias sret, %class.KV.0* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.0*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.2*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.2*, align 8
  %19 = alloca %class.KV.2, align 8
  %20 = alloca %class.KV.2, align 8
  %21 = alloca %class.KV.2*, align 8
  %22 = alloca %class.KV.2, align 8
  %23 = alloca %class.KV.2*, align 8
  %24 = alloca %class.KV.2*, align 8
  store %class.KV.0* %1, %class.KV.0** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.0*, %class.KV.0** %7, align 8
  %26 = getelementptr inbounds %class.KV.0, %class.KV.0* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %26 to %class.KV.2**
  %28 = load %class.KV.2*, %class.KV.2** %27, align 8
  store %class.KV.2* %28, %class.KV.2** %12, align 8
  %29 = load %class.KV.0*, %class.KV.0** %7, align 8
  %30 = getelementptr inbounds %class.KV.0, %class.KV.0* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.2*, %class.KV.2** %12, align 8
  %62 = getelementptr inbounds %class.KV.2, %class.KV.2* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.2, %class.KV.2* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.2*, %class.KV.2** %12, align 8
  %72 = getelementptr inbounds %class.KV.2, %class.KV.2* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.2, %class.KV.2* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.2*, %class.KV.2** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %79, i32 %80, i32 %81, %class.KV.2* dereferenceable(16) %19)
  store %class.KV.2* %84, %class.KV.2** %18, align 8
  %85 = load %class.KV.0*, %class.KV.0** %7, align 8
  %86 = getelementptr inbounds %class.KV.0, %class.KV.0* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.2*, %class.KV.2** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %88, %class.KV.2* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.2*, %class.KV.2** %12, align 8
  %97 = getelementptr inbounds %class.KV.2, %class.KV.2* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.2, %class.KV.2* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 16
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.2*, %class.KV.2** %12, align 8
  %106 = getelementptr inbounds %class.KV.2, %class.KV.2* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.2, %class.KV.2* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.2*, %class.KV.2** %12, align 8
  %113 = getelementptr inbounds %class.KV.2, %class.KV.2* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.2, %class.KV.2* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.2*, %class.KV.2** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %121, i32 %122, i32 %123, %class.KV.2* dereferenceable(16) %20)
  store %class.KV.2* %124, %class.KV.2** %21, align 8
  %125 = load %class.KV.0*, %class.KV.0** %7, align 8
  %126 = getelementptr inbounds %class.KV.0, %class.KV.0* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.2*, %class.KV.2** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %128, %class.KV.2* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.2*, %class.KV.2** %12, align 8
  %134 = getelementptr inbounds %class.KV.2, %class.KV.2* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.2* sret %22, %class.KV.2* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.2*, %class.KV.2** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %140, i32 %141, i32 %142, %class.KV.2* dereferenceable(16) %22)
  store %class.KV.2* %143, %class.KV.2** %23, align 8
  %144 = load %class.KV.0*, %class.KV.0** %7, align 8
  %145 = getelementptr inbounds %class.KV.0, %class.KV.0* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.2*, %class.KV.2** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %147, %class.KV.2* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.2*
  store %class.KV.2* %158, %class.KV.2** %24, align 8
  %159 = load %class.KV.2*, %class.KV.2** %24, align 8
  %160 = bitcast %class.KV.2* %159 to i8*
  %161 = load %class.KV.2*, %class.KV.2** %12, align 8
  %162 = bitcast %class.KV.2* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.2*, %class.KV.2** %24, align 8
  %170 = getelementptr inbounds %class.KV.2, %class.KV.2* %169, i64 %168
  %171 = bitcast %class.KV.2* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.2*, %class.KV.2** %12, align 8
  %175 = getelementptr inbounds %class.KV.2, %class.KV.2* %174, i64 %173
  %176 = bitcast %class.KV.2* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.2*, %class.KV.2** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.2, %class.KV.2* %182, i64 %184
  %186 = bitcast %class.KV.2* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.2*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.2*, %class.KV.2** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %196, %class.KV.2* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2*, i32, i32, %class.KV.2* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.2*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.2*, align 8
  %9 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.2* %3, %class.KV.2** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.2*
  store %class.KV.2* %14, %class.KV.2** %9, align 8
  %15 = load %class.KV.2*, %class.KV.2** %9, align 8
  %16 = bitcast %class.KV.2* %15 to i8*
  %17 = load %class.KV.2*, %class.KV.2** %5, align 8
  %18 = bitcast %class.KV.2* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.2*, %class.KV.2** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.2, %class.KV.2* %22, i64 %24
  %26 = bitcast %class.KV.2* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.2*
  %28 = load %class.KV.2*, %class.KV.2** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %27, %class.KV.2* dereferenceable(16) %28)
  %29 = load %class.KV.2*, %class.KV.2** %9, align 8
  ret %class.KV.2* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.2* noalias sret, %class.KV.2* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.2*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.3*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.3*, align 8
  %19 = alloca %class.KV.3, align 8
  %20 = alloca %class.KV.3, align 8
  %21 = alloca %class.KV.3*, align 8
  %22 = alloca %class.KV.3, align 8
  %23 = alloca %class.KV.3*, align 8
  %24 = alloca %class.KV.3*, align 8
  store %class.KV.2* %1, %class.KV.2** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.2*, %class.KV.2** %7, align 8
  %26 = getelementptr inbounds %class.KV.2, %class.KV.2* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %26 to %class.KV.3**
  %28 = load %class.KV.3*, %class.KV.3** %27, align 8
  store %class.KV.3* %28, %class.KV.3** %12, align 8
  %29 = load %class.KV.2*, %class.KV.2** %7, align 8
  %30 = getelementptr inbounds %class.KV.2, %class.KV.2* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.3*, %class.KV.3** %12, align 8
  %62 = getelementptr inbounds %class.KV.3, %class.KV.3* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.3, %class.KV.3* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.3*, %class.KV.3** %12, align 8
  %72 = getelementptr inbounds %class.KV.3, %class.KV.3* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.3, %class.KV.3* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.3*, %class.KV.3** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %79, i32 %80, i32 %81, %class.KV.3* dereferenceable(16) %19)
  store %class.KV.3* %84, %class.KV.3** %18, align 8
  %85 = load %class.KV.2*, %class.KV.2** %7, align 8
  %86 = getelementptr inbounds %class.KV.2, %class.KV.2* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.3*, %class.KV.3** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %88, %class.KV.3* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.3*, %class.KV.3** %12, align 8
  %97 = getelementptr inbounds %class.KV.3, %class.KV.3* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.3, %class.KV.3* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 22
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.3*, %class.KV.3** %12, align 8
  %106 = getelementptr inbounds %class.KV.3, %class.KV.3* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.3, %class.KV.3* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.3*, %class.KV.3** %12, align 8
  %113 = getelementptr inbounds %class.KV.3, %class.KV.3* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.3, %class.KV.3* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.3*, %class.KV.3** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %121, i32 %122, i32 %123, %class.KV.3* dereferenceable(16) %20)
  store %class.KV.3* %124, %class.KV.3** %21, align 8
  %125 = load %class.KV.2*, %class.KV.2** %7, align 8
  %126 = getelementptr inbounds %class.KV.2, %class.KV.2* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.3*, %class.KV.3** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %128, %class.KV.3* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.3*, %class.KV.3** %12, align 8
  %134 = getelementptr inbounds %class.KV.3, %class.KV.3* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.3* sret %22, %class.KV.3* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.3*, %class.KV.3** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %140, i32 %141, i32 %142, %class.KV.3* dereferenceable(16) %22)
  store %class.KV.3* %143, %class.KV.3** %23, align 8
  %144 = load %class.KV.2*, %class.KV.2** %7, align 8
  %145 = getelementptr inbounds %class.KV.2, %class.KV.2* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.3*, %class.KV.3** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %147, %class.KV.3* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.3*
  store %class.KV.3* %158, %class.KV.3** %24, align 8
  %159 = load %class.KV.3*, %class.KV.3** %24, align 8
  %160 = bitcast %class.KV.3* %159 to i8*
  %161 = load %class.KV.3*, %class.KV.3** %12, align 8
  %162 = bitcast %class.KV.3* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.3*, %class.KV.3** %24, align 8
  %170 = getelementptr inbounds %class.KV.3, %class.KV.3* %169, i64 %168
  %171 = bitcast %class.KV.3* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.3*, %class.KV.3** %12, align 8
  %175 = getelementptr inbounds %class.KV.3, %class.KV.3* %174, i64 %173
  %176 = bitcast %class.KV.3* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.3*, %class.KV.3** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.3, %class.KV.3* %182, i64 %184
  %186 = bitcast %class.KV.3* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.3*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.3*, %class.KV.3** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %196, %class.KV.3* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3*, i32, i32, %class.KV.3* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.3*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.3*, align 8
  %9 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.3* %3, %class.KV.3** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.3*
  store %class.KV.3* %14, %class.KV.3** %9, align 8
  %15 = load %class.KV.3*, %class.KV.3** %9, align 8
  %16 = bitcast %class.KV.3* %15 to i8*
  %17 = load %class.KV.3*, %class.KV.3** %5, align 8
  %18 = bitcast %class.KV.3* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.3*, %class.KV.3** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.3, %class.KV.3* %22, i64 %24
  %26 = bitcast %class.KV.3* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.3*
  %28 = load %class.KV.3*, %class.KV.3** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %27, %class.KV.3* dereferenceable(16) %28)
  %29 = load %class.KV.3*, %class.KV.3** %9, align 8
  ret %class.KV.3* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.3* noalias sret, %class.KV.3* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.3*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.4*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.4*, align 8
  %19 = alloca %class.KV.4, align 8
  %20 = alloca %class.KV.4, align 8
  %21 = alloca %class.KV.4*, align 8
  %22 = alloca %class.KV.4, align 8
  %23 = alloca %class.KV.4*, align 8
  %24 = alloca %class.KV.4*, align 8
  store %class.KV.3* %1, %class.KV.3** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.3*, %class.KV.3** %7, align 8
  %26 = getelementptr inbounds %class.KV.3, %class.KV.3* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %26 to %class.KV.4**
  %28 = load %class.KV.4*, %class.KV.4** %27, align 8
  store %class.KV.4* %28, %class.KV.4** %12, align 8
  %29 = load %class.KV.3*, %class.KV.3** %7, align 8
  %30 = getelementptr inbounds %class.KV.3, %class.KV.3* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.4*, %class.KV.4** %12, align 8
  %62 = getelementptr inbounds %class.KV.4, %class.KV.4* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.4, %class.KV.4* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.4*, %class.KV.4** %12, align 8
  %72 = getelementptr inbounds %class.KV.4, %class.KV.4* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.4, %class.KV.4* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.4*, %class.KV.4** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %79, i32 %80, i32 %81, %class.KV.4* dereferenceable(16) %19)
  store %class.KV.4* %84, %class.KV.4** %18, align 8
  %85 = load %class.KV.3*, %class.KV.3** %7, align 8
  %86 = getelementptr inbounds %class.KV.3, %class.KV.3* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.4*, %class.KV.4** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %88, %class.KV.4* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.4*, %class.KV.4** %12, align 8
  %97 = getelementptr inbounds %class.KV.4, %class.KV.4* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.4, %class.KV.4* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 28
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.4*, %class.KV.4** %12, align 8
  %106 = getelementptr inbounds %class.KV.4, %class.KV.4* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.4, %class.KV.4* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.4*, %class.KV.4** %12, align 8
  %113 = getelementptr inbounds %class.KV.4, %class.KV.4* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.4, %class.KV.4* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.4*, %class.KV.4** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %121, i32 %122, i32 %123, %class.KV.4* dereferenceable(16) %20)
  store %class.KV.4* %124, %class.KV.4** %21, align 8
  %125 = load %class.KV.3*, %class.KV.3** %7, align 8
  %126 = getelementptr inbounds %class.KV.3, %class.KV.3* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.4*, %class.KV.4** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %128, %class.KV.4* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.4*, %class.KV.4** %12, align 8
  %134 = getelementptr inbounds %class.KV.4, %class.KV.4* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.4* sret %22, %class.KV.4* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.4*, %class.KV.4** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %140, i32 %141, i32 %142, %class.KV.4* dereferenceable(16) %22)
  store %class.KV.4* %143, %class.KV.4** %23, align 8
  %144 = load %class.KV.3*, %class.KV.3** %7, align 8
  %145 = getelementptr inbounds %class.KV.3, %class.KV.3* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.4*, %class.KV.4** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %147, %class.KV.4* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.4*
  store %class.KV.4* %158, %class.KV.4** %24, align 8
  %159 = load %class.KV.4*, %class.KV.4** %24, align 8
  %160 = bitcast %class.KV.4* %159 to i8*
  %161 = load %class.KV.4*, %class.KV.4** %12, align 8
  %162 = bitcast %class.KV.4* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.4*, %class.KV.4** %24, align 8
  %170 = getelementptr inbounds %class.KV.4, %class.KV.4* %169, i64 %168
  %171 = bitcast %class.KV.4* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.4*, %class.KV.4** %12, align 8
  %175 = getelementptr inbounds %class.KV.4, %class.KV.4* %174, i64 %173
  %176 = bitcast %class.KV.4* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.4*, %class.KV.4** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.4, %class.KV.4* %182, i64 %184
  %186 = bitcast %class.KV.4* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.4*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.4*, %class.KV.4** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %196, %class.KV.4* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4*, i32, i32, %class.KV.4* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.4*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.4*, align 8
  %9 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.4* %3, %class.KV.4** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.4*
  store %class.KV.4* %14, %class.KV.4** %9, align 8
  %15 = load %class.KV.4*, %class.KV.4** %9, align 8
  %16 = bitcast %class.KV.4* %15 to i8*
  %17 = load %class.KV.4*, %class.KV.4** %5, align 8
  %18 = bitcast %class.KV.4* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.4*, %class.KV.4** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.4, %class.KV.4* %22, i64 %24
  %26 = bitcast %class.KV.4* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.4*
  %28 = load %class.KV.4*, %class.KV.4** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %27, %class.KV.4* dereferenceable(16) %28)
  %29 = load %class.KV.4*, %class.KV.4** %9, align 8
  ret %class.KV.4* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.4* noalias sret, %class.KV.4* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.4*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.5*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.5*, align 8
  %19 = alloca %class.KV.5, align 8
  %20 = alloca %class.KV.5, align 8
  %21 = alloca %class.KV.5*, align 8
  %22 = alloca %class.KV.5, align 8
  %23 = alloca %class.KV.5*, align 8
  %24 = alloca %class.KV.5*, align 8
  store %class.KV.4* %1, %class.KV.4** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.4*, %class.KV.4** %7, align 8
  %26 = getelementptr inbounds %class.KV.4, %class.KV.4* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %26 to %class.KV.5**
  %28 = load %class.KV.5*, %class.KV.5** %27, align 8
  store %class.KV.5* %28, %class.KV.5** %12, align 8
  %29 = load %class.KV.4*, %class.KV.4** %7, align 8
  %30 = getelementptr inbounds %class.KV.4, %class.KV.4* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.5*, %class.KV.5** %12, align 8
  %62 = getelementptr inbounds %class.KV.5, %class.KV.5* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.5, %class.KV.5* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.5*, %class.KV.5** %12, align 8
  %72 = getelementptr inbounds %class.KV.5, %class.KV.5* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.5, %class.KV.5* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.5*, %class.KV.5** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %79, i32 %80, i32 %81, %class.KV.5* dereferenceable(16) %19)
  store %class.KV.5* %84, %class.KV.5** %18, align 8
  %85 = load %class.KV.4*, %class.KV.4** %7, align 8
  %86 = getelementptr inbounds %class.KV.4, %class.KV.4* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.5*, %class.KV.5** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %88, %class.KV.5* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.5*, %class.KV.5** %12, align 8
  %97 = getelementptr inbounds %class.KV.5, %class.KV.5* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.5, %class.KV.5* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 34
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.5*, %class.KV.5** %12, align 8
  %106 = getelementptr inbounds %class.KV.5, %class.KV.5* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.5, %class.KV.5* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.5*, %class.KV.5** %12, align 8
  %113 = getelementptr inbounds %class.KV.5, %class.KV.5* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.5, %class.KV.5* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.5*, %class.KV.5** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %121, i32 %122, i32 %123, %class.KV.5* dereferenceable(16) %20)
  store %class.KV.5* %124, %class.KV.5** %21, align 8
  %125 = load %class.KV.4*, %class.KV.4** %7, align 8
  %126 = getelementptr inbounds %class.KV.4, %class.KV.4* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.5*, %class.KV.5** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %128, %class.KV.5* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.5*, %class.KV.5** %12, align 8
  %134 = getelementptr inbounds %class.KV.5, %class.KV.5* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.5* sret %22, %class.KV.5* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.5*, %class.KV.5** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %140, i32 %141, i32 %142, %class.KV.5* dereferenceable(16) %22)
  store %class.KV.5* %143, %class.KV.5** %23, align 8
  %144 = load %class.KV.4*, %class.KV.4** %7, align 8
  %145 = getelementptr inbounds %class.KV.4, %class.KV.4* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.5*, %class.KV.5** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %147, %class.KV.5* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.5*
  store %class.KV.5* %158, %class.KV.5** %24, align 8
  %159 = load %class.KV.5*, %class.KV.5** %24, align 8
  %160 = bitcast %class.KV.5* %159 to i8*
  %161 = load %class.KV.5*, %class.KV.5** %12, align 8
  %162 = bitcast %class.KV.5* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.5*, %class.KV.5** %24, align 8
  %170 = getelementptr inbounds %class.KV.5, %class.KV.5* %169, i64 %168
  %171 = bitcast %class.KV.5* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.5*, %class.KV.5** %12, align 8
  %175 = getelementptr inbounds %class.KV.5, %class.KV.5* %174, i64 %173
  %176 = bitcast %class.KV.5* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.5*, %class.KV.5** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.5, %class.KV.5* %182, i64 %184
  %186 = bitcast %class.KV.5* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.5*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.5*, %class.KV.5** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %196, %class.KV.5* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5*, i32, i32, %class.KV.5* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.5*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.5*, align 8
  %9 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.5* %3, %class.KV.5** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.5*
  store %class.KV.5* %14, %class.KV.5** %9, align 8
  %15 = load %class.KV.5*, %class.KV.5** %9, align 8
  %16 = bitcast %class.KV.5* %15 to i8*
  %17 = load %class.KV.5*, %class.KV.5** %5, align 8
  %18 = bitcast %class.KV.5* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.5*, %class.KV.5** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.5, %class.KV.5* %22, i64 %24
  %26 = bitcast %class.KV.5* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.5*
  %28 = load %class.KV.5*, %class.KV.5** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %27, %class.KV.5* dereferenceable(16) %28)
  %29 = load %class.KV.5*, %class.KV.5** %9, align 8
  ret %class.KV.5* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.5* noalias sret, %class.KV.5* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.5*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.6*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.6*, align 8
  %19 = alloca %class.KV.6, align 8
  %20 = alloca %class.KV.6, align 8
  %21 = alloca %class.KV.6*, align 8
  %22 = alloca %class.KV.6, align 8
  %23 = alloca %class.KV.6*, align 8
  %24 = alloca %class.KV.6*, align 8
  store %class.KV.5* %1, %class.KV.5** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.5*, %class.KV.5** %7, align 8
  %26 = getelementptr inbounds %class.KV.5, %class.KV.5* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %26 to %class.KV.6**
  %28 = load %class.KV.6*, %class.KV.6** %27, align 8
  store %class.KV.6* %28, %class.KV.6** %12, align 8
  %29 = load %class.KV.5*, %class.KV.5** %7, align 8
  %30 = getelementptr inbounds %class.KV.5, %class.KV.5* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.6*, %class.KV.6** %12, align 8
  %62 = getelementptr inbounds %class.KV.6, %class.KV.6* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.6, %class.KV.6* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.6*, %class.KV.6** %12, align 8
  %72 = getelementptr inbounds %class.KV.6, %class.KV.6* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.6, %class.KV.6* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.6*, %class.KV.6** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %79, i32 %80, i32 %81, %class.KV.6* dereferenceable(16) %19)
  store %class.KV.6* %84, %class.KV.6** %18, align 8
  %85 = load %class.KV.5*, %class.KV.5** %7, align 8
  %86 = getelementptr inbounds %class.KV.5, %class.KV.5* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.6*, %class.KV.6** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %88, %class.KV.6* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.6*, %class.KV.6** %12, align 8
  %97 = getelementptr inbounds %class.KV.6, %class.KV.6* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.6, %class.KV.6* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 40
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.6*, %class.KV.6** %12, align 8
  %106 = getelementptr inbounds %class.KV.6, %class.KV.6* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.6, %class.KV.6* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.6*, %class.KV.6** %12, align 8
  %113 = getelementptr inbounds %class.KV.6, %class.KV.6* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.6, %class.KV.6* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.6*, %class.KV.6** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %121, i32 %122, i32 %123, %class.KV.6* dereferenceable(16) %20)
  store %class.KV.6* %124, %class.KV.6** %21, align 8
  %125 = load %class.KV.5*, %class.KV.5** %7, align 8
  %126 = getelementptr inbounds %class.KV.5, %class.KV.5* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.6*, %class.KV.6** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %128, %class.KV.6* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.6*, %class.KV.6** %12, align 8
  %134 = getelementptr inbounds %class.KV.6, %class.KV.6* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.6* sret %22, %class.KV.6* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.6*, %class.KV.6** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %140, i32 %141, i32 %142, %class.KV.6* dereferenceable(16) %22)
  store %class.KV.6* %143, %class.KV.6** %23, align 8
  %144 = load %class.KV.5*, %class.KV.5** %7, align 8
  %145 = getelementptr inbounds %class.KV.5, %class.KV.5* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.6*, %class.KV.6** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %147, %class.KV.6* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.6*
  store %class.KV.6* %158, %class.KV.6** %24, align 8
  %159 = load %class.KV.6*, %class.KV.6** %24, align 8
  %160 = bitcast %class.KV.6* %159 to i8*
  %161 = load %class.KV.6*, %class.KV.6** %12, align 8
  %162 = bitcast %class.KV.6* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.6*, %class.KV.6** %24, align 8
  %170 = getelementptr inbounds %class.KV.6, %class.KV.6* %169, i64 %168
  %171 = bitcast %class.KV.6* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.6*, %class.KV.6** %12, align 8
  %175 = getelementptr inbounds %class.KV.6, %class.KV.6* %174, i64 %173
  %176 = bitcast %class.KV.6* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.6*, %class.KV.6** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.6, %class.KV.6* %182, i64 %184
  %186 = bitcast %class.KV.6* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.6*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.6*, %class.KV.6** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %196, %class.KV.6* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6*, i32, i32, %class.KV.6* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.6*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.6*, align 8
  %9 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.6* %3, %class.KV.6** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.6*
  store %class.KV.6* %14, %class.KV.6** %9, align 8
  %15 = load %class.KV.6*, %class.KV.6** %9, align 8
  %16 = bitcast %class.KV.6* %15 to i8*
  %17 = load %class.KV.6*, %class.KV.6** %5, align 8
  %18 = bitcast %class.KV.6* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.6*, %class.KV.6** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.6, %class.KV.6* %22, i64 %24
  %26 = bitcast %class.KV.6* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.6*
  %28 = load %class.KV.6*, %class.KV.6** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %27, %class.KV.6* dereferenceable(16) %28)
  %29 = load %class.KV.6*, %class.KV.6** %9, align 8
  ret %class.KV.6* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.6* noalias sret, %class.KV.6* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.6*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.7*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.7*, align 8
  %19 = alloca %class.KV.7, align 8
  %20 = alloca %class.KV.7, align 8
  %21 = alloca %class.KV.7*, align 8
  %22 = alloca %class.KV.7, align 8
  %23 = alloca %class.KV.7*, align 8
  %24 = alloca %class.KV.7*, align 8
  store %class.KV.6* %1, %class.KV.6** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.6*, %class.KV.6** %7, align 8
  %26 = getelementptr inbounds %class.KV.6, %class.KV.6* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %26 to %class.KV.7**
  %28 = load %class.KV.7*, %class.KV.7** %27, align 8
  store %class.KV.7* %28, %class.KV.7** %12, align 8
  %29 = load %class.KV.6*, %class.KV.6** %7, align 8
  %30 = getelementptr inbounds %class.KV.6, %class.KV.6* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.7*, %class.KV.7** %12, align 8
  %62 = getelementptr inbounds %class.KV.7, %class.KV.7* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.7, %class.KV.7* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.7*, %class.KV.7** %12, align 8
  %72 = getelementptr inbounds %class.KV.7, %class.KV.7* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.7, %class.KV.7* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.7*, %class.KV.7** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %79, i32 %80, i32 %81, %class.KV.7* dereferenceable(16) %19)
  store %class.KV.7* %84, %class.KV.7** %18, align 8
  %85 = load %class.KV.6*, %class.KV.6** %7, align 8
  %86 = getelementptr inbounds %class.KV.6, %class.KV.6* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.7*, %class.KV.7** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %88, %class.KV.7* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.7*, %class.KV.7** %12, align 8
  %97 = getelementptr inbounds %class.KV.7, %class.KV.7* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.7, %class.KV.7* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 46
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.7*, %class.KV.7** %12, align 8
  %106 = getelementptr inbounds %class.KV.7, %class.KV.7* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.7, %class.KV.7* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.7*, %class.KV.7** %12, align 8
  %113 = getelementptr inbounds %class.KV.7, %class.KV.7* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.7, %class.KV.7* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.7*, %class.KV.7** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %121, i32 %122, i32 %123, %class.KV.7* dereferenceable(16) %20)
  store %class.KV.7* %124, %class.KV.7** %21, align 8
  %125 = load %class.KV.6*, %class.KV.6** %7, align 8
  %126 = getelementptr inbounds %class.KV.6, %class.KV.6* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.7*, %class.KV.7** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %128, %class.KV.7* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.7*, %class.KV.7** %12, align 8
  %134 = getelementptr inbounds %class.KV.7, %class.KV.7* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.7* sret %22, %class.KV.7* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.7*, %class.KV.7** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %140, i32 %141, i32 %142, %class.KV.7* dereferenceable(16) %22)
  store %class.KV.7* %143, %class.KV.7** %23, align 8
  %144 = load %class.KV.6*, %class.KV.6** %7, align 8
  %145 = getelementptr inbounds %class.KV.6, %class.KV.6* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.7*, %class.KV.7** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %147, %class.KV.7* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.7*
  store %class.KV.7* %158, %class.KV.7** %24, align 8
  %159 = load %class.KV.7*, %class.KV.7** %24, align 8
  %160 = bitcast %class.KV.7* %159 to i8*
  %161 = load %class.KV.7*, %class.KV.7** %12, align 8
  %162 = bitcast %class.KV.7* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.7*, %class.KV.7** %24, align 8
  %170 = getelementptr inbounds %class.KV.7, %class.KV.7* %169, i64 %168
  %171 = bitcast %class.KV.7* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.7*, %class.KV.7** %12, align 8
  %175 = getelementptr inbounds %class.KV.7, %class.KV.7* %174, i64 %173
  %176 = bitcast %class.KV.7* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.7*, %class.KV.7** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.7, %class.KV.7* %182, i64 %184
  %186 = bitcast %class.KV.7* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.7*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.7*, %class.KV.7** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %196, %class.KV.7* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7*, i32, i32, %class.KV.7* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.7*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.7*, align 8
  %9 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.7* %3, %class.KV.7** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.7*
  store %class.KV.7* %14, %class.KV.7** %9, align 8
  %15 = load %class.KV.7*, %class.KV.7** %9, align 8
  %16 = bitcast %class.KV.7* %15 to i8*
  %17 = load %class.KV.7*, %class.KV.7** %5, align 8
  %18 = bitcast %class.KV.7* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.7*, %class.KV.7** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.7, %class.KV.7* %22, i64 %24
  %26 = bitcast %class.KV.7* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.7*
  %28 = load %class.KV.7*, %class.KV.7** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %27, %class.KV.7* dereferenceable(16) %28)
  %29 = load %class.KV.7*, %class.KV.7** %9, align 8
  ret %class.KV.7* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.7* noalias sret, %class.KV.7* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.7*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.8*, align 8
  %19 = alloca %class.KV.8, align 8
  %20 = alloca %class.KV.8, align 8
  %21 = alloca %class.KV.8*, align 8
  %22 = alloca %class.KV.8, align 8
  %23 = alloca %class.KV.8*, align 8
  %24 = alloca %class.KV.8*, align 8
  store %class.KV.7* %1, %class.KV.7** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.7*, %class.KV.7** %7, align 8
  %26 = getelementptr inbounds %class.KV.7, %class.KV.7* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %26 to %class.KV.8**
  %28 = load %class.KV.8*, %class.KV.8** %27, align 8
  store %class.KV.8* %28, %class.KV.8** %12, align 8
  %29 = load %class.KV.7*, %class.KV.7** %7, align 8
  %30 = getelementptr inbounds %class.KV.7, %class.KV.7* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.8*, %class.KV.8** %12, align 8
  %62 = getelementptr inbounds %class.KV.8, %class.KV.8* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.8, %class.KV.8* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.8*, %class.KV.8** %12, align 8
  %72 = getelementptr inbounds %class.KV.8, %class.KV.8* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.8, %class.KV.8* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.8*, %class.KV.8** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %79, i32 %80, i32 %81, %class.KV.8* dereferenceable(16) %19)
  store %class.KV.8* %84, %class.KV.8** %18, align 8
  %85 = load %class.KV.7*, %class.KV.7** %7, align 8
  %86 = getelementptr inbounds %class.KV.7, %class.KV.7* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.8*, %class.KV.8** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %88, %class.KV.8* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.8*, %class.KV.8** %12, align 8
  %97 = getelementptr inbounds %class.KV.8, %class.KV.8* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.8, %class.KV.8* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 52
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.8*, %class.KV.8** %12, align 8
  %106 = getelementptr inbounds %class.KV.8, %class.KV.8* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.8, %class.KV.8* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.8*, %class.KV.8** %12, align 8
  %113 = getelementptr inbounds %class.KV.8, %class.KV.8* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.8, %class.KV.8* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.8*, %class.KV.8** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %121, i32 %122, i32 %123, %class.KV.8* dereferenceable(16) %20)
  store %class.KV.8* %124, %class.KV.8** %21, align 8
  %125 = load %class.KV.7*, %class.KV.7** %7, align 8
  %126 = getelementptr inbounds %class.KV.7, %class.KV.7* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.8*, %class.KV.8** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %128, %class.KV.8* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.8*, %class.KV.8** %12, align 8
  %134 = getelementptr inbounds %class.KV.8, %class.KV.8* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.8* sret %22, %class.KV.8* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.8*, %class.KV.8** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %140, i32 %141, i32 %142, %class.KV.8* dereferenceable(16) %22)
  store %class.KV.8* %143, %class.KV.8** %23, align 8
  %144 = load %class.KV.7*, %class.KV.7** %7, align 8
  %145 = getelementptr inbounds %class.KV.7, %class.KV.7* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.8*, %class.KV.8** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %147, %class.KV.8* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.8*
  store %class.KV.8* %158, %class.KV.8** %24, align 8
  %159 = load %class.KV.8*, %class.KV.8** %24, align 8
  %160 = bitcast %class.KV.8* %159 to i8*
  %161 = load %class.KV.8*, %class.KV.8** %12, align 8
  %162 = bitcast %class.KV.8* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.8*, %class.KV.8** %24, align 8
  %170 = getelementptr inbounds %class.KV.8, %class.KV.8* %169, i64 %168
  %171 = bitcast %class.KV.8* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.8*, %class.KV.8** %12, align 8
  %175 = getelementptr inbounds %class.KV.8, %class.KV.8* %174, i64 %173
  %176 = bitcast %class.KV.8* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.8*, %class.KV.8** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.8, %class.KV.8* %182, i64 %184
  %186 = bitcast %class.KV.8* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.8*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.8*, %class.KV.8** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %196, %class.KV.8* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8*, i32, i32, %class.KV.8* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.8*, align 8
  %9 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.8* %3, %class.KV.8** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.8*
  store %class.KV.8* %14, %class.KV.8** %9, align 8
  %15 = load %class.KV.8*, %class.KV.8** %9, align 8
  %16 = bitcast %class.KV.8* %15 to i8*
  %17 = load %class.KV.8*, %class.KV.8** %5, align 8
  %18 = bitcast %class.KV.8* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.8*, %class.KV.8** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.8, %class.KV.8* %22, i64 %24
  %26 = bitcast %class.KV.8* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.8*
  %28 = load %class.KV.8*, %class.KV.8** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %27, %class.KV.8* dereferenceable(16) %28)
  %29 = load %class.KV.8*, %class.KV.8** %9, align 8
  ret %class.KV.8* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.8* noalias sret, %class.KV.8* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.9*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.9*, align 8
  %19 = alloca %class.KV.9, align 8
  %20 = alloca %class.KV.9, align 8
  %21 = alloca %class.KV.9*, align 8
  %22 = alloca %class.KV.9, align 8
  %23 = alloca %class.KV.9*, align 8
  %24 = alloca %class.KV.9*, align 8
  store %class.KV.8* %1, %class.KV.8** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.8*, %class.KV.8** %7, align 8
  %26 = getelementptr inbounds %class.KV.8, %class.KV.8* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %26 to %class.KV.9**
  %28 = load %class.KV.9*, %class.KV.9** %27, align 8
  store %class.KV.9* %28, %class.KV.9** %12, align 8
  %29 = load %class.KV.8*, %class.KV.8** %7, align 8
  %30 = getelementptr inbounds %class.KV.8, %class.KV.8* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.9*, %class.KV.9** %12, align 8
  %62 = getelementptr inbounds %class.KV.9, %class.KV.9* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.9, %class.KV.9* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.9*, %class.KV.9** %12, align 8
  %72 = getelementptr inbounds %class.KV.9, %class.KV.9* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.9, %class.KV.9* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.9*, %class.KV.9** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %79, i32 %80, i32 %81, %class.KV.9* dereferenceable(16) %19)
  store %class.KV.9* %84, %class.KV.9** %18, align 8
  %85 = load %class.KV.8*, %class.KV.8** %7, align 8
  %86 = getelementptr inbounds %class.KV.8, %class.KV.8* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.9*, %class.KV.9** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %88, %class.KV.9* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.9*, %class.KV.9** %12, align 8
  %97 = getelementptr inbounds %class.KV.9, %class.KV.9* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.9, %class.KV.9* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 58
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.9*, %class.KV.9** %12, align 8
  %106 = getelementptr inbounds %class.KV.9, %class.KV.9* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.9, %class.KV.9* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.9*, %class.KV.9** %12, align 8
  %113 = getelementptr inbounds %class.KV.9, %class.KV.9* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.9, %class.KV.9* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.9*, %class.KV.9** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %121, i32 %122, i32 %123, %class.KV.9* dereferenceable(16) %20)
  store %class.KV.9* %124, %class.KV.9** %21, align 8
  %125 = load %class.KV.8*, %class.KV.8** %7, align 8
  %126 = getelementptr inbounds %class.KV.8, %class.KV.8* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.9*, %class.KV.9** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %128, %class.KV.9* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.9*, %class.KV.9** %12, align 8
  %134 = getelementptr inbounds %class.KV.9, %class.KV.9* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.9* sret %22, %class.KV.9* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.9*, %class.KV.9** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %140, i32 %141, i32 %142, %class.KV.9* dereferenceable(16) %22)
  store %class.KV.9* %143, %class.KV.9** %23, align 8
  %144 = load %class.KV.8*, %class.KV.8** %7, align 8
  %145 = getelementptr inbounds %class.KV.8, %class.KV.8* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.9*, %class.KV.9** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %147, %class.KV.9* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.9*
  store %class.KV.9* %158, %class.KV.9** %24, align 8
  %159 = load %class.KV.9*, %class.KV.9** %24, align 8
  %160 = bitcast %class.KV.9* %159 to i8*
  %161 = load %class.KV.9*, %class.KV.9** %12, align 8
  %162 = bitcast %class.KV.9* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.9*, %class.KV.9** %24, align 8
  %170 = getelementptr inbounds %class.KV.9, %class.KV.9* %169, i64 %168
  %171 = bitcast %class.KV.9* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.9*, %class.KV.9** %12, align 8
  %175 = getelementptr inbounds %class.KV.9, %class.KV.9* %174, i64 %173
  %176 = bitcast %class.KV.9* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.9*, %class.KV.9** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.9, %class.KV.9* %182, i64 %184
  %186 = bitcast %class.KV.9* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.9*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.9*, %class.KV.9** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %196, %class.KV.9* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9*, i32, i32, %class.KV.9* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.9*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.9*, align 8
  %9 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.9* %3, %class.KV.9** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.9*
  store %class.KV.9* %14, %class.KV.9** %9, align 8
  %15 = load %class.KV.9*, %class.KV.9** %9, align 8
  %16 = bitcast %class.KV.9* %15 to i8*
  %17 = load %class.KV.9*, %class.KV.9** %5, align 8
  %18 = bitcast %class.KV.9* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.9*, %class.KV.9** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.9, %class.KV.9* %22, i64 %24
  %26 = bitcast %class.KV.9* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.9*
  %28 = load %class.KV.9*, %class.KV.9** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %27, %class.KV.9* dereferenceable(16) %28)
  %29 = load %class.KV.9*, %class.KV.9** %9, align 8
  ret %class.KV.9* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.9* noalias sret, %class.KV.9* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.9*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.10*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.10*, align 8
  %19 = alloca %class.KV.10, align 8
  %20 = alloca %class.KV.10, align 8
  %21 = alloca %class.KV.10*, align 8
  %22 = alloca %class.KV.10, align 8
  %23 = alloca %class.KV.10*, align 8
  %24 = alloca %class.KV.10*, align 8
  store %class.KV.9* %1, %class.KV.9** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.9*, %class.KV.9** %7, align 8
  %26 = getelementptr inbounds %class.KV.9, %class.KV.9* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %26 to %class.KV.10**
  %28 = load %class.KV.10*, %class.KV.10** %27, align 8
  store %class.KV.10* %28, %class.KV.10** %12, align 8
  %29 = load %class.KV.9*, %class.KV.9** %7, align 8
  %30 = getelementptr inbounds %class.KV.9, %class.KV.9* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.10*, %class.KV.10** %12, align 8
  %62 = getelementptr inbounds %class.KV.10, %class.KV.10* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.10, %class.KV.10* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.10*, %class.KV.10** %12, align 8
  %72 = getelementptr inbounds %class.KV.10, %class.KV.10* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.10, %class.KV.10* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.10*, %class.KV.10** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %79, i32 %80, i32 %81, %class.KV.10* dereferenceable(16) %19)
  store %class.KV.10* %84, %class.KV.10** %18, align 8
  %85 = load %class.KV.9*, %class.KV.9** %7, align 8
  %86 = getelementptr inbounds %class.KV.9, %class.KV.9* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.10*, %class.KV.10** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %88, %class.KV.10* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.10*, %class.KV.10** %12, align 8
  %97 = getelementptr inbounds %class.KV.10, %class.KV.10* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.10, %class.KV.10* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 0
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.10*, %class.KV.10** %12, align 8
  %106 = getelementptr inbounds %class.KV.10, %class.KV.10* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.10, %class.KV.10* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.10*, %class.KV.10** %12, align 8
  %113 = getelementptr inbounds %class.KV.10, %class.KV.10* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.10, %class.KV.10* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.10*, %class.KV.10** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %121, i32 %122, i32 %123, %class.KV.10* dereferenceable(16) %20)
  store %class.KV.10* %124, %class.KV.10** %21, align 8
  %125 = load %class.KV.9*, %class.KV.9** %7, align 8
  %126 = getelementptr inbounds %class.KV.9, %class.KV.9* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.10*, %class.KV.10** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %128, %class.KV.10* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.10*, %class.KV.10** %12, align 8
  %134 = getelementptr inbounds %class.KV.10, %class.KV.10* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.10* sret %22, %class.KV.10* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.10*, %class.KV.10** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %140, i32 %141, i32 %142, %class.KV.10* dereferenceable(16) %22)
  store %class.KV.10* %143, %class.KV.10** %23, align 8
  %144 = load %class.KV.9*, %class.KV.9** %7, align 8
  %145 = getelementptr inbounds %class.KV.9, %class.KV.9* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.10*, %class.KV.10** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %147, %class.KV.10* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.10*
  store %class.KV.10* %158, %class.KV.10** %24, align 8
  %159 = load %class.KV.10*, %class.KV.10** %24, align 8
  %160 = bitcast %class.KV.10* %159 to i8*
  %161 = load %class.KV.10*, %class.KV.10** %12, align 8
  %162 = bitcast %class.KV.10* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.10*, %class.KV.10** %24, align 8
  %170 = getelementptr inbounds %class.KV.10, %class.KV.10* %169, i64 %168
  %171 = bitcast %class.KV.10* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.10*, %class.KV.10** %12, align 8
  %175 = getelementptr inbounds %class.KV.10, %class.KV.10* %174, i64 %173
  %176 = bitcast %class.KV.10* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.10*, %class.KV.10** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.10, %class.KV.10* %182, i64 %184
  %186 = bitcast %class.KV.10* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.10*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.10*, %class.KV.10** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %196, %class.KV.10* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10*, i32, i32, %class.KV.10* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.10*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.10*, align 8
  %9 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.10* %3, %class.KV.10** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.10*
  store %class.KV.10* %14, %class.KV.10** %9, align 8
  %15 = load %class.KV.10*, %class.KV.10** %9, align 8
  %16 = bitcast %class.KV.10* %15 to i8*
  %17 = load %class.KV.10*, %class.KV.10** %5, align 8
  %18 = bitcast %class.KV.10* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.10*, %class.KV.10** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.10, %class.KV.10* %22, i64 %24
  %26 = bitcast %class.KV.10* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.10*
  %28 = load %class.KV.10*, %class.KV.10** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %27, %class.KV.10* dereferenceable(16) %28)
  %29 = load %class.KV.10*, %class.KV.10** %9, align 8
  ret %class.KV.10* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.10* noalias sret, %class.KV.10* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.10*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.LL*, align 8
  %13 = alloca %class.LL*, align 8
  %14 = alloca %class.LL*, align 8
  store %class.KV.10* %1, %class.KV.10** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %15 = load %class.KV.10*, %class.KV.10** %7, align 8
  %16 = getelementptr inbounds %class.KV.10, %class.KV.10* %15, i32 0, i32 0
  %17 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %58

; <label>:21                                      ; preds = %6
  %22 = load %class.KV.10*, %class.KV.10** %7, align 8
  %23 = getelementptr inbounds %class.KV.10, %class.KV.10* %22, i32 0, i32 0
  %24 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %23 to %class.c_d**
  %25 = load %class.c_d*, %class.c_d** %24, align 8
  %26 = load %class.c_d*, %class.c_d** %9, align 8
  %27 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %25, %class.c_d* dereferenceable(8) %26)
  br i1 %27, label %28, label %34

; <label>:28                                      ; preds = %21
  %29 = load %class.KV.10*, %class.KV.10** %7, align 8
  %30 = getelementptr inbounds %class.KV.10, %class.KV.10* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %30 to %class.c_d**
  %32 = load %class.c_d*, %class.c_d** %31, align 8
  %33 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %0, %class.c_d* %32, %class.c_d* %33)
  br label %84

; <label>:34                                      ; preds = %21
  %35 = load i64*, i64** %11, align 8
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %35, align 8
  %38 = call i8* @malloc(i64 24)
  %39 = bitcast i8* %38 to %class.LL*
  %40 = bitcast %class.LL* %39 to i8*
  %41 = bitcast i8* %40 to %class.LL*
  %42 = load %class.c_d*, %class.c_d** %9, align 8
  %43 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %41, %class.c_d* %42, %class.c_d* %43, %class.LL* null)
  store %class.LL* %41, %class.LL** %12, align 8
  %44 = call i8* @malloc(i64 24)
  %45 = bitcast i8* %44 to %class.LL*
  %46 = bitcast %class.LL* %45 to i8*
  %47 = bitcast i8* %46 to %class.LL*
  %48 = load %class.KV.10*, %class.KV.10** %7, align 8
  %49 = getelementptr inbounds %class.KV.10, %class.KV.10* %48, i32 0, i32 0
  %50 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %49 to %class.c_d**
  %51 = load %class.c_d*, %class.c_d** %50, align 8
  %52 = load %class.KV.10*, %class.KV.10** %7, align 8
  %53 = getelementptr inbounds %class.KV.10, %class.KV.10* %52, i32 0, i32 1
  %54 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %53 to %class.c_d**
  %55 = load %class.c_d*, %class.c_d** %54, align 8
  %56 = load %class.LL*, %class.LL** %12, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %47, %class.c_d* %51, %class.c_d* %55, %class.LL* %56)
  store %class.LL* %47, %class.LL** %13, align 8
  %57 = load %class.LL*, %class.LL** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %57)
  br label %84

; <label>:58                                      ; preds = %6
  %59 = load %class.KV.10*, %class.KV.10** %7, align 8
  %60 = getelementptr inbounds %class.KV.10, %class.KV.10* %59, i32 0, i32 1
  %61 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %60 to %class.LL**
  %62 = load %class.LL*, %class.LL** %61, align 8
  %63 = icmp ne %class.LL* %62, null
  br i1 %63, label %64, label %73

; <label>:64                                      ; preds = %58
  %65 = load %class.KV.10*, %class.KV.10** %7, align 8
  %66 = getelementptr inbounds %class.KV.10, %class.KV.10* %65, i32 0, i32 1
  %67 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %66 to %class.LL**
  %68 = load %class.LL*, %class.LL** %67, align 8
  %69 = load %class.c_d*, %class.c_d** %9, align 8
  %70 = load %class.c_d*, %class.c_d** %10, align 8
  %71 = load i64*, i64** %11, align 8
  %72 = call %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL* %68, %class.c_d* %69, %class.c_d* %70, i64* %71)
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %72)
  br label %84

; <label>:73                                      ; preds = %58
  %74 = load i64*, i64** %11, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  %77 = call i8* @malloc(i64 24)
  %78 = bitcast i8* %77 to %class.LL*
  %79 = bitcast %class.LL* %78 to i8*
  %80 = bitcast i8* %79 to %class.LL*
  %81 = load %class.c_d*, %class.c_d** %9, align 8
  %82 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %80, %class.c_d* %81, %class.c_d* %82, %class.LL* null)
  store %class.LL* %80, %class.LL** %14, align 8
  %83 = load %class.LL*, %class.LL** %14, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %83)
  br label %84

; <label>:84                                      ; preds = %73, %64, %34, %28
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL*, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.LL*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.LL*, align 8
  %11 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %6, align 8
  store %class.c_d* %1, %class.c_d** %7, align 8
  store %class.c_d* %2, %class.c_d** %8, align 8
  store i64* %3, i64** %9, align 8
  %12 = load %class.LL*, %class.LL** %6, align 8
  %13 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %14 = load %class.c_d*, %class.c_d** %13, align 8
  %15 = load %class.c_d*, %class.c_d** %7, align 8
  %16 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %14, %class.c_d* dereferenceable(8) %15)
  br i1 %16, label %17, label %27

; <label>:17                                      ; preds = %4
  %18 = call i8* @malloc(i64 24)
  %19 = bitcast i8* %18 to %class.LL*
  %20 = bitcast %class.LL* %19 to i8*
  %21 = bitcast i8* %20 to %class.LL*
  %22 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %23 = load %class.c_d*, %class.c_d** %22, align 8
  %24 = load %class.c_d*, %class.c_d** %8, align 8
  %25 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %26 = load %class.LL*, %class.LL** %25, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %21, %class.c_d* %23, %class.c_d* %24, %class.LL* %26)
  store %class.LL* %21, %class.LL** %5, align 8
  br label %66

; <label>:27                                      ; preds = %4
  %28 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %29 = load %class.LL*, %class.LL** %28, align 8
  %30 = icmp ne %class.LL* %29, null
  br i1 %30, label %31, label %46

; <label>:31                                      ; preds = %27
  %32 = call i8* @malloc(i64 24)
  %33 = bitcast i8* %32 to %class.LL*
  %34 = bitcast %class.LL* %33 to i8*
  %35 = bitcast i8* %34 to %class.LL*
  %36 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %37 = load %class.c_d*, %class.c_d** %36, align 8
  %38 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 1
  %39 = load %class.c_d*, %class.c_d** %38, align 8
  %40 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %41 = load %class.LL*, %class.LL** %40, align 8
  %42 = load %class.c_d*, %class.c_d** %7, align 8
  %43 = load %class.c_d*, %class.c_d** %8, align 8
  %44 = load i64*, i64** %9, align 8
  %45 = call %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL* %41, %class.c_d* %42, %class.c_d* %43, i64* %44)
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %35, %class.c_d* %37, %class.c_d* %39, %class.LL* %45)
  store %class.LL* %35, %class.LL** %5, align 8
  br label %66

; <label>:46                                      ; preds = %27
  %47 = load i64*, i64** %9, align 8
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %47, align 8
  %50 = call i8* @malloc(i64 24)
  %51 = bitcast i8* %50 to %class.LL*
  %52 = bitcast %class.LL* %51 to i8*
  %53 = bitcast i8* %52 to %class.LL*
  %54 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %55 = load %class.c_d*, %class.c_d** %54, align 8
  %56 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 1
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %53, %class.c_d* %55, %class.c_d* %57, %class.LL* null)
  store %class.LL* %53, %class.LL** %10, align 8
  %58 = call i8* @malloc(i64 24)
  %59 = bitcast i8* %58 to %class.LL*
  %60 = bitcast %class.LL* %59 to i8*
  %61 = bitcast i8* %60 to %class.LL*
  %62 = load %class.c_d*, %class.c_d** %7, align 8
  %63 = load %class.c_d*, %class.c_d** %8, align 8
  %64 = load %class.LL*, %class.LL** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %61, %class.c_d* %62, %class.c_d* %63, %class.LL* %64)
  store %class.LL* %61, %class.LL** %11, align 8
  %65 = load %class.LL*, %class.LL** %11, align 8
  store %class.LL* %65, %class.LL** %5, align 8
  br label %66

; <label>:66                                      ; preds = %46, %31, %17
  %67 = load %class.LL*, %class.LL** %5, align 8
  ret %class.LL* %67
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE12remove_innerERKS1_yPKS0_Py(%class.KV* noalias sret, %class.KV* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.0*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.0*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.0, align 8
  %19 = alloca %class.KV.0*, align 8
  store %class.KV* %1, %class.KV** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV*, %class.KV** %6, align 8
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %21 to %class.KV.0**
  %23 = load %class.KV.0*, %class.KV.0** %22, align 8
  store %class.KV.0* %23, %class.KV.0** %10, align 8
  %24 = load %class.KV*, %class.KV** %6, align 8
  %25 = getelementptr inbounds %class.KV, %class.KV* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.0*, %class.KV.0** %10, align 8
  %57 = getelementptr inbounds %class.KV.0, %class.KV.0* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.0, %class.KV.0* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.0*, %class.KV.0** %10, align 8
  %67 = getelementptr inbounds %class.KV.0, %class.KV.0* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.0, %class.KV.0* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.0*
  store %class.KV.0* %82, %class.KV.0** %16, align 8
  %83 = load %class.KV.0*, %class.KV.0** %16, align 8
  %84 = bitcast %class.KV.0* %83 to i8*
  %85 = load %class.KV.0*, %class.KV.0** %10, align 8
  %86 = bitcast %class.KV.0* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.0*, %class.KV.0** %16, align 8
  %93 = getelementptr inbounds %class.KV.0, %class.KV.0* %92, i64 %91
  %94 = bitcast %class.KV.0* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.0*, %class.KV.0** %10, align 8
  %99 = getelementptr inbounds %class.KV.0, %class.KV.0* %98, i64 %97
  %100 = bitcast %class.KV.0* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.0*, %class.KV.0** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %115, %class.KV.0* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.0*, %class.KV.0** %10, align 8
  %123 = getelementptr inbounds %class.KV.0, %class.KV.0* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE12remove_innerERKS1_yPKS0_Py(%class.KV.0* sret %18, %class.KV.0* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.0*, %class.KV.0** %10, align 8
  %131 = getelementptr inbounds %class.KV.0, %class.KV.0* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj1EEeqERKS1_(%class.KV.0* %18, %class.KV.0* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.0*, %class.KV.0** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %136, i32 %137, i32 %138, %class.KV.0* dereferenceable(16) %18)
  store %class.KV.0* %139, %class.KV.0** %19, align 8
  %140 = load %class.KV*, %class.KV** %6, align 8
  %141 = getelementptr inbounds %class.KV, %class.KV* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.0*, %class.KV.0** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %143, %class.KV.0* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj0EEeqERKS1_(%class.KV*, %class.KV* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV*, %class.KV** %4, align 8
  %10 = getelementptr inbounds %class.KV, %class.KV* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %15 to %class.KV.0**
  %17 = load %class.KV.0*, %class.KV.0** %16, align 8
  %18 = load %class.KV*, %class.KV** %4, align 8
  %19 = getelementptr inbounds %class.KV, %class.KV* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %19 to %class.KV.0**
  %21 = load %class.KV.0*, %class.KV.0** %20, align 8
  %22 = icmp eq %class.KV.0* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV*, %class.KV* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = load %class.KV*, %class.KV** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2ERKS1_(%class.KV* %5, %class.KV* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE12remove_innerERKS1_yPKS0_Py(%class.KV.0* noalias sret, %class.KV.0* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.0*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.2*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.2*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.2, align 8
  %19 = alloca %class.KV.2*, align 8
  store %class.KV.0* %1, %class.KV.0** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.0*, %class.KV.0** %6, align 8
  %21 = getelementptr inbounds %class.KV.0, %class.KV.0* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %21 to %class.KV.2**
  %23 = load %class.KV.2*, %class.KV.2** %22, align 8
  store %class.KV.2* %23, %class.KV.2** %10, align 8
  %24 = load %class.KV.0*, %class.KV.0** %6, align 8
  %25 = getelementptr inbounds %class.KV.0, %class.KV.0* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.2*, %class.KV.2** %10, align 8
  %57 = getelementptr inbounds %class.KV.2, %class.KV.2* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.2, %class.KV.2* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.2*, %class.KV.2** %10, align 8
  %67 = getelementptr inbounds %class.KV.2, %class.KV.2* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.2, %class.KV.2* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.2*
  store %class.KV.2* %82, %class.KV.2** %16, align 8
  %83 = load %class.KV.2*, %class.KV.2** %16, align 8
  %84 = bitcast %class.KV.2* %83 to i8*
  %85 = load %class.KV.2*, %class.KV.2** %10, align 8
  %86 = bitcast %class.KV.2* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.2*, %class.KV.2** %16, align 8
  %93 = getelementptr inbounds %class.KV.2, %class.KV.2* %92, i64 %91
  %94 = bitcast %class.KV.2* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.2*, %class.KV.2** %10, align 8
  %99 = getelementptr inbounds %class.KV.2, %class.KV.2* %98, i64 %97
  %100 = bitcast %class.KV.2* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.2*, %class.KV.2** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %115, %class.KV.2* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.2*, %class.KV.2** %10, align 8
  %123 = getelementptr inbounds %class.KV.2, %class.KV.2* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE12remove_innerERKS1_yPKS0_Py(%class.KV.2* sret %18, %class.KV.2* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.2*, %class.KV.2** %10, align 8
  %131 = getelementptr inbounds %class.KV.2, %class.KV.2* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj2EEeqERKS1_(%class.KV.2* %18, %class.KV.2* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.2*, %class.KV.2** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %136, i32 %137, i32 %138, %class.KV.2* dereferenceable(16) %18)
  store %class.KV.2* %139, %class.KV.2** %19, align 8
  %140 = load %class.KV.0*, %class.KV.0** %6, align 8
  %141 = getelementptr inbounds %class.KV.0, %class.KV.0* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.2*, %class.KV.2** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %143, %class.KV.2* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj1EEeqERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.0*, %class.KV.0** %4, align 8
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %15 to %class.KV.2**
  %17 = load %class.KV.2*, %class.KV.2** %16, align 8
  %18 = load %class.KV.0*, %class.KV.0** %4, align 8
  %19 = getelementptr inbounds %class.KV.0, %class.KV.0* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %19 to %class.KV.2**
  %21 = load %class.KV.2*, %class.KV.2** %20, align 8
  %22 = icmp eq %class.KV.2* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE12remove_innerERKS1_yPKS0_Py(%class.KV.2* noalias sret, %class.KV.2* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.2*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.3*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.3*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.3, align 8
  %19 = alloca %class.KV.3*, align 8
  store %class.KV.2* %1, %class.KV.2** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.2*, %class.KV.2** %6, align 8
  %21 = getelementptr inbounds %class.KV.2, %class.KV.2* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %21 to %class.KV.3**
  %23 = load %class.KV.3*, %class.KV.3** %22, align 8
  store %class.KV.3* %23, %class.KV.3** %10, align 8
  %24 = load %class.KV.2*, %class.KV.2** %6, align 8
  %25 = getelementptr inbounds %class.KV.2, %class.KV.2* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.3*, %class.KV.3** %10, align 8
  %57 = getelementptr inbounds %class.KV.3, %class.KV.3* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.3, %class.KV.3* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.3*, %class.KV.3** %10, align 8
  %67 = getelementptr inbounds %class.KV.3, %class.KV.3* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.3, %class.KV.3* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.3*
  store %class.KV.3* %82, %class.KV.3** %16, align 8
  %83 = load %class.KV.3*, %class.KV.3** %16, align 8
  %84 = bitcast %class.KV.3* %83 to i8*
  %85 = load %class.KV.3*, %class.KV.3** %10, align 8
  %86 = bitcast %class.KV.3* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.3*, %class.KV.3** %16, align 8
  %93 = getelementptr inbounds %class.KV.3, %class.KV.3* %92, i64 %91
  %94 = bitcast %class.KV.3* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.3*, %class.KV.3** %10, align 8
  %99 = getelementptr inbounds %class.KV.3, %class.KV.3* %98, i64 %97
  %100 = bitcast %class.KV.3* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.3*, %class.KV.3** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %115, %class.KV.3* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.3*, %class.KV.3** %10, align 8
  %123 = getelementptr inbounds %class.KV.3, %class.KV.3* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE12remove_innerERKS1_yPKS0_Py(%class.KV.3* sret %18, %class.KV.3* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.3*, %class.KV.3** %10, align 8
  %131 = getelementptr inbounds %class.KV.3, %class.KV.3* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj3EEeqERKS1_(%class.KV.3* %18, %class.KV.3* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.3*, %class.KV.3** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %136, i32 %137, i32 %138, %class.KV.3* dereferenceable(16) %18)
  store %class.KV.3* %139, %class.KV.3** %19, align 8
  %140 = load %class.KV.2*, %class.KV.2** %6, align 8
  %141 = getelementptr inbounds %class.KV.2, %class.KV.2* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.3*, %class.KV.3** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %143, %class.KV.3* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj2EEeqERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.2*, %class.KV.2** %4, align 8
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %15 to %class.KV.3**
  %17 = load %class.KV.3*, %class.KV.3** %16, align 8
  %18 = load %class.KV.2*, %class.KV.2** %4, align 8
  %19 = getelementptr inbounds %class.KV.2, %class.KV.2* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %19 to %class.KV.3**
  %21 = load %class.KV.3*, %class.KV.3** %20, align 8
  %22 = icmp eq %class.KV.3* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE12remove_innerERKS1_yPKS0_Py(%class.KV.3* noalias sret, %class.KV.3* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.3*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.4*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.4*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.4, align 8
  %19 = alloca %class.KV.4*, align 8
  store %class.KV.3* %1, %class.KV.3** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.3*, %class.KV.3** %6, align 8
  %21 = getelementptr inbounds %class.KV.3, %class.KV.3* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %21 to %class.KV.4**
  %23 = load %class.KV.4*, %class.KV.4** %22, align 8
  store %class.KV.4* %23, %class.KV.4** %10, align 8
  %24 = load %class.KV.3*, %class.KV.3** %6, align 8
  %25 = getelementptr inbounds %class.KV.3, %class.KV.3* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.4*, %class.KV.4** %10, align 8
  %57 = getelementptr inbounds %class.KV.4, %class.KV.4* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.4, %class.KV.4* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.4*, %class.KV.4** %10, align 8
  %67 = getelementptr inbounds %class.KV.4, %class.KV.4* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.4, %class.KV.4* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.4*
  store %class.KV.4* %82, %class.KV.4** %16, align 8
  %83 = load %class.KV.4*, %class.KV.4** %16, align 8
  %84 = bitcast %class.KV.4* %83 to i8*
  %85 = load %class.KV.4*, %class.KV.4** %10, align 8
  %86 = bitcast %class.KV.4* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.4*, %class.KV.4** %16, align 8
  %93 = getelementptr inbounds %class.KV.4, %class.KV.4* %92, i64 %91
  %94 = bitcast %class.KV.4* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.4*, %class.KV.4** %10, align 8
  %99 = getelementptr inbounds %class.KV.4, %class.KV.4* %98, i64 %97
  %100 = bitcast %class.KV.4* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.4*, %class.KV.4** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %115, %class.KV.4* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.4*, %class.KV.4** %10, align 8
  %123 = getelementptr inbounds %class.KV.4, %class.KV.4* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE12remove_innerERKS1_yPKS0_Py(%class.KV.4* sret %18, %class.KV.4* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.4*, %class.KV.4** %10, align 8
  %131 = getelementptr inbounds %class.KV.4, %class.KV.4* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj4EEeqERKS1_(%class.KV.4* %18, %class.KV.4* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.4*, %class.KV.4** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %136, i32 %137, i32 %138, %class.KV.4* dereferenceable(16) %18)
  store %class.KV.4* %139, %class.KV.4** %19, align 8
  %140 = load %class.KV.3*, %class.KV.3** %6, align 8
  %141 = getelementptr inbounds %class.KV.3, %class.KV.3* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.4*, %class.KV.4** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %143, %class.KV.4* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj3EEeqERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.3*, %class.KV.3** %4, align 8
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %15 to %class.KV.4**
  %17 = load %class.KV.4*, %class.KV.4** %16, align 8
  %18 = load %class.KV.3*, %class.KV.3** %4, align 8
  %19 = getelementptr inbounds %class.KV.3, %class.KV.3* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %19 to %class.KV.4**
  %21 = load %class.KV.4*, %class.KV.4** %20, align 8
  %22 = icmp eq %class.KV.4* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE12remove_innerERKS1_yPKS0_Py(%class.KV.4* noalias sret, %class.KV.4* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.4*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.5*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.5*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.5, align 8
  %19 = alloca %class.KV.5*, align 8
  store %class.KV.4* %1, %class.KV.4** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.4*, %class.KV.4** %6, align 8
  %21 = getelementptr inbounds %class.KV.4, %class.KV.4* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %21 to %class.KV.5**
  %23 = load %class.KV.5*, %class.KV.5** %22, align 8
  store %class.KV.5* %23, %class.KV.5** %10, align 8
  %24 = load %class.KV.4*, %class.KV.4** %6, align 8
  %25 = getelementptr inbounds %class.KV.4, %class.KV.4* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.5*, %class.KV.5** %10, align 8
  %57 = getelementptr inbounds %class.KV.5, %class.KV.5* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.5, %class.KV.5* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.5*, %class.KV.5** %10, align 8
  %67 = getelementptr inbounds %class.KV.5, %class.KV.5* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.5, %class.KV.5* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.5*
  store %class.KV.5* %82, %class.KV.5** %16, align 8
  %83 = load %class.KV.5*, %class.KV.5** %16, align 8
  %84 = bitcast %class.KV.5* %83 to i8*
  %85 = load %class.KV.5*, %class.KV.5** %10, align 8
  %86 = bitcast %class.KV.5* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.5*, %class.KV.5** %16, align 8
  %93 = getelementptr inbounds %class.KV.5, %class.KV.5* %92, i64 %91
  %94 = bitcast %class.KV.5* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.5*, %class.KV.5** %10, align 8
  %99 = getelementptr inbounds %class.KV.5, %class.KV.5* %98, i64 %97
  %100 = bitcast %class.KV.5* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.5*, %class.KV.5** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %115, %class.KV.5* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.5*, %class.KV.5** %10, align 8
  %123 = getelementptr inbounds %class.KV.5, %class.KV.5* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE12remove_innerERKS1_yPKS0_Py(%class.KV.5* sret %18, %class.KV.5* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.5*, %class.KV.5** %10, align 8
  %131 = getelementptr inbounds %class.KV.5, %class.KV.5* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj5EEeqERKS1_(%class.KV.5* %18, %class.KV.5* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.5*, %class.KV.5** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %136, i32 %137, i32 %138, %class.KV.5* dereferenceable(16) %18)
  store %class.KV.5* %139, %class.KV.5** %19, align 8
  %140 = load %class.KV.4*, %class.KV.4** %6, align 8
  %141 = getelementptr inbounds %class.KV.4, %class.KV.4* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.5*, %class.KV.5** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %143, %class.KV.5* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj4EEeqERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.4*, %class.KV.4** %4, align 8
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %15 to %class.KV.5**
  %17 = load %class.KV.5*, %class.KV.5** %16, align 8
  %18 = load %class.KV.4*, %class.KV.4** %4, align 8
  %19 = getelementptr inbounds %class.KV.4, %class.KV.4* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %19 to %class.KV.5**
  %21 = load %class.KV.5*, %class.KV.5** %20, align 8
  %22 = icmp eq %class.KV.5* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE12remove_innerERKS1_yPKS0_Py(%class.KV.5* noalias sret, %class.KV.5* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.5*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.6*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.6*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.6, align 8
  %19 = alloca %class.KV.6*, align 8
  store %class.KV.5* %1, %class.KV.5** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.5*, %class.KV.5** %6, align 8
  %21 = getelementptr inbounds %class.KV.5, %class.KV.5* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %21 to %class.KV.6**
  %23 = load %class.KV.6*, %class.KV.6** %22, align 8
  store %class.KV.6* %23, %class.KV.6** %10, align 8
  %24 = load %class.KV.5*, %class.KV.5** %6, align 8
  %25 = getelementptr inbounds %class.KV.5, %class.KV.5* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.6*, %class.KV.6** %10, align 8
  %57 = getelementptr inbounds %class.KV.6, %class.KV.6* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.6, %class.KV.6* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.6*, %class.KV.6** %10, align 8
  %67 = getelementptr inbounds %class.KV.6, %class.KV.6* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.6, %class.KV.6* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.6*
  store %class.KV.6* %82, %class.KV.6** %16, align 8
  %83 = load %class.KV.6*, %class.KV.6** %16, align 8
  %84 = bitcast %class.KV.6* %83 to i8*
  %85 = load %class.KV.6*, %class.KV.6** %10, align 8
  %86 = bitcast %class.KV.6* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.6*, %class.KV.6** %16, align 8
  %93 = getelementptr inbounds %class.KV.6, %class.KV.6* %92, i64 %91
  %94 = bitcast %class.KV.6* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.6*, %class.KV.6** %10, align 8
  %99 = getelementptr inbounds %class.KV.6, %class.KV.6* %98, i64 %97
  %100 = bitcast %class.KV.6* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.6*, %class.KV.6** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %115, %class.KV.6* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.6*, %class.KV.6** %10, align 8
  %123 = getelementptr inbounds %class.KV.6, %class.KV.6* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE12remove_innerERKS1_yPKS0_Py(%class.KV.6* sret %18, %class.KV.6* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.6*, %class.KV.6** %10, align 8
  %131 = getelementptr inbounds %class.KV.6, %class.KV.6* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj6EEeqERKS1_(%class.KV.6* %18, %class.KV.6* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.6*, %class.KV.6** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %136, i32 %137, i32 %138, %class.KV.6* dereferenceable(16) %18)
  store %class.KV.6* %139, %class.KV.6** %19, align 8
  %140 = load %class.KV.5*, %class.KV.5** %6, align 8
  %141 = getelementptr inbounds %class.KV.5, %class.KV.5* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.6*, %class.KV.6** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %143, %class.KV.6* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj5EEeqERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.5*, %class.KV.5** %4, align 8
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %15 to %class.KV.6**
  %17 = load %class.KV.6*, %class.KV.6** %16, align 8
  %18 = load %class.KV.5*, %class.KV.5** %4, align 8
  %19 = getelementptr inbounds %class.KV.5, %class.KV.5* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %19 to %class.KV.6**
  %21 = load %class.KV.6*, %class.KV.6** %20, align 8
  %22 = icmp eq %class.KV.6* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE12remove_innerERKS1_yPKS0_Py(%class.KV.6* noalias sret, %class.KV.6* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.6*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.7*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.7*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.7, align 8
  %19 = alloca %class.KV.7*, align 8
  store %class.KV.6* %1, %class.KV.6** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.6*, %class.KV.6** %6, align 8
  %21 = getelementptr inbounds %class.KV.6, %class.KV.6* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %21 to %class.KV.7**
  %23 = load %class.KV.7*, %class.KV.7** %22, align 8
  store %class.KV.7* %23, %class.KV.7** %10, align 8
  %24 = load %class.KV.6*, %class.KV.6** %6, align 8
  %25 = getelementptr inbounds %class.KV.6, %class.KV.6* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.7*, %class.KV.7** %10, align 8
  %57 = getelementptr inbounds %class.KV.7, %class.KV.7* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.7, %class.KV.7* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.7*, %class.KV.7** %10, align 8
  %67 = getelementptr inbounds %class.KV.7, %class.KV.7* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.7, %class.KV.7* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.7*
  store %class.KV.7* %82, %class.KV.7** %16, align 8
  %83 = load %class.KV.7*, %class.KV.7** %16, align 8
  %84 = bitcast %class.KV.7* %83 to i8*
  %85 = load %class.KV.7*, %class.KV.7** %10, align 8
  %86 = bitcast %class.KV.7* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.7*, %class.KV.7** %16, align 8
  %93 = getelementptr inbounds %class.KV.7, %class.KV.7* %92, i64 %91
  %94 = bitcast %class.KV.7* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.7*, %class.KV.7** %10, align 8
  %99 = getelementptr inbounds %class.KV.7, %class.KV.7* %98, i64 %97
  %100 = bitcast %class.KV.7* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.7*, %class.KV.7** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %115, %class.KV.7* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.7*, %class.KV.7** %10, align 8
  %123 = getelementptr inbounds %class.KV.7, %class.KV.7* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE12remove_innerERKS1_yPKS0_Py(%class.KV.7* sret %18, %class.KV.7* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.7*, %class.KV.7** %10, align 8
  %131 = getelementptr inbounds %class.KV.7, %class.KV.7* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj7EEeqERKS1_(%class.KV.7* %18, %class.KV.7* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.7*, %class.KV.7** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %136, i32 %137, i32 %138, %class.KV.7* dereferenceable(16) %18)
  store %class.KV.7* %139, %class.KV.7** %19, align 8
  %140 = load %class.KV.6*, %class.KV.6** %6, align 8
  %141 = getelementptr inbounds %class.KV.6, %class.KV.6* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.7*, %class.KV.7** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %143, %class.KV.7* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj6EEeqERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.6*, %class.KV.6** %4, align 8
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %15 to %class.KV.7**
  %17 = load %class.KV.7*, %class.KV.7** %16, align 8
  %18 = load %class.KV.6*, %class.KV.6** %4, align 8
  %19 = getelementptr inbounds %class.KV.6, %class.KV.6* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %19 to %class.KV.7**
  %21 = load %class.KV.7*, %class.KV.7** %20, align 8
  %22 = icmp eq %class.KV.7* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE12remove_innerERKS1_yPKS0_Py(%class.KV.7* noalias sret, %class.KV.7* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.7*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.8, align 8
  %19 = alloca %class.KV.8*, align 8
  store %class.KV.7* %1, %class.KV.7** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.7*, %class.KV.7** %6, align 8
  %21 = getelementptr inbounds %class.KV.7, %class.KV.7* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %21 to %class.KV.8**
  %23 = load %class.KV.8*, %class.KV.8** %22, align 8
  store %class.KV.8* %23, %class.KV.8** %10, align 8
  %24 = load %class.KV.7*, %class.KV.7** %6, align 8
  %25 = getelementptr inbounds %class.KV.7, %class.KV.7* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.8*, %class.KV.8** %10, align 8
  %57 = getelementptr inbounds %class.KV.8, %class.KV.8* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.8, %class.KV.8* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.8*, %class.KV.8** %10, align 8
  %67 = getelementptr inbounds %class.KV.8, %class.KV.8* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.8, %class.KV.8* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.8*
  store %class.KV.8* %82, %class.KV.8** %16, align 8
  %83 = load %class.KV.8*, %class.KV.8** %16, align 8
  %84 = bitcast %class.KV.8* %83 to i8*
  %85 = load %class.KV.8*, %class.KV.8** %10, align 8
  %86 = bitcast %class.KV.8* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.8*, %class.KV.8** %16, align 8
  %93 = getelementptr inbounds %class.KV.8, %class.KV.8* %92, i64 %91
  %94 = bitcast %class.KV.8* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.8*, %class.KV.8** %10, align 8
  %99 = getelementptr inbounds %class.KV.8, %class.KV.8* %98, i64 %97
  %100 = bitcast %class.KV.8* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.8*, %class.KV.8** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %115, %class.KV.8* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.8*, %class.KV.8** %10, align 8
  %123 = getelementptr inbounds %class.KV.8, %class.KV.8* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE12remove_innerERKS1_yPKS0_Py(%class.KV.8* sret %18, %class.KV.8* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.8*, %class.KV.8** %10, align 8
  %131 = getelementptr inbounds %class.KV.8, %class.KV.8* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj8EEeqERKS1_(%class.KV.8* %18, %class.KV.8* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.8*, %class.KV.8** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %136, i32 %137, i32 %138, %class.KV.8* dereferenceable(16) %18)
  store %class.KV.8* %139, %class.KV.8** %19, align 8
  %140 = load %class.KV.7*, %class.KV.7** %6, align 8
  %141 = getelementptr inbounds %class.KV.7, %class.KV.7* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.8*, %class.KV.8** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %143, %class.KV.8* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj7EEeqERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.7*, %class.KV.7** %4, align 8
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %15 to %class.KV.8**
  %17 = load %class.KV.8*, %class.KV.8** %16, align 8
  %18 = load %class.KV.7*, %class.KV.7** %4, align 8
  %19 = getelementptr inbounds %class.KV.7, %class.KV.7* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %19 to %class.KV.8**
  %21 = load %class.KV.8*, %class.KV.8** %20, align 8
  %22 = icmp eq %class.KV.8* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE12remove_innerERKS1_yPKS0_Py(%class.KV.8* noalias sret, %class.KV.8* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.9*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.9*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.9, align 8
  %19 = alloca %class.KV.9*, align 8
  store %class.KV.8* %1, %class.KV.8** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.8*, %class.KV.8** %6, align 8
  %21 = getelementptr inbounds %class.KV.8, %class.KV.8* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %21 to %class.KV.9**
  %23 = load %class.KV.9*, %class.KV.9** %22, align 8
  store %class.KV.9* %23, %class.KV.9** %10, align 8
  %24 = load %class.KV.8*, %class.KV.8** %6, align 8
  %25 = getelementptr inbounds %class.KV.8, %class.KV.8* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.9*, %class.KV.9** %10, align 8
  %57 = getelementptr inbounds %class.KV.9, %class.KV.9* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.9, %class.KV.9* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.9*, %class.KV.9** %10, align 8
  %67 = getelementptr inbounds %class.KV.9, %class.KV.9* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.9, %class.KV.9* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.9*
  store %class.KV.9* %82, %class.KV.9** %16, align 8
  %83 = load %class.KV.9*, %class.KV.9** %16, align 8
  %84 = bitcast %class.KV.9* %83 to i8*
  %85 = load %class.KV.9*, %class.KV.9** %10, align 8
  %86 = bitcast %class.KV.9* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.9*, %class.KV.9** %16, align 8
  %93 = getelementptr inbounds %class.KV.9, %class.KV.9* %92, i64 %91
  %94 = bitcast %class.KV.9* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.9*, %class.KV.9** %10, align 8
  %99 = getelementptr inbounds %class.KV.9, %class.KV.9* %98, i64 %97
  %100 = bitcast %class.KV.9* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.9*, %class.KV.9** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %115, %class.KV.9* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.9*, %class.KV.9** %10, align 8
  %123 = getelementptr inbounds %class.KV.9, %class.KV.9* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE12remove_innerERKS1_yPKS0_Py(%class.KV.9* sret %18, %class.KV.9* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.9*, %class.KV.9** %10, align 8
  %131 = getelementptr inbounds %class.KV.9, %class.KV.9* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj9EEeqERKS1_(%class.KV.9* %18, %class.KV.9* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.9*, %class.KV.9** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %136, i32 %137, i32 %138, %class.KV.9* dereferenceable(16) %18)
  store %class.KV.9* %139, %class.KV.9** %19, align 8
  %140 = load %class.KV.8*, %class.KV.8** %6, align 8
  %141 = getelementptr inbounds %class.KV.8, %class.KV.8* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.9*, %class.KV.9** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %143, %class.KV.9* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj8EEeqERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.8*, %class.KV.8** %4, align 8
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %15 to %class.KV.9**
  %17 = load %class.KV.9*, %class.KV.9** %16, align 8
  %18 = load %class.KV.8*, %class.KV.8** %4, align 8
  %19 = getelementptr inbounds %class.KV.8, %class.KV.8* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %19 to %class.KV.9**
  %21 = load %class.KV.9*, %class.KV.9** %20, align 8
  %22 = icmp eq %class.KV.9* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE12remove_innerERKS1_yPKS0_Py(%class.KV.9* noalias sret, %class.KV.9* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.9*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.10*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.10*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.10, align 8
  %19 = alloca %class.KV.10*, align 8
  store %class.KV.9* %1, %class.KV.9** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.9*, %class.KV.9** %6, align 8
  %21 = getelementptr inbounds %class.KV.9, %class.KV.9* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %21 to %class.KV.10**
  %23 = load %class.KV.10*, %class.KV.10** %22, align 8
  store %class.KV.10* %23, %class.KV.10** %10, align 8
  %24 = load %class.KV.9*, %class.KV.9** %6, align 8
  %25 = getelementptr inbounds %class.KV.9, %class.KV.9* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.10*, %class.KV.10** %10, align 8
  %57 = getelementptr inbounds %class.KV.10, %class.KV.10* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.10, %class.KV.10* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.10*, %class.KV.10** %10, align 8
  %67 = getelementptr inbounds %class.KV.10, %class.KV.10* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.10, %class.KV.10* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.10*
  store %class.KV.10* %82, %class.KV.10** %16, align 8
  %83 = load %class.KV.10*, %class.KV.10** %16, align 8
  %84 = bitcast %class.KV.10* %83 to i8*
  %85 = load %class.KV.10*, %class.KV.10** %10, align 8
  %86 = bitcast %class.KV.10* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.10*, %class.KV.10** %16, align 8
  %93 = getelementptr inbounds %class.KV.10, %class.KV.10* %92, i64 %91
  %94 = bitcast %class.KV.10* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.10*, %class.KV.10** %10, align 8
  %99 = getelementptr inbounds %class.KV.10, %class.KV.10* %98, i64 %97
  %100 = bitcast %class.KV.10* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.10*, %class.KV.10** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %115, %class.KV.10* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.10*, %class.KV.10** %10, align 8
  %123 = getelementptr inbounds %class.KV.10, %class.KV.10* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE12remove_innerERKS1_yPKS0_Py(%class.KV.10* sret %18, %class.KV.10* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.10*, %class.KV.10** %10, align 8
  %131 = getelementptr inbounds %class.KV.10, %class.KV.10* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj10EEeqERKS1_(%class.KV.10* %18, %class.KV.10* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.10*, %class.KV.10** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %136, i32 %137, i32 %138, %class.KV.10* dereferenceable(16) %18)
  store %class.KV.10* %139, %class.KV.10** %19, align 8
  %140 = load %class.KV.9*, %class.KV.9** %6, align 8
  %141 = getelementptr inbounds %class.KV.9, %class.KV.9* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.10*, %class.KV.10** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %143, %class.KV.10* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj9EEeqERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.9*, %class.KV.9** %4, align 8
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %15 to %class.KV.10**
  %17 = load %class.KV.10*, %class.KV.10** %16, align 8
  %18 = load %class.KV.9*, %class.KV.9** %4, align 8
  %19 = getelementptr inbounds %class.KV.9, %class.KV.9* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %19 to %class.KV.10**
  %21 = load %class.KV.10*, %class.KV.10** %20, align 8
  %22 = icmp eq %class.KV.10* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE12remove_innerERKS1_yPKS0_Py(%class.KV.10* noalias sret, %class.KV.10* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.10*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.LL*, align 8
  store %class.KV.10* %1, %class.KV.10** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %11 = load %class.KV.10*, %class.KV.10** %6, align 8
  %12 = getelementptr inbounds %class.KV.10, %class.KV.10* %11, i32 0, i32 1
  %13 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %12 to %class.LL**
  %14 = load %class.LL*, %class.LL** %13, align 8
  %15 = icmp ne %class.LL* %14, null
  br i1 %15, label %16, label %34

; <label>:16                                      ; preds = %5
  %17 = load %class.KV.10*, %class.KV.10** %6, align 8
  %18 = getelementptr inbounds %class.KV.10, %class.KV.10* %17, i32 0, i32 1
  %19 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %18 to %class.LL**
  %20 = load %class.LL*, %class.LL** %19, align 8
  %21 = load %class.c_d*, %class.c_d** %8, align 8
  %22 = load i64*, i64** %9, align 8
  %23 = call %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL* %20, %class.c_d* %21, i64* %22)
  store %class.LL* %23, %class.LL** %10, align 8
  %24 = load %class.LL*, %class.LL** %10, align 8
  %25 = load %class.KV.10*, %class.KV.10** %6, align 8
  %26 = getelementptr inbounds %class.KV.10, %class.KV.10* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %26 to %class.LL**
  %28 = load %class.LL*, %class.LL** %27, align 8
  %29 = icmp eq %class.LL* %24, %28
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %16
  %31 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %0, %class.KV.10* dereferenceable(16) %31)
  br label %36

; <label>:32                                      ; preds = %16
  %33 = load %class.LL*, %class.LL** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %33)
  br label %36

; <label>:34                                      ; preds = %5
  %35 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %0, %class.KV.10* dereferenceable(16) %35)
  br label %36

; <label>:36                                      ; preds = %34, %32, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj10EEeqERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.10*, %class.KV.10** %4, align 8
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %15 to %class.c_d**
  %17 = load %class.c_d*, %class.c_d** %16, align 8
  %18 = load %class.KV.10*, %class.KV.10** %4, align 8
  %19 = getelementptr inbounds %class.KV.10, %class.KV.10* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %19 to %class.c_d**
  %21 = load %class.c_d*, %class.c_d** %20, align 8
  %22 = icmp eq %class.c_d* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL*, %class.c_d*, i64*) #0 align 2 {
  %4 = alloca %class.LL*, align 8
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store i64* %2, i64** %7, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %11 = load %class.c_d*, %class.c_d** %10, align 8
  %12 = load %class.c_d*, %class.c_d** %6, align 8
  %13 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %11, %class.c_d* dereferenceable(8) %12)
  br i1 %13, label %14, label %20

; <label>:14                                      ; preds = %3
  %15 = load i64*, i64** %7, align 8
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, -1
  store i64 %17, i64* %15, align 8
  %18 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %19 = load %class.LL*, %class.LL** %18, align 8
  store %class.LL* %19, %class.LL** %4, align 8
  br label %46

; <label>:20                                      ; preds = %3
  %21 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %22 = load %class.LL*, %class.LL** %21, align 8
  %23 = icmp ne %class.LL* %22, null
  br i1 %23, label %24, label %45

; <label>:24                                      ; preds = %20
  %25 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %26 = load %class.LL*, %class.LL** %25, align 8
  %27 = load %class.c_d*, %class.c_d** %6, align 8
  %28 = load i64*, i64** %7, align 8
  %29 = call %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL* %26, %class.c_d* %27, i64* %28)
  store %class.LL* %29, %class.LL** %8, align 8
  %30 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %31 = load %class.LL*, %class.LL** %30, align 8
  %32 = load %class.LL*, %class.LL** %8, align 8
  %33 = icmp eq %class.LL* %31, %32
  br i1 %33, label %34, label %35

; <label>:34                                      ; preds = %24
  store %class.LL* %9, %class.LL** %4, align 8
  br label %46

; <label>:35                                      ; preds = %24
  %36 = call i8* @malloc(i64 24)
  %37 = bitcast i8* %36 to %class.LL*
  %38 = bitcast %class.LL* %37 to i8*
  %39 = bitcast i8* %38 to %class.LL*
  %40 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %41 = load %class.c_d*, %class.c_d** %40, align 8
  %42 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 1
  %43 = load %class.c_d*, %class.c_d** %42, align 8
  %44 = load %class.LL*, %class.LL** %8, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %39, %class.c_d* %41, %class.c_d* %43, %class.LL* %44)
  store %class.LL* %39, %class.LL** %4, align 8
  br label %46

; <label>:45                                      ; preds = %20
  store %class.LL* %9, %class.LL** %4, align 8
  br label %46

; <label>:46                                      ; preds = %45, %35, %34, %14
  %47 = load %class.LL*, %class.LL** %4, align 8
  ret %class.LL* %47
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2ERKS1_(%class.KV*, %class.KV* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 0
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 1
  %12 = load %class.KV*, %class.KV** %4, align 8
  %13 = getelementptr inbounds %class.KV, %class.KV* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

attributes #0 = { ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noreturn }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"Apple LLVM version 8.0.0 (clang-800.0.38)"}


;;;;;;

define void @proc_main() {
  %cloptr8364458 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364459 = getelementptr inbounds i64, i64* %cloptr8364458, i64 0              ; &cloptr8364458[0]
  %f8364460 = ptrtoint void(i64,i64)* @lam8364456 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364460, i64* %eptr8364459                                             ; store fptr
  %arg8360300 = ptrtoint i64* %cloptr8364458 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364461 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364462 = getelementptr inbounds i64, i64* %cloptr8364461, i64 0              ; &cloptr8364461[0]
  %f8364463 = ptrtoint void(i64,i64)* @lam8364453 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364463, i64* %eptr8364462                                             ; store fptr
  %arg8360299 = ptrtoint i64* %cloptr8364461 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364464 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364465 = getelementptr inbounds i64, i64* %cloptr8364464, i64 0              ; &cloptr8364464[0]
  %f8364466 = ptrtoint void(i64,i64)* @lam8363416 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364466, i64* %eptr8364465                                             ; store fptr
  %arg8360298 = ptrtoint i64* %cloptr8364464 to i64                                  ; closure cast; i64* -> i64
  %rva8363401 = add i64 0, 0                                                         ; quoted ()
  %rva8363400 = call i64 @prim_cons(i64 %arg8360298, i64 %rva8363401)                ; call prim_cons
  %rva8363399 = call i64 @prim_cons(i64 %arg8360299, i64 %rva8363400)                ; call prim_cons
  %cloptr8364467 = inttoptr i64 %arg8360300 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8364468 = getelementptr inbounds i64, i64* %cloptr8364467, i64 0             ; &cloptr8364467[0]
  %f8364470 = load i64, i64* %i0ptr8364468, align 8                                  ; load; *i0ptr8364468
  %fptr8364469 = inttoptr i64 %f8364470 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364469(i64 %arg8360300, i64 %rva8363399)           ; tail call
  ret void
}


define i32 @main() {
  call fastcc void @proc_main()
  ret i32 0
}



define void @lam8364456(i64 %env8364457, i64 %rvp8361770) {
  %cont8360290 = call i64 @prim_car(i64 %rvp8361770)                                 ; call prim_car
  %rvp8361769 = call i64 @prim_cdr(i64 %rvp8361770)                                  ; call prim_cdr
  %r6B$yu = call i64 @prim_car(i64 %rvp8361769)                                      ; call prim_car
  %na8361765 = call i64 @prim_cdr(i64 %rvp8361769)                                   ; call prim_cdr
  %rva8361768 = add i64 0, 0                                                         ; quoted ()
  %rva8361767 = call i64 @prim_cons(i64 %r6B$yu, i64 %rva8361768)                    ; call prim_cons
  %rva8361766 = call i64 @prim_cons(i64 %cont8360290, i64 %rva8361767)               ; call prim_cons
  %cloptr8364471 = inttoptr i64 %r6B$yu to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8364472 = getelementptr inbounds i64, i64* %cloptr8364471, i64 0             ; &cloptr8364471[0]
  %f8364474 = load i64, i64* %i0ptr8364472, align 8                                  ; load; *i0ptr8364472
  %fptr8364473 = inttoptr i64 %f8364474 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364473(i64 %r6B$yu, i64 %rva8361766)               ; tail call
  ret void
}


define void @lam8364453(i64 %env8364454, i64 %rvp8363370) {
  %_958360084 = call i64 @prim_car(i64 %rvp8363370)                                  ; call prim_car
  %rvp8363369 = call i64 @prim_cdr(i64 %rvp8363370)                                  ; call prim_cdr
  %GCQ$Ycmb = call i64 @prim_car(i64 %rvp8363369)                                    ; call prim_car
  %na8361772 = call i64 @prim_cdr(i64 %rvp8363369)                                   ; call prim_cdr
  %cloptr8364475 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8364477 = getelementptr inbounds i64, i64* %cloptr8364475, i64 1              ; &eptr8364477[1]
  store i64 %GCQ$Ycmb, i64* %eptr8364477                                             ; *eptr8364477 = %GCQ$Ycmb
  %eptr8364476 = getelementptr inbounds i64, i64* %cloptr8364475, i64 0              ; &cloptr8364475[0]
  %f8364478 = ptrtoint void(i64,i64)* @lam8364451 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364478, i64* %eptr8364476                                             ; store fptr
  %arg8360305 = ptrtoint i64* %cloptr8364475 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364479 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364480 = getelementptr inbounds i64, i64* %cloptr8364479, i64 0              ; &cloptr8364479[0]
  %f8364481 = ptrtoint void(i64,i64)* @lam8363429 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364481, i64* %eptr8364480                                             ; store fptr
  %arg8360304 = ptrtoint i64* %cloptr8364479 to i64                                  ; closure cast; i64* -> i64
  %rva8363368 = add i64 0, 0                                                         ; quoted ()
  %rva8363367 = call i64 @prim_cons(i64 %arg8360304, i64 %rva8363368)                ; call prim_cons
  %rva8363366 = call i64 @prim_cons(i64 %arg8360305, i64 %rva8363367)                ; call prim_cons
  %cloptr8364482 = inttoptr i64 %GCQ$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8364483 = getelementptr inbounds i64, i64* %cloptr8364482, i64 0             ; &cloptr8364482[0]
  %f8364485 = load i64, i64* %i0ptr8364483, align 8                                  ; load; *i0ptr8364483
  %fptr8364484 = inttoptr i64 %f8364485 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364484(i64 %GCQ$Ycmb, i64 %rva8363366)             ; tail call
  ret void
}


define void @lam8364451(i64 %env8364452, i64 %rvp8363336) {
  %envptr8364486 = inttoptr i64 %env8364452 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364487 = getelementptr inbounds i64, i64* %envptr8364486, i64 1            ; &envptr8364486[1]
  %GCQ$Ycmb = load i64, i64* %envptr8364487, align 8                                 ; load; *envptr8364487
  %_958360085 = call i64 @prim_car(i64 %rvp8363336)                                  ; call prim_car
  %rvp8363335 = call i64 @prim_cdr(i64 %rvp8363336)                                  ; call prim_cdr
  %j83$_37foldr1 = call i64 @prim_car(i64 %rvp8363335)                               ; call prim_car
  %na8361774 = call i64 @prim_cdr(i64 %rvp8363335)                                   ; call prim_cdr
  %cloptr8364488 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364490 = getelementptr inbounds i64, i64* %cloptr8364488, i64 1              ; &eptr8364490[1]
  %eptr8364491 = getelementptr inbounds i64, i64* %cloptr8364488, i64 2              ; &eptr8364491[2]
  store i64 %j83$_37foldr1, i64* %eptr8364490                                        ; *eptr8364490 = %j83$_37foldr1
  store i64 %GCQ$Ycmb, i64* %eptr8364491                                             ; *eptr8364491 = %GCQ$Ycmb
  %eptr8364489 = getelementptr inbounds i64, i64* %cloptr8364488, i64 0              ; &cloptr8364488[0]
  %f8364492 = ptrtoint void(i64,i64)* @lam8364449 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364492, i64* %eptr8364489                                             ; store fptr
  %arg8360308 = ptrtoint i64* %cloptr8364488 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364493 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364494 = getelementptr inbounds i64, i64* %cloptr8364493, i64 0              ; &cloptr8364493[0]
  %f8364495 = ptrtoint void(i64,i64)* @lam8363447 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364495, i64* %eptr8364494                                             ; store fptr
  %arg8360307 = ptrtoint i64* %cloptr8364493 to i64                                  ; closure cast; i64* -> i64
  %rva8363334 = add i64 0, 0                                                         ; quoted ()
  %rva8363333 = call i64 @prim_cons(i64 %arg8360307, i64 %rva8363334)                ; call prim_cons
  %rva8363332 = call i64 @prim_cons(i64 %arg8360308, i64 %rva8363333)                ; call prim_cons
  %cloptr8364496 = inttoptr i64 %GCQ$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8364497 = getelementptr inbounds i64, i64* %cloptr8364496, i64 0             ; &cloptr8364496[0]
  %f8364499 = load i64, i64* %i0ptr8364497, align 8                                  ; load; *i0ptr8364497
  %fptr8364498 = inttoptr i64 %f8364499 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364498(i64 %GCQ$Ycmb, i64 %rva8363332)             ; tail call
  ret void
}


define void @lam8364449(i64 %env8364450, i64 %rvp8363298) {
  %envptr8364500 = inttoptr i64 %env8364450 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364501 = getelementptr inbounds i64, i64* %envptr8364500, i64 2            ; &envptr8364500[2]
  %GCQ$Ycmb = load i64, i64* %envptr8364501, align 8                                 ; load; *envptr8364501
  %envptr8364502 = inttoptr i64 %env8364450 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364503 = getelementptr inbounds i64, i64* %envptr8364502, i64 1            ; &envptr8364502[1]
  %j83$_37foldr1 = load i64, i64* %envptr8364503, align 8                            ; load; *envptr8364503
  %_958360086 = call i64 @prim_car(i64 %rvp8363298)                                  ; call prim_car
  %rvp8363297 = call i64 @prim_cdr(i64 %rvp8363298)                                  ; call prim_cdr
  %lUA$_37map1 = call i64 @prim_car(i64 %rvp8363297)                                 ; call prim_car
  %na8361776 = call i64 @prim_cdr(i64 %rvp8363297)                                   ; call prim_cdr
  %cloptr8364504 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364506 = getelementptr inbounds i64, i64* %cloptr8364504, i64 1              ; &eptr8364506[1]
  %eptr8364507 = getelementptr inbounds i64, i64* %cloptr8364504, i64 2              ; &eptr8364507[2]
  %eptr8364508 = getelementptr inbounds i64, i64* %cloptr8364504, i64 3              ; &eptr8364508[3]
  store i64 %j83$_37foldr1, i64* %eptr8364506                                        ; *eptr8364506 = %j83$_37foldr1
  store i64 %lUA$_37map1, i64* %eptr8364507                                          ; *eptr8364507 = %lUA$_37map1
  store i64 %GCQ$Ycmb, i64* %eptr8364508                                             ; *eptr8364508 = %GCQ$Ycmb
  %eptr8364505 = getelementptr inbounds i64, i64* %cloptr8364504, i64 0              ; &cloptr8364504[0]
  %f8364509 = ptrtoint void(i64,i64)* @lam8364447 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364509, i64* %eptr8364505                                             ; store fptr
  %arg8360311 = ptrtoint i64* %cloptr8364504 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364510 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364511 = getelementptr inbounds i64, i64* %cloptr8364510, i64 0              ; &cloptr8364510[0]
  %f8364512 = ptrtoint void(i64,i64)* @lam8363467 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364512, i64* %eptr8364511                                             ; store fptr
  %arg8360310 = ptrtoint i64* %cloptr8364510 to i64                                  ; closure cast; i64* -> i64
  %rva8363296 = add i64 0, 0                                                         ; quoted ()
  %rva8363295 = call i64 @prim_cons(i64 %arg8360310, i64 %rva8363296)                ; call prim_cons
  %rva8363294 = call i64 @prim_cons(i64 %arg8360311, i64 %rva8363295)                ; call prim_cons
  %cloptr8364513 = inttoptr i64 %GCQ$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8364514 = getelementptr inbounds i64, i64* %cloptr8364513, i64 0             ; &cloptr8364513[0]
  %f8364516 = load i64, i64* %i0ptr8364514, align 8                                  ; load; *i0ptr8364514
  %fptr8364515 = inttoptr i64 %f8364516 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364515(i64 %GCQ$Ycmb, i64 %rva8363294)             ; tail call
  ret void
}


define void @lam8364447(i64 %env8364448, i64 %rvp8363264) {
  %envptr8364517 = inttoptr i64 %env8364448 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364518 = getelementptr inbounds i64, i64* %envptr8364517, i64 3            ; &envptr8364517[3]
  %GCQ$Ycmb = load i64, i64* %envptr8364518, align 8                                 ; load; *envptr8364518
  %envptr8364519 = inttoptr i64 %env8364448 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364520 = getelementptr inbounds i64, i64* %envptr8364519, i64 2            ; &envptr8364519[2]
  %lUA$_37map1 = load i64, i64* %envptr8364520, align 8                              ; load; *envptr8364520
  %envptr8364521 = inttoptr i64 %env8364448 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364522 = getelementptr inbounds i64, i64* %envptr8364521, i64 1            ; &envptr8364521[1]
  %j83$_37foldr1 = load i64, i64* %envptr8364522, align 8                            ; load; *envptr8364522
  %_958360087 = call i64 @prim_car(i64 %rvp8363264)                                  ; call prim_car
  %rvp8363263 = call i64 @prim_cdr(i64 %rvp8363264)                                  ; call prim_cdr
  %mDG$_37take = call i64 @prim_car(i64 %rvp8363263)                                 ; call prim_car
  %na8361778 = call i64 @prim_cdr(i64 %rvp8363263)                                   ; call prim_cdr
  %cloptr8364523 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8364525 = getelementptr inbounds i64, i64* %cloptr8364523, i64 1              ; &eptr8364525[1]
  %eptr8364526 = getelementptr inbounds i64, i64* %cloptr8364523, i64 2              ; &eptr8364526[2]
  %eptr8364527 = getelementptr inbounds i64, i64* %cloptr8364523, i64 3              ; &eptr8364527[3]
  %eptr8364528 = getelementptr inbounds i64, i64* %cloptr8364523, i64 4              ; &eptr8364528[4]
  store i64 %j83$_37foldr1, i64* %eptr8364525                                        ; *eptr8364525 = %j83$_37foldr1
  store i64 %lUA$_37map1, i64* %eptr8364526                                          ; *eptr8364526 = %lUA$_37map1
  store i64 %GCQ$Ycmb, i64* %eptr8364527                                             ; *eptr8364527 = %GCQ$Ycmb
  store i64 %mDG$_37take, i64* %eptr8364528                                          ; *eptr8364528 = %mDG$_37take
  %eptr8364524 = getelementptr inbounds i64, i64* %cloptr8364523, i64 0              ; &cloptr8364523[0]
  %f8364529 = ptrtoint void(i64,i64)* @lam8364445 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364529, i64* %eptr8364524                                             ; store fptr
  %arg8360314 = ptrtoint i64* %cloptr8364523 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364530 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364531 = getelementptr inbounds i64, i64* %cloptr8364530, i64 0              ; &cloptr8364530[0]
  %f8364532 = ptrtoint void(i64,i64)* @lam8363483 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364532, i64* %eptr8364531                                             ; store fptr
  %arg8360313 = ptrtoint i64* %cloptr8364530 to i64                                  ; closure cast; i64* -> i64
  %rva8363262 = add i64 0, 0                                                         ; quoted ()
  %rva8363261 = call i64 @prim_cons(i64 %arg8360313, i64 %rva8363262)                ; call prim_cons
  %rva8363260 = call i64 @prim_cons(i64 %arg8360314, i64 %rva8363261)                ; call prim_cons
  %cloptr8364533 = inttoptr i64 %GCQ$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8364534 = getelementptr inbounds i64, i64* %cloptr8364533, i64 0             ; &cloptr8364533[0]
  %f8364536 = load i64, i64* %i0ptr8364534, align 8                                  ; load; *i0ptr8364534
  %fptr8364535 = inttoptr i64 %f8364536 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364535(i64 %GCQ$Ycmb, i64 %rva8363260)             ; tail call
  ret void
}


define void @lam8364445(i64 %env8364446, i64 %rvp8363235) {
  %envptr8364537 = inttoptr i64 %env8364446 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364538 = getelementptr inbounds i64, i64* %envptr8364537, i64 4            ; &envptr8364537[4]
  %mDG$_37take = load i64, i64* %envptr8364538, align 8                              ; load; *envptr8364538
  %envptr8364539 = inttoptr i64 %env8364446 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364540 = getelementptr inbounds i64, i64* %envptr8364539, i64 3            ; &envptr8364539[3]
  %GCQ$Ycmb = load i64, i64* %envptr8364540, align 8                                 ; load; *envptr8364540
  %envptr8364541 = inttoptr i64 %env8364446 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364542 = getelementptr inbounds i64, i64* %envptr8364541, i64 2            ; &envptr8364541[2]
  %lUA$_37map1 = load i64, i64* %envptr8364542, align 8                              ; load; *envptr8364542
  %envptr8364543 = inttoptr i64 %env8364446 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364544 = getelementptr inbounds i64, i64* %envptr8364543, i64 1            ; &envptr8364543[1]
  %j83$_37foldr1 = load i64, i64* %envptr8364544, align 8                            ; load; *envptr8364544
  %_958360088 = call i64 @prim_car(i64 %rvp8363235)                                  ; call prim_car
  %rvp8363234 = call i64 @prim_cdr(i64 %rvp8363235)                                  ; call prim_cdr
  %mma$_37length = call i64 @prim_car(i64 %rvp8363234)                               ; call prim_car
  %na8361780 = call i64 @prim_cdr(i64 %rvp8363234)                                   ; call prim_cdr
  %cloptr8364545 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr8364547 = getelementptr inbounds i64, i64* %cloptr8364545, i64 1              ; &eptr8364547[1]
  %eptr8364548 = getelementptr inbounds i64, i64* %cloptr8364545, i64 2              ; &eptr8364548[2]
  %eptr8364549 = getelementptr inbounds i64, i64* %cloptr8364545, i64 3              ; &eptr8364549[3]
  %eptr8364550 = getelementptr inbounds i64, i64* %cloptr8364545, i64 4              ; &eptr8364550[4]
  %eptr8364551 = getelementptr inbounds i64, i64* %cloptr8364545, i64 5              ; &eptr8364551[5]
  store i64 %j83$_37foldr1, i64* %eptr8364547                                        ; *eptr8364547 = %j83$_37foldr1
  store i64 %lUA$_37map1, i64* %eptr8364548                                          ; *eptr8364548 = %lUA$_37map1
  store i64 %mma$_37length, i64* %eptr8364549                                        ; *eptr8364549 = %mma$_37length
  store i64 %GCQ$Ycmb, i64* %eptr8364550                                             ; *eptr8364550 = %GCQ$Ycmb
  store i64 %mDG$_37take, i64* %eptr8364551                                          ; *eptr8364551 = %mDG$_37take
  %eptr8364546 = getelementptr inbounds i64, i64* %cloptr8364545, i64 0              ; &cloptr8364545[0]
  %f8364552 = ptrtoint void(i64,i64)* @lam8364443 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364552, i64* %eptr8364546                                             ; store fptr
  %arg8360317 = ptrtoint i64* %cloptr8364545 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364553 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364554 = getelementptr inbounds i64, i64* %cloptr8364553, i64 0              ; &cloptr8364553[0]
  %f8364555 = ptrtoint void(i64,i64)* @lam8363496 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364555, i64* %eptr8364554                                             ; store fptr
  %arg8360316 = ptrtoint i64* %cloptr8364553 to i64                                  ; closure cast; i64* -> i64
  %rva8363233 = add i64 0, 0                                                         ; quoted ()
  %rva8363232 = call i64 @prim_cons(i64 %arg8360316, i64 %rva8363233)                ; call prim_cons
  %rva8363231 = call i64 @prim_cons(i64 %arg8360317, i64 %rva8363232)                ; call prim_cons
  %cloptr8364556 = inttoptr i64 %GCQ$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8364557 = getelementptr inbounds i64, i64* %cloptr8364556, i64 0             ; &cloptr8364556[0]
  %f8364559 = load i64, i64* %i0ptr8364557, align 8                                  ; load; *i0ptr8364557
  %fptr8364558 = inttoptr i64 %f8364559 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364558(i64 %GCQ$Ycmb, i64 %rva8363231)             ; tail call
  ret void
}


define void @lam8364443(i64 %env8364444, i64 %rvp8363201) {
  %envptr8364560 = inttoptr i64 %env8364444 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364561 = getelementptr inbounds i64, i64* %envptr8364560, i64 5            ; &envptr8364560[5]
  %mDG$_37take = load i64, i64* %envptr8364561, align 8                              ; load; *envptr8364561
  %envptr8364562 = inttoptr i64 %env8364444 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364563 = getelementptr inbounds i64, i64* %envptr8364562, i64 4            ; &envptr8364562[4]
  %GCQ$Ycmb = load i64, i64* %envptr8364563, align 8                                 ; load; *envptr8364563
  %envptr8364564 = inttoptr i64 %env8364444 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364565 = getelementptr inbounds i64, i64* %envptr8364564, i64 3            ; &envptr8364564[3]
  %mma$_37length = load i64, i64* %envptr8364565, align 8                            ; load; *envptr8364565
  %envptr8364566 = inttoptr i64 %env8364444 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364567 = getelementptr inbounds i64, i64* %envptr8364566, i64 2            ; &envptr8364566[2]
  %lUA$_37map1 = load i64, i64* %envptr8364567, align 8                              ; load; *envptr8364567
  %envptr8364568 = inttoptr i64 %env8364444 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364569 = getelementptr inbounds i64, i64* %envptr8364568, i64 1            ; &envptr8364568[1]
  %j83$_37foldr1 = load i64, i64* %envptr8364569, align 8                            ; load; *envptr8364569
  %_958360089 = call i64 @prim_car(i64 %rvp8363201)                                  ; call prim_car
  %rvp8363200 = call i64 @prim_cdr(i64 %rvp8363201)                                  ; call prim_cdr
  %FOD$_37foldl1 = call i64 @prim_car(i64 %rvp8363200)                               ; call prim_car
  %na8361782 = call i64 @prim_cdr(i64 %rvp8363200)                                   ; call prim_cdr
  %cloptr8364570 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8364572 = getelementptr inbounds i64, i64* %cloptr8364570, i64 1              ; &eptr8364572[1]
  store i64 %FOD$_37foldl1, i64* %eptr8364572                                        ; *eptr8364572 = %FOD$_37foldl1
  %eptr8364571 = getelementptr inbounds i64, i64* %cloptr8364570, i64 0              ; &cloptr8364570[0]
  %f8364573 = ptrtoint void(i64,i64)* @lam8364441 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364573, i64* %eptr8364571                                             ; store fptr
  %oRK$_37last = ptrtoint i64* %cloptr8364570 to i64                                 ; closure cast; i64* -> i64
  %cloptr8364574 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364576 = getelementptr inbounds i64, i64* %cloptr8364574, i64 1              ; &eptr8364576[1]
  %eptr8364577 = getelementptr inbounds i64, i64* %cloptr8364574, i64 2              ; &eptr8364577[2]
  store i64 %mma$_37length, i64* %eptr8364576                                        ; *eptr8364576 = %mma$_37length
  store i64 %mDG$_37take, i64* %eptr8364577                                          ; *eptr8364577 = %mDG$_37take
  %eptr8364575 = getelementptr inbounds i64, i64* %cloptr8364574, i64 0              ; &cloptr8364574[0]
  %f8364578 = ptrtoint void(i64,i64)* @lam8364433 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364578, i64* %eptr8364575                                             ; store fptr
  %ANH$_37drop_45right = ptrtoint i64* %cloptr8364574 to i64                         ; closure cast; i64* -> i64
  %cloptr8364579 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8364581 = getelementptr inbounds i64, i64* %cloptr8364579, i64 1              ; &eptr8364581[1]
  %eptr8364582 = getelementptr inbounds i64, i64* %cloptr8364579, i64 2              ; &eptr8364582[2]
  %eptr8364583 = getelementptr inbounds i64, i64* %cloptr8364579, i64 3              ; &eptr8364583[3]
  %eptr8364584 = getelementptr inbounds i64, i64* %cloptr8364579, i64 4              ; &eptr8364584[4]
  %eptr8364585 = getelementptr inbounds i64, i64* %cloptr8364579, i64 5              ; &eptr8364585[5]
  %eptr8364586 = getelementptr inbounds i64, i64* %cloptr8364579, i64 6              ; &eptr8364586[6]
  store i64 %j83$_37foldr1, i64* %eptr8364581                                        ; *eptr8364581 = %j83$_37foldr1
  store i64 %oRK$_37last, i64* %eptr8364582                                          ; *eptr8364582 = %oRK$_37last
  store i64 %ANH$_37drop_45right, i64* %eptr8364583                                  ; *eptr8364583 = %ANH$_37drop_45right
  store i64 %mma$_37length, i64* %eptr8364584                                        ; *eptr8364584 = %mma$_37length
  store i64 %GCQ$Ycmb, i64* %eptr8364585                                             ; *eptr8364585 = %GCQ$Ycmb
  store i64 %FOD$_37foldl1, i64* %eptr8364586                                        ; *eptr8364586 = %FOD$_37foldl1
  %eptr8364580 = getelementptr inbounds i64, i64* %cloptr8364579, i64 0              ; &cloptr8364579[0]
  %f8364587 = ptrtoint void(i64,i64)* @lam8364427 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364587, i64* %eptr8364580                                             ; store fptr
  %arg8360337 = ptrtoint i64* %cloptr8364579 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364588 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364590 = getelementptr inbounds i64, i64* %cloptr8364588, i64 1              ; &eptr8364590[1]
  %eptr8364591 = getelementptr inbounds i64, i64* %cloptr8364588, i64 2              ; &eptr8364591[2]
  store i64 %j83$_37foldr1, i64* %eptr8364590                                        ; *eptr8364590 = %j83$_37foldr1
  store i64 %lUA$_37map1, i64* %eptr8364591                                          ; *eptr8364591 = %lUA$_37map1
  %eptr8364589 = getelementptr inbounds i64, i64* %cloptr8364588, i64 0              ; &cloptr8364588[0]
  %f8364592 = ptrtoint void(i64,i64)* @lam8363547 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364592, i64* %eptr8364589                                             ; store fptr
  %arg8360336 = ptrtoint i64* %cloptr8364588 to i64                                  ; closure cast; i64* -> i64
  %rva8363199 = add i64 0, 0                                                         ; quoted ()
  %rva8363198 = call i64 @prim_cons(i64 %arg8360336, i64 %rva8363199)                ; call prim_cons
  %rva8363197 = call i64 @prim_cons(i64 %arg8360337, i64 %rva8363198)                ; call prim_cons
  %cloptr8364593 = inttoptr i64 %GCQ$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8364594 = getelementptr inbounds i64, i64* %cloptr8364593, i64 0             ; &cloptr8364593[0]
  %f8364596 = load i64, i64* %i0ptr8364594, align 8                                  ; load; *i0ptr8364594
  %fptr8364595 = inttoptr i64 %f8364596 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364595(i64 %GCQ$Ycmb, i64 %rva8363197)             ; tail call
  ret void
}


define void @lam8364441(i64 %env8364442, i64 %rvp8361799) {
  %envptr8364597 = inttoptr i64 %env8364442 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364598 = getelementptr inbounds i64, i64* %envptr8364597, i64 1            ; &envptr8364597[1]
  %FOD$_37foldl1 = load i64, i64* %envptr8364598, align 8                            ; load; *envptr8364598
  %cont8360090 = call i64 @prim_car(i64 %rvp8361799)                                 ; call prim_car
  %rvp8361798 = call i64 @prim_cdr(i64 %rvp8361799)                                  ; call prim_cdr
  %y9k$lst = call i64 @prim_car(i64 %rvp8361798)                                     ; call prim_car
  %na8361784 = call i64 @prim_cdr(i64 %rvp8361798)                                   ; call prim_cdr
  %cloptr8364599 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364600 = getelementptr inbounds i64, i64* %cloptr8364599, i64 0              ; &cloptr8364599[0]
  %f8364601 = ptrtoint void(i64,i64)* @lam8364439 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364601, i64* %eptr8364600                                             ; store fptr
  %arg8360321 = ptrtoint i64* %cloptr8364599 to i64                                  ; closure cast; i64* -> i64
  %arg8360320 = add i64 0, 0                                                         ; quoted ()
  %rva8361797 = add i64 0, 0                                                         ; quoted ()
  %rva8361796 = call i64 @prim_cons(i64 %y9k$lst, i64 %rva8361797)                   ; call prim_cons
  %rva8361795 = call i64 @prim_cons(i64 %arg8360320, i64 %rva8361796)                ; call prim_cons
  %rva8361794 = call i64 @prim_cons(i64 %arg8360321, i64 %rva8361795)                ; call prim_cons
  %rva8361793 = call i64 @prim_cons(i64 %cont8360090, i64 %rva8361794)               ; call prim_cons
  %cloptr8364602 = inttoptr i64 %FOD$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8364603 = getelementptr inbounds i64, i64* %cloptr8364602, i64 0             ; &cloptr8364602[0]
  %f8364605 = load i64, i64* %i0ptr8364603, align 8                                  ; load; *i0ptr8364603
  %fptr8364604 = inttoptr i64 %f8364605 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364604(i64 %FOD$_37foldl1, i64 %rva8361793)        ; tail call
  ret void
}


define void @lam8364439(i64 %env8364440, i64 %rvp8361792) {
  %cont8360091 = call i64 @prim_car(i64 %rvp8361792)                                 ; call prim_car
  %rvp8361791 = call i64 @prim_cdr(i64 %rvp8361792)                                  ; call prim_cdr
  %wSN$x = call i64 @prim_car(i64 %rvp8361791)                                       ; call prim_car
  %rvp8361790 = call i64 @prim_cdr(i64 %rvp8361791)                                  ; call prim_cdr
  %ZZX$y = call i64 @prim_car(i64 %rvp8361790)                                       ; call prim_car
  %na8361786 = call i64 @prim_cdr(i64 %rvp8361790)                                   ; call prim_cdr
  %arg8360325 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361789 = add i64 0, 0                                                         ; quoted ()
  %rva8361788 = call i64 @prim_cons(i64 %wSN$x, i64 %rva8361789)                     ; call prim_cons
  %rva8361787 = call i64 @prim_cons(i64 %arg8360325, i64 %rva8361788)                ; call prim_cons
  %cloptr8364606 = inttoptr i64 %cont8360091 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364607 = getelementptr inbounds i64, i64* %cloptr8364606, i64 0             ; &cloptr8364606[0]
  %f8364609 = load i64, i64* %i0ptr8364607, align 8                                  ; load; *i0ptr8364607
  %fptr8364608 = inttoptr i64 %f8364609 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364608(i64 %cont8360091, i64 %rva8361787)          ; tail call
  ret void
}


define void @lam8364433(i64 %env8364434, i64 %rvp8361815) {
  %envptr8364610 = inttoptr i64 %env8364434 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364611 = getelementptr inbounds i64, i64* %envptr8364610, i64 2            ; &envptr8364610[2]
  %mDG$_37take = load i64, i64* %envptr8364611, align 8                              ; load; *envptr8364611
  %envptr8364612 = inttoptr i64 %env8364434 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364613 = getelementptr inbounds i64, i64* %envptr8364612, i64 1            ; &envptr8364612[1]
  %mma$_37length = load i64, i64* %envptr8364613, align 8                            ; load; *envptr8364613
  %cont8360092 = call i64 @prim_car(i64 %rvp8361815)                                 ; call prim_car
  %rvp8361814 = call i64 @prim_cdr(i64 %rvp8361815)                                  ; call prim_cdr
  %sgt$lst = call i64 @prim_car(i64 %rvp8361814)                                     ; call prim_car
  %rvp8361813 = call i64 @prim_cdr(i64 %rvp8361814)                                  ; call prim_cdr
  %p0b$n = call i64 @prim_car(i64 %rvp8361813)                                       ; call prim_car
  %na8361801 = call i64 @prim_cdr(i64 %rvp8361813)                                   ; call prim_cdr
  %cloptr8364614 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8364616 = getelementptr inbounds i64, i64* %cloptr8364614, i64 1              ; &eptr8364616[1]
  %eptr8364617 = getelementptr inbounds i64, i64* %cloptr8364614, i64 2              ; &eptr8364617[2]
  %eptr8364618 = getelementptr inbounds i64, i64* %cloptr8364614, i64 3              ; &eptr8364618[3]
  %eptr8364619 = getelementptr inbounds i64, i64* %cloptr8364614, i64 4              ; &eptr8364619[4]
  store i64 %sgt$lst, i64* %eptr8364616                                              ; *eptr8364616 = %sgt$lst
  store i64 %p0b$n, i64* %eptr8364617                                                ; *eptr8364617 = %p0b$n
  store i64 %cont8360092, i64* %eptr8364618                                          ; *eptr8364618 = %cont8360092
  store i64 %mDG$_37take, i64* %eptr8364619                                          ; *eptr8364619 = %mDG$_37take
  %eptr8364615 = getelementptr inbounds i64, i64* %cloptr8364614, i64 0              ; &cloptr8364614[0]
  %f8364620 = ptrtoint void(i64,i64)* @lam8364431 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364620, i64* %eptr8364615                                             ; store fptr
  %arg8360328 = ptrtoint i64* %cloptr8364614 to i64                                  ; closure cast; i64* -> i64
  %rva8361812 = add i64 0, 0                                                         ; quoted ()
  %rva8361811 = call i64 @prim_cons(i64 %sgt$lst, i64 %rva8361812)                   ; call prim_cons
  %rva8361810 = call i64 @prim_cons(i64 %arg8360328, i64 %rva8361811)                ; call prim_cons
  %cloptr8364621 = inttoptr i64 %mma$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8364622 = getelementptr inbounds i64, i64* %cloptr8364621, i64 0             ; &cloptr8364621[0]
  %f8364624 = load i64, i64* %i0ptr8364622, align 8                                  ; load; *i0ptr8364622
  %fptr8364623 = inttoptr i64 %f8364624 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364623(i64 %mma$_37length, i64 %rva8361810)        ; tail call
  ret void
}


define void @lam8364431(i64 %env8364432, i64 %rvp8361809) {
  %envptr8364625 = inttoptr i64 %env8364432 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364626 = getelementptr inbounds i64, i64* %envptr8364625, i64 4            ; &envptr8364625[4]
  %mDG$_37take = load i64, i64* %envptr8364626, align 8                              ; load; *envptr8364626
  %envptr8364627 = inttoptr i64 %env8364432 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364628 = getelementptr inbounds i64, i64* %envptr8364627, i64 3            ; &envptr8364627[3]
  %cont8360092 = load i64, i64* %envptr8364628, align 8                              ; load; *envptr8364628
  %envptr8364629 = inttoptr i64 %env8364432 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364630 = getelementptr inbounds i64, i64* %envptr8364629, i64 2            ; &envptr8364629[2]
  %p0b$n = load i64, i64* %envptr8364630, align 8                                    ; load; *envptr8364630
  %envptr8364631 = inttoptr i64 %env8364432 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364632 = getelementptr inbounds i64, i64* %envptr8364631, i64 1            ; &envptr8364631[1]
  %sgt$lst = load i64, i64* %envptr8364632, align 8                                  ; load; *envptr8364632
  %_958360093 = call i64 @prim_car(i64 %rvp8361809)                                  ; call prim_car
  %rvp8361808 = call i64 @prim_cdr(i64 %rvp8361809)                                  ; call prim_cdr
  %a8359955 = call i64 @prim_car(i64 %rvp8361808)                                    ; call prim_car
  %na8361803 = call i64 @prim_cdr(i64 %rvp8361808)                                   ; call prim_cdr
  %a8359956 = call i64 @prim__45(i64 %a8359955, i64 %p0b$n)                          ; call prim__45
  %rva8361807 = add i64 0, 0                                                         ; quoted ()
  %rva8361806 = call i64 @prim_cons(i64 %a8359956, i64 %rva8361807)                  ; call prim_cons
  %rva8361805 = call i64 @prim_cons(i64 %sgt$lst, i64 %rva8361806)                   ; call prim_cons
  %rva8361804 = call i64 @prim_cons(i64 %cont8360092, i64 %rva8361805)               ; call prim_cons
  %cloptr8364633 = inttoptr i64 %mDG$_37take to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364634 = getelementptr inbounds i64, i64* %cloptr8364633, i64 0             ; &cloptr8364633[0]
  %f8364636 = load i64, i64* %i0ptr8364634, align 8                                  ; load; *i0ptr8364634
  %fptr8364635 = inttoptr i64 %f8364636 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364635(i64 %mDG$_37take, i64 %rva8361804)          ; tail call
  ret void
}


define void @lam8364427(i64 %env8364428, i64 %rvp8363101) {
  %envptr8364637 = inttoptr i64 %env8364428 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364638 = getelementptr inbounds i64, i64* %envptr8364637, i64 6            ; &envptr8364637[6]
  %FOD$_37foldl1 = load i64, i64* %envptr8364638, align 8                            ; load; *envptr8364638
  %envptr8364639 = inttoptr i64 %env8364428 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364640 = getelementptr inbounds i64, i64* %envptr8364639, i64 5            ; &envptr8364639[5]
  %GCQ$Ycmb = load i64, i64* %envptr8364640, align 8                                 ; load; *envptr8364640
  %envptr8364641 = inttoptr i64 %env8364428 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364642 = getelementptr inbounds i64, i64* %envptr8364641, i64 4            ; &envptr8364641[4]
  %mma$_37length = load i64, i64* %envptr8364642, align 8                            ; load; *envptr8364642
  %envptr8364643 = inttoptr i64 %env8364428 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364644 = getelementptr inbounds i64, i64* %envptr8364643, i64 3            ; &envptr8364643[3]
  %ANH$_37drop_45right = load i64, i64* %envptr8364644, align 8                      ; load; *envptr8364644
  %envptr8364645 = inttoptr i64 %env8364428 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364646 = getelementptr inbounds i64, i64* %envptr8364645, i64 2            ; &envptr8364645[2]
  %oRK$_37last = load i64, i64* %envptr8364646, align 8                              ; load; *envptr8364646
  %envptr8364647 = inttoptr i64 %env8364428 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364648 = getelementptr inbounds i64, i64* %envptr8364647, i64 1            ; &envptr8364647[1]
  %j83$_37foldr1 = load i64, i64* %envptr8364648, align 8                            ; load; *envptr8364648
  %_958360094 = call i64 @prim_car(i64 %rvp8363101)                                  ; call prim_car
  %rvp8363100 = call i64 @prim_cdr(i64 %rvp8363101)                                  ; call prim_cdr
  %nAl$_37foldr = call i64 @prim_car(i64 %rvp8363100)                                ; call prim_car
  %na8361817 = call i64 @prim_cdr(i64 %rvp8363100)                                   ; call prim_cdr
  %cloptr8364649 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8364651 = getelementptr inbounds i64, i64* %cloptr8364649, i64 1              ; &eptr8364651[1]
  store i64 %j83$_37foldr1, i64* %eptr8364651                                        ; *eptr8364651 = %j83$_37foldr1
  %eptr8364650 = getelementptr inbounds i64, i64* %cloptr8364649, i64 0              ; &cloptr8364649[0]
  %f8364652 = ptrtoint void(i64,i64)* @lam8364425 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364652, i64* %eptr8364650                                             ; store fptr
  %TpE$_37map1 = ptrtoint i64* %cloptr8364649 to i64                                 ; closure cast; i64* -> i64
  %cloptr8364653 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364655 = getelementptr inbounds i64, i64* %cloptr8364653, i64 1              ; &eptr8364655[1]
  %eptr8364656 = getelementptr inbounds i64, i64* %cloptr8364653, i64 2              ; &eptr8364656[2]
  %eptr8364657 = getelementptr inbounds i64, i64* %cloptr8364653, i64 3              ; &eptr8364657[3]
  store i64 %oRK$_37last, i64* %eptr8364655                                          ; *eptr8364655 = %oRK$_37last
  store i64 %ANH$_37drop_45right, i64* %eptr8364656                                  ; *eptr8364656 = %ANH$_37drop_45right
  store i64 %nAl$_37foldr, i64* %eptr8364657                                         ; *eptr8364657 = %nAl$_37foldr
  %eptr8364654 = getelementptr inbounds i64, i64* %cloptr8364653, i64 0              ; &cloptr8364653[0]
  %f8364658 = ptrtoint void(i64,i64)* @lam8364414 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364658, i64* %eptr8364654                                             ; store fptr
  %Qsk$_37map = ptrtoint i64* %cloptr8364653 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364659 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364661 = getelementptr inbounds i64, i64* %cloptr8364659, i64 1              ; &eptr8364661[1]
  %eptr8364662 = getelementptr inbounds i64, i64* %cloptr8364659, i64 2              ; &eptr8364662[2]
  store i64 %mma$_37length, i64* %eptr8364661                                        ; *eptr8364661 = %mma$_37length
  store i64 %FOD$_37foldl1, i64* %eptr8364662                                        ; *eptr8364662 = %FOD$_37foldl1
  %eptr8364660 = getelementptr inbounds i64, i64* %cloptr8364659, i64 0              ; &cloptr8364659[0]
  %f8364663 = ptrtoint void(i64,i64)* @lam8364398 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364663, i64* %eptr8364660                                             ; store fptr
  %arg8360379 = ptrtoint i64* %cloptr8364659 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364664 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364666 = getelementptr inbounds i64, i64* %cloptr8364664, i64 1              ; &eptr8364666[1]
  %eptr8364667 = getelementptr inbounds i64, i64* %cloptr8364664, i64 2              ; &eptr8364667[2]
  %eptr8364668 = getelementptr inbounds i64, i64* %cloptr8364664, i64 3              ; &eptr8364668[3]
  store i64 %j83$_37foldr1, i64* %eptr8364666                                        ; *eptr8364666 = %j83$_37foldr1
  store i64 %TpE$_37map1, i64* %eptr8364667                                          ; *eptr8364667 = %TpE$_37map1
  store i64 %nAl$_37foldr, i64* %eptr8364668                                         ; *eptr8364668 = %nAl$_37foldr
  %eptr8364665 = getelementptr inbounds i64, i64* %cloptr8364664, i64 0              ; &cloptr8364664[0]
  %f8364669 = ptrtoint void(i64,i64)* @lam8363598 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364669, i64* %eptr8364665                                             ; store fptr
  %arg8360378 = ptrtoint i64* %cloptr8364664 to i64                                  ; closure cast; i64* -> i64
  %rva8363099 = add i64 0, 0                                                         ; quoted ()
  %rva8363098 = call i64 @prim_cons(i64 %arg8360378, i64 %rva8363099)                ; call prim_cons
  %rva8363097 = call i64 @prim_cons(i64 %arg8360379, i64 %rva8363098)                ; call prim_cons
  %cloptr8364670 = inttoptr i64 %GCQ$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8364671 = getelementptr inbounds i64, i64* %cloptr8364670, i64 0             ; &cloptr8364670[0]
  %f8364673 = load i64, i64* %i0ptr8364671, align 8                                  ; load; *i0ptr8364671
  %fptr8364672 = inttoptr i64 %f8364673 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364672(i64 %GCQ$Ycmb, i64 %rva8363097)             ; tail call
  ret void
}


define void @lam8364425(i64 %env8364426, i64 %rvp8361842) {
  %envptr8364674 = inttoptr i64 %env8364426 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364675 = getelementptr inbounds i64, i64* %envptr8364674, i64 1            ; &envptr8364674[1]
  %j83$_37foldr1 = load i64, i64* %envptr8364675, align 8                            ; load; *envptr8364675
  %cont8360095 = call i64 @prim_car(i64 %rvp8361842)                                 ; call prim_car
  %rvp8361841 = call i64 @prim_cdr(i64 %rvp8361842)                                  ; call prim_cdr
  %pyq$f = call i64 @prim_car(i64 %rvp8361841)                                       ; call prim_car
  %rvp8361840 = call i64 @prim_cdr(i64 %rvp8361841)                                  ; call prim_cdr
  %n6G$lst = call i64 @prim_car(i64 %rvp8361840)                                     ; call prim_car
  %na8361819 = call i64 @prim_cdr(i64 %rvp8361840)                                   ; call prim_cdr
  %cloptr8364676 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8364678 = getelementptr inbounds i64, i64* %cloptr8364676, i64 1              ; &eptr8364678[1]
  store i64 %pyq$f, i64* %eptr8364678                                                ; *eptr8364678 = %pyq$f
  %eptr8364677 = getelementptr inbounds i64, i64* %cloptr8364676, i64 0              ; &cloptr8364676[0]
  %f8364679 = ptrtoint void(i64,i64)* @lam8364423 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364679, i64* %eptr8364677                                             ; store fptr
  %arg8360341 = ptrtoint i64* %cloptr8364676 to i64                                  ; closure cast; i64* -> i64
  %arg8360340 = add i64 0, 0                                                         ; quoted ()
  %rva8361839 = add i64 0, 0                                                         ; quoted ()
  %rva8361838 = call i64 @prim_cons(i64 %n6G$lst, i64 %rva8361839)                   ; call prim_cons
  %rva8361837 = call i64 @prim_cons(i64 %arg8360340, i64 %rva8361838)                ; call prim_cons
  %rva8361836 = call i64 @prim_cons(i64 %arg8360341, i64 %rva8361837)                ; call prim_cons
  %rva8361835 = call i64 @prim_cons(i64 %cont8360095, i64 %rva8361836)               ; call prim_cons
  %cloptr8364680 = inttoptr i64 %j83$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8364681 = getelementptr inbounds i64, i64* %cloptr8364680, i64 0             ; &cloptr8364680[0]
  %f8364683 = load i64, i64* %i0ptr8364681, align 8                                  ; load; *i0ptr8364681
  %fptr8364682 = inttoptr i64 %f8364683 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364682(i64 %j83$_37foldr1, i64 %rva8361835)        ; tail call
  ret void
}


define void @lam8364423(i64 %env8364424, i64 %rvp8361834) {
  %envptr8364684 = inttoptr i64 %env8364424 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364685 = getelementptr inbounds i64, i64* %envptr8364684, i64 1            ; &envptr8364684[1]
  %pyq$f = load i64, i64* %envptr8364685, align 8                                    ; load; *envptr8364685
  %cont8360096 = call i64 @prim_car(i64 %rvp8361834)                                 ; call prim_car
  %rvp8361833 = call i64 @prim_cdr(i64 %rvp8361834)                                  ; call prim_cdr
  %qD9$v = call i64 @prim_car(i64 %rvp8361833)                                       ; call prim_car
  %rvp8361832 = call i64 @prim_cdr(i64 %rvp8361833)                                  ; call prim_cdr
  %dq7$r = call i64 @prim_car(i64 %rvp8361832)                                       ; call prim_car
  %na8361821 = call i64 @prim_cdr(i64 %rvp8361832)                                   ; call prim_cdr
  %cloptr8364686 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364688 = getelementptr inbounds i64, i64* %cloptr8364686, i64 1              ; &eptr8364688[1]
  %eptr8364689 = getelementptr inbounds i64, i64* %cloptr8364686, i64 2              ; &eptr8364689[2]
  store i64 %dq7$r, i64* %eptr8364688                                                ; *eptr8364688 = %dq7$r
  store i64 %cont8360096, i64* %eptr8364689                                          ; *eptr8364689 = %cont8360096
  %eptr8364687 = getelementptr inbounds i64, i64* %cloptr8364686, i64 0              ; &cloptr8364686[0]
  %f8364690 = ptrtoint void(i64,i64)* @lam8364421 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364690, i64* %eptr8364687                                             ; store fptr
  %arg8360345 = ptrtoint i64* %cloptr8364686 to i64                                  ; closure cast; i64* -> i64
  %rva8361831 = add i64 0, 0                                                         ; quoted ()
  %rva8361830 = call i64 @prim_cons(i64 %qD9$v, i64 %rva8361831)                     ; call prim_cons
  %rva8361829 = call i64 @prim_cons(i64 %arg8360345, i64 %rva8361830)                ; call prim_cons
  %cloptr8364691 = inttoptr i64 %pyq$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8364692 = getelementptr inbounds i64, i64* %cloptr8364691, i64 0             ; &cloptr8364691[0]
  %f8364694 = load i64, i64* %i0ptr8364692, align 8                                  ; load; *i0ptr8364692
  %fptr8364693 = inttoptr i64 %f8364694 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364693(i64 %pyq$f, i64 %rva8361829)                ; tail call
  ret void
}


define void @lam8364421(i64 %env8364422, i64 %rvp8361828) {
  %envptr8364695 = inttoptr i64 %env8364422 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364696 = getelementptr inbounds i64, i64* %envptr8364695, i64 2            ; &envptr8364695[2]
  %cont8360096 = load i64, i64* %envptr8364696, align 8                              ; load; *envptr8364696
  %envptr8364697 = inttoptr i64 %env8364422 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364698 = getelementptr inbounds i64, i64* %envptr8364697, i64 1            ; &envptr8364697[1]
  %dq7$r = load i64, i64* %envptr8364698, align 8                                    ; load; *envptr8364698
  %_958360097 = call i64 @prim_car(i64 %rvp8361828)                                  ; call prim_car
  %rvp8361827 = call i64 @prim_cdr(i64 %rvp8361828)                                  ; call prim_cdr
  %a8359965 = call i64 @prim_car(i64 %rvp8361827)                                    ; call prim_car
  %na8361823 = call i64 @prim_cdr(i64 %rvp8361827)                                   ; call prim_cdr
  %retprim8360098 = call i64 @prim_cons(i64 %a8359965, i64 %dq7$r)                   ; call prim_cons
  %arg8360350 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361826 = add i64 0, 0                                                         ; quoted ()
  %rva8361825 = call i64 @prim_cons(i64 %retprim8360098, i64 %rva8361826)            ; call prim_cons
  %rva8361824 = call i64 @prim_cons(i64 %arg8360350, i64 %rva8361825)                ; call prim_cons
  %cloptr8364699 = inttoptr i64 %cont8360096 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364700 = getelementptr inbounds i64, i64* %cloptr8364699, i64 0             ; &cloptr8364699[0]
  %f8364702 = load i64, i64* %i0ptr8364700, align 8                                  ; load; *i0ptr8364700
  %fptr8364701 = inttoptr i64 %f8364702 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364701(i64 %cont8360096, i64 %rva8361824)          ; tail call
  ret void
}


define void @lam8364414(i64 %env8364415, i64 %S6D$args8360100) {
  %envptr8364703 = inttoptr i64 %env8364415 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364704 = getelementptr inbounds i64, i64* %envptr8364703, i64 3            ; &envptr8364703[3]
  %nAl$_37foldr = load i64, i64* %envptr8364704, align 8                             ; load; *envptr8364704
  %envptr8364705 = inttoptr i64 %env8364415 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364706 = getelementptr inbounds i64, i64* %envptr8364705, i64 2            ; &envptr8364705[2]
  %ANH$_37drop_45right = load i64, i64* %envptr8364706, align 8                      ; load; *envptr8364706
  %envptr8364707 = inttoptr i64 %env8364415 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364708 = getelementptr inbounds i64, i64* %envptr8364707, i64 1            ; &envptr8364707[1]
  %oRK$_37last = load i64, i64* %envptr8364708, align 8                              ; load; *envptr8364708
  %cont8360099 = call i64 @prim_car(i64 %S6D$args8360100)                            ; call prim_car
  %S6D$args = call i64 @prim_cdr(i64 %S6D$args8360100)                               ; call prim_cdr
  %nsk$f = call i64 @prim_car(i64 %S6D$args)                                         ; call prim_car
  %gD8$lsts = call i64 @prim_cdr(i64 %S6D$args)                                      ; call prim_cdr
  %arg8360357 = add i64 0, 0                                                         ; quoted ()
  %a8359969 = call i64 @prim_cons(i64 %arg8360357, i64 %gD8$lsts)                    ; call prim_cons
  %cloptr8364709 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364711 = getelementptr inbounds i64, i64* %cloptr8364709, i64 1              ; &eptr8364711[1]
  %eptr8364712 = getelementptr inbounds i64, i64* %cloptr8364709, i64 2              ; &eptr8364712[2]
  %eptr8364713 = getelementptr inbounds i64, i64* %cloptr8364709, i64 3              ; &eptr8364713[3]
  store i64 %oRK$_37last, i64* %eptr8364711                                          ; *eptr8364711 = %oRK$_37last
  store i64 %ANH$_37drop_45right, i64* %eptr8364712                                  ; *eptr8364712 = %ANH$_37drop_45right
  store i64 %nsk$f, i64* %eptr8364713                                                ; *eptr8364713 = %nsk$f
  %eptr8364710 = getelementptr inbounds i64, i64* %cloptr8364709, i64 0              ; &cloptr8364709[0]
  %f8364714 = ptrtoint void(i64,i64)* @lam8364411 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364714, i64* %eptr8364710                                             ; store fptr
  %arg8360359 = ptrtoint i64* %cloptr8364709 to i64                                  ; closure cast; i64* -> i64
  %a8359970 = call i64 @prim_cons(i64 %arg8360359, i64 %a8359969)                    ; call prim_cons
  %cps_45lst8360108 = call i64 @prim_cons(i64 %cont8360099, i64 %a8359970)           ; call prim_cons
  %cloptr8364715 = inttoptr i64 %nAl$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr8364716 = getelementptr inbounds i64, i64* %cloptr8364715, i64 0             ; &cloptr8364715[0]
  %f8364718 = load i64, i64* %i0ptr8364716, align 8                                  ; load; *i0ptr8364716
  %fptr8364717 = inttoptr i64 %f8364718 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364717(i64 %nAl$_37foldr, i64 %cps_45lst8360108)   ; tail call
  ret void
}


define void @lam8364411(i64 %env8364412, i64 %BK7$fargs8360102) {
  %envptr8364719 = inttoptr i64 %env8364412 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364720 = getelementptr inbounds i64, i64* %envptr8364719, i64 3            ; &envptr8364719[3]
  %nsk$f = load i64, i64* %envptr8364720, align 8                                    ; load; *envptr8364720
  %envptr8364721 = inttoptr i64 %env8364412 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364722 = getelementptr inbounds i64, i64* %envptr8364721, i64 2            ; &envptr8364721[2]
  %ANH$_37drop_45right = load i64, i64* %envptr8364722, align 8                      ; load; *envptr8364722
  %envptr8364723 = inttoptr i64 %env8364412 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364724 = getelementptr inbounds i64, i64* %envptr8364723, i64 1            ; &envptr8364723[1]
  %oRK$_37last = load i64, i64* %envptr8364724, align 8                              ; load; *envptr8364724
  %cont8360101 = call i64 @prim_car(i64 %BK7$fargs8360102)                           ; call prim_car
  %BK7$fargs = call i64 @prim_cdr(i64 %BK7$fargs8360102)                             ; call prim_cdr
  %cloptr8364725 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8364727 = getelementptr inbounds i64, i64* %cloptr8364725, i64 1              ; &eptr8364727[1]
  %eptr8364728 = getelementptr inbounds i64, i64* %cloptr8364725, i64 2              ; &eptr8364728[2]
  %eptr8364729 = getelementptr inbounds i64, i64* %cloptr8364725, i64 3              ; &eptr8364729[3]
  %eptr8364730 = getelementptr inbounds i64, i64* %cloptr8364725, i64 4              ; &eptr8364730[4]
  store i64 %oRK$_37last, i64* %eptr8364727                                          ; *eptr8364727 = %oRK$_37last
  store i64 %cont8360101, i64* %eptr8364728                                          ; *eptr8364728 = %cont8360101
  store i64 %nsk$f, i64* %eptr8364729                                                ; *eptr8364729 = %nsk$f
  store i64 %BK7$fargs, i64* %eptr8364730                                            ; *eptr8364730 = %BK7$fargs
  %eptr8364726 = getelementptr inbounds i64, i64* %cloptr8364725, i64 0              ; &cloptr8364725[0]
  %f8364731 = ptrtoint void(i64,i64)* @lam8364409 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364731, i64* %eptr8364726                                             ; store fptr
  %arg8360364 = ptrtoint i64* %cloptr8364725 to i64                                  ; closure cast; i64* -> i64
  %arg8360362 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva8361864 = add i64 0, 0                                                         ; quoted ()
  %rva8361863 = call i64 @prim_cons(i64 %arg8360362, i64 %rva8361864)                ; call prim_cons
  %rva8361862 = call i64 @prim_cons(i64 %BK7$fargs, i64 %rva8361863)                 ; call prim_cons
  %rva8361861 = call i64 @prim_cons(i64 %arg8360364, i64 %rva8361862)                ; call prim_cons
  %cloptr8364732 = inttoptr i64 %ANH$_37drop_45right to i64*                         ; closure/env cast; i64 -> i64*
  %i0ptr8364733 = getelementptr inbounds i64, i64* %cloptr8364732, i64 0             ; &cloptr8364732[0]
  %f8364735 = load i64, i64* %i0ptr8364733, align 8                                  ; load; *i0ptr8364733
  %fptr8364734 = inttoptr i64 %f8364735 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364734(i64 %ANH$_37drop_45right, i64 %rva8361861)  ; tail call
  ret void
}


define void @lam8364409(i64 %env8364410, i64 %rvp8361860) {
  %envptr8364736 = inttoptr i64 %env8364410 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364737 = getelementptr inbounds i64, i64* %envptr8364736, i64 4            ; &envptr8364736[4]
  %BK7$fargs = load i64, i64* %envptr8364737, align 8                                ; load; *envptr8364737
  %envptr8364738 = inttoptr i64 %env8364410 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364739 = getelementptr inbounds i64, i64* %envptr8364738, i64 3            ; &envptr8364738[3]
  %nsk$f = load i64, i64* %envptr8364739, align 8                                    ; load; *envptr8364739
  %envptr8364740 = inttoptr i64 %env8364410 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364741 = getelementptr inbounds i64, i64* %envptr8364740, i64 2            ; &envptr8364740[2]
  %cont8360101 = load i64, i64* %envptr8364741, align 8                              ; load; *envptr8364741
  %envptr8364742 = inttoptr i64 %env8364410 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364743 = getelementptr inbounds i64, i64* %envptr8364742, i64 1            ; &envptr8364742[1]
  %oRK$_37last = load i64, i64* %envptr8364743, align 8                              ; load; *envptr8364743
  %_958360103 = call i64 @prim_car(i64 %rvp8361860)                                  ; call prim_car
  %rvp8361859 = call i64 @prim_cdr(i64 %rvp8361860)                                  ; call prim_cdr
  %a8359966 = call i64 @prim_car(i64 %rvp8361859)                                    ; call prim_car
  %na8361844 = call i64 @prim_cdr(i64 %rvp8361859)                                   ; call prim_cdr
  %cloptr8364744 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364746 = getelementptr inbounds i64, i64* %cloptr8364744, i64 1              ; &eptr8364746[1]
  %eptr8364747 = getelementptr inbounds i64, i64* %cloptr8364744, i64 2              ; &eptr8364747[2]
  %eptr8364748 = getelementptr inbounds i64, i64* %cloptr8364744, i64 3              ; &eptr8364748[3]
  store i64 %oRK$_37last, i64* %eptr8364746                                          ; *eptr8364746 = %oRK$_37last
  store i64 %cont8360101, i64* %eptr8364747                                          ; *eptr8364747 = %cont8360101
  store i64 %BK7$fargs, i64* %eptr8364748                                            ; *eptr8364748 = %BK7$fargs
  %eptr8364745 = getelementptr inbounds i64, i64* %cloptr8364744, i64 0              ; &cloptr8364744[0]
  %f8364749 = ptrtoint void(i64,i64)* @lam8364407 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364749, i64* %eptr8364745                                             ; store fptr
  %arg8360367 = ptrtoint i64* %cloptr8364744 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst8360107 = call i64 @prim_cons(i64 %arg8360367, i64 %a8359966)            ; call prim_cons
  %cloptr8364750 = inttoptr i64 %nsk$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8364751 = getelementptr inbounds i64, i64* %cloptr8364750, i64 0             ; &cloptr8364750[0]
  %f8364753 = load i64, i64* %i0ptr8364751, align 8                                  ; load; *i0ptr8364751
  %fptr8364752 = inttoptr i64 %f8364753 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364752(i64 %nsk$f, i64 %cps_45lst8360107)          ; tail call
  ret void
}


define void @lam8364407(i64 %env8364408, i64 %rvp8361858) {
  %envptr8364754 = inttoptr i64 %env8364408 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364755 = getelementptr inbounds i64, i64* %envptr8364754, i64 3            ; &envptr8364754[3]
  %BK7$fargs = load i64, i64* %envptr8364755, align 8                                ; load; *envptr8364755
  %envptr8364756 = inttoptr i64 %env8364408 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364757 = getelementptr inbounds i64, i64* %envptr8364756, i64 2            ; &envptr8364756[2]
  %cont8360101 = load i64, i64* %envptr8364757, align 8                              ; load; *envptr8364757
  %envptr8364758 = inttoptr i64 %env8364408 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364759 = getelementptr inbounds i64, i64* %envptr8364758, i64 1            ; &envptr8364758[1]
  %oRK$_37last = load i64, i64* %envptr8364759, align 8                              ; load; *envptr8364759
  %_958360104 = call i64 @prim_car(i64 %rvp8361858)                                  ; call prim_car
  %rvp8361857 = call i64 @prim_cdr(i64 %rvp8361858)                                  ; call prim_cdr
  %a8359967 = call i64 @prim_car(i64 %rvp8361857)                                    ; call prim_car
  %na8361846 = call i64 @prim_cdr(i64 %rvp8361857)                                   ; call prim_cdr
  %cloptr8364760 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364762 = getelementptr inbounds i64, i64* %cloptr8364760, i64 1              ; &eptr8364762[1]
  %eptr8364763 = getelementptr inbounds i64, i64* %cloptr8364760, i64 2              ; &eptr8364763[2]
  store i64 %cont8360101, i64* %eptr8364762                                          ; *eptr8364762 = %cont8360101
  store i64 %a8359967, i64* %eptr8364763                                             ; *eptr8364763 = %a8359967
  %eptr8364761 = getelementptr inbounds i64, i64* %cloptr8364760, i64 0              ; &cloptr8364760[0]
  %f8364764 = ptrtoint void(i64,i64)* @lam8364405 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364764, i64* %eptr8364761                                             ; store fptr
  %arg8360369 = ptrtoint i64* %cloptr8364760 to i64                                  ; closure cast; i64* -> i64
  %rva8361856 = add i64 0, 0                                                         ; quoted ()
  %rva8361855 = call i64 @prim_cons(i64 %BK7$fargs, i64 %rva8361856)                 ; call prim_cons
  %rva8361854 = call i64 @prim_cons(i64 %arg8360369, i64 %rva8361855)                ; call prim_cons
  %cloptr8364765 = inttoptr i64 %oRK$_37last to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364766 = getelementptr inbounds i64, i64* %cloptr8364765, i64 0             ; &cloptr8364765[0]
  %f8364768 = load i64, i64* %i0ptr8364766, align 8                                  ; load; *i0ptr8364766
  %fptr8364767 = inttoptr i64 %f8364768 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364767(i64 %oRK$_37last, i64 %rva8361854)          ; tail call
  ret void
}


define void @lam8364405(i64 %env8364406, i64 %rvp8361853) {
  %envptr8364769 = inttoptr i64 %env8364406 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364770 = getelementptr inbounds i64, i64* %envptr8364769, i64 2            ; &envptr8364769[2]
  %a8359967 = load i64, i64* %envptr8364770, align 8                                 ; load; *envptr8364770
  %envptr8364771 = inttoptr i64 %env8364406 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364772 = getelementptr inbounds i64, i64* %envptr8364771, i64 1            ; &envptr8364771[1]
  %cont8360101 = load i64, i64* %envptr8364772, align 8                              ; load; *envptr8364772
  %_958360105 = call i64 @prim_car(i64 %rvp8361853)                                  ; call prim_car
  %rvp8361852 = call i64 @prim_cdr(i64 %rvp8361853)                                  ; call prim_cdr
  %a8359968 = call i64 @prim_car(i64 %rvp8361852)                                    ; call prim_car
  %na8361848 = call i64 @prim_cdr(i64 %rvp8361852)                                   ; call prim_cdr
  %retprim8360106 = call i64 @prim_cons(i64 %a8359967, i64 %a8359968)                ; call prim_cons
  %arg8360374 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361851 = add i64 0, 0                                                         ; quoted ()
  %rva8361850 = call i64 @prim_cons(i64 %retprim8360106, i64 %rva8361851)            ; call prim_cons
  %rva8361849 = call i64 @prim_cons(i64 %arg8360374, i64 %rva8361850)                ; call prim_cons
  %cloptr8364773 = inttoptr i64 %cont8360101 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364774 = getelementptr inbounds i64, i64* %cloptr8364773, i64 0             ; &cloptr8364773[0]
  %f8364776 = load i64, i64* %i0ptr8364774, align 8                                  ; load; *i0ptr8364774
  %fptr8364775 = inttoptr i64 %f8364776 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364775(i64 %cont8360101, i64 %rva8361849)          ; tail call
  ret void
}


define void @lam8364398(i64 %env8364399, i64 %rvp8363001) {
  %envptr8364777 = inttoptr i64 %env8364399 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364778 = getelementptr inbounds i64, i64* %envptr8364777, i64 2            ; &envptr8364777[2]
  %FOD$_37foldl1 = load i64, i64* %envptr8364778, align 8                            ; load; *envptr8364778
  %envptr8364779 = inttoptr i64 %env8364399 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364780 = getelementptr inbounds i64, i64* %envptr8364779, i64 1            ; &envptr8364779[1]
  %mma$_37length = load i64, i64* %envptr8364780, align 8                            ; load; *envptr8364780
  %_958360109 = call i64 @prim_car(i64 %rvp8363001)                                  ; call prim_car
  %rvp8363000 = call i64 @prim_cdr(i64 %rvp8363001)                                  ; call prim_cdr
  %bu0$_37foldl = call i64 @prim_car(i64 %rvp8363000)                                ; call prim_car
  %na8361866 = call i64 @prim_cdr(i64 %rvp8363000)                                   ; call prim_cdr
  %cloptr8364781 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364782 = getelementptr inbounds i64, i64* %cloptr8364781, i64 0              ; &cloptr8364781[0]
  %f8364783 = ptrtoint void(i64,i64)* @lam8364396 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364783, i64* %eptr8364782                                             ; store fptr
  %YQs$_37_62 = ptrtoint i64* %cloptr8364781 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364784 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364785 = getelementptr inbounds i64, i64* %cloptr8364784, i64 0              ; &cloptr8364784[0]
  %f8364786 = ptrtoint void(i64,i64)* @lam8364392 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364786, i64* %eptr8364785                                             ; store fptr
  %Ga1$_37_62_61 = ptrtoint i64* %cloptr8364784 to i64                               ; closure cast; i64* -> i64
  %arg8360394 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %arg8360393 = add i64 0, 0                                                         ; quoted ()
  %lqc$_37append = call i64 @prim_make_45vector(i64 %arg8360394, i64 %arg8360393)    ; call prim_make_45vector
  %arg8360396 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8364787 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8364789 = getelementptr inbounds i64, i64* %cloptr8364787, i64 1              ; &eptr8364789[1]
  store i64 %lqc$_37append, i64* %eptr8364789                                        ; *eptr8364789 = %lqc$_37append
  %eptr8364788 = getelementptr inbounds i64, i64* %cloptr8364787, i64 0              ; &cloptr8364787[0]
  %f8364790 = ptrtoint void(i64,i64)* @lam8364385 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364790, i64* %eptr8364788                                             ; store fptr
  %arg8360395 = ptrtoint i64* %cloptr8364787 to i64                                  ; closure cast; i64* -> i64
  %v6H$_950 = call i64 @prim_vector_45set_33(i64 %lqc$_37append, i64 %arg8360396, i64 %arg8360395); call prim_vector_45set_33
  %arg8360415 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360226 = call i64 @prim_vector_45ref(i64 %lqc$_37append, i64 %arg8360415) ; call prim_vector_45ref
  %cloptr8364791 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364793 = getelementptr inbounds i64, i64* %cloptr8364791, i64 1              ; &eptr8364793[1]
  %eptr8364794 = getelementptr inbounds i64, i64* %cloptr8364791, i64 2              ; &eptr8364794[2]
  %eptr8364795 = getelementptr inbounds i64, i64* %cloptr8364791, i64 3              ; &eptr8364795[3]
  store i64 %YQs$_37_62, i64* %eptr8364793                                           ; *eptr8364793 = %YQs$_37_62
  store i64 %mma$_37length, i64* %eptr8364794                                        ; *eptr8364794 = %mma$_37length
  store i64 %FOD$_37foldl1, i64* %eptr8364795                                        ; *eptr8364795 = %FOD$_37foldl1
  %eptr8364792 = getelementptr inbounds i64, i64* %cloptr8364791, i64 0              ; &cloptr8364791[0]
  %f8364796 = ptrtoint void(i64,i64)* @lam8364374 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364796, i64* %eptr8364792                                             ; store fptr
  %arg8360419 = ptrtoint i64* %cloptr8364791 to i64                                  ; closure cast; i64* -> i64
  %arg8360418 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362999 = add i64 0, 0                                                         ; quoted ()
  %rva8362998 = call i64 @prim_cons(i64 %retprim8360226, i64 %rva8362999)            ; call prim_cons
  %rva8362997 = call i64 @prim_cons(i64 %arg8360418, i64 %rva8362998)                ; call prim_cons
  %cloptr8364797 = inttoptr i64 %arg8360419 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8364798 = getelementptr inbounds i64, i64* %cloptr8364797, i64 0             ; &cloptr8364797[0]
  %f8364800 = load i64, i64* %i0ptr8364798, align 8                                  ; load; *i0ptr8364798
  %fptr8364799 = inttoptr i64 %f8364800 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364799(i64 %arg8360419, i64 %rva8362997)           ; tail call
  ret void
}


define void @lam8364396(i64 %env8364397, i64 %rvp8361874) {
  %cont8360110 = call i64 @prim_car(i64 %rvp8361874)                                 ; call prim_car
  %rvp8361873 = call i64 @prim_cdr(i64 %rvp8361874)                                  ; call prim_cdr
  %hpG$a = call i64 @prim_car(i64 %rvp8361873)                                       ; call prim_car
  %rvp8361872 = call i64 @prim_cdr(i64 %rvp8361873)                                  ; call prim_cdr
  %vWX$b = call i64 @prim_car(i64 %rvp8361872)                                       ; call prim_car
  %na8361868 = call i64 @prim_cdr(i64 %rvp8361872)                                   ; call prim_cdr
  %a8359978 = call i64 @prim__60_61(i64 %hpG$a, i64 %vWX$b)                          ; call prim__60_61
  %retprim8360111 = call i64 @prim_not(i64 %a8359978)                                ; call prim_not
  %arg8360385 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361871 = add i64 0, 0                                                         ; quoted ()
  %rva8361870 = call i64 @prim_cons(i64 %retprim8360111, i64 %rva8361871)            ; call prim_cons
  %rva8361869 = call i64 @prim_cons(i64 %arg8360385, i64 %rva8361870)                ; call prim_cons
  %cloptr8364801 = inttoptr i64 %cont8360110 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364802 = getelementptr inbounds i64, i64* %cloptr8364801, i64 0             ; &cloptr8364801[0]
  %f8364804 = load i64, i64* %i0ptr8364802, align 8                                  ; load; *i0ptr8364802
  %fptr8364803 = inttoptr i64 %f8364804 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364803(i64 %cont8360110, i64 %rva8361869)          ; tail call
  ret void
}


define void @lam8364392(i64 %env8364393, i64 %rvp8361882) {
  %cont8360112 = call i64 @prim_car(i64 %rvp8361882)                                 ; call prim_car
  %rvp8361881 = call i64 @prim_cdr(i64 %rvp8361882)                                  ; call prim_cdr
  %b6n$a = call i64 @prim_car(i64 %rvp8361881)                                       ; call prim_car
  %rvp8361880 = call i64 @prim_cdr(i64 %rvp8361881)                                  ; call prim_cdr
  %nMQ$b = call i64 @prim_car(i64 %rvp8361880)                                       ; call prim_car
  %na8361876 = call i64 @prim_cdr(i64 %rvp8361880)                                   ; call prim_cdr
  %a8359979 = call i64 @prim__60(i64 %b6n$a, i64 %nMQ$b)                             ; call prim__60
  %retprim8360113 = call i64 @prim_not(i64 %a8359979)                                ; call prim_not
  %arg8360391 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361879 = add i64 0, 0                                                         ; quoted ()
  %rva8361878 = call i64 @prim_cons(i64 %retprim8360113, i64 %rva8361879)            ; call prim_cons
  %rva8361877 = call i64 @prim_cons(i64 %arg8360391, i64 %rva8361878)                ; call prim_cons
  %cloptr8364805 = inttoptr i64 %cont8360112 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364806 = getelementptr inbounds i64, i64* %cloptr8364805, i64 0             ; &cloptr8364805[0]
  %f8364808 = load i64, i64* %i0ptr8364806, align 8                                  ; load; *i0ptr8364806
  %fptr8364807 = inttoptr i64 %f8364808 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364807(i64 %cont8360112, i64 %rva8361877)          ; tail call
  ret void
}


define void @lam8364385(i64 %env8364386, i64 %rvp8361901) {
  %envptr8364809 = inttoptr i64 %env8364386 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364810 = getelementptr inbounds i64, i64* %envptr8364809, i64 1            ; &envptr8364809[1]
  %lqc$_37append = load i64, i64* %envptr8364810, align 8                            ; load; *envptr8364810
  %cont8360223 = call i64 @prim_car(i64 %rvp8361901)                                 ; call prim_car
  %rvp8361900 = call i64 @prim_cdr(i64 %rvp8361901)                                  ; call prim_cdr
  %XRg$ls0 = call i64 @prim_car(i64 %rvp8361900)                                     ; call prim_car
  %rvp8361899 = call i64 @prim_cdr(i64 %rvp8361900)                                  ; call prim_cdr
  %P8T$ls1 = call i64 @prim_car(i64 %rvp8361899)                                     ; call prim_car
  %na8361884 = call i64 @prim_cdr(i64 %rvp8361899)                                   ; call prim_cdr
  %a8359980 = call i64 @prim_null_63(i64 %XRg$ls0)                                   ; call prim_null_63
  %cmp8364811 = icmp eq i64 %a8359980, 15                                            ; false?
  br i1 %cmp8364811, label %else8364813, label %then8364812                          ; if

then8364812:
  %arg8360400 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361887 = add i64 0, 0                                                         ; quoted ()
  %rva8361886 = call i64 @prim_cons(i64 %P8T$ls1, i64 %rva8361887)                   ; call prim_cons
  %rva8361885 = call i64 @prim_cons(i64 %arg8360400, i64 %rva8361886)                ; call prim_cons
  %cloptr8364814 = inttoptr i64 %cont8360223 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364815 = getelementptr inbounds i64, i64* %cloptr8364814, i64 0             ; &cloptr8364814[0]
  %f8364817 = load i64, i64* %i0ptr8364815, align 8                                  ; load; *i0ptr8364815
  %fptr8364816 = inttoptr i64 %f8364817 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364816(i64 %cont8360223, i64 %rva8361885)          ; tail call
  ret void

else8364813:
  %a8359981 = call i64 @prim_car(i64 %XRg$ls0)                                       ; call prim_car
  %arg8360403 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359982 = call i64 @prim_vector_45ref(i64 %lqc$_37append, i64 %arg8360403)       ; call prim_vector_45ref
  %a8359983 = call i64 @prim_cdr(i64 %XRg$ls0)                                       ; call prim_cdr
  %cloptr8364818 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364820 = getelementptr inbounds i64, i64* %cloptr8364818, i64 1              ; &eptr8364820[1]
  %eptr8364821 = getelementptr inbounds i64, i64* %cloptr8364818, i64 2              ; &eptr8364821[2]
  store i64 %a8359981, i64* %eptr8364820                                             ; *eptr8364820 = %a8359981
  store i64 %cont8360223, i64* %eptr8364821                                          ; *eptr8364821 = %cont8360223
  %eptr8364819 = getelementptr inbounds i64, i64* %cloptr8364818, i64 0              ; &cloptr8364818[0]
  %f8364822 = ptrtoint void(i64,i64)* @lam8364382 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364822, i64* %eptr8364819                                             ; store fptr
  %arg8360408 = ptrtoint i64* %cloptr8364818 to i64                                  ; closure cast; i64* -> i64
  %rva8361898 = add i64 0, 0                                                         ; quoted ()
  %rva8361897 = call i64 @prim_cons(i64 %P8T$ls1, i64 %rva8361898)                   ; call prim_cons
  %rva8361896 = call i64 @prim_cons(i64 %a8359983, i64 %rva8361897)                  ; call prim_cons
  %rva8361895 = call i64 @prim_cons(i64 %arg8360408, i64 %rva8361896)                ; call prim_cons
  %cloptr8364823 = inttoptr i64 %a8359982 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8364824 = getelementptr inbounds i64, i64* %cloptr8364823, i64 0             ; &cloptr8364823[0]
  %f8364826 = load i64, i64* %i0ptr8364824, align 8                                  ; load; *i0ptr8364824
  %fptr8364825 = inttoptr i64 %f8364826 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364825(i64 %a8359982, i64 %rva8361895)             ; tail call
  ret void
}


define void @lam8364382(i64 %env8364383, i64 %rvp8361894) {
  %envptr8364827 = inttoptr i64 %env8364383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364828 = getelementptr inbounds i64, i64* %envptr8364827, i64 2            ; &envptr8364827[2]
  %cont8360223 = load i64, i64* %envptr8364828, align 8                              ; load; *envptr8364828
  %envptr8364829 = inttoptr i64 %env8364383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364830 = getelementptr inbounds i64, i64* %envptr8364829, i64 1            ; &envptr8364829[1]
  %a8359981 = load i64, i64* %envptr8364830, align 8                                 ; load; *envptr8364830
  %_958360224 = call i64 @prim_car(i64 %rvp8361894)                                  ; call prim_car
  %rvp8361893 = call i64 @prim_cdr(i64 %rvp8361894)                                  ; call prim_cdr
  %a8359984 = call i64 @prim_car(i64 %rvp8361893)                                    ; call prim_car
  %na8361889 = call i64 @prim_cdr(i64 %rvp8361893)                                   ; call prim_cdr
  %retprim8360225 = call i64 @prim_cons(i64 %a8359981, i64 %a8359984)                ; call prim_cons
  %arg8360413 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361892 = add i64 0, 0                                                         ; quoted ()
  %rva8361891 = call i64 @prim_cons(i64 %retprim8360225, i64 %rva8361892)            ; call prim_cons
  %rva8361890 = call i64 @prim_cons(i64 %arg8360413, i64 %rva8361891)                ; call prim_cons
  %cloptr8364831 = inttoptr i64 %cont8360223 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364832 = getelementptr inbounds i64, i64* %cloptr8364831, i64 0             ; &cloptr8364831[0]
  %f8364834 = load i64, i64* %i0ptr8364832, align 8                                  ; load; *i0ptr8364832
  %fptr8364833 = inttoptr i64 %f8364834 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364833(i64 %cont8360223, i64 %rva8361890)          ; tail call
  ret void
}


define void @lam8364374(i64 %env8364375, i64 %rvp8362996) {
  %envptr8364835 = inttoptr i64 %env8364375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364836 = getelementptr inbounds i64, i64* %envptr8364835, i64 3            ; &envptr8364835[3]
  %FOD$_37foldl1 = load i64, i64* %envptr8364836, align 8                            ; load; *envptr8364836
  %envptr8364837 = inttoptr i64 %env8364375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364838 = getelementptr inbounds i64, i64* %envptr8364837, i64 2            ; &envptr8364837[2]
  %mma$_37length = load i64, i64* %envptr8364838, align 8                            ; load; *envptr8364838
  %envptr8364839 = inttoptr i64 %env8364375 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364840 = getelementptr inbounds i64, i64* %envptr8364839, i64 1            ; &envptr8364839[1]
  %YQs$_37_62 = load i64, i64* %envptr8364840, align 8                               ; load; *envptr8364840
  %_958360114 = call i64 @prim_car(i64 %rvp8362996)                                  ; call prim_car
  %rvp8362995 = call i64 @prim_cdr(i64 %rvp8362996)                                  ; call prim_cdr
  %YNg$_37append = call i64 @prim_car(i64 %rvp8362995)                               ; call prim_car
  %na8361903 = call i64 @prim_cdr(i64 %rvp8362995)                                   ; call prim_cdr
  %cloptr8364841 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364842 = getelementptr inbounds i64, i64* %cloptr8364841, i64 0              ; &cloptr8364841[0]
  %f8364843 = ptrtoint void(i64,i64)* @lam8364372 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364843, i64* %eptr8364842                                             ; store fptr
  %ol6$_37list_63 = ptrtoint i64* %cloptr8364841 to i64                              ; closure cast; i64* -> i64
  %cloptr8364844 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364845 = getelementptr inbounds i64, i64* %cloptr8364844, i64 0              ; &cloptr8364844[0]
  %f8364846 = ptrtoint void(i64,i64)* @lam8364320 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364846, i64* %eptr8364845                                             ; store fptr
  %xon$_37drop = ptrtoint i64* %cloptr8364844 to i64                                 ; closure cast; i64* -> i64
  %cloptr8364847 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364848 = getelementptr inbounds i64, i64* %cloptr8364847, i64 0              ; &cloptr8364847[0]
  %f8364849 = ptrtoint void(i64,i64)* @lam8364270 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364849, i64* %eptr8364848                                             ; store fptr
  %KBX$_37memv = ptrtoint i64* %cloptr8364847 to i64                                 ; closure cast; i64* -> i64
  %cloptr8364850 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8364852 = getelementptr inbounds i64, i64* %cloptr8364850, i64 1              ; &eptr8364852[1]
  store i64 %FOD$_37foldl1, i64* %eptr8364852                                        ; *eptr8364852 = %FOD$_37foldl1
  %eptr8364851 = getelementptr inbounds i64, i64* %cloptr8364850, i64 0              ; &cloptr8364850[0]
  %f8364853 = ptrtoint void(i64,i64)* @lam8364229 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364853, i64* %eptr8364851                                             ; store fptr
  %aaG$_37_47 = ptrtoint i64* %cloptr8364850 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364854 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364855 = getelementptr inbounds i64, i64* %cloptr8364854, i64 0              ; &cloptr8364854[0]
  %f8364856 = ptrtoint void(i64,i64)* @lam8364217 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364856, i64* %eptr8364855                                             ; store fptr
  %F3R$_37first = ptrtoint i64* %cloptr8364854 to i64                                ; closure cast; i64* -> i64
  %cloptr8364857 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364858 = getelementptr inbounds i64, i64* %cloptr8364857, i64 0              ; &cloptr8364857[0]
  %f8364859 = ptrtoint void(i64,i64)* @lam8364213 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364859, i64* %eptr8364858                                             ; store fptr
  %zq2$_37second = ptrtoint i64* %cloptr8364857 to i64                               ; closure cast; i64* -> i64
  %cloptr8364860 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364861 = getelementptr inbounds i64, i64* %cloptr8364860, i64 0              ; &cloptr8364860[0]
  %f8364862 = ptrtoint void(i64,i64)* @lam8364209 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364862, i64* %eptr8364861                                             ; store fptr
  %fGP$_37third = ptrtoint i64* %cloptr8364860 to i64                                ; closure cast; i64* -> i64
  %cloptr8364863 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364864 = getelementptr inbounds i64, i64* %cloptr8364863, i64 0              ; &cloptr8364863[0]
  %f8364865 = ptrtoint void(i64,i64)* @lam8364205 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364865, i64* %eptr8364864                                             ; store fptr
  %Rx6$_37fourth = ptrtoint i64* %cloptr8364863 to i64                               ; closure cast; i64* -> i64
  %cloptr8364866 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364867 = getelementptr inbounds i64, i64* %cloptr8364866, i64 0              ; &cloptr8364866[0]
  %f8364868 = ptrtoint void(i64,i64)* @lam8364201 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364868, i64* %eptr8364867                                             ; store fptr
  %arg8360671 = ptrtoint i64* %cloptr8364866 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364869 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364871 = getelementptr inbounds i64, i64* %cloptr8364869, i64 1              ; &eptr8364871[1]
  %eptr8364872 = getelementptr inbounds i64, i64* %cloptr8364869, i64 2              ; &eptr8364872[2]
  %eptr8364873 = getelementptr inbounds i64, i64* %cloptr8364869, i64 3              ; &eptr8364873[3]
  store i64 %xon$_37drop, i64* %eptr8364871                                          ; *eptr8364871 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8364872                                           ; *eptr8364872 = %YQs$_37_62
  store i64 %mma$_37length, i64* %eptr8364873                                        ; *eptr8364873 = %mma$_37length
  %eptr8364870 = getelementptr inbounds i64, i64* %cloptr8364869, i64 0              ; &cloptr8364869[0]
  %f8364874 = ptrtoint void(i64,i64)* @lam8364197 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364874, i64* %eptr8364870                                             ; store fptr
  %arg8360670 = ptrtoint i64* %cloptr8364869 to i64                                  ; closure cast; i64* -> i64
  %rva8362994 = add i64 0, 0                                                         ; quoted ()
  %rva8362993 = call i64 @prim_cons(i64 %arg8360670, i64 %rva8362994)                ; call prim_cons
  %cloptr8364875 = inttoptr i64 %arg8360671 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8364876 = getelementptr inbounds i64, i64* %cloptr8364875, i64 0             ; &cloptr8364875[0]
  %f8364878 = load i64, i64* %i0ptr8364876, align 8                                  ; load; *i0ptr8364876
  %fptr8364877 = inttoptr i64 %f8364878 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364877(i64 %arg8360671, i64 %rva8362993)           ; tail call
  ret void
}


define void @lam8364372(i64 %env8364373, i64 %rvp8361971) {
  %cont8360115 = call i64 @prim_car(i64 %rvp8361971)                                 ; call prim_car
  %rvp8361970 = call i64 @prim_cdr(i64 %rvp8361971)                                  ; call prim_cdr
  %ozQ$a = call i64 @prim_car(i64 %rvp8361970)                                       ; call prim_car
  %na8361905 = call i64 @prim_cdr(i64 %rvp8361970)                                   ; call prim_cdr
  %arg8360421 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %dbu$a = call i64 @prim_make_45vector(i64 %arg8360421, i64 %ozQ$a)                 ; call prim_make_45vector
  %cloptr8364879 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8364880 = getelementptr inbounds i64, i64* %cloptr8364879, i64 0              ; &cloptr8364879[0]
  %f8364881 = ptrtoint void(i64,i64)* @lam8364369 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364881, i64* %eptr8364880                                             ; store fptr
  %arg8360424 = ptrtoint i64* %cloptr8364879 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364882 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364884 = getelementptr inbounds i64, i64* %cloptr8364882, i64 1              ; &eptr8364884[1]
  %eptr8364885 = getelementptr inbounds i64, i64* %cloptr8364882, i64 2              ; &eptr8364885[2]
  store i64 %dbu$a, i64* %eptr8364884                                                ; *eptr8364884 = %dbu$a
  store i64 %cont8360115, i64* %eptr8364885                                          ; *eptr8364885 = %cont8360115
  %eptr8364883 = getelementptr inbounds i64, i64* %cloptr8364882, i64 0              ; &cloptr8364882[0]
  %f8364886 = ptrtoint void(i64,i64)* @lam8364365 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364886, i64* %eptr8364883                                             ; store fptr
  %arg8360423 = ptrtoint i64* %cloptr8364882 to i64                                  ; closure cast; i64* -> i64
  %cloptr8364887 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364889 = getelementptr inbounds i64, i64* %cloptr8364887, i64 1              ; &eptr8364889[1]
  %eptr8364890 = getelementptr inbounds i64, i64* %cloptr8364887, i64 2              ; &eptr8364890[2]
  store i64 %dbu$a, i64* %eptr8364889                                                ; *eptr8364889 = %dbu$a
  store i64 %cont8360115, i64* %eptr8364890                                          ; *eptr8364890 = %cont8360115
  %eptr8364888 = getelementptr inbounds i64, i64* %cloptr8364887, i64 0              ; &cloptr8364887[0]
  %f8364891 = ptrtoint void(i64,i64)* @lam8364343 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364891, i64* %eptr8364888                                             ; store fptr
  %arg8360422 = ptrtoint i64* %cloptr8364887 to i64                                  ; closure cast; i64* -> i64
  %rva8361969 = add i64 0, 0                                                         ; quoted ()
  %rva8361968 = call i64 @prim_cons(i64 %arg8360422, i64 %rva8361969)                ; call prim_cons
  %rva8361967 = call i64 @prim_cons(i64 %arg8360423, i64 %rva8361968)                ; call prim_cons
  %cloptr8364892 = inttoptr i64 %arg8360424 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8364893 = getelementptr inbounds i64, i64* %cloptr8364892, i64 0             ; &cloptr8364892[0]
  %f8364895 = load i64, i64* %i0ptr8364893, align 8                                  ; load; *i0ptr8364893
  %fptr8364894 = inttoptr i64 %f8364895 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364894(i64 %arg8360424, i64 %rva8361967)           ; tail call
  ret void
}


define void @lam8364369(i64 %env8364370, i64 %rvp8361912) {
  %cont8360121 = call i64 @prim_car(i64 %rvp8361912)                                 ; call prim_car
  %rvp8361911 = call i64 @prim_cdr(i64 %rvp8361912)                                  ; call prim_cdr
  %L1f$k = call i64 @prim_car(i64 %rvp8361911)                                       ; call prim_car
  %na8361907 = call i64 @prim_cdr(i64 %rvp8361911)                                   ; call prim_cdr
  %arg8360426 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361910 = add i64 0, 0                                                         ; quoted ()
  %rva8361909 = call i64 @prim_cons(i64 %L1f$k, i64 %rva8361910)                     ; call prim_cons
  %rva8361908 = call i64 @prim_cons(i64 %arg8360426, i64 %rva8361909)                ; call prim_cons
  %cloptr8364896 = inttoptr i64 %cont8360121 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364897 = getelementptr inbounds i64, i64* %cloptr8364896, i64 0             ; &cloptr8364896[0]
  %f8364899 = load i64, i64* %i0ptr8364897, align 8                                  ; load; *i0ptr8364897
  %fptr8364898 = inttoptr i64 %f8364899 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364898(i64 %cont8360121, i64 %rva8361908)          ; tail call
  ret void
}


define void @lam8364365(i64 %env8364366, i64 %rvp8361939) {
  %envptr8364900 = inttoptr i64 %env8364366 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364901 = getelementptr inbounds i64, i64* %envptr8364900, i64 2            ; &envptr8364900[2]
  %cont8360115 = load i64, i64* %envptr8364901, align 8                              ; load; *envptr8364901
  %envptr8364902 = inttoptr i64 %env8364366 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364903 = getelementptr inbounds i64, i64* %envptr8364902, i64 1            ; &envptr8364902[1]
  %dbu$a = load i64, i64* %envptr8364903, align 8                                    ; load; *envptr8364903
  %_958360116 = call i64 @prim_car(i64 %rvp8361939)                                  ; call prim_car
  %rvp8361938 = call i64 @prim_cdr(i64 %rvp8361939)                                  ; call prim_cdr
  %LdQ$cc = call i64 @prim_car(i64 %rvp8361938)                                      ; call prim_car
  %na8361914 = call i64 @prim_cdr(i64 %rvp8361938)                                   ; call prim_cdr
  %arg8360428 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359985 = call i64 @prim_vector_45ref(i64 %dbu$a, i64 %arg8360428)               ; call prim_vector_45ref
  %a8359986 = call i64 @prim_null_63(i64 %a8359985)                                  ; call prim_null_63
  %cmp8364904 = icmp eq i64 %a8359986, 15                                            ; false?
  br i1 %cmp8364904, label %else8364906, label %then8364905                          ; if

then8364905:
  %arg8360432 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8360431 = call i64 @const_init_true()                                          ; quoted #t
  %rva8361917 = add i64 0, 0                                                         ; quoted ()
  %rva8361916 = call i64 @prim_cons(i64 %arg8360431, i64 %rva8361917)                ; call prim_cons
  %rva8361915 = call i64 @prim_cons(i64 %arg8360432, i64 %rva8361916)                ; call prim_cons
  %cloptr8364907 = inttoptr i64 %cont8360115 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364908 = getelementptr inbounds i64, i64* %cloptr8364907, i64 0             ; &cloptr8364907[0]
  %f8364910 = load i64, i64* %i0ptr8364908, align 8                                  ; load; *i0ptr8364908
  %fptr8364909 = inttoptr i64 %f8364910 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364909(i64 %cont8360115, i64 %rva8361915)          ; tail call
  ret void

else8364906:
  %arg8360434 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359987 = call i64 @prim_vector_45ref(i64 %dbu$a, i64 %arg8360434)               ; call prim_vector_45ref
  %a8359988 = call i64 @prim_cons_63(i64 %a8359987)                                  ; call prim_cons_63
  %cmp8364911 = icmp eq i64 %a8359988, 15                                            ; false?
  br i1 %cmp8364911, label %else8364913, label %then8364912                          ; if

then8364912:
  %arg8360437 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359989 = call i64 @prim_vector_45ref(i64 %dbu$a, i64 %arg8360437)               ; call prim_vector_45ref
  %retprim8360120 = call i64 @prim_cdr(i64 %a8359989)                                ; call prim_cdr
  %cloptr8364914 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364916 = getelementptr inbounds i64, i64* %cloptr8364914, i64 1              ; &eptr8364916[1]
  %eptr8364917 = getelementptr inbounds i64, i64* %cloptr8364914, i64 2              ; &eptr8364917[2]
  %eptr8364918 = getelementptr inbounds i64, i64* %cloptr8364914, i64 3              ; &eptr8364918[3]
  store i64 %dbu$a, i64* %eptr8364916                                                ; *eptr8364916 = %dbu$a
  store i64 %cont8360115, i64* %eptr8364917                                          ; *eptr8364917 = %cont8360115
  store i64 %LdQ$cc, i64* %eptr8364918                                               ; *eptr8364918 = %LdQ$cc
  %eptr8364915 = getelementptr inbounds i64, i64* %cloptr8364914, i64 0              ; &cloptr8364914[0]
  %f8364919 = ptrtoint void(i64,i64)* @lam8364357 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364919, i64* %eptr8364915                                             ; store fptr
  %arg8360442 = ptrtoint i64* %cloptr8364914 to i64                                  ; closure cast; i64* -> i64
  %arg8360441 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361934 = add i64 0, 0                                                         ; quoted ()
  %rva8361933 = call i64 @prim_cons(i64 %retprim8360120, i64 %rva8361934)            ; call prim_cons
  %rva8361932 = call i64 @prim_cons(i64 %arg8360441, i64 %rva8361933)                ; call prim_cons
  %cloptr8364920 = inttoptr i64 %arg8360442 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8364921 = getelementptr inbounds i64, i64* %cloptr8364920, i64 0             ; &cloptr8364920[0]
  %f8364923 = load i64, i64* %i0ptr8364921, align 8                                  ; load; *i0ptr8364921
  %fptr8364922 = inttoptr i64 %f8364923 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364922(i64 %arg8360442, i64 %rva8361932)           ; tail call
  ret void

else8364913:
  %arg8360456 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8360455 = call i64 @const_init_false()                                         ; quoted #f
  %rva8361937 = add i64 0, 0                                                         ; quoted ()
  %rva8361936 = call i64 @prim_cons(i64 %arg8360455, i64 %rva8361937)                ; call prim_cons
  %rva8361935 = call i64 @prim_cons(i64 %arg8360456, i64 %rva8361936)                ; call prim_cons
  %cloptr8364924 = inttoptr i64 %cont8360115 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364925 = getelementptr inbounds i64, i64* %cloptr8364924, i64 0             ; &cloptr8364924[0]
  %f8364927 = load i64, i64* %i0ptr8364925, align 8                                  ; load; *i0ptr8364925
  %fptr8364926 = inttoptr i64 %f8364927 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364926(i64 %cont8360115, i64 %rva8361935)          ; tail call
  ret void
}


define void @lam8364357(i64 %env8364358, i64 %rvp8361931) {
  %envptr8364928 = inttoptr i64 %env8364358 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364929 = getelementptr inbounds i64, i64* %envptr8364928, i64 3            ; &envptr8364928[3]
  %LdQ$cc = load i64, i64* %envptr8364929, align 8                                   ; load; *envptr8364929
  %envptr8364930 = inttoptr i64 %env8364358 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364931 = getelementptr inbounds i64, i64* %envptr8364930, i64 2            ; &envptr8364930[2]
  %cont8360115 = load i64, i64* %envptr8364931, align 8                              ; load; *envptr8364931
  %envptr8364932 = inttoptr i64 %env8364358 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364933 = getelementptr inbounds i64, i64* %envptr8364932, i64 1            ; &envptr8364932[1]
  %dbu$a = load i64, i64* %envptr8364933, align 8                                    ; load; *envptr8364933
  %_958360117 = call i64 @prim_car(i64 %rvp8361931)                                  ; call prim_car
  %rvp8361930 = call i64 @prim_cdr(i64 %rvp8361931)                                  ; call prim_cdr
  %une$b = call i64 @prim_car(i64 %rvp8361930)                                       ; call prim_car
  %na8361919 = call i64 @prim_cdr(i64 %rvp8361930)                                   ; call prim_cdr
  %arg8360443 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359990 = call i64 @prim_vector_45ref(i64 %dbu$a, i64 %arg8360443)               ; call prim_vector_45ref
  %a8359991 = call i64 @prim_cdr(i64 %a8359990)                                      ; call prim_cdr
  %arg8360447 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360119 = call i64 @prim_vector_45set_33(i64 %dbu$a, i64 %arg8360447, i64 %a8359991); call prim_vector_45set_33
  %cloptr8364934 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364936 = getelementptr inbounds i64, i64* %cloptr8364934, i64 1              ; &eptr8364936[1]
  %eptr8364937 = getelementptr inbounds i64, i64* %cloptr8364934, i64 2              ; &eptr8364937[2]
  store i64 %cont8360115, i64* %eptr8364936                                          ; *eptr8364936 = %cont8360115
  store i64 %LdQ$cc, i64* %eptr8364937                                               ; *eptr8364937 = %LdQ$cc
  %eptr8364935 = getelementptr inbounds i64, i64* %cloptr8364934, i64 0              ; &cloptr8364934[0]
  %f8364938 = ptrtoint void(i64,i64)* @lam8364353 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364938, i64* %eptr8364935                                             ; store fptr
  %arg8360451 = ptrtoint i64* %cloptr8364934 to i64                                  ; closure cast; i64* -> i64
  %arg8360450 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361929 = add i64 0, 0                                                         ; quoted ()
  %rva8361928 = call i64 @prim_cons(i64 %retprim8360119, i64 %rva8361929)            ; call prim_cons
  %rva8361927 = call i64 @prim_cons(i64 %arg8360450, i64 %rva8361928)                ; call prim_cons
  %cloptr8364939 = inttoptr i64 %arg8360451 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8364940 = getelementptr inbounds i64, i64* %cloptr8364939, i64 0             ; &cloptr8364939[0]
  %f8364942 = load i64, i64* %i0ptr8364940, align 8                                  ; load; *i0ptr8364940
  %fptr8364941 = inttoptr i64 %f8364942 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364941(i64 %arg8360451, i64 %rva8361927)           ; tail call
  ret void
}


define void @lam8364353(i64 %env8364354, i64 %rvp8361926) {
  %envptr8364943 = inttoptr i64 %env8364354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364944 = getelementptr inbounds i64, i64* %envptr8364943, i64 2            ; &envptr8364943[2]
  %LdQ$cc = load i64, i64* %envptr8364944, align 8                                   ; load; *envptr8364944
  %envptr8364945 = inttoptr i64 %env8364354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364946 = getelementptr inbounds i64, i64* %envptr8364945, i64 1            ; &envptr8364945[1]
  %cont8360115 = load i64, i64* %envptr8364946, align 8                              ; load; *envptr8364946
  %_958360118 = call i64 @prim_car(i64 %rvp8361926)                                  ; call prim_car
  %rvp8361925 = call i64 @prim_cdr(i64 %rvp8361926)                                  ; call prim_cdr
  %ogw$_950 = call i64 @prim_car(i64 %rvp8361925)                                    ; call prim_car
  %na8361921 = call i64 @prim_cdr(i64 %rvp8361925)                                   ; call prim_cdr
  %rva8361924 = add i64 0, 0                                                         ; quoted ()
  %rva8361923 = call i64 @prim_cons(i64 %LdQ$cc, i64 %rva8361924)                    ; call prim_cons
  %rva8361922 = call i64 @prim_cons(i64 %cont8360115, i64 %rva8361923)               ; call prim_cons
  %cloptr8364947 = inttoptr i64 %LdQ$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8364948 = getelementptr inbounds i64, i64* %cloptr8364947, i64 0             ; &cloptr8364947[0]
  %f8364950 = load i64, i64* %i0ptr8364948, align 8                                  ; load; *i0ptr8364948
  %fptr8364949 = inttoptr i64 %f8364950 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364949(i64 %LdQ$cc, i64 %rva8361922)               ; tail call
  ret void
}


define void @lam8364343(i64 %env8364344, i64 %rvp8361966) {
  %envptr8364951 = inttoptr i64 %env8364344 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364952 = getelementptr inbounds i64, i64* %envptr8364951, i64 2            ; &envptr8364951[2]
  %cont8360115 = load i64, i64* %envptr8364952, align 8                              ; load; *envptr8364952
  %envptr8364953 = inttoptr i64 %env8364344 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364954 = getelementptr inbounds i64, i64* %envptr8364953, i64 1            ; &envptr8364953[1]
  %dbu$a = load i64, i64* %envptr8364954, align 8                                    ; load; *envptr8364954
  %_958360116 = call i64 @prim_car(i64 %rvp8361966)                                  ; call prim_car
  %rvp8361965 = call i64 @prim_cdr(i64 %rvp8361966)                                  ; call prim_cdr
  %LdQ$cc = call i64 @prim_car(i64 %rvp8361965)                                      ; call prim_car
  %na8361941 = call i64 @prim_cdr(i64 %rvp8361965)                                   ; call prim_cdr
  %arg8360458 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359985 = call i64 @prim_vector_45ref(i64 %dbu$a, i64 %arg8360458)               ; call prim_vector_45ref
  %a8359986 = call i64 @prim_null_63(i64 %a8359985)                                  ; call prim_null_63
  %cmp8364955 = icmp eq i64 %a8359986, 15                                            ; false?
  br i1 %cmp8364955, label %else8364957, label %then8364956                          ; if

then8364956:
  %arg8360462 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8360461 = call i64 @const_init_true()                                          ; quoted #t
  %rva8361944 = add i64 0, 0                                                         ; quoted ()
  %rva8361943 = call i64 @prim_cons(i64 %arg8360461, i64 %rva8361944)                ; call prim_cons
  %rva8361942 = call i64 @prim_cons(i64 %arg8360462, i64 %rva8361943)                ; call prim_cons
  %cloptr8364958 = inttoptr i64 %cont8360115 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364959 = getelementptr inbounds i64, i64* %cloptr8364958, i64 0             ; &cloptr8364958[0]
  %f8364961 = load i64, i64* %i0ptr8364959, align 8                                  ; load; *i0ptr8364959
  %fptr8364960 = inttoptr i64 %f8364961 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364960(i64 %cont8360115, i64 %rva8361942)          ; tail call
  ret void

else8364957:
  %arg8360464 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359987 = call i64 @prim_vector_45ref(i64 %dbu$a, i64 %arg8360464)               ; call prim_vector_45ref
  %a8359988 = call i64 @prim_cons_63(i64 %a8359987)                                  ; call prim_cons_63
  %cmp8364962 = icmp eq i64 %a8359988, 15                                            ; false?
  br i1 %cmp8364962, label %else8364964, label %then8364963                          ; if

then8364963:
  %arg8360467 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359989 = call i64 @prim_vector_45ref(i64 %dbu$a, i64 %arg8360467)               ; call prim_vector_45ref
  %retprim8360120 = call i64 @prim_cdr(i64 %a8359989)                                ; call prim_cdr
  %cloptr8364965 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8364967 = getelementptr inbounds i64, i64* %cloptr8364965, i64 1              ; &eptr8364967[1]
  %eptr8364968 = getelementptr inbounds i64, i64* %cloptr8364965, i64 2              ; &eptr8364968[2]
  %eptr8364969 = getelementptr inbounds i64, i64* %cloptr8364965, i64 3              ; &eptr8364969[3]
  store i64 %dbu$a, i64* %eptr8364967                                                ; *eptr8364967 = %dbu$a
  store i64 %cont8360115, i64* %eptr8364968                                          ; *eptr8364968 = %cont8360115
  store i64 %LdQ$cc, i64* %eptr8364969                                               ; *eptr8364969 = %LdQ$cc
  %eptr8364966 = getelementptr inbounds i64, i64* %cloptr8364965, i64 0              ; &cloptr8364965[0]
  %f8364970 = ptrtoint void(i64,i64)* @lam8364335 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364970, i64* %eptr8364966                                             ; store fptr
  %arg8360472 = ptrtoint i64* %cloptr8364965 to i64                                  ; closure cast; i64* -> i64
  %arg8360471 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361961 = add i64 0, 0                                                         ; quoted ()
  %rva8361960 = call i64 @prim_cons(i64 %retprim8360120, i64 %rva8361961)            ; call prim_cons
  %rva8361959 = call i64 @prim_cons(i64 %arg8360471, i64 %rva8361960)                ; call prim_cons
  %cloptr8364971 = inttoptr i64 %arg8360472 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8364972 = getelementptr inbounds i64, i64* %cloptr8364971, i64 0             ; &cloptr8364971[0]
  %f8364974 = load i64, i64* %i0ptr8364972, align 8                                  ; load; *i0ptr8364972
  %fptr8364973 = inttoptr i64 %f8364974 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364973(i64 %arg8360472, i64 %rva8361959)           ; tail call
  ret void

else8364964:
  %arg8360486 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8360485 = call i64 @const_init_false()                                         ; quoted #f
  %rva8361964 = add i64 0, 0                                                         ; quoted ()
  %rva8361963 = call i64 @prim_cons(i64 %arg8360485, i64 %rva8361964)                ; call prim_cons
  %rva8361962 = call i64 @prim_cons(i64 %arg8360486, i64 %rva8361963)                ; call prim_cons
  %cloptr8364975 = inttoptr i64 %cont8360115 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8364976 = getelementptr inbounds i64, i64* %cloptr8364975, i64 0             ; &cloptr8364975[0]
  %f8364978 = load i64, i64* %i0ptr8364976, align 8                                  ; load; *i0ptr8364976
  %fptr8364977 = inttoptr i64 %f8364978 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364977(i64 %cont8360115, i64 %rva8361962)          ; tail call
  ret void
}


define void @lam8364335(i64 %env8364336, i64 %rvp8361958) {
  %envptr8364979 = inttoptr i64 %env8364336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364980 = getelementptr inbounds i64, i64* %envptr8364979, i64 3            ; &envptr8364979[3]
  %LdQ$cc = load i64, i64* %envptr8364980, align 8                                   ; load; *envptr8364980
  %envptr8364981 = inttoptr i64 %env8364336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364982 = getelementptr inbounds i64, i64* %envptr8364981, i64 2            ; &envptr8364981[2]
  %cont8360115 = load i64, i64* %envptr8364982, align 8                              ; load; *envptr8364982
  %envptr8364983 = inttoptr i64 %env8364336 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364984 = getelementptr inbounds i64, i64* %envptr8364983, i64 1            ; &envptr8364983[1]
  %dbu$a = load i64, i64* %envptr8364984, align 8                                    ; load; *envptr8364984
  %_958360117 = call i64 @prim_car(i64 %rvp8361958)                                  ; call prim_car
  %rvp8361957 = call i64 @prim_cdr(i64 %rvp8361958)                                  ; call prim_cdr
  %une$b = call i64 @prim_car(i64 %rvp8361957)                                       ; call prim_car
  %na8361946 = call i64 @prim_cdr(i64 %rvp8361957)                                   ; call prim_cdr
  %arg8360473 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359990 = call i64 @prim_vector_45ref(i64 %dbu$a, i64 %arg8360473)               ; call prim_vector_45ref
  %a8359991 = call i64 @prim_cdr(i64 %a8359990)                                      ; call prim_cdr
  %arg8360477 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360119 = call i64 @prim_vector_45set_33(i64 %dbu$a, i64 %arg8360477, i64 %a8359991); call prim_vector_45set_33
  %cloptr8364985 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8364987 = getelementptr inbounds i64, i64* %cloptr8364985, i64 1              ; &eptr8364987[1]
  %eptr8364988 = getelementptr inbounds i64, i64* %cloptr8364985, i64 2              ; &eptr8364988[2]
  store i64 %cont8360115, i64* %eptr8364987                                          ; *eptr8364987 = %cont8360115
  store i64 %LdQ$cc, i64* %eptr8364988                                               ; *eptr8364988 = %LdQ$cc
  %eptr8364986 = getelementptr inbounds i64, i64* %cloptr8364985, i64 0              ; &cloptr8364985[0]
  %f8364989 = ptrtoint void(i64,i64)* @lam8364331 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8364989, i64* %eptr8364986                                             ; store fptr
  %arg8360481 = ptrtoint i64* %cloptr8364985 to i64                                  ; closure cast; i64* -> i64
  %arg8360480 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361956 = add i64 0, 0                                                         ; quoted ()
  %rva8361955 = call i64 @prim_cons(i64 %retprim8360119, i64 %rva8361956)            ; call prim_cons
  %rva8361954 = call i64 @prim_cons(i64 %arg8360480, i64 %rva8361955)                ; call prim_cons
  %cloptr8364990 = inttoptr i64 %arg8360481 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8364991 = getelementptr inbounds i64, i64* %cloptr8364990, i64 0             ; &cloptr8364990[0]
  %f8364993 = load i64, i64* %i0ptr8364991, align 8                                  ; load; *i0ptr8364991
  %fptr8364992 = inttoptr i64 %f8364993 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8364992(i64 %arg8360481, i64 %rva8361954)           ; tail call
  ret void
}


define void @lam8364331(i64 %env8364332, i64 %rvp8361953) {
  %envptr8364994 = inttoptr i64 %env8364332 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364995 = getelementptr inbounds i64, i64* %envptr8364994, i64 2            ; &envptr8364994[2]
  %LdQ$cc = load i64, i64* %envptr8364995, align 8                                   ; load; *envptr8364995
  %envptr8364996 = inttoptr i64 %env8364332 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8364997 = getelementptr inbounds i64, i64* %envptr8364996, i64 1            ; &envptr8364996[1]
  %cont8360115 = load i64, i64* %envptr8364997, align 8                              ; load; *envptr8364997
  %_958360118 = call i64 @prim_car(i64 %rvp8361953)                                  ; call prim_car
  %rvp8361952 = call i64 @prim_cdr(i64 %rvp8361953)                                  ; call prim_cdr
  %ogw$_950 = call i64 @prim_car(i64 %rvp8361952)                                    ; call prim_car
  %na8361948 = call i64 @prim_cdr(i64 %rvp8361952)                                   ; call prim_cdr
  %rva8361951 = add i64 0, 0                                                         ; quoted ()
  %rva8361950 = call i64 @prim_cons(i64 %LdQ$cc, i64 %rva8361951)                    ; call prim_cons
  %rva8361949 = call i64 @prim_cons(i64 %cont8360115, i64 %rva8361950)               ; call prim_cons
  %cloptr8364998 = inttoptr i64 %LdQ$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8364999 = getelementptr inbounds i64, i64* %cloptr8364998, i64 0             ; &cloptr8364998[0]
  %f8365001 = load i64, i64* %i0ptr8364999, align 8                                  ; load; *i0ptr8364999
  %fptr8365000 = inttoptr i64 %f8365001 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365000(i64 %LdQ$cc, i64 %rva8361949)               ; tail call
  ret void
}


define void @lam8364320(i64 %env8364321, i64 %rvp8362034) {
  %cont8360122 = call i64 @prim_car(i64 %rvp8362034)                                 ; call prim_car
  %rvp8362033 = call i64 @prim_cdr(i64 %rvp8362034)                                  ; call prim_cdr
  %MgM$lst = call i64 @prim_car(i64 %rvp8362033)                                     ; call prim_car
  %rvp8362032 = call i64 @prim_cdr(i64 %rvp8362033)                                  ; call prim_cdr
  %Cqa$n = call i64 @prim_car(i64 %rvp8362032)                                       ; call prim_car
  %na8361973 = call i64 @prim_cdr(i64 %rvp8362032)                                   ; call prim_cdr
  %arg8360489 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %p5m$lst = call i64 @prim_make_45vector(i64 %arg8360489, i64 %MgM$lst)             ; call prim_make_45vector
  %arg8360491 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %Hn5$n = call i64 @prim_make_45vector(i64 %arg8360491, i64 %Cqa$n)                 ; call prim_make_45vector
  %cloptr8365002 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8365003 = getelementptr inbounds i64, i64* %cloptr8365002, i64 0              ; &cloptr8365002[0]
  %f8365004 = ptrtoint void(i64,i64)* @lam8364316 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365004, i64* %eptr8365003                                             ; store fptr
  %arg8360494 = ptrtoint i64* %cloptr8365002 to i64                                  ; closure cast; i64* -> i64
  %cloptr8365005 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365007 = getelementptr inbounds i64, i64* %cloptr8365005, i64 1              ; &eptr8365007[1]
  %eptr8365008 = getelementptr inbounds i64, i64* %cloptr8365005, i64 2              ; &eptr8365008[2]
  %eptr8365009 = getelementptr inbounds i64, i64* %cloptr8365005, i64 3              ; &eptr8365009[3]
  store i64 %Hn5$n, i64* %eptr8365007                                                ; *eptr8365007 = %Hn5$n
  store i64 %p5m$lst, i64* %eptr8365008                                              ; *eptr8365008 = %p5m$lst
  store i64 %cont8360122, i64* %eptr8365009                                          ; *eptr8365009 = %cont8360122
  %eptr8365006 = getelementptr inbounds i64, i64* %cloptr8365005, i64 0              ; &cloptr8365005[0]
  %f8365010 = ptrtoint void(i64,i64)* @lam8364313 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365010, i64* %eptr8365006                                             ; store fptr
  %arg8360493 = ptrtoint i64* %cloptr8365005 to i64                                  ; closure cast; i64* -> i64
  %cloptr8365011 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365013 = getelementptr inbounds i64, i64* %cloptr8365011, i64 1              ; &eptr8365013[1]
  %eptr8365014 = getelementptr inbounds i64, i64* %cloptr8365011, i64 2              ; &eptr8365014[2]
  %eptr8365015 = getelementptr inbounds i64, i64* %cloptr8365011, i64 3              ; &eptr8365015[3]
  store i64 %Hn5$n, i64* %eptr8365013                                                ; *eptr8365013 = %Hn5$n
  store i64 %p5m$lst, i64* %eptr8365014                                              ; *eptr8365014 = %p5m$lst
  store i64 %cont8360122, i64* %eptr8365015                                          ; *eptr8365015 = %cont8360122
  %eptr8365012 = getelementptr inbounds i64, i64* %cloptr8365011, i64 0              ; &cloptr8365011[0]
  %f8365016 = ptrtoint void(i64,i64)* @lam8364292 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365016, i64* %eptr8365012                                             ; store fptr
  %arg8360492 = ptrtoint i64* %cloptr8365011 to i64                                  ; closure cast; i64* -> i64
  %rva8362031 = add i64 0, 0                                                         ; quoted ()
  %rva8362030 = call i64 @prim_cons(i64 %arg8360492, i64 %rva8362031)                ; call prim_cons
  %rva8362029 = call i64 @prim_cons(i64 %arg8360493, i64 %rva8362030)                ; call prim_cons
  %cloptr8365017 = inttoptr i64 %arg8360494 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365018 = getelementptr inbounds i64, i64* %cloptr8365017, i64 0             ; &cloptr8365017[0]
  %f8365020 = load i64, i64* %i0ptr8365018, align 8                                  ; load; *i0ptr8365018
  %fptr8365019 = inttoptr i64 %f8365020 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365019(i64 %arg8360494, i64 %rva8362029)           ; tail call
  ret void
}


define void @lam8364316(i64 %env8364317, i64 %rvp8361980) {
  %cont8360129 = call i64 @prim_car(i64 %rvp8361980)                                 ; call prim_car
  %rvp8361979 = call i64 @prim_cdr(i64 %rvp8361980)                                  ; call prim_cdr
  %PEY$u = call i64 @prim_car(i64 %rvp8361979)                                       ; call prim_car
  %na8361975 = call i64 @prim_cdr(i64 %rvp8361979)                                   ; call prim_cdr
  %rva8361978 = add i64 0, 0                                                         ; quoted ()
  %rva8361977 = call i64 @prim_cons(i64 %PEY$u, i64 %rva8361978)                     ; call prim_cons
  %rva8361976 = call i64 @prim_cons(i64 %cont8360129, i64 %rva8361977)               ; call prim_cons
  %cloptr8365021 = inttoptr i64 %PEY$u to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8365022 = getelementptr inbounds i64, i64* %cloptr8365021, i64 0             ; &cloptr8365021[0]
  %f8365024 = load i64, i64* %i0ptr8365022, align 8                                  ; load; *i0ptr8365022
  %fptr8365023 = inttoptr i64 %f8365024 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365023(i64 %PEY$u, i64 %rva8361976)                ; tail call
  ret void
}


define void @lam8364313(i64 %env8364314, i64 %rvp8362004) {
  %envptr8365025 = inttoptr i64 %env8364314 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365026 = getelementptr inbounds i64, i64* %envptr8365025, i64 3            ; &envptr8365025[3]
  %cont8360122 = load i64, i64* %envptr8365026, align 8                              ; load; *envptr8365026
  %envptr8365027 = inttoptr i64 %env8364314 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365028 = getelementptr inbounds i64, i64* %envptr8365027, i64 2            ; &envptr8365027[2]
  %p5m$lst = load i64, i64* %envptr8365028, align 8                                  ; load; *envptr8365028
  %envptr8365029 = inttoptr i64 %env8364314 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365030 = getelementptr inbounds i64, i64* %envptr8365029, i64 1            ; &envptr8365029[1]
  %Hn5$n = load i64, i64* %envptr8365030, align 8                                    ; load; *envptr8365030
  %_958360123 = call i64 @prim_car(i64 %rvp8362004)                                  ; call prim_car
  %rvp8362003 = call i64 @prim_cdr(i64 %rvp8362004)                                  ; call prim_cdr
  %zLk$cc = call i64 @prim_car(i64 %rvp8362003)                                      ; call prim_car
  %na8361982 = call i64 @prim_cdr(i64 %rvp8362003)                                   ; call prim_cdr
  %arg8360498 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359992 = call i64 @prim_vector_45ref(i64 %Hn5$n, i64 %arg8360498)               ; call prim_vector_45ref
  %arg8360501 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359993 = call i64 @prim__61(i64 %arg8360501, i64 %a8359992)                     ; call prim__61
  %cmp8365031 = icmp eq i64 %a8359993, 15                                            ; false?
  br i1 %cmp8365031, label %else8365033, label %then8365032                          ; if

then8365032:
  %arg8360502 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360124 = call i64 @prim_vector_45ref(i64 %p5m$lst, i64 %arg8360502)       ; call prim_vector_45ref
  %arg8360505 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361985 = add i64 0, 0                                                         ; quoted ()
  %rva8361984 = call i64 @prim_cons(i64 %retprim8360124, i64 %rva8361985)            ; call prim_cons
  %rva8361983 = call i64 @prim_cons(i64 %arg8360505, i64 %rva8361984)                ; call prim_cons
  %cloptr8365034 = inttoptr i64 %cont8360122 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365035 = getelementptr inbounds i64, i64* %cloptr8365034, i64 0             ; &cloptr8365034[0]
  %f8365037 = load i64, i64* %i0ptr8365035, align 8                                  ; load; *i0ptr8365035
  %fptr8365036 = inttoptr i64 %f8365037 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365036(i64 %cont8360122, i64 %rva8361983)          ; tail call
  ret void

else8365033:
  %arg8360507 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359994 = call i64 @prim_vector_45ref(i64 %p5m$lst, i64 %arg8360507)             ; call prim_vector_45ref
  %a8359995 = call i64 @prim_cdr(i64 %a8359994)                                      ; call prim_cdr
  %arg8360511 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360128 = call i64 @prim_vector_45set_33(i64 %p5m$lst, i64 %arg8360511, i64 %a8359995); call prim_vector_45set_33
  %cloptr8365038 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365040 = getelementptr inbounds i64, i64* %cloptr8365038, i64 1              ; &eptr8365040[1]
  %eptr8365041 = getelementptr inbounds i64, i64* %cloptr8365038, i64 2              ; &eptr8365041[2]
  %eptr8365042 = getelementptr inbounds i64, i64* %cloptr8365038, i64 3              ; &eptr8365042[3]
  store i64 %Hn5$n, i64* %eptr8365040                                                ; *eptr8365040 = %Hn5$n
  store i64 %cont8360122, i64* %eptr8365041                                          ; *eptr8365041 = %cont8360122
  store i64 %zLk$cc, i64* %eptr8365042                                               ; *eptr8365042 = %zLk$cc
  %eptr8365039 = getelementptr inbounds i64, i64* %cloptr8365038, i64 0              ; &cloptr8365038[0]
  %f8365043 = ptrtoint void(i64,i64)* @lam8364307 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365043, i64* %eptr8365039                                             ; store fptr
  %arg8360515 = ptrtoint i64* %cloptr8365038 to i64                                  ; closure cast; i64* -> i64
  %arg8360514 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362002 = add i64 0, 0                                                         ; quoted ()
  %rva8362001 = call i64 @prim_cons(i64 %retprim8360128, i64 %rva8362002)            ; call prim_cons
  %rva8362000 = call i64 @prim_cons(i64 %arg8360514, i64 %rva8362001)                ; call prim_cons
  %cloptr8365044 = inttoptr i64 %arg8360515 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365045 = getelementptr inbounds i64, i64* %cloptr8365044, i64 0             ; &cloptr8365044[0]
  %f8365047 = load i64, i64* %i0ptr8365045, align 8                                  ; load; *i0ptr8365045
  %fptr8365046 = inttoptr i64 %f8365047 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365046(i64 %arg8360515, i64 %rva8362000)           ; tail call
  ret void
}


define void @lam8364307(i64 %env8364308, i64 %rvp8361999) {
  %envptr8365048 = inttoptr i64 %env8364308 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365049 = getelementptr inbounds i64, i64* %envptr8365048, i64 3            ; &envptr8365048[3]
  %zLk$cc = load i64, i64* %envptr8365049, align 8                                   ; load; *envptr8365049
  %envptr8365050 = inttoptr i64 %env8364308 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365051 = getelementptr inbounds i64, i64* %envptr8365050, i64 2            ; &envptr8365050[2]
  %cont8360122 = load i64, i64* %envptr8365051, align 8                              ; load; *envptr8365051
  %envptr8365052 = inttoptr i64 %env8364308 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365053 = getelementptr inbounds i64, i64* %envptr8365052, i64 1            ; &envptr8365052[1]
  %Hn5$n = load i64, i64* %envptr8365053, align 8                                    ; load; *envptr8365053
  %_958360125 = call i64 @prim_car(i64 %rvp8361999)                                  ; call prim_car
  %rvp8361998 = call i64 @prim_cdr(i64 %rvp8361999)                                  ; call prim_cdr
  %kxx$_950 = call i64 @prim_car(i64 %rvp8361998)                                    ; call prim_car
  %na8361987 = call i64 @prim_cdr(i64 %rvp8361998)                                   ; call prim_cdr
  %arg8360516 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359996 = call i64 @prim_vector_45ref(i64 %Hn5$n, i64 %arg8360516)               ; call prim_vector_45ref
  %arg8360518 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a8359997 = call i64 @prim__45(i64 %a8359996, i64 %arg8360518)                     ; call prim__45
  %arg8360521 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360127 = call i64 @prim_vector_45set_33(i64 %Hn5$n, i64 %arg8360521, i64 %a8359997); call prim_vector_45set_33
  %cloptr8365054 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8365056 = getelementptr inbounds i64, i64* %cloptr8365054, i64 1              ; &eptr8365056[1]
  %eptr8365057 = getelementptr inbounds i64, i64* %cloptr8365054, i64 2              ; &eptr8365057[2]
  store i64 %cont8360122, i64* %eptr8365056                                          ; *eptr8365056 = %cont8360122
  store i64 %zLk$cc, i64* %eptr8365057                                               ; *eptr8365057 = %zLk$cc
  %eptr8365055 = getelementptr inbounds i64, i64* %cloptr8365054, i64 0              ; &cloptr8365054[0]
  %f8365058 = ptrtoint void(i64,i64)* @lam8364302 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365058, i64* %eptr8365055                                             ; store fptr
  %arg8360525 = ptrtoint i64* %cloptr8365054 to i64                                  ; closure cast; i64* -> i64
  %arg8360524 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8361997 = add i64 0, 0                                                         ; quoted ()
  %rva8361996 = call i64 @prim_cons(i64 %retprim8360127, i64 %rva8361997)            ; call prim_cons
  %rva8361995 = call i64 @prim_cons(i64 %arg8360524, i64 %rva8361996)                ; call prim_cons
  %cloptr8365059 = inttoptr i64 %arg8360525 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365060 = getelementptr inbounds i64, i64* %cloptr8365059, i64 0             ; &cloptr8365059[0]
  %f8365062 = load i64, i64* %i0ptr8365060, align 8                                  ; load; *i0ptr8365060
  %fptr8365061 = inttoptr i64 %f8365062 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365061(i64 %arg8360525, i64 %rva8361995)           ; tail call
  ret void
}


define void @lam8364302(i64 %env8364303, i64 %rvp8361994) {
  %envptr8365063 = inttoptr i64 %env8364303 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365064 = getelementptr inbounds i64, i64* %envptr8365063, i64 2            ; &envptr8365063[2]
  %zLk$cc = load i64, i64* %envptr8365064, align 8                                   ; load; *envptr8365064
  %envptr8365065 = inttoptr i64 %env8364303 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365066 = getelementptr inbounds i64, i64* %envptr8365065, i64 1            ; &envptr8365065[1]
  %cont8360122 = load i64, i64* %envptr8365066, align 8                              ; load; *envptr8365066
  %_958360126 = call i64 @prim_car(i64 %rvp8361994)                                  ; call prim_car
  %rvp8361993 = call i64 @prim_cdr(i64 %rvp8361994)                                  ; call prim_cdr
  %pDD$_951 = call i64 @prim_car(i64 %rvp8361993)                                    ; call prim_car
  %na8361989 = call i64 @prim_cdr(i64 %rvp8361993)                                   ; call prim_cdr
  %rva8361992 = add i64 0, 0                                                         ; quoted ()
  %rva8361991 = call i64 @prim_cons(i64 %zLk$cc, i64 %rva8361992)                    ; call prim_cons
  %rva8361990 = call i64 @prim_cons(i64 %cont8360122, i64 %rva8361991)               ; call prim_cons
  %cloptr8365067 = inttoptr i64 %zLk$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8365068 = getelementptr inbounds i64, i64* %cloptr8365067, i64 0             ; &cloptr8365067[0]
  %f8365070 = load i64, i64* %i0ptr8365068, align 8                                  ; load; *i0ptr8365068
  %fptr8365069 = inttoptr i64 %f8365070 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365069(i64 %zLk$cc, i64 %rva8361990)               ; tail call
  ret void
}


define void @lam8364292(i64 %env8364293, i64 %rvp8362028) {
  %envptr8365071 = inttoptr i64 %env8364293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365072 = getelementptr inbounds i64, i64* %envptr8365071, i64 3            ; &envptr8365071[3]
  %cont8360122 = load i64, i64* %envptr8365072, align 8                              ; load; *envptr8365072
  %envptr8365073 = inttoptr i64 %env8364293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365074 = getelementptr inbounds i64, i64* %envptr8365073, i64 2            ; &envptr8365073[2]
  %p5m$lst = load i64, i64* %envptr8365074, align 8                                  ; load; *envptr8365074
  %envptr8365075 = inttoptr i64 %env8364293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365076 = getelementptr inbounds i64, i64* %envptr8365075, i64 1            ; &envptr8365075[1]
  %Hn5$n = load i64, i64* %envptr8365076, align 8                                    ; load; *envptr8365076
  %_958360123 = call i64 @prim_car(i64 %rvp8362028)                                  ; call prim_car
  %rvp8362027 = call i64 @prim_cdr(i64 %rvp8362028)                                  ; call prim_cdr
  %zLk$cc = call i64 @prim_car(i64 %rvp8362027)                                      ; call prim_car
  %na8362006 = call i64 @prim_cdr(i64 %rvp8362027)                                   ; call prim_cdr
  %arg8360529 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359992 = call i64 @prim_vector_45ref(i64 %Hn5$n, i64 %arg8360529)               ; call prim_vector_45ref
  %arg8360532 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359993 = call i64 @prim__61(i64 %arg8360532, i64 %a8359992)                     ; call prim__61
  %cmp8365077 = icmp eq i64 %a8359993, 15                                            ; false?
  br i1 %cmp8365077, label %else8365079, label %then8365078                          ; if

then8365078:
  %arg8360533 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360124 = call i64 @prim_vector_45ref(i64 %p5m$lst, i64 %arg8360533)       ; call prim_vector_45ref
  %arg8360536 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362009 = add i64 0, 0                                                         ; quoted ()
  %rva8362008 = call i64 @prim_cons(i64 %retprim8360124, i64 %rva8362009)            ; call prim_cons
  %rva8362007 = call i64 @prim_cons(i64 %arg8360536, i64 %rva8362008)                ; call prim_cons
  %cloptr8365080 = inttoptr i64 %cont8360122 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365081 = getelementptr inbounds i64, i64* %cloptr8365080, i64 0             ; &cloptr8365080[0]
  %f8365083 = load i64, i64* %i0ptr8365081, align 8                                  ; load; *i0ptr8365081
  %fptr8365082 = inttoptr i64 %f8365083 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365082(i64 %cont8360122, i64 %rva8362007)          ; tail call
  ret void

else8365079:
  %arg8360538 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359994 = call i64 @prim_vector_45ref(i64 %p5m$lst, i64 %arg8360538)             ; call prim_vector_45ref
  %a8359995 = call i64 @prim_cdr(i64 %a8359994)                                      ; call prim_cdr
  %arg8360542 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360128 = call i64 @prim_vector_45set_33(i64 %p5m$lst, i64 %arg8360542, i64 %a8359995); call prim_vector_45set_33
  %cloptr8365084 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365086 = getelementptr inbounds i64, i64* %cloptr8365084, i64 1              ; &eptr8365086[1]
  %eptr8365087 = getelementptr inbounds i64, i64* %cloptr8365084, i64 2              ; &eptr8365087[2]
  %eptr8365088 = getelementptr inbounds i64, i64* %cloptr8365084, i64 3              ; &eptr8365088[3]
  store i64 %Hn5$n, i64* %eptr8365086                                                ; *eptr8365086 = %Hn5$n
  store i64 %cont8360122, i64* %eptr8365087                                          ; *eptr8365087 = %cont8360122
  store i64 %zLk$cc, i64* %eptr8365088                                               ; *eptr8365088 = %zLk$cc
  %eptr8365085 = getelementptr inbounds i64, i64* %cloptr8365084, i64 0              ; &cloptr8365084[0]
  %f8365089 = ptrtoint void(i64,i64)* @lam8364286 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365089, i64* %eptr8365085                                             ; store fptr
  %arg8360546 = ptrtoint i64* %cloptr8365084 to i64                                  ; closure cast; i64* -> i64
  %arg8360545 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362026 = add i64 0, 0                                                         ; quoted ()
  %rva8362025 = call i64 @prim_cons(i64 %retprim8360128, i64 %rva8362026)            ; call prim_cons
  %rva8362024 = call i64 @prim_cons(i64 %arg8360545, i64 %rva8362025)                ; call prim_cons
  %cloptr8365090 = inttoptr i64 %arg8360546 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365091 = getelementptr inbounds i64, i64* %cloptr8365090, i64 0             ; &cloptr8365090[0]
  %f8365093 = load i64, i64* %i0ptr8365091, align 8                                  ; load; *i0ptr8365091
  %fptr8365092 = inttoptr i64 %f8365093 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365092(i64 %arg8360546, i64 %rva8362024)           ; tail call
  ret void
}


define void @lam8364286(i64 %env8364287, i64 %rvp8362023) {
  %envptr8365094 = inttoptr i64 %env8364287 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365095 = getelementptr inbounds i64, i64* %envptr8365094, i64 3            ; &envptr8365094[3]
  %zLk$cc = load i64, i64* %envptr8365095, align 8                                   ; load; *envptr8365095
  %envptr8365096 = inttoptr i64 %env8364287 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365097 = getelementptr inbounds i64, i64* %envptr8365096, i64 2            ; &envptr8365096[2]
  %cont8360122 = load i64, i64* %envptr8365097, align 8                              ; load; *envptr8365097
  %envptr8365098 = inttoptr i64 %env8364287 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365099 = getelementptr inbounds i64, i64* %envptr8365098, i64 1            ; &envptr8365098[1]
  %Hn5$n = load i64, i64* %envptr8365099, align 8                                    ; load; *envptr8365099
  %_958360125 = call i64 @prim_car(i64 %rvp8362023)                                  ; call prim_car
  %rvp8362022 = call i64 @prim_cdr(i64 %rvp8362023)                                  ; call prim_cdr
  %kxx$_950 = call i64 @prim_car(i64 %rvp8362022)                                    ; call prim_car
  %na8362011 = call i64 @prim_cdr(i64 %rvp8362022)                                   ; call prim_cdr
  %arg8360547 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359996 = call i64 @prim_vector_45ref(i64 %Hn5$n, i64 %arg8360547)               ; call prim_vector_45ref
  %arg8360549 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a8359997 = call i64 @prim__45(i64 %a8359996, i64 %arg8360549)                     ; call prim__45
  %arg8360552 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360127 = call i64 @prim_vector_45set_33(i64 %Hn5$n, i64 %arg8360552, i64 %a8359997); call prim_vector_45set_33
  %cloptr8365100 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8365102 = getelementptr inbounds i64, i64* %cloptr8365100, i64 1              ; &eptr8365102[1]
  %eptr8365103 = getelementptr inbounds i64, i64* %cloptr8365100, i64 2              ; &eptr8365103[2]
  store i64 %cont8360122, i64* %eptr8365102                                          ; *eptr8365102 = %cont8360122
  store i64 %zLk$cc, i64* %eptr8365103                                               ; *eptr8365103 = %zLk$cc
  %eptr8365101 = getelementptr inbounds i64, i64* %cloptr8365100, i64 0              ; &cloptr8365100[0]
  %f8365104 = ptrtoint void(i64,i64)* @lam8364281 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365104, i64* %eptr8365101                                             ; store fptr
  %arg8360556 = ptrtoint i64* %cloptr8365100 to i64                                  ; closure cast; i64* -> i64
  %arg8360555 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362021 = add i64 0, 0                                                         ; quoted ()
  %rva8362020 = call i64 @prim_cons(i64 %retprim8360127, i64 %rva8362021)            ; call prim_cons
  %rva8362019 = call i64 @prim_cons(i64 %arg8360555, i64 %rva8362020)                ; call prim_cons
  %cloptr8365105 = inttoptr i64 %arg8360556 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365106 = getelementptr inbounds i64, i64* %cloptr8365105, i64 0             ; &cloptr8365105[0]
  %f8365108 = load i64, i64* %i0ptr8365106, align 8                                  ; load; *i0ptr8365106
  %fptr8365107 = inttoptr i64 %f8365108 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365107(i64 %arg8360556, i64 %rva8362019)           ; tail call
  ret void
}


define void @lam8364281(i64 %env8364282, i64 %rvp8362018) {
  %envptr8365109 = inttoptr i64 %env8364282 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365110 = getelementptr inbounds i64, i64* %envptr8365109, i64 2            ; &envptr8365109[2]
  %zLk$cc = load i64, i64* %envptr8365110, align 8                                   ; load; *envptr8365110
  %envptr8365111 = inttoptr i64 %env8364282 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365112 = getelementptr inbounds i64, i64* %envptr8365111, i64 1            ; &envptr8365111[1]
  %cont8360122 = load i64, i64* %envptr8365112, align 8                              ; load; *envptr8365112
  %_958360126 = call i64 @prim_car(i64 %rvp8362018)                                  ; call prim_car
  %rvp8362017 = call i64 @prim_cdr(i64 %rvp8362018)                                  ; call prim_cdr
  %pDD$_951 = call i64 @prim_car(i64 %rvp8362017)                                    ; call prim_car
  %na8362013 = call i64 @prim_cdr(i64 %rvp8362017)                                   ; call prim_cdr
  %rva8362016 = add i64 0, 0                                                         ; quoted ()
  %rva8362015 = call i64 @prim_cons(i64 %zLk$cc, i64 %rva8362016)                    ; call prim_cons
  %rva8362014 = call i64 @prim_cons(i64 %cont8360122, i64 %rva8362015)               ; call prim_cons
  %cloptr8365113 = inttoptr i64 %zLk$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8365114 = getelementptr inbounds i64, i64* %cloptr8365113, i64 0             ; &cloptr8365113[0]
  %f8365116 = load i64, i64* %i0ptr8365114, align 8                                  ; load; *i0ptr8365114
  %fptr8365115 = inttoptr i64 %f8365116 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365115(i64 %zLk$cc, i64 %rva8362014)               ; tail call
  ret void
}


define void @lam8364270(i64 %env8364271, i64 %rvp8362089) {
  %cont8360130 = call i64 @prim_car(i64 %rvp8362089)                                 ; call prim_car
  %rvp8362088 = call i64 @prim_cdr(i64 %rvp8362089)                                  ; call prim_cdr
  %PBS$v = call i64 @prim_car(i64 %rvp8362088)                                       ; call prim_car
  %rvp8362087 = call i64 @prim_cdr(i64 %rvp8362088)                                  ; call prim_cdr
  %NwW$lst = call i64 @prim_car(i64 %rvp8362087)                                     ; call prim_car
  %na8362036 = call i64 @prim_cdr(i64 %rvp8362087)                                   ; call prim_cdr
  %arg8360561 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %O15$lst = call i64 @prim_make_45vector(i64 %arg8360561, i64 %NwW$lst)             ; call prim_make_45vector
  %cloptr8365117 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8365118 = getelementptr inbounds i64, i64* %cloptr8365117, i64 0              ; &cloptr8365117[0]
  %f8365119 = ptrtoint void(i64,i64)* @lam8364267 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365119, i64* %eptr8365118                                             ; store fptr
  %arg8360564 = ptrtoint i64* %cloptr8365117 to i64                                  ; closure cast; i64* -> i64
  %cloptr8365120 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365122 = getelementptr inbounds i64, i64* %cloptr8365120, i64 1              ; &eptr8365122[1]
  %eptr8365123 = getelementptr inbounds i64, i64* %cloptr8365120, i64 2              ; &eptr8365123[2]
  %eptr8365124 = getelementptr inbounds i64, i64* %cloptr8365120, i64 3              ; &eptr8365124[3]
  store i64 %cont8360130, i64* %eptr8365122                                          ; *eptr8365122 = %cont8360130
  store i64 %O15$lst, i64* %eptr8365123                                              ; *eptr8365123 = %O15$lst
  store i64 %PBS$v, i64* %eptr8365124                                                ; *eptr8365124 = %PBS$v
  %eptr8365121 = getelementptr inbounds i64, i64* %cloptr8365120, i64 0              ; &cloptr8365120[0]
  %f8365125 = ptrtoint void(i64,i64)* @lam8364264 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365125, i64* %eptr8365121                                             ; store fptr
  %arg8360563 = ptrtoint i64* %cloptr8365120 to i64                                  ; closure cast; i64* -> i64
  %cloptr8365126 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365128 = getelementptr inbounds i64, i64* %cloptr8365126, i64 1              ; &eptr8365128[1]
  %eptr8365129 = getelementptr inbounds i64, i64* %cloptr8365126, i64 2              ; &eptr8365129[2]
  %eptr8365130 = getelementptr inbounds i64, i64* %cloptr8365126, i64 3              ; &eptr8365130[3]
  store i64 %cont8360130, i64* %eptr8365128                                          ; *eptr8365128 = %cont8360130
  store i64 %O15$lst, i64* %eptr8365129                                              ; *eptr8365129 = %O15$lst
  store i64 %PBS$v, i64* %eptr8365130                                                ; *eptr8365130 = %PBS$v
  %eptr8365127 = getelementptr inbounds i64, i64* %cloptr8365126, i64 0              ; &cloptr8365126[0]
  %f8365131 = ptrtoint void(i64,i64)* @lam8364247 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365131, i64* %eptr8365127                                             ; store fptr
  %arg8360562 = ptrtoint i64* %cloptr8365126 to i64                                  ; closure cast; i64* -> i64
  %rva8362086 = add i64 0, 0                                                         ; quoted ()
  %rva8362085 = call i64 @prim_cons(i64 %arg8360562, i64 %rva8362086)                ; call prim_cons
  %rva8362084 = call i64 @prim_cons(i64 %arg8360563, i64 %rva8362085)                ; call prim_cons
  %cloptr8365132 = inttoptr i64 %arg8360564 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365133 = getelementptr inbounds i64, i64* %cloptr8365132, i64 0             ; &cloptr8365132[0]
  %f8365135 = load i64, i64* %i0ptr8365133, align 8                                  ; load; *i0ptr8365133
  %fptr8365134 = inttoptr i64 %f8365135 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365134(i64 %arg8360564, i64 %rva8362084)           ; tail call
  ret void
}


define void @lam8364267(i64 %env8364268, i64 %rvp8362043) {
  %cont8360135 = call i64 @prim_car(i64 %rvp8362043)                                 ; call prim_car
  %rvp8362042 = call i64 @prim_cdr(i64 %rvp8362043)                                  ; call prim_cdr
  %Z2D$u = call i64 @prim_car(i64 %rvp8362042)                                       ; call prim_car
  %na8362038 = call i64 @prim_cdr(i64 %rvp8362042)                                   ; call prim_cdr
  %rva8362041 = add i64 0, 0                                                         ; quoted ()
  %rva8362040 = call i64 @prim_cons(i64 %Z2D$u, i64 %rva8362041)                     ; call prim_cons
  %rva8362039 = call i64 @prim_cons(i64 %cont8360135, i64 %rva8362040)               ; call prim_cons
  %cloptr8365136 = inttoptr i64 %Z2D$u to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8365137 = getelementptr inbounds i64, i64* %cloptr8365136, i64 0             ; &cloptr8365136[0]
  %f8365139 = load i64, i64* %i0ptr8365137, align 8                                  ; load; *i0ptr8365137
  %fptr8365138 = inttoptr i64 %f8365139 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365138(i64 %Z2D$u, i64 %rva8362039)                ; tail call
  ret void
}


define void @lam8364264(i64 %env8364265, i64 %rvp8362063) {
  %envptr8365140 = inttoptr i64 %env8364265 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365141 = getelementptr inbounds i64, i64* %envptr8365140, i64 3            ; &envptr8365140[3]
  %PBS$v = load i64, i64* %envptr8365141, align 8                                    ; load; *envptr8365141
  %envptr8365142 = inttoptr i64 %env8364265 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365143 = getelementptr inbounds i64, i64* %envptr8365142, i64 2            ; &envptr8365142[2]
  %O15$lst = load i64, i64* %envptr8365143, align 8                                  ; load; *envptr8365143
  %envptr8365144 = inttoptr i64 %env8364265 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365145 = getelementptr inbounds i64, i64* %envptr8365144, i64 1            ; &envptr8365144[1]
  %cont8360130 = load i64, i64* %envptr8365145, align 8                              ; load; *envptr8365145
  %_958360131 = call i64 @prim_car(i64 %rvp8362063)                                  ; call prim_car
  %rvp8362062 = call i64 @prim_cdr(i64 %rvp8362063)                                  ; call prim_cdr
  %ptE$cc = call i64 @prim_car(i64 %rvp8362062)                                      ; call prim_car
  %na8362045 = call i64 @prim_cdr(i64 %rvp8362062)                                   ; call prim_cdr
  %arg8360568 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359998 = call i64 @prim_vector_45ref(i64 %O15$lst, i64 %arg8360568)             ; call prim_vector_45ref
  %a8359999 = call i64 @prim_null_63(i64 %a8359998)                                  ; call prim_null_63
  %cmp8365146 = icmp eq i64 %a8359999, 15                                            ; false?
  br i1 %cmp8365146, label %else8365148, label %then8365147                          ; if

then8365147:
  %arg8360572 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8360571 = call i64 @const_init_false()                                         ; quoted #f
  %rva8362048 = add i64 0, 0                                                         ; quoted ()
  %rva8362047 = call i64 @prim_cons(i64 %arg8360571, i64 %rva8362048)                ; call prim_cons
  %rva8362046 = call i64 @prim_cons(i64 %arg8360572, i64 %rva8362047)                ; call prim_cons
  %cloptr8365149 = inttoptr i64 %cont8360130 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365150 = getelementptr inbounds i64, i64* %cloptr8365149, i64 0             ; &cloptr8365149[0]
  %f8365152 = load i64, i64* %i0ptr8365150, align 8                                  ; load; *i0ptr8365150
  %fptr8365151 = inttoptr i64 %f8365152 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365151(i64 %cont8360130, i64 %rva8362046)          ; tail call
  ret void

else8365148:
  %arg8360574 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360000 = call i64 @prim_vector_45ref(i64 %O15$lst, i64 %arg8360574)             ; call prim_vector_45ref
  %a8360001 = call i64 @prim_car(i64 %a8360000)                                      ; call prim_car
  %a8360002 = call i64 @prim_eqv_63(i64 %a8360001, i64 %PBS$v)                       ; call prim_eqv_63
  %cmp8365153 = icmp eq i64 %a8360002, 15                                            ; false?
  br i1 %cmp8365153, label %else8365155, label %then8365154                          ; if

then8365154:
  %arg8360579 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360132 = call i64 @prim_vector_45ref(i64 %O15$lst, i64 %arg8360579)       ; call prim_vector_45ref
  %arg8360582 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362051 = add i64 0, 0                                                         ; quoted ()
  %rva8362050 = call i64 @prim_cons(i64 %retprim8360132, i64 %rva8362051)            ; call prim_cons
  %rva8362049 = call i64 @prim_cons(i64 %arg8360582, i64 %rva8362050)                ; call prim_cons
  %cloptr8365156 = inttoptr i64 %cont8360130 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365157 = getelementptr inbounds i64, i64* %cloptr8365156, i64 0             ; &cloptr8365156[0]
  %f8365159 = load i64, i64* %i0ptr8365157, align 8                                  ; load; *i0ptr8365157
  %fptr8365158 = inttoptr i64 %f8365159 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365158(i64 %cont8360130, i64 %rva8362049)          ; tail call
  ret void

else8365155:
  %arg8360584 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360003 = call i64 @prim_vector_45ref(i64 %O15$lst, i64 %arg8360584)             ; call prim_vector_45ref
  %a8360004 = call i64 @prim_cdr(i64 %a8360003)                                      ; call prim_cdr
  %arg8360588 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360134 = call i64 @prim_vector_45set_33(i64 %O15$lst, i64 %arg8360588, i64 %a8360004); call prim_vector_45set_33
  %cloptr8365160 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8365162 = getelementptr inbounds i64, i64* %cloptr8365160, i64 1              ; &eptr8365162[1]
  %eptr8365163 = getelementptr inbounds i64, i64* %cloptr8365160, i64 2              ; &eptr8365163[2]
  store i64 %ptE$cc, i64* %eptr8365162                                               ; *eptr8365162 = %ptE$cc
  store i64 %cont8360130, i64* %eptr8365163                                          ; *eptr8365163 = %cont8360130
  %eptr8365161 = getelementptr inbounds i64, i64* %cloptr8365160, i64 0              ; &cloptr8365160[0]
  %f8365164 = ptrtoint void(i64,i64)* @lam8364258 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365164, i64* %eptr8365161                                             ; store fptr
  %arg8360592 = ptrtoint i64* %cloptr8365160 to i64                                  ; closure cast; i64* -> i64
  %arg8360591 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362061 = add i64 0, 0                                                         ; quoted ()
  %rva8362060 = call i64 @prim_cons(i64 %retprim8360134, i64 %rva8362061)            ; call prim_cons
  %rva8362059 = call i64 @prim_cons(i64 %arg8360591, i64 %rva8362060)                ; call prim_cons
  %cloptr8365165 = inttoptr i64 %arg8360592 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365166 = getelementptr inbounds i64, i64* %cloptr8365165, i64 0             ; &cloptr8365165[0]
  %f8365168 = load i64, i64* %i0ptr8365166, align 8                                  ; load; *i0ptr8365166
  %fptr8365167 = inttoptr i64 %f8365168 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365167(i64 %arg8360592, i64 %rva8362059)           ; tail call
  ret void
}


define void @lam8364258(i64 %env8364259, i64 %rvp8362058) {
  %envptr8365169 = inttoptr i64 %env8364259 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365170 = getelementptr inbounds i64, i64* %envptr8365169, i64 2            ; &envptr8365169[2]
  %cont8360130 = load i64, i64* %envptr8365170, align 8                              ; load; *envptr8365170
  %envptr8365171 = inttoptr i64 %env8364259 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365172 = getelementptr inbounds i64, i64* %envptr8365171, i64 1            ; &envptr8365171[1]
  %ptE$cc = load i64, i64* %envptr8365172, align 8                                   ; load; *envptr8365172
  %_958360133 = call i64 @prim_car(i64 %rvp8362058)                                  ; call prim_car
  %rvp8362057 = call i64 @prim_cdr(i64 %rvp8362058)                                  ; call prim_cdr
  %nWK$_950 = call i64 @prim_car(i64 %rvp8362057)                                    ; call prim_car
  %na8362053 = call i64 @prim_cdr(i64 %rvp8362057)                                   ; call prim_cdr
  %rva8362056 = add i64 0, 0                                                         ; quoted ()
  %rva8362055 = call i64 @prim_cons(i64 %ptE$cc, i64 %rva8362056)                    ; call prim_cons
  %rva8362054 = call i64 @prim_cons(i64 %cont8360130, i64 %rva8362055)               ; call prim_cons
  %cloptr8365173 = inttoptr i64 %ptE$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8365174 = getelementptr inbounds i64, i64* %cloptr8365173, i64 0             ; &cloptr8365173[0]
  %f8365176 = load i64, i64* %i0ptr8365174, align 8                                  ; load; *i0ptr8365174
  %fptr8365175 = inttoptr i64 %f8365176 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365175(i64 %ptE$cc, i64 %rva8362054)               ; tail call
  ret void
}


define void @lam8364247(i64 %env8364248, i64 %rvp8362083) {
  %envptr8365177 = inttoptr i64 %env8364248 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365178 = getelementptr inbounds i64, i64* %envptr8365177, i64 3            ; &envptr8365177[3]
  %PBS$v = load i64, i64* %envptr8365178, align 8                                    ; load; *envptr8365178
  %envptr8365179 = inttoptr i64 %env8364248 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365180 = getelementptr inbounds i64, i64* %envptr8365179, i64 2            ; &envptr8365179[2]
  %O15$lst = load i64, i64* %envptr8365180, align 8                                  ; load; *envptr8365180
  %envptr8365181 = inttoptr i64 %env8364248 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365182 = getelementptr inbounds i64, i64* %envptr8365181, i64 1            ; &envptr8365181[1]
  %cont8360130 = load i64, i64* %envptr8365182, align 8                              ; load; *envptr8365182
  %_958360131 = call i64 @prim_car(i64 %rvp8362083)                                  ; call prim_car
  %rvp8362082 = call i64 @prim_cdr(i64 %rvp8362083)                                  ; call prim_cdr
  %ptE$cc = call i64 @prim_car(i64 %rvp8362082)                                      ; call prim_car
  %na8362065 = call i64 @prim_cdr(i64 %rvp8362082)                                   ; call prim_cdr
  %arg8360596 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359998 = call i64 @prim_vector_45ref(i64 %O15$lst, i64 %arg8360596)             ; call prim_vector_45ref
  %a8359999 = call i64 @prim_null_63(i64 %a8359998)                                  ; call prim_null_63
  %cmp8365183 = icmp eq i64 %a8359999, 15                                            ; false?
  br i1 %cmp8365183, label %else8365185, label %then8365184                          ; if

then8365184:
  %arg8360600 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8360599 = call i64 @const_init_false()                                         ; quoted #f
  %rva8362068 = add i64 0, 0                                                         ; quoted ()
  %rva8362067 = call i64 @prim_cons(i64 %arg8360599, i64 %rva8362068)                ; call prim_cons
  %rva8362066 = call i64 @prim_cons(i64 %arg8360600, i64 %rva8362067)                ; call prim_cons
  %cloptr8365186 = inttoptr i64 %cont8360130 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365187 = getelementptr inbounds i64, i64* %cloptr8365186, i64 0             ; &cloptr8365186[0]
  %f8365189 = load i64, i64* %i0ptr8365187, align 8                                  ; load; *i0ptr8365187
  %fptr8365188 = inttoptr i64 %f8365189 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365188(i64 %cont8360130, i64 %rva8362066)          ; tail call
  ret void

else8365185:
  %arg8360602 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360000 = call i64 @prim_vector_45ref(i64 %O15$lst, i64 %arg8360602)             ; call prim_vector_45ref
  %a8360001 = call i64 @prim_car(i64 %a8360000)                                      ; call prim_car
  %a8360002 = call i64 @prim_eqv_63(i64 %a8360001, i64 %PBS$v)                       ; call prim_eqv_63
  %cmp8365190 = icmp eq i64 %a8360002, 15                                            ; false?
  br i1 %cmp8365190, label %else8365192, label %then8365191                          ; if

then8365191:
  %arg8360607 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360132 = call i64 @prim_vector_45ref(i64 %O15$lst, i64 %arg8360607)       ; call prim_vector_45ref
  %arg8360610 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362071 = add i64 0, 0                                                         ; quoted ()
  %rva8362070 = call i64 @prim_cons(i64 %retprim8360132, i64 %rva8362071)            ; call prim_cons
  %rva8362069 = call i64 @prim_cons(i64 %arg8360610, i64 %rva8362070)                ; call prim_cons
  %cloptr8365193 = inttoptr i64 %cont8360130 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365194 = getelementptr inbounds i64, i64* %cloptr8365193, i64 0             ; &cloptr8365193[0]
  %f8365196 = load i64, i64* %i0ptr8365194, align 8                                  ; load; *i0ptr8365194
  %fptr8365195 = inttoptr i64 %f8365196 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365195(i64 %cont8360130, i64 %rva8362069)          ; tail call
  ret void

else8365192:
  %arg8360612 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360003 = call i64 @prim_vector_45ref(i64 %O15$lst, i64 %arg8360612)             ; call prim_vector_45ref
  %a8360004 = call i64 @prim_cdr(i64 %a8360003)                                      ; call prim_cdr
  %arg8360616 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360134 = call i64 @prim_vector_45set_33(i64 %O15$lst, i64 %arg8360616, i64 %a8360004); call prim_vector_45set_33
  %cloptr8365197 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8365199 = getelementptr inbounds i64, i64* %cloptr8365197, i64 1              ; &eptr8365199[1]
  %eptr8365200 = getelementptr inbounds i64, i64* %cloptr8365197, i64 2              ; &eptr8365200[2]
  store i64 %ptE$cc, i64* %eptr8365199                                               ; *eptr8365199 = %ptE$cc
  store i64 %cont8360130, i64* %eptr8365200                                          ; *eptr8365200 = %cont8360130
  %eptr8365198 = getelementptr inbounds i64, i64* %cloptr8365197, i64 0              ; &cloptr8365197[0]
  %f8365201 = ptrtoint void(i64,i64)* @lam8364241 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365201, i64* %eptr8365198                                             ; store fptr
  %arg8360620 = ptrtoint i64* %cloptr8365197 to i64                                  ; closure cast; i64* -> i64
  %arg8360619 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362081 = add i64 0, 0                                                         ; quoted ()
  %rva8362080 = call i64 @prim_cons(i64 %retprim8360134, i64 %rva8362081)            ; call prim_cons
  %rva8362079 = call i64 @prim_cons(i64 %arg8360619, i64 %rva8362080)                ; call prim_cons
  %cloptr8365202 = inttoptr i64 %arg8360620 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365203 = getelementptr inbounds i64, i64* %cloptr8365202, i64 0             ; &cloptr8365202[0]
  %f8365205 = load i64, i64* %i0ptr8365203, align 8                                  ; load; *i0ptr8365203
  %fptr8365204 = inttoptr i64 %f8365205 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365204(i64 %arg8360620, i64 %rva8362079)           ; tail call
  ret void
}


define void @lam8364241(i64 %env8364242, i64 %rvp8362078) {
  %envptr8365206 = inttoptr i64 %env8364242 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365207 = getelementptr inbounds i64, i64* %envptr8365206, i64 2            ; &envptr8365206[2]
  %cont8360130 = load i64, i64* %envptr8365207, align 8                              ; load; *envptr8365207
  %envptr8365208 = inttoptr i64 %env8364242 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365209 = getelementptr inbounds i64, i64* %envptr8365208, i64 1            ; &envptr8365208[1]
  %ptE$cc = load i64, i64* %envptr8365209, align 8                                   ; load; *envptr8365209
  %_958360133 = call i64 @prim_car(i64 %rvp8362078)                                  ; call prim_car
  %rvp8362077 = call i64 @prim_cdr(i64 %rvp8362078)                                  ; call prim_cdr
  %nWK$_950 = call i64 @prim_car(i64 %rvp8362077)                                    ; call prim_car
  %na8362073 = call i64 @prim_cdr(i64 %rvp8362077)                                   ; call prim_cdr
  %rva8362076 = add i64 0, 0                                                         ; quoted ()
  %rva8362075 = call i64 @prim_cons(i64 %ptE$cc, i64 %rva8362076)                    ; call prim_cons
  %rva8362074 = call i64 @prim_cons(i64 %cont8360130, i64 %rva8362075)               ; call prim_cons
  %cloptr8365210 = inttoptr i64 %ptE$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr8365211 = getelementptr inbounds i64, i64* %cloptr8365210, i64 0             ; &cloptr8365210[0]
  %f8365213 = load i64, i64* %i0ptr8365211, align 8                                  ; load; *i0ptr8365211
  %fptr8365212 = inttoptr i64 %f8365213 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365212(i64 %ptE$cc, i64 %rva8362074)               ; tail call
  ret void
}


define void @lam8364229(i64 %env8364230, i64 %ubl$args8360137) {
  %envptr8365214 = inttoptr i64 %env8364230 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365215 = getelementptr inbounds i64, i64* %envptr8365214, i64 1            ; &envptr8365214[1]
  %FOD$_37foldl1 = load i64, i64* %envptr8365215, align 8                            ; load; *envptr8365215
  %cont8360136 = call i64 @prim_car(i64 %ubl$args8360137)                            ; call prim_car
  %ubl$args = call i64 @prim_cdr(i64 %ubl$args8360137)                               ; call prim_cdr
  %a8360005 = call i64 @prim_null_63(i64 %ubl$args)                                  ; call prim_null_63
  %cmp8365216 = icmp eq i64 %a8360005, 15                                            ; false?
  br i1 %cmp8365216, label %else8365218, label %then8365217                          ; if

then8365217:
  %arg8360628 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8360627 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva8362092 = add i64 0, 0                                                         ; quoted ()
  %rva8362091 = call i64 @prim_cons(i64 %arg8360627, i64 %rva8362092)                ; call prim_cons
  %rva8362090 = call i64 @prim_cons(i64 %arg8360628, i64 %rva8362091)                ; call prim_cons
  %cloptr8365219 = inttoptr i64 %cont8360136 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365220 = getelementptr inbounds i64, i64* %cloptr8365219, i64 0             ; &cloptr8365219[0]
  %f8365222 = load i64, i64* %i0ptr8365220, align 8                                  ; load; *i0ptr8365220
  %fptr8365221 = inttoptr i64 %f8365222 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365221(i64 %cont8360136, i64 %rva8362090)          ; tail call
  ret void

else8365218:
  %a8360006 = call i64 @prim_cdr(i64 %ubl$args)                                      ; call prim_cdr
  %a8360007 = call i64 @prim_null_63(i64 %a8360006)                                  ; call prim_null_63
  %cmp8365223 = icmp eq i64 %a8360007, 15                                            ; false?
  br i1 %cmp8365223, label %else8365225, label %then8365224                          ; if

then8365224:
  %retprim8360138 = call i64 @prim_car(i64 %ubl$args)                                ; call prim_car
  %arg8360634 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362095 = add i64 0, 0                                                         ; quoted ()
  %rva8362094 = call i64 @prim_cons(i64 %retprim8360138, i64 %rva8362095)            ; call prim_cons
  %rva8362093 = call i64 @prim_cons(i64 %arg8360634, i64 %rva8362094)                ; call prim_cons
  %cloptr8365226 = inttoptr i64 %cont8360136 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365227 = getelementptr inbounds i64, i64* %cloptr8365226, i64 0             ; &cloptr8365226[0]
  %f8365229 = load i64, i64* %i0ptr8365227, align 8                                  ; load; *i0ptr8365227
  %fptr8365228 = inttoptr i64 %f8365229 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365228(i64 %cont8360136, i64 %rva8362093)          ; tail call
  ret void

else8365225:
  %a8360008 = call i64 @prim_car(i64 %ubl$args)                                      ; call prim_car
  %a8360009 = call i64 @prim_cdr(i64 %ubl$args)                                      ; call prim_cdr
  %cloptr8365230 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8365231 = getelementptr inbounds i64, i64* %cloptr8365230, i64 0              ; &cloptr8365230[0]
  %f8365232 = ptrtoint void(i64,i64)* @lam8364227 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365232, i64* %eptr8365231                                             ; store fptr
  %arg8360640 = ptrtoint i64* %cloptr8365230 to i64                                  ; closure cast; i64* -> i64
  %rva8362108 = add i64 0, 0                                                         ; quoted ()
  %rva8362107 = call i64 @prim_cons(i64 %a8360009, i64 %rva8362108)                  ; call prim_cons
  %rva8362106 = call i64 @prim_cons(i64 %a8360008, i64 %rva8362107)                  ; call prim_cons
  %rva8362105 = call i64 @prim_cons(i64 %arg8360640, i64 %rva8362106)                ; call prim_cons
  %rva8362104 = call i64 @prim_cons(i64 %cont8360136, i64 %rva8362105)               ; call prim_cons
  %cloptr8365233 = inttoptr i64 %FOD$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8365234 = getelementptr inbounds i64, i64* %cloptr8365233, i64 0             ; &cloptr8365233[0]
  %f8365236 = load i64, i64* %i0ptr8365234, align 8                                  ; load; *i0ptr8365234
  %fptr8365235 = inttoptr i64 %f8365236 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365235(i64 %FOD$_37foldl1, i64 %rva8362104)        ; tail call
  ret void
}


define void @lam8364227(i64 %env8364228, i64 %rvp8362103) {
  %cont8360139 = call i64 @prim_car(i64 %rvp8362103)                                 ; call prim_car
  %rvp8362102 = call i64 @prim_cdr(i64 %rvp8362103)                                  ; call prim_cdr
  %geW$n = call i64 @prim_car(i64 %rvp8362102)                                       ; call prim_car
  %rvp8362101 = call i64 @prim_cdr(i64 %rvp8362102)                                  ; call prim_cdr
  %aoQ$v = call i64 @prim_car(i64 %rvp8362101)                                       ; call prim_car
  %na8362097 = call i64 @prim_cdr(i64 %rvp8362101)                                   ; call prim_cdr
  %retprim8360140 = call i64 @prim__47(i64 %aoQ$v, i64 %geW$n)                       ; call prim__47
  %arg8360646 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362100 = add i64 0, 0                                                         ; quoted ()
  %rva8362099 = call i64 @prim_cons(i64 %retprim8360140, i64 %rva8362100)            ; call prim_cons
  %rva8362098 = call i64 @prim_cons(i64 %arg8360646, i64 %rva8362099)                ; call prim_cons
  %cloptr8365237 = inttoptr i64 %cont8360139 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365238 = getelementptr inbounds i64, i64* %cloptr8365237, i64 0             ; &cloptr8365237[0]
  %f8365240 = load i64, i64* %i0ptr8365238, align 8                                  ; load; *i0ptr8365238
  %fptr8365239 = inttoptr i64 %f8365240 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365239(i64 %cont8360139, i64 %rva8362098)          ; tail call
  ret void
}


define void @lam8364217(i64 %env8364218, i64 %rvp8362115) {
  %cont8360141 = call i64 @prim_car(i64 %rvp8362115)                                 ; call prim_car
  %rvp8362114 = call i64 @prim_cdr(i64 %rvp8362115)                                  ; call prim_cdr
  %FXM$x = call i64 @prim_car(i64 %rvp8362114)                                       ; call prim_car
  %na8362110 = call i64 @prim_cdr(i64 %rvp8362114)                                   ; call prim_cdr
  %retprim8360142 = call i64 @prim_car(i64 %FXM$x)                                   ; call prim_car
  %arg8360650 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362113 = add i64 0, 0                                                         ; quoted ()
  %rva8362112 = call i64 @prim_cons(i64 %retprim8360142, i64 %rva8362113)            ; call prim_cons
  %rva8362111 = call i64 @prim_cons(i64 %arg8360650, i64 %rva8362112)                ; call prim_cons
  %cloptr8365241 = inttoptr i64 %cont8360141 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365242 = getelementptr inbounds i64, i64* %cloptr8365241, i64 0             ; &cloptr8365241[0]
  %f8365244 = load i64, i64* %i0ptr8365242, align 8                                  ; load; *i0ptr8365242
  %fptr8365243 = inttoptr i64 %f8365244 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365243(i64 %cont8360141, i64 %rva8362111)          ; tail call
  ret void
}


define void @lam8364213(i64 %env8364214, i64 %rvp8362122) {
  %cont8360143 = call i64 @prim_car(i64 %rvp8362122)                                 ; call prim_car
  %rvp8362121 = call i64 @prim_cdr(i64 %rvp8362122)                                  ; call prim_cdr
  %sSE$x = call i64 @prim_car(i64 %rvp8362121)                                       ; call prim_car
  %na8362117 = call i64 @prim_cdr(i64 %rvp8362121)                                   ; call prim_cdr
  %a8360010 = call i64 @prim_cdr(i64 %sSE$x)                                         ; call prim_cdr
  %retprim8360144 = call i64 @prim_car(i64 %a8360010)                                ; call prim_car
  %arg8360655 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362120 = add i64 0, 0                                                         ; quoted ()
  %rva8362119 = call i64 @prim_cons(i64 %retprim8360144, i64 %rva8362120)            ; call prim_cons
  %rva8362118 = call i64 @prim_cons(i64 %arg8360655, i64 %rva8362119)                ; call prim_cons
  %cloptr8365245 = inttoptr i64 %cont8360143 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365246 = getelementptr inbounds i64, i64* %cloptr8365245, i64 0             ; &cloptr8365245[0]
  %f8365248 = load i64, i64* %i0ptr8365246, align 8                                  ; load; *i0ptr8365246
  %fptr8365247 = inttoptr i64 %f8365248 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365247(i64 %cont8360143, i64 %rva8362118)          ; tail call
  ret void
}


define void @lam8364209(i64 %env8364210, i64 %rvp8362129) {
  %cont8360145 = call i64 @prim_car(i64 %rvp8362129)                                 ; call prim_car
  %rvp8362128 = call i64 @prim_cdr(i64 %rvp8362129)                                  ; call prim_cdr
  %SBW$x = call i64 @prim_car(i64 %rvp8362128)                                       ; call prim_car
  %na8362124 = call i64 @prim_cdr(i64 %rvp8362128)                                   ; call prim_cdr
  %a8360011 = call i64 @prim_cdr(i64 %SBW$x)                                         ; call prim_cdr
  %a8360012 = call i64 @prim_cdr(i64 %a8360011)                                      ; call prim_cdr
  %retprim8360146 = call i64 @prim_car(i64 %a8360012)                                ; call prim_car
  %arg8360661 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362127 = add i64 0, 0                                                         ; quoted ()
  %rva8362126 = call i64 @prim_cons(i64 %retprim8360146, i64 %rva8362127)            ; call prim_cons
  %rva8362125 = call i64 @prim_cons(i64 %arg8360661, i64 %rva8362126)                ; call prim_cons
  %cloptr8365249 = inttoptr i64 %cont8360145 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365250 = getelementptr inbounds i64, i64* %cloptr8365249, i64 0             ; &cloptr8365249[0]
  %f8365252 = load i64, i64* %i0ptr8365250, align 8                                  ; load; *i0ptr8365250
  %fptr8365251 = inttoptr i64 %f8365252 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365251(i64 %cont8360145, i64 %rva8362125)          ; tail call
  ret void
}


define void @lam8364205(i64 %env8364206, i64 %rvp8362136) {
  %cont8360147 = call i64 @prim_car(i64 %rvp8362136)                                 ; call prim_car
  %rvp8362135 = call i64 @prim_cdr(i64 %rvp8362136)                                  ; call prim_cdr
  %I4d$x = call i64 @prim_car(i64 %rvp8362135)                                       ; call prim_car
  %na8362131 = call i64 @prim_cdr(i64 %rvp8362135)                                   ; call prim_cdr
  %a8360013 = call i64 @prim_cdr(i64 %I4d$x)                                         ; call prim_cdr
  %a8360014 = call i64 @prim_cdr(i64 %a8360013)                                      ; call prim_cdr
  %a8360015 = call i64 @prim_cdr(i64 %a8360014)                                      ; call prim_cdr
  %retprim8360148 = call i64 @prim_car(i64 %a8360015)                                ; call prim_car
  %arg8360668 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362134 = add i64 0, 0                                                         ; quoted ()
  %rva8362133 = call i64 @prim_cons(i64 %retprim8360148, i64 %rva8362134)            ; call prim_cons
  %rva8362132 = call i64 @prim_cons(i64 %arg8360668, i64 %rva8362133)                ; call prim_cons
  %cloptr8365253 = inttoptr i64 %cont8360147 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365254 = getelementptr inbounds i64, i64* %cloptr8365253, i64 0             ; &cloptr8365253[0]
  %f8365256 = load i64, i64* %i0ptr8365254, align 8                                  ; load; *i0ptr8365254
  %fptr8365255 = inttoptr i64 %f8365256 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365255(i64 %cont8360147, i64 %rva8362132)          ; tail call
  ret void
}


define void @lam8364201(i64 %env8364202, i64 %mvS$lst8360222) {
  %cont8360221 = call i64 @prim_car(i64 %mvS$lst8360222)                             ; call prim_car
  %mvS$lst = call i64 @prim_cdr(i64 %mvS$lst8360222)                                 ; call prim_cdr
  %arg8360675 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362139 = add i64 0, 0                                                         ; quoted ()
  %rva8362138 = call i64 @prim_cons(i64 %mvS$lst, i64 %rva8362139)                   ; call prim_cons
  %rva8362137 = call i64 @prim_cons(i64 %arg8360675, i64 %rva8362138)                ; call prim_cons
  %cloptr8365257 = inttoptr i64 %cont8360221 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365258 = getelementptr inbounds i64, i64* %cloptr8365257, i64 0             ; &cloptr8365257[0]
  %f8365260 = load i64, i64* %i0ptr8365258, align 8                                  ; load; *i0ptr8365258
  %fptr8365259 = inttoptr i64 %f8365260 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365259(i64 %cont8360221, i64 %rva8362137)          ; tail call
  ret void
}


define void @lam8364197(i64 %env8364198, i64 %rvp8362992) {
  %envptr8365261 = inttoptr i64 %env8364198 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365262 = getelementptr inbounds i64, i64* %envptr8365261, i64 3            ; &envptr8365261[3]
  %mma$_37length = load i64, i64* %envptr8365262, align 8                            ; load; *envptr8365262
  %envptr8365263 = inttoptr i64 %env8364198 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365264 = getelementptr inbounds i64, i64* %envptr8365263, i64 2            ; &envptr8365263[2]
  %YQs$_37_62 = load i64, i64* %envptr8365264, align 8                               ; load; *envptr8365264
  %envptr8365265 = inttoptr i64 %env8364198 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365266 = getelementptr inbounds i64, i64* %envptr8365265, i64 1            ; &envptr8365265[1]
  %xon$_37drop = load i64, i64* %envptr8365266, align 8                              ; load; *envptr8365266
  %_958360219 = call i64 @prim_car(i64 %rvp8362992)                                  ; call prim_car
  %rvp8362991 = call i64 @prim_cdr(i64 %rvp8362992)                                  ; call prim_cdr
  %a8360016 = call i64 @prim_car(i64 %rvp8362991)                                    ; call prim_car
  %na8362141 = call i64 @prim_cdr(i64 %rvp8362991)                                   ; call prim_cdr
  %arg8360678 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360220 = call i64 @prim_make_45vector(i64 %arg8360678, i64 %a8360016)     ; call prim_make_45vector
  %cloptr8365267 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365269 = getelementptr inbounds i64, i64* %cloptr8365267, i64 1              ; &eptr8365269[1]
  %eptr8365270 = getelementptr inbounds i64, i64* %cloptr8365267, i64 2              ; &eptr8365270[2]
  %eptr8365271 = getelementptr inbounds i64, i64* %cloptr8365267, i64 3              ; &eptr8365271[3]
  store i64 %xon$_37drop, i64* %eptr8365269                                          ; *eptr8365269 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365270                                           ; *eptr8365270 = %YQs$_37_62
  store i64 %mma$_37length, i64* %eptr8365271                                        ; *eptr8365271 = %mma$_37length
  %eptr8365268 = getelementptr inbounds i64, i64* %cloptr8365267, i64 0              ; &cloptr8365267[0]
  %f8365272 = ptrtoint void(i64,i64)* @lam8364194 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365272, i64* %eptr8365268                                             ; store fptr
  %arg8360681 = ptrtoint i64* %cloptr8365267 to i64                                  ; closure cast; i64* -> i64
  %arg8360680 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362990 = add i64 0, 0                                                         ; quoted ()
  %rva8362989 = call i64 @prim_cons(i64 %retprim8360220, i64 %rva8362990)            ; call prim_cons
  %rva8362988 = call i64 @prim_cons(i64 %arg8360680, i64 %rva8362989)                ; call prim_cons
  %cloptr8365273 = inttoptr i64 %arg8360681 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365274 = getelementptr inbounds i64, i64* %cloptr8365273, i64 0             ; &cloptr8365273[0]
  %f8365276 = load i64, i64* %i0ptr8365274, align 8                                  ; load; *i0ptr8365274
  %fptr8365275 = inttoptr i64 %f8365276 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365275(i64 %arg8360681, i64 %rva8362988)           ; tail call
  ret void
}


define void @lam8364194(i64 %env8364195, i64 %rvp8362987) {
  %envptr8365277 = inttoptr i64 %env8364195 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365278 = getelementptr inbounds i64, i64* %envptr8365277, i64 3            ; &envptr8365277[3]
  %mma$_37length = load i64, i64* %envptr8365278, align 8                            ; load; *envptr8365278
  %envptr8365279 = inttoptr i64 %env8364195 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365280 = getelementptr inbounds i64, i64* %envptr8365279, i64 2            ; &envptr8365279[2]
  %YQs$_37_62 = load i64, i64* %envptr8365280, align 8                               ; load; *envptr8365280
  %envptr8365281 = inttoptr i64 %env8364195 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365282 = getelementptr inbounds i64, i64* %envptr8365281, i64 1            ; &envptr8365281[1]
  %xon$_37drop = load i64, i64* %envptr8365282, align 8                              ; load; *envptr8365282
  %_958360149 = call i64 @prim_car(i64 %rvp8362987)                                  ; call prim_car
  %rvp8362986 = call i64 @prim_cdr(i64 %rvp8362987)                                  ; call prim_cdr
  %Z9D$_37wind_45stack = call i64 @prim_car(i64 %rvp8362986)                         ; call prim_car
  %na8362143 = call i64 @prim_cdr(i64 %rvp8362986)                                   ; call prim_cdr
  %cloptr8365283 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365285 = getelementptr inbounds i64, i64* %cloptr8365283, i64 1              ; &eptr8365285[1]
  %eptr8365286 = getelementptr inbounds i64, i64* %cloptr8365283, i64 2              ; &eptr8365286[2]
  %eptr8365287 = getelementptr inbounds i64, i64* %cloptr8365283, i64 3              ; &eptr8365287[3]
  store i64 %xon$_37drop, i64* %eptr8365285                                          ; *eptr8365285 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365286                                           ; *eptr8365286 = %YQs$_37_62
  store i64 %mma$_37length, i64* %eptr8365287                                        ; *eptr8365287 = %mma$_37length
  %eptr8365284 = getelementptr inbounds i64, i64* %cloptr8365283, i64 0              ; &cloptr8365283[0]
  %f8365288 = ptrtoint void(i64,i64)* @lam8364192 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365288, i64* %eptr8365284                                             ; store fptr
  %Kzn$common_45tail = ptrtoint i64* %cloptr8365283 to i64                           ; closure cast; i64* -> i64
  %cloptr8365289 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8365291 = getelementptr inbounds i64, i64* %cloptr8365289, i64 1              ; &eptr8365291[1]
  %eptr8365292 = getelementptr inbounds i64, i64* %cloptr8365289, i64 2              ; &eptr8365292[2]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365291                                  ; *eptr8365291 = %Z9D$_37wind_45stack
  store i64 %Kzn$common_45tail, i64* %eptr8365292                                    ; *eptr8365292 = %Kzn$common_45tail
  %eptr8365290 = getelementptr inbounds i64, i64* %cloptr8365289, i64 0              ; &cloptr8365289[0]
  %f8365293 = ptrtoint void(i64,i64)* @lam8364122 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365293, i64* %eptr8365290                                             ; store fptr
  %uxW$_37do_45wind = ptrtoint i64* %cloptr8365289 to i64                            ; closure cast; i64* -> i64
  %cloptr8365294 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8365296 = getelementptr inbounds i64, i64* %cloptr8365294, i64 1              ; &eptr8365296[1]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365296                                  ; *eptr8365296 = %Z9D$_37wind_45stack
  %eptr8365295 = getelementptr inbounds i64, i64* %cloptr8365294, i64 0              ; &cloptr8365294[0]
  %f8365297 = ptrtoint void(i64,i64)* @lam8363758 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365297, i64* %eptr8365295                                             ; store fptr
  %vM7$_37dynamic_45wind = ptrtoint i64* %cloptr8365294 to i64                       ; closure cast; i64* -> i64
  %cloptr8365298 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8365299 = getelementptr inbounds i64, i64* %cloptr8365298, i64 0              ; &cloptr8365298[0]
  %f8365300 = ptrtoint void(i64,i64)* @lam8363648 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365300, i64* %eptr8365299                                             ; store fptr
  %arg8361466 = ptrtoint i64* %cloptr8365298 to i64                                  ; closure cast; i64* -> i64
  %cloptr8365301 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8365302 = getelementptr inbounds i64, i64* %cloptr8365301, i64 0              ; &cloptr8365301[0]
  %f8365303 = ptrtoint void(i64,i64)* @lam8363644 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365303, i64* %eptr8365302                                             ; store fptr
  %arg8361465 = ptrtoint i64* %cloptr8365301 to i64                                  ; closure cast; i64* -> i64
  %rva8362985 = add i64 0, 0                                                         ; quoted ()
  %rva8362984 = call i64 @prim_cons(i64 %arg8361465, i64 %rva8362985)                ; call prim_cons
  %cloptr8365304 = inttoptr i64 %arg8361466 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365305 = getelementptr inbounds i64, i64* %cloptr8365304, i64 0             ; &cloptr8365304[0]
  %f8365307 = load i64, i64* %i0ptr8365305, align 8                                  ; load; *i0ptr8365305
  %fptr8365306 = inttoptr i64 %f8365307 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365306(i64 %arg8361466, i64 %rva8362984)           ; tail call
  ret void
}


define void @lam8364192(i64 %env8364193, i64 %rvp8362281) {
  %envptr8365308 = inttoptr i64 %env8364193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365309 = getelementptr inbounds i64, i64* %envptr8365308, i64 3            ; &envptr8365308[3]
  %mma$_37length = load i64, i64* %envptr8365309, align 8                            ; load; *envptr8365309
  %envptr8365310 = inttoptr i64 %env8364193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365311 = getelementptr inbounds i64, i64* %envptr8365310, i64 2            ; &envptr8365310[2]
  %YQs$_37_62 = load i64, i64* %envptr8365311, align 8                               ; load; *envptr8365311
  %envptr8365312 = inttoptr i64 %env8364193 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365313 = getelementptr inbounds i64, i64* %envptr8365312, i64 1            ; &envptr8365312[1]
  %xon$_37drop = load i64, i64* %envptr8365313, align 8                              ; load; *envptr8365313
  %cont8360150 = call i64 @prim_car(i64 %rvp8362281)                                 ; call prim_car
  %rvp8362280 = call i64 @prim_cdr(i64 %rvp8362281)                                  ; call prim_cdr
  %mdd$x = call i64 @prim_car(i64 %rvp8362280)                                       ; call prim_car
  %rvp8362279 = call i64 @prim_cdr(i64 %rvp8362280)                                  ; call prim_cdr
  %q3h$y = call i64 @prim_car(i64 %rvp8362279)                                       ; call prim_car
  %na8362145 = call i64 @prim_cdr(i64 %rvp8362279)                                   ; call prim_cdr
  %cloptr8365314 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8365316 = getelementptr inbounds i64, i64* %cloptr8365314, i64 1              ; &eptr8365316[1]
  %eptr8365317 = getelementptr inbounds i64, i64* %cloptr8365314, i64 2              ; &eptr8365317[2]
  %eptr8365318 = getelementptr inbounds i64, i64* %cloptr8365314, i64 3              ; &eptr8365318[3]
  %eptr8365319 = getelementptr inbounds i64, i64* %cloptr8365314, i64 4              ; &eptr8365319[4]
  %eptr8365320 = getelementptr inbounds i64, i64* %cloptr8365314, i64 5              ; &eptr8365320[5]
  %eptr8365321 = getelementptr inbounds i64, i64* %cloptr8365314, i64 6              ; &eptr8365321[6]
  store i64 %xon$_37drop, i64* %eptr8365316                                          ; *eptr8365316 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365317                                           ; *eptr8365317 = %YQs$_37_62
  store i64 %mma$_37length, i64* %eptr8365318                                        ; *eptr8365318 = %mma$_37length
  store i64 %q3h$y, i64* %eptr8365319                                                ; *eptr8365319 = %q3h$y
  store i64 %mdd$x, i64* %eptr8365320                                                ; *eptr8365320 = %mdd$x
  store i64 %cont8360150, i64* %eptr8365321                                          ; *eptr8365321 = %cont8360150
  %eptr8365315 = getelementptr inbounds i64, i64* %cloptr8365314, i64 0              ; &cloptr8365314[0]
  %f8365322 = ptrtoint void(i64,i64)* @lam8364190 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365322, i64* %eptr8365315                                             ; store fptr
  %arg8360683 = ptrtoint i64* %cloptr8365314 to i64                                  ; closure cast; i64* -> i64
  %rva8362278 = add i64 0, 0                                                         ; quoted ()
  %rva8362277 = call i64 @prim_cons(i64 %mdd$x, i64 %rva8362278)                     ; call prim_cons
  %rva8362276 = call i64 @prim_cons(i64 %arg8360683, i64 %rva8362277)                ; call prim_cons
  %cloptr8365323 = inttoptr i64 %mma$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8365324 = getelementptr inbounds i64, i64* %cloptr8365323, i64 0             ; &cloptr8365323[0]
  %f8365326 = load i64, i64* %i0ptr8365324, align 8                                  ; load; *i0ptr8365324
  %fptr8365325 = inttoptr i64 %f8365326 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365325(i64 %mma$_37length, i64 %rva8362276)        ; tail call
  ret void
}


define void @lam8364190(i64 %env8364191, i64 %rvp8362275) {
  %envptr8365327 = inttoptr i64 %env8364191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365328 = getelementptr inbounds i64, i64* %envptr8365327, i64 6            ; &envptr8365327[6]
  %cont8360150 = load i64, i64* %envptr8365328, align 8                              ; load; *envptr8365328
  %envptr8365329 = inttoptr i64 %env8364191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365330 = getelementptr inbounds i64, i64* %envptr8365329, i64 5            ; &envptr8365329[5]
  %mdd$x = load i64, i64* %envptr8365330, align 8                                    ; load; *envptr8365330
  %envptr8365331 = inttoptr i64 %env8364191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365332 = getelementptr inbounds i64, i64* %envptr8365331, i64 4            ; &envptr8365331[4]
  %q3h$y = load i64, i64* %envptr8365332, align 8                                    ; load; *envptr8365332
  %envptr8365333 = inttoptr i64 %env8364191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365334 = getelementptr inbounds i64, i64* %envptr8365333, i64 3            ; &envptr8365333[3]
  %mma$_37length = load i64, i64* %envptr8365334, align 8                            ; load; *envptr8365334
  %envptr8365335 = inttoptr i64 %env8364191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365336 = getelementptr inbounds i64, i64* %envptr8365335, i64 2            ; &envptr8365335[2]
  %YQs$_37_62 = load i64, i64* %envptr8365336, align 8                               ; load; *envptr8365336
  %envptr8365337 = inttoptr i64 %env8364191 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365338 = getelementptr inbounds i64, i64* %envptr8365337, i64 1            ; &envptr8365337[1]
  %xon$_37drop = load i64, i64* %envptr8365338, align 8                              ; load; *envptr8365338
  %_958360151 = call i64 @prim_car(i64 %rvp8362275)                                  ; call prim_car
  %rvp8362274 = call i64 @prim_cdr(i64 %rvp8362275)                                  ; call prim_cdr
  %XXz$lx = call i64 @prim_car(i64 %rvp8362274)                                      ; call prim_car
  %na8362147 = call i64 @prim_cdr(i64 %rvp8362274)                                   ; call prim_cdr
  %cloptr8365339 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8365341 = getelementptr inbounds i64, i64* %cloptr8365339, i64 1              ; &eptr8365341[1]
  %eptr8365342 = getelementptr inbounds i64, i64* %cloptr8365339, i64 2              ; &eptr8365342[2]
  %eptr8365343 = getelementptr inbounds i64, i64* %cloptr8365339, i64 3              ; &eptr8365343[3]
  %eptr8365344 = getelementptr inbounds i64, i64* %cloptr8365339, i64 4              ; &eptr8365344[4]
  %eptr8365345 = getelementptr inbounds i64, i64* %cloptr8365339, i64 5              ; &eptr8365345[5]
  %eptr8365346 = getelementptr inbounds i64, i64* %cloptr8365339, i64 6              ; &eptr8365346[6]
  store i64 %XXz$lx, i64* %eptr8365341                                               ; *eptr8365341 = %XXz$lx
  store i64 %xon$_37drop, i64* %eptr8365342                                          ; *eptr8365342 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365343                                           ; *eptr8365343 = %YQs$_37_62
  store i64 %q3h$y, i64* %eptr8365344                                                ; *eptr8365344 = %q3h$y
  store i64 %mdd$x, i64* %eptr8365345                                                ; *eptr8365345 = %mdd$x
  store i64 %cont8360150, i64* %eptr8365346                                          ; *eptr8365346 = %cont8360150
  %eptr8365340 = getelementptr inbounds i64, i64* %cloptr8365339, i64 0              ; &cloptr8365339[0]
  %f8365347 = ptrtoint void(i64,i64)* @lam8364188 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365347, i64* %eptr8365340                                             ; store fptr
  %arg8360686 = ptrtoint i64* %cloptr8365339 to i64                                  ; closure cast; i64* -> i64
  %rva8362273 = add i64 0, 0                                                         ; quoted ()
  %rva8362272 = call i64 @prim_cons(i64 %q3h$y, i64 %rva8362273)                     ; call prim_cons
  %rva8362271 = call i64 @prim_cons(i64 %arg8360686, i64 %rva8362272)                ; call prim_cons
  %cloptr8365348 = inttoptr i64 %mma$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8365349 = getelementptr inbounds i64, i64* %cloptr8365348, i64 0             ; &cloptr8365348[0]
  %f8365351 = load i64, i64* %i0ptr8365349, align 8                                  ; load; *i0ptr8365349
  %fptr8365350 = inttoptr i64 %f8365351 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365350(i64 %mma$_37length, i64 %rva8362271)        ; tail call
  ret void
}


define void @lam8364188(i64 %env8364189, i64 %rvp8362270) {
  %envptr8365352 = inttoptr i64 %env8364189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365353 = getelementptr inbounds i64, i64* %envptr8365352, i64 6            ; &envptr8365352[6]
  %cont8360150 = load i64, i64* %envptr8365353, align 8                              ; load; *envptr8365353
  %envptr8365354 = inttoptr i64 %env8364189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365355 = getelementptr inbounds i64, i64* %envptr8365354, i64 5            ; &envptr8365354[5]
  %mdd$x = load i64, i64* %envptr8365355, align 8                                    ; load; *envptr8365355
  %envptr8365356 = inttoptr i64 %env8364189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365357 = getelementptr inbounds i64, i64* %envptr8365356, i64 4            ; &envptr8365356[4]
  %q3h$y = load i64, i64* %envptr8365357, align 8                                    ; load; *envptr8365357
  %envptr8365358 = inttoptr i64 %env8364189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365359 = getelementptr inbounds i64, i64* %envptr8365358, i64 3            ; &envptr8365358[3]
  %YQs$_37_62 = load i64, i64* %envptr8365359, align 8                               ; load; *envptr8365359
  %envptr8365360 = inttoptr i64 %env8364189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365361 = getelementptr inbounds i64, i64* %envptr8365360, i64 2            ; &envptr8365360[2]
  %xon$_37drop = load i64, i64* %envptr8365361, align 8                              ; load; *envptr8365361
  %envptr8365362 = inttoptr i64 %env8364189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365363 = getelementptr inbounds i64, i64* %envptr8365362, i64 1            ; &envptr8365362[1]
  %XXz$lx = load i64, i64* %envptr8365363, align 8                                   ; load; *envptr8365363
  %_958360152 = call i64 @prim_car(i64 %rvp8362270)                                  ; call prim_car
  %rvp8362269 = call i64 @prim_cdr(i64 %rvp8362270)                                  ; call prim_cdr
  %pp3$ly = call i64 @prim_car(i64 %rvp8362269)                                      ; call prim_car
  %na8362149 = call i64 @prim_cdr(i64 %rvp8362269)                                   ; call prim_cdr
  %cloptr8365364 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8365365 = getelementptr inbounds i64, i64* %cloptr8365364, i64 0              ; &cloptr8365364[0]
  %f8365366 = ptrtoint void(i64,i64)* @lam8364186 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365366, i64* %eptr8365365                                             ; store fptr
  %arg8360689 = ptrtoint i64* %cloptr8365364 to i64                                  ; closure cast; i64* -> i64
  %cloptr8365367 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8365369 = getelementptr inbounds i64, i64* %cloptr8365367, i64 1              ; &eptr8365369[1]
  %eptr8365370 = getelementptr inbounds i64, i64* %cloptr8365367, i64 2              ; &eptr8365370[2]
  %eptr8365371 = getelementptr inbounds i64, i64* %cloptr8365367, i64 3              ; &eptr8365371[3]
  %eptr8365372 = getelementptr inbounds i64, i64* %cloptr8365367, i64 4              ; &eptr8365372[4]
  %eptr8365373 = getelementptr inbounds i64, i64* %cloptr8365367, i64 5              ; &eptr8365373[5]
  %eptr8365374 = getelementptr inbounds i64, i64* %cloptr8365367, i64 6              ; &eptr8365374[6]
  %eptr8365375 = getelementptr inbounds i64, i64* %cloptr8365367, i64 7              ; &eptr8365375[7]
  store i64 %XXz$lx, i64* %eptr8365369                                               ; *eptr8365369 = %XXz$lx
  store i64 %xon$_37drop, i64* %eptr8365370                                          ; *eptr8365370 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365371                                           ; *eptr8365371 = %YQs$_37_62
  store i64 %q3h$y, i64* %eptr8365372                                                ; *eptr8365372 = %q3h$y
  store i64 %pp3$ly, i64* %eptr8365373                                               ; *eptr8365373 = %pp3$ly
  store i64 %mdd$x, i64* %eptr8365374                                                ; *eptr8365374 = %mdd$x
  store i64 %cont8360150, i64* %eptr8365375                                          ; *eptr8365375 = %cont8360150
  %eptr8365368 = getelementptr inbounds i64, i64* %cloptr8365367, i64 0              ; &cloptr8365367[0]
  %f8365376 = ptrtoint void(i64,i64)* @lam8364182 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365376, i64* %eptr8365368                                             ; store fptr
  %arg8360688 = ptrtoint i64* %cloptr8365367 to i64                                  ; closure cast; i64* -> i64
  %rva8362268 = add i64 0, 0                                                         ; quoted ()
  %rva8362267 = call i64 @prim_cons(i64 %arg8360688, i64 %rva8362268)                ; call prim_cons
  %cloptr8365377 = inttoptr i64 %arg8360689 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365378 = getelementptr inbounds i64, i64* %cloptr8365377, i64 0             ; &cloptr8365377[0]
  %f8365380 = load i64, i64* %i0ptr8365378, align 8                                  ; load; *i0ptr8365378
  %fptr8365379 = inttoptr i64 %f8365380 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365379(i64 %arg8360689, i64 %rva8362267)           ; tail call
  ret void
}


define void @lam8364186(i64 %env8364187, i64 %bv7$lst8360164) {
  %cont8360163 = call i64 @prim_car(i64 %bv7$lst8360164)                             ; call prim_car
  %bv7$lst = call i64 @prim_cdr(i64 %bv7$lst8360164)                                 ; call prim_cdr
  %arg8360693 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362152 = add i64 0, 0                                                         ; quoted ()
  %rva8362151 = call i64 @prim_cons(i64 %bv7$lst, i64 %rva8362152)                   ; call prim_cons
  %rva8362150 = call i64 @prim_cons(i64 %arg8360693, i64 %rva8362151)                ; call prim_cons
  %cloptr8365381 = inttoptr i64 %cont8360163 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365382 = getelementptr inbounds i64, i64* %cloptr8365381, i64 0             ; &cloptr8365381[0]
  %f8365384 = load i64, i64* %i0ptr8365382, align 8                                  ; load; *i0ptr8365382
  %fptr8365383 = inttoptr i64 %f8365384 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365383(i64 %cont8360163, i64 %rva8362150)          ; tail call
  ret void
}


define void @lam8364182(i64 %env8364183, i64 %rvp8362266) {
  %envptr8365385 = inttoptr i64 %env8364183 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365386 = getelementptr inbounds i64, i64* %envptr8365385, i64 7            ; &envptr8365385[7]
  %cont8360150 = load i64, i64* %envptr8365386, align 8                              ; load; *envptr8365386
  %envptr8365387 = inttoptr i64 %env8364183 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365388 = getelementptr inbounds i64, i64* %envptr8365387, i64 6            ; &envptr8365387[6]
  %mdd$x = load i64, i64* %envptr8365388, align 8                                    ; load; *envptr8365388
  %envptr8365389 = inttoptr i64 %env8364183 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365390 = getelementptr inbounds i64, i64* %envptr8365389, i64 5            ; &envptr8365389[5]
  %pp3$ly = load i64, i64* %envptr8365390, align 8                                   ; load; *envptr8365390
  %envptr8365391 = inttoptr i64 %env8364183 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365392 = getelementptr inbounds i64, i64* %envptr8365391, i64 4            ; &envptr8365391[4]
  %q3h$y = load i64, i64* %envptr8365392, align 8                                    ; load; *envptr8365392
  %envptr8365393 = inttoptr i64 %env8364183 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365394 = getelementptr inbounds i64, i64* %envptr8365393, i64 3            ; &envptr8365393[3]
  %YQs$_37_62 = load i64, i64* %envptr8365394, align 8                               ; load; *envptr8365394
  %envptr8365395 = inttoptr i64 %env8364183 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365396 = getelementptr inbounds i64, i64* %envptr8365395, i64 2            ; &envptr8365395[2]
  %xon$_37drop = load i64, i64* %envptr8365396, align 8                              ; load; *envptr8365396
  %envptr8365397 = inttoptr i64 %env8364183 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365398 = getelementptr inbounds i64, i64* %envptr8365397, i64 1            ; &envptr8365397[1]
  %XXz$lx = load i64, i64* %envptr8365398, align 8                                   ; load; *envptr8365398
  %_958360161 = call i64 @prim_car(i64 %rvp8362266)                                  ; call prim_car
  %rvp8362265 = call i64 @prim_cdr(i64 %rvp8362266)                                  ; call prim_cdr
  %a8360017 = call i64 @prim_car(i64 %rvp8362265)                                    ; call prim_car
  %na8362154 = call i64 @prim_cdr(i64 %rvp8362265)                                   ; call prim_cdr
  %arg8360696 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360162 = call i64 @prim_make_45vector(i64 %arg8360696, i64 %a8360017)     ; call prim_make_45vector
  %cloptr8365399 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8365401 = getelementptr inbounds i64, i64* %cloptr8365399, i64 1              ; &eptr8365401[1]
  %eptr8365402 = getelementptr inbounds i64, i64* %cloptr8365399, i64 2              ; &eptr8365402[2]
  %eptr8365403 = getelementptr inbounds i64, i64* %cloptr8365399, i64 3              ; &eptr8365403[3]
  %eptr8365404 = getelementptr inbounds i64, i64* %cloptr8365399, i64 4              ; &eptr8365404[4]
  %eptr8365405 = getelementptr inbounds i64, i64* %cloptr8365399, i64 5              ; &eptr8365405[5]
  %eptr8365406 = getelementptr inbounds i64, i64* %cloptr8365399, i64 6              ; &eptr8365406[6]
  %eptr8365407 = getelementptr inbounds i64, i64* %cloptr8365399, i64 7              ; &eptr8365407[7]
  store i64 %XXz$lx, i64* %eptr8365401                                               ; *eptr8365401 = %XXz$lx
  store i64 %xon$_37drop, i64* %eptr8365402                                          ; *eptr8365402 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365403                                           ; *eptr8365403 = %YQs$_37_62
  store i64 %q3h$y, i64* %eptr8365404                                                ; *eptr8365404 = %q3h$y
  store i64 %pp3$ly, i64* %eptr8365405                                               ; *eptr8365405 = %pp3$ly
  store i64 %mdd$x, i64* %eptr8365406                                                ; *eptr8365406 = %mdd$x
  store i64 %cont8360150, i64* %eptr8365407                                          ; *eptr8365407 = %cont8360150
  %eptr8365400 = getelementptr inbounds i64, i64* %cloptr8365399, i64 0              ; &cloptr8365399[0]
  %f8365408 = ptrtoint void(i64,i64)* @lam8364179 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365408, i64* %eptr8365400                                             ; store fptr
  %arg8360699 = ptrtoint i64* %cloptr8365399 to i64                                  ; closure cast; i64* -> i64
  %arg8360698 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362264 = add i64 0, 0                                                         ; quoted ()
  %rva8362263 = call i64 @prim_cons(i64 %retprim8360162, i64 %rva8362264)            ; call prim_cons
  %rva8362262 = call i64 @prim_cons(i64 %arg8360698, i64 %rva8362263)                ; call prim_cons
  %cloptr8365409 = inttoptr i64 %arg8360699 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365410 = getelementptr inbounds i64, i64* %cloptr8365409, i64 0             ; &cloptr8365409[0]
  %f8365412 = load i64, i64* %i0ptr8365410, align 8                                  ; load; *i0ptr8365410
  %fptr8365411 = inttoptr i64 %f8365412 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365411(i64 %arg8360699, i64 %rva8362262)           ; tail call
  ret void
}


define void @lam8364179(i64 %env8364180, i64 %rvp8362261) {
  %envptr8365413 = inttoptr i64 %env8364180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365414 = getelementptr inbounds i64, i64* %envptr8365413, i64 7            ; &envptr8365413[7]
  %cont8360150 = load i64, i64* %envptr8365414, align 8                              ; load; *envptr8365414
  %envptr8365415 = inttoptr i64 %env8364180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365416 = getelementptr inbounds i64, i64* %envptr8365415, i64 6            ; &envptr8365415[6]
  %mdd$x = load i64, i64* %envptr8365416, align 8                                    ; load; *envptr8365416
  %envptr8365417 = inttoptr i64 %env8364180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365418 = getelementptr inbounds i64, i64* %envptr8365417, i64 5            ; &envptr8365417[5]
  %pp3$ly = load i64, i64* %envptr8365418, align 8                                   ; load; *envptr8365418
  %envptr8365419 = inttoptr i64 %env8364180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365420 = getelementptr inbounds i64, i64* %envptr8365419, i64 4            ; &envptr8365419[4]
  %q3h$y = load i64, i64* %envptr8365420, align 8                                    ; load; *envptr8365420
  %envptr8365421 = inttoptr i64 %env8364180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365422 = getelementptr inbounds i64, i64* %envptr8365421, i64 3            ; &envptr8365421[3]
  %YQs$_37_62 = load i64, i64* %envptr8365422, align 8                               ; load; *envptr8365422
  %envptr8365423 = inttoptr i64 %env8364180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365424 = getelementptr inbounds i64, i64* %envptr8365423, i64 2            ; &envptr8365423[2]
  %xon$_37drop = load i64, i64* %envptr8365424, align 8                              ; load; *envptr8365424
  %envptr8365425 = inttoptr i64 %env8364180 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365426 = getelementptr inbounds i64, i64* %envptr8365425, i64 1            ; &envptr8365425[1]
  %XXz$lx = load i64, i64* %envptr8365426, align 8                                   ; load; *envptr8365426
  %_958360153 = call i64 @prim_car(i64 %rvp8362261)                                  ; call prim_car
  %rvp8362260 = call i64 @prim_cdr(i64 %rvp8362261)                                  ; call prim_cdr
  %J4b$loop = call i64 @prim_car(i64 %rvp8362260)                                    ; call prim_car
  %na8362156 = call i64 @prim_cdr(i64 %rvp8362260)                                   ; call prim_cdr
  %cloptr8365427 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8365429 = getelementptr inbounds i64, i64* %cloptr8365427, i64 1              ; &eptr8365429[1]
  store i64 %J4b$loop, i64* %eptr8365429                                             ; *eptr8365429 = %J4b$loop
  %eptr8365428 = getelementptr inbounds i64, i64* %cloptr8365427, i64 0              ; &cloptr8365427[0]
  %f8365430 = ptrtoint void(i64,i64)* @lam8364177 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365430, i64* %eptr8365428                                             ; store fptr
  %acn$loop8359928 = ptrtoint i64* %cloptr8365427 to i64                             ; closure cast; i64* -> i64
  %arg8360721 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %C0z$_95t = call i64 @prim_vector_45set_33(i64 %J4b$loop, i64 %arg8360721, i64 %acn$loop8359928); call prim_vector_45set_33
  %arg8360723 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360024 = call i64 @prim_vector_45ref(i64 %J4b$loop, i64 %arg8360723)            ; call prim_vector_45ref
  %a8360025 = call i64 @prim_procedure_63(i64 %a8360024)                             ; call prim_procedure_63
  %cmp8365431 = icmp eq i64 %a8360025, 15                                            ; false?
  br i1 %cmp8365431, label %else8365433, label %then8365432                          ; if

then8365432:
  %arg8360726 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360026 = call i64 @prim_vector_45ref(i64 %J4b$loop, i64 %arg8360726)            ; call prim_vector_45ref
  %cloptr8365434 = call i64* @alloc(i64 72)                                          ; malloc
  %eptr8365436 = getelementptr inbounds i64, i64* %cloptr8365434, i64 1              ; &eptr8365436[1]
  %eptr8365437 = getelementptr inbounds i64, i64* %cloptr8365434, i64 2              ; &eptr8365437[2]
  %eptr8365438 = getelementptr inbounds i64, i64* %cloptr8365434, i64 3              ; &eptr8365438[3]
  %eptr8365439 = getelementptr inbounds i64, i64* %cloptr8365434, i64 4              ; &eptr8365439[4]
  %eptr8365440 = getelementptr inbounds i64, i64* %cloptr8365434, i64 5              ; &eptr8365440[5]
  %eptr8365441 = getelementptr inbounds i64, i64* %cloptr8365434, i64 6              ; &eptr8365441[6]
  %eptr8365442 = getelementptr inbounds i64, i64* %cloptr8365434, i64 7              ; &eptr8365442[7]
  %eptr8365443 = getelementptr inbounds i64, i64* %cloptr8365434, i64 8              ; &eptr8365443[8]
  store i64 %XXz$lx, i64* %eptr8365436                                               ; *eptr8365436 = %XXz$lx
  store i64 %xon$_37drop, i64* %eptr8365437                                          ; *eptr8365437 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365438                                           ; *eptr8365438 = %YQs$_37_62
  store i64 %q3h$y, i64* %eptr8365439                                                ; *eptr8365439 = %q3h$y
  store i64 %pp3$ly, i64* %eptr8365440                                               ; *eptr8365440 = %pp3$ly
  store i64 %mdd$x, i64* %eptr8365441                                                ; *eptr8365441 = %mdd$x
  store i64 %cont8360150, i64* %eptr8365442                                          ; *eptr8365442 = %cont8360150
  store i64 %a8360026, i64* %eptr8365443                                             ; *eptr8365443 = %a8360026
  %eptr8365435 = getelementptr inbounds i64, i64* %cloptr8365434, i64 0              ; &cloptr8365434[0]
  %f8365444 = ptrtoint void(i64,i64)* @lam8364161 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365444, i64* %eptr8365435                                             ; store fptr
  %arg8360730 = ptrtoint i64* %cloptr8365434 to i64                                  ; closure cast; i64* -> i64
  %rva8362256 = add i64 0, 0                                                         ; quoted ()
  %rva8362255 = call i64 @prim_cons(i64 %pp3$ly, i64 %rva8362256)                    ; call prim_cons
  %rva8362254 = call i64 @prim_cons(i64 %XXz$lx, i64 %rva8362255)                    ; call prim_cons
  %rva8362253 = call i64 @prim_cons(i64 %arg8360730, i64 %rva8362254)                ; call prim_cons
  %cloptr8365445 = inttoptr i64 %YQs$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365446 = getelementptr inbounds i64, i64* %cloptr8365445, i64 0             ; &cloptr8365445[0]
  %f8365448 = load i64, i64* %i0ptr8365446, align 8                                  ; load; *i0ptr8365446
  %fptr8365447 = inttoptr i64 %f8365448 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365447(i64 %YQs$_37_62, i64 %rva8362253)           ; tail call
  ret void

else8365433:
  %arg8360783 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365449, i32 0, i32 0)); quoted string
  %retprim8360160 = call i64 @prim_halt(i64 %arg8360783)                             ; call prim_halt
  %arg8360785 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362259 = add i64 0, 0                                                         ; quoted ()
  %rva8362258 = call i64 @prim_cons(i64 %retprim8360160, i64 %rva8362259)            ; call prim_cons
  %rva8362257 = call i64 @prim_cons(i64 %arg8360785, i64 %rva8362258)                ; call prim_cons
  %cloptr8365450 = inttoptr i64 %cont8360150 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365451 = getelementptr inbounds i64, i64* %cloptr8365450, i64 0             ; &cloptr8365450[0]
  %f8365453 = load i64, i64* %i0ptr8365451, align 8                                  ; load; *i0ptr8365451
  %fptr8365452 = inttoptr i64 %f8365453 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365452(i64 %cont8360150, i64 %rva8362257)          ; tail call
  ret void
}


define void @lam8364177(i64 %env8364178, i64 %rvp8362171) {
  %envptr8365454 = inttoptr i64 %env8364178 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365455 = getelementptr inbounds i64, i64* %envptr8365454, i64 1            ; &envptr8365454[1]
  %J4b$loop = load i64, i64* %envptr8365455, align 8                                 ; load; *envptr8365455
  %cont8360154 = call i64 @prim_car(i64 %rvp8362171)                                 ; call prim_car
  %rvp8362170 = call i64 @prim_cdr(i64 %rvp8362171)                                  ; call prim_cdr
  %ED5$x = call i64 @prim_car(i64 %rvp8362170)                                       ; call prim_car
  %rvp8362169 = call i64 @prim_cdr(i64 %rvp8362170)                                  ; call prim_cdr
  %o6c$y = call i64 @prim_car(i64 %rvp8362169)                                       ; call prim_car
  %na8362158 = call i64 @prim_cdr(i64 %rvp8362169)                                   ; call prim_cdr
  %a8360018 = call i64 @prim_eq_63(i64 %ED5$x, i64 %o6c$y)                           ; call prim_eq_63
  %cmp8365456 = icmp eq i64 %a8360018, 15                                            ; false?
  br i1 %cmp8365456, label %else8365458, label %then8365457                          ; if

then8365457:
  %arg8360703 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362161 = add i64 0, 0                                                         ; quoted ()
  %rva8362160 = call i64 @prim_cons(i64 %ED5$x, i64 %rva8362161)                     ; call prim_cons
  %rva8362159 = call i64 @prim_cons(i64 %arg8360703, i64 %rva8362160)                ; call prim_cons
  %cloptr8365459 = inttoptr i64 %cont8360154 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365460 = getelementptr inbounds i64, i64* %cloptr8365459, i64 0             ; &cloptr8365459[0]
  %f8365462 = load i64, i64* %i0ptr8365460, align 8                                  ; load; *i0ptr8365460
  %fptr8365461 = inttoptr i64 %f8365462 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365461(i64 %cont8360154, i64 %rva8362159)          ; tail call
  ret void

else8365458:
  %arg8360705 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360019 = call i64 @prim_vector_45ref(i64 %J4b$loop, i64 %arg8360705)            ; call prim_vector_45ref
  %a8360020 = call i64 @prim_procedure_63(i64 %a8360019)                             ; call prim_procedure_63
  %cmp8365463 = icmp eq i64 %a8360020, 15                                            ; false?
  br i1 %cmp8365463, label %else8365465, label %then8365464                          ; if

then8365464:
  %arg8360708 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360021 = call i64 @prim_vector_45ref(i64 %J4b$loop, i64 %arg8360708)            ; call prim_vector_45ref
  %a8360022 = call i64 @prim_cdr(i64 %ED5$x)                                         ; call prim_cdr
  %a8360023 = call i64 @prim_cdr(i64 %o6c$y)                                         ; call prim_cdr
  %rva8362165 = add i64 0, 0                                                         ; quoted ()
  %rva8362164 = call i64 @prim_cons(i64 %a8360023, i64 %rva8362165)                  ; call prim_cons
  %rva8362163 = call i64 @prim_cons(i64 %a8360022, i64 %rva8362164)                  ; call prim_cons
  %rva8362162 = call i64 @prim_cons(i64 %cont8360154, i64 %rva8362163)               ; call prim_cons
  %cloptr8365466 = inttoptr i64 %a8360021 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365467 = getelementptr inbounds i64, i64* %cloptr8365466, i64 0             ; &cloptr8365466[0]
  %f8365469 = load i64, i64* %i0ptr8365467, align 8                                  ; load; *i0ptr8365467
  %fptr8365468 = inttoptr i64 %f8365469 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365468(i64 %a8360021, i64 %rva8362162)             ; tail call
  ret void

else8365465:
  %arg8360716 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365470, i32 0, i32 0)); quoted string
  %retprim8360155 = call i64 @prim_halt(i64 %arg8360716)                             ; call prim_halt
  %arg8360718 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362168 = add i64 0, 0                                                         ; quoted ()
  %rva8362167 = call i64 @prim_cons(i64 %retprim8360155, i64 %rva8362168)            ; call prim_cons
  %rva8362166 = call i64 @prim_cons(i64 %arg8360718, i64 %rva8362167)                ; call prim_cons
  %cloptr8365471 = inttoptr i64 %cont8360154 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365472 = getelementptr inbounds i64, i64* %cloptr8365471, i64 0             ; &cloptr8365471[0]
  %f8365474 = load i64, i64* %i0ptr8365472, align 8                                  ; load; *i0ptr8365472
  %fptr8365473 = inttoptr i64 %f8365474 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365473(i64 %cont8360154, i64 %rva8362166)          ; tail call
  ret void
}


define void @lam8364161(i64 %env8364162, i64 %rvp8362252) {
  %envptr8365475 = inttoptr i64 %env8364162 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365476 = getelementptr inbounds i64, i64* %envptr8365475, i64 8            ; &envptr8365475[8]
  %a8360026 = load i64, i64* %envptr8365476, align 8                                 ; load; *envptr8365476
  %envptr8365477 = inttoptr i64 %env8364162 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365478 = getelementptr inbounds i64, i64* %envptr8365477, i64 7            ; &envptr8365477[7]
  %cont8360150 = load i64, i64* %envptr8365478, align 8                              ; load; *envptr8365478
  %envptr8365479 = inttoptr i64 %env8364162 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365480 = getelementptr inbounds i64, i64* %envptr8365479, i64 6            ; &envptr8365479[6]
  %mdd$x = load i64, i64* %envptr8365480, align 8                                    ; load; *envptr8365480
  %envptr8365481 = inttoptr i64 %env8364162 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365482 = getelementptr inbounds i64, i64* %envptr8365481, i64 5            ; &envptr8365481[5]
  %pp3$ly = load i64, i64* %envptr8365482, align 8                                   ; load; *envptr8365482
  %envptr8365483 = inttoptr i64 %env8364162 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365484 = getelementptr inbounds i64, i64* %envptr8365483, i64 4            ; &envptr8365483[4]
  %q3h$y = load i64, i64* %envptr8365484, align 8                                    ; load; *envptr8365484
  %envptr8365485 = inttoptr i64 %env8364162 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365486 = getelementptr inbounds i64, i64* %envptr8365485, i64 3            ; &envptr8365485[3]
  %YQs$_37_62 = load i64, i64* %envptr8365486, align 8                               ; load; *envptr8365486
  %envptr8365487 = inttoptr i64 %env8364162 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365488 = getelementptr inbounds i64, i64* %envptr8365487, i64 2            ; &envptr8365487[2]
  %xon$_37drop = load i64, i64* %envptr8365488, align 8                              ; load; *envptr8365488
  %envptr8365489 = inttoptr i64 %env8364162 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365490 = getelementptr inbounds i64, i64* %envptr8365489, i64 1            ; &envptr8365489[1]
  %XXz$lx = load i64, i64* %envptr8365490, align 8                                   ; load; *envptr8365490
  %_958360156 = call i64 @prim_car(i64 %rvp8362252)                                  ; call prim_car
  %rvp8362251 = call i64 @prim_cdr(i64 %rvp8362252)                                  ; call prim_cdr
  %a8360027 = call i64 @prim_car(i64 %rvp8362251)                                    ; call prim_car
  %na8362173 = call i64 @prim_cdr(i64 %rvp8362251)                                   ; call prim_cdr
  %cmp8365491 = icmp eq i64 %a8360027, 15                                            ; false?
  br i1 %cmp8365491, label %else8365493, label %then8365492                          ; if

then8365492:
  %a8360028 = call i64 @prim__45(i64 %XXz$lx, i64 %pp3$ly)                           ; call prim__45
  %cloptr8365494 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8365496 = getelementptr inbounds i64, i64* %cloptr8365494, i64 1              ; &eptr8365496[1]
  %eptr8365497 = getelementptr inbounds i64, i64* %cloptr8365494, i64 2              ; &eptr8365497[2]
  %eptr8365498 = getelementptr inbounds i64, i64* %cloptr8365494, i64 3              ; &eptr8365498[3]
  %eptr8365499 = getelementptr inbounds i64, i64* %cloptr8365494, i64 4              ; &eptr8365499[4]
  %eptr8365500 = getelementptr inbounds i64, i64* %cloptr8365494, i64 5              ; &eptr8365500[5]
  %eptr8365501 = getelementptr inbounds i64, i64* %cloptr8365494, i64 6              ; &eptr8365501[6]
  %eptr8365502 = getelementptr inbounds i64, i64* %cloptr8365494, i64 7              ; &eptr8365502[7]
  store i64 %XXz$lx, i64* %eptr8365496                                               ; *eptr8365496 = %XXz$lx
  store i64 %xon$_37drop, i64* %eptr8365497                                          ; *eptr8365497 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365498                                           ; *eptr8365498 = %YQs$_37_62
  store i64 %q3h$y, i64* %eptr8365499                                                ; *eptr8365499 = %q3h$y
  store i64 %pp3$ly, i64* %eptr8365500                                               ; *eptr8365500 = %pp3$ly
  store i64 %cont8360150, i64* %eptr8365501                                          ; *eptr8365501 = %cont8360150
  store i64 %a8360026, i64* %eptr8365502                                             ; *eptr8365502 = %a8360026
  %eptr8365495 = getelementptr inbounds i64, i64* %cloptr8365494, i64 0              ; &cloptr8365494[0]
  %f8365503 = ptrtoint void(i64,i64)* @lam8364143 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365503, i64* %eptr8365495                                             ; store fptr
  %arg8360736 = ptrtoint i64* %cloptr8365494 to i64                                  ; closure cast; i64* -> i64
  %rva8362212 = add i64 0, 0                                                         ; quoted ()
  %rva8362211 = call i64 @prim_cons(i64 %a8360028, i64 %rva8362212)                  ; call prim_cons
  %rva8362210 = call i64 @prim_cons(i64 %mdd$x, i64 %rva8362211)                     ; call prim_cons
  %rva8362209 = call i64 @prim_cons(i64 %arg8360736, i64 %rva8362210)                ; call prim_cons
  %cloptr8365504 = inttoptr i64 %xon$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365505 = getelementptr inbounds i64, i64* %cloptr8365504, i64 0             ; &cloptr8365504[0]
  %f8365507 = load i64, i64* %i0ptr8365505, align 8                                  ; load; *i0ptr8365505
  %fptr8365506 = inttoptr i64 %f8365507 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365506(i64 %xon$_37drop, i64 %rva8362209)          ; tail call
  ret void

else8365493:
  %cloptr8365508 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8365510 = getelementptr inbounds i64, i64* %cloptr8365508, i64 1              ; &eptr8365510[1]
  %eptr8365511 = getelementptr inbounds i64, i64* %cloptr8365508, i64 2              ; &eptr8365511[2]
  %eptr8365512 = getelementptr inbounds i64, i64* %cloptr8365508, i64 3              ; &eptr8365512[3]
  %eptr8365513 = getelementptr inbounds i64, i64* %cloptr8365508, i64 4              ; &eptr8365513[4]
  %eptr8365514 = getelementptr inbounds i64, i64* %cloptr8365508, i64 5              ; &eptr8365514[5]
  %eptr8365515 = getelementptr inbounds i64, i64* %cloptr8365508, i64 6              ; &eptr8365515[6]
  %eptr8365516 = getelementptr inbounds i64, i64* %cloptr8365508, i64 7              ; &eptr8365516[7]
  store i64 %XXz$lx, i64* %eptr8365510                                               ; *eptr8365510 = %XXz$lx
  store i64 %xon$_37drop, i64* %eptr8365511                                          ; *eptr8365511 = %xon$_37drop
  store i64 %YQs$_37_62, i64* %eptr8365512                                           ; *eptr8365512 = %YQs$_37_62
  store i64 %q3h$y, i64* %eptr8365513                                                ; *eptr8365513 = %q3h$y
  store i64 %pp3$ly, i64* %eptr8365514                                               ; *eptr8365514 = %pp3$ly
  store i64 %cont8360150, i64* %eptr8365515                                          ; *eptr8365515 = %cont8360150
  store i64 %a8360026, i64* %eptr8365516                                             ; *eptr8365516 = %a8360026
  %eptr8365509 = getelementptr inbounds i64, i64* %cloptr8365508, i64 0              ; &cloptr8365508[0]
  %f8365517 = ptrtoint void(i64,i64)* @lam8364159 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365517, i64* %eptr8365509                                             ; store fptr
  %arg8360761 = ptrtoint i64* %cloptr8365508 to i64                                  ; closure cast; i64* -> i64
  %arg8360760 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362250 = add i64 0, 0                                                         ; quoted ()
  %rva8362249 = call i64 @prim_cons(i64 %mdd$x, i64 %rva8362250)                     ; call prim_cons
  %rva8362248 = call i64 @prim_cons(i64 %arg8360760, i64 %rva8362249)                ; call prim_cons
  %cloptr8365518 = inttoptr i64 %arg8360761 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365519 = getelementptr inbounds i64, i64* %cloptr8365518, i64 0             ; &cloptr8365518[0]
  %f8365521 = load i64, i64* %i0ptr8365519, align 8                                  ; load; *i0ptr8365519
  %fptr8365520 = inttoptr i64 %f8365521 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365520(i64 %arg8360761, i64 %rva8362248)           ; tail call
  ret void
}


define void @lam8364159(i64 %env8364160, i64 %rvp8362247) {
  %envptr8365522 = inttoptr i64 %env8364160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365523 = getelementptr inbounds i64, i64* %envptr8365522, i64 7            ; &envptr8365522[7]
  %a8360026 = load i64, i64* %envptr8365523, align 8                                 ; load; *envptr8365523
  %envptr8365524 = inttoptr i64 %env8364160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365525 = getelementptr inbounds i64, i64* %envptr8365524, i64 6            ; &envptr8365524[6]
  %cont8360150 = load i64, i64* %envptr8365525, align 8                              ; load; *envptr8365525
  %envptr8365526 = inttoptr i64 %env8364160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365527 = getelementptr inbounds i64, i64* %envptr8365526, i64 5            ; &envptr8365526[5]
  %pp3$ly = load i64, i64* %envptr8365527, align 8                                   ; load; *envptr8365527
  %envptr8365528 = inttoptr i64 %env8364160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365529 = getelementptr inbounds i64, i64* %envptr8365528, i64 4            ; &envptr8365528[4]
  %q3h$y = load i64, i64* %envptr8365529, align 8                                    ; load; *envptr8365529
  %envptr8365530 = inttoptr i64 %env8364160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365531 = getelementptr inbounds i64, i64* %envptr8365530, i64 3            ; &envptr8365530[3]
  %YQs$_37_62 = load i64, i64* %envptr8365531, align 8                               ; load; *envptr8365531
  %envptr8365532 = inttoptr i64 %env8364160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365533 = getelementptr inbounds i64, i64* %envptr8365532, i64 2            ; &envptr8365532[2]
  %xon$_37drop = load i64, i64* %envptr8365533, align 8                              ; load; *envptr8365533
  %envptr8365534 = inttoptr i64 %env8364160 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365535 = getelementptr inbounds i64, i64* %envptr8365534, i64 1            ; &envptr8365534[1]
  %XXz$lx = load i64, i64* %envptr8365535, align 8                                   ; load; *envptr8365535
  %_958360157 = call i64 @prim_car(i64 %rvp8362247)                                  ; call prim_car
  %rvp8362246 = call i64 @prim_cdr(i64 %rvp8362247)                                  ; call prim_cdr
  %a8360029 = call i64 @prim_car(i64 %rvp8362246)                                    ; call prim_car
  %na8362214 = call i64 @prim_cdr(i64 %rvp8362246)                                   ; call prim_cdr
  %cloptr8365536 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8365538 = getelementptr inbounds i64, i64* %cloptr8365536, i64 1              ; &eptr8365538[1]
  %eptr8365539 = getelementptr inbounds i64, i64* %cloptr8365536, i64 2              ; &eptr8365539[2]
  %eptr8365540 = getelementptr inbounds i64, i64* %cloptr8365536, i64 3              ; &eptr8365540[3]
  %eptr8365541 = getelementptr inbounds i64, i64* %cloptr8365536, i64 4              ; &eptr8365541[4]
  %eptr8365542 = getelementptr inbounds i64, i64* %cloptr8365536, i64 5              ; &eptr8365542[5]
  %eptr8365543 = getelementptr inbounds i64, i64* %cloptr8365536, i64 6              ; &eptr8365543[6]
  %eptr8365544 = getelementptr inbounds i64, i64* %cloptr8365536, i64 7              ; &eptr8365544[7]
  store i64 %XXz$lx, i64* %eptr8365538                                               ; *eptr8365538 = %XXz$lx
  store i64 %xon$_37drop, i64* %eptr8365539                                          ; *eptr8365539 = %xon$_37drop
  store i64 %a8360029, i64* %eptr8365540                                             ; *eptr8365540 = %a8360029
  store i64 %q3h$y, i64* %eptr8365541                                                ; *eptr8365541 = %q3h$y
  store i64 %pp3$ly, i64* %eptr8365542                                               ; *eptr8365542 = %pp3$ly
  store i64 %cont8360150, i64* %eptr8365543                                          ; *eptr8365543 = %cont8360150
  store i64 %a8360026, i64* %eptr8365544                                             ; *eptr8365544 = %a8360026
  %eptr8365537 = getelementptr inbounds i64, i64* %cloptr8365536, i64 0              ; &cloptr8365536[0]
  %f8365545 = ptrtoint void(i64,i64)* @lam8364157 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365545, i64* %eptr8365537                                             ; store fptr
  %arg8360764 = ptrtoint i64* %cloptr8365536 to i64                                  ; closure cast; i64* -> i64
  %rva8362245 = add i64 0, 0                                                         ; quoted ()
  %rva8362244 = call i64 @prim_cons(i64 %XXz$lx, i64 %rva8362245)                    ; call prim_cons
  %rva8362243 = call i64 @prim_cons(i64 %pp3$ly, i64 %rva8362244)                    ; call prim_cons
  %rva8362242 = call i64 @prim_cons(i64 %arg8360764, i64 %rva8362243)                ; call prim_cons
  %cloptr8365546 = inttoptr i64 %YQs$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365547 = getelementptr inbounds i64, i64* %cloptr8365546, i64 0             ; &cloptr8365546[0]
  %f8365549 = load i64, i64* %i0ptr8365547, align 8                                  ; load; *i0ptr8365547
  %fptr8365548 = inttoptr i64 %f8365549 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365548(i64 %YQs$_37_62, i64 %rva8362242)           ; tail call
  ret void
}


define void @lam8364157(i64 %env8364158, i64 %rvp8362241) {
  %envptr8365550 = inttoptr i64 %env8364158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365551 = getelementptr inbounds i64, i64* %envptr8365550, i64 7            ; &envptr8365550[7]
  %a8360026 = load i64, i64* %envptr8365551, align 8                                 ; load; *envptr8365551
  %envptr8365552 = inttoptr i64 %env8364158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365553 = getelementptr inbounds i64, i64* %envptr8365552, i64 6            ; &envptr8365552[6]
  %cont8360150 = load i64, i64* %envptr8365553, align 8                              ; load; *envptr8365553
  %envptr8365554 = inttoptr i64 %env8364158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365555 = getelementptr inbounds i64, i64* %envptr8365554, i64 5            ; &envptr8365554[5]
  %pp3$ly = load i64, i64* %envptr8365555, align 8                                   ; load; *envptr8365555
  %envptr8365556 = inttoptr i64 %env8364158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365557 = getelementptr inbounds i64, i64* %envptr8365556, i64 4            ; &envptr8365556[4]
  %q3h$y = load i64, i64* %envptr8365557, align 8                                    ; load; *envptr8365557
  %envptr8365558 = inttoptr i64 %env8364158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365559 = getelementptr inbounds i64, i64* %envptr8365558, i64 3            ; &envptr8365558[3]
  %a8360029 = load i64, i64* %envptr8365559, align 8                                 ; load; *envptr8365559
  %envptr8365560 = inttoptr i64 %env8364158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365561 = getelementptr inbounds i64, i64* %envptr8365560, i64 2            ; &envptr8365560[2]
  %xon$_37drop = load i64, i64* %envptr8365561, align 8                              ; load; *envptr8365561
  %envptr8365562 = inttoptr i64 %env8364158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365563 = getelementptr inbounds i64, i64* %envptr8365562, i64 1            ; &envptr8365562[1]
  %XXz$lx = load i64, i64* %envptr8365563, align 8                                   ; load; *envptr8365563
  %_958360158 = call i64 @prim_car(i64 %rvp8362241)                                  ; call prim_car
  %rvp8362240 = call i64 @prim_cdr(i64 %rvp8362241)                                  ; call prim_cdr
  %a8360030 = call i64 @prim_car(i64 %rvp8362240)                                    ; call prim_car
  %na8362216 = call i64 @prim_cdr(i64 %rvp8362240)                                   ; call prim_cdr
  %cmp8365564 = icmp eq i64 %a8360030, 15                                            ; false?
  br i1 %cmp8365564, label %else8365566, label %then8365565                          ; if

then8365565:
  %a8360031 = call i64 @prim__45(i64 %pp3$ly, i64 %XXz$lx)                           ; call prim__45
  %cloptr8365567 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365569 = getelementptr inbounds i64, i64* %cloptr8365567, i64 1              ; &eptr8365569[1]
  %eptr8365570 = getelementptr inbounds i64, i64* %cloptr8365567, i64 2              ; &eptr8365570[2]
  %eptr8365571 = getelementptr inbounds i64, i64* %cloptr8365567, i64 3              ; &eptr8365571[3]
  store i64 %a8360029, i64* %eptr8365569                                             ; *eptr8365569 = %a8360029
  store i64 %cont8360150, i64* %eptr8365570                                          ; *eptr8365570 = %cont8360150
  store i64 %a8360026, i64* %eptr8365571                                             ; *eptr8365571 = %a8360026
  %eptr8365568 = getelementptr inbounds i64, i64* %cloptr8365567, i64 0              ; &cloptr8365567[0]
  %f8365572 = ptrtoint void(i64,i64)* @lam8364150 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365572, i64* %eptr8365568                                             ; store fptr
  %arg8360770 = ptrtoint i64* %cloptr8365567 to i64                                  ; closure cast; i64* -> i64
  %rva8362228 = add i64 0, 0                                                         ; quoted ()
  %rva8362227 = call i64 @prim_cons(i64 %a8360031, i64 %rva8362228)                  ; call prim_cons
  %rva8362226 = call i64 @prim_cons(i64 %q3h$y, i64 %rva8362227)                     ; call prim_cons
  %rva8362225 = call i64 @prim_cons(i64 %arg8360770, i64 %rva8362226)                ; call prim_cons
  %cloptr8365573 = inttoptr i64 %xon$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365574 = getelementptr inbounds i64, i64* %cloptr8365573, i64 0             ; &cloptr8365573[0]
  %f8365576 = load i64, i64* %i0ptr8365574, align 8                                  ; load; *i0ptr8365574
  %fptr8365575 = inttoptr i64 %f8365576 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365575(i64 %xon$_37drop, i64 %rva8362225)          ; tail call
  ret void

else8365566:
  %cloptr8365577 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365579 = getelementptr inbounds i64, i64* %cloptr8365577, i64 1              ; &eptr8365579[1]
  %eptr8365580 = getelementptr inbounds i64, i64* %cloptr8365577, i64 2              ; &eptr8365580[2]
  %eptr8365581 = getelementptr inbounds i64, i64* %cloptr8365577, i64 3              ; &eptr8365581[3]
  store i64 %a8360029, i64* %eptr8365579                                             ; *eptr8365579 = %a8360029
  store i64 %cont8360150, i64* %eptr8365580                                          ; *eptr8365580 = %cont8360150
  store i64 %a8360026, i64* %eptr8365581                                             ; *eptr8365581 = %a8360026
  %eptr8365578 = getelementptr inbounds i64, i64* %cloptr8365577, i64 0              ; &cloptr8365577[0]
  %f8365582 = ptrtoint void(i64,i64)* @lam8364155 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365582, i64* %eptr8365578                                             ; store fptr
  %arg8360778 = ptrtoint i64* %cloptr8365577 to i64                                  ; closure cast; i64* -> i64
  %arg8360777 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362239 = add i64 0, 0                                                         ; quoted ()
  %rva8362238 = call i64 @prim_cons(i64 %q3h$y, i64 %rva8362239)                     ; call prim_cons
  %rva8362237 = call i64 @prim_cons(i64 %arg8360777, i64 %rva8362238)                ; call prim_cons
  %cloptr8365583 = inttoptr i64 %arg8360778 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365584 = getelementptr inbounds i64, i64* %cloptr8365583, i64 0             ; &cloptr8365583[0]
  %f8365586 = load i64, i64* %i0ptr8365584, align 8                                  ; load; *i0ptr8365584
  %fptr8365585 = inttoptr i64 %f8365586 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365585(i64 %arg8360778, i64 %rva8362237)           ; tail call
  ret void
}


define void @lam8364155(i64 %env8364156, i64 %rvp8362236) {
  %envptr8365587 = inttoptr i64 %env8364156 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365588 = getelementptr inbounds i64, i64* %envptr8365587, i64 3            ; &envptr8365587[3]
  %a8360026 = load i64, i64* %envptr8365588, align 8                                 ; load; *envptr8365588
  %envptr8365589 = inttoptr i64 %env8364156 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365590 = getelementptr inbounds i64, i64* %envptr8365589, i64 2            ; &envptr8365589[2]
  %cont8360150 = load i64, i64* %envptr8365590, align 8                              ; load; *envptr8365590
  %envptr8365591 = inttoptr i64 %env8364156 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365592 = getelementptr inbounds i64, i64* %envptr8365591, i64 1            ; &envptr8365591[1]
  %a8360029 = load i64, i64* %envptr8365592, align 8                                 ; load; *envptr8365592
  %_958360159 = call i64 @prim_car(i64 %rvp8362236)                                  ; call prim_car
  %rvp8362235 = call i64 @prim_cdr(i64 %rvp8362236)                                  ; call prim_cdr
  %a8360032 = call i64 @prim_car(i64 %rvp8362235)                                    ; call prim_car
  %na8362230 = call i64 @prim_cdr(i64 %rvp8362235)                                   ; call prim_cdr
  %rva8362234 = add i64 0, 0                                                         ; quoted ()
  %rva8362233 = call i64 @prim_cons(i64 %a8360032, i64 %rva8362234)                  ; call prim_cons
  %rva8362232 = call i64 @prim_cons(i64 %a8360029, i64 %rva8362233)                  ; call prim_cons
  %rva8362231 = call i64 @prim_cons(i64 %cont8360150, i64 %rva8362232)               ; call prim_cons
  %cloptr8365593 = inttoptr i64 %a8360026 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365594 = getelementptr inbounds i64, i64* %cloptr8365593, i64 0             ; &cloptr8365593[0]
  %f8365596 = load i64, i64* %i0ptr8365594, align 8                                  ; load; *i0ptr8365594
  %fptr8365595 = inttoptr i64 %f8365596 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365595(i64 %a8360026, i64 %rva8362231)             ; tail call
  ret void
}


define void @lam8364150(i64 %env8364151, i64 %rvp8362224) {
  %envptr8365597 = inttoptr i64 %env8364151 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365598 = getelementptr inbounds i64, i64* %envptr8365597, i64 3            ; &envptr8365597[3]
  %a8360026 = load i64, i64* %envptr8365598, align 8                                 ; load; *envptr8365598
  %envptr8365599 = inttoptr i64 %env8364151 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365600 = getelementptr inbounds i64, i64* %envptr8365599, i64 2            ; &envptr8365599[2]
  %cont8360150 = load i64, i64* %envptr8365600, align 8                              ; load; *envptr8365600
  %envptr8365601 = inttoptr i64 %env8364151 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365602 = getelementptr inbounds i64, i64* %envptr8365601, i64 1            ; &envptr8365601[1]
  %a8360029 = load i64, i64* %envptr8365602, align 8                                 ; load; *envptr8365602
  %_958360159 = call i64 @prim_car(i64 %rvp8362224)                                  ; call prim_car
  %rvp8362223 = call i64 @prim_cdr(i64 %rvp8362224)                                  ; call prim_cdr
  %a8360032 = call i64 @prim_car(i64 %rvp8362223)                                    ; call prim_car
  %na8362218 = call i64 @prim_cdr(i64 %rvp8362223)                                   ; call prim_cdr
  %rva8362222 = add i64 0, 0                                                         ; quoted ()
  %rva8362221 = call i64 @prim_cons(i64 %a8360032, i64 %rva8362222)                  ; call prim_cons
  %rva8362220 = call i64 @prim_cons(i64 %a8360029, i64 %rva8362221)                  ; call prim_cons
  %rva8362219 = call i64 @prim_cons(i64 %cont8360150, i64 %rva8362220)               ; call prim_cons
  %cloptr8365603 = inttoptr i64 %a8360026 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365604 = getelementptr inbounds i64, i64* %cloptr8365603, i64 0             ; &cloptr8365603[0]
  %f8365606 = load i64, i64* %i0ptr8365604, align 8                                  ; load; *i0ptr8365604
  %fptr8365605 = inttoptr i64 %f8365606 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365605(i64 %a8360026, i64 %rva8362219)             ; tail call
  ret void
}


define void @lam8364143(i64 %env8364144, i64 %rvp8362208) {
  %envptr8365607 = inttoptr i64 %env8364144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365608 = getelementptr inbounds i64, i64* %envptr8365607, i64 7            ; &envptr8365607[7]
  %a8360026 = load i64, i64* %envptr8365608, align 8                                 ; load; *envptr8365608
  %envptr8365609 = inttoptr i64 %env8364144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365610 = getelementptr inbounds i64, i64* %envptr8365609, i64 6            ; &envptr8365609[6]
  %cont8360150 = load i64, i64* %envptr8365610, align 8                              ; load; *envptr8365610
  %envptr8365611 = inttoptr i64 %env8364144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365612 = getelementptr inbounds i64, i64* %envptr8365611, i64 5            ; &envptr8365611[5]
  %pp3$ly = load i64, i64* %envptr8365612, align 8                                   ; load; *envptr8365612
  %envptr8365613 = inttoptr i64 %env8364144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365614 = getelementptr inbounds i64, i64* %envptr8365613, i64 4            ; &envptr8365613[4]
  %q3h$y = load i64, i64* %envptr8365614, align 8                                    ; load; *envptr8365614
  %envptr8365615 = inttoptr i64 %env8364144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365616 = getelementptr inbounds i64, i64* %envptr8365615, i64 3            ; &envptr8365615[3]
  %YQs$_37_62 = load i64, i64* %envptr8365616, align 8                               ; load; *envptr8365616
  %envptr8365617 = inttoptr i64 %env8364144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365618 = getelementptr inbounds i64, i64* %envptr8365617, i64 2            ; &envptr8365617[2]
  %xon$_37drop = load i64, i64* %envptr8365618, align 8                              ; load; *envptr8365618
  %envptr8365619 = inttoptr i64 %env8364144 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365620 = getelementptr inbounds i64, i64* %envptr8365619, i64 1            ; &envptr8365619[1]
  %XXz$lx = load i64, i64* %envptr8365620, align 8                                   ; load; *envptr8365620
  %_958360157 = call i64 @prim_car(i64 %rvp8362208)                                  ; call prim_car
  %rvp8362207 = call i64 @prim_cdr(i64 %rvp8362208)                                  ; call prim_cdr
  %a8360029 = call i64 @prim_car(i64 %rvp8362207)                                    ; call prim_car
  %na8362175 = call i64 @prim_cdr(i64 %rvp8362207)                                   ; call prim_cdr
  %cloptr8365621 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8365623 = getelementptr inbounds i64, i64* %cloptr8365621, i64 1              ; &eptr8365623[1]
  %eptr8365624 = getelementptr inbounds i64, i64* %cloptr8365621, i64 2              ; &eptr8365624[2]
  %eptr8365625 = getelementptr inbounds i64, i64* %cloptr8365621, i64 3              ; &eptr8365625[3]
  %eptr8365626 = getelementptr inbounds i64, i64* %cloptr8365621, i64 4              ; &eptr8365626[4]
  %eptr8365627 = getelementptr inbounds i64, i64* %cloptr8365621, i64 5              ; &eptr8365627[5]
  %eptr8365628 = getelementptr inbounds i64, i64* %cloptr8365621, i64 6              ; &eptr8365628[6]
  %eptr8365629 = getelementptr inbounds i64, i64* %cloptr8365621, i64 7              ; &eptr8365629[7]
  store i64 %XXz$lx, i64* %eptr8365623                                               ; *eptr8365623 = %XXz$lx
  store i64 %xon$_37drop, i64* %eptr8365624                                          ; *eptr8365624 = %xon$_37drop
  store i64 %a8360029, i64* %eptr8365625                                             ; *eptr8365625 = %a8360029
  store i64 %q3h$y, i64* %eptr8365626                                                ; *eptr8365626 = %q3h$y
  store i64 %pp3$ly, i64* %eptr8365627                                               ; *eptr8365627 = %pp3$ly
  store i64 %cont8360150, i64* %eptr8365628                                          ; *eptr8365628 = %cont8360150
  store i64 %a8360026, i64* %eptr8365629                                             ; *eptr8365629 = %a8360026
  %eptr8365622 = getelementptr inbounds i64, i64* %cloptr8365621, i64 0              ; &cloptr8365621[0]
  %f8365630 = ptrtoint void(i64,i64)* @lam8364141 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365630, i64* %eptr8365622                                             ; store fptr
  %arg8360740 = ptrtoint i64* %cloptr8365621 to i64                                  ; closure cast; i64* -> i64
  %rva8362206 = add i64 0, 0                                                         ; quoted ()
  %rva8362205 = call i64 @prim_cons(i64 %XXz$lx, i64 %rva8362206)                    ; call prim_cons
  %rva8362204 = call i64 @prim_cons(i64 %pp3$ly, i64 %rva8362205)                    ; call prim_cons
  %rva8362203 = call i64 @prim_cons(i64 %arg8360740, i64 %rva8362204)                ; call prim_cons
  %cloptr8365631 = inttoptr i64 %YQs$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365632 = getelementptr inbounds i64, i64* %cloptr8365631, i64 0             ; &cloptr8365631[0]
  %f8365634 = load i64, i64* %i0ptr8365632, align 8                                  ; load; *i0ptr8365632
  %fptr8365633 = inttoptr i64 %f8365634 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365633(i64 %YQs$_37_62, i64 %rva8362203)           ; tail call
  ret void
}


define void @lam8364141(i64 %env8364142, i64 %rvp8362202) {
  %envptr8365635 = inttoptr i64 %env8364142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365636 = getelementptr inbounds i64, i64* %envptr8365635, i64 7            ; &envptr8365635[7]
  %a8360026 = load i64, i64* %envptr8365636, align 8                                 ; load; *envptr8365636
  %envptr8365637 = inttoptr i64 %env8364142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365638 = getelementptr inbounds i64, i64* %envptr8365637, i64 6            ; &envptr8365637[6]
  %cont8360150 = load i64, i64* %envptr8365638, align 8                              ; load; *envptr8365638
  %envptr8365639 = inttoptr i64 %env8364142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365640 = getelementptr inbounds i64, i64* %envptr8365639, i64 5            ; &envptr8365639[5]
  %pp3$ly = load i64, i64* %envptr8365640, align 8                                   ; load; *envptr8365640
  %envptr8365641 = inttoptr i64 %env8364142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365642 = getelementptr inbounds i64, i64* %envptr8365641, i64 4            ; &envptr8365641[4]
  %q3h$y = load i64, i64* %envptr8365642, align 8                                    ; load; *envptr8365642
  %envptr8365643 = inttoptr i64 %env8364142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365644 = getelementptr inbounds i64, i64* %envptr8365643, i64 3            ; &envptr8365643[3]
  %a8360029 = load i64, i64* %envptr8365644, align 8                                 ; load; *envptr8365644
  %envptr8365645 = inttoptr i64 %env8364142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365646 = getelementptr inbounds i64, i64* %envptr8365645, i64 2            ; &envptr8365645[2]
  %xon$_37drop = load i64, i64* %envptr8365646, align 8                              ; load; *envptr8365646
  %envptr8365647 = inttoptr i64 %env8364142 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365648 = getelementptr inbounds i64, i64* %envptr8365647, i64 1            ; &envptr8365647[1]
  %XXz$lx = load i64, i64* %envptr8365648, align 8                                   ; load; *envptr8365648
  %_958360158 = call i64 @prim_car(i64 %rvp8362202)                                  ; call prim_car
  %rvp8362201 = call i64 @prim_cdr(i64 %rvp8362202)                                  ; call prim_cdr
  %a8360030 = call i64 @prim_car(i64 %rvp8362201)                                    ; call prim_car
  %na8362177 = call i64 @prim_cdr(i64 %rvp8362201)                                   ; call prim_cdr
  %cmp8365649 = icmp eq i64 %a8360030, 15                                            ; false?
  br i1 %cmp8365649, label %else8365651, label %then8365650                          ; if

then8365650:
  %a8360031 = call i64 @prim__45(i64 %pp3$ly, i64 %XXz$lx)                           ; call prim__45
  %cloptr8365652 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365654 = getelementptr inbounds i64, i64* %cloptr8365652, i64 1              ; &eptr8365654[1]
  %eptr8365655 = getelementptr inbounds i64, i64* %cloptr8365652, i64 2              ; &eptr8365655[2]
  %eptr8365656 = getelementptr inbounds i64, i64* %cloptr8365652, i64 3              ; &eptr8365656[3]
  store i64 %a8360029, i64* %eptr8365654                                             ; *eptr8365654 = %a8360029
  store i64 %cont8360150, i64* %eptr8365655                                          ; *eptr8365655 = %cont8360150
  store i64 %a8360026, i64* %eptr8365656                                             ; *eptr8365656 = %a8360026
  %eptr8365653 = getelementptr inbounds i64, i64* %cloptr8365652, i64 0              ; &cloptr8365652[0]
  %f8365657 = ptrtoint void(i64,i64)* @lam8364134 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365657, i64* %eptr8365653                                             ; store fptr
  %arg8360746 = ptrtoint i64* %cloptr8365652 to i64                                  ; closure cast; i64* -> i64
  %rva8362189 = add i64 0, 0                                                         ; quoted ()
  %rva8362188 = call i64 @prim_cons(i64 %a8360031, i64 %rva8362189)                  ; call prim_cons
  %rva8362187 = call i64 @prim_cons(i64 %q3h$y, i64 %rva8362188)                     ; call prim_cons
  %rva8362186 = call i64 @prim_cons(i64 %arg8360746, i64 %rva8362187)                ; call prim_cons
  %cloptr8365658 = inttoptr i64 %xon$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365659 = getelementptr inbounds i64, i64* %cloptr8365658, i64 0             ; &cloptr8365658[0]
  %f8365661 = load i64, i64* %i0ptr8365659, align 8                                  ; load; *i0ptr8365659
  %fptr8365660 = inttoptr i64 %f8365661 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365660(i64 %xon$_37drop, i64 %rva8362186)          ; tail call
  ret void

else8365651:
  %cloptr8365662 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365664 = getelementptr inbounds i64, i64* %cloptr8365662, i64 1              ; &eptr8365664[1]
  %eptr8365665 = getelementptr inbounds i64, i64* %cloptr8365662, i64 2              ; &eptr8365665[2]
  %eptr8365666 = getelementptr inbounds i64, i64* %cloptr8365662, i64 3              ; &eptr8365666[3]
  store i64 %a8360029, i64* %eptr8365664                                             ; *eptr8365664 = %a8360029
  store i64 %cont8360150, i64* %eptr8365665                                          ; *eptr8365665 = %cont8360150
  store i64 %a8360026, i64* %eptr8365666                                             ; *eptr8365666 = %a8360026
  %eptr8365663 = getelementptr inbounds i64, i64* %cloptr8365662, i64 0              ; &cloptr8365662[0]
  %f8365667 = ptrtoint void(i64,i64)* @lam8364139 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365667, i64* %eptr8365663                                             ; store fptr
  %arg8360754 = ptrtoint i64* %cloptr8365662 to i64                                  ; closure cast; i64* -> i64
  %arg8360753 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362200 = add i64 0, 0                                                         ; quoted ()
  %rva8362199 = call i64 @prim_cons(i64 %q3h$y, i64 %rva8362200)                     ; call prim_cons
  %rva8362198 = call i64 @prim_cons(i64 %arg8360753, i64 %rva8362199)                ; call prim_cons
  %cloptr8365668 = inttoptr i64 %arg8360754 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365669 = getelementptr inbounds i64, i64* %cloptr8365668, i64 0             ; &cloptr8365668[0]
  %f8365671 = load i64, i64* %i0ptr8365669, align 8                                  ; load; *i0ptr8365669
  %fptr8365670 = inttoptr i64 %f8365671 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365670(i64 %arg8360754, i64 %rva8362198)           ; tail call
  ret void
}


define void @lam8364139(i64 %env8364140, i64 %rvp8362197) {
  %envptr8365672 = inttoptr i64 %env8364140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365673 = getelementptr inbounds i64, i64* %envptr8365672, i64 3            ; &envptr8365672[3]
  %a8360026 = load i64, i64* %envptr8365673, align 8                                 ; load; *envptr8365673
  %envptr8365674 = inttoptr i64 %env8364140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365675 = getelementptr inbounds i64, i64* %envptr8365674, i64 2            ; &envptr8365674[2]
  %cont8360150 = load i64, i64* %envptr8365675, align 8                              ; load; *envptr8365675
  %envptr8365676 = inttoptr i64 %env8364140 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365677 = getelementptr inbounds i64, i64* %envptr8365676, i64 1            ; &envptr8365676[1]
  %a8360029 = load i64, i64* %envptr8365677, align 8                                 ; load; *envptr8365677
  %_958360159 = call i64 @prim_car(i64 %rvp8362197)                                  ; call prim_car
  %rvp8362196 = call i64 @prim_cdr(i64 %rvp8362197)                                  ; call prim_cdr
  %a8360032 = call i64 @prim_car(i64 %rvp8362196)                                    ; call prim_car
  %na8362191 = call i64 @prim_cdr(i64 %rvp8362196)                                   ; call prim_cdr
  %rva8362195 = add i64 0, 0                                                         ; quoted ()
  %rva8362194 = call i64 @prim_cons(i64 %a8360032, i64 %rva8362195)                  ; call prim_cons
  %rva8362193 = call i64 @prim_cons(i64 %a8360029, i64 %rva8362194)                  ; call prim_cons
  %rva8362192 = call i64 @prim_cons(i64 %cont8360150, i64 %rva8362193)               ; call prim_cons
  %cloptr8365678 = inttoptr i64 %a8360026 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365679 = getelementptr inbounds i64, i64* %cloptr8365678, i64 0             ; &cloptr8365678[0]
  %f8365681 = load i64, i64* %i0ptr8365679, align 8                                  ; load; *i0ptr8365679
  %fptr8365680 = inttoptr i64 %f8365681 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365680(i64 %a8360026, i64 %rva8362192)             ; tail call
  ret void
}


define void @lam8364134(i64 %env8364135, i64 %rvp8362185) {
  %envptr8365682 = inttoptr i64 %env8364135 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365683 = getelementptr inbounds i64, i64* %envptr8365682, i64 3            ; &envptr8365682[3]
  %a8360026 = load i64, i64* %envptr8365683, align 8                                 ; load; *envptr8365683
  %envptr8365684 = inttoptr i64 %env8364135 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365685 = getelementptr inbounds i64, i64* %envptr8365684, i64 2            ; &envptr8365684[2]
  %cont8360150 = load i64, i64* %envptr8365685, align 8                              ; load; *envptr8365685
  %envptr8365686 = inttoptr i64 %env8364135 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365687 = getelementptr inbounds i64, i64* %envptr8365686, i64 1            ; &envptr8365686[1]
  %a8360029 = load i64, i64* %envptr8365687, align 8                                 ; load; *envptr8365687
  %_958360159 = call i64 @prim_car(i64 %rvp8362185)                                  ; call prim_car
  %rvp8362184 = call i64 @prim_cdr(i64 %rvp8362185)                                  ; call prim_cdr
  %a8360032 = call i64 @prim_car(i64 %rvp8362184)                                    ; call prim_car
  %na8362179 = call i64 @prim_cdr(i64 %rvp8362184)                                   ; call prim_cdr
  %rva8362183 = add i64 0, 0                                                         ; quoted ()
  %rva8362182 = call i64 @prim_cons(i64 %a8360032, i64 %rva8362183)                  ; call prim_cons
  %rva8362181 = call i64 @prim_cons(i64 %a8360029, i64 %rva8362182)                  ; call prim_cons
  %rva8362180 = call i64 @prim_cons(i64 %cont8360150, i64 %rva8362181)               ; call prim_cons
  %cloptr8365688 = inttoptr i64 %a8360026 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365689 = getelementptr inbounds i64, i64* %cloptr8365688, i64 0             ; &cloptr8365688[0]
  %f8365691 = load i64, i64* %i0ptr8365689, align 8                                  ; load; *i0ptr8365689
  %fptr8365690 = inttoptr i64 %f8365691 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365690(i64 %a8360026, i64 %rva8362180)             ; tail call
  ret void
}


define void @lam8364122(i64 %env8364123, i64 %rvp8362765) {
  %envptr8365692 = inttoptr i64 %env8364123 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365693 = getelementptr inbounds i64, i64* %envptr8365692, i64 2            ; &envptr8365692[2]
  %Kzn$common_45tail = load i64, i64* %envptr8365693, align 8                        ; load; *envptr8365693
  %envptr8365694 = inttoptr i64 %env8364123 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365695 = getelementptr inbounds i64, i64* %envptr8365694, i64 1            ; &envptr8365694[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365695, align 8                      ; load; *envptr8365695
  %cont8360165 = call i64 @prim_car(i64 %rvp8362765)                                 ; call prim_car
  %rvp8362764 = call i64 @prim_cdr(i64 %rvp8362765)                                  ; call prim_cdr
  %kV4$new = call i64 @prim_car(i64 %rvp8362764)                                     ; call prim_car
  %na8362283 = call i64 @prim_cdr(i64 %rvp8362764)                                   ; call prim_cdr
  %arg8360787 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360033 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8360787) ; call prim_vector_45ref
  %a8360034 = call i64 @prim_eq_63(i64 %kV4$new, i64 %a8360033)                      ; call prim_eq_63
  %a8360035 = call i64 @prim_not(i64 %a8360034)                                      ; call prim_not
  %cmp8365696 = icmp eq i64 %a8360035, 15                                            ; false?
  br i1 %cmp8365696, label %else8365698, label %then8365697                          ; if

then8365697:
  %a8360036 = call i64 @prim_procedure_63(i64 %Kzn$common_45tail)                    ; call prim_procedure_63
  %cmp8365699 = icmp eq i64 %a8360036, 15                                            ; false?
  br i1 %cmp8365699, label %else8365701, label %then8365700                          ; if

then8365700:
  %arg8360793 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360037 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8360793) ; call prim_vector_45ref
  %cloptr8365702 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365704 = getelementptr inbounds i64, i64* %cloptr8365702, i64 1              ; &eptr8365704[1]
  %eptr8365705 = getelementptr inbounds i64, i64* %cloptr8365702, i64 2              ; &eptr8365705[2]
  %eptr8365706 = getelementptr inbounds i64, i64* %cloptr8365702, i64 3              ; &eptr8365706[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365704                                  ; *eptr8365704 = %Z9D$_37wind_45stack
  store i64 %kV4$new, i64* %eptr8365705                                              ; *eptr8365705 = %kV4$new
  store i64 %cont8360165, i64* %eptr8365706                                          ; *eptr8365706 = %cont8360165
  %eptr8365703 = getelementptr inbounds i64, i64* %cloptr8365702, i64 0              ; &cloptr8365702[0]
  %f8365707 = ptrtoint void(i64,i64)* @lam8363936 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365707, i64* %eptr8365703                                             ; store fptr
  %arg8360797 = ptrtoint i64* %cloptr8365702 to i64                                  ; closure cast; i64* -> i64
  %rva8362522 = add i64 0, 0                                                         ; quoted ()
  %rva8362521 = call i64 @prim_cons(i64 %a8360037, i64 %rva8362522)                  ; call prim_cons
  %rva8362520 = call i64 @prim_cons(i64 %kV4$new, i64 %rva8362521)                   ; call prim_cons
  %rva8362519 = call i64 @prim_cons(i64 %arg8360797, i64 %rva8362520)                ; call prim_cons
  %cloptr8365708 = inttoptr i64 %Kzn$common_45tail to i64*                           ; closure/env cast; i64 -> i64*
  %i0ptr8365709 = getelementptr inbounds i64, i64* %cloptr8365708, i64 0             ; &cloptr8365708[0]
  %f8365711 = load i64, i64* %i0ptr8365709, align 8                                  ; load; *i0ptr8365709
  %fptr8365710 = inttoptr i64 %f8365711 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365710(i64 %Kzn$common_45tail, i64 %rva8362519)    ; tail call
  ret void

else8365701:
  %arg8361062 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365712, i32 0, i32 0)); quoted string
  %retprim8360194 = call i64 @prim_halt(i64 %arg8361062)                             ; call prim_halt
  %cloptr8365713 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365715 = getelementptr inbounds i64, i64* %cloptr8365713, i64 1              ; &eptr8365715[1]
  %eptr8365716 = getelementptr inbounds i64, i64* %cloptr8365713, i64 2              ; &eptr8365716[2]
  %eptr8365717 = getelementptr inbounds i64, i64* %cloptr8365713, i64 3              ; &eptr8365717[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365715                                  ; *eptr8365715 = %Z9D$_37wind_45stack
  store i64 %kV4$new, i64* %eptr8365716                                              ; *eptr8365716 = %kV4$new
  store i64 %cont8360165, i64* %eptr8365717                                          ; *eptr8365717 = %cont8360165
  %eptr8365714 = getelementptr inbounds i64, i64* %cloptr8365713, i64 0              ; &cloptr8365713[0]
  %f8365718 = ptrtoint void(i64,i64)* @lam8364116 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365718, i64* %eptr8365714                                             ; store fptr
  %arg8361065 = ptrtoint i64* %cloptr8365713 to i64                                  ; closure cast; i64* -> i64
  %arg8361064 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362760 = add i64 0, 0                                                         ; quoted ()
  %rva8362759 = call i64 @prim_cons(i64 %retprim8360194, i64 %rva8362760)            ; call prim_cons
  %rva8362758 = call i64 @prim_cons(i64 %arg8361064, i64 %rva8362759)                ; call prim_cons
  %cloptr8365719 = inttoptr i64 %arg8361065 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365720 = getelementptr inbounds i64, i64* %cloptr8365719, i64 0             ; &cloptr8365719[0]
  %f8365722 = load i64, i64* %i0ptr8365720, align 8                                  ; load; *i0ptr8365720
  %fptr8365721 = inttoptr i64 %f8365722 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365721(i64 %arg8361065, i64 %rva8362758)           ; tail call
  ret void

else8365698:
  %retprim8360195 = call i64 @prim_void()                                            ; call prim_void
  %arg8361330 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362763 = add i64 0, 0                                                         ; quoted ()
  %rva8362762 = call i64 @prim_cons(i64 %retprim8360195, i64 %rva8362763)            ; call prim_cons
  %rva8362761 = call i64 @prim_cons(i64 %arg8361330, i64 %rva8362762)                ; call prim_cons
  %cloptr8365723 = inttoptr i64 %cont8360165 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365724 = getelementptr inbounds i64, i64* %cloptr8365723, i64 0             ; &cloptr8365723[0]
  %f8365726 = load i64, i64* %i0ptr8365724, align 8                                  ; load; *i0ptr8365724
  %fptr8365725 = inttoptr i64 %f8365726 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365725(i64 %cont8360165, i64 %rva8362761)          ; tail call
  ret void
}


define void @lam8364116(i64 %env8364117, i64 %rvp8362757) {
  %envptr8365727 = inttoptr i64 %env8364117 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365728 = getelementptr inbounds i64, i64* %envptr8365727, i64 3            ; &envptr8365727[3]
  %cont8360165 = load i64, i64* %envptr8365728, align 8                              ; load; *envptr8365728
  %envptr8365729 = inttoptr i64 %env8364117 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365730 = getelementptr inbounds i64, i64* %envptr8365729, i64 2            ; &envptr8365729[2]
  %kV4$new = load i64, i64* %envptr8365730, align 8                                  ; load; *envptr8365730
  %envptr8365731 = inttoptr i64 %env8364117 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365732 = getelementptr inbounds i64, i64* %envptr8365731, i64 1            ; &envptr8365731[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365732, align 8                      ; load; *envptr8365732
  %_958360166 = call i64 @prim_car(i64 %rvp8362757)                                  ; call prim_car
  %rvp8362756 = call i64 @prim_cdr(i64 %rvp8362757)                                  ; call prim_cdr
  %aCS$tail = call i64 @prim_car(i64 %rvp8362756)                                    ; call prim_car
  %na8362524 = call i64 @prim_cdr(i64 %rvp8362756)                                   ; call prim_cdr
  %cloptr8365733 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8365734 = getelementptr inbounds i64, i64* %cloptr8365733, i64 0              ; &cloptr8365733[0]
  %f8365735 = ptrtoint void(i64,i64)* @lam8364114 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365735, i64* %eptr8365734                                             ; store fptr
  %arg8361067 = ptrtoint i64* %cloptr8365733 to i64                                  ; closure cast; i64* -> i64
  %cloptr8365736 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8365738 = getelementptr inbounds i64, i64* %cloptr8365736, i64 1              ; &eptr8365738[1]
  %eptr8365739 = getelementptr inbounds i64, i64* %cloptr8365736, i64 2              ; &eptr8365739[2]
  %eptr8365740 = getelementptr inbounds i64, i64* %cloptr8365736, i64 3              ; &eptr8365740[3]
  %eptr8365741 = getelementptr inbounds i64, i64* %cloptr8365736, i64 4              ; &eptr8365741[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365738                                  ; *eptr8365738 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8365739                                             ; *eptr8365739 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8365740                                              ; *eptr8365740 = %kV4$new
  store i64 %cont8360165, i64* %eptr8365741                                          ; *eptr8365741 = %cont8360165
  %eptr8365737 = getelementptr inbounds i64, i64* %cloptr8365736, i64 0              ; &cloptr8365736[0]
  %f8365742 = ptrtoint void(i64,i64)* @lam8364110 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365742, i64* %eptr8365737                                             ; store fptr
  %arg8361066 = ptrtoint i64* %cloptr8365736 to i64                                  ; closure cast; i64* -> i64
  %rva8362755 = add i64 0, 0                                                         ; quoted ()
  %rva8362754 = call i64 @prim_cons(i64 %arg8361066, i64 %rva8362755)                ; call prim_cons
  %cloptr8365743 = inttoptr i64 %arg8361067 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365744 = getelementptr inbounds i64, i64* %cloptr8365743, i64 0             ; &cloptr8365743[0]
  %f8365746 = load i64, i64* %i0ptr8365744, align 8                                  ; load; *i0ptr8365744
  %fptr8365745 = inttoptr i64 %f8365746 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365745(i64 %arg8361067, i64 %rva8362754)           ; tail call
  ret void
}


define void @lam8364114(i64 %env8364115, i64 %W5t$lst8360193) {
  %cont8360192 = call i64 @prim_car(i64 %W5t$lst8360193)                             ; call prim_car
  %W5t$lst = call i64 @prim_cdr(i64 %W5t$lst8360193)                                 ; call prim_cdr
  %arg8361071 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362527 = add i64 0, 0                                                         ; quoted ()
  %rva8362526 = call i64 @prim_cons(i64 %W5t$lst, i64 %rva8362527)                   ; call prim_cons
  %rva8362525 = call i64 @prim_cons(i64 %arg8361071, i64 %rva8362526)                ; call prim_cons
  %cloptr8365747 = inttoptr i64 %cont8360192 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365748 = getelementptr inbounds i64, i64* %cloptr8365747, i64 0             ; &cloptr8365747[0]
  %f8365750 = load i64, i64* %i0ptr8365748, align 8                                  ; load; *i0ptr8365748
  %fptr8365749 = inttoptr i64 %f8365750 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365749(i64 %cont8360192, i64 %rva8362525)          ; tail call
  ret void
}


define void @lam8364110(i64 %env8364111, i64 %rvp8362753) {
  %envptr8365751 = inttoptr i64 %env8364111 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365752 = getelementptr inbounds i64, i64* %envptr8365751, i64 4            ; &envptr8365751[4]
  %cont8360165 = load i64, i64* %envptr8365752, align 8                              ; load; *envptr8365752
  %envptr8365753 = inttoptr i64 %env8364111 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365754 = getelementptr inbounds i64, i64* %envptr8365753, i64 3            ; &envptr8365753[3]
  %kV4$new = load i64, i64* %envptr8365754, align 8                                  ; load; *envptr8365754
  %envptr8365755 = inttoptr i64 %env8364111 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365756 = getelementptr inbounds i64, i64* %envptr8365755, i64 2            ; &envptr8365755[2]
  %aCS$tail = load i64, i64* %envptr8365756, align 8                                 ; load; *envptr8365756
  %envptr8365757 = inttoptr i64 %env8364111 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365758 = getelementptr inbounds i64, i64* %envptr8365757, i64 1            ; &envptr8365757[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365758, align 8                      ; load; *envptr8365758
  %_958360190 = call i64 @prim_car(i64 %rvp8362753)                                  ; call prim_car
  %rvp8362752 = call i64 @prim_cdr(i64 %rvp8362753)                                  ; call prim_cdr
  %a8360038 = call i64 @prim_car(i64 %rvp8362752)                                    ; call prim_car
  %na8362529 = call i64 @prim_cdr(i64 %rvp8362752)                                   ; call prim_cdr
  %arg8361074 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360191 = call i64 @prim_make_45vector(i64 %arg8361074, i64 %a8360038)     ; call prim_make_45vector
  %cloptr8365759 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8365761 = getelementptr inbounds i64, i64* %cloptr8365759, i64 1              ; &eptr8365761[1]
  %eptr8365762 = getelementptr inbounds i64, i64* %cloptr8365759, i64 2              ; &eptr8365762[2]
  %eptr8365763 = getelementptr inbounds i64, i64* %cloptr8365759, i64 3              ; &eptr8365763[3]
  %eptr8365764 = getelementptr inbounds i64, i64* %cloptr8365759, i64 4              ; &eptr8365764[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365761                                  ; *eptr8365761 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8365762                                             ; *eptr8365762 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8365763                                              ; *eptr8365763 = %kV4$new
  store i64 %cont8360165, i64* %eptr8365764                                          ; *eptr8365764 = %cont8360165
  %eptr8365760 = getelementptr inbounds i64, i64* %cloptr8365759, i64 0              ; &cloptr8365759[0]
  %f8365765 = ptrtoint void(i64,i64)* @lam8364107 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365765, i64* %eptr8365760                                             ; store fptr
  %arg8361077 = ptrtoint i64* %cloptr8365759 to i64                                  ; closure cast; i64* -> i64
  %arg8361076 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362751 = add i64 0, 0                                                         ; quoted ()
  %rva8362750 = call i64 @prim_cons(i64 %retprim8360191, i64 %rva8362751)            ; call prim_cons
  %rva8362749 = call i64 @prim_cons(i64 %arg8361076, i64 %rva8362750)                ; call prim_cons
  %cloptr8365766 = inttoptr i64 %arg8361077 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365767 = getelementptr inbounds i64, i64* %cloptr8365766, i64 0             ; &cloptr8365766[0]
  %f8365769 = load i64, i64* %i0ptr8365767, align 8                                  ; load; *i0ptr8365767
  %fptr8365768 = inttoptr i64 %f8365769 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365768(i64 %arg8361077, i64 %rva8362749)           ; tail call
  ret void
}


define void @lam8364107(i64 %env8364108, i64 %rvp8362748) {
  %envptr8365770 = inttoptr i64 %env8364108 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365771 = getelementptr inbounds i64, i64* %envptr8365770, i64 4            ; &envptr8365770[4]
  %cont8360165 = load i64, i64* %envptr8365771, align 8                              ; load; *envptr8365771
  %envptr8365772 = inttoptr i64 %env8364108 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365773 = getelementptr inbounds i64, i64* %envptr8365772, i64 3            ; &envptr8365772[3]
  %kV4$new = load i64, i64* %envptr8365773, align 8                                  ; load; *envptr8365773
  %envptr8365774 = inttoptr i64 %env8364108 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365775 = getelementptr inbounds i64, i64* %envptr8365774, i64 2            ; &envptr8365774[2]
  %aCS$tail = load i64, i64* %envptr8365775, align 8                                 ; load; *envptr8365775
  %envptr8365776 = inttoptr i64 %env8364108 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365777 = getelementptr inbounds i64, i64* %envptr8365776, i64 1            ; &envptr8365776[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365777, align 8                      ; load; *envptr8365777
  %_958360181 = call i64 @prim_car(i64 %rvp8362748)                                  ; call prim_car
  %rvp8362747 = call i64 @prim_cdr(i64 %rvp8362748)                                  ; call prim_cdr
  %ftW$f = call i64 @prim_car(i64 %rvp8362747)                                       ; call prim_car
  %na8362531 = call i64 @prim_cdr(i64 %rvp8362747)                                   ; call prim_cdr
  %cloptr8365778 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365780 = getelementptr inbounds i64, i64* %cloptr8365778, i64 1              ; &eptr8365780[1]
  %eptr8365781 = getelementptr inbounds i64, i64* %cloptr8365778, i64 2              ; &eptr8365781[2]
  %eptr8365782 = getelementptr inbounds i64, i64* %cloptr8365778, i64 3              ; &eptr8365782[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365780                                  ; *eptr8365780 = %Z9D$_37wind_45stack
  store i64 %ftW$f, i64* %eptr8365781                                                ; *eptr8365781 = %ftW$f
  store i64 %aCS$tail, i64* %eptr8365782                                             ; *eptr8365782 = %aCS$tail
  %eptr8365779 = getelementptr inbounds i64, i64* %cloptr8365778, i64 0              ; &cloptr8365778[0]
  %f8365783 = ptrtoint void(i64,i64)* @lam8364105 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365783, i64* %eptr8365779                                             ; store fptr
  %wOi$f8359929 = ptrtoint i64* %cloptr8365778 to i64                                ; closure cast; i64* -> i64
  %arg8361129 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %ili$_95t = call i64 @prim_vector_45set_33(i64 %ftW$f, i64 %arg8361129, i64 %wOi$f8359929); call prim_vector_45set_33
  %arg8361131 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360051 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8361131)               ; call prim_vector_45ref
  %a8360052 = call i64 @prim_procedure_63(i64 %a8360051)                             ; call prim_procedure_63
  %cmp8365784 = icmp eq i64 %a8360052, 15                                            ; false?
  br i1 %cmp8365784, label %else8365786, label %then8365785                          ; if

then8365785:
  %arg8361134 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360053 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8361134)               ; call prim_vector_45ref
  %arg8361136 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360054 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8361136) ; call prim_vector_45ref
  %cloptr8365787 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8365789 = getelementptr inbounds i64, i64* %cloptr8365787, i64 1              ; &eptr8365789[1]
  %eptr8365790 = getelementptr inbounds i64, i64* %cloptr8365787, i64 2              ; &eptr8365790[2]
  %eptr8365791 = getelementptr inbounds i64, i64* %cloptr8365787, i64 3              ; &eptr8365791[3]
  %eptr8365792 = getelementptr inbounds i64, i64* %cloptr8365787, i64 4              ; &eptr8365792[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365789                                  ; *eptr8365789 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8365790                                             ; *eptr8365790 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8365791                                              ; *eptr8365791 = %kV4$new
  store i64 %cont8360165, i64* %eptr8365792                                          ; *eptr8365792 = %cont8360165
  %eptr8365788 = getelementptr inbounds i64, i64* %cloptr8365787, i64 0              ; &cloptr8365787[0]
  %f8365793 = ptrtoint void(i64,i64)* @lam8364006 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365793, i64* %eptr8365788                                             ; store fptr
  %arg8361139 = ptrtoint i64* %cloptr8365787 to i64                                  ; closure cast; i64* -> i64
  %rva8362658 = add i64 0, 0                                                         ; quoted ()
  %rva8362657 = call i64 @prim_cons(i64 %a8360054, i64 %rva8362658)                  ; call prim_cons
  %rva8362656 = call i64 @prim_cons(i64 %arg8361139, i64 %rva8362657)                ; call prim_cons
  %cloptr8365794 = inttoptr i64 %a8360053 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365795 = getelementptr inbounds i64, i64* %cloptr8365794, i64 0             ; &cloptr8365794[0]
  %f8365797 = load i64, i64* %i0ptr8365795, align 8                                  ; load; *i0ptr8365795
  %fptr8365796 = inttoptr i64 %f8365797 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365796(i64 %a8360053, i64 %rva8362656)             ; tail call
  ret void

else8365786:
  %arg8361233 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365798, i32 0, i32 0)); quoted string
  %retprim8360189 = call i64 @prim_halt(i64 %arg8361233)                             ; call prim_halt
  %cloptr8365799 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8365801 = getelementptr inbounds i64, i64* %cloptr8365799, i64 1              ; &eptr8365801[1]
  %eptr8365802 = getelementptr inbounds i64, i64* %cloptr8365799, i64 2              ; &eptr8365802[2]
  %eptr8365803 = getelementptr inbounds i64, i64* %cloptr8365799, i64 3              ; &eptr8365803[3]
  %eptr8365804 = getelementptr inbounds i64, i64* %cloptr8365799, i64 4              ; &eptr8365804[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365801                                  ; *eptr8365801 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8365802                                             ; *eptr8365802 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8365803                                              ; *eptr8365803 = %kV4$new
  store i64 %cont8360165, i64* %eptr8365804                                          ; *eptr8365804 = %cont8360165
  %eptr8365800 = getelementptr inbounds i64, i64* %cloptr8365799, i64 0              ; &cloptr8365799[0]
  %f8365805 = ptrtoint void(i64,i64)* @lam8364073 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365805, i64* %eptr8365800                                             ; store fptr
  %arg8361236 = ptrtoint i64* %cloptr8365799 to i64                                  ; closure cast; i64* -> i64
  %arg8361235 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362746 = add i64 0, 0                                                         ; quoted ()
  %rva8362745 = call i64 @prim_cons(i64 %retprim8360189, i64 %rva8362746)            ; call prim_cons
  %rva8362744 = call i64 @prim_cons(i64 %arg8361235, i64 %rva8362745)                ; call prim_cons
  %cloptr8365806 = inttoptr i64 %arg8361236 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365807 = getelementptr inbounds i64, i64* %cloptr8365806, i64 0             ; &cloptr8365806[0]
  %f8365809 = load i64, i64* %i0ptr8365807, align 8                                  ; load; *i0ptr8365807
  %fptr8365808 = inttoptr i64 %f8365809 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365808(i64 %arg8361236, i64 %rva8362744)           ; tail call
  ret void
}


define void @lam8364105(i64 %env8364106, i64 %rvp8362570) {
  %envptr8365810 = inttoptr i64 %env8364106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365811 = getelementptr inbounds i64, i64* %envptr8365810, i64 3            ; &envptr8365810[3]
  %aCS$tail = load i64, i64* %envptr8365811, align 8                                 ; load; *envptr8365811
  %envptr8365812 = inttoptr i64 %env8364106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365813 = getelementptr inbounds i64, i64* %envptr8365812, i64 2            ; &envptr8365812[2]
  %ftW$f = load i64, i64* %envptr8365813, align 8                                    ; load; *envptr8365813
  %envptr8365814 = inttoptr i64 %env8364106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365815 = getelementptr inbounds i64, i64* %envptr8365814, i64 1            ; &envptr8365814[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365815, align 8                      ; load; *envptr8365815
  %cont8360182 = call i64 @prim_car(i64 %rvp8362570)                                 ; call prim_car
  %rvp8362569 = call i64 @prim_cdr(i64 %rvp8362570)                                  ; call prim_cdr
  %AsH$l = call i64 @prim_car(i64 %rvp8362569)                                       ; call prim_car
  %na8362533 = call i64 @prim_cdr(i64 %rvp8362569)                                   ; call prim_cdr
  %a8360039 = call i64 @prim_eq_63(i64 %AsH$l, i64 %aCS$tail)                        ; call prim_eq_63
  %a8360040 = call i64 @prim_not(i64 %a8360039)                                      ; call prim_not
  %cmp8365816 = icmp eq i64 %a8360040, 15                                            ; false?
  br i1 %cmp8365816, label %else8365818, label %then8365817                          ; if

then8365817:
  %a8360041 = call i64 @prim_cdr(i64 %AsH$l)                                         ; call prim_cdr
  %arg8361083 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360187 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361083, i64 %a8360041); call prim_vector_45set_33
  %cloptr8365819 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365821 = getelementptr inbounds i64, i64* %cloptr8365819, i64 1              ; &eptr8365821[1]
  %eptr8365822 = getelementptr inbounds i64, i64* %cloptr8365819, i64 2              ; &eptr8365822[2]
  %eptr8365823 = getelementptr inbounds i64, i64* %cloptr8365819, i64 3              ; &eptr8365823[3]
  store i64 %ftW$f, i64* %eptr8365821                                                ; *eptr8365821 = %ftW$f
  store i64 %cont8360182, i64* %eptr8365822                                          ; *eptr8365822 = %cont8360182
  store i64 %AsH$l, i64* %eptr8365823                                                ; *eptr8365823 = %AsH$l
  %eptr8365820 = getelementptr inbounds i64, i64* %cloptr8365819, i64 0              ; &cloptr8365819[0]
  %f8365824 = ptrtoint void(i64,i64)* @lam8364100 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365824, i64* %eptr8365820                                             ; store fptr
  %arg8361087 = ptrtoint i64* %cloptr8365819 to i64                                  ; closure cast; i64* -> i64
  %arg8361086 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362565 = add i64 0, 0                                                         ; quoted ()
  %rva8362564 = call i64 @prim_cons(i64 %retprim8360187, i64 %rva8362565)            ; call prim_cons
  %rva8362563 = call i64 @prim_cons(i64 %arg8361086, i64 %rva8362564)                ; call prim_cons
  %cloptr8365825 = inttoptr i64 %arg8361087 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365826 = getelementptr inbounds i64, i64* %cloptr8365825, i64 0             ; &cloptr8365825[0]
  %f8365828 = load i64, i64* %i0ptr8365826, align 8                                  ; load; *i0ptr8365826
  %fptr8365827 = inttoptr i64 %f8365828 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365827(i64 %arg8361087, i64 %rva8362563)           ; tail call
  ret void

else8365818:
  %retprim8360188 = call i64 @prim_void()                                            ; call prim_void
  %arg8361126 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362568 = add i64 0, 0                                                         ; quoted ()
  %rva8362567 = call i64 @prim_cons(i64 %retprim8360188, i64 %rva8362568)            ; call prim_cons
  %rva8362566 = call i64 @prim_cons(i64 %arg8361126, i64 %rva8362567)                ; call prim_cons
  %cloptr8365829 = inttoptr i64 %cont8360182 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365830 = getelementptr inbounds i64, i64* %cloptr8365829, i64 0             ; &cloptr8365829[0]
  %f8365832 = load i64, i64* %i0ptr8365830, align 8                                  ; load; *i0ptr8365830
  %fptr8365831 = inttoptr i64 %f8365832 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365831(i64 %cont8360182, i64 %rva8362566)          ; tail call
  ret void
}


define void @lam8364100(i64 %env8364101, i64 %rvp8362562) {
  %envptr8365833 = inttoptr i64 %env8364101 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365834 = getelementptr inbounds i64, i64* %envptr8365833, i64 3            ; &envptr8365833[3]
  %AsH$l = load i64, i64* %envptr8365834, align 8                                    ; load; *envptr8365834
  %envptr8365835 = inttoptr i64 %env8364101 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365836 = getelementptr inbounds i64, i64* %envptr8365835, i64 2            ; &envptr8365835[2]
  %cont8360182 = load i64, i64* %envptr8365836, align 8                              ; load; *envptr8365836
  %envptr8365837 = inttoptr i64 %env8364101 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365838 = getelementptr inbounds i64, i64* %envptr8365837, i64 1            ; &envptr8365837[1]
  %ftW$f = load i64, i64* %envptr8365838, align 8                                    ; load; *envptr8365838
  %_958360183 = call i64 @prim_car(i64 %rvp8362562)                                  ; call prim_car
  %rvp8362561 = call i64 @prim_cdr(i64 %rvp8362562)                                  ; call prim_cdr
  %NPm$_95t = call i64 @prim_car(i64 %rvp8362561)                                    ; call prim_car
  %na8362535 = call i64 @prim_cdr(i64 %rvp8362561)                                   ; call prim_cdr
  %a8360042 = call i64 @prim_car(i64 %AsH$l)                                         ; call prim_car
  %a8360043 = call i64 @prim_cdr(i64 %a8360042)                                      ; call prim_cdr
  %a8360044 = call i64 @prim_procedure_63(i64 %a8360043)                             ; call prim_procedure_63
  %cmp8365839 = icmp eq i64 %a8360044, 15                                            ; false?
  br i1 %cmp8365839, label %else8365841, label %then8365840                          ; if

then8365840:
  %a8360045 = call i64 @prim_car(i64 %AsH$l)                                         ; call prim_car
  %a8360046 = call i64 @prim_cdr(i64 %a8360045)                                      ; call prim_cdr
  %cloptr8365842 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365844 = getelementptr inbounds i64, i64* %cloptr8365842, i64 1              ; &eptr8365844[1]
  %eptr8365845 = getelementptr inbounds i64, i64* %cloptr8365842, i64 2              ; &eptr8365845[2]
  %eptr8365846 = getelementptr inbounds i64, i64* %cloptr8365842, i64 3              ; &eptr8365846[3]
  store i64 %ftW$f, i64* %eptr8365844                                                ; *eptr8365844 = %ftW$f
  store i64 %cont8360182, i64* %eptr8365845                                          ; *eptr8365845 = %cont8360182
  store i64 %AsH$l, i64* %eptr8365846                                                ; *eptr8365846 = %AsH$l
  %eptr8365843 = getelementptr inbounds i64, i64* %cloptr8365842, i64 0              ; &cloptr8365842[0]
  %f8365847 = ptrtoint void(i64,i64)* @lam8364087 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365847, i64* %eptr8365843                                             ; store fptr
  %arg8361093 = ptrtoint i64* %cloptr8365842 to i64                                  ; closure cast; i64* -> i64
  %rva8362547 = add i64 0, 0                                                         ; quoted ()
  %rva8362546 = call i64 @prim_cons(i64 %arg8361093, i64 %rva8362547)                ; call prim_cons
  %cloptr8365848 = inttoptr i64 %a8360046 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365849 = getelementptr inbounds i64, i64* %cloptr8365848, i64 0             ; &cloptr8365848[0]
  %f8365851 = load i64, i64* %i0ptr8365849, align 8                                  ; load; *i0ptr8365849
  %fptr8365850 = inttoptr i64 %f8365851 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365850(i64 %a8360046, i64 %rva8362546)             ; tail call
  ret void

else8365841:
  %arg8361108 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365852, i32 0, i32 0)); quoted string
  %retprim8360186 = call i64 @prim_halt(i64 %arg8361108)                             ; call prim_halt
  %cloptr8365853 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365855 = getelementptr inbounds i64, i64* %cloptr8365853, i64 1              ; &eptr8365855[1]
  %eptr8365856 = getelementptr inbounds i64, i64* %cloptr8365853, i64 2              ; &eptr8365856[2]
  %eptr8365857 = getelementptr inbounds i64, i64* %cloptr8365853, i64 3              ; &eptr8365857[3]
  store i64 %ftW$f, i64* %eptr8365855                                                ; *eptr8365855 = %ftW$f
  store i64 %cont8360182, i64* %eptr8365856                                          ; *eptr8365856 = %cont8360182
  store i64 %AsH$l, i64* %eptr8365857                                                ; *eptr8365857 = %AsH$l
  %eptr8365854 = getelementptr inbounds i64, i64* %cloptr8365853, i64 0              ; &cloptr8365853[0]
  %f8365858 = ptrtoint void(i64,i64)* @lam8364097 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365858, i64* %eptr8365854                                             ; store fptr
  %arg8361111 = ptrtoint i64* %cloptr8365853 to i64                                  ; closure cast; i64* -> i64
  %arg8361110 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362560 = add i64 0, 0                                                         ; quoted ()
  %rva8362559 = call i64 @prim_cons(i64 %retprim8360186, i64 %rva8362560)            ; call prim_cons
  %rva8362558 = call i64 @prim_cons(i64 %arg8361110, i64 %rva8362559)                ; call prim_cons
  %cloptr8365859 = inttoptr i64 %arg8361111 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365860 = getelementptr inbounds i64, i64* %cloptr8365859, i64 0             ; &cloptr8365859[0]
  %f8365862 = load i64, i64* %i0ptr8365860, align 8                                  ; load; *i0ptr8365860
  %fptr8365861 = inttoptr i64 %f8365862 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365861(i64 %arg8361111, i64 %rva8362558)           ; tail call
  ret void
}


define void @lam8364097(i64 %env8364098, i64 %rvp8362557) {
  %envptr8365863 = inttoptr i64 %env8364098 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365864 = getelementptr inbounds i64, i64* %envptr8365863, i64 3            ; &envptr8365863[3]
  %AsH$l = load i64, i64* %envptr8365864, align 8                                    ; load; *envptr8365864
  %envptr8365865 = inttoptr i64 %env8364098 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365866 = getelementptr inbounds i64, i64* %envptr8365865, i64 2            ; &envptr8365865[2]
  %cont8360182 = load i64, i64* %envptr8365866, align 8                              ; load; *envptr8365866
  %envptr8365867 = inttoptr i64 %env8364098 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365868 = getelementptr inbounds i64, i64* %envptr8365867, i64 1            ; &envptr8365867[1]
  %ftW$f = load i64, i64* %envptr8365868, align 8                                    ; load; *envptr8365868
  %_958360184 = call i64 @prim_car(i64 %rvp8362557)                                  ; call prim_car
  %rvp8362556 = call i64 @prim_cdr(i64 %rvp8362557)                                  ; call prim_cdr
  %cGz$_95t = call i64 @prim_car(i64 %rvp8362556)                                    ; call prim_car
  %na8362549 = call i64 @prim_cdr(i64 %rvp8362556)                                   ; call prim_cdr
  %arg8361112 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360047 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8361112)               ; call prim_vector_45ref
  %a8360048 = call i64 @prim_procedure_63(i64 %a8360047)                             ; call prim_procedure_63
  %cmp8365869 = icmp eq i64 %a8360048, 15                                            ; false?
  br i1 %cmp8365869, label %else8365871, label %then8365870                          ; if

then8365870:
  %arg8361115 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360049 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8361115)               ; call prim_vector_45ref
  %a8360050 = call i64 @prim_cdr(i64 %AsH$l)                                         ; call prim_cdr
  %rva8362552 = add i64 0, 0                                                         ; quoted ()
  %rva8362551 = call i64 @prim_cons(i64 %a8360050, i64 %rva8362552)                  ; call prim_cons
  %rva8362550 = call i64 @prim_cons(i64 %cont8360182, i64 %rva8362551)               ; call prim_cons
  %cloptr8365872 = inttoptr i64 %a8360049 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365873 = getelementptr inbounds i64, i64* %cloptr8365872, i64 0             ; &cloptr8365872[0]
  %f8365875 = load i64, i64* %i0ptr8365873, align 8                                  ; load; *i0ptr8365873
  %fptr8365874 = inttoptr i64 %f8365875 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365874(i64 %a8360049, i64 %rva8362550)             ; tail call
  ret void

else8365871:
  %arg8361121 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365876, i32 0, i32 0)); quoted string
  %retprim8360185 = call i64 @prim_halt(i64 %arg8361121)                             ; call prim_halt
  %arg8361123 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362555 = add i64 0, 0                                                         ; quoted ()
  %rva8362554 = call i64 @prim_cons(i64 %retprim8360185, i64 %rva8362555)            ; call prim_cons
  %rva8362553 = call i64 @prim_cons(i64 %arg8361123, i64 %rva8362554)                ; call prim_cons
  %cloptr8365877 = inttoptr i64 %cont8360182 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365878 = getelementptr inbounds i64, i64* %cloptr8365877, i64 0             ; &cloptr8365877[0]
  %f8365880 = load i64, i64* %i0ptr8365878, align 8                                  ; load; *i0ptr8365878
  %fptr8365879 = inttoptr i64 %f8365880 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365879(i64 %cont8360182, i64 %rva8362553)          ; tail call
  ret void
}


define void @lam8364087(i64 %env8364088, i64 %rvp8362545) {
  %envptr8365881 = inttoptr i64 %env8364088 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365882 = getelementptr inbounds i64, i64* %envptr8365881, i64 3            ; &envptr8365881[3]
  %AsH$l = load i64, i64* %envptr8365882, align 8                                    ; load; *envptr8365882
  %envptr8365883 = inttoptr i64 %env8364088 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365884 = getelementptr inbounds i64, i64* %envptr8365883, i64 2            ; &envptr8365883[2]
  %cont8360182 = load i64, i64* %envptr8365884, align 8                              ; load; *envptr8365884
  %envptr8365885 = inttoptr i64 %env8364088 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365886 = getelementptr inbounds i64, i64* %envptr8365885, i64 1            ; &envptr8365885[1]
  %ftW$f = load i64, i64* %envptr8365886, align 8                                    ; load; *envptr8365886
  %_958360184 = call i64 @prim_car(i64 %rvp8362545)                                  ; call prim_car
  %rvp8362544 = call i64 @prim_cdr(i64 %rvp8362545)                                  ; call prim_cdr
  %cGz$_95t = call i64 @prim_car(i64 %rvp8362544)                                    ; call prim_car
  %na8362537 = call i64 @prim_cdr(i64 %rvp8362544)                                   ; call prim_cdr
  %arg8361095 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360047 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8361095)               ; call prim_vector_45ref
  %a8360048 = call i64 @prim_procedure_63(i64 %a8360047)                             ; call prim_procedure_63
  %cmp8365887 = icmp eq i64 %a8360048, 15                                            ; false?
  br i1 %cmp8365887, label %else8365889, label %then8365888                          ; if

then8365888:
  %arg8361098 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360049 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8361098)               ; call prim_vector_45ref
  %a8360050 = call i64 @prim_cdr(i64 %AsH$l)                                         ; call prim_cdr
  %rva8362540 = add i64 0, 0                                                         ; quoted ()
  %rva8362539 = call i64 @prim_cons(i64 %a8360050, i64 %rva8362540)                  ; call prim_cons
  %rva8362538 = call i64 @prim_cons(i64 %cont8360182, i64 %rva8362539)               ; call prim_cons
  %cloptr8365890 = inttoptr i64 %a8360049 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365891 = getelementptr inbounds i64, i64* %cloptr8365890, i64 0             ; &cloptr8365890[0]
  %f8365893 = load i64, i64* %i0ptr8365891, align 8                                  ; load; *i0ptr8365891
  %fptr8365892 = inttoptr i64 %f8365893 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365892(i64 %a8360049, i64 %rva8362538)             ; tail call
  ret void

else8365889:
  %arg8361104 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365894, i32 0, i32 0)); quoted string
  %retprim8360185 = call i64 @prim_halt(i64 %arg8361104)                             ; call prim_halt
  %arg8361106 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362543 = add i64 0, 0                                                         ; quoted ()
  %rva8362542 = call i64 @prim_cons(i64 %retprim8360185, i64 %rva8362543)            ; call prim_cons
  %rva8362541 = call i64 @prim_cons(i64 %arg8361106, i64 %rva8362542)                ; call prim_cons
  %cloptr8365895 = inttoptr i64 %cont8360182 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365896 = getelementptr inbounds i64, i64* %cloptr8365895, i64 0             ; &cloptr8365895[0]
  %f8365898 = load i64, i64* %i0ptr8365896, align 8                                  ; load; *i0ptr8365896
  %fptr8365897 = inttoptr i64 %f8365898 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365897(i64 %cont8360182, i64 %rva8362541)          ; tail call
  ret void
}


define void @lam8364073(i64 %env8364074, i64 %rvp8362743) {
  %envptr8365899 = inttoptr i64 %env8364074 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365900 = getelementptr inbounds i64, i64* %envptr8365899, i64 4            ; &envptr8365899[4]
  %cont8360165 = load i64, i64* %envptr8365900, align 8                              ; load; *envptr8365900
  %envptr8365901 = inttoptr i64 %env8364074 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365902 = getelementptr inbounds i64, i64* %envptr8365901, i64 3            ; &envptr8365901[3]
  %kV4$new = load i64, i64* %envptr8365902, align 8                                  ; load; *envptr8365902
  %envptr8365903 = inttoptr i64 %env8364074 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365904 = getelementptr inbounds i64, i64* %envptr8365903, i64 2            ; &envptr8365903[2]
  %aCS$tail = load i64, i64* %envptr8365904, align 8                                 ; load; *envptr8365904
  %envptr8365905 = inttoptr i64 %env8364074 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365906 = getelementptr inbounds i64, i64* %envptr8365905, i64 1            ; &envptr8365905[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365906, align 8                      ; load; *envptr8365906
  %_958360167 = call i64 @prim_car(i64 %rvp8362743)                                  ; call prim_car
  %rvp8362742 = call i64 @prim_cdr(i64 %rvp8362743)                                  ; call prim_cdr
  %iIP$_95t = call i64 @prim_car(i64 %rvp8362742)                                    ; call prim_car
  %na8362660 = call i64 @prim_cdr(i64 %rvp8362742)                                   ; call prim_cdr
  %cloptr8365907 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8365908 = getelementptr inbounds i64, i64* %cloptr8365907, i64 0              ; &cloptr8365907[0]
  %f8365909 = ptrtoint void(i64,i64)* @lam8364071 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365909, i64* %eptr8365908                                             ; store fptr
  %arg8361238 = ptrtoint i64* %cloptr8365907 to i64                                  ; closure cast; i64* -> i64
  %cloptr8365910 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8365912 = getelementptr inbounds i64, i64* %cloptr8365910, i64 1              ; &eptr8365912[1]
  %eptr8365913 = getelementptr inbounds i64, i64* %cloptr8365910, i64 2              ; &eptr8365913[2]
  %eptr8365914 = getelementptr inbounds i64, i64* %cloptr8365910, i64 3              ; &eptr8365914[3]
  %eptr8365915 = getelementptr inbounds i64, i64* %cloptr8365910, i64 4              ; &eptr8365915[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365912                                  ; *eptr8365912 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8365913                                             ; *eptr8365913 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8365914                                              ; *eptr8365914 = %kV4$new
  store i64 %cont8360165, i64* %eptr8365915                                          ; *eptr8365915 = %cont8360165
  %eptr8365911 = getelementptr inbounds i64, i64* %cloptr8365910, i64 0              ; &cloptr8365910[0]
  %f8365916 = ptrtoint void(i64,i64)* @lam8364067 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365916, i64* %eptr8365911                                             ; store fptr
  %arg8361237 = ptrtoint i64* %cloptr8365910 to i64                                  ; closure cast; i64* -> i64
  %rva8362741 = add i64 0, 0                                                         ; quoted ()
  %rva8362740 = call i64 @prim_cons(i64 %arg8361237, i64 %rva8362741)                ; call prim_cons
  %cloptr8365917 = inttoptr i64 %arg8361238 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365918 = getelementptr inbounds i64, i64* %cloptr8365917, i64 0             ; &cloptr8365917[0]
  %f8365920 = load i64, i64* %i0ptr8365918, align 8                                  ; load; *i0ptr8365918
  %fptr8365919 = inttoptr i64 %f8365920 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365919(i64 %arg8361238, i64 %rva8362740)           ; tail call
  ret void
}


define void @lam8364071(i64 %env8364072, i64 %JCH$lst8360180) {
  %cont8360179 = call i64 @prim_car(i64 %JCH$lst8360180)                             ; call prim_car
  %JCH$lst = call i64 @prim_cdr(i64 %JCH$lst8360180)                                 ; call prim_cdr
  %arg8361242 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362663 = add i64 0, 0                                                         ; quoted ()
  %rva8362662 = call i64 @prim_cons(i64 %JCH$lst, i64 %rva8362663)                   ; call prim_cons
  %rva8362661 = call i64 @prim_cons(i64 %arg8361242, i64 %rva8362662)                ; call prim_cons
  %cloptr8365921 = inttoptr i64 %cont8360179 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365922 = getelementptr inbounds i64, i64* %cloptr8365921, i64 0             ; &cloptr8365921[0]
  %f8365924 = load i64, i64* %i0ptr8365922, align 8                                  ; load; *i0ptr8365922
  %fptr8365923 = inttoptr i64 %f8365924 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365923(i64 %cont8360179, i64 %rva8362661)          ; tail call
  ret void
}


define void @lam8364067(i64 %env8364068, i64 %rvp8362739) {
  %envptr8365925 = inttoptr i64 %env8364068 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365926 = getelementptr inbounds i64, i64* %envptr8365925, i64 4            ; &envptr8365925[4]
  %cont8360165 = load i64, i64* %envptr8365926, align 8                              ; load; *envptr8365926
  %envptr8365927 = inttoptr i64 %env8364068 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365928 = getelementptr inbounds i64, i64* %envptr8365927, i64 3            ; &envptr8365927[3]
  %kV4$new = load i64, i64* %envptr8365928, align 8                                  ; load; *envptr8365928
  %envptr8365929 = inttoptr i64 %env8364068 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365930 = getelementptr inbounds i64, i64* %envptr8365929, i64 2            ; &envptr8365929[2]
  %aCS$tail = load i64, i64* %envptr8365930, align 8                                 ; load; *envptr8365930
  %envptr8365931 = inttoptr i64 %env8364068 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365932 = getelementptr inbounds i64, i64* %envptr8365931, i64 1            ; &envptr8365931[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365932, align 8                      ; load; *envptr8365932
  %_958360177 = call i64 @prim_car(i64 %rvp8362739)                                  ; call prim_car
  %rvp8362738 = call i64 @prim_cdr(i64 %rvp8362739)                                  ; call prim_cdr
  %a8360055 = call i64 @prim_car(i64 %rvp8362738)                                    ; call prim_car
  %na8362665 = call i64 @prim_cdr(i64 %rvp8362738)                                   ; call prim_cdr
  %arg8361245 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360178 = call i64 @prim_make_45vector(i64 %arg8361245, i64 %a8360055)     ; call prim_make_45vector
  %cloptr8365933 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8365935 = getelementptr inbounds i64, i64* %cloptr8365933, i64 1              ; &eptr8365935[1]
  %eptr8365936 = getelementptr inbounds i64, i64* %cloptr8365933, i64 2              ; &eptr8365936[2]
  %eptr8365937 = getelementptr inbounds i64, i64* %cloptr8365933, i64 3              ; &eptr8365937[3]
  %eptr8365938 = getelementptr inbounds i64, i64* %cloptr8365933, i64 4              ; &eptr8365938[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365935                                  ; *eptr8365935 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8365936                                             ; *eptr8365936 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8365937                                              ; *eptr8365937 = %kV4$new
  store i64 %cont8360165, i64* %eptr8365938                                          ; *eptr8365938 = %cont8360165
  %eptr8365934 = getelementptr inbounds i64, i64* %cloptr8365933, i64 0              ; &cloptr8365933[0]
  %f8365939 = ptrtoint void(i64,i64)* @lam8364064 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365939, i64* %eptr8365934                                             ; store fptr
  %arg8361248 = ptrtoint i64* %cloptr8365933 to i64                                  ; closure cast; i64* -> i64
  %arg8361247 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362737 = add i64 0, 0                                                         ; quoted ()
  %rva8362736 = call i64 @prim_cons(i64 %retprim8360178, i64 %rva8362737)            ; call prim_cons
  %rva8362735 = call i64 @prim_cons(i64 %arg8361247, i64 %rva8362736)                ; call prim_cons
  %cloptr8365940 = inttoptr i64 %arg8361248 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8365941 = getelementptr inbounds i64, i64* %cloptr8365940, i64 0             ; &cloptr8365940[0]
  %f8365943 = load i64, i64* %i0ptr8365941, align 8                                  ; load; *i0ptr8365941
  %fptr8365942 = inttoptr i64 %f8365943 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365942(i64 %arg8361248, i64 %rva8362735)           ; tail call
  ret void
}


define void @lam8364064(i64 %env8364065, i64 %rvp8362734) {
  %envptr8365944 = inttoptr i64 %env8364065 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365945 = getelementptr inbounds i64, i64* %envptr8365944, i64 4            ; &envptr8365944[4]
  %cont8360165 = load i64, i64* %envptr8365945, align 8                              ; load; *envptr8365945
  %envptr8365946 = inttoptr i64 %env8364065 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365947 = getelementptr inbounds i64, i64* %envptr8365946, i64 3            ; &envptr8365946[3]
  %kV4$new = load i64, i64* %envptr8365947, align 8                                  ; load; *envptr8365947
  %envptr8365948 = inttoptr i64 %env8364065 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365949 = getelementptr inbounds i64, i64* %envptr8365948, i64 2            ; &envptr8365948[2]
  %aCS$tail = load i64, i64* %envptr8365949, align 8                                 ; load; *envptr8365949
  %envptr8365950 = inttoptr i64 %env8364065 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365951 = getelementptr inbounds i64, i64* %envptr8365950, i64 1            ; &envptr8365950[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365951, align 8                      ; load; *envptr8365951
  %_958360168 = call i64 @prim_car(i64 %rvp8362734)                                  ; call prim_car
  %rvp8362733 = call i64 @prim_cdr(i64 %rvp8362734)                                  ; call prim_cdr
  %prl$f = call i64 @prim_car(i64 %rvp8362733)                                       ; call prim_car
  %na8362667 = call i64 @prim_cdr(i64 %rvp8362733)                                   ; call prim_cdr
  %cloptr8365952 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365954 = getelementptr inbounds i64, i64* %cloptr8365952, i64 1              ; &eptr8365954[1]
  %eptr8365955 = getelementptr inbounds i64, i64* %cloptr8365952, i64 2              ; &eptr8365955[2]
  %eptr8365956 = getelementptr inbounds i64, i64* %cloptr8365952, i64 3              ; &eptr8365956[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365954                                  ; *eptr8365954 = %Z9D$_37wind_45stack
  store i64 %prl$f, i64* %eptr8365955                                                ; *eptr8365955 = %prl$f
  store i64 %aCS$tail, i64* %eptr8365956                                             ; *eptr8365956 = %aCS$tail
  %eptr8365953 = getelementptr inbounds i64, i64* %cloptr8365952, i64 0              ; &cloptr8365952[0]
  %f8365957 = ptrtoint void(i64,i64)* @lam8364062 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365957, i64* %eptr8365953                                             ; store fptr
  %mtP$f8359930 = ptrtoint i64* %cloptr8365952 to i64                                ; closure cast; i64* -> i64
  %arg8361315 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %O4n$_95t = call i64 @prim_vector_45set_33(i64 %prl$f, i64 %arg8361315, i64 %mtP$f8359930); call prim_vector_45set_33
  %arg8361317 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360067 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361317)               ; call prim_vector_45ref
  %a8360068 = call i64 @prim_procedure_63(i64 %a8360067)                             ; call prim_procedure_63
  %cmp8365958 = icmp eq i64 %a8360068, 15                                            ; false?
  br i1 %cmp8365958, label %else8365960, label %then8365959                          ; if

then8365959:
  %arg8361320 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360069 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361320)               ; call prim_vector_45ref
  %rva8362729 = add i64 0, 0                                                         ; quoted ()
  %rva8362728 = call i64 @prim_cons(i64 %kV4$new, i64 %rva8362729)                   ; call prim_cons
  %rva8362727 = call i64 @prim_cons(i64 %cont8360165, i64 %rva8362728)               ; call prim_cons
  %cloptr8365961 = inttoptr i64 %a8360069 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365962 = getelementptr inbounds i64, i64* %cloptr8365961, i64 0             ; &cloptr8365961[0]
  %f8365964 = load i64, i64* %i0ptr8365962, align 8                                  ; load; *i0ptr8365962
  %fptr8365963 = inttoptr i64 %f8365964 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365963(i64 %a8360069, i64 %rva8362727)             ; tail call
  ret void

else8365960:
  %arg8361325 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365965, i32 0, i32 0)); quoted string
  %retprim8360176 = call i64 @prim_halt(i64 %arg8361325)                             ; call prim_halt
  %arg8361327 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362732 = add i64 0, 0                                                         ; quoted ()
  %rva8362731 = call i64 @prim_cons(i64 %retprim8360176, i64 %rva8362732)            ; call prim_cons
  %rva8362730 = call i64 @prim_cons(i64 %arg8361327, i64 %rva8362731)                ; call prim_cons
  %cloptr8365966 = inttoptr i64 %cont8360165 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8365967 = getelementptr inbounds i64, i64* %cloptr8365966, i64 0             ; &cloptr8365966[0]
  %f8365969 = load i64, i64* %i0ptr8365967, align 8                                  ; load; *i0ptr8365967
  %fptr8365968 = inttoptr i64 %f8365969 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365968(i64 %cont8360165, i64 %rva8362730)          ; tail call
  ret void
}


define void @lam8364062(i64 %env8364063, i64 %rvp8362726) {
  %envptr8365970 = inttoptr i64 %env8364063 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365971 = getelementptr inbounds i64, i64* %envptr8365970, i64 3            ; &envptr8365970[3]
  %aCS$tail = load i64, i64* %envptr8365971, align 8                                 ; load; *envptr8365971
  %envptr8365972 = inttoptr i64 %env8364063 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365973 = getelementptr inbounds i64, i64* %envptr8365972, i64 2            ; &envptr8365972[2]
  %prl$f = load i64, i64* %envptr8365973, align 8                                    ; load; *envptr8365973
  %envptr8365974 = inttoptr i64 %env8364063 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8365975 = getelementptr inbounds i64, i64* %envptr8365974, i64 1            ; &envptr8365974[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8365975, align 8                      ; load; *envptr8365975
  %cont8360169 = call i64 @prim_car(i64 %rvp8362726)                                 ; call prim_car
  %rvp8362725 = call i64 @prim_cdr(i64 %rvp8362726)                                  ; call prim_cdr
  %Zgr$l = call i64 @prim_car(i64 %rvp8362725)                                       ; call prim_car
  %na8362669 = call i64 @prim_cdr(i64 %rvp8362725)                                   ; call prim_cdr
  %a8360056 = call i64 @prim_eq_63(i64 %Zgr$l, i64 %aCS$tail)                        ; call prim_eq_63
  %a8360057 = call i64 @prim_not(i64 %a8360056)                                      ; call prim_not
  %cmp8365976 = icmp eq i64 %a8360057, 15                                            ; false?
  br i1 %cmp8365976, label %else8365978, label %then8365977                          ; if

then8365977:
  %arg8361252 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360058 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361252)               ; call prim_vector_45ref
  %a8360059 = call i64 @prim_procedure_63(i64 %a8360058)                             ; call prim_procedure_63
  %cmp8365979 = icmp eq i64 %a8360059, 15                                            ; false?
  br i1 %cmp8365979, label %else8365981, label %then8365980                          ; if

then8365980:
  %arg8361255 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360060 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361255)               ; call prim_vector_45ref
  %a8360061 = call i64 @prim_cdr(i64 %Zgr$l)                                         ; call prim_cdr
  %cloptr8365982 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365984 = getelementptr inbounds i64, i64* %cloptr8365982, i64 1              ; &eptr8365984[1]
  %eptr8365985 = getelementptr inbounds i64, i64* %cloptr8365982, i64 2              ; &eptr8365985[2]
  %eptr8365986 = getelementptr inbounds i64, i64* %cloptr8365982, i64 3              ; &eptr8365986[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365984                                  ; *eptr8365984 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8365985                                                ; *eptr8365985 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8365986                                          ; *eptr8365986 = %cont8360169
  %eptr8365983 = getelementptr inbounds i64, i64* %cloptr8365982, i64 0              ; &cloptr8365982[0]
  %f8365987 = ptrtoint void(i64,i64)* @lam8364037 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365987, i64* %eptr8365983                                             ; store fptr
  %arg8361259 = ptrtoint i64* %cloptr8365982 to i64                                  ; closure cast; i64* -> i64
  %rva8362695 = add i64 0, 0                                                         ; quoted ()
  %rva8362694 = call i64 @prim_cons(i64 %a8360061, i64 %rva8362695)                  ; call prim_cons
  %rva8362693 = call i64 @prim_cons(i64 %arg8361259, i64 %rva8362694)                ; call prim_cons
  %cloptr8365988 = inttoptr i64 %a8360060 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8365989 = getelementptr inbounds i64, i64* %cloptr8365988, i64 0             ; &cloptr8365988[0]
  %f8365991 = load i64, i64* %i0ptr8365989, align 8                                  ; load; *i0ptr8365989
  %fptr8365990 = inttoptr i64 %f8365991 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8365990(i64 %a8360060, i64 %rva8362693)             ; tail call
  ret void

else8365981:
  %arg8361284 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8365992, i32 0, i32 0)); quoted string
  %retprim8360174 = call i64 @prim_halt(i64 %arg8361284)                             ; call prim_halt
  %cloptr8365993 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8365995 = getelementptr inbounds i64, i64* %cloptr8365993, i64 1              ; &eptr8365995[1]
  %eptr8365996 = getelementptr inbounds i64, i64* %cloptr8365993, i64 2              ; &eptr8365996[2]
  %eptr8365997 = getelementptr inbounds i64, i64* %cloptr8365993, i64 3              ; &eptr8365997[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8365995                                  ; *eptr8365995 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8365996                                                ; *eptr8365996 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8365997                                          ; *eptr8365997 = %cont8360169
  %eptr8365994 = getelementptr inbounds i64, i64* %cloptr8365993, i64 0              ; &cloptr8365993[0]
  %f8365998 = ptrtoint void(i64,i64)* @lam8364056 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8365998, i64* %eptr8365994                                             ; store fptr
  %arg8361287 = ptrtoint i64* %cloptr8365993 to i64                                  ; closure cast; i64* -> i64
  %arg8361286 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362721 = add i64 0, 0                                                         ; quoted ()
  %rva8362720 = call i64 @prim_cons(i64 %retprim8360174, i64 %rva8362721)            ; call prim_cons
  %rva8362719 = call i64 @prim_cons(i64 %arg8361286, i64 %rva8362720)                ; call prim_cons
  %cloptr8365999 = inttoptr i64 %arg8361287 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366000 = getelementptr inbounds i64, i64* %cloptr8365999, i64 0             ; &cloptr8365999[0]
  %f8366002 = load i64, i64* %i0ptr8366000, align 8                                  ; load; *i0ptr8366000
  %fptr8366001 = inttoptr i64 %f8366002 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366001(i64 %arg8361287, i64 %rva8362719)           ; tail call
  ret void

else8365978:
  %retprim8360175 = call i64 @prim_void()                                            ; call prim_void
  %arg8361312 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362724 = add i64 0, 0                                                         ; quoted ()
  %rva8362723 = call i64 @prim_cons(i64 %retprim8360175, i64 %rva8362724)            ; call prim_cons
  %rva8362722 = call i64 @prim_cons(i64 %arg8361312, i64 %rva8362723)                ; call prim_cons
  %cloptr8366003 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366004 = getelementptr inbounds i64, i64* %cloptr8366003, i64 0             ; &cloptr8366003[0]
  %f8366006 = load i64, i64* %i0ptr8366004, align 8                                  ; load; *i0ptr8366004
  %fptr8366005 = inttoptr i64 %f8366006 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366005(i64 %cont8360169, i64 %rva8362722)          ; tail call
  ret void
}


define void @lam8364056(i64 %env8364057, i64 %rvp8362718) {
  %envptr8366007 = inttoptr i64 %env8364057 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366008 = getelementptr inbounds i64, i64* %envptr8366007, i64 3            ; &envptr8366007[3]
  %cont8360169 = load i64, i64* %envptr8366008, align 8                              ; load; *envptr8366008
  %envptr8366009 = inttoptr i64 %env8364057 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366010 = getelementptr inbounds i64, i64* %envptr8366009, i64 2            ; &envptr8366009[2]
  %Zgr$l = load i64, i64* %envptr8366010, align 8                                    ; load; *envptr8366010
  %envptr8366011 = inttoptr i64 %env8364057 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366012 = getelementptr inbounds i64, i64* %envptr8366011, i64 1            ; &envptr8366011[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366012, align 8                      ; load; *envptr8366012
  %_958360170 = call i64 @prim_car(i64 %rvp8362718)                                  ; call prim_car
  %rvp8362717 = call i64 @prim_cdr(i64 %rvp8362718)                                  ; call prim_cdr
  %VFU$_95t = call i64 @prim_car(i64 %rvp8362717)                                    ; call prim_car
  %na8362697 = call i64 @prim_cdr(i64 %rvp8362717)                                   ; call prim_cdr
  %a8360062 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360063 = call i64 @prim_car(i64 %a8360062)                                      ; call prim_car
  %a8360064 = call i64 @prim_procedure_63(i64 %a8360063)                             ; call prim_procedure_63
  %cmp8366013 = icmp eq i64 %a8360064, 15                                            ; false?
  br i1 %cmp8366013, label %else8366015, label %then8366014                          ; if

then8366014:
  %a8360065 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360066 = call i64 @prim_car(i64 %a8360065)                                      ; call prim_car
  %cloptr8366016 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366018 = getelementptr inbounds i64, i64* %cloptr8366016, i64 1              ; &eptr8366018[1]
  %eptr8366019 = getelementptr inbounds i64, i64* %cloptr8366016, i64 2              ; &eptr8366019[2]
  %eptr8366020 = getelementptr inbounds i64, i64* %cloptr8366016, i64 3              ; &eptr8366020[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366018                                  ; *eptr8366018 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366019                                                ; *eptr8366019 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366020                                          ; *eptr8366020 = %cont8360169
  %eptr8366017 = getelementptr inbounds i64, i64* %cloptr8366016, i64 0              ; &cloptr8366016[0]
  %f8366021 = ptrtoint void(i64,i64)* @lam8364046 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366021, i64* %eptr8366017                                             ; store fptr
  %arg8361293 = ptrtoint i64* %cloptr8366016 to i64                                  ; closure cast; i64* -> i64
  %rva8362706 = add i64 0, 0                                                         ; quoted ()
  %rva8362705 = call i64 @prim_cons(i64 %arg8361293, i64 %rva8362706)                ; call prim_cons
  %cloptr8366022 = inttoptr i64 %a8360066 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366023 = getelementptr inbounds i64, i64* %cloptr8366022, i64 0             ; &cloptr8366022[0]
  %f8366025 = load i64, i64* %i0ptr8366023, align 8                                  ; load; *i0ptr8366023
  %fptr8366024 = inttoptr i64 %f8366025 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366024(i64 %a8360066, i64 %rva8362705)             ; tail call
  ret void

else8366015:
  %arg8361301 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366026, i32 0, i32 0)); quoted string
  %retprim8360173 = call i64 @prim_halt(i64 %arg8361301)                             ; call prim_halt
  %cloptr8366027 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366029 = getelementptr inbounds i64, i64* %cloptr8366027, i64 1              ; &eptr8366029[1]
  %eptr8366030 = getelementptr inbounds i64, i64* %cloptr8366027, i64 2              ; &eptr8366030[2]
  %eptr8366031 = getelementptr inbounds i64, i64* %cloptr8366027, i64 3              ; &eptr8366031[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366029                                  ; *eptr8366029 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366030                                                ; *eptr8366030 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366031                                          ; *eptr8366031 = %cont8360169
  %eptr8366028 = getelementptr inbounds i64, i64* %cloptr8366027, i64 0              ; &cloptr8366027[0]
  %f8366032 = ptrtoint void(i64,i64)* @lam8364053 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366032, i64* %eptr8366028                                             ; store fptr
  %arg8361304 = ptrtoint i64* %cloptr8366027 to i64                                  ; closure cast; i64* -> i64
  %arg8361303 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362716 = add i64 0, 0                                                         ; quoted ()
  %rva8362715 = call i64 @prim_cons(i64 %retprim8360173, i64 %rva8362716)            ; call prim_cons
  %rva8362714 = call i64 @prim_cons(i64 %arg8361303, i64 %rva8362715)                ; call prim_cons
  %cloptr8366033 = inttoptr i64 %arg8361304 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366034 = getelementptr inbounds i64, i64* %cloptr8366033, i64 0             ; &cloptr8366033[0]
  %f8366036 = load i64, i64* %i0ptr8366034, align 8                                  ; load; *i0ptr8366034
  %fptr8366035 = inttoptr i64 %f8366036 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366035(i64 %arg8361304, i64 %rva8362714)           ; tail call
  ret void
}


define void @lam8364053(i64 %env8364054, i64 %rvp8362713) {
  %envptr8366037 = inttoptr i64 %env8364054 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366038 = getelementptr inbounds i64, i64* %envptr8366037, i64 3            ; &envptr8366037[3]
  %cont8360169 = load i64, i64* %envptr8366038, align 8                              ; load; *envptr8366038
  %envptr8366039 = inttoptr i64 %env8364054 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366040 = getelementptr inbounds i64, i64* %envptr8366039, i64 2            ; &envptr8366039[2]
  %Zgr$l = load i64, i64* %envptr8366040, align 8                                    ; load; *envptr8366040
  %envptr8366041 = inttoptr i64 %env8364054 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366042 = getelementptr inbounds i64, i64* %envptr8366041, i64 1            ; &envptr8366041[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366042, align 8                      ; load; *envptr8366042
  %_958360171 = call i64 @prim_car(i64 %rvp8362713)                                  ; call prim_car
  %rvp8362712 = call i64 @prim_cdr(i64 %rvp8362713)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362712)                                    ; call prim_car
  %na8362708 = call i64 @prim_cdr(i64 %rvp8362712)                                   ; call prim_cdr
  %arg8361306 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361306, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361309 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362711 = add i64 0, 0                                                         ; quoted ()
  %rva8362710 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362711)            ; call prim_cons
  %rva8362709 = call i64 @prim_cons(i64 %arg8361309, i64 %rva8362710)                ; call prim_cons
  %cloptr8366043 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366044 = getelementptr inbounds i64, i64* %cloptr8366043, i64 0             ; &cloptr8366043[0]
  %f8366046 = load i64, i64* %i0ptr8366044, align 8                                  ; load; *i0ptr8366044
  %fptr8366045 = inttoptr i64 %f8366046 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366045(i64 %cont8360169, i64 %rva8362709)          ; tail call
  ret void
}


define void @lam8364046(i64 %env8364047, i64 %rvp8362704) {
  %envptr8366047 = inttoptr i64 %env8364047 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366048 = getelementptr inbounds i64, i64* %envptr8366047, i64 3            ; &envptr8366047[3]
  %cont8360169 = load i64, i64* %envptr8366048, align 8                              ; load; *envptr8366048
  %envptr8366049 = inttoptr i64 %env8364047 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366050 = getelementptr inbounds i64, i64* %envptr8366049, i64 2            ; &envptr8366049[2]
  %Zgr$l = load i64, i64* %envptr8366050, align 8                                    ; load; *envptr8366050
  %envptr8366051 = inttoptr i64 %env8364047 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366052 = getelementptr inbounds i64, i64* %envptr8366051, i64 1            ; &envptr8366051[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366052, align 8                      ; load; *envptr8366052
  %_958360171 = call i64 @prim_car(i64 %rvp8362704)                                  ; call prim_car
  %rvp8362703 = call i64 @prim_cdr(i64 %rvp8362704)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362703)                                    ; call prim_car
  %na8362699 = call i64 @prim_cdr(i64 %rvp8362703)                                   ; call prim_cdr
  %arg8361296 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361296, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361299 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362702 = add i64 0, 0                                                         ; quoted ()
  %rva8362701 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362702)            ; call prim_cons
  %rva8362700 = call i64 @prim_cons(i64 %arg8361299, i64 %rva8362701)                ; call prim_cons
  %cloptr8366053 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366054 = getelementptr inbounds i64, i64* %cloptr8366053, i64 0             ; &cloptr8366053[0]
  %f8366056 = load i64, i64* %i0ptr8366054, align 8                                  ; load; *i0ptr8366054
  %fptr8366055 = inttoptr i64 %f8366056 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366055(i64 %cont8360169, i64 %rva8362700)          ; tail call
  ret void
}


define void @lam8364037(i64 %env8364038, i64 %rvp8362692) {
  %envptr8366057 = inttoptr i64 %env8364038 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366058 = getelementptr inbounds i64, i64* %envptr8366057, i64 3            ; &envptr8366057[3]
  %cont8360169 = load i64, i64* %envptr8366058, align 8                              ; load; *envptr8366058
  %envptr8366059 = inttoptr i64 %env8364038 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366060 = getelementptr inbounds i64, i64* %envptr8366059, i64 2            ; &envptr8366059[2]
  %Zgr$l = load i64, i64* %envptr8366060, align 8                                    ; load; *envptr8366060
  %envptr8366061 = inttoptr i64 %env8364038 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366062 = getelementptr inbounds i64, i64* %envptr8366061, i64 1            ; &envptr8366061[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366062, align 8                      ; load; *envptr8366062
  %_958360170 = call i64 @prim_car(i64 %rvp8362692)                                  ; call prim_car
  %rvp8362691 = call i64 @prim_cdr(i64 %rvp8362692)                                  ; call prim_cdr
  %VFU$_95t = call i64 @prim_car(i64 %rvp8362691)                                    ; call prim_car
  %na8362671 = call i64 @prim_cdr(i64 %rvp8362691)                                   ; call prim_cdr
  %a8360062 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360063 = call i64 @prim_car(i64 %a8360062)                                      ; call prim_car
  %a8360064 = call i64 @prim_procedure_63(i64 %a8360063)                             ; call prim_procedure_63
  %cmp8366063 = icmp eq i64 %a8360064, 15                                            ; false?
  br i1 %cmp8366063, label %else8366065, label %then8366064                          ; if

then8366064:
  %a8360065 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360066 = call i64 @prim_car(i64 %a8360065)                                      ; call prim_car
  %cloptr8366066 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366068 = getelementptr inbounds i64, i64* %cloptr8366066, i64 1              ; &eptr8366068[1]
  %eptr8366069 = getelementptr inbounds i64, i64* %cloptr8366066, i64 2              ; &eptr8366069[2]
  %eptr8366070 = getelementptr inbounds i64, i64* %cloptr8366066, i64 3              ; &eptr8366070[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366068                                  ; *eptr8366068 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366069                                                ; *eptr8366069 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366070                                          ; *eptr8366070 = %cont8360169
  %eptr8366067 = getelementptr inbounds i64, i64* %cloptr8366066, i64 0              ; &cloptr8366066[0]
  %f8366071 = ptrtoint void(i64,i64)* @lam8364027 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366071, i64* %eptr8366067                                             ; store fptr
  %arg8361266 = ptrtoint i64* %cloptr8366066 to i64                                  ; closure cast; i64* -> i64
  %rva8362680 = add i64 0, 0                                                         ; quoted ()
  %rva8362679 = call i64 @prim_cons(i64 %arg8361266, i64 %rva8362680)                ; call prim_cons
  %cloptr8366072 = inttoptr i64 %a8360066 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366073 = getelementptr inbounds i64, i64* %cloptr8366072, i64 0             ; &cloptr8366072[0]
  %f8366075 = load i64, i64* %i0ptr8366073, align 8                                  ; load; *i0ptr8366073
  %fptr8366074 = inttoptr i64 %f8366075 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366074(i64 %a8360066, i64 %rva8362679)             ; tail call
  ret void

else8366065:
  %arg8361274 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366076, i32 0, i32 0)); quoted string
  %retprim8360173 = call i64 @prim_halt(i64 %arg8361274)                             ; call prim_halt
  %cloptr8366077 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366079 = getelementptr inbounds i64, i64* %cloptr8366077, i64 1              ; &eptr8366079[1]
  %eptr8366080 = getelementptr inbounds i64, i64* %cloptr8366077, i64 2              ; &eptr8366080[2]
  %eptr8366081 = getelementptr inbounds i64, i64* %cloptr8366077, i64 3              ; &eptr8366081[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366079                                  ; *eptr8366079 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366080                                                ; *eptr8366080 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366081                                          ; *eptr8366081 = %cont8360169
  %eptr8366078 = getelementptr inbounds i64, i64* %cloptr8366077, i64 0              ; &cloptr8366077[0]
  %f8366082 = ptrtoint void(i64,i64)* @lam8364034 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366082, i64* %eptr8366078                                             ; store fptr
  %arg8361277 = ptrtoint i64* %cloptr8366077 to i64                                  ; closure cast; i64* -> i64
  %arg8361276 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362690 = add i64 0, 0                                                         ; quoted ()
  %rva8362689 = call i64 @prim_cons(i64 %retprim8360173, i64 %rva8362690)            ; call prim_cons
  %rva8362688 = call i64 @prim_cons(i64 %arg8361276, i64 %rva8362689)                ; call prim_cons
  %cloptr8366083 = inttoptr i64 %arg8361277 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366084 = getelementptr inbounds i64, i64* %cloptr8366083, i64 0             ; &cloptr8366083[0]
  %f8366086 = load i64, i64* %i0ptr8366084, align 8                                  ; load; *i0ptr8366084
  %fptr8366085 = inttoptr i64 %f8366086 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366085(i64 %arg8361277, i64 %rva8362688)           ; tail call
  ret void
}


define void @lam8364034(i64 %env8364035, i64 %rvp8362687) {
  %envptr8366087 = inttoptr i64 %env8364035 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366088 = getelementptr inbounds i64, i64* %envptr8366087, i64 3            ; &envptr8366087[3]
  %cont8360169 = load i64, i64* %envptr8366088, align 8                              ; load; *envptr8366088
  %envptr8366089 = inttoptr i64 %env8364035 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366090 = getelementptr inbounds i64, i64* %envptr8366089, i64 2            ; &envptr8366089[2]
  %Zgr$l = load i64, i64* %envptr8366090, align 8                                    ; load; *envptr8366090
  %envptr8366091 = inttoptr i64 %env8364035 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366092 = getelementptr inbounds i64, i64* %envptr8366091, i64 1            ; &envptr8366091[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366092, align 8                      ; load; *envptr8366092
  %_958360171 = call i64 @prim_car(i64 %rvp8362687)                                  ; call prim_car
  %rvp8362686 = call i64 @prim_cdr(i64 %rvp8362687)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362686)                                    ; call prim_car
  %na8362682 = call i64 @prim_cdr(i64 %rvp8362686)                                   ; call prim_cdr
  %arg8361279 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361279, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361282 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362685 = add i64 0, 0                                                         ; quoted ()
  %rva8362684 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362685)            ; call prim_cons
  %rva8362683 = call i64 @prim_cons(i64 %arg8361282, i64 %rva8362684)                ; call prim_cons
  %cloptr8366093 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366094 = getelementptr inbounds i64, i64* %cloptr8366093, i64 0             ; &cloptr8366093[0]
  %f8366096 = load i64, i64* %i0ptr8366094, align 8                                  ; load; *i0ptr8366094
  %fptr8366095 = inttoptr i64 %f8366096 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366095(i64 %cont8360169, i64 %rva8362683)          ; tail call
  ret void
}


define void @lam8364027(i64 %env8364028, i64 %rvp8362678) {
  %envptr8366097 = inttoptr i64 %env8364028 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366098 = getelementptr inbounds i64, i64* %envptr8366097, i64 3            ; &envptr8366097[3]
  %cont8360169 = load i64, i64* %envptr8366098, align 8                              ; load; *envptr8366098
  %envptr8366099 = inttoptr i64 %env8364028 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366100 = getelementptr inbounds i64, i64* %envptr8366099, i64 2            ; &envptr8366099[2]
  %Zgr$l = load i64, i64* %envptr8366100, align 8                                    ; load; *envptr8366100
  %envptr8366101 = inttoptr i64 %env8364028 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366102 = getelementptr inbounds i64, i64* %envptr8366101, i64 1            ; &envptr8366101[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366102, align 8                      ; load; *envptr8366102
  %_958360171 = call i64 @prim_car(i64 %rvp8362678)                                  ; call prim_car
  %rvp8362677 = call i64 @prim_cdr(i64 %rvp8362678)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362677)                                    ; call prim_car
  %na8362673 = call i64 @prim_cdr(i64 %rvp8362677)                                   ; call prim_cdr
  %arg8361269 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361269, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361272 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362676 = add i64 0, 0                                                         ; quoted ()
  %rva8362675 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362676)            ; call prim_cons
  %rva8362674 = call i64 @prim_cons(i64 %arg8361272, i64 %rva8362675)                ; call prim_cons
  %cloptr8366103 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366104 = getelementptr inbounds i64, i64* %cloptr8366103, i64 0             ; &cloptr8366103[0]
  %f8366106 = load i64, i64* %i0ptr8366104, align 8                                  ; load; *i0ptr8366104
  %fptr8366105 = inttoptr i64 %f8366106 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366105(i64 %cont8360169, i64 %rva8362674)          ; tail call
  ret void
}


define void @lam8364006(i64 %env8364007, i64 %rvp8362655) {
  %envptr8366107 = inttoptr i64 %env8364007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366108 = getelementptr inbounds i64, i64* %envptr8366107, i64 4            ; &envptr8366107[4]
  %cont8360165 = load i64, i64* %envptr8366108, align 8                              ; load; *envptr8366108
  %envptr8366109 = inttoptr i64 %env8364007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366110 = getelementptr inbounds i64, i64* %envptr8366109, i64 3            ; &envptr8366109[3]
  %kV4$new = load i64, i64* %envptr8366110, align 8                                  ; load; *envptr8366110
  %envptr8366111 = inttoptr i64 %env8364007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366112 = getelementptr inbounds i64, i64* %envptr8366111, i64 2            ; &envptr8366111[2]
  %aCS$tail = load i64, i64* %envptr8366112, align 8                                 ; load; *envptr8366112
  %envptr8366113 = inttoptr i64 %env8364007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366114 = getelementptr inbounds i64, i64* %envptr8366113, i64 1            ; &envptr8366113[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366114, align 8                      ; load; *envptr8366114
  %_958360167 = call i64 @prim_car(i64 %rvp8362655)                                  ; call prim_car
  %rvp8362654 = call i64 @prim_cdr(i64 %rvp8362655)                                  ; call prim_cdr
  %iIP$_95t = call i64 @prim_car(i64 %rvp8362654)                                    ; call prim_car
  %na8362572 = call i64 @prim_cdr(i64 %rvp8362654)                                   ; call prim_cdr
  %cloptr8366115 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8366116 = getelementptr inbounds i64, i64* %cloptr8366115, i64 0              ; &cloptr8366115[0]
  %f8366117 = ptrtoint void(i64,i64)* @lam8364004 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366117, i64* %eptr8366116                                             ; store fptr
  %arg8361142 = ptrtoint i64* %cloptr8366115 to i64                                  ; closure cast; i64* -> i64
  %cloptr8366118 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366120 = getelementptr inbounds i64, i64* %cloptr8366118, i64 1              ; &eptr8366120[1]
  %eptr8366121 = getelementptr inbounds i64, i64* %cloptr8366118, i64 2              ; &eptr8366121[2]
  %eptr8366122 = getelementptr inbounds i64, i64* %cloptr8366118, i64 3              ; &eptr8366122[3]
  %eptr8366123 = getelementptr inbounds i64, i64* %cloptr8366118, i64 4              ; &eptr8366123[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366120                                  ; *eptr8366120 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366121                                             ; *eptr8366121 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366122                                              ; *eptr8366122 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366123                                          ; *eptr8366123 = %cont8360165
  %eptr8366119 = getelementptr inbounds i64, i64* %cloptr8366118, i64 0              ; &cloptr8366118[0]
  %f8366124 = ptrtoint void(i64,i64)* @lam8364000 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366124, i64* %eptr8366119                                             ; store fptr
  %arg8361141 = ptrtoint i64* %cloptr8366118 to i64                                  ; closure cast; i64* -> i64
  %rva8362653 = add i64 0, 0                                                         ; quoted ()
  %rva8362652 = call i64 @prim_cons(i64 %arg8361141, i64 %rva8362653)                ; call prim_cons
  %cloptr8366125 = inttoptr i64 %arg8361142 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366126 = getelementptr inbounds i64, i64* %cloptr8366125, i64 0             ; &cloptr8366125[0]
  %f8366128 = load i64, i64* %i0ptr8366126, align 8                                  ; load; *i0ptr8366126
  %fptr8366127 = inttoptr i64 %f8366128 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366127(i64 %arg8361142, i64 %rva8362652)           ; tail call
  ret void
}


define void @lam8364004(i64 %env8364005, i64 %JCH$lst8360180) {
  %cont8360179 = call i64 @prim_car(i64 %JCH$lst8360180)                             ; call prim_car
  %JCH$lst = call i64 @prim_cdr(i64 %JCH$lst8360180)                                 ; call prim_cdr
  %arg8361146 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362575 = add i64 0, 0                                                         ; quoted ()
  %rva8362574 = call i64 @prim_cons(i64 %JCH$lst, i64 %rva8362575)                   ; call prim_cons
  %rva8362573 = call i64 @prim_cons(i64 %arg8361146, i64 %rva8362574)                ; call prim_cons
  %cloptr8366129 = inttoptr i64 %cont8360179 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366130 = getelementptr inbounds i64, i64* %cloptr8366129, i64 0             ; &cloptr8366129[0]
  %f8366132 = load i64, i64* %i0ptr8366130, align 8                                  ; load; *i0ptr8366130
  %fptr8366131 = inttoptr i64 %f8366132 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366131(i64 %cont8360179, i64 %rva8362573)          ; tail call
  ret void
}


define void @lam8364000(i64 %env8364001, i64 %rvp8362651) {
  %envptr8366133 = inttoptr i64 %env8364001 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366134 = getelementptr inbounds i64, i64* %envptr8366133, i64 4            ; &envptr8366133[4]
  %cont8360165 = load i64, i64* %envptr8366134, align 8                              ; load; *envptr8366134
  %envptr8366135 = inttoptr i64 %env8364001 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366136 = getelementptr inbounds i64, i64* %envptr8366135, i64 3            ; &envptr8366135[3]
  %kV4$new = load i64, i64* %envptr8366136, align 8                                  ; load; *envptr8366136
  %envptr8366137 = inttoptr i64 %env8364001 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366138 = getelementptr inbounds i64, i64* %envptr8366137, i64 2            ; &envptr8366137[2]
  %aCS$tail = load i64, i64* %envptr8366138, align 8                                 ; load; *envptr8366138
  %envptr8366139 = inttoptr i64 %env8364001 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366140 = getelementptr inbounds i64, i64* %envptr8366139, i64 1            ; &envptr8366139[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366140, align 8                      ; load; *envptr8366140
  %_958360177 = call i64 @prim_car(i64 %rvp8362651)                                  ; call prim_car
  %rvp8362650 = call i64 @prim_cdr(i64 %rvp8362651)                                  ; call prim_cdr
  %a8360055 = call i64 @prim_car(i64 %rvp8362650)                                    ; call prim_car
  %na8362577 = call i64 @prim_cdr(i64 %rvp8362650)                                   ; call prim_cdr
  %arg8361149 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360178 = call i64 @prim_make_45vector(i64 %arg8361149, i64 %a8360055)     ; call prim_make_45vector
  %cloptr8366141 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366143 = getelementptr inbounds i64, i64* %cloptr8366141, i64 1              ; &eptr8366143[1]
  %eptr8366144 = getelementptr inbounds i64, i64* %cloptr8366141, i64 2              ; &eptr8366144[2]
  %eptr8366145 = getelementptr inbounds i64, i64* %cloptr8366141, i64 3              ; &eptr8366145[3]
  %eptr8366146 = getelementptr inbounds i64, i64* %cloptr8366141, i64 4              ; &eptr8366146[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366143                                  ; *eptr8366143 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366144                                             ; *eptr8366144 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366145                                              ; *eptr8366145 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366146                                          ; *eptr8366146 = %cont8360165
  %eptr8366142 = getelementptr inbounds i64, i64* %cloptr8366141, i64 0              ; &cloptr8366141[0]
  %f8366147 = ptrtoint void(i64,i64)* @lam8363997 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366147, i64* %eptr8366142                                             ; store fptr
  %arg8361152 = ptrtoint i64* %cloptr8366141 to i64                                  ; closure cast; i64* -> i64
  %arg8361151 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362649 = add i64 0, 0                                                         ; quoted ()
  %rva8362648 = call i64 @prim_cons(i64 %retprim8360178, i64 %rva8362649)            ; call prim_cons
  %rva8362647 = call i64 @prim_cons(i64 %arg8361151, i64 %rva8362648)                ; call prim_cons
  %cloptr8366148 = inttoptr i64 %arg8361152 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366149 = getelementptr inbounds i64, i64* %cloptr8366148, i64 0             ; &cloptr8366148[0]
  %f8366151 = load i64, i64* %i0ptr8366149, align 8                                  ; load; *i0ptr8366149
  %fptr8366150 = inttoptr i64 %f8366151 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366150(i64 %arg8361152, i64 %rva8362647)           ; tail call
  ret void
}


define void @lam8363997(i64 %env8363998, i64 %rvp8362646) {
  %envptr8366152 = inttoptr i64 %env8363998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366153 = getelementptr inbounds i64, i64* %envptr8366152, i64 4            ; &envptr8366152[4]
  %cont8360165 = load i64, i64* %envptr8366153, align 8                              ; load; *envptr8366153
  %envptr8366154 = inttoptr i64 %env8363998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366155 = getelementptr inbounds i64, i64* %envptr8366154, i64 3            ; &envptr8366154[3]
  %kV4$new = load i64, i64* %envptr8366155, align 8                                  ; load; *envptr8366155
  %envptr8366156 = inttoptr i64 %env8363998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366157 = getelementptr inbounds i64, i64* %envptr8366156, i64 2            ; &envptr8366156[2]
  %aCS$tail = load i64, i64* %envptr8366157, align 8                                 ; load; *envptr8366157
  %envptr8366158 = inttoptr i64 %env8363998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366159 = getelementptr inbounds i64, i64* %envptr8366158, i64 1            ; &envptr8366158[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366159, align 8                      ; load; *envptr8366159
  %_958360168 = call i64 @prim_car(i64 %rvp8362646)                                  ; call prim_car
  %rvp8362645 = call i64 @prim_cdr(i64 %rvp8362646)                                  ; call prim_cdr
  %prl$f = call i64 @prim_car(i64 %rvp8362645)                                       ; call prim_car
  %na8362579 = call i64 @prim_cdr(i64 %rvp8362645)                                   ; call prim_cdr
  %cloptr8366160 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366162 = getelementptr inbounds i64, i64* %cloptr8366160, i64 1              ; &eptr8366162[1]
  %eptr8366163 = getelementptr inbounds i64, i64* %cloptr8366160, i64 2              ; &eptr8366163[2]
  %eptr8366164 = getelementptr inbounds i64, i64* %cloptr8366160, i64 3              ; &eptr8366164[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366162                                  ; *eptr8366162 = %Z9D$_37wind_45stack
  store i64 %prl$f, i64* %eptr8366163                                                ; *eptr8366163 = %prl$f
  store i64 %aCS$tail, i64* %eptr8366164                                             ; *eptr8366164 = %aCS$tail
  %eptr8366161 = getelementptr inbounds i64, i64* %cloptr8366160, i64 0              ; &cloptr8366160[0]
  %f8366165 = ptrtoint void(i64,i64)* @lam8363995 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366165, i64* %eptr8366161                                             ; store fptr
  %mtP$f8359930 = ptrtoint i64* %cloptr8366160 to i64                                ; closure cast; i64* -> i64
  %arg8361219 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %O4n$_95t = call i64 @prim_vector_45set_33(i64 %prl$f, i64 %arg8361219, i64 %mtP$f8359930); call prim_vector_45set_33
  %arg8361221 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360067 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361221)               ; call prim_vector_45ref
  %a8360068 = call i64 @prim_procedure_63(i64 %a8360067)                             ; call prim_procedure_63
  %cmp8366166 = icmp eq i64 %a8360068, 15                                            ; false?
  br i1 %cmp8366166, label %else8366168, label %then8366167                          ; if

then8366167:
  %arg8361224 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360069 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361224)               ; call prim_vector_45ref
  %rva8362641 = add i64 0, 0                                                         ; quoted ()
  %rva8362640 = call i64 @prim_cons(i64 %kV4$new, i64 %rva8362641)                   ; call prim_cons
  %rva8362639 = call i64 @prim_cons(i64 %cont8360165, i64 %rva8362640)               ; call prim_cons
  %cloptr8366169 = inttoptr i64 %a8360069 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366170 = getelementptr inbounds i64, i64* %cloptr8366169, i64 0             ; &cloptr8366169[0]
  %f8366172 = load i64, i64* %i0ptr8366170, align 8                                  ; load; *i0ptr8366170
  %fptr8366171 = inttoptr i64 %f8366172 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366171(i64 %a8360069, i64 %rva8362639)             ; tail call
  ret void

else8366168:
  %arg8361229 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366173, i32 0, i32 0)); quoted string
  %retprim8360176 = call i64 @prim_halt(i64 %arg8361229)                             ; call prim_halt
  %arg8361231 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362644 = add i64 0, 0                                                         ; quoted ()
  %rva8362643 = call i64 @prim_cons(i64 %retprim8360176, i64 %rva8362644)            ; call prim_cons
  %rva8362642 = call i64 @prim_cons(i64 %arg8361231, i64 %rva8362643)                ; call prim_cons
  %cloptr8366174 = inttoptr i64 %cont8360165 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366175 = getelementptr inbounds i64, i64* %cloptr8366174, i64 0             ; &cloptr8366174[0]
  %f8366177 = load i64, i64* %i0ptr8366175, align 8                                  ; load; *i0ptr8366175
  %fptr8366176 = inttoptr i64 %f8366177 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366176(i64 %cont8360165, i64 %rva8362642)          ; tail call
  ret void
}


define void @lam8363995(i64 %env8363996, i64 %rvp8362638) {
  %envptr8366178 = inttoptr i64 %env8363996 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366179 = getelementptr inbounds i64, i64* %envptr8366178, i64 3            ; &envptr8366178[3]
  %aCS$tail = load i64, i64* %envptr8366179, align 8                                 ; load; *envptr8366179
  %envptr8366180 = inttoptr i64 %env8363996 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366181 = getelementptr inbounds i64, i64* %envptr8366180, i64 2            ; &envptr8366180[2]
  %prl$f = load i64, i64* %envptr8366181, align 8                                    ; load; *envptr8366181
  %envptr8366182 = inttoptr i64 %env8363996 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366183 = getelementptr inbounds i64, i64* %envptr8366182, i64 1            ; &envptr8366182[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366183, align 8                      ; load; *envptr8366183
  %cont8360169 = call i64 @prim_car(i64 %rvp8362638)                                 ; call prim_car
  %rvp8362637 = call i64 @prim_cdr(i64 %rvp8362638)                                  ; call prim_cdr
  %Zgr$l = call i64 @prim_car(i64 %rvp8362637)                                       ; call prim_car
  %na8362581 = call i64 @prim_cdr(i64 %rvp8362637)                                   ; call prim_cdr
  %a8360056 = call i64 @prim_eq_63(i64 %Zgr$l, i64 %aCS$tail)                        ; call prim_eq_63
  %a8360057 = call i64 @prim_not(i64 %a8360056)                                      ; call prim_not
  %cmp8366184 = icmp eq i64 %a8360057, 15                                            ; false?
  br i1 %cmp8366184, label %else8366186, label %then8366185                          ; if

then8366185:
  %arg8361156 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360058 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361156)               ; call prim_vector_45ref
  %a8360059 = call i64 @prim_procedure_63(i64 %a8360058)                             ; call prim_procedure_63
  %cmp8366187 = icmp eq i64 %a8360059, 15                                            ; false?
  br i1 %cmp8366187, label %else8366189, label %then8366188                          ; if

then8366188:
  %arg8361159 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360060 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361159)               ; call prim_vector_45ref
  %a8360061 = call i64 @prim_cdr(i64 %Zgr$l)                                         ; call prim_cdr
  %cloptr8366190 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366192 = getelementptr inbounds i64, i64* %cloptr8366190, i64 1              ; &eptr8366192[1]
  %eptr8366193 = getelementptr inbounds i64, i64* %cloptr8366190, i64 2              ; &eptr8366193[2]
  %eptr8366194 = getelementptr inbounds i64, i64* %cloptr8366190, i64 3              ; &eptr8366194[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366192                                  ; *eptr8366192 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366193                                                ; *eptr8366193 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366194                                          ; *eptr8366194 = %cont8360169
  %eptr8366191 = getelementptr inbounds i64, i64* %cloptr8366190, i64 0              ; &cloptr8366190[0]
  %f8366195 = ptrtoint void(i64,i64)* @lam8363970 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366195, i64* %eptr8366191                                             ; store fptr
  %arg8361163 = ptrtoint i64* %cloptr8366190 to i64                                  ; closure cast; i64* -> i64
  %rva8362607 = add i64 0, 0                                                         ; quoted ()
  %rva8362606 = call i64 @prim_cons(i64 %a8360061, i64 %rva8362607)                  ; call prim_cons
  %rva8362605 = call i64 @prim_cons(i64 %arg8361163, i64 %rva8362606)                ; call prim_cons
  %cloptr8366196 = inttoptr i64 %a8360060 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366197 = getelementptr inbounds i64, i64* %cloptr8366196, i64 0             ; &cloptr8366196[0]
  %f8366199 = load i64, i64* %i0ptr8366197, align 8                                  ; load; *i0ptr8366197
  %fptr8366198 = inttoptr i64 %f8366199 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366198(i64 %a8360060, i64 %rva8362605)             ; tail call
  ret void

else8366189:
  %arg8361188 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366200, i32 0, i32 0)); quoted string
  %retprim8360174 = call i64 @prim_halt(i64 %arg8361188)                             ; call prim_halt
  %cloptr8366201 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366203 = getelementptr inbounds i64, i64* %cloptr8366201, i64 1              ; &eptr8366203[1]
  %eptr8366204 = getelementptr inbounds i64, i64* %cloptr8366201, i64 2              ; &eptr8366204[2]
  %eptr8366205 = getelementptr inbounds i64, i64* %cloptr8366201, i64 3              ; &eptr8366205[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366203                                  ; *eptr8366203 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366204                                                ; *eptr8366204 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366205                                          ; *eptr8366205 = %cont8360169
  %eptr8366202 = getelementptr inbounds i64, i64* %cloptr8366201, i64 0              ; &cloptr8366201[0]
  %f8366206 = ptrtoint void(i64,i64)* @lam8363989 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366206, i64* %eptr8366202                                             ; store fptr
  %arg8361191 = ptrtoint i64* %cloptr8366201 to i64                                  ; closure cast; i64* -> i64
  %arg8361190 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362633 = add i64 0, 0                                                         ; quoted ()
  %rva8362632 = call i64 @prim_cons(i64 %retprim8360174, i64 %rva8362633)            ; call prim_cons
  %rva8362631 = call i64 @prim_cons(i64 %arg8361190, i64 %rva8362632)                ; call prim_cons
  %cloptr8366207 = inttoptr i64 %arg8361191 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366208 = getelementptr inbounds i64, i64* %cloptr8366207, i64 0             ; &cloptr8366207[0]
  %f8366210 = load i64, i64* %i0ptr8366208, align 8                                  ; load; *i0ptr8366208
  %fptr8366209 = inttoptr i64 %f8366210 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366209(i64 %arg8361191, i64 %rva8362631)           ; tail call
  ret void

else8366186:
  %retprim8360175 = call i64 @prim_void()                                            ; call prim_void
  %arg8361216 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362636 = add i64 0, 0                                                         ; quoted ()
  %rva8362635 = call i64 @prim_cons(i64 %retprim8360175, i64 %rva8362636)            ; call prim_cons
  %rva8362634 = call i64 @prim_cons(i64 %arg8361216, i64 %rva8362635)                ; call prim_cons
  %cloptr8366211 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366212 = getelementptr inbounds i64, i64* %cloptr8366211, i64 0             ; &cloptr8366211[0]
  %f8366214 = load i64, i64* %i0ptr8366212, align 8                                  ; load; *i0ptr8366212
  %fptr8366213 = inttoptr i64 %f8366214 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366213(i64 %cont8360169, i64 %rva8362634)          ; tail call
  ret void
}


define void @lam8363989(i64 %env8363990, i64 %rvp8362630) {
  %envptr8366215 = inttoptr i64 %env8363990 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366216 = getelementptr inbounds i64, i64* %envptr8366215, i64 3            ; &envptr8366215[3]
  %cont8360169 = load i64, i64* %envptr8366216, align 8                              ; load; *envptr8366216
  %envptr8366217 = inttoptr i64 %env8363990 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366218 = getelementptr inbounds i64, i64* %envptr8366217, i64 2            ; &envptr8366217[2]
  %Zgr$l = load i64, i64* %envptr8366218, align 8                                    ; load; *envptr8366218
  %envptr8366219 = inttoptr i64 %env8363990 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366220 = getelementptr inbounds i64, i64* %envptr8366219, i64 1            ; &envptr8366219[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366220, align 8                      ; load; *envptr8366220
  %_958360170 = call i64 @prim_car(i64 %rvp8362630)                                  ; call prim_car
  %rvp8362629 = call i64 @prim_cdr(i64 %rvp8362630)                                  ; call prim_cdr
  %VFU$_95t = call i64 @prim_car(i64 %rvp8362629)                                    ; call prim_car
  %na8362609 = call i64 @prim_cdr(i64 %rvp8362629)                                   ; call prim_cdr
  %a8360062 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360063 = call i64 @prim_car(i64 %a8360062)                                      ; call prim_car
  %a8360064 = call i64 @prim_procedure_63(i64 %a8360063)                             ; call prim_procedure_63
  %cmp8366221 = icmp eq i64 %a8360064, 15                                            ; false?
  br i1 %cmp8366221, label %else8366223, label %then8366222                          ; if

then8366222:
  %a8360065 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360066 = call i64 @prim_car(i64 %a8360065)                                      ; call prim_car
  %cloptr8366224 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366226 = getelementptr inbounds i64, i64* %cloptr8366224, i64 1              ; &eptr8366226[1]
  %eptr8366227 = getelementptr inbounds i64, i64* %cloptr8366224, i64 2              ; &eptr8366227[2]
  %eptr8366228 = getelementptr inbounds i64, i64* %cloptr8366224, i64 3              ; &eptr8366228[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366226                                  ; *eptr8366226 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366227                                                ; *eptr8366227 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366228                                          ; *eptr8366228 = %cont8360169
  %eptr8366225 = getelementptr inbounds i64, i64* %cloptr8366224, i64 0              ; &cloptr8366224[0]
  %f8366229 = ptrtoint void(i64,i64)* @lam8363979 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366229, i64* %eptr8366225                                             ; store fptr
  %arg8361197 = ptrtoint i64* %cloptr8366224 to i64                                  ; closure cast; i64* -> i64
  %rva8362618 = add i64 0, 0                                                         ; quoted ()
  %rva8362617 = call i64 @prim_cons(i64 %arg8361197, i64 %rva8362618)                ; call prim_cons
  %cloptr8366230 = inttoptr i64 %a8360066 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366231 = getelementptr inbounds i64, i64* %cloptr8366230, i64 0             ; &cloptr8366230[0]
  %f8366233 = load i64, i64* %i0ptr8366231, align 8                                  ; load; *i0ptr8366231
  %fptr8366232 = inttoptr i64 %f8366233 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366232(i64 %a8360066, i64 %rva8362617)             ; tail call
  ret void

else8366223:
  %arg8361205 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366234, i32 0, i32 0)); quoted string
  %retprim8360173 = call i64 @prim_halt(i64 %arg8361205)                             ; call prim_halt
  %cloptr8366235 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366237 = getelementptr inbounds i64, i64* %cloptr8366235, i64 1              ; &eptr8366237[1]
  %eptr8366238 = getelementptr inbounds i64, i64* %cloptr8366235, i64 2              ; &eptr8366238[2]
  %eptr8366239 = getelementptr inbounds i64, i64* %cloptr8366235, i64 3              ; &eptr8366239[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366237                                  ; *eptr8366237 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366238                                                ; *eptr8366238 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366239                                          ; *eptr8366239 = %cont8360169
  %eptr8366236 = getelementptr inbounds i64, i64* %cloptr8366235, i64 0              ; &cloptr8366235[0]
  %f8366240 = ptrtoint void(i64,i64)* @lam8363986 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366240, i64* %eptr8366236                                             ; store fptr
  %arg8361208 = ptrtoint i64* %cloptr8366235 to i64                                  ; closure cast; i64* -> i64
  %arg8361207 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362628 = add i64 0, 0                                                         ; quoted ()
  %rva8362627 = call i64 @prim_cons(i64 %retprim8360173, i64 %rva8362628)            ; call prim_cons
  %rva8362626 = call i64 @prim_cons(i64 %arg8361207, i64 %rva8362627)                ; call prim_cons
  %cloptr8366241 = inttoptr i64 %arg8361208 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366242 = getelementptr inbounds i64, i64* %cloptr8366241, i64 0             ; &cloptr8366241[0]
  %f8366244 = load i64, i64* %i0ptr8366242, align 8                                  ; load; *i0ptr8366242
  %fptr8366243 = inttoptr i64 %f8366244 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366243(i64 %arg8361208, i64 %rva8362626)           ; tail call
  ret void
}


define void @lam8363986(i64 %env8363987, i64 %rvp8362625) {
  %envptr8366245 = inttoptr i64 %env8363987 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366246 = getelementptr inbounds i64, i64* %envptr8366245, i64 3            ; &envptr8366245[3]
  %cont8360169 = load i64, i64* %envptr8366246, align 8                              ; load; *envptr8366246
  %envptr8366247 = inttoptr i64 %env8363987 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366248 = getelementptr inbounds i64, i64* %envptr8366247, i64 2            ; &envptr8366247[2]
  %Zgr$l = load i64, i64* %envptr8366248, align 8                                    ; load; *envptr8366248
  %envptr8366249 = inttoptr i64 %env8363987 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366250 = getelementptr inbounds i64, i64* %envptr8366249, i64 1            ; &envptr8366249[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366250, align 8                      ; load; *envptr8366250
  %_958360171 = call i64 @prim_car(i64 %rvp8362625)                                  ; call prim_car
  %rvp8362624 = call i64 @prim_cdr(i64 %rvp8362625)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362624)                                    ; call prim_car
  %na8362620 = call i64 @prim_cdr(i64 %rvp8362624)                                   ; call prim_cdr
  %arg8361210 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361210, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361213 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362623 = add i64 0, 0                                                         ; quoted ()
  %rva8362622 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362623)            ; call prim_cons
  %rva8362621 = call i64 @prim_cons(i64 %arg8361213, i64 %rva8362622)                ; call prim_cons
  %cloptr8366251 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366252 = getelementptr inbounds i64, i64* %cloptr8366251, i64 0             ; &cloptr8366251[0]
  %f8366254 = load i64, i64* %i0ptr8366252, align 8                                  ; load; *i0ptr8366252
  %fptr8366253 = inttoptr i64 %f8366254 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366253(i64 %cont8360169, i64 %rva8362621)          ; tail call
  ret void
}


define void @lam8363979(i64 %env8363980, i64 %rvp8362616) {
  %envptr8366255 = inttoptr i64 %env8363980 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366256 = getelementptr inbounds i64, i64* %envptr8366255, i64 3            ; &envptr8366255[3]
  %cont8360169 = load i64, i64* %envptr8366256, align 8                              ; load; *envptr8366256
  %envptr8366257 = inttoptr i64 %env8363980 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366258 = getelementptr inbounds i64, i64* %envptr8366257, i64 2            ; &envptr8366257[2]
  %Zgr$l = load i64, i64* %envptr8366258, align 8                                    ; load; *envptr8366258
  %envptr8366259 = inttoptr i64 %env8363980 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366260 = getelementptr inbounds i64, i64* %envptr8366259, i64 1            ; &envptr8366259[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366260, align 8                      ; load; *envptr8366260
  %_958360171 = call i64 @prim_car(i64 %rvp8362616)                                  ; call prim_car
  %rvp8362615 = call i64 @prim_cdr(i64 %rvp8362616)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362615)                                    ; call prim_car
  %na8362611 = call i64 @prim_cdr(i64 %rvp8362615)                                   ; call prim_cdr
  %arg8361200 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361200, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361203 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362614 = add i64 0, 0                                                         ; quoted ()
  %rva8362613 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362614)            ; call prim_cons
  %rva8362612 = call i64 @prim_cons(i64 %arg8361203, i64 %rva8362613)                ; call prim_cons
  %cloptr8366261 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366262 = getelementptr inbounds i64, i64* %cloptr8366261, i64 0             ; &cloptr8366261[0]
  %f8366264 = load i64, i64* %i0ptr8366262, align 8                                  ; load; *i0ptr8366262
  %fptr8366263 = inttoptr i64 %f8366264 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366263(i64 %cont8360169, i64 %rva8362612)          ; tail call
  ret void
}


define void @lam8363970(i64 %env8363971, i64 %rvp8362604) {
  %envptr8366265 = inttoptr i64 %env8363971 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366266 = getelementptr inbounds i64, i64* %envptr8366265, i64 3            ; &envptr8366265[3]
  %cont8360169 = load i64, i64* %envptr8366266, align 8                              ; load; *envptr8366266
  %envptr8366267 = inttoptr i64 %env8363971 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366268 = getelementptr inbounds i64, i64* %envptr8366267, i64 2            ; &envptr8366267[2]
  %Zgr$l = load i64, i64* %envptr8366268, align 8                                    ; load; *envptr8366268
  %envptr8366269 = inttoptr i64 %env8363971 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366270 = getelementptr inbounds i64, i64* %envptr8366269, i64 1            ; &envptr8366269[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366270, align 8                      ; load; *envptr8366270
  %_958360170 = call i64 @prim_car(i64 %rvp8362604)                                  ; call prim_car
  %rvp8362603 = call i64 @prim_cdr(i64 %rvp8362604)                                  ; call prim_cdr
  %VFU$_95t = call i64 @prim_car(i64 %rvp8362603)                                    ; call prim_car
  %na8362583 = call i64 @prim_cdr(i64 %rvp8362603)                                   ; call prim_cdr
  %a8360062 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360063 = call i64 @prim_car(i64 %a8360062)                                      ; call prim_car
  %a8360064 = call i64 @prim_procedure_63(i64 %a8360063)                             ; call prim_procedure_63
  %cmp8366271 = icmp eq i64 %a8360064, 15                                            ; false?
  br i1 %cmp8366271, label %else8366273, label %then8366272                          ; if

then8366272:
  %a8360065 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360066 = call i64 @prim_car(i64 %a8360065)                                      ; call prim_car
  %cloptr8366274 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366276 = getelementptr inbounds i64, i64* %cloptr8366274, i64 1              ; &eptr8366276[1]
  %eptr8366277 = getelementptr inbounds i64, i64* %cloptr8366274, i64 2              ; &eptr8366277[2]
  %eptr8366278 = getelementptr inbounds i64, i64* %cloptr8366274, i64 3              ; &eptr8366278[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366276                                  ; *eptr8366276 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366277                                                ; *eptr8366277 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366278                                          ; *eptr8366278 = %cont8360169
  %eptr8366275 = getelementptr inbounds i64, i64* %cloptr8366274, i64 0              ; &cloptr8366274[0]
  %f8366279 = ptrtoint void(i64,i64)* @lam8363960 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366279, i64* %eptr8366275                                             ; store fptr
  %arg8361170 = ptrtoint i64* %cloptr8366274 to i64                                  ; closure cast; i64* -> i64
  %rva8362592 = add i64 0, 0                                                         ; quoted ()
  %rva8362591 = call i64 @prim_cons(i64 %arg8361170, i64 %rva8362592)                ; call prim_cons
  %cloptr8366280 = inttoptr i64 %a8360066 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366281 = getelementptr inbounds i64, i64* %cloptr8366280, i64 0             ; &cloptr8366280[0]
  %f8366283 = load i64, i64* %i0ptr8366281, align 8                                  ; load; *i0ptr8366281
  %fptr8366282 = inttoptr i64 %f8366283 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366282(i64 %a8360066, i64 %rva8362591)             ; tail call
  ret void

else8366273:
  %arg8361178 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366284, i32 0, i32 0)); quoted string
  %retprim8360173 = call i64 @prim_halt(i64 %arg8361178)                             ; call prim_halt
  %cloptr8366285 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366287 = getelementptr inbounds i64, i64* %cloptr8366285, i64 1              ; &eptr8366287[1]
  %eptr8366288 = getelementptr inbounds i64, i64* %cloptr8366285, i64 2              ; &eptr8366288[2]
  %eptr8366289 = getelementptr inbounds i64, i64* %cloptr8366285, i64 3              ; &eptr8366289[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366287                                  ; *eptr8366287 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366288                                                ; *eptr8366288 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366289                                          ; *eptr8366289 = %cont8360169
  %eptr8366286 = getelementptr inbounds i64, i64* %cloptr8366285, i64 0              ; &cloptr8366285[0]
  %f8366290 = ptrtoint void(i64,i64)* @lam8363967 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366290, i64* %eptr8366286                                             ; store fptr
  %arg8361181 = ptrtoint i64* %cloptr8366285 to i64                                  ; closure cast; i64* -> i64
  %arg8361180 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362602 = add i64 0, 0                                                         ; quoted ()
  %rva8362601 = call i64 @prim_cons(i64 %retprim8360173, i64 %rva8362602)            ; call prim_cons
  %rva8362600 = call i64 @prim_cons(i64 %arg8361180, i64 %rva8362601)                ; call prim_cons
  %cloptr8366291 = inttoptr i64 %arg8361181 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366292 = getelementptr inbounds i64, i64* %cloptr8366291, i64 0             ; &cloptr8366291[0]
  %f8366294 = load i64, i64* %i0ptr8366292, align 8                                  ; load; *i0ptr8366292
  %fptr8366293 = inttoptr i64 %f8366294 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366293(i64 %arg8361181, i64 %rva8362600)           ; tail call
  ret void
}


define void @lam8363967(i64 %env8363968, i64 %rvp8362599) {
  %envptr8366295 = inttoptr i64 %env8363968 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366296 = getelementptr inbounds i64, i64* %envptr8366295, i64 3            ; &envptr8366295[3]
  %cont8360169 = load i64, i64* %envptr8366296, align 8                              ; load; *envptr8366296
  %envptr8366297 = inttoptr i64 %env8363968 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366298 = getelementptr inbounds i64, i64* %envptr8366297, i64 2            ; &envptr8366297[2]
  %Zgr$l = load i64, i64* %envptr8366298, align 8                                    ; load; *envptr8366298
  %envptr8366299 = inttoptr i64 %env8363968 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366300 = getelementptr inbounds i64, i64* %envptr8366299, i64 1            ; &envptr8366299[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366300, align 8                      ; load; *envptr8366300
  %_958360171 = call i64 @prim_car(i64 %rvp8362599)                                  ; call prim_car
  %rvp8362598 = call i64 @prim_cdr(i64 %rvp8362599)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362598)                                    ; call prim_car
  %na8362594 = call i64 @prim_cdr(i64 %rvp8362598)                                   ; call prim_cdr
  %arg8361183 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361183, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361186 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362597 = add i64 0, 0                                                         ; quoted ()
  %rva8362596 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362597)            ; call prim_cons
  %rva8362595 = call i64 @prim_cons(i64 %arg8361186, i64 %rva8362596)                ; call prim_cons
  %cloptr8366301 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366302 = getelementptr inbounds i64, i64* %cloptr8366301, i64 0             ; &cloptr8366301[0]
  %f8366304 = load i64, i64* %i0ptr8366302, align 8                                  ; load; *i0ptr8366302
  %fptr8366303 = inttoptr i64 %f8366304 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366303(i64 %cont8360169, i64 %rva8362595)          ; tail call
  ret void
}


define void @lam8363960(i64 %env8363961, i64 %rvp8362590) {
  %envptr8366305 = inttoptr i64 %env8363961 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366306 = getelementptr inbounds i64, i64* %envptr8366305, i64 3            ; &envptr8366305[3]
  %cont8360169 = load i64, i64* %envptr8366306, align 8                              ; load; *envptr8366306
  %envptr8366307 = inttoptr i64 %env8363961 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366308 = getelementptr inbounds i64, i64* %envptr8366307, i64 2            ; &envptr8366307[2]
  %Zgr$l = load i64, i64* %envptr8366308, align 8                                    ; load; *envptr8366308
  %envptr8366309 = inttoptr i64 %env8363961 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366310 = getelementptr inbounds i64, i64* %envptr8366309, i64 1            ; &envptr8366309[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366310, align 8                      ; load; *envptr8366310
  %_958360171 = call i64 @prim_car(i64 %rvp8362590)                                  ; call prim_car
  %rvp8362589 = call i64 @prim_cdr(i64 %rvp8362590)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362589)                                    ; call prim_car
  %na8362585 = call i64 @prim_cdr(i64 %rvp8362589)                                   ; call prim_cdr
  %arg8361173 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361173, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361176 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362588 = add i64 0, 0                                                         ; quoted ()
  %rva8362587 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362588)            ; call prim_cons
  %rva8362586 = call i64 @prim_cons(i64 %arg8361176, i64 %rva8362587)                ; call prim_cons
  %cloptr8366311 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366312 = getelementptr inbounds i64, i64* %cloptr8366311, i64 0             ; &cloptr8366311[0]
  %f8366314 = load i64, i64* %i0ptr8366312, align 8                                  ; load; *i0ptr8366312
  %fptr8366313 = inttoptr i64 %f8366314 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366313(i64 %cont8360169, i64 %rva8362586)          ; tail call
  ret void
}


define void @lam8363936(i64 %env8363937, i64 %rvp8362518) {
  %envptr8366315 = inttoptr i64 %env8363937 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366316 = getelementptr inbounds i64, i64* %envptr8366315, i64 3            ; &envptr8366315[3]
  %cont8360165 = load i64, i64* %envptr8366316, align 8                              ; load; *envptr8366316
  %envptr8366317 = inttoptr i64 %env8363937 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366318 = getelementptr inbounds i64, i64* %envptr8366317, i64 2            ; &envptr8366317[2]
  %kV4$new = load i64, i64* %envptr8366318, align 8                                  ; load; *envptr8366318
  %envptr8366319 = inttoptr i64 %env8363937 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366320 = getelementptr inbounds i64, i64* %envptr8366319, i64 1            ; &envptr8366319[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366320, align 8                      ; load; *envptr8366320
  %_958360166 = call i64 @prim_car(i64 %rvp8362518)                                  ; call prim_car
  %rvp8362517 = call i64 @prim_cdr(i64 %rvp8362518)                                  ; call prim_cdr
  %aCS$tail = call i64 @prim_car(i64 %rvp8362517)                                    ; call prim_car
  %na8362285 = call i64 @prim_cdr(i64 %rvp8362517)                                   ; call prim_cdr
  %cloptr8366321 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8366322 = getelementptr inbounds i64, i64* %cloptr8366321, i64 0              ; &cloptr8366321[0]
  %f8366323 = ptrtoint void(i64,i64)* @lam8363934 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366323, i64* %eptr8366322                                             ; store fptr
  %arg8360800 = ptrtoint i64* %cloptr8366321 to i64                                  ; closure cast; i64* -> i64
  %cloptr8366324 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366326 = getelementptr inbounds i64, i64* %cloptr8366324, i64 1              ; &eptr8366326[1]
  %eptr8366327 = getelementptr inbounds i64, i64* %cloptr8366324, i64 2              ; &eptr8366327[2]
  %eptr8366328 = getelementptr inbounds i64, i64* %cloptr8366324, i64 3              ; &eptr8366328[3]
  %eptr8366329 = getelementptr inbounds i64, i64* %cloptr8366324, i64 4              ; &eptr8366329[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366326                                  ; *eptr8366326 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366327                                             ; *eptr8366327 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366328                                              ; *eptr8366328 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366329                                          ; *eptr8366329 = %cont8360165
  %eptr8366325 = getelementptr inbounds i64, i64* %cloptr8366324, i64 0              ; &cloptr8366324[0]
  %f8366330 = ptrtoint void(i64,i64)* @lam8363930 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366330, i64* %eptr8366325                                             ; store fptr
  %arg8360799 = ptrtoint i64* %cloptr8366324 to i64                                  ; closure cast; i64* -> i64
  %rva8362516 = add i64 0, 0                                                         ; quoted ()
  %rva8362515 = call i64 @prim_cons(i64 %arg8360799, i64 %rva8362516)                ; call prim_cons
  %cloptr8366331 = inttoptr i64 %arg8360800 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366332 = getelementptr inbounds i64, i64* %cloptr8366331, i64 0             ; &cloptr8366331[0]
  %f8366334 = load i64, i64* %i0ptr8366332, align 8                                  ; load; *i0ptr8366332
  %fptr8366333 = inttoptr i64 %f8366334 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366333(i64 %arg8360800, i64 %rva8362515)           ; tail call
  ret void
}


define void @lam8363934(i64 %env8363935, i64 %W5t$lst8360193) {
  %cont8360192 = call i64 @prim_car(i64 %W5t$lst8360193)                             ; call prim_car
  %W5t$lst = call i64 @prim_cdr(i64 %W5t$lst8360193)                                 ; call prim_cdr
  %arg8360804 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362288 = add i64 0, 0                                                         ; quoted ()
  %rva8362287 = call i64 @prim_cons(i64 %W5t$lst, i64 %rva8362288)                   ; call prim_cons
  %rva8362286 = call i64 @prim_cons(i64 %arg8360804, i64 %rva8362287)                ; call prim_cons
  %cloptr8366335 = inttoptr i64 %cont8360192 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366336 = getelementptr inbounds i64, i64* %cloptr8366335, i64 0             ; &cloptr8366335[0]
  %f8366338 = load i64, i64* %i0ptr8366336, align 8                                  ; load; *i0ptr8366336
  %fptr8366337 = inttoptr i64 %f8366338 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366337(i64 %cont8360192, i64 %rva8362286)          ; tail call
  ret void
}


define void @lam8363930(i64 %env8363931, i64 %rvp8362514) {
  %envptr8366339 = inttoptr i64 %env8363931 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366340 = getelementptr inbounds i64, i64* %envptr8366339, i64 4            ; &envptr8366339[4]
  %cont8360165 = load i64, i64* %envptr8366340, align 8                              ; load; *envptr8366340
  %envptr8366341 = inttoptr i64 %env8363931 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366342 = getelementptr inbounds i64, i64* %envptr8366341, i64 3            ; &envptr8366341[3]
  %kV4$new = load i64, i64* %envptr8366342, align 8                                  ; load; *envptr8366342
  %envptr8366343 = inttoptr i64 %env8363931 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366344 = getelementptr inbounds i64, i64* %envptr8366343, i64 2            ; &envptr8366343[2]
  %aCS$tail = load i64, i64* %envptr8366344, align 8                                 ; load; *envptr8366344
  %envptr8366345 = inttoptr i64 %env8363931 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366346 = getelementptr inbounds i64, i64* %envptr8366345, i64 1            ; &envptr8366345[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366346, align 8                      ; load; *envptr8366346
  %_958360190 = call i64 @prim_car(i64 %rvp8362514)                                  ; call prim_car
  %rvp8362513 = call i64 @prim_cdr(i64 %rvp8362514)                                  ; call prim_cdr
  %a8360038 = call i64 @prim_car(i64 %rvp8362513)                                    ; call prim_car
  %na8362290 = call i64 @prim_cdr(i64 %rvp8362513)                                   ; call prim_cdr
  %arg8360807 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360191 = call i64 @prim_make_45vector(i64 %arg8360807, i64 %a8360038)     ; call prim_make_45vector
  %cloptr8366347 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366349 = getelementptr inbounds i64, i64* %cloptr8366347, i64 1              ; &eptr8366349[1]
  %eptr8366350 = getelementptr inbounds i64, i64* %cloptr8366347, i64 2              ; &eptr8366350[2]
  %eptr8366351 = getelementptr inbounds i64, i64* %cloptr8366347, i64 3              ; &eptr8366351[3]
  %eptr8366352 = getelementptr inbounds i64, i64* %cloptr8366347, i64 4              ; &eptr8366352[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366349                                  ; *eptr8366349 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366350                                             ; *eptr8366350 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366351                                              ; *eptr8366351 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366352                                          ; *eptr8366352 = %cont8360165
  %eptr8366348 = getelementptr inbounds i64, i64* %cloptr8366347, i64 0              ; &cloptr8366347[0]
  %f8366353 = ptrtoint void(i64,i64)* @lam8363927 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366353, i64* %eptr8366348                                             ; store fptr
  %arg8360810 = ptrtoint i64* %cloptr8366347 to i64                                  ; closure cast; i64* -> i64
  %arg8360809 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362512 = add i64 0, 0                                                         ; quoted ()
  %rva8362511 = call i64 @prim_cons(i64 %retprim8360191, i64 %rva8362512)            ; call prim_cons
  %rva8362510 = call i64 @prim_cons(i64 %arg8360809, i64 %rva8362511)                ; call prim_cons
  %cloptr8366354 = inttoptr i64 %arg8360810 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366355 = getelementptr inbounds i64, i64* %cloptr8366354, i64 0             ; &cloptr8366354[0]
  %f8366357 = load i64, i64* %i0ptr8366355, align 8                                  ; load; *i0ptr8366355
  %fptr8366356 = inttoptr i64 %f8366357 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366356(i64 %arg8360810, i64 %rva8362510)           ; tail call
  ret void
}


define void @lam8363927(i64 %env8363928, i64 %rvp8362509) {
  %envptr8366358 = inttoptr i64 %env8363928 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366359 = getelementptr inbounds i64, i64* %envptr8366358, i64 4            ; &envptr8366358[4]
  %cont8360165 = load i64, i64* %envptr8366359, align 8                              ; load; *envptr8366359
  %envptr8366360 = inttoptr i64 %env8363928 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366361 = getelementptr inbounds i64, i64* %envptr8366360, i64 3            ; &envptr8366360[3]
  %kV4$new = load i64, i64* %envptr8366361, align 8                                  ; load; *envptr8366361
  %envptr8366362 = inttoptr i64 %env8363928 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366363 = getelementptr inbounds i64, i64* %envptr8366362, i64 2            ; &envptr8366362[2]
  %aCS$tail = load i64, i64* %envptr8366363, align 8                                 ; load; *envptr8366363
  %envptr8366364 = inttoptr i64 %env8363928 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366365 = getelementptr inbounds i64, i64* %envptr8366364, i64 1            ; &envptr8366364[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366365, align 8                      ; load; *envptr8366365
  %_958360181 = call i64 @prim_car(i64 %rvp8362509)                                  ; call prim_car
  %rvp8362508 = call i64 @prim_cdr(i64 %rvp8362509)                                  ; call prim_cdr
  %ftW$f = call i64 @prim_car(i64 %rvp8362508)                                       ; call prim_car
  %na8362292 = call i64 @prim_cdr(i64 %rvp8362508)                                   ; call prim_cdr
  %cloptr8366366 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366368 = getelementptr inbounds i64, i64* %cloptr8366366, i64 1              ; &eptr8366368[1]
  %eptr8366369 = getelementptr inbounds i64, i64* %cloptr8366366, i64 2              ; &eptr8366369[2]
  %eptr8366370 = getelementptr inbounds i64, i64* %cloptr8366366, i64 3              ; &eptr8366370[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366368                                  ; *eptr8366368 = %Z9D$_37wind_45stack
  store i64 %ftW$f, i64* %eptr8366369                                                ; *eptr8366369 = %ftW$f
  store i64 %aCS$tail, i64* %eptr8366370                                             ; *eptr8366370 = %aCS$tail
  %eptr8366367 = getelementptr inbounds i64, i64* %cloptr8366366, i64 0              ; &cloptr8366366[0]
  %f8366371 = ptrtoint void(i64,i64)* @lam8363925 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366371, i64* %eptr8366367                                             ; store fptr
  %wOi$f8359929 = ptrtoint i64* %cloptr8366366 to i64                                ; closure cast; i64* -> i64
  %arg8360862 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %ili$_95t = call i64 @prim_vector_45set_33(i64 %ftW$f, i64 %arg8360862, i64 %wOi$f8359929); call prim_vector_45set_33
  %arg8360864 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360051 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8360864)               ; call prim_vector_45ref
  %a8360052 = call i64 @prim_procedure_63(i64 %a8360051)                             ; call prim_procedure_63
  %cmp8366372 = icmp eq i64 %a8360052, 15                                            ; false?
  br i1 %cmp8366372, label %else8366374, label %then8366373                          ; if

then8366373:
  %arg8360867 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360053 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8360867)               ; call prim_vector_45ref
  %arg8360869 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360054 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8360869) ; call prim_vector_45ref
  %cloptr8366375 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366377 = getelementptr inbounds i64, i64* %cloptr8366375, i64 1              ; &eptr8366377[1]
  %eptr8366378 = getelementptr inbounds i64, i64* %cloptr8366375, i64 2              ; &eptr8366378[2]
  %eptr8366379 = getelementptr inbounds i64, i64* %cloptr8366375, i64 3              ; &eptr8366379[3]
  %eptr8366380 = getelementptr inbounds i64, i64* %cloptr8366375, i64 4              ; &eptr8366380[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366377                                  ; *eptr8366377 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366378                                             ; *eptr8366378 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366379                                              ; *eptr8366379 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366380                                          ; *eptr8366380 = %cont8360165
  %eptr8366376 = getelementptr inbounds i64, i64* %cloptr8366375, i64 0              ; &cloptr8366375[0]
  %f8366381 = ptrtoint void(i64,i64)* @lam8363826 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366381, i64* %eptr8366376                                             ; store fptr
  %arg8360872 = ptrtoint i64* %cloptr8366375 to i64                                  ; closure cast; i64* -> i64
  %rva8362419 = add i64 0, 0                                                         ; quoted ()
  %rva8362418 = call i64 @prim_cons(i64 %a8360054, i64 %rva8362419)                  ; call prim_cons
  %rva8362417 = call i64 @prim_cons(i64 %arg8360872, i64 %rva8362418)                ; call prim_cons
  %cloptr8366382 = inttoptr i64 %a8360053 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366383 = getelementptr inbounds i64, i64* %cloptr8366382, i64 0             ; &cloptr8366382[0]
  %f8366385 = load i64, i64* %i0ptr8366383, align 8                                  ; load; *i0ptr8366383
  %fptr8366384 = inttoptr i64 %f8366385 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366384(i64 %a8360053, i64 %rva8362417)             ; tail call
  ret void

else8366374:
  %arg8360966 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366386, i32 0, i32 0)); quoted string
  %retprim8360189 = call i64 @prim_halt(i64 %arg8360966)                             ; call prim_halt
  %cloptr8366387 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366389 = getelementptr inbounds i64, i64* %cloptr8366387, i64 1              ; &eptr8366389[1]
  %eptr8366390 = getelementptr inbounds i64, i64* %cloptr8366387, i64 2              ; &eptr8366390[2]
  %eptr8366391 = getelementptr inbounds i64, i64* %cloptr8366387, i64 3              ; &eptr8366391[3]
  %eptr8366392 = getelementptr inbounds i64, i64* %cloptr8366387, i64 4              ; &eptr8366392[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366389                                  ; *eptr8366389 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366390                                             ; *eptr8366390 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366391                                              ; *eptr8366391 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366392                                          ; *eptr8366392 = %cont8360165
  %eptr8366388 = getelementptr inbounds i64, i64* %cloptr8366387, i64 0              ; &cloptr8366387[0]
  %f8366393 = ptrtoint void(i64,i64)* @lam8363893 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366393, i64* %eptr8366388                                             ; store fptr
  %arg8360969 = ptrtoint i64* %cloptr8366387 to i64                                  ; closure cast; i64* -> i64
  %arg8360968 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362507 = add i64 0, 0                                                         ; quoted ()
  %rva8362506 = call i64 @prim_cons(i64 %retprim8360189, i64 %rva8362507)            ; call prim_cons
  %rva8362505 = call i64 @prim_cons(i64 %arg8360968, i64 %rva8362506)                ; call prim_cons
  %cloptr8366394 = inttoptr i64 %arg8360969 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366395 = getelementptr inbounds i64, i64* %cloptr8366394, i64 0             ; &cloptr8366394[0]
  %f8366397 = load i64, i64* %i0ptr8366395, align 8                                  ; load; *i0ptr8366395
  %fptr8366396 = inttoptr i64 %f8366397 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366396(i64 %arg8360969, i64 %rva8362505)           ; tail call
  ret void
}


define void @lam8363925(i64 %env8363926, i64 %rvp8362331) {
  %envptr8366398 = inttoptr i64 %env8363926 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366399 = getelementptr inbounds i64, i64* %envptr8366398, i64 3            ; &envptr8366398[3]
  %aCS$tail = load i64, i64* %envptr8366399, align 8                                 ; load; *envptr8366399
  %envptr8366400 = inttoptr i64 %env8363926 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366401 = getelementptr inbounds i64, i64* %envptr8366400, i64 2            ; &envptr8366400[2]
  %ftW$f = load i64, i64* %envptr8366401, align 8                                    ; load; *envptr8366401
  %envptr8366402 = inttoptr i64 %env8363926 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366403 = getelementptr inbounds i64, i64* %envptr8366402, i64 1            ; &envptr8366402[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366403, align 8                      ; load; *envptr8366403
  %cont8360182 = call i64 @prim_car(i64 %rvp8362331)                                 ; call prim_car
  %rvp8362330 = call i64 @prim_cdr(i64 %rvp8362331)                                  ; call prim_cdr
  %AsH$l = call i64 @prim_car(i64 %rvp8362330)                                       ; call prim_car
  %na8362294 = call i64 @prim_cdr(i64 %rvp8362330)                                   ; call prim_cdr
  %a8360039 = call i64 @prim_eq_63(i64 %AsH$l, i64 %aCS$tail)                        ; call prim_eq_63
  %a8360040 = call i64 @prim_not(i64 %a8360039)                                      ; call prim_not
  %cmp8366404 = icmp eq i64 %a8360040, 15                                            ; false?
  br i1 %cmp8366404, label %else8366406, label %then8366405                          ; if

then8366405:
  %a8360041 = call i64 @prim_cdr(i64 %AsH$l)                                         ; call prim_cdr
  %arg8360816 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360187 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8360816, i64 %a8360041); call prim_vector_45set_33
  %cloptr8366407 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366409 = getelementptr inbounds i64, i64* %cloptr8366407, i64 1              ; &eptr8366409[1]
  %eptr8366410 = getelementptr inbounds i64, i64* %cloptr8366407, i64 2              ; &eptr8366410[2]
  %eptr8366411 = getelementptr inbounds i64, i64* %cloptr8366407, i64 3              ; &eptr8366411[3]
  store i64 %ftW$f, i64* %eptr8366409                                                ; *eptr8366409 = %ftW$f
  store i64 %cont8360182, i64* %eptr8366410                                          ; *eptr8366410 = %cont8360182
  store i64 %AsH$l, i64* %eptr8366411                                                ; *eptr8366411 = %AsH$l
  %eptr8366408 = getelementptr inbounds i64, i64* %cloptr8366407, i64 0              ; &cloptr8366407[0]
  %f8366412 = ptrtoint void(i64,i64)* @lam8363920 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366412, i64* %eptr8366408                                             ; store fptr
  %arg8360820 = ptrtoint i64* %cloptr8366407 to i64                                  ; closure cast; i64* -> i64
  %arg8360819 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362326 = add i64 0, 0                                                         ; quoted ()
  %rva8362325 = call i64 @prim_cons(i64 %retprim8360187, i64 %rva8362326)            ; call prim_cons
  %rva8362324 = call i64 @prim_cons(i64 %arg8360819, i64 %rva8362325)                ; call prim_cons
  %cloptr8366413 = inttoptr i64 %arg8360820 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366414 = getelementptr inbounds i64, i64* %cloptr8366413, i64 0             ; &cloptr8366413[0]
  %f8366416 = load i64, i64* %i0ptr8366414, align 8                                  ; load; *i0ptr8366414
  %fptr8366415 = inttoptr i64 %f8366416 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366415(i64 %arg8360820, i64 %rva8362324)           ; tail call
  ret void

else8366406:
  %retprim8360188 = call i64 @prim_void()                                            ; call prim_void
  %arg8360859 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362329 = add i64 0, 0                                                         ; quoted ()
  %rva8362328 = call i64 @prim_cons(i64 %retprim8360188, i64 %rva8362329)            ; call prim_cons
  %rva8362327 = call i64 @prim_cons(i64 %arg8360859, i64 %rva8362328)                ; call prim_cons
  %cloptr8366417 = inttoptr i64 %cont8360182 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366418 = getelementptr inbounds i64, i64* %cloptr8366417, i64 0             ; &cloptr8366417[0]
  %f8366420 = load i64, i64* %i0ptr8366418, align 8                                  ; load; *i0ptr8366418
  %fptr8366419 = inttoptr i64 %f8366420 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366419(i64 %cont8360182, i64 %rva8362327)          ; tail call
  ret void
}


define void @lam8363920(i64 %env8363921, i64 %rvp8362323) {
  %envptr8366421 = inttoptr i64 %env8363921 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366422 = getelementptr inbounds i64, i64* %envptr8366421, i64 3            ; &envptr8366421[3]
  %AsH$l = load i64, i64* %envptr8366422, align 8                                    ; load; *envptr8366422
  %envptr8366423 = inttoptr i64 %env8363921 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366424 = getelementptr inbounds i64, i64* %envptr8366423, i64 2            ; &envptr8366423[2]
  %cont8360182 = load i64, i64* %envptr8366424, align 8                              ; load; *envptr8366424
  %envptr8366425 = inttoptr i64 %env8363921 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366426 = getelementptr inbounds i64, i64* %envptr8366425, i64 1            ; &envptr8366425[1]
  %ftW$f = load i64, i64* %envptr8366426, align 8                                    ; load; *envptr8366426
  %_958360183 = call i64 @prim_car(i64 %rvp8362323)                                  ; call prim_car
  %rvp8362322 = call i64 @prim_cdr(i64 %rvp8362323)                                  ; call prim_cdr
  %NPm$_95t = call i64 @prim_car(i64 %rvp8362322)                                    ; call prim_car
  %na8362296 = call i64 @prim_cdr(i64 %rvp8362322)                                   ; call prim_cdr
  %a8360042 = call i64 @prim_car(i64 %AsH$l)                                         ; call prim_car
  %a8360043 = call i64 @prim_cdr(i64 %a8360042)                                      ; call prim_cdr
  %a8360044 = call i64 @prim_procedure_63(i64 %a8360043)                             ; call prim_procedure_63
  %cmp8366427 = icmp eq i64 %a8360044, 15                                            ; false?
  br i1 %cmp8366427, label %else8366429, label %then8366428                          ; if

then8366428:
  %a8360045 = call i64 @prim_car(i64 %AsH$l)                                         ; call prim_car
  %a8360046 = call i64 @prim_cdr(i64 %a8360045)                                      ; call prim_cdr
  %cloptr8366430 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366432 = getelementptr inbounds i64, i64* %cloptr8366430, i64 1              ; &eptr8366432[1]
  %eptr8366433 = getelementptr inbounds i64, i64* %cloptr8366430, i64 2              ; &eptr8366433[2]
  %eptr8366434 = getelementptr inbounds i64, i64* %cloptr8366430, i64 3              ; &eptr8366434[3]
  store i64 %ftW$f, i64* %eptr8366432                                                ; *eptr8366432 = %ftW$f
  store i64 %cont8360182, i64* %eptr8366433                                          ; *eptr8366433 = %cont8360182
  store i64 %AsH$l, i64* %eptr8366434                                                ; *eptr8366434 = %AsH$l
  %eptr8366431 = getelementptr inbounds i64, i64* %cloptr8366430, i64 0              ; &cloptr8366430[0]
  %f8366435 = ptrtoint void(i64,i64)* @lam8363907 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366435, i64* %eptr8366431                                             ; store fptr
  %arg8360826 = ptrtoint i64* %cloptr8366430 to i64                                  ; closure cast; i64* -> i64
  %rva8362308 = add i64 0, 0                                                         ; quoted ()
  %rva8362307 = call i64 @prim_cons(i64 %arg8360826, i64 %rva8362308)                ; call prim_cons
  %cloptr8366436 = inttoptr i64 %a8360046 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366437 = getelementptr inbounds i64, i64* %cloptr8366436, i64 0             ; &cloptr8366436[0]
  %f8366439 = load i64, i64* %i0ptr8366437, align 8                                  ; load; *i0ptr8366437
  %fptr8366438 = inttoptr i64 %f8366439 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366438(i64 %a8360046, i64 %rva8362307)             ; tail call
  ret void

else8366429:
  %arg8360841 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366440, i32 0, i32 0)); quoted string
  %retprim8360186 = call i64 @prim_halt(i64 %arg8360841)                             ; call prim_halt
  %cloptr8366441 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366443 = getelementptr inbounds i64, i64* %cloptr8366441, i64 1              ; &eptr8366443[1]
  %eptr8366444 = getelementptr inbounds i64, i64* %cloptr8366441, i64 2              ; &eptr8366444[2]
  %eptr8366445 = getelementptr inbounds i64, i64* %cloptr8366441, i64 3              ; &eptr8366445[3]
  store i64 %ftW$f, i64* %eptr8366443                                                ; *eptr8366443 = %ftW$f
  store i64 %cont8360182, i64* %eptr8366444                                          ; *eptr8366444 = %cont8360182
  store i64 %AsH$l, i64* %eptr8366445                                                ; *eptr8366445 = %AsH$l
  %eptr8366442 = getelementptr inbounds i64, i64* %cloptr8366441, i64 0              ; &cloptr8366441[0]
  %f8366446 = ptrtoint void(i64,i64)* @lam8363917 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366446, i64* %eptr8366442                                             ; store fptr
  %arg8360844 = ptrtoint i64* %cloptr8366441 to i64                                  ; closure cast; i64* -> i64
  %arg8360843 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362321 = add i64 0, 0                                                         ; quoted ()
  %rva8362320 = call i64 @prim_cons(i64 %retprim8360186, i64 %rva8362321)            ; call prim_cons
  %rva8362319 = call i64 @prim_cons(i64 %arg8360843, i64 %rva8362320)                ; call prim_cons
  %cloptr8366447 = inttoptr i64 %arg8360844 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366448 = getelementptr inbounds i64, i64* %cloptr8366447, i64 0             ; &cloptr8366447[0]
  %f8366450 = load i64, i64* %i0ptr8366448, align 8                                  ; load; *i0ptr8366448
  %fptr8366449 = inttoptr i64 %f8366450 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366449(i64 %arg8360844, i64 %rva8362319)           ; tail call
  ret void
}


define void @lam8363917(i64 %env8363918, i64 %rvp8362318) {
  %envptr8366451 = inttoptr i64 %env8363918 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366452 = getelementptr inbounds i64, i64* %envptr8366451, i64 3            ; &envptr8366451[3]
  %AsH$l = load i64, i64* %envptr8366452, align 8                                    ; load; *envptr8366452
  %envptr8366453 = inttoptr i64 %env8363918 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366454 = getelementptr inbounds i64, i64* %envptr8366453, i64 2            ; &envptr8366453[2]
  %cont8360182 = load i64, i64* %envptr8366454, align 8                              ; load; *envptr8366454
  %envptr8366455 = inttoptr i64 %env8363918 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366456 = getelementptr inbounds i64, i64* %envptr8366455, i64 1            ; &envptr8366455[1]
  %ftW$f = load i64, i64* %envptr8366456, align 8                                    ; load; *envptr8366456
  %_958360184 = call i64 @prim_car(i64 %rvp8362318)                                  ; call prim_car
  %rvp8362317 = call i64 @prim_cdr(i64 %rvp8362318)                                  ; call prim_cdr
  %cGz$_95t = call i64 @prim_car(i64 %rvp8362317)                                    ; call prim_car
  %na8362310 = call i64 @prim_cdr(i64 %rvp8362317)                                   ; call prim_cdr
  %arg8360845 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360047 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8360845)               ; call prim_vector_45ref
  %a8360048 = call i64 @prim_procedure_63(i64 %a8360047)                             ; call prim_procedure_63
  %cmp8366457 = icmp eq i64 %a8360048, 15                                            ; false?
  br i1 %cmp8366457, label %else8366459, label %then8366458                          ; if

then8366458:
  %arg8360848 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360049 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8360848)               ; call prim_vector_45ref
  %a8360050 = call i64 @prim_cdr(i64 %AsH$l)                                         ; call prim_cdr
  %rva8362313 = add i64 0, 0                                                         ; quoted ()
  %rva8362312 = call i64 @prim_cons(i64 %a8360050, i64 %rva8362313)                  ; call prim_cons
  %rva8362311 = call i64 @prim_cons(i64 %cont8360182, i64 %rva8362312)               ; call prim_cons
  %cloptr8366460 = inttoptr i64 %a8360049 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366461 = getelementptr inbounds i64, i64* %cloptr8366460, i64 0             ; &cloptr8366460[0]
  %f8366463 = load i64, i64* %i0ptr8366461, align 8                                  ; load; *i0ptr8366461
  %fptr8366462 = inttoptr i64 %f8366463 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366462(i64 %a8360049, i64 %rva8362311)             ; tail call
  ret void

else8366459:
  %arg8360854 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366464, i32 0, i32 0)); quoted string
  %retprim8360185 = call i64 @prim_halt(i64 %arg8360854)                             ; call prim_halt
  %arg8360856 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362316 = add i64 0, 0                                                         ; quoted ()
  %rva8362315 = call i64 @prim_cons(i64 %retprim8360185, i64 %rva8362316)            ; call prim_cons
  %rva8362314 = call i64 @prim_cons(i64 %arg8360856, i64 %rva8362315)                ; call prim_cons
  %cloptr8366465 = inttoptr i64 %cont8360182 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366466 = getelementptr inbounds i64, i64* %cloptr8366465, i64 0             ; &cloptr8366465[0]
  %f8366468 = load i64, i64* %i0ptr8366466, align 8                                  ; load; *i0ptr8366466
  %fptr8366467 = inttoptr i64 %f8366468 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366467(i64 %cont8360182, i64 %rva8362314)          ; tail call
  ret void
}


define void @lam8363907(i64 %env8363908, i64 %rvp8362306) {
  %envptr8366469 = inttoptr i64 %env8363908 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366470 = getelementptr inbounds i64, i64* %envptr8366469, i64 3            ; &envptr8366469[3]
  %AsH$l = load i64, i64* %envptr8366470, align 8                                    ; load; *envptr8366470
  %envptr8366471 = inttoptr i64 %env8363908 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366472 = getelementptr inbounds i64, i64* %envptr8366471, i64 2            ; &envptr8366471[2]
  %cont8360182 = load i64, i64* %envptr8366472, align 8                              ; load; *envptr8366472
  %envptr8366473 = inttoptr i64 %env8363908 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366474 = getelementptr inbounds i64, i64* %envptr8366473, i64 1            ; &envptr8366473[1]
  %ftW$f = load i64, i64* %envptr8366474, align 8                                    ; load; *envptr8366474
  %_958360184 = call i64 @prim_car(i64 %rvp8362306)                                  ; call prim_car
  %rvp8362305 = call i64 @prim_cdr(i64 %rvp8362306)                                  ; call prim_cdr
  %cGz$_95t = call i64 @prim_car(i64 %rvp8362305)                                    ; call prim_car
  %na8362298 = call i64 @prim_cdr(i64 %rvp8362305)                                   ; call prim_cdr
  %arg8360828 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360047 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8360828)               ; call prim_vector_45ref
  %a8360048 = call i64 @prim_procedure_63(i64 %a8360047)                             ; call prim_procedure_63
  %cmp8366475 = icmp eq i64 %a8360048, 15                                            ; false?
  br i1 %cmp8366475, label %else8366477, label %then8366476                          ; if

then8366476:
  %arg8360831 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360049 = call i64 @prim_vector_45ref(i64 %ftW$f, i64 %arg8360831)               ; call prim_vector_45ref
  %a8360050 = call i64 @prim_cdr(i64 %AsH$l)                                         ; call prim_cdr
  %rva8362301 = add i64 0, 0                                                         ; quoted ()
  %rva8362300 = call i64 @prim_cons(i64 %a8360050, i64 %rva8362301)                  ; call prim_cons
  %rva8362299 = call i64 @prim_cons(i64 %cont8360182, i64 %rva8362300)               ; call prim_cons
  %cloptr8366478 = inttoptr i64 %a8360049 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366479 = getelementptr inbounds i64, i64* %cloptr8366478, i64 0             ; &cloptr8366478[0]
  %f8366481 = load i64, i64* %i0ptr8366479, align 8                                  ; load; *i0ptr8366479
  %fptr8366480 = inttoptr i64 %f8366481 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366480(i64 %a8360049, i64 %rva8362299)             ; tail call
  ret void

else8366477:
  %arg8360837 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366482, i32 0, i32 0)); quoted string
  %retprim8360185 = call i64 @prim_halt(i64 %arg8360837)                             ; call prim_halt
  %arg8360839 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362304 = add i64 0, 0                                                         ; quoted ()
  %rva8362303 = call i64 @prim_cons(i64 %retprim8360185, i64 %rva8362304)            ; call prim_cons
  %rva8362302 = call i64 @prim_cons(i64 %arg8360839, i64 %rva8362303)                ; call prim_cons
  %cloptr8366483 = inttoptr i64 %cont8360182 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366484 = getelementptr inbounds i64, i64* %cloptr8366483, i64 0             ; &cloptr8366483[0]
  %f8366486 = load i64, i64* %i0ptr8366484, align 8                                  ; load; *i0ptr8366484
  %fptr8366485 = inttoptr i64 %f8366486 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366485(i64 %cont8360182, i64 %rva8362302)          ; tail call
  ret void
}


define void @lam8363893(i64 %env8363894, i64 %rvp8362504) {
  %envptr8366487 = inttoptr i64 %env8363894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366488 = getelementptr inbounds i64, i64* %envptr8366487, i64 4            ; &envptr8366487[4]
  %cont8360165 = load i64, i64* %envptr8366488, align 8                              ; load; *envptr8366488
  %envptr8366489 = inttoptr i64 %env8363894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366490 = getelementptr inbounds i64, i64* %envptr8366489, i64 3            ; &envptr8366489[3]
  %kV4$new = load i64, i64* %envptr8366490, align 8                                  ; load; *envptr8366490
  %envptr8366491 = inttoptr i64 %env8363894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366492 = getelementptr inbounds i64, i64* %envptr8366491, i64 2            ; &envptr8366491[2]
  %aCS$tail = load i64, i64* %envptr8366492, align 8                                 ; load; *envptr8366492
  %envptr8366493 = inttoptr i64 %env8363894 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366494 = getelementptr inbounds i64, i64* %envptr8366493, i64 1            ; &envptr8366493[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366494, align 8                      ; load; *envptr8366494
  %_958360167 = call i64 @prim_car(i64 %rvp8362504)                                  ; call prim_car
  %rvp8362503 = call i64 @prim_cdr(i64 %rvp8362504)                                  ; call prim_cdr
  %iIP$_95t = call i64 @prim_car(i64 %rvp8362503)                                    ; call prim_car
  %na8362421 = call i64 @prim_cdr(i64 %rvp8362503)                                   ; call prim_cdr
  %cloptr8366495 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8366496 = getelementptr inbounds i64, i64* %cloptr8366495, i64 0              ; &cloptr8366495[0]
  %f8366497 = ptrtoint void(i64,i64)* @lam8363891 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366497, i64* %eptr8366496                                             ; store fptr
  %arg8360971 = ptrtoint i64* %cloptr8366495 to i64                                  ; closure cast; i64* -> i64
  %cloptr8366498 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366500 = getelementptr inbounds i64, i64* %cloptr8366498, i64 1              ; &eptr8366500[1]
  %eptr8366501 = getelementptr inbounds i64, i64* %cloptr8366498, i64 2              ; &eptr8366501[2]
  %eptr8366502 = getelementptr inbounds i64, i64* %cloptr8366498, i64 3              ; &eptr8366502[3]
  %eptr8366503 = getelementptr inbounds i64, i64* %cloptr8366498, i64 4              ; &eptr8366503[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366500                                  ; *eptr8366500 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366501                                             ; *eptr8366501 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366502                                              ; *eptr8366502 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366503                                          ; *eptr8366503 = %cont8360165
  %eptr8366499 = getelementptr inbounds i64, i64* %cloptr8366498, i64 0              ; &cloptr8366498[0]
  %f8366504 = ptrtoint void(i64,i64)* @lam8363887 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366504, i64* %eptr8366499                                             ; store fptr
  %arg8360970 = ptrtoint i64* %cloptr8366498 to i64                                  ; closure cast; i64* -> i64
  %rva8362502 = add i64 0, 0                                                         ; quoted ()
  %rva8362501 = call i64 @prim_cons(i64 %arg8360970, i64 %rva8362502)                ; call prim_cons
  %cloptr8366505 = inttoptr i64 %arg8360971 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366506 = getelementptr inbounds i64, i64* %cloptr8366505, i64 0             ; &cloptr8366505[0]
  %f8366508 = load i64, i64* %i0ptr8366506, align 8                                  ; load; *i0ptr8366506
  %fptr8366507 = inttoptr i64 %f8366508 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366507(i64 %arg8360971, i64 %rva8362501)           ; tail call
  ret void
}


define void @lam8363891(i64 %env8363892, i64 %JCH$lst8360180) {
  %cont8360179 = call i64 @prim_car(i64 %JCH$lst8360180)                             ; call prim_car
  %JCH$lst = call i64 @prim_cdr(i64 %JCH$lst8360180)                                 ; call prim_cdr
  %arg8360975 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362424 = add i64 0, 0                                                         ; quoted ()
  %rva8362423 = call i64 @prim_cons(i64 %JCH$lst, i64 %rva8362424)                   ; call prim_cons
  %rva8362422 = call i64 @prim_cons(i64 %arg8360975, i64 %rva8362423)                ; call prim_cons
  %cloptr8366509 = inttoptr i64 %cont8360179 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366510 = getelementptr inbounds i64, i64* %cloptr8366509, i64 0             ; &cloptr8366509[0]
  %f8366512 = load i64, i64* %i0ptr8366510, align 8                                  ; load; *i0ptr8366510
  %fptr8366511 = inttoptr i64 %f8366512 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366511(i64 %cont8360179, i64 %rva8362422)          ; tail call
  ret void
}


define void @lam8363887(i64 %env8363888, i64 %rvp8362500) {
  %envptr8366513 = inttoptr i64 %env8363888 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366514 = getelementptr inbounds i64, i64* %envptr8366513, i64 4            ; &envptr8366513[4]
  %cont8360165 = load i64, i64* %envptr8366514, align 8                              ; load; *envptr8366514
  %envptr8366515 = inttoptr i64 %env8363888 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366516 = getelementptr inbounds i64, i64* %envptr8366515, i64 3            ; &envptr8366515[3]
  %kV4$new = load i64, i64* %envptr8366516, align 8                                  ; load; *envptr8366516
  %envptr8366517 = inttoptr i64 %env8363888 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366518 = getelementptr inbounds i64, i64* %envptr8366517, i64 2            ; &envptr8366517[2]
  %aCS$tail = load i64, i64* %envptr8366518, align 8                                 ; load; *envptr8366518
  %envptr8366519 = inttoptr i64 %env8363888 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366520 = getelementptr inbounds i64, i64* %envptr8366519, i64 1            ; &envptr8366519[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366520, align 8                      ; load; *envptr8366520
  %_958360177 = call i64 @prim_car(i64 %rvp8362500)                                  ; call prim_car
  %rvp8362499 = call i64 @prim_cdr(i64 %rvp8362500)                                  ; call prim_cdr
  %a8360055 = call i64 @prim_car(i64 %rvp8362499)                                    ; call prim_car
  %na8362426 = call i64 @prim_cdr(i64 %rvp8362499)                                   ; call prim_cdr
  %arg8360978 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360178 = call i64 @prim_make_45vector(i64 %arg8360978, i64 %a8360055)     ; call prim_make_45vector
  %cloptr8366521 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366523 = getelementptr inbounds i64, i64* %cloptr8366521, i64 1              ; &eptr8366523[1]
  %eptr8366524 = getelementptr inbounds i64, i64* %cloptr8366521, i64 2              ; &eptr8366524[2]
  %eptr8366525 = getelementptr inbounds i64, i64* %cloptr8366521, i64 3              ; &eptr8366525[3]
  %eptr8366526 = getelementptr inbounds i64, i64* %cloptr8366521, i64 4              ; &eptr8366526[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366523                                  ; *eptr8366523 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366524                                             ; *eptr8366524 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366525                                              ; *eptr8366525 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366526                                          ; *eptr8366526 = %cont8360165
  %eptr8366522 = getelementptr inbounds i64, i64* %cloptr8366521, i64 0              ; &cloptr8366521[0]
  %f8366527 = ptrtoint void(i64,i64)* @lam8363884 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366527, i64* %eptr8366522                                             ; store fptr
  %arg8360981 = ptrtoint i64* %cloptr8366521 to i64                                  ; closure cast; i64* -> i64
  %arg8360980 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362498 = add i64 0, 0                                                         ; quoted ()
  %rva8362497 = call i64 @prim_cons(i64 %retprim8360178, i64 %rva8362498)            ; call prim_cons
  %rva8362496 = call i64 @prim_cons(i64 %arg8360980, i64 %rva8362497)                ; call prim_cons
  %cloptr8366528 = inttoptr i64 %arg8360981 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366529 = getelementptr inbounds i64, i64* %cloptr8366528, i64 0             ; &cloptr8366528[0]
  %f8366531 = load i64, i64* %i0ptr8366529, align 8                                  ; load; *i0ptr8366529
  %fptr8366530 = inttoptr i64 %f8366531 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366530(i64 %arg8360981, i64 %rva8362496)           ; tail call
  ret void
}


define void @lam8363884(i64 %env8363885, i64 %rvp8362495) {
  %envptr8366532 = inttoptr i64 %env8363885 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366533 = getelementptr inbounds i64, i64* %envptr8366532, i64 4            ; &envptr8366532[4]
  %cont8360165 = load i64, i64* %envptr8366533, align 8                              ; load; *envptr8366533
  %envptr8366534 = inttoptr i64 %env8363885 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366535 = getelementptr inbounds i64, i64* %envptr8366534, i64 3            ; &envptr8366534[3]
  %kV4$new = load i64, i64* %envptr8366535, align 8                                  ; load; *envptr8366535
  %envptr8366536 = inttoptr i64 %env8363885 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366537 = getelementptr inbounds i64, i64* %envptr8366536, i64 2            ; &envptr8366536[2]
  %aCS$tail = load i64, i64* %envptr8366537, align 8                                 ; load; *envptr8366537
  %envptr8366538 = inttoptr i64 %env8363885 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366539 = getelementptr inbounds i64, i64* %envptr8366538, i64 1            ; &envptr8366538[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366539, align 8                      ; load; *envptr8366539
  %_958360168 = call i64 @prim_car(i64 %rvp8362495)                                  ; call prim_car
  %rvp8362494 = call i64 @prim_cdr(i64 %rvp8362495)                                  ; call prim_cdr
  %prl$f = call i64 @prim_car(i64 %rvp8362494)                                       ; call prim_car
  %na8362428 = call i64 @prim_cdr(i64 %rvp8362494)                                   ; call prim_cdr
  %cloptr8366540 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366542 = getelementptr inbounds i64, i64* %cloptr8366540, i64 1              ; &eptr8366542[1]
  %eptr8366543 = getelementptr inbounds i64, i64* %cloptr8366540, i64 2              ; &eptr8366543[2]
  %eptr8366544 = getelementptr inbounds i64, i64* %cloptr8366540, i64 3              ; &eptr8366544[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366542                                  ; *eptr8366542 = %Z9D$_37wind_45stack
  store i64 %prl$f, i64* %eptr8366543                                                ; *eptr8366543 = %prl$f
  store i64 %aCS$tail, i64* %eptr8366544                                             ; *eptr8366544 = %aCS$tail
  %eptr8366541 = getelementptr inbounds i64, i64* %cloptr8366540, i64 0              ; &cloptr8366540[0]
  %f8366545 = ptrtoint void(i64,i64)* @lam8363882 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366545, i64* %eptr8366541                                             ; store fptr
  %mtP$f8359930 = ptrtoint i64* %cloptr8366540 to i64                                ; closure cast; i64* -> i64
  %arg8361048 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %O4n$_95t = call i64 @prim_vector_45set_33(i64 %prl$f, i64 %arg8361048, i64 %mtP$f8359930); call prim_vector_45set_33
  %arg8361050 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360067 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361050)               ; call prim_vector_45ref
  %a8360068 = call i64 @prim_procedure_63(i64 %a8360067)                             ; call prim_procedure_63
  %cmp8366546 = icmp eq i64 %a8360068, 15                                            ; false?
  br i1 %cmp8366546, label %else8366548, label %then8366547                          ; if

then8366547:
  %arg8361053 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360069 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8361053)               ; call prim_vector_45ref
  %rva8362490 = add i64 0, 0                                                         ; quoted ()
  %rva8362489 = call i64 @prim_cons(i64 %kV4$new, i64 %rva8362490)                   ; call prim_cons
  %rva8362488 = call i64 @prim_cons(i64 %cont8360165, i64 %rva8362489)               ; call prim_cons
  %cloptr8366549 = inttoptr i64 %a8360069 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366550 = getelementptr inbounds i64, i64* %cloptr8366549, i64 0             ; &cloptr8366549[0]
  %f8366552 = load i64, i64* %i0ptr8366550, align 8                                  ; load; *i0ptr8366550
  %fptr8366551 = inttoptr i64 %f8366552 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366551(i64 %a8360069, i64 %rva8362488)             ; tail call
  ret void

else8366548:
  %arg8361058 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366553, i32 0, i32 0)); quoted string
  %retprim8360176 = call i64 @prim_halt(i64 %arg8361058)                             ; call prim_halt
  %arg8361060 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362493 = add i64 0, 0                                                         ; quoted ()
  %rva8362492 = call i64 @prim_cons(i64 %retprim8360176, i64 %rva8362493)            ; call prim_cons
  %rva8362491 = call i64 @prim_cons(i64 %arg8361060, i64 %rva8362492)                ; call prim_cons
  %cloptr8366554 = inttoptr i64 %cont8360165 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366555 = getelementptr inbounds i64, i64* %cloptr8366554, i64 0             ; &cloptr8366554[0]
  %f8366557 = load i64, i64* %i0ptr8366555, align 8                                  ; load; *i0ptr8366555
  %fptr8366556 = inttoptr i64 %f8366557 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366556(i64 %cont8360165, i64 %rva8362491)          ; tail call
  ret void
}


define void @lam8363882(i64 %env8363883, i64 %rvp8362487) {
  %envptr8366558 = inttoptr i64 %env8363883 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366559 = getelementptr inbounds i64, i64* %envptr8366558, i64 3            ; &envptr8366558[3]
  %aCS$tail = load i64, i64* %envptr8366559, align 8                                 ; load; *envptr8366559
  %envptr8366560 = inttoptr i64 %env8363883 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366561 = getelementptr inbounds i64, i64* %envptr8366560, i64 2            ; &envptr8366560[2]
  %prl$f = load i64, i64* %envptr8366561, align 8                                    ; load; *envptr8366561
  %envptr8366562 = inttoptr i64 %env8363883 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366563 = getelementptr inbounds i64, i64* %envptr8366562, i64 1            ; &envptr8366562[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366563, align 8                      ; load; *envptr8366563
  %cont8360169 = call i64 @prim_car(i64 %rvp8362487)                                 ; call prim_car
  %rvp8362486 = call i64 @prim_cdr(i64 %rvp8362487)                                  ; call prim_cdr
  %Zgr$l = call i64 @prim_car(i64 %rvp8362486)                                       ; call prim_car
  %na8362430 = call i64 @prim_cdr(i64 %rvp8362486)                                   ; call prim_cdr
  %a8360056 = call i64 @prim_eq_63(i64 %Zgr$l, i64 %aCS$tail)                        ; call prim_eq_63
  %a8360057 = call i64 @prim_not(i64 %a8360056)                                      ; call prim_not
  %cmp8366564 = icmp eq i64 %a8360057, 15                                            ; false?
  br i1 %cmp8366564, label %else8366566, label %then8366565                          ; if

then8366565:
  %arg8360985 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360058 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8360985)               ; call prim_vector_45ref
  %a8360059 = call i64 @prim_procedure_63(i64 %a8360058)                             ; call prim_procedure_63
  %cmp8366567 = icmp eq i64 %a8360059, 15                                            ; false?
  br i1 %cmp8366567, label %else8366569, label %then8366568                          ; if

then8366568:
  %arg8360988 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360060 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8360988)               ; call prim_vector_45ref
  %a8360061 = call i64 @prim_cdr(i64 %Zgr$l)                                         ; call prim_cdr
  %cloptr8366570 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366572 = getelementptr inbounds i64, i64* %cloptr8366570, i64 1              ; &eptr8366572[1]
  %eptr8366573 = getelementptr inbounds i64, i64* %cloptr8366570, i64 2              ; &eptr8366573[2]
  %eptr8366574 = getelementptr inbounds i64, i64* %cloptr8366570, i64 3              ; &eptr8366574[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366572                                  ; *eptr8366572 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366573                                                ; *eptr8366573 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366574                                          ; *eptr8366574 = %cont8360169
  %eptr8366571 = getelementptr inbounds i64, i64* %cloptr8366570, i64 0              ; &cloptr8366570[0]
  %f8366575 = ptrtoint void(i64,i64)* @lam8363857 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366575, i64* %eptr8366571                                             ; store fptr
  %arg8360992 = ptrtoint i64* %cloptr8366570 to i64                                  ; closure cast; i64* -> i64
  %rva8362456 = add i64 0, 0                                                         ; quoted ()
  %rva8362455 = call i64 @prim_cons(i64 %a8360061, i64 %rva8362456)                  ; call prim_cons
  %rva8362454 = call i64 @prim_cons(i64 %arg8360992, i64 %rva8362455)                ; call prim_cons
  %cloptr8366576 = inttoptr i64 %a8360060 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366577 = getelementptr inbounds i64, i64* %cloptr8366576, i64 0             ; &cloptr8366576[0]
  %f8366579 = load i64, i64* %i0ptr8366577, align 8                                  ; load; *i0ptr8366577
  %fptr8366578 = inttoptr i64 %f8366579 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366578(i64 %a8360060, i64 %rva8362454)             ; tail call
  ret void

else8366569:
  %arg8361017 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366580, i32 0, i32 0)); quoted string
  %retprim8360174 = call i64 @prim_halt(i64 %arg8361017)                             ; call prim_halt
  %cloptr8366581 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366583 = getelementptr inbounds i64, i64* %cloptr8366581, i64 1              ; &eptr8366583[1]
  %eptr8366584 = getelementptr inbounds i64, i64* %cloptr8366581, i64 2              ; &eptr8366584[2]
  %eptr8366585 = getelementptr inbounds i64, i64* %cloptr8366581, i64 3              ; &eptr8366585[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366583                                  ; *eptr8366583 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366584                                                ; *eptr8366584 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366585                                          ; *eptr8366585 = %cont8360169
  %eptr8366582 = getelementptr inbounds i64, i64* %cloptr8366581, i64 0              ; &cloptr8366581[0]
  %f8366586 = ptrtoint void(i64,i64)* @lam8363876 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366586, i64* %eptr8366582                                             ; store fptr
  %arg8361020 = ptrtoint i64* %cloptr8366581 to i64                                  ; closure cast; i64* -> i64
  %arg8361019 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362482 = add i64 0, 0                                                         ; quoted ()
  %rva8362481 = call i64 @prim_cons(i64 %retprim8360174, i64 %rva8362482)            ; call prim_cons
  %rva8362480 = call i64 @prim_cons(i64 %arg8361019, i64 %rva8362481)                ; call prim_cons
  %cloptr8366587 = inttoptr i64 %arg8361020 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366588 = getelementptr inbounds i64, i64* %cloptr8366587, i64 0             ; &cloptr8366587[0]
  %f8366590 = load i64, i64* %i0ptr8366588, align 8                                  ; load; *i0ptr8366588
  %fptr8366589 = inttoptr i64 %f8366590 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366589(i64 %arg8361020, i64 %rva8362480)           ; tail call
  ret void

else8366566:
  %retprim8360175 = call i64 @prim_void()                                            ; call prim_void
  %arg8361045 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362485 = add i64 0, 0                                                         ; quoted ()
  %rva8362484 = call i64 @prim_cons(i64 %retprim8360175, i64 %rva8362485)            ; call prim_cons
  %rva8362483 = call i64 @prim_cons(i64 %arg8361045, i64 %rva8362484)                ; call prim_cons
  %cloptr8366591 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366592 = getelementptr inbounds i64, i64* %cloptr8366591, i64 0             ; &cloptr8366591[0]
  %f8366594 = load i64, i64* %i0ptr8366592, align 8                                  ; load; *i0ptr8366592
  %fptr8366593 = inttoptr i64 %f8366594 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366593(i64 %cont8360169, i64 %rva8362483)          ; tail call
  ret void
}


define void @lam8363876(i64 %env8363877, i64 %rvp8362479) {
  %envptr8366595 = inttoptr i64 %env8363877 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366596 = getelementptr inbounds i64, i64* %envptr8366595, i64 3            ; &envptr8366595[3]
  %cont8360169 = load i64, i64* %envptr8366596, align 8                              ; load; *envptr8366596
  %envptr8366597 = inttoptr i64 %env8363877 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366598 = getelementptr inbounds i64, i64* %envptr8366597, i64 2            ; &envptr8366597[2]
  %Zgr$l = load i64, i64* %envptr8366598, align 8                                    ; load; *envptr8366598
  %envptr8366599 = inttoptr i64 %env8363877 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366600 = getelementptr inbounds i64, i64* %envptr8366599, i64 1            ; &envptr8366599[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366600, align 8                      ; load; *envptr8366600
  %_958360170 = call i64 @prim_car(i64 %rvp8362479)                                  ; call prim_car
  %rvp8362478 = call i64 @prim_cdr(i64 %rvp8362479)                                  ; call prim_cdr
  %VFU$_95t = call i64 @prim_car(i64 %rvp8362478)                                    ; call prim_car
  %na8362458 = call i64 @prim_cdr(i64 %rvp8362478)                                   ; call prim_cdr
  %a8360062 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360063 = call i64 @prim_car(i64 %a8360062)                                      ; call prim_car
  %a8360064 = call i64 @prim_procedure_63(i64 %a8360063)                             ; call prim_procedure_63
  %cmp8366601 = icmp eq i64 %a8360064, 15                                            ; false?
  br i1 %cmp8366601, label %else8366603, label %then8366602                          ; if

then8366602:
  %a8360065 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360066 = call i64 @prim_car(i64 %a8360065)                                      ; call prim_car
  %cloptr8366604 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366606 = getelementptr inbounds i64, i64* %cloptr8366604, i64 1              ; &eptr8366606[1]
  %eptr8366607 = getelementptr inbounds i64, i64* %cloptr8366604, i64 2              ; &eptr8366607[2]
  %eptr8366608 = getelementptr inbounds i64, i64* %cloptr8366604, i64 3              ; &eptr8366608[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366606                                  ; *eptr8366606 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366607                                                ; *eptr8366607 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366608                                          ; *eptr8366608 = %cont8360169
  %eptr8366605 = getelementptr inbounds i64, i64* %cloptr8366604, i64 0              ; &cloptr8366604[0]
  %f8366609 = ptrtoint void(i64,i64)* @lam8363866 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366609, i64* %eptr8366605                                             ; store fptr
  %arg8361026 = ptrtoint i64* %cloptr8366604 to i64                                  ; closure cast; i64* -> i64
  %rva8362467 = add i64 0, 0                                                         ; quoted ()
  %rva8362466 = call i64 @prim_cons(i64 %arg8361026, i64 %rva8362467)                ; call prim_cons
  %cloptr8366610 = inttoptr i64 %a8360066 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366611 = getelementptr inbounds i64, i64* %cloptr8366610, i64 0             ; &cloptr8366610[0]
  %f8366613 = load i64, i64* %i0ptr8366611, align 8                                  ; load; *i0ptr8366611
  %fptr8366612 = inttoptr i64 %f8366613 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366612(i64 %a8360066, i64 %rva8362466)             ; tail call
  ret void

else8366603:
  %arg8361034 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366614, i32 0, i32 0)); quoted string
  %retprim8360173 = call i64 @prim_halt(i64 %arg8361034)                             ; call prim_halt
  %cloptr8366615 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366617 = getelementptr inbounds i64, i64* %cloptr8366615, i64 1              ; &eptr8366617[1]
  %eptr8366618 = getelementptr inbounds i64, i64* %cloptr8366615, i64 2              ; &eptr8366618[2]
  %eptr8366619 = getelementptr inbounds i64, i64* %cloptr8366615, i64 3              ; &eptr8366619[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366617                                  ; *eptr8366617 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366618                                                ; *eptr8366618 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366619                                          ; *eptr8366619 = %cont8360169
  %eptr8366616 = getelementptr inbounds i64, i64* %cloptr8366615, i64 0              ; &cloptr8366615[0]
  %f8366620 = ptrtoint void(i64,i64)* @lam8363873 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366620, i64* %eptr8366616                                             ; store fptr
  %arg8361037 = ptrtoint i64* %cloptr8366615 to i64                                  ; closure cast; i64* -> i64
  %arg8361036 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362477 = add i64 0, 0                                                         ; quoted ()
  %rva8362476 = call i64 @prim_cons(i64 %retprim8360173, i64 %rva8362477)            ; call prim_cons
  %rva8362475 = call i64 @prim_cons(i64 %arg8361036, i64 %rva8362476)                ; call prim_cons
  %cloptr8366621 = inttoptr i64 %arg8361037 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366622 = getelementptr inbounds i64, i64* %cloptr8366621, i64 0             ; &cloptr8366621[0]
  %f8366624 = load i64, i64* %i0ptr8366622, align 8                                  ; load; *i0ptr8366622
  %fptr8366623 = inttoptr i64 %f8366624 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366623(i64 %arg8361037, i64 %rva8362475)           ; tail call
  ret void
}


define void @lam8363873(i64 %env8363874, i64 %rvp8362474) {
  %envptr8366625 = inttoptr i64 %env8363874 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366626 = getelementptr inbounds i64, i64* %envptr8366625, i64 3            ; &envptr8366625[3]
  %cont8360169 = load i64, i64* %envptr8366626, align 8                              ; load; *envptr8366626
  %envptr8366627 = inttoptr i64 %env8363874 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366628 = getelementptr inbounds i64, i64* %envptr8366627, i64 2            ; &envptr8366627[2]
  %Zgr$l = load i64, i64* %envptr8366628, align 8                                    ; load; *envptr8366628
  %envptr8366629 = inttoptr i64 %env8363874 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366630 = getelementptr inbounds i64, i64* %envptr8366629, i64 1            ; &envptr8366629[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366630, align 8                      ; load; *envptr8366630
  %_958360171 = call i64 @prim_car(i64 %rvp8362474)                                  ; call prim_car
  %rvp8362473 = call i64 @prim_cdr(i64 %rvp8362474)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362473)                                    ; call prim_car
  %na8362469 = call i64 @prim_cdr(i64 %rvp8362473)                                   ; call prim_cdr
  %arg8361039 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361039, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361042 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362472 = add i64 0, 0                                                         ; quoted ()
  %rva8362471 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362472)            ; call prim_cons
  %rva8362470 = call i64 @prim_cons(i64 %arg8361042, i64 %rva8362471)                ; call prim_cons
  %cloptr8366631 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366632 = getelementptr inbounds i64, i64* %cloptr8366631, i64 0             ; &cloptr8366631[0]
  %f8366634 = load i64, i64* %i0ptr8366632, align 8                                  ; load; *i0ptr8366632
  %fptr8366633 = inttoptr i64 %f8366634 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366633(i64 %cont8360169, i64 %rva8362470)          ; tail call
  ret void
}


define void @lam8363866(i64 %env8363867, i64 %rvp8362465) {
  %envptr8366635 = inttoptr i64 %env8363867 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366636 = getelementptr inbounds i64, i64* %envptr8366635, i64 3            ; &envptr8366635[3]
  %cont8360169 = load i64, i64* %envptr8366636, align 8                              ; load; *envptr8366636
  %envptr8366637 = inttoptr i64 %env8363867 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366638 = getelementptr inbounds i64, i64* %envptr8366637, i64 2            ; &envptr8366637[2]
  %Zgr$l = load i64, i64* %envptr8366638, align 8                                    ; load; *envptr8366638
  %envptr8366639 = inttoptr i64 %env8363867 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366640 = getelementptr inbounds i64, i64* %envptr8366639, i64 1            ; &envptr8366639[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366640, align 8                      ; load; *envptr8366640
  %_958360171 = call i64 @prim_car(i64 %rvp8362465)                                  ; call prim_car
  %rvp8362464 = call i64 @prim_cdr(i64 %rvp8362465)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362464)                                    ; call prim_car
  %na8362460 = call i64 @prim_cdr(i64 %rvp8362464)                                   ; call prim_cdr
  %arg8361029 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361029, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361032 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362463 = add i64 0, 0                                                         ; quoted ()
  %rva8362462 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362463)            ; call prim_cons
  %rva8362461 = call i64 @prim_cons(i64 %arg8361032, i64 %rva8362462)                ; call prim_cons
  %cloptr8366641 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366642 = getelementptr inbounds i64, i64* %cloptr8366641, i64 0             ; &cloptr8366641[0]
  %f8366644 = load i64, i64* %i0ptr8366642, align 8                                  ; load; *i0ptr8366642
  %fptr8366643 = inttoptr i64 %f8366644 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366643(i64 %cont8360169, i64 %rva8362461)          ; tail call
  ret void
}


define void @lam8363857(i64 %env8363858, i64 %rvp8362453) {
  %envptr8366645 = inttoptr i64 %env8363858 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366646 = getelementptr inbounds i64, i64* %envptr8366645, i64 3            ; &envptr8366645[3]
  %cont8360169 = load i64, i64* %envptr8366646, align 8                              ; load; *envptr8366646
  %envptr8366647 = inttoptr i64 %env8363858 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366648 = getelementptr inbounds i64, i64* %envptr8366647, i64 2            ; &envptr8366647[2]
  %Zgr$l = load i64, i64* %envptr8366648, align 8                                    ; load; *envptr8366648
  %envptr8366649 = inttoptr i64 %env8363858 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366650 = getelementptr inbounds i64, i64* %envptr8366649, i64 1            ; &envptr8366649[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366650, align 8                      ; load; *envptr8366650
  %_958360170 = call i64 @prim_car(i64 %rvp8362453)                                  ; call prim_car
  %rvp8362452 = call i64 @prim_cdr(i64 %rvp8362453)                                  ; call prim_cdr
  %VFU$_95t = call i64 @prim_car(i64 %rvp8362452)                                    ; call prim_car
  %na8362432 = call i64 @prim_cdr(i64 %rvp8362452)                                   ; call prim_cdr
  %a8360062 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360063 = call i64 @prim_car(i64 %a8360062)                                      ; call prim_car
  %a8360064 = call i64 @prim_procedure_63(i64 %a8360063)                             ; call prim_procedure_63
  %cmp8366651 = icmp eq i64 %a8360064, 15                                            ; false?
  br i1 %cmp8366651, label %else8366653, label %then8366652                          ; if

then8366652:
  %a8360065 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360066 = call i64 @prim_car(i64 %a8360065)                                      ; call prim_car
  %cloptr8366654 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366656 = getelementptr inbounds i64, i64* %cloptr8366654, i64 1              ; &eptr8366656[1]
  %eptr8366657 = getelementptr inbounds i64, i64* %cloptr8366654, i64 2              ; &eptr8366657[2]
  %eptr8366658 = getelementptr inbounds i64, i64* %cloptr8366654, i64 3              ; &eptr8366658[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366656                                  ; *eptr8366656 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366657                                                ; *eptr8366657 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366658                                          ; *eptr8366658 = %cont8360169
  %eptr8366655 = getelementptr inbounds i64, i64* %cloptr8366654, i64 0              ; &cloptr8366654[0]
  %f8366659 = ptrtoint void(i64,i64)* @lam8363847 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366659, i64* %eptr8366655                                             ; store fptr
  %arg8360999 = ptrtoint i64* %cloptr8366654 to i64                                  ; closure cast; i64* -> i64
  %rva8362441 = add i64 0, 0                                                         ; quoted ()
  %rva8362440 = call i64 @prim_cons(i64 %arg8360999, i64 %rva8362441)                ; call prim_cons
  %cloptr8366660 = inttoptr i64 %a8360066 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366661 = getelementptr inbounds i64, i64* %cloptr8366660, i64 0             ; &cloptr8366660[0]
  %f8366663 = load i64, i64* %i0ptr8366661, align 8                                  ; load; *i0ptr8366661
  %fptr8366662 = inttoptr i64 %f8366663 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366662(i64 %a8360066, i64 %rva8362440)             ; tail call
  ret void

else8366653:
  %arg8361007 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366664, i32 0, i32 0)); quoted string
  %retprim8360173 = call i64 @prim_halt(i64 %arg8361007)                             ; call prim_halt
  %cloptr8366665 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366667 = getelementptr inbounds i64, i64* %cloptr8366665, i64 1              ; &eptr8366667[1]
  %eptr8366668 = getelementptr inbounds i64, i64* %cloptr8366665, i64 2              ; &eptr8366668[2]
  %eptr8366669 = getelementptr inbounds i64, i64* %cloptr8366665, i64 3              ; &eptr8366669[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366667                                  ; *eptr8366667 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366668                                                ; *eptr8366668 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366669                                          ; *eptr8366669 = %cont8360169
  %eptr8366666 = getelementptr inbounds i64, i64* %cloptr8366665, i64 0              ; &cloptr8366665[0]
  %f8366670 = ptrtoint void(i64,i64)* @lam8363854 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366670, i64* %eptr8366666                                             ; store fptr
  %arg8361010 = ptrtoint i64* %cloptr8366665 to i64                                  ; closure cast; i64* -> i64
  %arg8361009 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362451 = add i64 0, 0                                                         ; quoted ()
  %rva8362450 = call i64 @prim_cons(i64 %retprim8360173, i64 %rva8362451)            ; call prim_cons
  %rva8362449 = call i64 @prim_cons(i64 %arg8361009, i64 %rva8362450)                ; call prim_cons
  %cloptr8366671 = inttoptr i64 %arg8361010 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366672 = getelementptr inbounds i64, i64* %cloptr8366671, i64 0             ; &cloptr8366671[0]
  %f8366674 = load i64, i64* %i0ptr8366672, align 8                                  ; load; *i0ptr8366672
  %fptr8366673 = inttoptr i64 %f8366674 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366673(i64 %arg8361010, i64 %rva8362449)           ; tail call
  ret void
}


define void @lam8363854(i64 %env8363855, i64 %rvp8362448) {
  %envptr8366675 = inttoptr i64 %env8363855 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366676 = getelementptr inbounds i64, i64* %envptr8366675, i64 3            ; &envptr8366675[3]
  %cont8360169 = load i64, i64* %envptr8366676, align 8                              ; load; *envptr8366676
  %envptr8366677 = inttoptr i64 %env8363855 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366678 = getelementptr inbounds i64, i64* %envptr8366677, i64 2            ; &envptr8366677[2]
  %Zgr$l = load i64, i64* %envptr8366678, align 8                                    ; load; *envptr8366678
  %envptr8366679 = inttoptr i64 %env8363855 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366680 = getelementptr inbounds i64, i64* %envptr8366679, i64 1            ; &envptr8366679[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366680, align 8                      ; load; *envptr8366680
  %_958360171 = call i64 @prim_car(i64 %rvp8362448)                                  ; call prim_car
  %rvp8362447 = call i64 @prim_cdr(i64 %rvp8362448)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362447)                                    ; call prim_car
  %na8362443 = call i64 @prim_cdr(i64 %rvp8362447)                                   ; call prim_cdr
  %arg8361012 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361012, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361015 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362446 = add i64 0, 0                                                         ; quoted ()
  %rva8362445 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362446)            ; call prim_cons
  %rva8362444 = call i64 @prim_cons(i64 %arg8361015, i64 %rva8362445)                ; call prim_cons
  %cloptr8366681 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366682 = getelementptr inbounds i64, i64* %cloptr8366681, i64 0             ; &cloptr8366681[0]
  %f8366684 = load i64, i64* %i0ptr8366682, align 8                                  ; load; *i0ptr8366682
  %fptr8366683 = inttoptr i64 %f8366684 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366683(i64 %cont8360169, i64 %rva8362444)          ; tail call
  ret void
}


define void @lam8363847(i64 %env8363848, i64 %rvp8362439) {
  %envptr8366685 = inttoptr i64 %env8363848 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366686 = getelementptr inbounds i64, i64* %envptr8366685, i64 3            ; &envptr8366685[3]
  %cont8360169 = load i64, i64* %envptr8366686, align 8                              ; load; *envptr8366686
  %envptr8366687 = inttoptr i64 %env8363848 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366688 = getelementptr inbounds i64, i64* %envptr8366687, i64 2            ; &envptr8366687[2]
  %Zgr$l = load i64, i64* %envptr8366688, align 8                                    ; load; *envptr8366688
  %envptr8366689 = inttoptr i64 %env8363848 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366690 = getelementptr inbounds i64, i64* %envptr8366689, i64 1            ; &envptr8366689[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366690, align 8                      ; load; *envptr8366690
  %_958360171 = call i64 @prim_car(i64 %rvp8362439)                                  ; call prim_car
  %rvp8362438 = call i64 @prim_cdr(i64 %rvp8362439)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362438)                                    ; call prim_car
  %na8362434 = call i64 @prim_cdr(i64 %rvp8362438)                                   ; call prim_cdr
  %arg8361002 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361002, i64 %Zgr$l); call prim_vector_45set_33
  %arg8361005 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362437 = add i64 0, 0                                                         ; quoted ()
  %rva8362436 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362437)            ; call prim_cons
  %rva8362435 = call i64 @prim_cons(i64 %arg8361005, i64 %rva8362436)                ; call prim_cons
  %cloptr8366691 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366692 = getelementptr inbounds i64, i64* %cloptr8366691, i64 0             ; &cloptr8366691[0]
  %f8366694 = load i64, i64* %i0ptr8366692, align 8                                  ; load; *i0ptr8366692
  %fptr8366693 = inttoptr i64 %f8366694 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366693(i64 %cont8360169, i64 %rva8362435)          ; tail call
  ret void
}


define void @lam8363826(i64 %env8363827, i64 %rvp8362416) {
  %envptr8366695 = inttoptr i64 %env8363827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366696 = getelementptr inbounds i64, i64* %envptr8366695, i64 4            ; &envptr8366695[4]
  %cont8360165 = load i64, i64* %envptr8366696, align 8                              ; load; *envptr8366696
  %envptr8366697 = inttoptr i64 %env8363827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366698 = getelementptr inbounds i64, i64* %envptr8366697, i64 3            ; &envptr8366697[3]
  %kV4$new = load i64, i64* %envptr8366698, align 8                                  ; load; *envptr8366698
  %envptr8366699 = inttoptr i64 %env8363827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366700 = getelementptr inbounds i64, i64* %envptr8366699, i64 2            ; &envptr8366699[2]
  %aCS$tail = load i64, i64* %envptr8366700, align 8                                 ; load; *envptr8366700
  %envptr8366701 = inttoptr i64 %env8363827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366702 = getelementptr inbounds i64, i64* %envptr8366701, i64 1            ; &envptr8366701[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366702, align 8                      ; load; *envptr8366702
  %_958360167 = call i64 @prim_car(i64 %rvp8362416)                                  ; call prim_car
  %rvp8362415 = call i64 @prim_cdr(i64 %rvp8362416)                                  ; call prim_cdr
  %iIP$_95t = call i64 @prim_car(i64 %rvp8362415)                                    ; call prim_car
  %na8362333 = call i64 @prim_cdr(i64 %rvp8362415)                                   ; call prim_cdr
  %cloptr8366703 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8366704 = getelementptr inbounds i64, i64* %cloptr8366703, i64 0              ; &cloptr8366703[0]
  %f8366705 = ptrtoint void(i64,i64)* @lam8363824 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366705, i64* %eptr8366704                                             ; store fptr
  %arg8360875 = ptrtoint i64* %cloptr8366703 to i64                                  ; closure cast; i64* -> i64
  %cloptr8366706 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366708 = getelementptr inbounds i64, i64* %cloptr8366706, i64 1              ; &eptr8366708[1]
  %eptr8366709 = getelementptr inbounds i64, i64* %cloptr8366706, i64 2              ; &eptr8366709[2]
  %eptr8366710 = getelementptr inbounds i64, i64* %cloptr8366706, i64 3              ; &eptr8366710[3]
  %eptr8366711 = getelementptr inbounds i64, i64* %cloptr8366706, i64 4              ; &eptr8366711[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366708                                  ; *eptr8366708 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366709                                             ; *eptr8366709 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366710                                              ; *eptr8366710 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366711                                          ; *eptr8366711 = %cont8360165
  %eptr8366707 = getelementptr inbounds i64, i64* %cloptr8366706, i64 0              ; &cloptr8366706[0]
  %f8366712 = ptrtoint void(i64,i64)* @lam8363820 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366712, i64* %eptr8366707                                             ; store fptr
  %arg8360874 = ptrtoint i64* %cloptr8366706 to i64                                  ; closure cast; i64* -> i64
  %rva8362414 = add i64 0, 0                                                         ; quoted ()
  %rva8362413 = call i64 @prim_cons(i64 %arg8360874, i64 %rva8362414)                ; call prim_cons
  %cloptr8366713 = inttoptr i64 %arg8360875 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366714 = getelementptr inbounds i64, i64* %cloptr8366713, i64 0             ; &cloptr8366713[0]
  %f8366716 = load i64, i64* %i0ptr8366714, align 8                                  ; load; *i0ptr8366714
  %fptr8366715 = inttoptr i64 %f8366716 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366715(i64 %arg8360875, i64 %rva8362413)           ; tail call
  ret void
}


define void @lam8363824(i64 %env8363825, i64 %JCH$lst8360180) {
  %cont8360179 = call i64 @prim_car(i64 %JCH$lst8360180)                             ; call prim_car
  %JCH$lst = call i64 @prim_cdr(i64 %JCH$lst8360180)                                 ; call prim_cdr
  %arg8360879 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362336 = add i64 0, 0                                                         ; quoted ()
  %rva8362335 = call i64 @prim_cons(i64 %JCH$lst, i64 %rva8362336)                   ; call prim_cons
  %rva8362334 = call i64 @prim_cons(i64 %arg8360879, i64 %rva8362335)                ; call prim_cons
  %cloptr8366717 = inttoptr i64 %cont8360179 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366718 = getelementptr inbounds i64, i64* %cloptr8366717, i64 0             ; &cloptr8366717[0]
  %f8366720 = load i64, i64* %i0ptr8366718, align 8                                  ; load; *i0ptr8366718
  %fptr8366719 = inttoptr i64 %f8366720 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366719(i64 %cont8360179, i64 %rva8362334)          ; tail call
  ret void
}


define void @lam8363820(i64 %env8363821, i64 %rvp8362412) {
  %envptr8366721 = inttoptr i64 %env8363821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366722 = getelementptr inbounds i64, i64* %envptr8366721, i64 4            ; &envptr8366721[4]
  %cont8360165 = load i64, i64* %envptr8366722, align 8                              ; load; *envptr8366722
  %envptr8366723 = inttoptr i64 %env8363821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366724 = getelementptr inbounds i64, i64* %envptr8366723, i64 3            ; &envptr8366723[3]
  %kV4$new = load i64, i64* %envptr8366724, align 8                                  ; load; *envptr8366724
  %envptr8366725 = inttoptr i64 %env8363821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366726 = getelementptr inbounds i64, i64* %envptr8366725, i64 2            ; &envptr8366725[2]
  %aCS$tail = load i64, i64* %envptr8366726, align 8                                 ; load; *envptr8366726
  %envptr8366727 = inttoptr i64 %env8363821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366728 = getelementptr inbounds i64, i64* %envptr8366727, i64 1            ; &envptr8366727[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366728, align 8                      ; load; *envptr8366728
  %_958360177 = call i64 @prim_car(i64 %rvp8362412)                                  ; call prim_car
  %rvp8362411 = call i64 @prim_cdr(i64 %rvp8362412)                                  ; call prim_cdr
  %a8360055 = call i64 @prim_car(i64 %rvp8362411)                                    ; call prim_car
  %na8362338 = call i64 @prim_cdr(i64 %rvp8362411)                                   ; call prim_cdr
  %arg8360882 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360178 = call i64 @prim_make_45vector(i64 %arg8360882, i64 %a8360055)     ; call prim_make_45vector
  %cloptr8366729 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366731 = getelementptr inbounds i64, i64* %cloptr8366729, i64 1              ; &eptr8366731[1]
  %eptr8366732 = getelementptr inbounds i64, i64* %cloptr8366729, i64 2              ; &eptr8366732[2]
  %eptr8366733 = getelementptr inbounds i64, i64* %cloptr8366729, i64 3              ; &eptr8366733[3]
  %eptr8366734 = getelementptr inbounds i64, i64* %cloptr8366729, i64 4              ; &eptr8366734[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366731                                  ; *eptr8366731 = %Z9D$_37wind_45stack
  store i64 %aCS$tail, i64* %eptr8366732                                             ; *eptr8366732 = %aCS$tail
  store i64 %kV4$new, i64* %eptr8366733                                              ; *eptr8366733 = %kV4$new
  store i64 %cont8360165, i64* %eptr8366734                                          ; *eptr8366734 = %cont8360165
  %eptr8366730 = getelementptr inbounds i64, i64* %cloptr8366729, i64 0              ; &cloptr8366729[0]
  %f8366735 = ptrtoint void(i64,i64)* @lam8363817 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366735, i64* %eptr8366730                                             ; store fptr
  %arg8360885 = ptrtoint i64* %cloptr8366729 to i64                                  ; closure cast; i64* -> i64
  %arg8360884 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362410 = add i64 0, 0                                                         ; quoted ()
  %rva8362409 = call i64 @prim_cons(i64 %retprim8360178, i64 %rva8362410)            ; call prim_cons
  %rva8362408 = call i64 @prim_cons(i64 %arg8360884, i64 %rva8362409)                ; call prim_cons
  %cloptr8366736 = inttoptr i64 %arg8360885 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366737 = getelementptr inbounds i64, i64* %cloptr8366736, i64 0             ; &cloptr8366736[0]
  %f8366739 = load i64, i64* %i0ptr8366737, align 8                                  ; load; *i0ptr8366737
  %fptr8366738 = inttoptr i64 %f8366739 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366738(i64 %arg8360885, i64 %rva8362408)           ; tail call
  ret void
}


define void @lam8363817(i64 %env8363818, i64 %rvp8362407) {
  %envptr8366740 = inttoptr i64 %env8363818 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366741 = getelementptr inbounds i64, i64* %envptr8366740, i64 4            ; &envptr8366740[4]
  %cont8360165 = load i64, i64* %envptr8366741, align 8                              ; load; *envptr8366741
  %envptr8366742 = inttoptr i64 %env8363818 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366743 = getelementptr inbounds i64, i64* %envptr8366742, i64 3            ; &envptr8366742[3]
  %kV4$new = load i64, i64* %envptr8366743, align 8                                  ; load; *envptr8366743
  %envptr8366744 = inttoptr i64 %env8363818 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366745 = getelementptr inbounds i64, i64* %envptr8366744, i64 2            ; &envptr8366744[2]
  %aCS$tail = load i64, i64* %envptr8366745, align 8                                 ; load; *envptr8366745
  %envptr8366746 = inttoptr i64 %env8363818 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366747 = getelementptr inbounds i64, i64* %envptr8366746, i64 1            ; &envptr8366746[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366747, align 8                      ; load; *envptr8366747
  %_958360168 = call i64 @prim_car(i64 %rvp8362407)                                  ; call prim_car
  %rvp8362406 = call i64 @prim_cdr(i64 %rvp8362407)                                  ; call prim_cdr
  %prl$f = call i64 @prim_car(i64 %rvp8362406)                                       ; call prim_car
  %na8362340 = call i64 @prim_cdr(i64 %rvp8362406)                                   ; call prim_cdr
  %cloptr8366748 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366750 = getelementptr inbounds i64, i64* %cloptr8366748, i64 1              ; &eptr8366750[1]
  %eptr8366751 = getelementptr inbounds i64, i64* %cloptr8366748, i64 2              ; &eptr8366751[2]
  %eptr8366752 = getelementptr inbounds i64, i64* %cloptr8366748, i64 3              ; &eptr8366752[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366750                                  ; *eptr8366750 = %Z9D$_37wind_45stack
  store i64 %prl$f, i64* %eptr8366751                                                ; *eptr8366751 = %prl$f
  store i64 %aCS$tail, i64* %eptr8366752                                             ; *eptr8366752 = %aCS$tail
  %eptr8366749 = getelementptr inbounds i64, i64* %cloptr8366748, i64 0              ; &cloptr8366748[0]
  %f8366753 = ptrtoint void(i64,i64)* @lam8363815 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366753, i64* %eptr8366749                                             ; store fptr
  %mtP$f8359930 = ptrtoint i64* %cloptr8366748 to i64                                ; closure cast; i64* -> i64
  %arg8360952 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %O4n$_95t = call i64 @prim_vector_45set_33(i64 %prl$f, i64 %arg8360952, i64 %mtP$f8359930); call prim_vector_45set_33
  %arg8360954 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360067 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8360954)               ; call prim_vector_45ref
  %a8360068 = call i64 @prim_procedure_63(i64 %a8360067)                             ; call prim_procedure_63
  %cmp8366754 = icmp eq i64 %a8360068, 15                                            ; false?
  br i1 %cmp8366754, label %else8366756, label %then8366755                          ; if

then8366755:
  %arg8360957 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360069 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8360957)               ; call prim_vector_45ref
  %rva8362402 = add i64 0, 0                                                         ; quoted ()
  %rva8362401 = call i64 @prim_cons(i64 %kV4$new, i64 %rva8362402)                   ; call prim_cons
  %rva8362400 = call i64 @prim_cons(i64 %cont8360165, i64 %rva8362401)               ; call prim_cons
  %cloptr8366757 = inttoptr i64 %a8360069 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366758 = getelementptr inbounds i64, i64* %cloptr8366757, i64 0             ; &cloptr8366757[0]
  %f8366760 = load i64, i64* %i0ptr8366758, align 8                                  ; load; *i0ptr8366758
  %fptr8366759 = inttoptr i64 %f8366760 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366759(i64 %a8360069, i64 %rva8362400)             ; tail call
  ret void

else8366756:
  %arg8360962 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366761, i32 0, i32 0)); quoted string
  %retprim8360176 = call i64 @prim_halt(i64 %arg8360962)                             ; call prim_halt
  %arg8360964 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362405 = add i64 0, 0                                                         ; quoted ()
  %rva8362404 = call i64 @prim_cons(i64 %retprim8360176, i64 %rva8362405)            ; call prim_cons
  %rva8362403 = call i64 @prim_cons(i64 %arg8360964, i64 %rva8362404)                ; call prim_cons
  %cloptr8366762 = inttoptr i64 %cont8360165 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366763 = getelementptr inbounds i64, i64* %cloptr8366762, i64 0             ; &cloptr8366762[0]
  %f8366765 = load i64, i64* %i0ptr8366763, align 8                                  ; load; *i0ptr8366763
  %fptr8366764 = inttoptr i64 %f8366765 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366764(i64 %cont8360165, i64 %rva8362403)          ; tail call
  ret void
}


define void @lam8363815(i64 %env8363816, i64 %rvp8362399) {
  %envptr8366766 = inttoptr i64 %env8363816 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366767 = getelementptr inbounds i64, i64* %envptr8366766, i64 3            ; &envptr8366766[3]
  %aCS$tail = load i64, i64* %envptr8366767, align 8                                 ; load; *envptr8366767
  %envptr8366768 = inttoptr i64 %env8363816 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366769 = getelementptr inbounds i64, i64* %envptr8366768, i64 2            ; &envptr8366768[2]
  %prl$f = load i64, i64* %envptr8366769, align 8                                    ; load; *envptr8366769
  %envptr8366770 = inttoptr i64 %env8363816 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366771 = getelementptr inbounds i64, i64* %envptr8366770, i64 1            ; &envptr8366770[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366771, align 8                      ; load; *envptr8366771
  %cont8360169 = call i64 @prim_car(i64 %rvp8362399)                                 ; call prim_car
  %rvp8362398 = call i64 @prim_cdr(i64 %rvp8362399)                                  ; call prim_cdr
  %Zgr$l = call i64 @prim_car(i64 %rvp8362398)                                       ; call prim_car
  %na8362342 = call i64 @prim_cdr(i64 %rvp8362398)                                   ; call prim_cdr
  %a8360056 = call i64 @prim_eq_63(i64 %Zgr$l, i64 %aCS$tail)                        ; call prim_eq_63
  %a8360057 = call i64 @prim_not(i64 %a8360056)                                      ; call prim_not
  %cmp8366772 = icmp eq i64 %a8360057, 15                                            ; false?
  br i1 %cmp8366772, label %else8366774, label %then8366773                          ; if

then8366773:
  %arg8360889 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360058 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8360889)               ; call prim_vector_45ref
  %a8360059 = call i64 @prim_procedure_63(i64 %a8360058)                             ; call prim_procedure_63
  %cmp8366775 = icmp eq i64 %a8360059, 15                                            ; false?
  br i1 %cmp8366775, label %else8366777, label %then8366776                          ; if

then8366776:
  %arg8360892 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360060 = call i64 @prim_vector_45ref(i64 %prl$f, i64 %arg8360892)               ; call prim_vector_45ref
  %a8360061 = call i64 @prim_cdr(i64 %Zgr$l)                                         ; call prim_cdr
  %cloptr8366778 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366780 = getelementptr inbounds i64, i64* %cloptr8366778, i64 1              ; &eptr8366780[1]
  %eptr8366781 = getelementptr inbounds i64, i64* %cloptr8366778, i64 2              ; &eptr8366781[2]
  %eptr8366782 = getelementptr inbounds i64, i64* %cloptr8366778, i64 3              ; &eptr8366782[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366780                                  ; *eptr8366780 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366781                                                ; *eptr8366781 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366782                                          ; *eptr8366782 = %cont8360169
  %eptr8366779 = getelementptr inbounds i64, i64* %cloptr8366778, i64 0              ; &cloptr8366778[0]
  %f8366783 = ptrtoint void(i64,i64)* @lam8363790 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366783, i64* %eptr8366779                                             ; store fptr
  %arg8360896 = ptrtoint i64* %cloptr8366778 to i64                                  ; closure cast; i64* -> i64
  %rva8362368 = add i64 0, 0                                                         ; quoted ()
  %rva8362367 = call i64 @prim_cons(i64 %a8360061, i64 %rva8362368)                  ; call prim_cons
  %rva8362366 = call i64 @prim_cons(i64 %arg8360896, i64 %rva8362367)                ; call prim_cons
  %cloptr8366784 = inttoptr i64 %a8360060 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366785 = getelementptr inbounds i64, i64* %cloptr8366784, i64 0             ; &cloptr8366784[0]
  %f8366787 = load i64, i64* %i0ptr8366785, align 8                                  ; load; *i0ptr8366785
  %fptr8366786 = inttoptr i64 %f8366787 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366786(i64 %a8360060, i64 %rva8362366)             ; tail call
  ret void

else8366777:
  %arg8360921 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366788, i32 0, i32 0)); quoted string
  %retprim8360174 = call i64 @prim_halt(i64 %arg8360921)                             ; call prim_halt
  %cloptr8366789 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366791 = getelementptr inbounds i64, i64* %cloptr8366789, i64 1              ; &eptr8366791[1]
  %eptr8366792 = getelementptr inbounds i64, i64* %cloptr8366789, i64 2              ; &eptr8366792[2]
  %eptr8366793 = getelementptr inbounds i64, i64* %cloptr8366789, i64 3              ; &eptr8366793[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366791                                  ; *eptr8366791 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366792                                                ; *eptr8366792 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366793                                          ; *eptr8366793 = %cont8360169
  %eptr8366790 = getelementptr inbounds i64, i64* %cloptr8366789, i64 0              ; &cloptr8366789[0]
  %f8366794 = ptrtoint void(i64,i64)* @lam8363809 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366794, i64* %eptr8366790                                             ; store fptr
  %arg8360924 = ptrtoint i64* %cloptr8366789 to i64                                  ; closure cast; i64* -> i64
  %arg8360923 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362394 = add i64 0, 0                                                         ; quoted ()
  %rva8362393 = call i64 @prim_cons(i64 %retprim8360174, i64 %rva8362394)            ; call prim_cons
  %rva8362392 = call i64 @prim_cons(i64 %arg8360923, i64 %rva8362393)                ; call prim_cons
  %cloptr8366795 = inttoptr i64 %arg8360924 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366796 = getelementptr inbounds i64, i64* %cloptr8366795, i64 0             ; &cloptr8366795[0]
  %f8366798 = load i64, i64* %i0ptr8366796, align 8                                  ; load; *i0ptr8366796
  %fptr8366797 = inttoptr i64 %f8366798 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366797(i64 %arg8360924, i64 %rva8362392)           ; tail call
  ret void

else8366774:
  %retprim8360175 = call i64 @prim_void()                                            ; call prim_void
  %arg8360949 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362397 = add i64 0, 0                                                         ; quoted ()
  %rva8362396 = call i64 @prim_cons(i64 %retprim8360175, i64 %rva8362397)            ; call prim_cons
  %rva8362395 = call i64 @prim_cons(i64 %arg8360949, i64 %rva8362396)                ; call prim_cons
  %cloptr8366799 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366800 = getelementptr inbounds i64, i64* %cloptr8366799, i64 0             ; &cloptr8366799[0]
  %f8366802 = load i64, i64* %i0ptr8366800, align 8                                  ; load; *i0ptr8366800
  %fptr8366801 = inttoptr i64 %f8366802 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366801(i64 %cont8360169, i64 %rva8362395)          ; tail call
  ret void
}


define void @lam8363809(i64 %env8363810, i64 %rvp8362391) {
  %envptr8366803 = inttoptr i64 %env8363810 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366804 = getelementptr inbounds i64, i64* %envptr8366803, i64 3            ; &envptr8366803[3]
  %cont8360169 = load i64, i64* %envptr8366804, align 8                              ; load; *envptr8366804
  %envptr8366805 = inttoptr i64 %env8363810 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366806 = getelementptr inbounds i64, i64* %envptr8366805, i64 2            ; &envptr8366805[2]
  %Zgr$l = load i64, i64* %envptr8366806, align 8                                    ; load; *envptr8366806
  %envptr8366807 = inttoptr i64 %env8363810 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366808 = getelementptr inbounds i64, i64* %envptr8366807, i64 1            ; &envptr8366807[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366808, align 8                      ; load; *envptr8366808
  %_958360170 = call i64 @prim_car(i64 %rvp8362391)                                  ; call prim_car
  %rvp8362390 = call i64 @prim_cdr(i64 %rvp8362391)                                  ; call prim_cdr
  %VFU$_95t = call i64 @prim_car(i64 %rvp8362390)                                    ; call prim_car
  %na8362370 = call i64 @prim_cdr(i64 %rvp8362390)                                   ; call prim_cdr
  %a8360062 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360063 = call i64 @prim_car(i64 %a8360062)                                      ; call prim_car
  %a8360064 = call i64 @prim_procedure_63(i64 %a8360063)                             ; call prim_procedure_63
  %cmp8366809 = icmp eq i64 %a8360064, 15                                            ; false?
  br i1 %cmp8366809, label %else8366811, label %then8366810                          ; if

then8366810:
  %a8360065 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360066 = call i64 @prim_car(i64 %a8360065)                                      ; call prim_car
  %cloptr8366812 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366814 = getelementptr inbounds i64, i64* %cloptr8366812, i64 1              ; &eptr8366814[1]
  %eptr8366815 = getelementptr inbounds i64, i64* %cloptr8366812, i64 2              ; &eptr8366815[2]
  %eptr8366816 = getelementptr inbounds i64, i64* %cloptr8366812, i64 3              ; &eptr8366816[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366814                                  ; *eptr8366814 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366815                                                ; *eptr8366815 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366816                                          ; *eptr8366816 = %cont8360169
  %eptr8366813 = getelementptr inbounds i64, i64* %cloptr8366812, i64 0              ; &cloptr8366812[0]
  %f8366817 = ptrtoint void(i64,i64)* @lam8363799 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366817, i64* %eptr8366813                                             ; store fptr
  %arg8360930 = ptrtoint i64* %cloptr8366812 to i64                                  ; closure cast; i64* -> i64
  %rva8362379 = add i64 0, 0                                                         ; quoted ()
  %rva8362378 = call i64 @prim_cons(i64 %arg8360930, i64 %rva8362379)                ; call prim_cons
  %cloptr8366818 = inttoptr i64 %a8360066 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366819 = getelementptr inbounds i64, i64* %cloptr8366818, i64 0             ; &cloptr8366818[0]
  %f8366821 = load i64, i64* %i0ptr8366819, align 8                                  ; load; *i0ptr8366819
  %fptr8366820 = inttoptr i64 %f8366821 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366820(i64 %a8360066, i64 %rva8362378)             ; tail call
  ret void

else8366811:
  %arg8360938 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366822, i32 0, i32 0)); quoted string
  %retprim8360173 = call i64 @prim_halt(i64 %arg8360938)                             ; call prim_halt
  %cloptr8366823 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366825 = getelementptr inbounds i64, i64* %cloptr8366823, i64 1              ; &eptr8366825[1]
  %eptr8366826 = getelementptr inbounds i64, i64* %cloptr8366823, i64 2              ; &eptr8366826[2]
  %eptr8366827 = getelementptr inbounds i64, i64* %cloptr8366823, i64 3              ; &eptr8366827[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366825                                  ; *eptr8366825 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366826                                                ; *eptr8366826 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366827                                          ; *eptr8366827 = %cont8360169
  %eptr8366824 = getelementptr inbounds i64, i64* %cloptr8366823, i64 0              ; &cloptr8366823[0]
  %f8366828 = ptrtoint void(i64,i64)* @lam8363806 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366828, i64* %eptr8366824                                             ; store fptr
  %arg8360941 = ptrtoint i64* %cloptr8366823 to i64                                  ; closure cast; i64* -> i64
  %arg8360940 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362389 = add i64 0, 0                                                         ; quoted ()
  %rva8362388 = call i64 @prim_cons(i64 %retprim8360173, i64 %rva8362389)            ; call prim_cons
  %rva8362387 = call i64 @prim_cons(i64 %arg8360940, i64 %rva8362388)                ; call prim_cons
  %cloptr8366829 = inttoptr i64 %arg8360941 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366830 = getelementptr inbounds i64, i64* %cloptr8366829, i64 0             ; &cloptr8366829[0]
  %f8366832 = load i64, i64* %i0ptr8366830, align 8                                  ; load; *i0ptr8366830
  %fptr8366831 = inttoptr i64 %f8366832 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366831(i64 %arg8360941, i64 %rva8362387)           ; tail call
  ret void
}


define void @lam8363806(i64 %env8363807, i64 %rvp8362386) {
  %envptr8366833 = inttoptr i64 %env8363807 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366834 = getelementptr inbounds i64, i64* %envptr8366833, i64 3            ; &envptr8366833[3]
  %cont8360169 = load i64, i64* %envptr8366834, align 8                              ; load; *envptr8366834
  %envptr8366835 = inttoptr i64 %env8363807 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366836 = getelementptr inbounds i64, i64* %envptr8366835, i64 2            ; &envptr8366835[2]
  %Zgr$l = load i64, i64* %envptr8366836, align 8                                    ; load; *envptr8366836
  %envptr8366837 = inttoptr i64 %env8363807 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366838 = getelementptr inbounds i64, i64* %envptr8366837, i64 1            ; &envptr8366837[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366838, align 8                      ; load; *envptr8366838
  %_958360171 = call i64 @prim_car(i64 %rvp8362386)                                  ; call prim_car
  %rvp8362385 = call i64 @prim_cdr(i64 %rvp8362386)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362385)                                    ; call prim_car
  %na8362381 = call i64 @prim_cdr(i64 %rvp8362385)                                   ; call prim_cdr
  %arg8360943 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8360943, i64 %Zgr$l); call prim_vector_45set_33
  %arg8360946 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362384 = add i64 0, 0                                                         ; quoted ()
  %rva8362383 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362384)            ; call prim_cons
  %rva8362382 = call i64 @prim_cons(i64 %arg8360946, i64 %rva8362383)                ; call prim_cons
  %cloptr8366839 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366840 = getelementptr inbounds i64, i64* %cloptr8366839, i64 0             ; &cloptr8366839[0]
  %f8366842 = load i64, i64* %i0ptr8366840, align 8                                  ; load; *i0ptr8366840
  %fptr8366841 = inttoptr i64 %f8366842 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366841(i64 %cont8360169, i64 %rva8362382)          ; tail call
  ret void
}


define void @lam8363799(i64 %env8363800, i64 %rvp8362377) {
  %envptr8366843 = inttoptr i64 %env8363800 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366844 = getelementptr inbounds i64, i64* %envptr8366843, i64 3            ; &envptr8366843[3]
  %cont8360169 = load i64, i64* %envptr8366844, align 8                              ; load; *envptr8366844
  %envptr8366845 = inttoptr i64 %env8363800 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366846 = getelementptr inbounds i64, i64* %envptr8366845, i64 2            ; &envptr8366845[2]
  %Zgr$l = load i64, i64* %envptr8366846, align 8                                    ; load; *envptr8366846
  %envptr8366847 = inttoptr i64 %env8363800 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366848 = getelementptr inbounds i64, i64* %envptr8366847, i64 1            ; &envptr8366847[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366848, align 8                      ; load; *envptr8366848
  %_958360171 = call i64 @prim_car(i64 %rvp8362377)                                  ; call prim_car
  %rvp8362376 = call i64 @prim_cdr(i64 %rvp8362377)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362376)                                    ; call prim_car
  %na8362372 = call i64 @prim_cdr(i64 %rvp8362376)                                   ; call prim_cdr
  %arg8360933 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8360933, i64 %Zgr$l); call prim_vector_45set_33
  %arg8360936 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362375 = add i64 0, 0                                                         ; quoted ()
  %rva8362374 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362375)            ; call prim_cons
  %rva8362373 = call i64 @prim_cons(i64 %arg8360936, i64 %rva8362374)                ; call prim_cons
  %cloptr8366849 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366850 = getelementptr inbounds i64, i64* %cloptr8366849, i64 0             ; &cloptr8366849[0]
  %f8366852 = load i64, i64* %i0ptr8366850, align 8                                  ; load; *i0ptr8366850
  %fptr8366851 = inttoptr i64 %f8366852 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366851(i64 %cont8360169, i64 %rva8362373)          ; tail call
  ret void
}


define void @lam8363790(i64 %env8363791, i64 %rvp8362365) {
  %envptr8366853 = inttoptr i64 %env8363791 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366854 = getelementptr inbounds i64, i64* %envptr8366853, i64 3            ; &envptr8366853[3]
  %cont8360169 = load i64, i64* %envptr8366854, align 8                              ; load; *envptr8366854
  %envptr8366855 = inttoptr i64 %env8363791 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366856 = getelementptr inbounds i64, i64* %envptr8366855, i64 2            ; &envptr8366855[2]
  %Zgr$l = load i64, i64* %envptr8366856, align 8                                    ; load; *envptr8366856
  %envptr8366857 = inttoptr i64 %env8363791 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366858 = getelementptr inbounds i64, i64* %envptr8366857, i64 1            ; &envptr8366857[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366858, align 8                      ; load; *envptr8366858
  %_958360170 = call i64 @prim_car(i64 %rvp8362365)                                  ; call prim_car
  %rvp8362364 = call i64 @prim_cdr(i64 %rvp8362365)                                  ; call prim_cdr
  %VFU$_95t = call i64 @prim_car(i64 %rvp8362364)                                    ; call prim_car
  %na8362344 = call i64 @prim_cdr(i64 %rvp8362364)                                   ; call prim_cdr
  %a8360062 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360063 = call i64 @prim_car(i64 %a8360062)                                      ; call prim_car
  %a8360064 = call i64 @prim_procedure_63(i64 %a8360063)                             ; call prim_procedure_63
  %cmp8366859 = icmp eq i64 %a8360064, 15                                            ; false?
  br i1 %cmp8366859, label %else8366861, label %then8366860                          ; if

then8366860:
  %a8360065 = call i64 @prim_car(i64 %Zgr$l)                                         ; call prim_car
  %a8360066 = call i64 @prim_car(i64 %a8360065)                                      ; call prim_car
  %cloptr8366862 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366864 = getelementptr inbounds i64, i64* %cloptr8366862, i64 1              ; &eptr8366864[1]
  %eptr8366865 = getelementptr inbounds i64, i64* %cloptr8366862, i64 2              ; &eptr8366865[2]
  %eptr8366866 = getelementptr inbounds i64, i64* %cloptr8366862, i64 3              ; &eptr8366866[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366864                                  ; *eptr8366864 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366865                                                ; *eptr8366865 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366866                                          ; *eptr8366866 = %cont8360169
  %eptr8366863 = getelementptr inbounds i64, i64* %cloptr8366862, i64 0              ; &cloptr8366862[0]
  %f8366867 = ptrtoint void(i64,i64)* @lam8363780 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366867, i64* %eptr8366863                                             ; store fptr
  %arg8360903 = ptrtoint i64* %cloptr8366862 to i64                                  ; closure cast; i64* -> i64
  %rva8362353 = add i64 0, 0                                                         ; quoted ()
  %rva8362352 = call i64 @prim_cons(i64 %arg8360903, i64 %rva8362353)                ; call prim_cons
  %cloptr8366868 = inttoptr i64 %a8360066 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366869 = getelementptr inbounds i64, i64* %cloptr8366868, i64 0             ; &cloptr8366868[0]
  %f8366871 = load i64, i64* %i0ptr8366869, align 8                                  ; load; *i0ptr8366869
  %fptr8366870 = inttoptr i64 %f8366871 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366870(i64 %a8360066, i64 %rva8362352)             ; tail call
  ret void

else8366861:
  %arg8360911 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366872, i32 0, i32 0)); quoted string
  %retprim8360173 = call i64 @prim_halt(i64 %arg8360911)                             ; call prim_halt
  %cloptr8366873 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366875 = getelementptr inbounds i64, i64* %cloptr8366873, i64 1              ; &eptr8366875[1]
  %eptr8366876 = getelementptr inbounds i64, i64* %cloptr8366873, i64 2              ; &eptr8366876[2]
  %eptr8366877 = getelementptr inbounds i64, i64* %cloptr8366873, i64 3              ; &eptr8366877[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366875                                  ; *eptr8366875 = %Z9D$_37wind_45stack
  store i64 %Zgr$l, i64* %eptr8366876                                                ; *eptr8366876 = %Zgr$l
  store i64 %cont8360169, i64* %eptr8366877                                          ; *eptr8366877 = %cont8360169
  %eptr8366874 = getelementptr inbounds i64, i64* %cloptr8366873, i64 0              ; &cloptr8366873[0]
  %f8366878 = ptrtoint void(i64,i64)* @lam8363787 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366878, i64* %eptr8366874                                             ; store fptr
  %arg8360914 = ptrtoint i64* %cloptr8366873 to i64                                  ; closure cast; i64* -> i64
  %arg8360913 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362363 = add i64 0, 0                                                         ; quoted ()
  %rva8362362 = call i64 @prim_cons(i64 %retprim8360173, i64 %rva8362363)            ; call prim_cons
  %rva8362361 = call i64 @prim_cons(i64 %arg8360913, i64 %rva8362362)                ; call prim_cons
  %cloptr8366879 = inttoptr i64 %arg8360914 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366880 = getelementptr inbounds i64, i64* %cloptr8366879, i64 0             ; &cloptr8366879[0]
  %f8366882 = load i64, i64* %i0ptr8366880, align 8                                  ; load; *i0ptr8366880
  %fptr8366881 = inttoptr i64 %f8366882 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366881(i64 %arg8360914, i64 %rva8362361)           ; tail call
  ret void
}


define void @lam8363787(i64 %env8363788, i64 %rvp8362360) {
  %envptr8366883 = inttoptr i64 %env8363788 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366884 = getelementptr inbounds i64, i64* %envptr8366883, i64 3            ; &envptr8366883[3]
  %cont8360169 = load i64, i64* %envptr8366884, align 8                              ; load; *envptr8366884
  %envptr8366885 = inttoptr i64 %env8363788 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366886 = getelementptr inbounds i64, i64* %envptr8366885, i64 2            ; &envptr8366885[2]
  %Zgr$l = load i64, i64* %envptr8366886, align 8                                    ; load; *envptr8366886
  %envptr8366887 = inttoptr i64 %env8363788 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366888 = getelementptr inbounds i64, i64* %envptr8366887, i64 1            ; &envptr8366887[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366888, align 8                      ; load; *envptr8366888
  %_958360171 = call i64 @prim_car(i64 %rvp8362360)                                  ; call prim_car
  %rvp8362359 = call i64 @prim_cdr(i64 %rvp8362360)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362359)                                    ; call prim_car
  %na8362355 = call i64 @prim_cdr(i64 %rvp8362359)                                   ; call prim_cdr
  %arg8360916 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8360916, i64 %Zgr$l); call prim_vector_45set_33
  %arg8360919 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362358 = add i64 0, 0                                                         ; quoted ()
  %rva8362357 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362358)            ; call prim_cons
  %rva8362356 = call i64 @prim_cons(i64 %arg8360919, i64 %rva8362357)                ; call prim_cons
  %cloptr8366889 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366890 = getelementptr inbounds i64, i64* %cloptr8366889, i64 0             ; &cloptr8366889[0]
  %f8366892 = load i64, i64* %i0ptr8366890, align 8                                  ; load; *i0ptr8366890
  %fptr8366891 = inttoptr i64 %f8366892 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366891(i64 %cont8360169, i64 %rva8362356)          ; tail call
  ret void
}


define void @lam8363780(i64 %env8363781, i64 %rvp8362351) {
  %envptr8366893 = inttoptr i64 %env8363781 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366894 = getelementptr inbounds i64, i64* %envptr8366893, i64 3            ; &envptr8366893[3]
  %cont8360169 = load i64, i64* %envptr8366894, align 8                              ; load; *envptr8366894
  %envptr8366895 = inttoptr i64 %env8363781 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366896 = getelementptr inbounds i64, i64* %envptr8366895, i64 2            ; &envptr8366895[2]
  %Zgr$l = load i64, i64* %envptr8366896, align 8                                    ; load; *envptr8366896
  %envptr8366897 = inttoptr i64 %env8363781 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366898 = getelementptr inbounds i64, i64* %envptr8366897, i64 1            ; &envptr8366897[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366898, align 8                      ; load; *envptr8366898
  %_958360171 = call i64 @prim_car(i64 %rvp8362351)                                  ; call prim_car
  %rvp8362350 = call i64 @prim_cdr(i64 %rvp8362351)                                  ; call prim_cdr
  %Fth$_95t = call i64 @prim_car(i64 %rvp8362350)                                    ; call prim_car
  %na8362346 = call i64 @prim_cdr(i64 %rvp8362350)                                   ; call prim_cdr
  %arg8360906 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360172 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8360906, i64 %Zgr$l); call prim_vector_45set_33
  %arg8360909 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362349 = add i64 0, 0                                                         ; quoted ()
  %rva8362348 = call i64 @prim_cons(i64 %retprim8360172, i64 %rva8362349)            ; call prim_cons
  %rva8362347 = call i64 @prim_cons(i64 %arg8360909, i64 %rva8362348)                ; call prim_cons
  %cloptr8366899 = inttoptr i64 %cont8360169 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8366900 = getelementptr inbounds i64, i64* %cloptr8366899, i64 0             ; &cloptr8366899[0]
  %f8366902 = load i64, i64* %i0ptr8366900, align 8                                  ; load; *i0ptr8366900
  %fptr8366901 = inttoptr i64 %f8366902 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366901(i64 %cont8360169, i64 %rva8362347)          ; tail call
  ret void
}


define void @lam8363758(i64 %env8363759, i64 %rvp8362928) {
  %envptr8366903 = inttoptr i64 %env8363759 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366904 = getelementptr inbounds i64, i64* %envptr8366903, i64 1            ; &envptr8366903[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366904, align 8                      ; load; *envptr8366904
  %cont8360196 = call i64 @prim_car(i64 %rvp8362928)                                 ; call prim_car
  %rvp8362927 = call i64 @prim_cdr(i64 %rvp8362928)                                  ; call prim_cdr
  %vY6$pre = call i64 @prim_car(i64 %rvp8362927)                                     ; call prim_car
  %rvp8362926 = call i64 @prim_cdr(i64 %rvp8362927)                                  ; call prim_cdr
  %oqF$body = call i64 @prim_car(i64 %rvp8362926)                                    ; call prim_car
  %rvp8362925 = call i64 @prim_cdr(i64 %rvp8362926)                                  ; call prim_cdr
  %Ipe$post = call i64 @prim_car(i64 %rvp8362925)                                    ; call prim_car
  %na8362767 = call i64 @prim_cdr(i64 %rvp8362925)                                   ; call prim_cdr
  %a8360070 = call i64 @prim_procedure_63(i64 %vY6$pre)                              ; call prim_procedure_63
  %cmp8366905 = icmp eq i64 %a8360070, 15                                            ; false?
  br i1 %cmp8366905, label %else8366907, label %then8366906                          ; if

then8366906:
  %cloptr8366908 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr8366910 = getelementptr inbounds i64, i64* %cloptr8366908, i64 1              ; &eptr8366910[1]
  %eptr8366911 = getelementptr inbounds i64, i64* %cloptr8366908, i64 2              ; &eptr8366911[2]
  %eptr8366912 = getelementptr inbounds i64, i64* %cloptr8366908, i64 3              ; &eptr8366912[3]
  %eptr8366913 = getelementptr inbounds i64, i64* %cloptr8366908, i64 4              ; &eptr8366913[4]
  %eptr8366914 = getelementptr inbounds i64, i64* %cloptr8366908, i64 5              ; &eptr8366914[5]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366910                                  ; *eptr8366910 = %Z9D$_37wind_45stack
  store i64 %vY6$pre, i64* %eptr8366911                                              ; *eptr8366911 = %vY6$pre
  store i64 %oqF$body, i64* %eptr8366912                                             ; *eptr8366912 = %oqF$body
  store i64 %Ipe$post, i64* %eptr8366913                                             ; *eptr8366913 = %Ipe$post
  store i64 %cont8360196, i64* %eptr8366914                                          ; *eptr8366914 = %cont8360196
  %eptr8366909 = getelementptr inbounds i64, i64* %cloptr8366908, i64 0              ; &cloptr8366908[0]
  %f8366915 = ptrtoint void(i64,i64)* @lam8363701 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366915, i64* %eptr8366909                                             ; store fptr
  %arg8361333 = ptrtoint i64* %cloptr8366908 to i64                                  ; closure cast; i64* -> i64
  %rva8362845 = add i64 0, 0                                                         ; quoted ()
  %rva8362844 = call i64 @prim_cons(i64 %arg8361333, i64 %rva8362845)                ; call prim_cons
  %cloptr8366916 = inttoptr i64 %vY6$pre to i64*                                     ; closure/env cast; i64 -> i64*
  %i0ptr8366917 = getelementptr inbounds i64, i64* %cloptr8366916, i64 0             ; &cloptr8366916[0]
  %f8366919 = load i64, i64* %i0ptr8366917, align 8                                  ; load; *i0ptr8366917
  %fptr8366918 = inttoptr i64 %f8366919 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366918(i64 %vY6$pre, i64 %rva8362844)              ; tail call
  ret void

else8366907:
  %arg8361398 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366920, i32 0, i32 0)); quoted string
  %retprim8360206 = call i64 @prim_halt(i64 %arg8361398)                             ; call prim_halt
  %cloptr8366921 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr8366923 = getelementptr inbounds i64, i64* %cloptr8366921, i64 1              ; &eptr8366923[1]
  %eptr8366924 = getelementptr inbounds i64, i64* %cloptr8366921, i64 2              ; &eptr8366924[2]
  %eptr8366925 = getelementptr inbounds i64, i64* %cloptr8366921, i64 3              ; &eptr8366925[3]
  %eptr8366926 = getelementptr inbounds i64, i64* %cloptr8366921, i64 4              ; &eptr8366926[4]
  %eptr8366927 = getelementptr inbounds i64, i64* %cloptr8366921, i64 5              ; &eptr8366927[5]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366923                                  ; *eptr8366923 = %Z9D$_37wind_45stack
  store i64 %vY6$pre, i64* %eptr8366924                                              ; *eptr8366924 = %vY6$pre
  store i64 %oqF$body, i64* %eptr8366925                                             ; *eptr8366925 = %oqF$body
  store i64 %Ipe$post, i64* %eptr8366926                                             ; *eptr8366926 = %Ipe$post
  store i64 %cont8360196, i64* %eptr8366927                                          ; *eptr8366927 = %cont8360196
  %eptr8366922 = getelementptr inbounds i64, i64* %cloptr8366921, i64 0              ; &cloptr8366921[0]
  %f8366928 = ptrtoint void(i64,i64)* @lam8363755 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366928, i64* %eptr8366922                                             ; store fptr
  %arg8361401 = ptrtoint i64* %cloptr8366921 to i64                                  ; closure cast; i64* -> i64
  %arg8361400 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362924 = add i64 0, 0                                                         ; quoted ()
  %rva8362923 = call i64 @prim_cons(i64 %retprim8360206, i64 %rva8362924)            ; call prim_cons
  %rva8362922 = call i64 @prim_cons(i64 %arg8361400, i64 %rva8362923)                ; call prim_cons
  %cloptr8366929 = inttoptr i64 %arg8361401 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366930 = getelementptr inbounds i64, i64* %cloptr8366929, i64 0             ; &cloptr8366929[0]
  %f8366932 = load i64, i64* %i0ptr8366930, align 8                                  ; load; *i0ptr8366930
  %fptr8366931 = inttoptr i64 %f8366932 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366931(i64 %arg8361401, i64 %rva8362922)           ; tail call
  ret void
}


define void @lam8363755(i64 %env8363756, i64 %rvp8362921) {
  %envptr8366933 = inttoptr i64 %env8363756 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366934 = getelementptr inbounds i64, i64* %envptr8366933, i64 5            ; &envptr8366933[5]
  %cont8360196 = load i64, i64* %envptr8366934, align 8                              ; load; *envptr8366934
  %envptr8366935 = inttoptr i64 %env8363756 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366936 = getelementptr inbounds i64, i64* %envptr8366935, i64 4            ; &envptr8366935[4]
  %Ipe$post = load i64, i64* %envptr8366936, align 8                                 ; load; *envptr8366936
  %envptr8366937 = inttoptr i64 %env8363756 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366938 = getelementptr inbounds i64, i64* %envptr8366937, i64 3            ; &envptr8366937[3]
  %oqF$body = load i64, i64* %envptr8366938, align 8                                 ; load; *envptr8366938
  %envptr8366939 = inttoptr i64 %env8363756 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366940 = getelementptr inbounds i64, i64* %envptr8366939, i64 2            ; &envptr8366939[2]
  %vY6$pre = load i64, i64* %envptr8366940, align 8                                  ; load; *envptr8366940
  %envptr8366941 = inttoptr i64 %env8363756 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366942 = getelementptr inbounds i64, i64* %envptr8366941, i64 1            ; &envptr8366941[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366942, align 8                      ; load; *envptr8366942
  %_958360197 = call i64 @prim_car(i64 %rvp8362921)                                  ; call prim_car
  %rvp8362920 = call i64 @prim_cdr(i64 %rvp8362921)                                  ; call prim_cdr
  %q1j$_95t = call i64 @prim_car(i64 %rvp8362920)                                    ; call prim_car
  %na8362847 = call i64 @prim_cdr(i64 %rvp8362920)                                   ; call prim_cdr
  %a8360071 = call i64 @prim_cons(i64 %vY6$pre, i64 %Ipe$post)                       ; call prim_cons
  %arg8361404 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360072 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8361404) ; call prim_vector_45ref
  %a8360073 = call i64 @prim_cons(i64 %a8360071, i64 %a8360072)                      ; call prim_cons
  %arg8361409 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360205 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361409, i64 %a8360073); call prim_vector_45set_33
  %cloptr8366943 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8366945 = getelementptr inbounds i64, i64* %cloptr8366943, i64 1              ; &eptr8366945[1]
  %eptr8366946 = getelementptr inbounds i64, i64* %cloptr8366943, i64 2              ; &eptr8366946[2]
  %eptr8366947 = getelementptr inbounds i64, i64* %cloptr8366943, i64 3              ; &eptr8366947[3]
  %eptr8366948 = getelementptr inbounds i64, i64* %cloptr8366943, i64 4              ; &eptr8366948[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366945                                  ; *eptr8366945 = %Z9D$_37wind_45stack
  store i64 %oqF$body, i64* %eptr8366946                                             ; *eptr8366946 = %oqF$body
  store i64 %Ipe$post, i64* %eptr8366947                                             ; *eptr8366947 = %Ipe$post
  store i64 %cont8360196, i64* %eptr8366948                                          ; *eptr8366948 = %cont8360196
  %eptr8366944 = getelementptr inbounds i64, i64* %cloptr8366943, i64 0              ; &cloptr8366943[0]
  %f8366949 = ptrtoint void(i64,i64)* @lam8363751 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366949, i64* %eptr8366944                                             ; store fptr
  %arg8361413 = ptrtoint i64* %cloptr8366943 to i64                                  ; closure cast; i64* -> i64
  %arg8361412 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362919 = add i64 0, 0                                                         ; quoted ()
  %rva8362918 = call i64 @prim_cons(i64 %retprim8360205, i64 %rva8362919)            ; call prim_cons
  %rva8362917 = call i64 @prim_cons(i64 %arg8361412, i64 %rva8362918)                ; call prim_cons
  %cloptr8366950 = inttoptr i64 %arg8361413 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366951 = getelementptr inbounds i64, i64* %cloptr8366950, i64 0             ; &cloptr8366950[0]
  %f8366953 = load i64, i64* %i0ptr8366951, align 8                                  ; load; *i0ptr8366951
  %fptr8366952 = inttoptr i64 %f8366953 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366952(i64 %arg8361413, i64 %rva8362917)           ; tail call
  ret void
}


define void @lam8363751(i64 %env8363752, i64 %rvp8362916) {
  %envptr8366954 = inttoptr i64 %env8363752 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366955 = getelementptr inbounds i64, i64* %envptr8366954, i64 4            ; &envptr8366954[4]
  %cont8360196 = load i64, i64* %envptr8366955, align 8                              ; load; *envptr8366955
  %envptr8366956 = inttoptr i64 %env8363752 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366957 = getelementptr inbounds i64, i64* %envptr8366956, i64 3            ; &envptr8366956[3]
  %Ipe$post = load i64, i64* %envptr8366957, align 8                                 ; load; *envptr8366957
  %envptr8366958 = inttoptr i64 %env8363752 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366959 = getelementptr inbounds i64, i64* %envptr8366958, i64 2            ; &envptr8366958[2]
  %oqF$body = load i64, i64* %envptr8366959, align 8                                 ; load; *envptr8366959
  %envptr8366960 = inttoptr i64 %env8363752 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366961 = getelementptr inbounds i64, i64* %envptr8366960, i64 1            ; &envptr8366960[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366961, align 8                      ; load; *envptr8366961
  %_958360198 = call i64 @prim_car(i64 %rvp8362916)                                  ; call prim_car
  %rvp8362915 = call i64 @prim_cdr(i64 %rvp8362916)                                  ; call prim_cdr
  %BQB$_95t = call i64 @prim_car(i64 %rvp8362915)                                    ; call prim_car
  %na8362849 = call i64 @prim_cdr(i64 %rvp8362915)                                   ; call prim_cdr
  %a8360074 = call i64 @prim_procedure_63(i64 %oqF$body)                             ; call prim_procedure_63
  %cmp8366962 = icmp eq i64 %a8360074, 15                                            ; false?
  br i1 %cmp8366962, label %else8366964, label %then8366963                          ; if

then8366963:
  %cloptr8366965 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366967 = getelementptr inbounds i64, i64* %cloptr8366965, i64 1              ; &eptr8366967[1]
  %eptr8366968 = getelementptr inbounds i64, i64* %cloptr8366965, i64 2              ; &eptr8366968[2]
  %eptr8366969 = getelementptr inbounds i64, i64* %cloptr8366965, i64 3              ; &eptr8366969[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366967                                  ; *eptr8366967 = %Z9D$_37wind_45stack
  store i64 %Ipe$post, i64* %eptr8366968                                             ; *eptr8366968 = %Ipe$post
  store i64 %cont8360196, i64* %eptr8366969                                          ; *eptr8366969 = %cont8360196
  %eptr8366966 = getelementptr inbounds i64, i64* %cloptr8366965, i64 0              ; &cloptr8366965[0]
  %f8366970 = ptrtoint void(i64,i64)* @lam8363726 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366970, i64* %eptr8366966                                             ; store fptr
  %arg8361415 = ptrtoint i64* %cloptr8366965 to i64                                  ; closure cast; i64* -> i64
  %rva8362881 = add i64 0, 0                                                         ; quoted ()
  %rva8362880 = call i64 @prim_cons(i64 %arg8361415, i64 %rva8362881)                ; call prim_cons
  %cloptr8366971 = inttoptr i64 %oqF$body to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8366972 = getelementptr inbounds i64, i64* %cloptr8366971, i64 0             ; &cloptr8366971[0]
  %f8366974 = load i64, i64* %i0ptr8366972, align 8                                  ; load; *i0ptr8366972
  %fptr8366973 = inttoptr i64 %f8366974 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366973(i64 %oqF$body, i64 %rva8362880)             ; tail call
  ret void

else8366964:
  %arg8361439 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8366975, i32 0, i32 0)); quoted string
  %retprim8360204 = call i64 @prim_halt(i64 %arg8361439)                             ; call prim_halt
  %cloptr8366976 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366978 = getelementptr inbounds i64, i64* %cloptr8366976, i64 1              ; &eptr8366978[1]
  %eptr8366979 = getelementptr inbounds i64, i64* %cloptr8366976, i64 2              ; &eptr8366979[2]
  %eptr8366980 = getelementptr inbounds i64, i64* %cloptr8366976, i64 3              ; &eptr8366980[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8366978                                  ; *eptr8366978 = %Z9D$_37wind_45stack
  store i64 %Ipe$post, i64* %eptr8366979                                             ; *eptr8366979 = %Ipe$post
  store i64 %cont8360196, i64* %eptr8366980                                          ; *eptr8366980 = %cont8360196
  %eptr8366977 = getelementptr inbounds i64, i64* %cloptr8366976, i64 0              ; &cloptr8366976[0]
  %f8366981 = ptrtoint void(i64,i64)* @lam8363748 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366981, i64* %eptr8366977                                             ; store fptr
  %arg8361442 = ptrtoint i64* %cloptr8366976 to i64                                  ; closure cast; i64* -> i64
  %arg8361441 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362914 = add i64 0, 0                                                         ; quoted ()
  %rva8362913 = call i64 @prim_cons(i64 %retprim8360204, i64 %rva8362914)            ; call prim_cons
  %rva8362912 = call i64 @prim_cons(i64 %arg8361441, i64 %rva8362913)                ; call prim_cons
  %cloptr8366982 = inttoptr i64 %arg8361442 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366983 = getelementptr inbounds i64, i64* %cloptr8366982, i64 0             ; &cloptr8366982[0]
  %f8366985 = load i64, i64* %i0ptr8366983, align 8                                  ; load; *i0ptr8366983
  %fptr8366984 = inttoptr i64 %f8366985 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8366984(i64 %arg8361442, i64 %rva8362912)           ; tail call
  ret void
}


define void @lam8363748(i64 %env8363749, i64 %rvp8362911) {
  %envptr8366986 = inttoptr i64 %env8363749 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366987 = getelementptr inbounds i64, i64* %envptr8366986, i64 3            ; &envptr8366986[3]
  %cont8360196 = load i64, i64* %envptr8366987, align 8                              ; load; *envptr8366987
  %envptr8366988 = inttoptr i64 %env8363749 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366989 = getelementptr inbounds i64, i64* %envptr8366988, i64 2            ; &envptr8366988[2]
  %Ipe$post = load i64, i64* %envptr8366989, align 8                                 ; load; *envptr8366989
  %envptr8366990 = inttoptr i64 %env8363749 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8366991 = getelementptr inbounds i64, i64* %envptr8366990, i64 1            ; &envptr8366990[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8366991, align 8                      ; load; *envptr8366991
  %_958360199 = call i64 @prim_car(i64 %rvp8362911)                                  ; call prim_car
  %rvp8362910 = call i64 @prim_cdr(i64 %rvp8362911)                                  ; call prim_cdr
  %P9A$v = call i64 @prim_car(i64 %rvp8362910)                                       ; call prim_car
  %na8362883 = call i64 @prim_cdr(i64 %rvp8362910)                                   ; call prim_cdr
  %arg8361443 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360075 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8361443) ; call prim_vector_45ref
  %a8360076 = call i64 @prim_cdr(i64 %a8360075)                                      ; call prim_cdr
  %arg8361447 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360203 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361447, i64 %a8360076); call prim_vector_45set_33
  %cloptr8366992 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8366994 = getelementptr inbounds i64, i64* %cloptr8366992, i64 1              ; &eptr8366994[1]
  %eptr8366995 = getelementptr inbounds i64, i64* %cloptr8366992, i64 2              ; &eptr8366995[2]
  %eptr8366996 = getelementptr inbounds i64, i64* %cloptr8366992, i64 3              ; &eptr8366996[3]
  store i64 %Ipe$post, i64* %eptr8366994                                             ; *eptr8366994 = %Ipe$post
  store i64 %P9A$v, i64* %eptr8366995                                                ; *eptr8366995 = %P9A$v
  store i64 %cont8360196, i64* %eptr8366996                                          ; *eptr8366996 = %cont8360196
  %eptr8366993 = getelementptr inbounds i64, i64* %cloptr8366992, i64 0              ; &cloptr8366992[0]
  %f8366997 = ptrtoint void(i64,i64)* @lam8363744 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8366997, i64* %eptr8366993                                             ; store fptr
  %arg8361451 = ptrtoint i64* %cloptr8366992 to i64                                  ; closure cast; i64* -> i64
  %arg8361450 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362909 = add i64 0, 0                                                         ; quoted ()
  %rva8362908 = call i64 @prim_cons(i64 %retprim8360203, i64 %rva8362909)            ; call prim_cons
  %rva8362907 = call i64 @prim_cons(i64 %arg8361450, i64 %rva8362908)                ; call prim_cons
  %cloptr8366998 = inttoptr i64 %arg8361451 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8366999 = getelementptr inbounds i64, i64* %cloptr8366998, i64 0             ; &cloptr8366998[0]
  %f8367001 = load i64, i64* %i0ptr8366999, align 8                                  ; load; *i0ptr8366999
  %fptr8367000 = inttoptr i64 %f8367001 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367000(i64 %arg8361451, i64 %rva8362907)           ; tail call
  ret void
}


define void @lam8363744(i64 %env8363745, i64 %rvp8362906) {
  %envptr8367002 = inttoptr i64 %env8363745 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367003 = getelementptr inbounds i64, i64* %envptr8367002, i64 3            ; &envptr8367002[3]
  %cont8360196 = load i64, i64* %envptr8367003, align 8                              ; load; *envptr8367003
  %envptr8367004 = inttoptr i64 %env8363745 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367005 = getelementptr inbounds i64, i64* %envptr8367004, i64 2            ; &envptr8367004[2]
  %P9A$v = load i64, i64* %envptr8367005, align 8                                    ; load; *envptr8367005
  %envptr8367006 = inttoptr i64 %env8363745 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367007 = getelementptr inbounds i64, i64* %envptr8367006, i64 1            ; &envptr8367006[1]
  %Ipe$post = load i64, i64* %envptr8367007, align 8                                 ; load; *envptr8367007
  %_958360200 = call i64 @prim_car(i64 %rvp8362906)                                  ; call prim_car
  %rvp8362905 = call i64 @prim_cdr(i64 %rvp8362906)                                  ; call prim_cdr
  %y3o$_95t = call i64 @prim_car(i64 %rvp8362905)                                    ; call prim_car
  %na8362885 = call i64 @prim_cdr(i64 %rvp8362905)                                   ; call prim_cdr
  %a8360077 = call i64 @prim_procedure_63(i64 %Ipe$post)                             ; call prim_procedure_63
  %cmp8367008 = icmp eq i64 %a8360077, 15                                            ; false?
  br i1 %cmp8367008, label %else8367010, label %then8367009                          ; if

then8367009:
  %cloptr8367011 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367013 = getelementptr inbounds i64, i64* %cloptr8367011, i64 1              ; &eptr8367013[1]
  %eptr8367014 = getelementptr inbounds i64, i64* %cloptr8367011, i64 2              ; &eptr8367014[2]
  store i64 %P9A$v, i64* %eptr8367013                                                ; *eptr8367013 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367014                                          ; *eptr8367014 = %cont8360196
  %eptr8367012 = getelementptr inbounds i64, i64* %cloptr8367011, i64 0              ; &cloptr8367011[0]
  %f8367015 = ptrtoint void(i64,i64)* @lam8363735 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367015, i64* %eptr8367012                                             ; store fptr
  %arg8361453 = ptrtoint i64* %cloptr8367011 to i64                                  ; closure cast; i64* -> i64
  %rva8362894 = add i64 0, 0                                                         ; quoted ()
  %rva8362893 = call i64 @prim_cons(i64 %arg8361453, i64 %rva8362894)                ; call prim_cons
  %cloptr8367016 = inttoptr i64 %Ipe$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8367017 = getelementptr inbounds i64, i64* %cloptr8367016, i64 0             ; &cloptr8367016[0]
  %f8367019 = load i64, i64* %i0ptr8367017, align 8                                  ; load; *i0ptr8367017
  %fptr8367018 = inttoptr i64 %f8367019 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367018(i64 %Ipe$post, i64 %rva8362893)             ; tail call
  ret void

else8367010:
  %arg8361458 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8367020, i32 0, i32 0)); quoted string
  %retprim8360202 = call i64 @prim_halt(i64 %arg8361458)                             ; call prim_halt
  %cloptr8367021 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367023 = getelementptr inbounds i64, i64* %cloptr8367021, i64 1              ; &eptr8367023[1]
  %eptr8367024 = getelementptr inbounds i64, i64* %cloptr8367021, i64 2              ; &eptr8367024[2]
  store i64 %P9A$v, i64* %eptr8367023                                                ; *eptr8367023 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367024                                          ; *eptr8367024 = %cont8360196
  %eptr8367022 = getelementptr inbounds i64, i64* %cloptr8367021, i64 0              ; &cloptr8367021[0]
  %f8367025 = ptrtoint void(i64,i64)* @lam8363741 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367025, i64* %eptr8367022                                             ; store fptr
  %arg8361461 = ptrtoint i64* %cloptr8367021 to i64                                  ; closure cast; i64* -> i64
  %arg8361460 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362904 = add i64 0, 0                                                         ; quoted ()
  %rva8362903 = call i64 @prim_cons(i64 %retprim8360202, i64 %rva8362904)            ; call prim_cons
  %rva8362902 = call i64 @prim_cons(i64 %arg8361460, i64 %rva8362903)                ; call prim_cons
  %cloptr8367026 = inttoptr i64 %arg8361461 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367027 = getelementptr inbounds i64, i64* %cloptr8367026, i64 0             ; &cloptr8367026[0]
  %f8367029 = load i64, i64* %i0ptr8367027, align 8                                  ; load; *i0ptr8367027
  %fptr8367028 = inttoptr i64 %f8367029 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367028(i64 %arg8361461, i64 %rva8362902)           ; tail call
  ret void
}


define void @lam8363741(i64 %env8363742, i64 %rvp8362901) {
  %envptr8367030 = inttoptr i64 %env8363742 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367031 = getelementptr inbounds i64, i64* %envptr8367030, i64 2            ; &envptr8367030[2]
  %cont8360196 = load i64, i64* %envptr8367031, align 8                              ; load; *envptr8367031
  %envptr8367032 = inttoptr i64 %env8363742 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367033 = getelementptr inbounds i64, i64* %envptr8367032, i64 1            ; &envptr8367032[1]
  %P9A$v = load i64, i64* %envptr8367033, align 8                                    ; load; *envptr8367033
  %_958360201 = call i64 @prim_car(i64 %rvp8362901)                                  ; call prim_car
  %rvp8362900 = call i64 @prim_cdr(i64 %rvp8362901)                                  ; call prim_cdr
  %qOV$_95t = call i64 @prim_car(i64 %rvp8362900)                                    ; call prim_car
  %na8362896 = call i64 @prim_cdr(i64 %rvp8362900)                                   ; call prim_cdr
  %arg8361463 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362899 = add i64 0, 0                                                         ; quoted ()
  %rva8362898 = call i64 @prim_cons(i64 %P9A$v, i64 %rva8362899)                     ; call prim_cons
  %rva8362897 = call i64 @prim_cons(i64 %arg8361463, i64 %rva8362898)                ; call prim_cons
  %cloptr8367034 = inttoptr i64 %cont8360196 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367035 = getelementptr inbounds i64, i64* %cloptr8367034, i64 0             ; &cloptr8367034[0]
  %f8367037 = load i64, i64* %i0ptr8367035, align 8                                  ; load; *i0ptr8367035
  %fptr8367036 = inttoptr i64 %f8367037 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367036(i64 %cont8360196, i64 %rva8362897)          ; tail call
  ret void
}


define void @lam8363735(i64 %env8363736, i64 %rvp8362892) {
  %envptr8367038 = inttoptr i64 %env8363736 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367039 = getelementptr inbounds i64, i64* %envptr8367038, i64 2            ; &envptr8367038[2]
  %cont8360196 = load i64, i64* %envptr8367039, align 8                              ; load; *envptr8367039
  %envptr8367040 = inttoptr i64 %env8363736 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367041 = getelementptr inbounds i64, i64* %envptr8367040, i64 1            ; &envptr8367040[1]
  %P9A$v = load i64, i64* %envptr8367041, align 8                                    ; load; *envptr8367041
  %_958360201 = call i64 @prim_car(i64 %rvp8362892)                                  ; call prim_car
  %rvp8362891 = call i64 @prim_cdr(i64 %rvp8362892)                                  ; call prim_cdr
  %qOV$_95t = call i64 @prim_car(i64 %rvp8362891)                                    ; call prim_car
  %na8362887 = call i64 @prim_cdr(i64 %rvp8362891)                                   ; call prim_cdr
  %arg8361456 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362890 = add i64 0, 0                                                         ; quoted ()
  %rva8362889 = call i64 @prim_cons(i64 %P9A$v, i64 %rva8362890)                     ; call prim_cons
  %rva8362888 = call i64 @prim_cons(i64 %arg8361456, i64 %rva8362889)                ; call prim_cons
  %cloptr8367042 = inttoptr i64 %cont8360196 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367043 = getelementptr inbounds i64, i64* %cloptr8367042, i64 0             ; &cloptr8367042[0]
  %f8367045 = load i64, i64* %i0ptr8367043, align 8                                  ; load; *i0ptr8367043
  %fptr8367044 = inttoptr i64 %f8367045 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367044(i64 %cont8360196, i64 %rva8362888)          ; tail call
  ret void
}


define void @lam8363726(i64 %env8363727, i64 %rvp8362879) {
  %envptr8367046 = inttoptr i64 %env8363727 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367047 = getelementptr inbounds i64, i64* %envptr8367046, i64 3            ; &envptr8367046[3]
  %cont8360196 = load i64, i64* %envptr8367047, align 8                              ; load; *envptr8367047
  %envptr8367048 = inttoptr i64 %env8363727 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367049 = getelementptr inbounds i64, i64* %envptr8367048, i64 2            ; &envptr8367048[2]
  %Ipe$post = load i64, i64* %envptr8367049, align 8                                 ; load; *envptr8367049
  %envptr8367050 = inttoptr i64 %env8363727 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367051 = getelementptr inbounds i64, i64* %envptr8367050, i64 1            ; &envptr8367050[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8367051, align 8                      ; load; *envptr8367051
  %_958360199 = call i64 @prim_car(i64 %rvp8362879)                                  ; call prim_car
  %rvp8362878 = call i64 @prim_cdr(i64 %rvp8362879)                                  ; call prim_cdr
  %P9A$v = call i64 @prim_car(i64 %rvp8362878)                                       ; call prim_car
  %na8362851 = call i64 @prim_cdr(i64 %rvp8362878)                                   ; call prim_cdr
  %arg8361417 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360075 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8361417) ; call prim_vector_45ref
  %a8360076 = call i64 @prim_cdr(i64 %a8360075)                                      ; call prim_cdr
  %arg8361421 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360203 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361421, i64 %a8360076); call prim_vector_45set_33
  %cloptr8367052 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8367054 = getelementptr inbounds i64, i64* %cloptr8367052, i64 1              ; &eptr8367054[1]
  %eptr8367055 = getelementptr inbounds i64, i64* %cloptr8367052, i64 2              ; &eptr8367055[2]
  %eptr8367056 = getelementptr inbounds i64, i64* %cloptr8367052, i64 3              ; &eptr8367056[3]
  store i64 %Ipe$post, i64* %eptr8367054                                             ; *eptr8367054 = %Ipe$post
  store i64 %P9A$v, i64* %eptr8367055                                                ; *eptr8367055 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367056                                          ; *eptr8367056 = %cont8360196
  %eptr8367053 = getelementptr inbounds i64, i64* %cloptr8367052, i64 0              ; &cloptr8367052[0]
  %f8367057 = ptrtoint void(i64,i64)* @lam8363722 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367057, i64* %eptr8367053                                             ; store fptr
  %arg8361425 = ptrtoint i64* %cloptr8367052 to i64                                  ; closure cast; i64* -> i64
  %arg8361424 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362877 = add i64 0, 0                                                         ; quoted ()
  %rva8362876 = call i64 @prim_cons(i64 %retprim8360203, i64 %rva8362877)            ; call prim_cons
  %rva8362875 = call i64 @prim_cons(i64 %arg8361424, i64 %rva8362876)                ; call prim_cons
  %cloptr8367058 = inttoptr i64 %arg8361425 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367059 = getelementptr inbounds i64, i64* %cloptr8367058, i64 0             ; &cloptr8367058[0]
  %f8367061 = load i64, i64* %i0ptr8367059, align 8                                  ; load; *i0ptr8367059
  %fptr8367060 = inttoptr i64 %f8367061 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367060(i64 %arg8361425, i64 %rva8362875)           ; tail call
  ret void
}


define void @lam8363722(i64 %env8363723, i64 %rvp8362874) {
  %envptr8367062 = inttoptr i64 %env8363723 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367063 = getelementptr inbounds i64, i64* %envptr8367062, i64 3            ; &envptr8367062[3]
  %cont8360196 = load i64, i64* %envptr8367063, align 8                              ; load; *envptr8367063
  %envptr8367064 = inttoptr i64 %env8363723 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367065 = getelementptr inbounds i64, i64* %envptr8367064, i64 2            ; &envptr8367064[2]
  %P9A$v = load i64, i64* %envptr8367065, align 8                                    ; load; *envptr8367065
  %envptr8367066 = inttoptr i64 %env8363723 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367067 = getelementptr inbounds i64, i64* %envptr8367066, i64 1            ; &envptr8367066[1]
  %Ipe$post = load i64, i64* %envptr8367067, align 8                                 ; load; *envptr8367067
  %_958360200 = call i64 @prim_car(i64 %rvp8362874)                                  ; call prim_car
  %rvp8362873 = call i64 @prim_cdr(i64 %rvp8362874)                                  ; call prim_cdr
  %y3o$_95t = call i64 @prim_car(i64 %rvp8362873)                                    ; call prim_car
  %na8362853 = call i64 @prim_cdr(i64 %rvp8362873)                                   ; call prim_cdr
  %a8360077 = call i64 @prim_procedure_63(i64 %Ipe$post)                             ; call prim_procedure_63
  %cmp8367068 = icmp eq i64 %a8360077, 15                                            ; false?
  br i1 %cmp8367068, label %else8367070, label %then8367069                          ; if

then8367069:
  %cloptr8367071 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367073 = getelementptr inbounds i64, i64* %cloptr8367071, i64 1              ; &eptr8367073[1]
  %eptr8367074 = getelementptr inbounds i64, i64* %cloptr8367071, i64 2              ; &eptr8367074[2]
  store i64 %P9A$v, i64* %eptr8367073                                                ; *eptr8367073 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367074                                          ; *eptr8367074 = %cont8360196
  %eptr8367072 = getelementptr inbounds i64, i64* %cloptr8367071, i64 0              ; &cloptr8367071[0]
  %f8367075 = ptrtoint void(i64,i64)* @lam8363713 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367075, i64* %eptr8367072                                             ; store fptr
  %arg8361427 = ptrtoint i64* %cloptr8367071 to i64                                  ; closure cast; i64* -> i64
  %rva8362862 = add i64 0, 0                                                         ; quoted ()
  %rva8362861 = call i64 @prim_cons(i64 %arg8361427, i64 %rva8362862)                ; call prim_cons
  %cloptr8367076 = inttoptr i64 %Ipe$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8367077 = getelementptr inbounds i64, i64* %cloptr8367076, i64 0             ; &cloptr8367076[0]
  %f8367079 = load i64, i64* %i0ptr8367077, align 8                                  ; load; *i0ptr8367077
  %fptr8367078 = inttoptr i64 %f8367079 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367078(i64 %Ipe$post, i64 %rva8362861)             ; tail call
  ret void

else8367070:
  %arg8361432 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8367080, i32 0, i32 0)); quoted string
  %retprim8360202 = call i64 @prim_halt(i64 %arg8361432)                             ; call prim_halt
  %cloptr8367081 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367083 = getelementptr inbounds i64, i64* %cloptr8367081, i64 1              ; &eptr8367083[1]
  %eptr8367084 = getelementptr inbounds i64, i64* %cloptr8367081, i64 2              ; &eptr8367084[2]
  store i64 %P9A$v, i64* %eptr8367083                                                ; *eptr8367083 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367084                                          ; *eptr8367084 = %cont8360196
  %eptr8367082 = getelementptr inbounds i64, i64* %cloptr8367081, i64 0              ; &cloptr8367081[0]
  %f8367085 = ptrtoint void(i64,i64)* @lam8363719 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367085, i64* %eptr8367082                                             ; store fptr
  %arg8361435 = ptrtoint i64* %cloptr8367081 to i64                                  ; closure cast; i64* -> i64
  %arg8361434 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362872 = add i64 0, 0                                                         ; quoted ()
  %rva8362871 = call i64 @prim_cons(i64 %retprim8360202, i64 %rva8362872)            ; call prim_cons
  %rva8362870 = call i64 @prim_cons(i64 %arg8361434, i64 %rva8362871)                ; call prim_cons
  %cloptr8367086 = inttoptr i64 %arg8361435 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367087 = getelementptr inbounds i64, i64* %cloptr8367086, i64 0             ; &cloptr8367086[0]
  %f8367089 = load i64, i64* %i0ptr8367087, align 8                                  ; load; *i0ptr8367087
  %fptr8367088 = inttoptr i64 %f8367089 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367088(i64 %arg8361435, i64 %rva8362870)           ; tail call
  ret void
}


define void @lam8363719(i64 %env8363720, i64 %rvp8362869) {
  %envptr8367090 = inttoptr i64 %env8363720 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367091 = getelementptr inbounds i64, i64* %envptr8367090, i64 2            ; &envptr8367090[2]
  %cont8360196 = load i64, i64* %envptr8367091, align 8                              ; load; *envptr8367091
  %envptr8367092 = inttoptr i64 %env8363720 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367093 = getelementptr inbounds i64, i64* %envptr8367092, i64 1            ; &envptr8367092[1]
  %P9A$v = load i64, i64* %envptr8367093, align 8                                    ; load; *envptr8367093
  %_958360201 = call i64 @prim_car(i64 %rvp8362869)                                  ; call prim_car
  %rvp8362868 = call i64 @prim_cdr(i64 %rvp8362869)                                  ; call prim_cdr
  %qOV$_95t = call i64 @prim_car(i64 %rvp8362868)                                    ; call prim_car
  %na8362864 = call i64 @prim_cdr(i64 %rvp8362868)                                   ; call prim_cdr
  %arg8361437 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362867 = add i64 0, 0                                                         ; quoted ()
  %rva8362866 = call i64 @prim_cons(i64 %P9A$v, i64 %rva8362867)                     ; call prim_cons
  %rva8362865 = call i64 @prim_cons(i64 %arg8361437, i64 %rva8362866)                ; call prim_cons
  %cloptr8367094 = inttoptr i64 %cont8360196 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367095 = getelementptr inbounds i64, i64* %cloptr8367094, i64 0             ; &cloptr8367094[0]
  %f8367097 = load i64, i64* %i0ptr8367095, align 8                                  ; load; *i0ptr8367095
  %fptr8367096 = inttoptr i64 %f8367097 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367096(i64 %cont8360196, i64 %rva8362865)          ; tail call
  ret void
}


define void @lam8363713(i64 %env8363714, i64 %rvp8362860) {
  %envptr8367098 = inttoptr i64 %env8363714 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367099 = getelementptr inbounds i64, i64* %envptr8367098, i64 2            ; &envptr8367098[2]
  %cont8360196 = load i64, i64* %envptr8367099, align 8                              ; load; *envptr8367099
  %envptr8367100 = inttoptr i64 %env8363714 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367101 = getelementptr inbounds i64, i64* %envptr8367100, i64 1            ; &envptr8367100[1]
  %P9A$v = load i64, i64* %envptr8367101, align 8                                    ; load; *envptr8367101
  %_958360201 = call i64 @prim_car(i64 %rvp8362860)                                  ; call prim_car
  %rvp8362859 = call i64 @prim_cdr(i64 %rvp8362860)                                  ; call prim_cdr
  %qOV$_95t = call i64 @prim_car(i64 %rvp8362859)                                    ; call prim_car
  %na8362855 = call i64 @prim_cdr(i64 %rvp8362859)                                   ; call prim_cdr
  %arg8361430 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362858 = add i64 0, 0                                                         ; quoted ()
  %rva8362857 = call i64 @prim_cons(i64 %P9A$v, i64 %rva8362858)                     ; call prim_cons
  %rva8362856 = call i64 @prim_cons(i64 %arg8361430, i64 %rva8362857)                ; call prim_cons
  %cloptr8367102 = inttoptr i64 %cont8360196 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367103 = getelementptr inbounds i64, i64* %cloptr8367102, i64 0             ; &cloptr8367102[0]
  %f8367105 = load i64, i64* %i0ptr8367103, align 8                                  ; load; *i0ptr8367103
  %fptr8367104 = inttoptr i64 %f8367105 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367104(i64 %cont8360196, i64 %rva8362856)          ; tail call
  ret void
}


define void @lam8363701(i64 %env8363702, i64 %rvp8362843) {
  %envptr8367106 = inttoptr i64 %env8363702 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367107 = getelementptr inbounds i64, i64* %envptr8367106, i64 5            ; &envptr8367106[5]
  %cont8360196 = load i64, i64* %envptr8367107, align 8                              ; load; *envptr8367107
  %envptr8367108 = inttoptr i64 %env8363702 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367109 = getelementptr inbounds i64, i64* %envptr8367108, i64 4            ; &envptr8367108[4]
  %Ipe$post = load i64, i64* %envptr8367109, align 8                                 ; load; *envptr8367109
  %envptr8367110 = inttoptr i64 %env8363702 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367111 = getelementptr inbounds i64, i64* %envptr8367110, i64 3            ; &envptr8367110[3]
  %oqF$body = load i64, i64* %envptr8367111, align 8                                 ; load; *envptr8367111
  %envptr8367112 = inttoptr i64 %env8363702 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367113 = getelementptr inbounds i64, i64* %envptr8367112, i64 2            ; &envptr8367112[2]
  %vY6$pre = load i64, i64* %envptr8367113, align 8                                  ; load; *envptr8367113
  %envptr8367114 = inttoptr i64 %env8363702 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367115 = getelementptr inbounds i64, i64* %envptr8367114, i64 1            ; &envptr8367114[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8367115, align 8                      ; load; *envptr8367115
  %_958360197 = call i64 @prim_car(i64 %rvp8362843)                                  ; call prim_car
  %rvp8362842 = call i64 @prim_cdr(i64 %rvp8362843)                                  ; call prim_cdr
  %q1j$_95t = call i64 @prim_car(i64 %rvp8362842)                                    ; call prim_car
  %na8362769 = call i64 @prim_cdr(i64 %rvp8362842)                                   ; call prim_cdr
  %a8360071 = call i64 @prim_cons(i64 %vY6$pre, i64 %Ipe$post)                       ; call prim_cons
  %arg8361337 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360072 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8361337) ; call prim_vector_45ref
  %a8360073 = call i64 @prim_cons(i64 %a8360071, i64 %a8360072)                      ; call prim_cons
  %arg8361342 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360205 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361342, i64 %a8360073); call prim_vector_45set_33
  %cloptr8367116 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8367118 = getelementptr inbounds i64, i64* %cloptr8367116, i64 1              ; &eptr8367118[1]
  %eptr8367119 = getelementptr inbounds i64, i64* %cloptr8367116, i64 2              ; &eptr8367119[2]
  %eptr8367120 = getelementptr inbounds i64, i64* %cloptr8367116, i64 3              ; &eptr8367120[3]
  %eptr8367121 = getelementptr inbounds i64, i64* %cloptr8367116, i64 4              ; &eptr8367121[4]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8367118                                  ; *eptr8367118 = %Z9D$_37wind_45stack
  store i64 %oqF$body, i64* %eptr8367119                                             ; *eptr8367119 = %oqF$body
  store i64 %Ipe$post, i64* %eptr8367120                                             ; *eptr8367120 = %Ipe$post
  store i64 %cont8360196, i64* %eptr8367121                                          ; *eptr8367121 = %cont8360196
  %eptr8367117 = getelementptr inbounds i64, i64* %cloptr8367116, i64 0              ; &cloptr8367116[0]
  %f8367122 = ptrtoint void(i64,i64)* @lam8363697 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367122, i64* %eptr8367117                                             ; store fptr
  %arg8361346 = ptrtoint i64* %cloptr8367116 to i64                                  ; closure cast; i64* -> i64
  %arg8361345 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362841 = add i64 0, 0                                                         ; quoted ()
  %rva8362840 = call i64 @prim_cons(i64 %retprim8360205, i64 %rva8362841)            ; call prim_cons
  %rva8362839 = call i64 @prim_cons(i64 %arg8361345, i64 %rva8362840)                ; call prim_cons
  %cloptr8367123 = inttoptr i64 %arg8361346 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367124 = getelementptr inbounds i64, i64* %cloptr8367123, i64 0             ; &cloptr8367123[0]
  %f8367126 = load i64, i64* %i0ptr8367124, align 8                                  ; load; *i0ptr8367124
  %fptr8367125 = inttoptr i64 %f8367126 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367125(i64 %arg8361346, i64 %rva8362839)           ; tail call
  ret void
}


define void @lam8363697(i64 %env8363698, i64 %rvp8362838) {
  %envptr8367127 = inttoptr i64 %env8363698 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367128 = getelementptr inbounds i64, i64* %envptr8367127, i64 4            ; &envptr8367127[4]
  %cont8360196 = load i64, i64* %envptr8367128, align 8                              ; load; *envptr8367128
  %envptr8367129 = inttoptr i64 %env8363698 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367130 = getelementptr inbounds i64, i64* %envptr8367129, i64 3            ; &envptr8367129[3]
  %Ipe$post = load i64, i64* %envptr8367130, align 8                                 ; load; *envptr8367130
  %envptr8367131 = inttoptr i64 %env8363698 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367132 = getelementptr inbounds i64, i64* %envptr8367131, i64 2            ; &envptr8367131[2]
  %oqF$body = load i64, i64* %envptr8367132, align 8                                 ; load; *envptr8367132
  %envptr8367133 = inttoptr i64 %env8363698 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367134 = getelementptr inbounds i64, i64* %envptr8367133, i64 1            ; &envptr8367133[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8367134, align 8                      ; load; *envptr8367134
  %_958360198 = call i64 @prim_car(i64 %rvp8362838)                                  ; call prim_car
  %rvp8362837 = call i64 @prim_cdr(i64 %rvp8362838)                                  ; call prim_cdr
  %BQB$_95t = call i64 @prim_car(i64 %rvp8362837)                                    ; call prim_car
  %na8362771 = call i64 @prim_cdr(i64 %rvp8362837)                                   ; call prim_cdr
  %a8360074 = call i64 @prim_procedure_63(i64 %oqF$body)                             ; call prim_procedure_63
  %cmp8367135 = icmp eq i64 %a8360074, 15                                            ; false?
  br i1 %cmp8367135, label %else8367137, label %then8367136                          ; if

then8367136:
  %cloptr8367138 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8367140 = getelementptr inbounds i64, i64* %cloptr8367138, i64 1              ; &eptr8367140[1]
  %eptr8367141 = getelementptr inbounds i64, i64* %cloptr8367138, i64 2              ; &eptr8367141[2]
  %eptr8367142 = getelementptr inbounds i64, i64* %cloptr8367138, i64 3              ; &eptr8367142[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8367140                                  ; *eptr8367140 = %Z9D$_37wind_45stack
  store i64 %Ipe$post, i64* %eptr8367141                                             ; *eptr8367141 = %Ipe$post
  store i64 %cont8360196, i64* %eptr8367142                                          ; *eptr8367142 = %cont8360196
  %eptr8367139 = getelementptr inbounds i64, i64* %cloptr8367138, i64 0              ; &cloptr8367138[0]
  %f8367143 = ptrtoint void(i64,i64)* @lam8363672 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367143, i64* %eptr8367139                                             ; store fptr
  %arg8361348 = ptrtoint i64* %cloptr8367138 to i64                                  ; closure cast; i64* -> i64
  %rva8362803 = add i64 0, 0                                                         ; quoted ()
  %rva8362802 = call i64 @prim_cons(i64 %arg8361348, i64 %rva8362803)                ; call prim_cons
  %cloptr8367144 = inttoptr i64 %oqF$body to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8367145 = getelementptr inbounds i64, i64* %cloptr8367144, i64 0             ; &cloptr8367144[0]
  %f8367147 = load i64, i64* %i0ptr8367145, align 8                                  ; load; *i0ptr8367145
  %fptr8367146 = inttoptr i64 %f8367147 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367146(i64 %oqF$body, i64 %rva8362802)             ; tail call
  ret void

else8367137:
  %arg8361372 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8367148, i32 0, i32 0)); quoted string
  %retprim8360204 = call i64 @prim_halt(i64 %arg8361372)                             ; call prim_halt
  %cloptr8367149 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8367151 = getelementptr inbounds i64, i64* %cloptr8367149, i64 1              ; &eptr8367151[1]
  %eptr8367152 = getelementptr inbounds i64, i64* %cloptr8367149, i64 2              ; &eptr8367152[2]
  %eptr8367153 = getelementptr inbounds i64, i64* %cloptr8367149, i64 3              ; &eptr8367153[3]
  store i64 %Z9D$_37wind_45stack, i64* %eptr8367151                                  ; *eptr8367151 = %Z9D$_37wind_45stack
  store i64 %Ipe$post, i64* %eptr8367152                                             ; *eptr8367152 = %Ipe$post
  store i64 %cont8360196, i64* %eptr8367153                                          ; *eptr8367153 = %cont8360196
  %eptr8367150 = getelementptr inbounds i64, i64* %cloptr8367149, i64 0              ; &cloptr8367149[0]
  %f8367154 = ptrtoint void(i64,i64)* @lam8363694 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367154, i64* %eptr8367150                                             ; store fptr
  %arg8361375 = ptrtoint i64* %cloptr8367149 to i64                                  ; closure cast; i64* -> i64
  %arg8361374 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362836 = add i64 0, 0                                                         ; quoted ()
  %rva8362835 = call i64 @prim_cons(i64 %retprim8360204, i64 %rva8362836)            ; call prim_cons
  %rva8362834 = call i64 @prim_cons(i64 %arg8361374, i64 %rva8362835)                ; call prim_cons
  %cloptr8367155 = inttoptr i64 %arg8361375 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367156 = getelementptr inbounds i64, i64* %cloptr8367155, i64 0             ; &cloptr8367155[0]
  %f8367158 = load i64, i64* %i0ptr8367156, align 8                                  ; load; *i0ptr8367156
  %fptr8367157 = inttoptr i64 %f8367158 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367157(i64 %arg8361375, i64 %rva8362834)           ; tail call
  ret void
}


define void @lam8363694(i64 %env8363695, i64 %rvp8362833) {
  %envptr8367159 = inttoptr i64 %env8363695 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367160 = getelementptr inbounds i64, i64* %envptr8367159, i64 3            ; &envptr8367159[3]
  %cont8360196 = load i64, i64* %envptr8367160, align 8                              ; load; *envptr8367160
  %envptr8367161 = inttoptr i64 %env8363695 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367162 = getelementptr inbounds i64, i64* %envptr8367161, i64 2            ; &envptr8367161[2]
  %Ipe$post = load i64, i64* %envptr8367162, align 8                                 ; load; *envptr8367162
  %envptr8367163 = inttoptr i64 %env8363695 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367164 = getelementptr inbounds i64, i64* %envptr8367163, i64 1            ; &envptr8367163[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8367164, align 8                      ; load; *envptr8367164
  %_958360199 = call i64 @prim_car(i64 %rvp8362833)                                  ; call prim_car
  %rvp8362832 = call i64 @prim_cdr(i64 %rvp8362833)                                  ; call prim_cdr
  %P9A$v = call i64 @prim_car(i64 %rvp8362832)                                       ; call prim_car
  %na8362805 = call i64 @prim_cdr(i64 %rvp8362832)                                   ; call prim_cdr
  %arg8361376 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360075 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8361376) ; call prim_vector_45ref
  %a8360076 = call i64 @prim_cdr(i64 %a8360075)                                      ; call prim_cdr
  %arg8361380 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360203 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361380, i64 %a8360076); call prim_vector_45set_33
  %cloptr8367165 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8367167 = getelementptr inbounds i64, i64* %cloptr8367165, i64 1              ; &eptr8367167[1]
  %eptr8367168 = getelementptr inbounds i64, i64* %cloptr8367165, i64 2              ; &eptr8367168[2]
  %eptr8367169 = getelementptr inbounds i64, i64* %cloptr8367165, i64 3              ; &eptr8367169[3]
  store i64 %Ipe$post, i64* %eptr8367167                                             ; *eptr8367167 = %Ipe$post
  store i64 %P9A$v, i64* %eptr8367168                                                ; *eptr8367168 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367169                                          ; *eptr8367169 = %cont8360196
  %eptr8367166 = getelementptr inbounds i64, i64* %cloptr8367165, i64 0              ; &cloptr8367165[0]
  %f8367170 = ptrtoint void(i64,i64)* @lam8363690 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367170, i64* %eptr8367166                                             ; store fptr
  %arg8361384 = ptrtoint i64* %cloptr8367165 to i64                                  ; closure cast; i64* -> i64
  %arg8361383 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362831 = add i64 0, 0                                                         ; quoted ()
  %rva8362830 = call i64 @prim_cons(i64 %retprim8360203, i64 %rva8362831)            ; call prim_cons
  %rva8362829 = call i64 @prim_cons(i64 %arg8361383, i64 %rva8362830)                ; call prim_cons
  %cloptr8367171 = inttoptr i64 %arg8361384 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367172 = getelementptr inbounds i64, i64* %cloptr8367171, i64 0             ; &cloptr8367171[0]
  %f8367174 = load i64, i64* %i0ptr8367172, align 8                                  ; load; *i0ptr8367172
  %fptr8367173 = inttoptr i64 %f8367174 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367173(i64 %arg8361384, i64 %rva8362829)           ; tail call
  ret void
}


define void @lam8363690(i64 %env8363691, i64 %rvp8362828) {
  %envptr8367175 = inttoptr i64 %env8363691 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367176 = getelementptr inbounds i64, i64* %envptr8367175, i64 3            ; &envptr8367175[3]
  %cont8360196 = load i64, i64* %envptr8367176, align 8                              ; load; *envptr8367176
  %envptr8367177 = inttoptr i64 %env8363691 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367178 = getelementptr inbounds i64, i64* %envptr8367177, i64 2            ; &envptr8367177[2]
  %P9A$v = load i64, i64* %envptr8367178, align 8                                    ; load; *envptr8367178
  %envptr8367179 = inttoptr i64 %env8363691 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367180 = getelementptr inbounds i64, i64* %envptr8367179, i64 1            ; &envptr8367179[1]
  %Ipe$post = load i64, i64* %envptr8367180, align 8                                 ; load; *envptr8367180
  %_958360200 = call i64 @prim_car(i64 %rvp8362828)                                  ; call prim_car
  %rvp8362827 = call i64 @prim_cdr(i64 %rvp8362828)                                  ; call prim_cdr
  %y3o$_95t = call i64 @prim_car(i64 %rvp8362827)                                    ; call prim_car
  %na8362807 = call i64 @prim_cdr(i64 %rvp8362827)                                   ; call prim_cdr
  %a8360077 = call i64 @prim_procedure_63(i64 %Ipe$post)                             ; call prim_procedure_63
  %cmp8367181 = icmp eq i64 %a8360077, 15                                            ; false?
  br i1 %cmp8367181, label %else8367183, label %then8367182                          ; if

then8367182:
  %cloptr8367184 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367186 = getelementptr inbounds i64, i64* %cloptr8367184, i64 1              ; &eptr8367186[1]
  %eptr8367187 = getelementptr inbounds i64, i64* %cloptr8367184, i64 2              ; &eptr8367187[2]
  store i64 %P9A$v, i64* %eptr8367186                                                ; *eptr8367186 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367187                                          ; *eptr8367187 = %cont8360196
  %eptr8367185 = getelementptr inbounds i64, i64* %cloptr8367184, i64 0              ; &cloptr8367184[0]
  %f8367188 = ptrtoint void(i64,i64)* @lam8363681 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367188, i64* %eptr8367185                                             ; store fptr
  %arg8361386 = ptrtoint i64* %cloptr8367184 to i64                                  ; closure cast; i64* -> i64
  %rva8362816 = add i64 0, 0                                                         ; quoted ()
  %rva8362815 = call i64 @prim_cons(i64 %arg8361386, i64 %rva8362816)                ; call prim_cons
  %cloptr8367189 = inttoptr i64 %Ipe$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8367190 = getelementptr inbounds i64, i64* %cloptr8367189, i64 0             ; &cloptr8367189[0]
  %f8367192 = load i64, i64* %i0ptr8367190, align 8                                  ; load; *i0ptr8367190
  %fptr8367191 = inttoptr i64 %f8367192 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367191(i64 %Ipe$post, i64 %rva8362815)             ; tail call
  ret void

else8367183:
  %arg8361391 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8367193, i32 0, i32 0)); quoted string
  %retprim8360202 = call i64 @prim_halt(i64 %arg8361391)                             ; call prim_halt
  %cloptr8367194 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367196 = getelementptr inbounds i64, i64* %cloptr8367194, i64 1              ; &eptr8367196[1]
  %eptr8367197 = getelementptr inbounds i64, i64* %cloptr8367194, i64 2              ; &eptr8367197[2]
  store i64 %P9A$v, i64* %eptr8367196                                                ; *eptr8367196 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367197                                          ; *eptr8367197 = %cont8360196
  %eptr8367195 = getelementptr inbounds i64, i64* %cloptr8367194, i64 0              ; &cloptr8367194[0]
  %f8367198 = ptrtoint void(i64,i64)* @lam8363687 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367198, i64* %eptr8367195                                             ; store fptr
  %arg8361394 = ptrtoint i64* %cloptr8367194 to i64                                  ; closure cast; i64* -> i64
  %arg8361393 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362826 = add i64 0, 0                                                         ; quoted ()
  %rva8362825 = call i64 @prim_cons(i64 %retprim8360202, i64 %rva8362826)            ; call prim_cons
  %rva8362824 = call i64 @prim_cons(i64 %arg8361393, i64 %rva8362825)                ; call prim_cons
  %cloptr8367199 = inttoptr i64 %arg8361394 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367200 = getelementptr inbounds i64, i64* %cloptr8367199, i64 0             ; &cloptr8367199[0]
  %f8367202 = load i64, i64* %i0ptr8367200, align 8                                  ; load; *i0ptr8367200
  %fptr8367201 = inttoptr i64 %f8367202 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367201(i64 %arg8361394, i64 %rva8362824)           ; tail call
  ret void
}


define void @lam8363687(i64 %env8363688, i64 %rvp8362823) {
  %envptr8367203 = inttoptr i64 %env8363688 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367204 = getelementptr inbounds i64, i64* %envptr8367203, i64 2            ; &envptr8367203[2]
  %cont8360196 = load i64, i64* %envptr8367204, align 8                              ; load; *envptr8367204
  %envptr8367205 = inttoptr i64 %env8363688 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367206 = getelementptr inbounds i64, i64* %envptr8367205, i64 1            ; &envptr8367205[1]
  %P9A$v = load i64, i64* %envptr8367206, align 8                                    ; load; *envptr8367206
  %_958360201 = call i64 @prim_car(i64 %rvp8362823)                                  ; call prim_car
  %rvp8362822 = call i64 @prim_cdr(i64 %rvp8362823)                                  ; call prim_cdr
  %qOV$_95t = call i64 @prim_car(i64 %rvp8362822)                                    ; call prim_car
  %na8362818 = call i64 @prim_cdr(i64 %rvp8362822)                                   ; call prim_cdr
  %arg8361396 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362821 = add i64 0, 0                                                         ; quoted ()
  %rva8362820 = call i64 @prim_cons(i64 %P9A$v, i64 %rva8362821)                     ; call prim_cons
  %rva8362819 = call i64 @prim_cons(i64 %arg8361396, i64 %rva8362820)                ; call prim_cons
  %cloptr8367207 = inttoptr i64 %cont8360196 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367208 = getelementptr inbounds i64, i64* %cloptr8367207, i64 0             ; &cloptr8367207[0]
  %f8367210 = load i64, i64* %i0ptr8367208, align 8                                  ; load; *i0ptr8367208
  %fptr8367209 = inttoptr i64 %f8367210 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367209(i64 %cont8360196, i64 %rva8362819)          ; tail call
  ret void
}


define void @lam8363681(i64 %env8363682, i64 %rvp8362814) {
  %envptr8367211 = inttoptr i64 %env8363682 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367212 = getelementptr inbounds i64, i64* %envptr8367211, i64 2            ; &envptr8367211[2]
  %cont8360196 = load i64, i64* %envptr8367212, align 8                              ; load; *envptr8367212
  %envptr8367213 = inttoptr i64 %env8363682 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367214 = getelementptr inbounds i64, i64* %envptr8367213, i64 1            ; &envptr8367213[1]
  %P9A$v = load i64, i64* %envptr8367214, align 8                                    ; load; *envptr8367214
  %_958360201 = call i64 @prim_car(i64 %rvp8362814)                                  ; call prim_car
  %rvp8362813 = call i64 @prim_cdr(i64 %rvp8362814)                                  ; call prim_cdr
  %qOV$_95t = call i64 @prim_car(i64 %rvp8362813)                                    ; call prim_car
  %na8362809 = call i64 @prim_cdr(i64 %rvp8362813)                                   ; call prim_cdr
  %arg8361389 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362812 = add i64 0, 0                                                         ; quoted ()
  %rva8362811 = call i64 @prim_cons(i64 %P9A$v, i64 %rva8362812)                     ; call prim_cons
  %rva8362810 = call i64 @prim_cons(i64 %arg8361389, i64 %rva8362811)                ; call prim_cons
  %cloptr8367215 = inttoptr i64 %cont8360196 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367216 = getelementptr inbounds i64, i64* %cloptr8367215, i64 0             ; &cloptr8367215[0]
  %f8367218 = load i64, i64* %i0ptr8367216, align 8                                  ; load; *i0ptr8367216
  %fptr8367217 = inttoptr i64 %f8367218 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367217(i64 %cont8360196, i64 %rva8362810)          ; tail call
  ret void
}


define void @lam8363672(i64 %env8363673, i64 %rvp8362801) {
  %envptr8367219 = inttoptr i64 %env8363673 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367220 = getelementptr inbounds i64, i64* %envptr8367219, i64 3            ; &envptr8367219[3]
  %cont8360196 = load i64, i64* %envptr8367220, align 8                              ; load; *envptr8367220
  %envptr8367221 = inttoptr i64 %env8363673 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367222 = getelementptr inbounds i64, i64* %envptr8367221, i64 2            ; &envptr8367221[2]
  %Ipe$post = load i64, i64* %envptr8367222, align 8                                 ; load; *envptr8367222
  %envptr8367223 = inttoptr i64 %env8363673 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367224 = getelementptr inbounds i64, i64* %envptr8367223, i64 1            ; &envptr8367223[1]
  %Z9D$_37wind_45stack = load i64, i64* %envptr8367224, align 8                      ; load; *envptr8367224
  %_958360199 = call i64 @prim_car(i64 %rvp8362801)                                  ; call prim_car
  %rvp8362800 = call i64 @prim_cdr(i64 %rvp8362801)                                  ; call prim_cdr
  %P9A$v = call i64 @prim_car(i64 %rvp8362800)                                       ; call prim_car
  %na8362773 = call i64 @prim_cdr(i64 %rvp8362800)                                   ; call prim_cdr
  %arg8361350 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360075 = call i64 @prim_vector_45ref(i64 %Z9D$_37wind_45stack, i64 %arg8361350) ; call prim_vector_45ref
  %a8360076 = call i64 @prim_cdr(i64 %a8360075)                                      ; call prim_cdr
  %arg8361354 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360203 = call i64 @prim_vector_45set_33(i64 %Z9D$_37wind_45stack, i64 %arg8361354, i64 %a8360076); call prim_vector_45set_33
  %cloptr8367225 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8367227 = getelementptr inbounds i64, i64* %cloptr8367225, i64 1              ; &eptr8367227[1]
  %eptr8367228 = getelementptr inbounds i64, i64* %cloptr8367225, i64 2              ; &eptr8367228[2]
  %eptr8367229 = getelementptr inbounds i64, i64* %cloptr8367225, i64 3              ; &eptr8367229[3]
  store i64 %Ipe$post, i64* %eptr8367227                                             ; *eptr8367227 = %Ipe$post
  store i64 %P9A$v, i64* %eptr8367228                                                ; *eptr8367228 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367229                                          ; *eptr8367229 = %cont8360196
  %eptr8367226 = getelementptr inbounds i64, i64* %cloptr8367225, i64 0              ; &cloptr8367225[0]
  %f8367230 = ptrtoint void(i64,i64)* @lam8363668 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367230, i64* %eptr8367226                                             ; store fptr
  %arg8361358 = ptrtoint i64* %cloptr8367225 to i64                                  ; closure cast; i64* -> i64
  %arg8361357 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362799 = add i64 0, 0                                                         ; quoted ()
  %rva8362798 = call i64 @prim_cons(i64 %retprim8360203, i64 %rva8362799)            ; call prim_cons
  %rva8362797 = call i64 @prim_cons(i64 %arg8361357, i64 %rva8362798)                ; call prim_cons
  %cloptr8367231 = inttoptr i64 %arg8361358 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367232 = getelementptr inbounds i64, i64* %cloptr8367231, i64 0             ; &cloptr8367231[0]
  %f8367234 = load i64, i64* %i0ptr8367232, align 8                                  ; load; *i0ptr8367232
  %fptr8367233 = inttoptr i64 %f8367234 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367233(i64 %arg8361358, i64 %rva8362797)           ; tail call
  ret void
}


define void @lam8363668(i64 %env8363669, i64 %rvp8362796) {
  %envptr8367235 = inttoptr i64 %env8363669 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367236 = getelementptr inbounds i64, i64* %envptr8367235, i64 3            ; &envptr8367235[3]
  %cont8360196 = load i64, i64* %envptr8367236, align 8                              ; load; *envptr8367236
  %envptr8367237 = inttoptr i64 %env8363669 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367238 = getelementptr inbounds i64, i64* %envptr8367237, i64 2            ; &envptr8367237[2]
  %P9A$v = load i64, i64* %envptr8367238, align 8                                    ; load; *envptr8367238
  %envptr8367239 = inttoptr i64 %env8363669 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367240 = getelementptr inbounds i64, i64* %envptr8367239, i64 1            ; &envptr8367239[1]
  %Ipe$post = load i64, i64* %envptr8367240, align 8                                 ; load; *envptr8367240
  %_958360200 = call i64 @prim_car(i64 %rvp8362796)                                  ; call prim_car
  %rvp8362795 = call i64 @prim_cdr(i64 %rvp8362796)                                  ; call prim_cdr
  %y3o$_95t = call i64 @prim_car(i64 %rvp8362795)                                    ; call prim_car
  %na8362775 = call i64 @prim_cdr(i64 %rvp8362795)                                   ; call prim_cdr
  %a8360077 = call i64 @prim_procedure_63(i64 %Ipe$post)                             ; call prim_procedure_63
  %cmp8367241 = icmp eq i64 %a8360077, 15                                            ; false?
  br i1 %cmp8367241, label %else8367243, label %then8367242                          ; if

then8367242:
  %cloptr8367244 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367246 = getelementptr inbounds i64, i64* %cloptr8367244, i64 1              ; &eptr8367246[1]
  %eptr8367247 = getelementptr inbounds i64, i64* %cloptr8367244, i64 2              ; &eptr8367247[2]
  store i64 %P9A$v, i64* %eptr8367246                                                ; *eptr8367246 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367247                                          ; *eptr8367247 = %cont8360196
  %eptr8367245 = getelementptr inbounds i64, i64* %cloptr8367244, i64 0              ; &cloptr8367244[0]
  %f8367248 = ptrtoint void(i64,i64)* @lam8363659 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367248, i64* %eptr8367245                                             ; store fptr
  %arg8361360 = ptrtoint i64* %cloptr8367244 to i64                                  ; closure cast; i64* -> i64
  %rva8362784 = add i64 0, 0                                                         ; quoted ()
  %rva8362783 = call i64 @prim_cons(i64 %arg8361360, i64 %rva8362784)                ; call prim_cons
  %cloptr8367249 = inttoptr i64 %Ipe$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8367250 = getelementptr inbounds i64, i64* %cloptr8367249, i64 0             ; &cloptr8367249[0]
  %f8367252 = load i64, i64* %i0ptr8367250, align 8                                  ; load; *i0ptr8367250
  %fptr8367251 = inttoptr i64 %f8367252 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367251(i64 %Ipe$post, i64 %rva8362783)             ; tail call
  ret void

else8367243:
  %arg8361365 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym8367253, i32 0, i32 0)); quoted string
  %retprim8360202 = call i64 @prim_halt(i64 %arg8361365)                             ; call prim_halt
  %cloptr8367254 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367256 = getelementptr inbounds i64, i64* %cloptr8367254, i64 1              ; &eptr8367256[1]
  %eptr8367257 = getelementptr inbounds i64, i64* %cloptr8367254, i64 2              ; &eptr8367257[2]
  store i64 %P9A$v, i64* %eptr8367256                                                ; *eptr8367256 = %P9A$v
  store i64 %cont8360196, i64* %eptr8367257                                          ; *eptr8367257 = %cont8360196
  %eptr8367255 = getelementptr inbounds i64, i64* %cloptr8367254, i64 0              ; &cloptr8367254[0]
  %f8367258 = ptrtoint void(i64,i64)* @lam8363665 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367258, i64* %eptr8367255                                             ; store fptr
  %arg8361368 = ptrtoint i64* %cloptr8367254 to i64                                  ; closure cast; i64* -> i64
  %arg8361367 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362794 = add i64 0, 0                                                         ; quoted ()
  %rva8362793 = call i64 @prim_cons(i64 %retprim8360202, i64 %rva8362794)            ; call prim_cons
  %rva8362792 = call i64 @prim_cons(i64 %arg8361367, i64 %rva8362793)                ; call prim_cons
  %cloptr8367259 = inttoptr i64 %arg8361368 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367260 = getelementptr inbounds i64, i64* %cloptr8367259, i64 0             ; &cloptr8367259[0]
  %f8367262 = load i64, i64* %i0ptr8367260, align 8                                  ; load; *i0ptr8367260
  %fptr8367261 = inttoptr i64 %f8367262 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367261(i64 %arg8361368, i64 %rva8362792)           ; tail call
  ret void
}


define void @lam8363665(i64 %env8363666, i64 %rvp8362791) {
  %envptr8367263 = inttoptr i64 %env8363666 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367264 = getelementptr inbounds i64, i64* %envptr8367263, i64 2            ; &envptr8367263[2]
  %cont8360196 = load i64, i64* %envptr8367264, align 8                              ; load; *envptr8367264
  %envptr8367265 = inttoptr i64 %env8363666 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367266 = getelementptr inbounds i64, i64* %envptr8367265, i64 1            ; &envptr8367265[1]
  %P9A$v = load i64, i64* %envptr8367266, align 8                                    ; load; *envptr8367266
  %_958360201 = call i64 @prim_car(i64 %rvp8362791)                                  ; call prim_car
  %rvp8362790 = call i64 @prim_cdr(i64 %rvp8362791)                                  ; call prim_cdr
  %qOV$_95t = call i64 @prim_car(i64 %rvp8362790)                                    ; call prim_car
  %na8362786 = call i64 @prim_cdr(i64 %rvp8362790)                                   ; call prim_cdr
  %arg8361370 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362789 = add i64 0, 0                                                         ; quoted ()
  %rva8362788 = call i64 @prim_cons(i64 %P9A$v, i64 %rva8362789)                     ; call prim_cons
  %rva8362787 = call i64 @prim_cons(i64 %arg8361370, i64 %rva8362788)                ; call prim_cons
  %cloptr8367267 = inttoptr i64 %cont8360196 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367268 = getelementptr inbounds i64, i64* %cloptr8367267, i64 0             ; &cloptr8367267[0]
  %f8367270 = load i64, i64* %i0ptr8367268, align 8                                  ; load; *i0ptr8367268
  %fptr8367269 = inttoptr i64 %f8367270 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367269(i64 %cont8360196, i64 %rva8362787)          ; tail call
  ret void
}


define void @lam8363659(i64 %env8363660, i64 %rvp8362782) {
  %envptr8367271 = inttoptr i64 %env8363660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367272 = getelementptr inbounds i64, i64* %envptr8367271, i64 2            ; &envptr8367271[2]
  %cont8360196 = load i64, i64* %envptr8367272, align 8                              ; load; *envptr8367272
  %envptr8367273 = inttoptr i64 %env8363660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367274 = getelementptr inbounds i64, i64* %envptr8367273, i64 1            ; &envptr8367273[1]
  %P9A$v = load i64, i64* %envptr8367274, align 8                                    ; load; *envptr8367274
  %_958360201 = call i64 @prim_car(i64 %rvp8362782)                                  ; call prim_car
  %rvp8362781 = call i64 @prim_cdr(i64 %rvp8362782)                                  ; call prim_cdr
  %qOV$_95t = call i64 @prim_car(i64 %rvp8362781)                                    ; call prim_car
  %na8362777 = call i64 @prim_cdr(i64 %rvp8362781)                                   ; call prim_cdr
  %arg8361363 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362780 = add i64 0, 0                                                         ; quoted ()
  %rva8362779 = call i64 @prim_cons(i64 %P9A$v, i64 %rva8362780)                     ; call prim_cons
  %rva8362778 = call i64 @prim_cons(i64 %arg8361363, i64 %rva8362779)                ; call prim_cons
  %cloptr8367275 = inttoptr i64 %cont8360196 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367276 = getelementptr inbounds i64, i64* %cloptr8367275, i64 0             ; &cloptr8367275[0]
  %f8367278 = load i64, i64* %i0ptr8367276, align 8                                  ; load; *i0ptr8367276
  %fptr8367277 = inttoptr i64 %f8367278 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367277(i64 %cont8360196, i64 %rva8362778)          ; tail call
  ret void
}


define void @lam8363648(i64 %env8363649, i64 %T1t$lst8360218) {
  %cont8360217 = call i64 @prim_car(i64 %T1t$lst8360218)                             ; call prim_car
  %T1t$lst = call i64 @prim_cdr(i64 %T1t$lst8360218)                                 ; call prim_cdr
  %arg8361470 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362931 = add i64 0, 0                                                         ; quoted ()
  %rva8362930 = call i64 @prim_cons(i64 %T1t$lst, i64 %rva8362931)                   ; call prim_cons
  %rva8362929 = call i64 @prim_cons(i64 %arg8361470, i64 %rva8362930)                ; call prim_cons
  %cloptr8367279 = inttoptr i64 %cont8360217 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367280 = getelementptr inbounds i64, i64* %cloptr8367279, i64 0             ; &cloptr8367279[0]
  %f8367282 = load i64, i64* %i0ptr8367280, align 8                                  ; load; *i0ptr8367280
  %fptr8367281 = inttoptr i64 %f8367282 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367281(i64 %cont8360217, i64 %rva8362929)          ; tail call
  ret void
}


define void @lam8363644(i64 %env8363645, i64 %rvp8362983) {
  %_958360207 = call i64 @prim_car(i64 %rvp8362983)                                  ; call prim_car
  %rvp8362982 = call i64 @prim_cdr(i64 %rvp8362983)                                  ; call prim_cdr
  %ET8$_37raise_45handler = call i64 @prim_car(i64 %rvp8362982)                      ; call prim_car
  %na8362933 = call i64 @prim_cdr(i64 %rvp8362982)                                   ; call prim_cdr
  %cloptr8367283 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367284 = getelementptr inbounds i64, i64* %cloptr8367283, i64 0              ; &cloptr8367283[0]
  %f8367285 = ptrtoint void(i64,i64)* @lam8363642 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367285, i64* %eptr8367284                                             ; store fptr
  %arg8361473 = ptrtoint i64* %cloptr8367283 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367286 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367287 = getelementptr inbounds i64, i64* %cloptr8367286, i64 0              ; &cloptr8367286[0]
  %f8367288 = ptrtoint void(i64,i64)* @lam8363638 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367288, i64* %eptr8367287                                             ; store fptr
  %arg8361472 = ptrtoint i64* %cloptr8367286 to i64                                  ; closure cast; i64* -> i64
  %rva8362981 = add i64 0, 0                                                         ; quoted ()
  %rva8362980 = call i64 @prim_cons(i64 %arg8361472, i64 %rva8362981)                ; call prim_cons
  %cloptr8367289 = inttoptr i64 %arg8361473 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367290 = getelementptr inbounds i64, i64* %cloptr8367289, i64 0             ; &cloptr8367289[0]
  %f8367292 = load i64, i64* %i0ptr8367290, align 8                                  ; load; *i0ptr8367290
  %fptr8367291 = inttoptr i64 %f8367292 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367291(i64 %arg8361473, i64 %rva8362980)           ; tail call
  ret void
}


define void @lam8363642(i64 %env8363643, i64 %O1f$lst8360216) {
  %cont8360215 = call i64 @prim_car(i64 %O1f$lst8360216)                             ; call prim_car
  %O1f$lst = call i64 @prim_cdr(i64 %O1f$lst8360216)                                 ; call prim_cdr
  %arg8361477 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362936 = add i64 0, 0                                                         ; quoted ()
  %rva8362935 = call i64 @prim_cons(i64 %O1f$lst, i64 %rva8362936)                   ; call prim_cons
  %rva8362934 = call i64 @prim_cons(i64 %arg8361477, i64 %rva8362935)                ; call prim_cons
  %cloptr8367293 = inttoptr i64 %cont8360215 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367294 = getelementptr inbounds i64, i64* %cloptr8367293, i64 0             ; &cloptr8367293[0]
  %f8367296 = load i64, i64* %i0ptr8367294, align 8                                  ; load; *i0ptr8367294
  %fptr8367295 = inttoptr i64 %f8367296 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367295(i64 %cont8360215, i64 %rva8362934)          ; tail call
  ret void
}


define void @lam8363638(i64 %env8363639, i64 %rvp8362979) {
  %_958360213 = call i64 @prim_car(i64 %rvp8362979)                                  ; call prim_car
  %rvp8362978 = call i64 @prim_cdr(i64 %rvp8362979)                                  ; call prim_cdr
  %a8360078 = call i64 @prim_car(i64 %rvp8362978)                                    ; call prim_car
  %na8362938 = call i64 @prim_cdr(i64 %rvp8362978)                                   ; call prim_cdr
  %arg8361480 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360214 = call i64 @prim_make_45vector(i64 %arg8361480, i64 %a8360078)     ; call prim_make_45vector
  %cloptr8367297 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367298 = getelementptr inbounds i64, i64* %cloptr8367297, i64 0              ; &cloptr8367297[0]
  %f8367299 = ptrtoint void(i64,i64)* @lam8363635 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367299, i64* %eptr8367298                                             ; store fptr
  %arg8361483 = ptrtoint i64* %cloptr8367297 to i64                                  ; closure cast; i64* -> i64
  %arg8361482 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362977 = add i64 0, 0                                                         ; quoted ()
  %rva8362976 = call i64 @prim_cons(i64 %retprim8360214, i64 %rva8362977)            ; call prim_cons
  %rva8362975 = call i64 @prim_cons(i64 %arg8361482, i64 %rva8362976)                ; call prim_cons
  %cloptr8367300 = inttoptr i64 %arg8361483 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367301 = getelementptr inbounds i64, i64* %cloptr8367300, i64 0             ; &cloptr8367300[0]
  %f8367303 = load i64, i64* %i0ptr8367301, align 8                                  ; load; *i0ptr8367301
  %fptr8367302 = inttoptr i64 %f8367303 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367302(i64 %arg8361483, i64 %rva8362975)           ; tail call
  ret void
}


define void @lam8363635(i64 %env8363636, i64 %rvp8362974) {
  %_958360208 = call i64 @prim_car(i64 %rvp8362974)                                  ; call prim_car
  %rvp8362973 = call i64 @prim_cdr(i64 %rvp8362974)                                  ; call prim_cdr
  %yVk$x = call i64 @prim_car(i64 %rvp8362973)                                       ; call prim_car
  %na8362940 = call i64 @prim_cdr(i64 %rvp8362973)                                   ; call prim_cdr
  %a8360079 = call i64 @prim_set()                                                   ; call prim_set
  %arg8361485 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360212 = call i64 @prim_vector_45set_33(i64 %yVk$x, i64 %arg8361485, i64 %a8360079); call prim_vector_45set_33
  %cloptr8367304 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8367306 = getelementptr inbounds i64, i64* %cloptr8367304, i64 1              ; &eptr8367306[1]
  store i64 %yVk$x, i64* %eptr8367306                                                ; *eptr8367306 = %yVk$x
  %eptr8367305 = getelementptr inbounds i64, i64* %cloptr8367304, i64 0              ; &cloptr8367304[0]
  %f8367307 = ptrtoint void(i64,i64)* @lam8363632 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367307, i64* %eptr8367305                                             ; store fptr
  %arg8361489 = ptrtoint i64* %cloptr8367304 to i64                                  ; closure cast; i64* -> i64
  %arg8361488 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362972 = add i64 0, 0                                                         ; quoted ()
  %rva8362971 = call i64 @prim_cons(i64 %retprim8360212, i64 %rva8362972)            ; call prim_cons
  %rva8362970 = call i64 @prim_cons(i64 %arg8361488, i64 %rva8362971)                ; call prim_cons
  %cloptr8367308 = inttoptr i64 %arg8361489 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367309 = getelementptr inbounds i64, i64* %cloptr8367308, i64 0             ; &cloptr8367308[0]
  %f8367311 = load i64, i64* %i0ptr8367309, align 8                                  ; load; *i0ptr8367309
  %fptr8367310 = inttoptr i64 %f8367311 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367310(i64 %arg8361489, i64 %rva8362970)           ; tail call
  ret void
}


define void @lam8363632(i64 %env8363633, i64 %rvp8362969) {
  %envptr8367312 = inttoptr i64 %env8363633 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367313 = getelementptr inbounds i64, i64* %envptr8367312, i64 1            ; &envptr8367312[1]
  %yVk$x = load i64, i64* %envptr8367313, align 8                                    ; load; *envptr8367313
  %_958360209 = call i64 @prim_car(i64 %rvp8362969)                                  ; call prim_car
  %rvp8362968 = call i64 @prim_cdr(i64 %rvp8362969)                                  ; call prim_cdr
  %BZi$_95t = call i64 @prim_car(i64 %rvp8362968)                                    ; call prim_car
  %na8362942 = call i64 @prim_cdr(i64 %rvp8362968)                                   ; call prim_cdr
  %arg8361490 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360080 = call i64 @prim_vector_45ref(i64 %yVk$x, i64 %arg8361490)               ; call prim_vector_45ref
  %arg8361492 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8360081 = call i64 @prim_set_45add(i64 %a8360080, i64 %arg8361492)               ; call prim_set_45add
  %arg8361495 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim8360211 = call i64 @prim_vector_45set_33(i64 %yVk$x, i64 %arg8361495, i64 %a8360081); call prim_vector_45set_33
  %cloptr8367314 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8367316 = getelementptr inbounds i64, i64* %cloptr8367314, i64 1              ; &eptr8367316[1]
  store i64 %yVk$x, i64* %eptr8367316                                                ; *eptr8367316 = %yVk$x
  %eptr8367315 = getelementptr inbounds i64, i64* %cloptr8367314, i64 0              ; &cloptr8367314[0]
  %f8367317 = ptrtoint void(i64,i64)* @lam8363627 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367317, i64* %eptr8367315                                             ; store fptr
  %arg8361499 = ptrtoint i64* %cloptr8367314 to i64                                  ; closure cast; i64* -> i64
  %arg8361498 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362967 = add i64 0, 0                                                         ; quoted ()
  %rva8362966 = call i64 @prim_cons(i64 %retprim8360211, i64 %rva8362967)            ; call prim_cons
  %rva8362965 = call i64 @prim_cons(i64 %arg8361498, i64 %rva8362966)                ; call prim_cons
  %cloptr8367318 = inttoptr i64 %arg8361499 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367319 = getelementptr inbounds i64, i64* %cloptr8367318, i64 0             ; &cloptr8367318[0]
  %f8367321 = load i64, i64* %i0ptr8367319, align 8                                  ; load; *i0ptr8367319
  %fptr8367320 = inttoptr i64 %f8367321 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367320(i64 %arg8361499, i64 %rva8362965)           ; tail call
  ret void
}


define void @lam8363627(i64 %env8363628, i64 %rvp8362964) {
  %envptr8367322 = inttoptr i64 %env8363628 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367323 = getelementptr inbounds i64, i64* %envptr8367322, i64 1            ; &envptr8367322[1]
  %yVk$x = load i64, i64* %envptr8367323, align 8                                    ; load; *envptr8367323
  %_958360210 = call i64 @prim_car(i64 %rvp8362964)                                  ; call prim_car
  %rvp8362963 = call i64 @prim_cdr(i64 %rvp8362964)                                  ; call prim_cdr
  %adu$_95t = call i64 @prim_car(i64 %rvp8362963)                                    ; call prim_car
  %na8362944 = call i64 @prim_cdr(i64 %rvp8362963)                                   ; call prim_cdr
  %arg8361500 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8360082 = call i64 @prim_vector_45ref(i64 %yVk$x, i64 %arg8361500)               ; call prim_vector_45ref
  %arg8361502 = call i64 @const_init_int(i64 5)                                      ; quoted int
  %a8360083 = call i64 @prim_set_45member_63(i64 %a8360082, i64 %arg8361502)         ; call prim_set_45member_63
  %cmp8367324 = icmp eq i64 %a8360083, 15                                            ; false?
  br i1 %cmp8367324, label %else8367326, label %then8367325                          ; if

then8367325:
  %cloptr8367327 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367328 = getelementptr inbounds i64, i64* %cloptr8367327, i64 0              ; &cloptr8367327[0]
  %f8367329 = ptrtoint void(i64,i64)* @lam8363617 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367329, i64* %eptr8367328                                             ; store fptr
  %arg8361506 = ptrtoint i64* %cloptr8367327 to i64                                  ; closure cast; i64* -> i64
  %arg8361505 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8361504 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva8362953 = add i64 0, 0                                                         ; quoted ()
  %rva8362952 = call i64 @prim_cons(i64 %arg8361504, i64 %rva8362953)                ; call prim_cons
  %rva8362951 = call i64 @prim_cons(i64 %arg8361505, i64 %rva8362952)                ; call prim_cons
  %cloptr8367330 = inttoptr i64 %arg8361506 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367331 = getelementptr inbounds i64, i64* %cloptr8367330, i64 0             ; &cloptr8367330[0]
  %f8367333 = load i64, i64* %i0ptr8367331, align 8                                  ; load; *i0ptr8367331
  %fptr8367332 = inttoptr i64 %f8367333 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367332(i64 %arg8361506, i64 %rva8362951)           ; tail call
  ret void

else8367326:
  %cloptr8367334 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367335 = getelementptr inbounds i64, i64* %cloptr8367334, i64 0              ; &cloptr8367334[0]
  %f8367336 = ptrtoint void(i64,i64)* @lam8363623 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367336, i64* %eptr8367335                                             ; store fptr
  %arg8361512 = ptrtoint i64* %cloptr8367334 to i64                                  ; closure cast; i64* -> i64
  %arg8361511 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8361510 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8362962 = add i64 0, 0                                                         ; quoted ()
  %rva8362961 = call i64 @prim_cons(i64 %arg8361510, i64 %rva8362962)                ; call prim_cons
  %rva8362960 = call i64 @prim_cons(i64 %arg8361511, i64 %rva8362961)                ; call prim_cons
  %cloptr8367337 = inttoptr i64 %arg8361512 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367338 = getelementptr inbounds i64, i64* %cloptr8367337, i64 0             ; &cloptr8367337[0]
  %f8367340 = load i64, i64* %i0ptr8367338, align 8                                  ; load; *i0ptr8367338
  %fptr8367339 = inttoptr i64 %f8367340 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367339(i64 %arg8361512, i64 %rva8362960)           ; tail call
  ret void
}


define void @lam8363623(i64 %env8363624, i64 %rvp8362959) {
  %_950 = call i64 @prim_car(i64 %rvp8362959)                                        ; call prim_car
  %rvp8362958 = call i64 @prim_cdr(i64 %rvp8362959)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8362958)                                           ; call prim_car
  %na8362955 = call i64 @prim_cdr(i64 %rvp8362958)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8362957 = add i64 0, 0                                                         ; quoted ()
  %rva8362956 = call i64 @prim_cons(i64 %_951, i64 %rva8362957)                      ; call prim_cons
  %cloptr8367341 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8367342 = getelementptr inbounds i64, i64* %cloptr8367341, i64 0             ; &cloptr8367341[0]
  %f8367344 = load i64, i64* %i0ptr8367342, align 8                                  ; load; *i0ptr8367342
  %fptr8367343 = inttoptr i64 %f8367344 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367343(i64 %_951, i64 %rva8362956)                 ; tail call
  ret void
}


define void @lam8363617(i64 %env8363618, i64 %rvp8362950) {
  %_950 = call i64 @prim_car(i64 %rvp8362950)                                        ; call prim_car
  %rvp8362949 = call i64 @prim_cdr(i64 %rvp8362950)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp8362949)                                           ; call prim_car
  %na8362946 = call i64 @prim_cdr(i64 %rvp8362949)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva8362948 = add i64 0, 0                                                         ; quoted ()
  %rva8362947 = call i64 @prim_cons(i64 %_951, i64 %rva8362948)                      ; call prim_cons
  %cloptr8367345 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr8367346 = getelementptr inbounds i64, i64* %cloptr8367345, i64 0             ; &cloptr8367345[0]
  %f8367348 = load i64, i64* %i0ptr8367346, align 8                                  ; load; *i0ptr8367346
  %fptr8367347 = inttoptr i64 %f8367348 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367347(i64 %_951, i64 %rva8362947)                 ; tail call
  ret void
}


define void @lam8363598(i64 %env8363599, i64 %rvp8363096) {
  %envptr8367349 = inttoptr i64 %env8363599 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367350 = getelementptr inbounds i64, i64* %envptr8367349, i64 3            ; &envptr8367349[3]
  %nAl$_37foldr = load i64, i64* %envptr8367350, align 8                             ; load; *envptr8367350
  %envptr8367351 = inttoptr i64 %env8363599 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367352 = getelementptr inbounds i64, i64* %envptr8367351, i64 2            ; &envptr8367351[2]
  %TpE$_37map1 = load i64, i64* %envptr8367352, align 8                              ; load; *envptr8367352
  %envptr8367353 = inttoptr i64 %env8363599 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367354 = getelementptr inbounds i64, i64* %envptr8367353, i64 1            ; &envptr8367353[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367354, align 8                            ; load; *envptr8367354
  %cont8360227 = call i64 @prim_car(i64 %rvp8363096)                                 ; call prim_car
  %rvp8363095 = call i64 @prim_cdr(i64 %rvp8363096)                                  ; call prim_cdr
  %vuP$_37foldl = call i64 @prim_car(i64 %rvp8363095)                                ; call prim_car
  %na8363003 = call i64 @prim_cdr(i64 %rvp8363095)                                   ; call prim_cdr
  %arg8361517 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8367355 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8367357 = getelementptr inbounds i64, i64* %cloptr8367355, i64 1              ; &eptr8367357[1]
  %eptr8367358 = getelementptr inbounds i64, i64* %cloptr8367355, i64 2              ; &eptr8367358[2]
  %eptr8367359 = getelementptr inbounds i64, i64* %cloptr8367355, i64 3              ; &eptr8367359[3]
  %eptr8367360 = getelementptr inbounds i64, i64* %cloptr8367355, i64 4              ; &eptr8367360[4]
  store i64 %j83$_37foldr1, i64* %eptr8367357                                        ; *eptr8367357 = %j83$_37foldr1
  store i64 %TpE$_37map1, i64* %eptr8367358                                          ; *eptr8367358 = %TpE$_37map1
  store i64 %vuP$_37foldl, i64* %eptr8367359                                         ; *eptr8367359 = %vuP$_37foldl
  store i64 %nAl$_37foldr, i64* %eptr8367360                                         ; *eptr8367360 = %nAl$_37foldr
  %eptr8367356 = getelementptr inbounds i64, i64* %cloptr8367355, i64 0              ; &cloptr8367355[0]
  %f8367361 = ptrtoint void(i64,i64)* @lam8363595 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367361, i64* %eptr8367356                                             ; store fptr
  %arg8361516 = ptrtoint i64* %cloptr8367355 to i64                                  ; closure cast; i64* -> i64
  %rva8363094 = add i64 0, 0                                                         ; quoted ()
  %rva8363093 = call i64 @prim_cons(i64 %arg8361516, i64 %rva8363094)                ; call prim_cons
  %rva8363092 = call i64 @prim_cons(i64 %arg8361517, i64 %rva8363093)                ; call prim_cons
  %cloptr8367362 = inttoptr i64 %cont8360227 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367363 = getelementptr inbounds i64, i64* %cloptr8367362, i64 0             ; &cloptr8367362[0]
  %f8367365 = load i64, i64* %i0ptr8367363, align 8                                  ; load; *i0ptr8367363
  %fptr8367364 = inttoptr i64 %f8367365 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367364(i64 %cont8360227, i64 %rva8363092)          ; tail call
  ret void
}


define void @lam8363595(i64 %env8363596, i64 %v0P$args8360229) {
  %envptr8367366 = inttoptr i64 %env8363596 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367367 = getelementptr inbounds i64, i64* %envptr8367366, i64 4            ; &envptr8367366[4]
  %nAl$_37foldr = load i64, i64* %envptr8367367, align 8                             ; load; *envptr8367367
  %envptr8367368 = inttoptr i64 %env8363596 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367369 = getelementptr inbounds i64, i64* %envptr8367368, i64 3            ; &envptr8367368[3]
  %vuP$_37foldl = load i64, i64* %envptr8367369, align 8                             ; load; *envptr8367369
  %envptr8367370 = inttoptr i64 %env8363596 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367371 = getelementptr inbounds i64, i64* %envptr8367370, i64 2            ; &envptr8367370[2]
  %TpE$_37map1 = load i64, i64* %envptr8367371, align 8                              ; load; *envptr8367371
  %envptr8367372 = inttoptr i64 %env8363596 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367373 = getelementptr inbounds i64, i64* %envptr8367372, i64 1            ; &envptr8367372[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367373, align 8                            ; load; *envptr8367373
  %cont8360228 = call i64 @prim_car(i64 %v0P$args8360229)                            ; call prim_car
  %v0P$args = call i64 @prim_cdr(i64 %v0P$args8360229)                               ; call prim_cdr
  %YB6$f = call i64 @prim_car(i64 %v0P$args)                                         ; call prim_car
  %a8359971 = call i64 @prim_cdr(i64 %v0P$args)                                      ; call prim_cdr
  %retprim8360248 = call i64 @prim_car(i64 %a8359971)                                ; call prim_car
  %cloptr8367374 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8367376 = getelementptr inbounds i64, i64* %cloptr8367374, i64 1              ; &eptr8367376[1]
  %eptr8367377 = getelementptr inbounds i64, i64* %cloptr8367374, i64 2              ; &eptr8367377[2]
  %eptr8367378 = getelementptr inbounds i64, i64* %cloptr8367374, i64 3              ; &eptr8367378[3]
  %eptr8367379 = getelementptr inbounds i64, i64* %cloptr8367374, i64 4              ; &eptr8367379[4]
  %eptr8367380 = getelementptr inbounds i64, i64* %cloptr8367374, i64 5              ; &eptr8367380[5]
  %eptr8367381 = getelementptr inbounds i64, i64* %cloptr8367374, i64 6              ; &eptr8367381[6]
  %eptr8367382 = getelementptr inbounds i64, i64* %cloptr8367374, i64 7              ; &eptr8367382[7]
  store i64 %j83$_37foldr1, i64* %eptr8367376                                        ; *eptr8367376 = %j83$_37foldr1
  store i64 %TpE$_37map1, i64* %eptr8367377                                          ; *eptr8367377 = %TpE$_37map1
  store i64 %vuP$_37foldl, i64* %eptr8367378                                         ; *eptr8367378 = %vuP$_37foldl
  store i64 %nAl$_37foldr, i64* %eptr8367379                                         ; *eptr8367379 = %nAl$_37foldr
  store i64 %YB6$f, i64* %eptr8367380                                                ; *eptr8367380 = %YB6$f
  store i64 %cont8360228, i64* %eptr8367381                                          ; *eptr8367381 = %cont8360228
  store i64 %v0P$args, i64* %eptr8367382                                             ; *eptr8367382 = %v0P$args
  %eptr8367375 = getelementptr inbounds i64, i64* %cloptr8367374, i64 0              ; &cloptr8367374[0]
  %f8367383 = ptrtoint void(i64,i64)* @lam8363593 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367383, i64* %eptr8367375                                             ; store fptr
  %arg8361526 = ptrtoint i64* %cloptr8367374 to i64                                  ; closure cast; i64* -> i64
  %arg8361525 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363091 = add i64 0, 0                                                         ; quoted ()
  %rva8363090 = call i64 @prim_cons(i64 %retprim8360248, i64 %rva8363091)            ; call prim_cons
  %rva8363089 = call i64 @prim_cons(i64 %arg8361525, i64 %rva8363090)                ; call prim_cons
  %cloptr8367384 = inttoptr i64 %arg8361526 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367385 = getelementptr inbounds i64, i64* %cloptr8367384, i64 0             ; &cloptr8367384[0]
  %f8367387 = load i64, i64* %i0ptr8367385, align 8                                  ; load; *i0ptr8367385
  %fptr8367386 = inttoptr i64 %f8367387 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367386(i64 %arg8361526, i64 %rva8363089)           ; tail call
  ret void
}


define void @lam8363593(i64 %env8363594, i64 %rvp8363088) {
  %envptr8367388 = inttoptr i64 %env8363594 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367389 = getelementptr inbounds i64, i64* %envptr8367388, i64 7            ; &envptr8367388[7]
  %v0P$args = load i64, i64* %envptr8367389, align 8                                 ; load; *envptr8367389
  %envptr8367390 = inttoptr i64 %env8363594 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367391 = getelementptr inbounds i64, i64* %envptr8367390, i64 6            ; &envptr8367390[6]
  %cont8360228 = load i64, i64* %envptr8367391, align 8                              ; load; *envptr8367391
  %envptr8367392 = inttoptr i64 %env8363594 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367393 = getelementptr inbounds i64, i64* %envptr8367392, i64 5            ; &envptr8367392[5]
  %YB6$f = load i64, i64* %envptr8367393, align 8                                    ; load; *envptr8367393
  %envptr8367394 = inttoptr i64 %env8363594 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367395 = getelementptr inbounds i64, i64* %envptr8367394, i64 4            ; &envptr8367394[4]
  %nAl$_37foldr = load i64, i64* %envptr8367395, align 8                             ; load; *envptr8367395
  %envptr8367396 = inttoptr i64 %env8363594 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367397 = getelementptr inbounds i64, i64* %envptr8367396, i64 3            ; &envptr8367396[3]
  %vuP$_37foldl = load i64, i64* %envptr8367397, align 8                             ; load; *envptr8367397
  %envptr8367398 = inttoptr i64 %env8363594 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367399 = getelementptr inbounds i64, i64* %envptr8367398, i64 2            ; &envptr8367398[2]
  %TpE$_37map1 = load i64, i64* %envptr8367399, align 8                              ; load; *envptr8367399
  %envptr8367400 = inttoptr i64 %env8363594 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367401 = getelementptr inbounds i64, i64* %envptr8367400, i64 1            ; &envptr8367400[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367401, align 8                            ; load; *envptr8367401
  %_958360230 = call i64 @prim_car(i64 %rvp8363088)                                  ; call prim_car
  %rvp8363087 = call i64 @prim_cdr(i64 %rvp8363088)                                  ; call prim_cdr
  %l4d$acc = call i64 @prim_car(i64 %rvp8363087)                                     ; call prim_car
  %na8363005 = call i64 @prim_cdr(i64 %rvp8363087)                                   ; call prim_cdr
  %a8359972 = call i64 @prim_cdr(i64 %v0P$args)                                      ; call prim_cdr
  %retprim8360247 = call i64 @prim_cdr(i64 %a8359972)                                ; call prim_cdr
  %cloptr8367402 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8367404 = getelementptr inbounds i64, i64* %cloptr8367402, i64 1              ; &eptr8367404[1]
  %eptr8367405 = getelementptr inbounds i64, i64* %cloptr8367402, i64 2              ; &eptr8367405[2]
  %eptr8367406 = getelementptr inbounds i64, i64* %cloptr8367402, i64 3              ; &eptr8367406[3]
  %eptr8367407 = getelementptr inbounds i64, i64* %cloptr8367402, i64 4              ; &eptr8367407[4]
  %eptr8367408 = getelementptr inbounds i64, i64* %cloptr8367402, i64 5              ; &eptr8367408[5]
  %eptr8367409 = getelementptr inbounds i64, i64* %cloptr8367402, i64 6              ; &eptr8367409[6]
  %eptr8367410 = getelementptr inbounds i64, i64* %cloptr8367402, i64 7              ; &eptr8367410[7]
  store i64 %j83$_37foldr1, i64* %eptr8367404                                        ; *eptr8367404 = %j83$_37foldr1
  store i64 %l4d$acc, i64* %eptr8367405                                              ; *eptr8367405 = %l4d$acc
  store i64 %TpE$_37map1, i64* %eptr8367406                                          ; *eptr8367406 = %TpE$_37map1
  store i64 %vuP$_37foldl, i64* %eptr8367407                                         ; *eptr8367407 = %vuP$_37foldl
  store i64 %nAl$_37foldr, i64* %eptr8367408                                         ; *eptr8367408 = %nAl$_37foldr
  store i64 %YB6$f, i64* %eptr8367409                                                ; *eptr8367409 = %YB6$f
  store i64 %cont8360228, i64* %eptr8367410                                          ; *eptr8367410 = %cont8360228
  %eptr8367403 = getelementptr inbounds i64, i64* %cloptr8367402, i64 0              ; &cloptr8367402[0]
  %f8367411 = ptrtoint void(i64,i64)* @lam8363591 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367411, i64* %eptr8367403                                             ; store fptr
  %arg8361531 = ptrtoint i64* %cloptr8367402 to i64                                  ; closure cast; i64* -> i64
  %arg8361530 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363086 = add i64 0, 0                                                         ; quoted ()
  %rva8363085 = call i64 @prim_cons(i64 %retprim8360247, i64 %rva8363086)            ; call prim_cons
  %rva8363084 = call i64 @prim_cons(i64 %arg8361530, i64 %rva8363085)                ; call prim_cons
  %cloptr8367412 = inttoptr i64 %arg8361531 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367413 = getelementptr inbounds i64, i64* %cloptr8367412, i64 0             ; &cloptr8367412[0]
  %f8367415 = load i64, i64* %i0ptr8367413, align 8                                  ; load; *i0ptr8367413
  %fptr8367414 = inttoptr i64 %f8367415 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367414(i64 %arg8361531, i64 %rva8363084)           ; tail call
  ret void
}


define void @lam8363591(i64 %env8363592, i64 %rvp8363083) {
  %envptr8367416 = inttoptr i64 %env8363592 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367417 = getelementptr inbounds i64, i64* %envptr8367416, i64 7            ; &envptr8367416[7]
  %cont8360228 = load i64, i64* %envptr8367417, align 8                              ; load; *envptr8367417
  %envptr8367418 = inttoptr i64 %env8363592 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367419 = getelementptr inbounds i64, i64* %envptr8367418, i64 6            ; &envptr8367418[6]
  %YB6$f = load i64, i64* %envptr8367419, align 8                                    ; load; *envptr8367419
  %envptr8367420 = inttoptr i64 %env8363592 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367421 = getelementptr inbounds i64, i64* %envptr8367420, i64 5            ; &envptr8367420[5]
  %nAl$_37foldr = load i64, i64* %envptr8367421, align 8                             ; load; *envptr8367421
  %envptr8367422 = inttoptr i64 %env8363592 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367423 = getelementptr inbounds i64, i64* %envptr8367422, i64 4            ; &envptr8367422[4]
  %vuP$_37foldl = load i64, i64* %envptr8367423, align 8                             ; load; *envptr8367423
  %envptr8367424 = inttoptr i64 %env8363592 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367425 = getelementptr inbounds i64, i64* %envptr8367424, i64 3            ; &envptr8367424[3]
  %TpE$_37map1 = load i64, i64* %envptr8367425, align 8                              ; load; *envptr8367425
  %envptr8367426 = inttoptr i64 %env8363592 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367427 = getelementptr inbounds i64, i64* %envptr8367426, i64 2            ; &envptr8367426[2]
  %l4d$acc = load i64, i64* %envptr8367427, align 8                                  ; load; *envptr8367427
  %envptr8367428 = inttoptr i64 %env8363592 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367429 = getelementptr inbounds i64, i64* %envptr8367428, i64 1            ; &envptr8367428[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367429, align 8                            ; load; *envptr8367429
  %_958360231 = call i64 @prim_car(i64 %rvp8363083)                                  ; call prim_car
  %rvp8363082 = call i64 @prim_cdr(i64 %rvp8363083)                                  ; call prim_cdr
  %Pxl$lsts = call i64 @prim_car(i64 %rvp8363082)                                    ; call prim_car
  %na8363007 = call i64 @prim_cdr(i64 %rvp8363082)                                   ; call prim_cdr
  %cloptr8367430 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8367432 = getelementptr inbounds i64, i64* %cloptr8367430, i64 1              ; &eptr8367432[1]
  %eptr8367433 = getelementptr inbounds i64, i64* %cloptr8367430, i64 2              ; &eptr8367433[2]
  %eptr8367434 = getelementptr inbounds i64, i64* %cloptr8367430, i64 3              ; &eptr8367434[3]
  %eptr8367435 = getelementptr inbounds i64, i64* %cloptr8367430, i64 4              ; &eptr8367435[4]
  %eptr8367436 = getelementptr inbounds i64, i64* %cloptr8367430, i64 5              ; &eptr8367436[5]
  %eptr8367437 = getelementptr inbounds i64, i64* %cloptr8367430, i64 6              ; &eptr8367437[6]
  %eptr8367438 = getelementptr inbounds i64, i64* %cloptr8367430, i64 7              ; &eptr8367438[7]
  store i64 %l4d$acc, i64* %eptr8367432                                              ; *eptr8367432 = %l4d$acc
  store i64 %TpE$_37map1, i64* %eptr8367433                                          ; *eptr8367433 = %TpE$_37map1
  store i64 %vuP$_37foldl, i64* %eptr8367434                                         ; *eptr8367434 = %vuP$_37foldl
  store i64 %nAl$_37foldr, i64* %eptr8367435                                         ; *eptr8367435 = %nAl$_37foldr
  store i64 %YB6$f, i64* %eptr8367436                                                ; *eptr8367436 = %YB6$f
  store i64 %cont8360228, i64* %eptr8367437                                          ; *eptr8367437 = %cont8360228
  store i64 %Pxl$lsts, i64* %eptr8367438                                             ; *eptr8367438 = %Pxl$lsts
  %eptr8367431 = getelementptr inbounds i64, i64* %cloptr8367430, i64 0              ; &cloptr8367430[0]
  %f8367439 = ptrtoint void(i64,i64)* @lam8363589 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367439, i64* %eptr8367431                                             ; store fptr
  %arg8361535 = ptrtoint i64* %cloptr8367430 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367440 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367441 = getelementptr inbounds i64, i64* %cloptr8367440, i64 0              ; &cloptr8367440[0]
  %f8367442 = ptrtoint void(i64,i64)* @lam8363561 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367442, i64* %eptr8367441                                             ; store fptr
  %arg8361534 = ptrtoint i64* %cloptr8367440 to i64                                  ; closure cast; i64* -> i64
  %arg8361533 = call i64 @const_init_false()                                         ; quoted #f
  %rva8363081 = add i64 0, 0                                                         ; quoted ()
  %rva8363080 = call i64 @prim_cons(i64 %Pxl$lsts, i64 %rva8363081)                  ; call prim_cons
  %rva8363079 = call i64 @prim_cons(i64 %arg8361533, i64 %rva8363080)                ; call prim_cons
  %rva8363078 = call i64 @prim_cons(i64 %arg8361534, i64 %rva8363079)                ; call prim_cons
  %rva8363077 = call i64 @prim_cons(i64 %arg8361535, i64 %rva8363078)                ; call prim_cons
  %cloptr8367443 = inttoptr i64 %j83$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8367444 = getelementptr inbounds i64, i64* %cloptr8367443, i64 0             ; &cloptr8367443[0]
  %f8367446 = load i64, i64* %i0ptr8367444, align 8                                  ; load; *i0ptr8367444
  %fptr8367445 = inttoptr i64 %f8367446 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367445(i64 %j83$_37foldr1, i64 %rva8363077)        ; tail call
  ret void
}


define void @lam8363589(i64 %env8363590, i64 %rvp8363065) {
  %envptr8367447 = inttoptr i64 %env8363590 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367448 = getelementptr inbounds i64, i64* %envptr8367447, i64 7            ; &envptr8367447[7]
  %Pxl$lsts = load i64, i64* %envptr8367448, align 8                                 ; load; *envptr8367448
  %envptr8367449 = inttoptr i64 %env8363590 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367450 = getelementptr inbounds i64, i64* %envptr8367449, i64 6            ; &envptr8367449[6]
  %cont8360228 = load i64, i64* %envptr8367450, align 8                              ; load; *envptr8367450
  %envptr8367451 = inttoptr i64 %env8363590 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367452 = getelementptr inbounds i64, i64* %envptr8367451, i64 5            ; &envptr8367451[5]
  %YB6$f = load i64, i64* %envptr8367452, align 8                                    ; load; *envptr8367452
  %envptr8367453 = inttoptr i64 %env8363590 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367454 = getelementptr inbounds i64, i64* %envptr8367453, i64 4            ; &envptr8367453[4]
  %nAl$_37foldr = load i64, i64* %envptr8367454, align 8                             ; load; *envptr8367454
  %envptr8367455 = inttoptr i64 %env8363590 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367456 = getelementptr inbounds i64, i64* %envptr8367455, i64 3            ; &envptr8367455[3]
  %vuP$_37foldl = load i64, i64* %envptr8367456, align 8                             ; load; *envptr8367456
  %envptr8367457 = inttoptr i64 %env8363590 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367458 = getelementptr inbounds i64, i64* %envptr8367457, i64 2            ; &envptr8367457[2]
  %TpE$_37map1 = load i64, i64* %envptr8367458, align 8                              ; load; *envptr8367458
  %envptr8367459 = inttoptr i64 %env8363590 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367460 = getelementptr inbounds i64, i64* %envptr8367459, i64 1            ; &envptr8367459[1]
  %l4d$acc = load i64, i64* %envptr8367460, align 8                                  ; load; *envptr8367460
  %_958360232 = call i64 @prim_car(i64 %rvp8363065)                                  ; call prim_car
  %rvp8363064 = call i64 @prim_cdr(i64 %rvp8363065)                                  ; call prim_cdr
  %a8359973 = call i64 @prim_car(i64 %rvp8363064)                                    ; call prim_car
  %na8363009 = call i64 @prim_cdr(i64 %rvp8363064)                                   ; call prim_cdr
  %cmp8367461 = icmp eq i64 %a8359973, 15                                            ; false?
  br i1 %cmp8367461, label %else8367463, label %then8367462                          ; if

then8367462:
  %arg8361538 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363012 = add i64 0, 0                                                         ; quoted ()
  %rva8363011 = call i64 @prim_cons(i64 %l4d$acc, i64 %rva8363012)                   ; call prim_cons
  %rva8363010 = call i64 @prim_cons(i64 %arg8361538, i64 %rva8363011)                ; call prim_cons
  %cloptr8367464 = inttoptr i64 %cont8360228 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367465 = getelementptr inbounds i64, i64* %cloptr8367464, i64 0             ; &cloptr8367464[0]
  %f8367467 = load i64, i64* %i0ptr8367465, align 8                                  ; load; *i0ptr8367465
  %fptr8367466 = inttoptr i64 %f8367467 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367466(i64 %cont8360228, i64 %rva8363010)          ; tail call
  ret void

else8367463:
  %cloptr8367468 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8367470 = getelementptr inbounds i64, i64* %cloptr8367468, i64 1              ; &eptr8367470[1]
  %eptr8367471 = getelementptr inbounds i64, i64* %cloptr8367468, i64 2              ; &eptr8367471[2]
  %eptr8367472 = getelementptr inbounds i64, i64* %cloptr8367468, i64 3              ; &eptr8367472[3]
  %eptr8367473 = getelementptr inbounds i64, i64* %cloptr8367468, i64 4              ; &eptr8367473[4]
  %eptr8367474 = getelementptr inbounds i64, i64* %cloptr8367468, i64 5              ; &eptr8367474[5]
  %eptr8367475 = getelementptr inbounds i64, i64* %cloptr8367468, i64 6              ; &eptr8367475[6]
  %eptr8367476 = getelementptr inbounds i64, i64* %cloptr8367468, i64 7              ; &eptr8367476[7]
  store i64 %l4d$acc, i64* %eptr8367470                                              ; *eptr8367470 = %l4d$acc
  store i64 %TpE$_37map1, i64* %eptr8367471                                          ; *eptr8367471 = %TpE$_37map1
  store i64 %vuP$_37foldl, i64* %eptr8367472                                         ; *eptr8367472 = %vuP$_37foldl
  store i64 %nAl$_37foldr, i64* %eptr8367473                                         ; *eptr8367473 = %nAl$_37foldr
  store i64 %YB6$f, i64* %eptr8367474                                                ; *eptr8367474 = %YB6$f
  store i64 %cont8360228, i64* %eptr8367475                                          ; *eptr8367475 = %cont8360228
  store i64 %Pxl$lsts, i64* %eptr8367476                                             ; *eptr8367476 = %Pxl$lsts
  %eptr8367469 = getelementptr inbounds i64, i64* %cloptr8367468, i64 0              ; &cloptr8367468[0]
  %f8367477 = ptrtoint void(i64,i64)* @lam8363587 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367477, i64* %eptr8367469                                             ; store fptr
  %arg8361542 = ptrtoint i64* %cloptr8367468 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367478 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367479 = getelementptr inbounds i64, i64* %cloptr8367478, i64 0              ; &cloptr8367478[0]
  %f8367480 = ptrtoint void(i64,i64)* @lam8363568 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367480, i64* %eptr8367479                                             ; store fptr
  %arg8361541 = ptrtoint i64* %cloptr8367478 to i64                                  ; closure cast; i64* -> i64
  %rva8363063 = add i64 0, 0                                                         ; quoted ()
  %rva8363062 = call i64 @prim_cons(i64 %Pxl$lsts, i64 %rva8363063)                  ; call prim_cons
  %rva8363061 = call i64 @prim_cons(i64 %arg8361541, i64 %rva8363062)                ; call prim_cons
  %rva8363060 = call i64 @prim_cons(i64 %arg8361542, i64 %rva8363061)                ; call prim_cons
  %cloptr8367481 = inttoptr i64 %TpE$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367482 = getelementptr inbounds i64, i64* %cloptr8367481, i64 0             ; &cloptr8367481[0]
  %f8367484 = load i64, i64* %i0ptr8367482, align 8                                  ; load; *i0ptr8367482
  %fptr8367483 = inttoptr i64 %f8367484 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367483(i64 %TpE$_37map1, i64 %rva8363060)          ; tail call
  ret void
}


define void @lam8363587(i64 %env8363588, i64 %rvp8363052) {
  %envptr8367485 = inttoptr i64 %env8363588 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367486 = getelementptr inbounds i64, i64* %envptr8367485, i64 7            ; &envptr8367485[7]
  %Pxl$lsts = load i64, i64* %envptr8367486, align 8                                 ; load; *envptr8367486
  %envptr8367487 = inttoptr i64 %env8363588 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367488 = getelementptr inbounds i64, i64* %envptr8367487, i64 6            ; &envptr8367487[6]
  %cont8360228 = load i64, i64* %envptr8367488, align 8                              ; load; *envptr8367488
  %envptr8367489 = inttoptr i64 %env8363588 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367490 = getelementptr inbounds i64, i64* %envptr8367489, i64 5            ; &envptr8367489[5]
  %YB6$f = load i64, i64* %envptr8367490, align 8                                    ; load; *envptr8367490
  %envptr8367491 = inttoptr i64 %env8363588 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367492 = getelementptr inbounds i64, i64* %envptr8367491, i64 4            ; &envptr8367491[4]
  %nAl$_37foldr = load i64, i64* %envptr8367492, align 8                             ; load; *envptr8367492
  %envptr8367493 = inttoptr i64 %env8363588 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367494 = getelementptr inbounds i64, i64* %envptr8367493, i64 3            ; &envptr8367493[3]
  %vuP$_37foldl = load i64, i64* %envptr8367494, align 8                             ; load; *envptr8367494
  %envptr8367495 = inttoptr i64 %env8363588 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367496 = getelementptr inbounds i64, i64* %envptr8367495, i64 2            ; &envptr8367495[2]
  %TpE$_37map1 = load i64, i64* %envptr8367496, align 8                              ; load; *envptr8367496
  %envptr8367497 = inttoptr i64 %env8363588 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367498 = getelementptr inbounds i64, i64* %envptr8367497, i64 1            ; &envptr8367497[1]
  %l4d$acc = load i64, i64* %envptr8367498, align 8                                  ; load; *envptr8367498
  %_958360233 = call i64 @prim_car(i64 %rvp8363052)                                  ; call prim_car
  %rvp8363051 = call i64 @prim_cdr(i64 %rvp8363052)                                  ; call prim_cdr
  %TN8$lsts_43 = call i64 @prim_car(i64 %rvp8363051)                                 ; call prim_car
  %na8363014 = call i64 @prim_cdr(i64 %rvp8363051)                                   ; call prim_cdr
  %cloptr8367499 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8367501 = getelementptr inbounds i64, i64* %cloptr8367499, i64 1              ; &eptr8367501[1]
  %eptr8367502 = getelementptr inbounds i64, i64* %cloptr8367499, i64 2              ; &eptr8367502[2]
  %eptr8367503 = getelementptr inbounds i64, i64* %cloptr8367499, i64 3              ; &eptr8367503[3]
  %eptr8367504 = getelementptr inbounds i64, i64* %cloptr8367499, i64 4              ; &eptr8367504[4]
  %eptr8367505 = getelementptr inbounds i64, i64* %cloptr8367499, i64 5              ; &eptr8367505[5]
  %eptr8367506 = getelementptr inbounds i64, i64* %cloptr8367499, i64 6              ; &eptr8367506[6]
  store i64 %l4d$acc, i64* %eptr8367501                                              ; *eptr8367501 = %l4d$acc
  store i64 %TN8$lsts_43, i64* %eptr8367502                                          ; *eptr8367502 = %TN8$lsts_43
  store i64 %vuP$_37foldl, i64* %eptr8367503                                         ; *eptr8367503 = %vuP$_37foldl
  store i64 %nAl$_37foldr, i64* %eptr8367504                                         ; *eptr8367504 = %nAl$_37foldr
  store i64 %YB6$f, i64* %eptr8367505                                                ; *eptr8367505 = %YB6$f
  store i64 %cont8360228, i64* %eptr8367506                                          ; *eptr8367506 = %cont8360228
  %eptr8367500 = getelementptr inbounds i64, i64* %cloptr8367499, i64 0              ; &cloptr8367499[0]
  %f8367507 = ptrtoint void(i64,i64)* @lam8363585 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367507, i64* %eptr8367500                                             ; store fptr
  %arg8361546 = ptrtoint i64* %cloptr8367499 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367508 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367509 = getelementptr inbounds i64, i64* %cloptr8367508, i64 0              ; &cloptr8367508[0]
  %f8367510 = ptrtoint void(i64,i64)* @lam8363573 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367510, i64* %eptr8367509                                             ; store fptr
  %arg8361545 = ptrtoint i64* %cloptr8367508 to i64                                  ; closure cast; i64* -> i64
  %rva8363050 = add i64 0, 0                                                         ; quoted ()
  %rva8363049 = call i64 @prim_cons(i64 %Pxl$lsts, i64 %rva8363050)                  ; call prim_cons
  %rva8363048 = call i64 @prim_cons(i64 %arg8361545, i64 %rva8363049)                ; call prim_cons
  %rva8363047 = call i64 @prim_cons(i64 %arg8361546, i64 %rva8363048)                ; call prim_cons
  %cloptr8367511 = inttoptr i64 %TpE$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367512 = getelementptr inbounds i64, i64* %cloptr8367511, i64 0             ; &cloptr8367511[0]
  %f8367514 = load i64, i64* %i0ptr8367512, align 8                                  ; load; *i0ptr8367512
  %fptr8367513 = inttoptr i64 %f8367514 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367513(i64 %TpE$_37map1, i64 %rva8363047)          ; tail call
  ret void
}


define void @lam8363585(i64 %env8363586, i64 %rvp8363039) {
  %envptr8367515 = inttoptr i64 %env8363586 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367516 = getelementptr inbounds i64, i64* %envptr8367515, i64 6            ; &envptr8367515[6]
  %cont8360228 = load i64, i64* %envptr8367516, align 8                              ; load; *envptr8367516
  %envptr8367517 = inttoptr i64 %env8363586 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367518 = getelementptr inbounds i64, i64* %envptr8367517, i64 5            ; &envptr8367517[5]
  %YB6$f = load i64, i64* %envptr8367518, align 8                                    ; load; *envptr8367518
  %envptr8367519 = inttoptr i64 %env8363586 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367520 = getelementptr inbounds i64, i64* %envptr8367519, i64 4            ; &envptr8367519[4]
  %nAl$_37foldr = load i64, i64* %envptr8367520, align 8                             ; load; *envptr8367520
  %envptr8367521 = inttoptr i64 %env8363586 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367522 = getelementptr inbounds i64, i64* %envptr8367521, i64 3            ; &envptr8367521[3]
  %vuP$_37foldl = load i64, i64* %envptr8367522, align 8                             ; load; *envptr8367522
  %envptr8367523 = inttoptr i64 %env8363586 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367524 = getelementptr inbounds i64, i64* %envptr8367523, i64 2            ; &envptr8367523[2]
  %TN8$lsts_43 = load i64, i64* %envptr8367524, align 8                              ; load; *envptr8367524
  %envptr8367525 = inttoptr i64 %env8363586 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367526 = getelementptr inbounds i64, i64* %envptr8367525, i64 1            ; &envptr8367525[1]
  %l4d$acc = load i64, i64* %envptr8367526, align 8                                  ; load; *envptr8367526
  %_958360234 = call i64 @prim_car(i64 %rvp8363039)                                  ; call prim_car
  %rvp8363038 = call i64 @prim_cdr(i64 %rvp8363039)                                  ; call prim_cdr
  %SV4$vs = call i64 @prim_car(i64 %rvp8363038)                                      ; call prim_car
  %na8363016 = call i64 @prim_cdr(i64 %rvp8363038)                                   ; call prim_cdr
  %arg8361548 = add i64 0, 0                                                         ; quoted ()
  %a8359974 = call i64 @prim_cons(i64 %l4d$acc, i64 %arg8361548)                     ; call prim_cons
  %cloptr8367527 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8367529 = getelementptr inbounds i64, i64* %cloptr8367527, i64 1              ; &eptr8367529[1]
  %eptr8367530 = getelementptr inbounds i64, i64* %cloptr8367527, i64 2              ; &eptr8367530[2]
  %eptr8367531 = getelementptr inbounds i64, i64* %cloptr8367527, i64 3              ; &eptr8367531[3]
  %eptr8367532 = getelementptr inbounds i64, i64* %cloptr8367527, i64 4              ; &eptr8367532[4]
  store i64 %TN8$lsts_43, i64* %eptr8367529                                          ; *eptr8367529 = %TN8$lsts_43
  store i64 %vuP$_37foldl, i64* %eptr8367530                                         ; *eptr8367530 = %vuP$_37foldl
  store i64 %YB6$f, i64* %eptr8367531                                                ; *eptr8367531 = %YB6$f
  store i64 %cont8360228, i64* %eptr8367532                                          ; *eptr8367532 = %cont8360228
  %eptr8367528 = getelementptr inbounds i64, i64* %cloptr8367527, i64 0              ; &cloptr8367527[0]
  %f8367533 = ptrtoint void(i64,i64)* @lam8363582 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367533, i64* %eptr8367528                                             ; store fptr
  %arg8361553 = ptrtoint i64* %cloptr8367527 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367534 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367535 = getelementptr inbounds i64, i64* %cloptr8367534, i64 0              ; &cloptr8367534[0]
  %f8367536 = ptrtoint void(i64,i64)* @lam8363578 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367536, i64* %eptr8367535                                             ; store fptr
  %arg8361552 = ptrtoint i64* %cloptr8367534 to i64                                  ; closure cast; i64* -> i64
  %rva8363037 = add i64 0, 0                                                         ; quoted ()
  %rva8363036 = call i64 @prim_cons(i64 %SV4$vs, i64 %rva8363037)                    ; call prim_cons
  %rva8363035 = call i64 @prim_cons(i64 %a8359974, i64 %rva8363036)                  ; call prim_cons
  %rva8363034 = call i64 @prim_cons(i64 %arg8361552, i64 %rva8363035)                ; call prim_cons
  %rva8363033 = call i64 @prim_cons(i64 %arg8361553, i64 %rva8363034)                ; call prim_cons
  %cloptr8367537 = inttoptr i64 %nAl$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr8367538 = getelementptr inbounds i64, i64* %cloptr8367537, i64 0             ; &cloptr8367537[0]
  %f8367540 = load i64, i64* %i0ptr8367538, align 8                                  ; load; *i0ptr8367538
  %fptr8367539 = inttoptr i64 %f8367540 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367539(i64 %nAl$_37foldr, i64 %rva8363033)         ; tail call
  ret void
}


define void @lam8363582(i64 %env8363583, i64 %rvp8363024) {
  %envptr8367541 = inttoptr i64 %env8363583 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367542 = getelementptr inbounds i64, i64* %envptr8367541, i64 4            ; &envptr8367541[4]
  %cont8360228 = load i64, i64* %envptr8367542, align 8                              ; load; *envptr8367542
  %envptr8367543 = inttoptr i64 %env8363583 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367544 = getelementptr inbounds i64, i64* %envptr8367543, i64 3            ; &envptr8367543[3]
  %YB6$f = load i64, i64* %envptr8367544, align 8                                    ; load; *envptr8367544
  %envptr8367545 = inttoptr i64 %env8363583 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367546 = getelementptr inbounds i64, i64* %envptr8367545, i64 2            ; &envptr8367545[2]
  %vuP$_37foldl = load i64, i64* %envptr8367546, align 8                             ; load; *envptr8367546
  %envptr8367547 = inttoptr i64 %env8363583 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367548 = getelementptr inbounds i64, i64* %envptr8367547, i64 1            ; &envptr8367547[1]
  %TN8$lsts_43 = load i64, i64* %envptr8367548, align 8                              ; load; *envptr8367548
  %_958360237 = call i64 @prim_car(i64 %rvp8363024)                                  ; call prim_car
  %rvp8363023 = call i64 @prim_cdr(i64 %rvp8363024)                                  ; call prim_cdr
  %a8359975 = call i64 @prim_car(i64 %rvp8363023)                                    ; call prim_car
  %na8363018 = call i64 @prim_cdr(i64 %rvp8363023)                                   ; call prim_cdr
  %cloptr8367549 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8367551 = getelementptr inbounds i64, i64* %cloptr8367549, i64 1              ; &eptr8367551[1]
  %eptr8367552 = getelementptr inbounds i64, i64* %cloptr8367549, i64 2              ; &eptr8367552[2]
  %eptr8367553 = getelementptr inbounds i64, i64* %cloptr8367549, i64 3              ; &eptr8367553[3]
  %eptr8367554 = getelementptr inbounds i64, i64* %cloptr8367549, i64 4              ; &eptr8367554[4]
  store i64 %TN8$lsts_43, i64* %eptr8367551                                          ; *eptr8367551 = %TN8$lsts_43
  store i64 %vuP$_37foldl, i64* %eptr8367552                                         ; *eptr8367552 = %vuP$_37foldl
  store i64 %YB6$f, i64* %eptr8367553                                                ; *eptr8367553 = %YB6$f
  store i64 %cont8360228, i64* %eptr8367554                                          ; *eptr8367554 = %cont8360228
  %eptr8367550 = getelementptr inbounds i64, i64* %cloptr8367549, i64 0              ; &cloptr8367549[0]
  %f8367555 = ptrtoint void(i64,i64)* @lam8363580 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367555, i64* %eptr8367550                                             ; store fptr
  %arg8361556 = ptrtoint i64* %cloptr8367549 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst8360238 = call i64 @prim_cons(i64 %arg8361556, i64 %a8359975)            ; call prim_cons
  %cloptr8367556 = inttoptr i64 %YB6$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8367557 = getelementptr inbounds i64, i64* %cloptr8367556, i64 0             ; &cloptr8367556[0]
  %f8367559 = load i64, i64* %i0ptr8367557, align 8                                  ; load; *i0ptr8367557
  %fptr8367558 = inttoptr i64 %f8367559 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367558(i64 %YB6$f, i64 %cps_45lst8360238)          ; tail call
  ret void
}


define void @lam8363580(i64 %env8363581, i64 %rvp8363022) {
  %envptr8367560 = inttoptr i64 %env8363581 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367561 = getelementptr inbounds i64, i64* %envptr8367560, i64 4            ; &envptr8367560[4]
  %cont8360228 = load i64, i64* %envptr8367561, align 8                              ; load; *envptr8367561
  %envptr8367562 = inttoptr i64 %env8363581 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367563 = getelementptr inbounds i64, i64* %envptr8367562, i64 3            ; &envptr8367562[3]
  %YB6$f = load i64, i64* %envptr8367563, align 8                                    ; load; *envptr8367563
  %envptr8367564 = inttoptr i64 %env8363581 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367565 = getelementptr inbounds i64, i64* %envptr8367564, i64 2            ; &envptr8367564[2]
  %vuP$_37foldl = load i64, i64* %envptr8367565, align 8                             ; load; *envptr8367565
  %envptr8367566 = inttoptr i64 %env8363581 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367567 = getelementptr inbounds i64, i64* %envptr8367566, i64 1            ; &envptr8367566[1]
  %TN8$lsts_43 = load i64, i64* %envptr8367567, align 8                              ; load; *envptr8367567
  %_958360235 = call i64 @prim_car(i64 %rvp8363022)                                  ; call prim_car
  %rvp8363021 = call i64 @prim_cdr(i64 %rvp8363022)                                  ; call prim_cdr
  %bSQ$acc_43 = call i64 @prim_car(i64 %rvp8363021)                                  ; call prim_car
  %na8363020 = call i64 @prim_cdr(i64 %rvp8363021)                                   ; call prim_cdr
  %a8359976 = call i64 @prim_cons(i64 %bSQ$acc_43, i64 %TN8$lsts_43)                 ; call prim_cons
  %a8359977 = call i64 @prim_cons(i64 %YB6$f, i64 %a8359976)                         ; call prim_cons
  %cps_45lst8360236 = call i64 @prim_cons(i64 %cont8360228, i64 %a8359977)           ; call prim_cons
  %cloptr8367568 = inttoptr i64 %vuP$_37foldl to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr8367569 = getelementptr inbounds i64, i64* %cloptr8367568, i64 0             ; &cloptr8367568[0]
  %f8367571 = load i64, i64* %i0ptr8367569, align 8                                  ; load; *i0ptr8367569
  %fptr8367570 = inttoptr i64 %f8367571 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367570(i64 %vuP$_37foldl, i64 %cps_45lst8360236)   ; tail call
  ret void
}


define void @lam8363578(i64 %env8363579, i64 %rvp8363032) {
  %cont8360239 = call i64 @prim_car(i64 %rvp8363032)                                 ; call prim_car
  %rvp8363031 = call i64 @prim_cdr(i64 %rvp8363032)                                  ; call prim_cdr
  %Txx$a = call i64 @prim_car(i64 %rvp8363031)                                       ; call prim_car
  %rvp8363030 = call i64 @prim_cdr(i64 %rvp8363031)                                  ; call prim_cdr
  %gDT$b = call i64 @prim_car(i64 %rvp8363030)                                       ; call prim_car
  %na8363026 = call i64 @prim_cdr(i64 %rvp8363030)                                   ; call prim_cdr
  %retprim8360240 = call i64 @prim_cons(i64 %Txx$a, i64 %gDT$b)                      ; call prim_cons
  %arg8361566 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363029 = add i64 0, 0                                                         ; quoted ()
  %rva8363028 = call i64 @prim_cons(i64 %retprim8360240, i64 %rva8363029)            ; call prim_cons
  %rva8363027 = call i64 @prim_cons(i64 %arg8361566, i64 %rva8363028)                ; call prim_cons
  %cloptr8367572 = inttoptr i64 %cont8360239 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367573 = getelementptr inbounds i64, i64* %cloptr8367572, i64 0             ; &cloptr8367572[0]
  %f8367575 = load i64, i64* %i0ptr8367573, align 8                                  ; load; *i0ptr8367573
  %fptr8367574 = inttoptr i64 %f8367575 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367574(i64 %cont8360239, i64 %rva8363027)          ; tail call
  ret void
}


define void @lam8363573(i64 %env8363574, i64 %rvp8363046) {
  %cont8360241 = call i64 @prim_car(i64 %rvp8363046)                                 ; call prim_car
  %rvp8363045 = call i64 @prim_cdr(i64 %rvp8363046)                                  ; call prim_cdr
  %rOr$x = call i64 @prim_car(i64 %rvp8363045)                                       ; call prim_car
  %na8363041 = call i64 @prim_cdr(i64 %rvp8363045)                                   ; call prim_cdr
  %retprim8360242 = call i64 @prim_car(i64 %rOr$x)                                   ; call prim_car
  %arg8361570 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363044 = add i64 0, 0                                                         ; quoted ()
  %rva8363043 = call i64 @prim_cons(i64 %retprim8360242, i64 %rva8363044)            ; call prim_cons
  %rva8363042 = call i64 @prim_cons(i64 %arg8361570, i64 %rva8363043)                ; call prim_cons
  %cloptr8367576 = inttoptr i64 %cont8360241 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367577 = getelementptr inbounds i64, i64* %cloptr8367576, i64 0             ; &cloptr8367576[0]
  %f8367579 = load i64, i64* %i0ptr8367577, align 8                                  ; load; *i0ptr8367577
  %fptr8367578 = inttoptr i64 %f8367579 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367578(i64 %cont8360241, i64 %rva8363042)          ; tail call
  ret void
}


define void @lam8363568(i64 %env8363569, i64 %rvp8363059) {
  %cont8360243 = call i64 @prim_car(i64 %rvp8363059)                                 ; call prim_car
  %rvp8363058 = call i64 @prim_cdr(i64 %rvp8363059)                                  ; call prim_cdr
  %Fqz$x = call i64 @prim_car(i64 %rvp8363058)                                       ; call prim_car
  %na8363054 = call i64 @prim_cdr(i64 %rvp8363058)                                   ; call prim_cdr
  %retprim8360244 = call i64 @prim_cdr(i64 %Fqz$x)                                   ; call prim_cdr
  %arg8361574 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363057 = add i64 0, 0                                                         ; quoted ()
  %rva8363056 = call i64 @prim_cons(i64 %retprim8360244, i64 %rva8363057)            ; call prim_cons
  %rva8363055 = call i64 @prim_cons(i64 %arg8361574, i64 %rva8363056)                ; call prim_cons
  %cloptr8367580 = inttoptr i64 %cont8360243 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367581 = getelementptr inbounds i64, i64* %cloptr8367580, i64 0             ; &cloptr8367580[0]
  %f8367583 = load i64, i64* %i0ptr8367581, align 8                                  ; load; *i0ptr8367581
  %fptr8367582 = inttoptr i64 %f8367583 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367582(i64 %cont8360243, i64 %rva8363055)          ; tail call
  ret void
}


define void @lam8363561(i64 %env8363562, i64 %rvp8363076) {
  %cont8360245 = call i64 @prim_car(i64 %rvp8363076)                                 ; call prim_car
  %rvp8363075 = call i64 @prim_cdr(i64 %rvp8363076)                                  ; call prim_cdr
  %k2J$lst = call i64 @prim_car(i64 %rvp8363075)                                     ; call prim_car
  %rvp8363074 = call i64 @prim_cdr(i64 %rvp8363075)                                  ; call prim_cdr
  %h0X$b = call i64 @prim_car(i64 %rvp8363074)                                       ; call prim_car
  %na8363067 = call i64 @prim_cdr(i64 %rvp8363074)                                   ; call prim_cdr
  %cmp8367584 = icmp eq i64 %h0X$b, 15                                               ; false?
  br i1 %cmp8367584, label %else8367586, label %then8367585                          ; if

then8367585:
  %arg8361577 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363070 = add i64 0, 0                                                         ; quoted ()
  %rva8363069 = call i64 @prim_cons(i64 %h0X$b, i64 %rva8363070)                     ; call prim_cons
  %rva8363068 = call i64 @prim_cons(i64 %arg8361577, i64 %rva8363069)                ; call prim_cons
  %cloptr8367587 = inttoptr i64 %cont8360245 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367588 = getelementptr inbounds i64, i64* %cloptr8367587, i64 0             ; &cloptr8367587[0]
  %f8367590 = load i64, i64* %i0ptr8367588, align 8                                  ; load; *i0ptr8367588
  %fptr8367589 = inttoptr i64 %f8367590 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367589(i64 %cont8360245, i64 %rva8363068)          ; tail call
  ret void

else8367586:
  %retprim8360246 = call i64 @prim_null_63(i64 %k2J$lst)                             ; call prim_null_63
  %arg8361581 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363073 = add i64 0, 0                                                         ; quoted ()
  %rva8363072 = call i64 @prim_cons(i64 %retprim8360246, i64 %rva8363073)            ; call prim_cons
  %rva8363071 = call i64 @prim_cons(i64 %arg8361581, i64 %rva8363072)                ; call prim_cons
  %cloptr8367591 = inttoptr i64 %cont8360245 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367592 = getelementptr inbounds i64, i64* %cloptr8367591, i64 0             ; &cloptr8367591[0]
  %f8367594 = load i64, i64* %i0ptr8367592, align 8                                  ; load; *i0ptr8367592
  %fptr8367593 = inttoptr i64 %f8367594 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367593(i64 %cont8360245, i64 %rva8363071)          ; tail call
  ret void
}


define void @lam8363547(i64 %env8363548, i64 %rvp8363196) {
  %envptr8367595 = inttoptr i64 %env8363548 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367596 = getelementptr inbounds i64, i64* %envptr8367595, i64 2            ; &envptr8367595[2]
  %lUA$_37map1 = load i64, i64* %envptr8367596, align 8                              ; load; *envptr8367596
  %envptr8367597 = inttoptr i64 %env8363548 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367598 = getelementptr inbounds i64, i64* %envptr8367597, i64 1            ; &envptr8367597[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367598, align 8                            ; load; *envptr8367598
  %cont8360249 = call i64 @prim_car(i64 %rvp8363196)                                 ; call prim_car
  %rvp8363195 = call i64 @prim_cdr(i64 %rvp8363196)                                  ; call prim_cdr
  %ZXc$_37foldr = call i64 @prim_car(i64 %rvp8363195)                                ; call prim_car
  %na8363103 = call i64 @prim_cdr(i64 %rvp8363195)                                   ; call prim_cdr
  %arg8361584 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8367599 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8367601 = getelementptr inbounds i64, i64* %cloptr8367599, i64 1              ; &eptr8367601[1]
  %eptr8367602 = getelementptr inbounds i64, i64* %cloptr8367599, i64 2              ; &eptr8367602[2]
  %eptr8367603 = getelementptr inbounds i64, i64* %cloptr8367599, i64 3              ; &eptr8367603[3]
  store i64 %j83$_37foldr1, i64* %eptr8367601                                        ; *eptr8367601 = %j83$_37foldr1
  store i64 %lUA$_37map1, i64* %eptr8367602                                          ; *eptr8367602 = %lUA$_37map1
  store i64 %ZXc$_37foldr, i64* %eptr8367603                                         ; *eptr8367603 = %ZXc$_37foldr
  %eptr8367600 = getelementptr inbounds i64, i64* %cloptr8367599, i64 0              ; &cloptr8367599[0]
  %f8367604 = ptrtoint void(i64,i64)* @lam8363544 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367604, i64* %eptr8367600                                             ; store fptr
  %arg8361583 = ptrtoint i64* %cloptr8367599 to i64                                  ; closure cast; i64* -> i64
  %rva8363194 = add i64 0, 0                                                         ; quoted ()
  %rva8363193 = call i64 @prim_cons(i64 %arg8361583, i64 %rva8363194)                ; call prim_cons
  %rva8363192 = call i64 @prim_cons(i64 %arg8361584, i64 %rva8363193)                ; call prim_cons
  %cloptr8367605 = inttoptr i64 %cont8360249 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367606 = getelementptr inbounds i64, i64* %cloptr8367605, i64 0             ; &cloptr8367605[0]
  %f8367608 = load i64, i64* %i0ptr8367606, align 8                                  ; load; *i0ptr8367606
  %fptr8367607 = inttoptr i64 %f8367608 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367607(i64 %cont8360249, i64 %rva8363192)          ; tail call
  ret void
}


define void @lam8363544(i64 %env8363545, i64 %c3F$args8360251) {
  %envptr8367609 = inttoptr i64 %env8363545 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367610 = getelementptr inbounds i64, i64* %envptr8367609, i64 3            ; &envptr8367609[3]
  %ZXc$_37foldr = load i64, i64* %envptr8367610, align 8                             ; load; *envptr8367610
  %envptr8367611 = inttoptr i64 %env8363545 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367612 = getelementptr inbounds i64, i64* %envptr8367611, i64 2            ; &envptr8367611[2]
  %lUA$_37map1 = load i64, i64* %envptr8367612, align 8                              ; load; *envptr8367612
  %envptr8367613 = inttoptr i64 %env8363545 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367614 = getelementptr inbounds i64, i64* %envptr8367613, i64 1            ; &envptr8367613[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367614, align 8                            ; load; *envptr8367614
  %cont8360250 = call i64 @prim_car(i64 %c3F$args8360251)                            ; call prim_car
  %c3F$args = call i64 @prim_cdr(i64 %c3F$args8360251)                               ; call prim_cdr
  %YzG$f = call i64 @prim_car(i64 %c3F$args)                                         ; call prim_car
  %a8359957 = call i64 @prim_cdr(i64 %c3F$args)                                      ; call prim_cdr
  %retprim8360270 = call i64 @prim_car(i64 %a8359957)                                ; call prim_car
  %cloptr8367615 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8367617 = getelementptr inbounds i64, i64* %cloptr8367615, i64 1              ; &eptr8367617[1]
  %eptr8367618 = getelementptr inbounds i64, i64* %cloptr8367615, i64 2              ; &eptr8367618[2]
  %eptr8367619 = getelementptr inbounds i64, i64* %cloptr8367615, i64 3              ; &eptr8367619[3]
  %eptr8367620 = getelementptr inbounds i64, i64* %cloptr8367615, i64 4              ; &eptr8367620[4]
  %eptr8367621 = getelementptr inbounds i64, i64* %cloptr8367615, i64 5              ; &eptr8367621[5]
  %eptr8367622 = getelementptr inbounds i64, i64* %cloptr8367615, i64 6              ; &eptr8367622[6]
  store i64 %j83$_37foldr1, i64* %eptr8367617                                        ; *eptr8367617 = %j83$_37foldr1
  store i64 %lUA$_37map1, i64* %eptr8367618                                          ; *eptr8367618 = %lUA$_37map1
  store i64 %YzG$f, i64* %eptr8367619                                                ; *eptr8367619 = %YzG$f
  store i64 %cont8360250, i64* %eptr8367620                                          ; *eptr8367620 = %cont8360250
  store i64 %c3F$args, i64* %eptr8367621                                             ; *eptr8367621 = %c3F$args
  store i64 %ZXc$_37foldr, i64* %eptr8367622                                         ; *eptr8367622 = %ZXc$_37foldr
  %eptr8367616 = getelementptr inbounds i64, i64* %cloptr8367615, i64 0              ; &cloptr8367615[0]
  %f8367623 = ptrtoint void(i64,i64)* @lam8363542 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367623, i64* %eptr8367616                                             ; store fptr
  %arg8361593 = ptrtoint i64* %cloptr8367615 to i64                                  ; closure cast; i64* -> i64
  %arg8361592 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363191 = add i64 0, 0                                                         ; quoted ()
  %rva8363190 = call i64 @prim_cons(i64 %retprim8360270, i64 %rva8363191)            ; call prim_cons
  %rva8363189 = call i64 @prim_cons(i64 %arg8361592, i64 %rva8363190)                ; call prim_cons
  %cloptr8367624 = inttoptr i64 %arg8361593 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367625 = getelementptr inbounds i64, i64* %cloptr8367624, i64 0             ; &cloptr8367624[0]
  %f8367627 = load i64, i64* %i0ptr8367625, align 8                                  ; load; *i0ptr8367625
  %fptr8367626 = inttoptr i64 %f8367627 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367626(i64 %arg8361593, i64 %rva8363189)           ; tail call
  ret void
}


define void @lam8363542(i64 %env8363543, i64 %rvp8363188) {
  %envptr8367628 = inttoptr i64 %env8363543 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367629 = getelementptr inbounds i64, i64* %envptr8367628, i64 6            ; &envptr8367628[6]
  %ZXc$_37foldr = load i64, i64* %envptr8367629, align 8                             ; load; *envptr8367629
  %envptr8367630 = inttoptr i64 %env8363543 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367631 = getelementptr inbounds i64, i64* %envptr8367630, i64 5            ; &envptr8367630[5]
  %c3F$args = load i64, i64* %envptr8367631, align 8                                 ; load; *envptr8367631
  %envptr8367632 = inttoptr i64 %env8363543 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367633 = getelementptr inbounds i64, i64* %envptr8367632, i64 4            ; &envptr8367632[4]
  %cont8360250 = load i64, i64* %envptr8367633, align 8                              ; load; *envptr8367633
  %envptr8367634 = inttoptr i64 %env8363543 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367635 = getelementptr inbounds i64, i64* %envptr8367634, i64 3            ; &envptr8367634[3]
  %YzG$f = load i64, i64* %envptr8367635, align 8                                    ; load; *envptr8367635
  %envptr8367636 = inttoptr i64 %env8363543 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367637 = getelementptr inbounds i64, i64* %envptr8367636, i64 2            ; &envptr8367636[2]
  %lUA$_37map1 = load i64, i64* %envptr8367637, align 8                              ; load; *envptr8367637
  %envptr8367638 = inttoptr i64 %env8363543 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367639 = getelementptr inbounds i64, i64* %envptr8367638, i64 1            ; &envptr8367638[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367639, align 8                            ; load; *envptr8367639
  %_958360252 = call i64 @prim_car(i64 %rvp8363188)                                  ; call prim_car
  %rvp8363187 = call i64 @prim_cdr(i64 %rvp8363188)                                  ; call prim_cdr
  %lH1$acc = call i64 @prim_car(i64 %rvp8363187)                                     ; call prim_car
  %na8363105 = call i64 @prim_cdr(i64 %rvp8363187)                                   ; call prim_cdr
  %a8359958 = call i64 @prim_cdr(i64 %c3F$args)                                      ; call prim_cdr
  %retprim8360269 = call i64 @prim_cdr(i64 %a8359958)                                ; call prim_cdr
  %cloptr8367640 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8367642 = getelementptr inbounds i64, i64* %cloptr8367640, i64 1              ; &eptr8367642[1]
  %eptr8367643 = getelementptr inbounds i64, i64* %cloptr8367640, i64 2              ; &eptr8367643[2]
  %eptr8367644 = getelementptr inbounds i64, i64* %cloptr8367640, i64 3              ; &eptr8367644[3]
  %eptr8367645 = getelementptr inbounds i64, i64* %cloptr8367640, i64 4              ; &eptr8367645[4]
  %eptr8367646 = getelementptr inbounds i64, i64* %cloptr8367640, i64 5              ; &eptr8367646[5]
  %eptr8367647 = getelementptr inbounds i64, i64* %cloptr8367640, i64 6              ; &eptr8367647[6]
  store i64 %j83$_37foldr1, i64* %eptr8367642                                        ; *eptr8367642 = %j83$_37foldr1
  store i64 %lH1$acc, i64* %eptr8367643                                              ; *eptr8367643 = %lH1$acc
  store i64 %lUA$_37map1, i64* %eptr8367644                                          ; *eptr8367644 = %lUA$_37map1
  store i64 %YzG$f, i64* %eptr8367645                                                ; *eptr8367645 = %YzG$f
  store i64 %cont8360250, i64* %eptr8367646                                          ; *eptr8367646 = %cont8360250
  store i64 %ZXc$_37foldr, i64* %eptr8367647                                         ; *eptr8367647 = %ZXc$_37foldr
  %eptr8367641 = getelementptr inbounds i64, i64* %cloptr8367640, i64 0              ; &cloptr8367640[0]
  %f8367648 = ptrtoint void(i64,i64)* @lam8363540 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367648, i64* %eptr8367641                                             ; store fptr
  %arg8361598 = ptrtoint i64* %cloptr8367640 to i64                                  ; closure cast; i64* -> i64
  %arg8361597 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363186 = add i64 0, 0                                                         ; quoted ()
  %rva8363185 = call i64 @prim_cons(i64 %retprim8360269, i64 %rva8363186)            ; call prim_cons
  %rva8363184 = call i64 @prim_cons(i64 %arg8361597, i64 %rva8363185)                ; call prim_cons
  %cloptr8367649 = inttoptr i64 %arg8361598 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367650 = getelementptr inbounds i64, i64* %cloptr8367649, i64 0             ; &cloptr8367649[0]
  %f8367652 = load i64, i64* %i0ptr8367650, align 8                                  ; load; *i0ptr8367650
  %fptr8367651 = inttoptr i64 %f8367652 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367651(i64 %arg8361598, i64 %rva8363184)           ; tail call
  ret void
}


define void @lam8363540(i64 %env8363541, i64 %rvp8363183) {
  %envptr8367653 = inttoptr i64 %env8363541 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367654 = getelementptr inbounds i64, i64* %envptr8367653, i64 6            ; &envptr8367653[6]
  %ZXc$_37foldr = load i64, i64* %envptr8367654, align 8                             ; load; *envptr8367654
  %envptr8367655 = inttoptr i64 %env8363541 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367656 = getelementptr inbounds i64, i64* %envptr8367655, i64 5            ; &envptr8367655[5]
  %cont8360250 = load i64, i64* %envptr8367656, align 8                              ; load; *envptr8367656
  %envptr8367657 = inttoptr i64 %env8363541 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367658 = getelementptr inbounds i64, i64* %envptr8367657, i64 4            ; &envptr8367657[4]
  %YzG$f = load i64, i64* %envptr8367658, align 8                                    ; load; *envptr8367658
  %envptr8367659 = inttoptr i64 %env8363541 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367660 = getelementptr inbounds i64, i64* %envptr8367659, i64 3            ; &envptr8367659[3]
  %lUA$_37map1 = load i64, i64* %envptr8367660, align 8                              ; load; *envptr8367660
  %envptr8367661 = inttoptr i64 %env8363541 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367662 = getelementptr inbounds i64, i64* %envptr8367661, i64 2            ; &envptr8367661[2]
  %lH1$acc = load i64, i64* %envptr8367662, align 8                                  ; load; *envptr8367662
  %envptr8367663 = inttoptr i64 %env8363541 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367664 = getelementptr inbounds i64, i64* %envptr8367663, i64 1            ; &envptr8367663[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367664, align 8                            ; load; *envptr8367664
  %_958360253 = call i64 @prim_car(i64 %rvp8363183)                                  ; call prim_car
  %rvp8363182 = call i64 @prim_cdr(i64 %rvp8363183)                                  ; call prim_cdr
  %INU$lsts = call i64 @prim_car(i64 %rvp8363182)                                    ; call prim_car
  %na8363107 = call i64 @prim_cdr(i64 %rvp8363182)                                   ; call prim_cdr
  %cloptr8367665 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8367667 = getelementptr inbounds i64, i64* %cloptr8367665, i64 1              ; &eptr8367667[1]
  %eptr8367668 = getelementptr inbounds i64, i64* %cloptr8367665, i64 2              ; &eptr8367668[2]
  %eptr8367669 = getelementptr inbounds i64, i64* %cloptr8367665, i64 3              ; &eptr8367669[3]
  %eptr8367670 = getelementptr inbounds i64, i64* %cloptr8367665, i64 4              ; &eptr8367670[4]
  %eptr8367671 = getelementptr inbounds i64, i64* %cloptr8367665, i64 5              ; &eptr8367671[5]
  %eptr8367672 = getelementptr inbounds i64, i64* %cloptr8367665, i64 6              ; &eptr8367672[6]
  %eptr8367673 = getelementptr inbounds i64, i64* %cloptr8367665, i64 7              ; &eptr8367673[7]
  store i64 %j83$_37foldr1, i64* %eptr8367667                                        ; *eptr8367667 = %j83$_37foldr1
  store i64 %lH1$acc, i64* %eptr8367668                                              ; *eptr8367668 = %lH1$acc
  store i64 %lUA$_37map1, i64* %eptr8367669                                          ; *eptr8367669 = %lUA$_37map1
  store i64 %YzG$f, i64* %eptr8367670                                                ; *eptr8367670 = %YzG$f
  store i64 %cont8360250, i64* %eptr8367671                                          ; *eptr8367671 = %cont8360250
  store i64 %INU$lsts, i64* %eptr8367672                                             ; *eptr8367672 = %INU$lsts
  store i64 %ZXc$_37foldr, i64* %eptr8367673                                         ; *eptr8367673 = %ZXc$_37foldr
  %eptr8367666 = getelementptr inbounds i64, i64* %cloptr8367665, i64 0              ; &cloptr8367665[0]
  %f8367674 = ptrtoint void(i64,i64)* @lam8363538 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367674, i64* %eptr8367666                                             ; store fptr
  %arg8361602 = ptrtoint i64* %cloptr8367665 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367675 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367676 = getelementptr inbounds i64, i64* %cloptr8367675, i64 0              ; &cloptr8367675[0]
  %f8367677 = ptrtoint void(i64,i64)* @lam8363510 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367677, i64* %eptr8367676                                             ; store fptr
  %arg8361601 = ptrtoint i64* %cloptr8367675 to i64                                  ; closure cast; i64* -> i64
  %arg8361600 = call i64 @const_init_false()                                         ; quoted #f
  %rva8363181 = add i64 0, 0                                                         ; quoted ()
  %rva8363180 = call i64 @prim_cons(i64 %INU$lsts, i64 %rva8363181)                  ; call prim_cons
  %rva8363179 = call i64 @prim_cons(i64 %arg8361600, i64 %rva8363180)                ; call prim_cons
  %rva8363178 = call i64 @prim_cons(i64 %arg8361601, i64 %rva8363179)                ; call prim_cons
  %rva8363177 = call i64 @prim_cons(i64 %arg8361602, i64 %rva8363178)                ; call prim_cons
  %cloptr8367678 = inttoptr i64 %j83$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8367679 = getelementptr inbounds i64, i64* %cloptr8367678, i64 0             ; &cloptr8367678[0]
  %f8367681 = load i64, i64* %i0ptr8367679, align 8                                  ; load; *i0ptr8367679
  %fptr8367680 = inttoptr i64 %f8367681 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367680(i64 %j83$_37foldr1, i64 %rva8363177)        ; tail call
  ret void
}


define void @lam8363538(i64 %env8363539, i64 %rvp8363165) {
  %envptr8367682 = inttoptr i64 %env8363539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367683 = getelementptr inbounds i64, i64* %envptr8367682, i64 7            ; &envptr8367682[7]
  %ZXc$_37foldr = load i64, i64* %envptr8367683, align 8                             ; load; *envptr8367683
  %envptr8367684 = inttoptr i64 %env8363539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367685 = getelementptr inbounds i64, i64* %envptr8367684, i64 6            ; &envptr8367684[6]
  %INU$lsts = load i64, i64* %envptr8367685, align 8                                 ; load; *envptr8367685
  %envptr8367686 = inttoptr i64 %env8363539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367687 = getelementptr inbounds i64, i64* %envptr8367686, i64 5            ; &envptr8367686[5]
  %cont8360250 = load i64, i64* %envptr8367687, align 8                              ; load; *envptr8367687
  %envptr8367688 = inttoptr i64 %env8363539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367689 = getelementptr inbounds i64, i64* %envptr8367688, i64 4            ; &envptr8367688[4]
  %YzG$f = load i64, i64* %envptr8367689, align 8                                    ; load; *envptr8367689
  %envptr8367690 = inttoptr i64 %env8363539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367691 = getelementptr inbounds i64, i64* %envptr8367690, i64 3            ; &envptr8367690[3]
  %lUA$_37map1 = load i64, i64* %envptr8367691, align 8                              ; load; *envptr8367691
  %envptr8367692 = inttoptr i64 %env8363539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367693 = getelementptr inbounds i64, i64* %envptr8367692, i64 2            ; &envptr8367692[2]
  %lH1$acc = load i64, i64* %envptr8367693, align 8                                  ; load; *envptr8367693
  %envptr8367694 = inttoptr i64 %env8363539 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367695 = getelementptr inbounds i64, i64* %envptr8367694, i64 1            ; &envptr8367694[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367695, align 8                            ; load; *envptr8367695
  %_958360254 = call i64 @prim_car(i64 %rvp8363165)                                  ; call prim_car
  %rvp8363164 = call i64 @prim_cdr(i64 %rvp8363165)                                  ; call prim_cdr
  %a8359959 = call i64 @prim_car(i64 %rvp8363164)                                    ; call prim_car
  %na8363109 = call i64 @prim_cdr(i64 %rvp8363164)                                   ; call prim_cdr
  %cmp8367696 = icmp eq i64 %a8359959, 15                                            ; false?
  br i1 %cmp8367696, label %else8367698, label %then8367697                          ; if

then8367697:
  %arg8361605 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363112 = add i64 0, 0                                                         ; quoted ()
  %rva8363111 = call i64 @prim_cons(i64 %lH1$acc, i64 %rva8363112)                   ; call prim_cons
  %rva8363110 = call i64 @prim_cons(i64 %arg8361605, i64 %rva8363111)                ; call prim_cons
  %cloptr8367699 = inttoptr i64 %cont8360250 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367700 = getelementptr inbounds i64, i64* %cloptr8367699, i64 0             ; &cloptr8367699[0]
  %f8367702 = load i64, i64* %i0ptr8367700, align 8                                  ; load; *i0ptr8367700
  %fptr8367701 = inttoptr i64 %f8367702 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367701(i64 %cont8360250, i64 %rva8363110)          ; tail call
  ret void

else8367698:
  %cloptr8367703 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr8367705 = getelementptr inbounds i64, i64* %cloptr8367703, i64 1              ; &eptr8367705[1]
  %eptr8367706 = getelementptr inbounds i64, i64* %cloptr8367703, i64 2              ; &eptr8367706[2]
  %eptr8367707 = getelementptr inbounds i64, i64* %cloptr8367703, i64 3              ; &eptr8367707[3]
  %eptr8367708 = getelementptr inbounds i64, i64* %cloptr8367703, i64 4              ; &eptr8367708[4]
  %eptr8367709 = getelementptr inbounds i64, i64* %cloptr8367703, i64 5              ; &eptr8367709[5]
  %eptr8367710 = getelementptr inbounds i64, i64* %cloptr8367703, i64 6              ; &eptr8367710[6]
  %eptr8367711 = getelementptr inbounds i64, i64* %cloptr8367703, i64 7              ; &eptr8367711[7]
  store i64 %j83$_37foldr1, i64* %eptr8367705                                        ; *eptr8367705 = %j83$_37foldr1
  store i64 %lH1$acc, i64* %eptr8367706                                              ; *eptr8367706 = %lH1$acc
  store i64 %lUA$_37map1, i64* %eptr8367707                                          ; *eptr8367707 = %lUA$_37map1
  store i64 %YzG$f, i64* %eptr8367708                                                ; *eptr8367708 = %YzG$f
  store i64 %cont8360250, i64* %eptr8367709                                          ; *eptr8367709 = %cont8360250
  store i64 %INU$lsts, i64* %eptr8367710                                             ; *eptr8367710 = %INU$lsts
  store i64 %ZXc$_37foldr, i64* %eptr8367711                                         ; *eptr8367711 = %ZXc$_37foldr
  %eptr8367704 = getelementptr inbounds i64, i64* %cloptr8367703, i64 0              ; &cloptr8367703[0]
  %f8367712 = ptrtoint void(i64,i64)* @lam8363536 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367712, i64* %eptr8367704                                             ; store fptr
  %arg8361609 = ptrtoint i64* %cloptr8367703 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367713 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367714 = getelementptr inbounds i64, i64* %cloptr8367713, i64 0              ; &cloptr8367713[0]
  %f8367715 = ptrtoint void(i64,i64)* @lam8363517 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367715, i64* %eptr8367714                                             ; store fptr
  %arg8361608 = ptrtoint i64* %cloptr8367713 to i64                                  ; closure cast; i64* -> i64
  %rva8363163 = add i64 0, 0                                                         ; quoted ()
  %rva8363162 = call i64 @prim_cons(i64 %INU$lsts, i64 %rva8363163)                  ; call prim_cons
  %rva8363161 = call i64 @prim_cons(i64 %arg8361608, i64 %rva8363162)                ; call prim_cons
  %rva8363160 = call i64 @prim_cons(i64 %arg8361609, i64 %rva8363161)                ; call prim_cons
  %cloptr8367716 = inttoptr i64 %lUA$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367717 = getelementptr inbounds i64, i64* %cloptr8367716, i64 0             ; &cloptr8367716[0]
  %f8367719 = load i64, i64* %i0ptr8367717, align 8                                  ; load; *i0ptr8367717
  %fptr8367718 = inttoptr i64 %f8367719 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367718(i64 %lUA$_37map1, i64 %rva8363160)          ; tail call
  ret void
}


define void @lam8363536(i64 %env8363537, i64 %rvp8363152) {
  %envptr8367720 = inttoptr i64 %env8363537 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367721 = getelementptr inbounds i64, i64* %envptr8367720, i64 7            ; &envptr8367720[7]
  %ZXc$_37foldr = load i64, i64* %envptr8367721, align 8                             ; load; *envptr8367721
  %envptr8367722 = inttoptr i64 %env8363537 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367723 = getelementptr inbounds i64, i64* %envptr8367722, i64 6            ; &envptr8367722[6]
  %INU$lsts = load i64, i64* %envptr8367723, align 8                                 ; load; *envptr8367723
  %envptr8367724 = inttoptr i64 %env8363537 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367725 = getelementptr inbounds i64, i64* %envptr8367724, i64 5            ; &envptr8367724[5]
  %cont8360250 = load i64, i64* %envptr8367725, align 8                              ; load; *envptr8367725
  %envptr8367726 = inttoptr i64 %env8363537 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367727 = getelementptr inbounds i64, i64* %envptr8367726, i64 4            ; &envptr8367726[4]
  %YzG$f = load i64, i64* %envptr8367727, align 8                                    ; load; *envptr8367727
  %envptr8367728 = inttoptr i64 %env8363537 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367729 = getelementptr inbounds i64, i64* %envptr8367728, i64 3            ; &envptr8367728[3]
  %lUA$_37map1 = load i64, i64* %envptr8367729, align 8                              ; load; *envptr8367729
  %envptr8367730 = inttoptr i64 %env8363537 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367731 = getelementptr inbounds i64, i64* %envptr8367730, i64 2            ; &envptr8367730[2]
  %lH1$acc = load i64, i64* %envptr8367731, align 8                                  ; load; *envptr8367731
  %envptr8367732 = inttoptr i64 %env8363537 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367733 = getelementptr inbounds i64, i64* %envptr8367732, i64 1            ; &envptr8367732[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367733, align 8                            ; load; *envptr8367733
  %_958360255 = call i64 @prim_car(i64 %rvp8363152)                                  ; call prim_car
  %rvp8363151 = call i64 @prim_cdr(i64 %rvp8363152)                                  ; call prim_cdr
  %rZf$lsts_43 = call i64 @prim_car(i64 %rvp8363151)                                 ; call prim_car
  %na8363114 = call i64 @prim_cdr(i64 %rvp8363151)                                   ; call prim_cdr
  %cloptr8367734 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr8367736 = getelementptr inbounds i64, i64* %cloptr8367734, i64 1              ; &eptr8367736[1]
  %eptr8367737 = getelementptr inbounds i64, i64* %cloptr8367734, i64 2              ; &eptr8367737[2]
  %eptr8367738 = getelementptr inbounds i64, i64* %cloptr8367734, i64 3              ; &eptr8367738[3]
  %eptr8367739 = getelementptr inbounds i64, i64* %cloptr8367734, i64 4              ; &eptr8367739[4]
  %eptr8367740 = getelementptr inbounds i64, i64* %cloptr8367734, i64 5              ; &eptr8367740[5]
  %eptr8367741 = getelementptr inbounds i64, i64* %cloptr8367734, i64 6              ; &eptr8367741[6]
  store i64 %j83$_37foldr1, i64* %eptr8367736                                        ; *eptr8367736 = %j83$_37foldr1
  store i64 %lH1$acc, i64* %eptr8367737                                              ; *eptr8367737 = %lH1$acc
  store i64 %rZf$lsts_43, i64* %eptr8367738                                          ; *eptr8367738 = %rZf$lsts_43
  store i64 %YzG$f, i64* %eptr8367739                                                ; *eptr8367739 = %YzG$f
  store i64 %cont8360250, i64* %eptr8367740                                          ; *eptr8367740 = %cont8360250
  store i64 %ZXc$_37foldr, i64* %eptr8367741                                         ; *eptr8367741 = %ZXc$_37foldr
  %eptr8367735 = getelementptr inbounds i64, i64* %cloptr8367734, i64 0              ; &cloptr8367734[0]
  %f8367742 = ptrtoint void(i64,i64)* @lam8363534 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367742, i64* %eptr8367735                                             ; store fptr
  %arg8361613 = ptrtoint i64* %cloptr8367734 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367743 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367744 = getelementptr inbounds i64, i64* %cloptr8367743, i64 0              ; &cloptr8367743[0]
  %f8367745 = ptrtoint void(i64,i64)* @lam8363522 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367745, i64* %eptr8367744                                             ; store fptr
  %arg8361612 = ptrtoint i64* %cloptr8367743 to i64                                  ; closure cast; i64* -> i64
  %rva8363150 = add i64 0, 0                                                         ; quoted ()
  %rva8363149 = call i64 @prim_cons(i64 %INU$lsts, i64 %rva8363150)                  ; call prim_cons
  %rva8363148 = call i64 @prim_cons(i64 %arg8361612, i64 %rva8363149)                ; call prim_cons
  %rva8363147 = call i64 @prim_cons(i64 %arg8361613, i64 %rva8363148)                ; call prim_cons
  %cloptr8367746 = inttoptr i64 %lUA$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367747 = getelementptr inbounds i64, i64* %cloptr8367746, i64 0             ; &cloptr8367746[0]
  %f8367749 = load i64, i64* %i0ptr8367747, align 8                                  ; load; *i0ptr8367747
  %fptr8367748 = inttoptr i64 %f8367749 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367748(i64 %lUA$_37map1, i64 %rva8363147)          ; tail call
  ret void
}


define void @lam8363534(i64 %env8363535, i64 %rvp8363139) {
  %envptr8367750 = inttoptr i64 %env8363535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367751 = getelementptr inbounds i64, i64* %envptr8367750, i64 6            ; &envptr8367750[6]
  %ZXc$_37foldr = load i64, i64* %envptr8367751, align 8                             ; load; *envptr8367751
  %envptr8367752 = inttoptr i64 %env8363535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367753 = getelementptr inbounds i64, i64* %envptr8367752, i64 5            ; &envptr8367752[5]
  %cont8360250 = load i64, i64* %envptr8367753, align 8                              ; load; *envptr8367753
  %envptr8367754 = inttoptr i64 %env8363535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367755 = getelementptr inbounds i64, i64* %envptr8367754, i64 4            ; &envptr8367754[4]
  %YzG$f = load i64, i64* %envptr8367755, align 8                                    ; load; *envptr8367755
  %envptr8367756 = inttoptr i64 %env8363535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367757 = getelementptr inbounds i64, i64* %envptr8367756, i64 3            ; &envptr8367756[3]
  %rZf$lsts_43 = load i64, i64* %envptr8367757, align 8                              ; load; *envptr8367757
  %envptr8367758 = inttoptr i64 %env8363535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367759 = getelementptr inbounds i64, i64* %envptr8367758, i64 2            ; &envptr8367758[2]
  %lH1$acc = load i64, i64* %envptr8367759, align 8                                  ; load; *envptr8367759
  %envptr8367760 = inttoptr i64 %env8363535 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367761 = getelementptr inbounds i64, i64* %envptr8367760, i64 1            ; &envptr8367760[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367761, align 8                            ; load; *envptr8367761
  %_958360256 = call i64 @prim_car(i64 %rvp8363139)                                  ; call prim_car
  %rvp8363138 = call i64 @prim_cdr(i64 %rvp8363139)                                  ; call prim_cdr
  %qPK$vs = call i64 @prim_car(i64 %rvp8363138)                                      ; call prim_car
  %na8363116 = call i64 @prim_cdr(i64 %rvp8363138)                                   ; call prim_cdr
  %a8359960 = call i64 @prim_cons(i64 %lH1$acc, i64 %rZf$lsts_43)                    ; call prim_cons
  %a8359961 = call i64 @prim_cons(i64 %YzG$f, i64 %a8359960)                         ; call prim_cons
  %cloptr8367762 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8367764 = getelementptr inbounds i64, i64* %cloptr8367762, i64 1              ; &eptr8367764[1]
  %eptr8367765 = getelementptr inbounds i64, i64* %cloptr8367762, i64 2              ; &eptr8367765[2]
  %eptr8367766 = getelementptr inbounds i64, i64* %cloptr8367762, i64 3              ; &eptr8367766[3]
  %eptr8367767 = getelementptr inbounds i64, i64* %cloptr8367762, i64 4              ; &eptr8367767[4]
  store i64 %j83$_37foldr1, i64* %eptr8367764                                        ; *eptr8367764 = %j83$_37foldr1
  store i64 %YzG$f, i64* %eptr8367765                                                ; *eptr8367765 = %YzG$f
  store i64 %cont8360250, i64* %eptr8367766                                          ; *eptr8367766 = %cont8360250
  store i64 %qPK$vs, i64* %eptr8367767                                               ; *eptr8367767 = %qPK$vs
  %eptr8367763 = getelementptr inbounds i64, i64* %cloptr8367762, i64 0              ; &cloptr8367762[0]
  %f8367768 = ptrtoint void(i64,i64)* @lam8363532 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367768, i64* %eptr8367763                                             ; store fptr
  %arg8361620 = ptrtoint i64* %cloptr8367762 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst8360262 = call i64 @prim_cons(i64 %arg8361620, i64 %a8359961)            ; call prim_cons
  %cloptr8367769 = inttoptr i64 %ZXc$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr8367770 = getelementptr inbounds i64, i64* %cloptr8367769, i64 0             ; &cloptr8367769[0]
  %f8367772 = load i64, i64* %i0ptr8367770, align 8                                  ; load; *i0ptr8367770
  %fptr8367771 = inttoptr i64 %f8367772 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367771(i64 %ZXc$_37foldr, i64 %cps_45lst8360262)   ; tail call
  ret void
}


define void @lam8363532(i64 %env8363533, i64 %rvp8363137) {
  %envptr8367773 = inttoptr i64 %env8363533 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367774 = getelementptr inbounds i64, i64* %envptr8367773, i64 4            ; &envptr8367773[4]
  %qPK$vs = load i64, i64* %envptr8367774, align 8                                   ; load; *envptr8367774
  %envptr8367775 = inttoptr i64 %env8363533 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367776 = getelementptr inbounds i64, i64* %envptr8367775, i64 3            ; &envptr8367775[3]
  %cont8360250 = load i64, i64* %envptr8367776, align 8                              ; load; *envptr8367776
  %envptr8367777 = inttoptr i64 %env8363533 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367778 = getelementptr inbounds i64, i64* %envptr8367777, i64 2            ; &envptr8367777[2]
  %YzG$f = load i64, i64* %envptr8367778, align 8                                    ; load; *envptr8367778
  %envptr8367779 = inttoptr i64 %env8363533 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367780 = getelementptr inbounds i64, i64* %envptr8367779, i64 1            ; &envptr8367779[1]
  %j83$_37foldr1 = load i64, i64* %envptr8367780, align 8                            ; load; *envptr8367780
  %_958360257 = call i64 @prim_car(i64 %rvp8363137)                                  ; call prim_car
  %rvp8363136 = call i64 @prim_cdr(i64 %rvp8363137)                                  ; call prim_cdr
  %a8359962 = call i64 @prim_car(i64 %rvp8363136)                                    ; call prim_car
  %na8363118 = call i64 @prim_cdr(i64 %rvp8363136)                                   ; call prim_cdr
  %arg8361621 = add i64 0, 0                                                         ; quoted ()
  %a8359963 = call i64 @prim_cons(i64 %a8359962, i64 %arg8361621)                    ; call prim_cons
  %cloptr8367781 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367783 = getelementptr inbounds i64, i64* %cloptr8367781, i64 1              ; &eptr8367783[1]
  %eptr8367784 = getelementptr inbounds i64, i64* %cloptr8367781, i64 2              ; &eptr8367784[2]
  store i64 %YzG$f, i64* %eptr8367783                                                ; *eptr8367783 = %YzG$f
  store i64 %cont8360250, i64* %eptr8367784                                          ; *eptr8367784 = %cont8360250
  %eptr8367782 = getelementptr inbounds i64, i64* %cloptr8367781, i64 0              ; &cloptr8367781[0]
  %f8367785 = ptrtoint void(i64,i64)* @lam8363529 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367785, i64* %eptr8367782                                             ; store fptr
  %arg8361626 = ptrtoint i64* %cloptr8367781 to i64                                  ; closure cast; i64* -> i64
  %cloptr8367786 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr8367787 = getelementptr inbounds i64, i64* %cloptr8367786, i64 0              ; &cloptr8367786[0]
  %f8367788 = ptrtoint void(i64,i64)* @lam8363527 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367788, i64* %eptr8367787                                             ; store fptr
  %arg8361625 = ptrtoint i64* %cloptr8367786 to i64                                  ; closure cast; i64* -> i64
  %rva8363135 = add i64 0, 0                                                         ; quoted ()
  %rva8363134 = call i64 @prim_cons(i64 %qPK$vs, i64 %rva8363135)                    ; call prim_cons
  %rva8363133 = call i64 @prim_cons(i64 %a8359963, i64 %rva8363134)                  ; call prim_cons
  %rva8363132 = call i64 @prim_cons(i64 %arg8361625, i64 %rva8363133)                ; call prim_cons
  %rva8363131 = call i64 @prim_cons(i64 %arg8361626, i64 %rva8363132)                ; call prim_cons
  %cloptr8367789 = inttoptr i64 %j83$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8367790 = getelementptr inbounds i64, i64* %cloptr8367789, i64 0             ; &cloptr8367789[0]
  %f8367792 = load i64, i64* %i0ptr8367790, align 8                                  ; load; *i0ptr8367790
  %fptr8367791 = inttoptr i64 %f8367792 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367791(i64 %j83$_37foldr1, i64 %rva8363131)        ; tail call
  ret void
}


define void @lam8363529(i64 %env8363530, i64 %rvp8363122) {
  %envptr8367793 = inttoptr i64 %env8363530 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367794 = getelementptr inbounds i64, i64* %envptr8367793, i64 2            ; &envptr8367793[2]
  %cont8360250 = load i64, i64* %envptr8367794, align 8                              ; load; *envptr8367794
  %envptr8367795 = inttoptr i64 %env8363530 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367796 = getelementptr inbounds i64, i64* %envptr8367795, i64 1            ; &envptr8367795[1]
  %YzG$f = load i64, i64* %envptr8367796, align 8                                    ; load; *envptr8367796
  %_958360258 = call i64 @prim_car(i64 %rvp8363122)                                  ; call prim_car
  %rvp8363121 = call i64 @prim_cdr(i64 %rvp8363122)                                  ; call prim_cdr
  %a8359964 = call i64 @prim_car(i64 %rvp8363121)                                    ; call prim_car
  %na8363120 = call i64 @prim_cdr(i64 %rvp8363121)                                   ; call prim_cdr
  %cps_45lst8360259 = call i64 @prim_cons(i64 %cont8360250, i64 %a8359964)           ; call prim_cons
  %cloptr8367797 = inttoptr i64 %YzG$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8367798 = getelementptr inbounds i64, i64* %cloptr8367797, i64 0             ; &cloptr8367797[0]
  %f8367800 = load i64, i64* %i0ptr8367798, align 8                                  ; load; *i0ptr8367798
  %fptr8367799 = inttoptr i64 %f8367800 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367799(i64 %YzG$f, i64 %cps_45lst8360259)          ; tail call
  ret void
}


define void @lam8363527(i64 %env8363528, i64 %rvp8363130) {
  %cont8360260 = call i64 @prim_car(i64 %rvp8363130)                                 ; call prim_car
  %rvp8363129 = call i64 @prim_cdr(i64 %rvp8363130)                                  ; call prim_cdr
  %LrE$a = call i64 @prim_car(i64 %rvp8363129)                                       ; call prim_car
  %rvp8363128 = call i64 @prim_cdr(i64 %rvp8363129)                                  ; call prim_cdr
  %c8I$b = call i64 @prim_car(i64 %rvp8363128)                                       ; call prim_car
  %na8363124 = call i64 @prim_cdr(i64 %rvp8363128)                                   ; call prim_cdr
  %retprim8360261 = call i64 @prim_cons(i64 %LrE$a, i64 %c8I$b)                      ; call prim_cons
  %arg8361633 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363127 = add i64 0, 0                                                         ; quoted ()
  %rva8363126 = call i64 @prim_cons(i64 %retprim8360261, i64 %rva8363127)            ; call prim_cons
  %rva8363125 = call i64 @prim_cons(i64 %arg8361633, i64 %rva8363126)                ; call prim_cons
  %cloptr8367801 = inttoptr i64 %cont8360260 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367802 = getelementptr inbounds i64, i64* %cloptr8367801, i64 0             ; &cloptr8367801[0]
  %f8367804 = load i64, i64* %i0ptr8367802, align 8                                  ; load; *i0ptr8367802
  %fptr8367803 = inttoptr i64 %f8367804 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367803(i64 %cont8360260, i64 %rva8363125)          ; tail call
  ret void
}


define void @lam8363522(i64 %env8363523, i64 %rvp8363146) {
  %cont8360263 = call i64 @prim_car(i64 %rvp8363146)                                 ; call prim_car
  %rvp8363145 = call i64 @prim_cdr(i64 %rvp8363146)                                  ; call prim_cdr
  %nFQ$x = call i64 @prim_car(i64 %rvp8363145)                                       ; call prim_car
  %na8363141 = call i64 @prim_cdr(i64 %rvp8363145)                                   ; call prim_cdr
  %retprim8360264 = call i64 @prim_car(i64 %nFQ$x)                                   ; call prim_car
  %arg8361637 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363144 = add i64 0, 0                                                         ; quoted ()
  %rva8363143 = call i64 @prim_cons(i64 %retprim8360264, i64 %rva8363144)            ; call prim_cons
  %rva8363142 = call i64 @prim_cons(i64 %arg8361637, i64 %rva8363143)                ; call prim_cons
  %cloptr8367805 = inttoptr i64 %cont8360263 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367806 = getelementptr inbounds i64, i64* %cloptr8367805, i64 0             ; &cloptr8367805[0]
  %f8367808 = load i64, i64* %i0ptr8367806, align 8                                  ; load; *i0ptr8367806
  %fptr8367807 = inttoptr i64 %f8367808 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367807(i64 %cont8360263, i64 %rva8363142)          ; tail call
  ret void
}


define void @lam8363517(i64 %env8363518, i64 %rvp8363159) {
  %cont8360265 = call i64 @prim_car(i64 %rvp8363159)                                 ; call prim_car
  %rvp8363158 = call i64 @prim_cdr(i64 %rvp8363159)                                  ; call prim_cdr
  %cTC$x = call i64 @prim_car(i64 %rvp8363158)                                       ; call prim_car
  %na8363154 = call i64 @prim_cdr(i64 %rvp8363158)                                   ; call prim_cdr
  %retprim8360266 = call i64 @prim_cdr(i64 %cTC$x)                                   ; call prim_cdr
  %arg8361641 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363157 = add i64 0, 0                                                         ; quoted ()
  %rva8363156 = call i64 @prim_cons(i64 %retprim8360266, i64 %rva8363157)            ; call prim_cons
  %rva8363155 = call i64 @prim_cons(i64 %arg8361641, i64 %rva8363156)                ; call prim_cons
  %cloptr8367809 = inttoptr i64 %cont8360265 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367810 = getelementptr inbounds i64, i64* %cloptr8367809, i64 0             ; &cloptr8367809[0]
  %f8367812 = load i64, i64* %i0ptr8367810, align 8                                  ; load; *i0ptr8367810
  %fptr8367811 = inttoptr i64 %f8367812 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367811(i64 %cont8360265, i64 %rva8363155)          ; tail call
  ret void
}


define void @lam8363510(i64 %env8363511, i64 %rvp8363176) {
  %cont8360267 = call i64 @prim_car(i64 %rvp8363176)                                 ; call prim_car
  %rvp8363175 = call i64 @prim_cdr(i64 %rvp8363176)                                  ; call prim_cdr
  %LaK$lst = call i64 @prim_car(i64 %rvp8363175)                                     ; call prim_car
  %rvp8363174 = call i64 @prim_cdr(i64 %rvp8363175)                                  ; call prim_cdr
  %ruH$b = call i64 @prim_car(i64 %rvp8363174)                                       ; call prim_car
  %na8363167 = call i64 @prim_cdr(i64 %rvp8363174)                                   ; call prim_cdr
  %cmp8367813 = icmp eq i64 %ruH$b, 15                                               ; false?
  br i1 %cmp8367813, label %else8367815, label %then8367814                          ; if

then8367814:
  %arg8361644 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363170 = add i64 0, 0                                                         ; quoted ()
  %rva8363169 = call i64 @prim_cons(i64 %ruH$b, i64 %rva8363170)                     ; call prim_cons
  %rva8363168 = call i64 @prim_cons(i64 %arg8361644, i64 %rva8363169)                ; call prim_cons
  %cloptr8367816 = inttoptr i64 %cont8360267 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367817 = getelementptr inbounds i64, i64* %cloptr8367816, i64 0             ; &cloptr8367816[0]
  %f8367819 = load i64, i64* %i0ptr8367817, align 8                                  ; load; *i0ptr8367817
  %fptr8367818 = inttoptr i64 %f8367819 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367818(i64 %cont8360267, i64 %rva8363168)          ; tail call
  ret void

else8367815:
  %retprim8360268 = call i64 @prim_null_63(i64 %LaK$lst)                             ; call prim_null_63
  %arg8361648 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363173 = add i64 0, 0                                                         ; quoted ()
  %rva8363172 = call i64 @prim_cons(i64 %retprim8360268, i64 %rva8363173)            ; call prim_cons
  %rva8363171 = call i64 @prim_cons(i64 %arg8361648, i64 %rva8363172)                ; call prim_cons
  %cloptr8367820 = inttoptr i64 %cont8360267 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367821 = getelementptr inbounds i64, i64* %cloptr8367820, i64 0             ; &cloptr8367820[0]
  %f8367823 = load i64, i64* %i0ptr8367821, align 8                                  ; load; *i0ptr8367821
  %fptr8367822 = inttoptr i64 %f8367823 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367822(i64 %cont8360267, i64 %rva8363171)          ; tail call
  ret void
}


define void @lam8363496(i64 %env8363497, i64 %rvp8363230) {
  %cont8360271 = call i64 @prim_car(i64 %rvp8363230)                                 ; call prim_car
  %rvp8363229 = call i64 @prim_cdr(i64 %rvp8363230)                                  ; call prim_cdr
  %bAt$_37foldl1 = call i64 @prim_car(i64 %rvp8363229)                               ; call prim_car
  %na8363203 = call i64 @prim_cdr(i64 %rvp8363229)                                   ; call prim_cdr
  %arg8361651 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8367824 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8367826 = getelementptr inbounds i64, i64* %cloptr8367824, i64 1              ; &eptr8367826[1]
  store i64 %bAt$_37foldl1, i64* %eptr8367826                                        ; *eptr8367826 = %bAt$_37foldl1
  %eptr8367825 = getelementptr inbounds i64, i64* %cloptr8367824, i64 0              ; &cloptr8367824[0]
  %f8367827 = ptrtoint void(i64,i64)* @lam8363493 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367827, i64* %eptr8367825                                             ; store fptr
  %arg8361650 = ptrtoint i64* %cloptr8367824 to i64                                  ; closure cast; i64* -> i64
  %rva8363228 = add i64 0, 0                                                         ; quoted ()
  %rva8363227 = call i64 @prim_cons(i64 %arg8361650, i64 %rva8363228)                ; call prim_cons
  %rva8363226 = call i64 @prim_cons(i64 %arg8361651, i64 %rva8363227)                ; call prim_cons
  %cloptr8367828 = inttoptr i64 %cont8360271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367829 = getelementptr inbounds i64, i64* %cloptr8367828, i64 0             ; &cloptr8367828[0]
  %f8367831 = load i64, i64* %i0ptr8367829, align 8                                  ; load; *i0ptr8367829
  %fptr8367830 = inttoptr i64 %f8367831 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367830(i64 %cont8360271, i64 %rva8363226)          ; tail call
  ret void
}


define void @lam8363493(i64 %env8363494, i64 %rvp8363225) {
  %envptr8367832 = inttoptr i64 %env8363494 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367833 = getelementptr inbounds i64, i64* %envptr8367832, i64 1            ; &envptr8367832[1]
  %bAt$_37foldl1 = load i64, i64* %envptr8367833, align 8                            ; load; *envptr8367833
  %cont8360272 = call i64 @prim_car(i64 %rvp8363225)                                 ; call prim_car
  %rvp8363224 = call i64 @prim_cdr(i64 %rvp8363225)                                  ; call prim_cdr
  %fR4$f = call i64 @prim_car(i64 %rvp8363224)                                       ; call prim_car
  %rvp8363223 = call i64 @prim_cdr(i64 %rvp8363224)                                  ; call prim_cdr
  %CmH$acc = call i64 @prim_car(i64 %rvp8363223)                                     ; call prim_car
  %rvp8363222 = call i64 @prim_cdr(i64 %rvp8363223)                                  ; call prim_cdr
  %HKj$lst = call i64 @prim_car(i64 %rvp8363222)                                     ; call prim_car
  %na8363205 = call i64 @prim_cdr(i64 %rvp8363222)                                   ; call prim_cdr
  %a8359951 = call i64 @prim_null_63(i64 %HKj$lst)                                   ; call prim_null_63
  %cmp8367834 = icmp eq i64 %a8359951, 15                                            ; false?
  br i1 %cmp8367834, label %else8367836, label %then8367835                          ; if

then8367835:
  %arg8361655 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363208 = add i64 0, 0                                                         ; quoted ()
  %rva8363207 = call i64 @prim_cons(i64 %CmH$acc, i64 %rva8363208)                   ; call prim_cons
  %rva8363206 = call i64 @prim_cons(i64 %arg8361655, i64 %rva8363207)                ; call prim_cons
  %cloptr8367837 = inttoptr i64 %cont8360272 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367838 = getelementptr inbounds i64, i64* %cloptr8367837, i64 0             ; &cloptr8367837[0]
  %f8367840 = load i64, i64* %i0ptr8367838, align 8                                  ; load; *i0ptr8367838
  %fptr8367839 = inttoptr i64 %f8367840 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367839(i64 %cont8360272, i64 %rva8363206)          ; tail call
  ret void

else8367836:
  %a8359952 = call i64 @prim_car(i64 %HKj$lst)                                       ; call prim_car
  %cloptr8367841 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8367843 = getelementptr inbounds i64, i64* %cloptr8367841, i64 1              ; &eptr8367843[1]
  %eptr8367844 = getelementptr inbounds i64, i64* %cloptr8367841, i64 2              ; &eptr8367844[2]
  %eptr8367845 = getelementptr inbounds i64, i64* %cloptr8367841, i64 3              ; &eptr8367845[3]
  %eptr8367846 = getelementptr inbounds i64, i64* %cloptr8367841, i64 4              ; &eptr8367846[4]
  store i64 %fR4$f, i64* %eptr8367843                                                ; *eptr8367843 = %fR4$f
  store i64 %HKj$lst, i64* %eptr8367844                                              ; *eptr8367844 = %HKj$lst
  store i64 %bAt$_37foldl1, i64* %eptr8367845                                        ; *eptr8367845 = %bAt$_37foldl1
  store i64 %cont8360272, i64* %eptr8367846                                          ; *eptr8367846 = %cont8360272
  %eptr8367842 = getelementptr inbounds i64, i64* %cloptr8367841, i64 0              ; &cloptr8367841[0]
  %f8367847 = ptrtoint void(i64,i64)* @lam8363491 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367847, i64* %eptr8367842                                             ; store fptr
  %arg8361660 = ptrtoint i64* %cloptr8367841 to i64                                  ; closure cast; i64* -> i64
  %rva8363221 = add i64 0, 0                                                         ; quoted ()
  %rva8363220 = call i64 @prim_cons(i64 %CmH$acc, i64 %rva8363221)                   ; call prim_cons
  %rva8363219 = call i64 @prim_cons(i64 %a8359952, i64 %rva8363220)                  ; call prim_cons
  %rva8363218 = call i64 @prim_cons(i64 %arg8361660, i64 %rva8363219)                ; call prim_cons
  %cloptr8367848 = inttoptr i64 %fR4$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8367849 = getelementptr inbounds i64, i64* %cloptr8367848, i64 0             ; &cloptr8367848[0]
  %f8367851 = load i64, i64* %i0ptr8367849, align 8                                  ; load; *i0ptr8367849
  %fptr8367850 = inttoptr i64 %f8367851 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367850(i64 %fR4$f, i64 %rva8363218)                ; tail call
  ret void
}


define void @lam8363491(i64 %env8363492, i64 %rvp8363217) {
  %envptr8367852 = inttoptr i64 %env8363492 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367853 = getelementptr inbounds i64, i64* %envptr8367852, i64 4            ; &envptr8367852[4]
  %cont8360272 = load i64, i64* %envptr8367853, align 8                              ; load; *envptr8367853
  %envptr8367854 = inttoptr i64 %env8363492 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367855 = getelementptr inbounds i64, i64* %envptr8367854, i64 3            ; &envptr8367854[3]
  %bAt$_37foldl1 = load i64, i64* %envptr8367855, align 8                            ; load; *envptr8367855
  %envptr8367856 = inttoptr i64 %env8363492 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367857 = getelementptr inbounds i64, i64* %envptr8367856, i64 2            ; &envptr8367856[2]
  %HKj$lst = load i64, i64* %envptr8367857, align 8                                  ; load; *envptr8367857
  %envptr8367858 = inttoptr i64 %env8363492 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367859 = getelementptr inbounds i64, i64* %envptr8367858, i64 1            ; &envptr8367858[1]
  %fR4$f = load i64, i64* %envptr8367859, align 8                                    ; load; *envptr8367859
  %_958360273 = call i64 @prim_car(i64 %rvp8363217)                                  ; call prim_car
  %rvp8363216 = call i64 @prim_cdr(i64 %rvp8363217)                                  ; call prim_cdr
  %a8359953 = call i64 @prim_car(i64 %rvp8363216)                                    ; call prim_car
  %na8363210 = call i64 @prim_cdr(i64 %rvp8363216)                                   ; call prim_cdr
  %a8359954 = call i64 @prim_cdr(i64 %HKj$lst)                                       ; call prim_cdr
  %rva8363215 = add i64 0, 0                                                         ; quoted ()
  %rva8363214 = call i64 @prim_cons(i64 %a8359954, i64 %rva8363215)                  ; call prim_cons
  %rva8363213 = call i64 @prim_cons(i64 %a8359953, i64 %rva8363214)                  ; call prim_cons
  %rva8363212 = call i64 @prim_cons(i64 %fR4$f, i64 %rva8363213)                     ; call prim_cons
  %rva8363211 = call i64 @prim_cons(i64 %cont8360272, i64 %rva8363212)               ; call prim_cons
  %cloptr8367860 = inttoptr i64 %bAt$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8367861 = getelementptr inbounds i64, i64* %cloptr8367860, i64 0             ; &cloptr8367860[0]
  %f8367863 = load i64, i64* %i0ptr8367861, align 8                                  ; load; *i0ptr8367861
  %fptr8367862 = inttoptr i64 %f8367863 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367862(i64 %bAt$_37foldl1, i64 %rva8363211)        ; tail call
  ret void
}


define void @lam8363483(i64 %env8363484, i64 %rvp8363259) {
  %cont8360274 = call i64 @prim_car(i64 %rvp8363259)                                 ; call prim_car
  %rvp8363258 = call i64 @prim_cdr(i64 %rvp8363259)                                  ; call prim_cdr
  %nTf$_37length = call i64 @prim_car(i64 %rvp8363258)                               ; call prim_car
  %na8363237 = call i64 @prim_cdr(i64 %rvp8363258)                                   ; call prim_cdr
  %arg8361669 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8367864 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8367866 = getelementptr inbounds i64, i64* %cloptr8367864, i64 1              ; &eptr8367866[1]
  store i64 %nTf$_37length, i64* %eptr8367866                                        ; *eptr8367866 = %nTf$_37length
  %eptr8367865 = getelementptr inbounds i64, i64* %cloptr8367864, i64 0              ; &cloptr8367864[0]
  %f8367867 = ptrtoint void(i64,i64)* @lam8363480 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367867, i64* %eptr8367865                                             ; store fptr
  %arg8361668 = ptrtoint i64* %cloptr8367864 to i64                                  ; closure cast; i64* -> i64
  %rva8363257 = add i64 0, 0                                                         ; quoted ()
  %rva8363256 = call i64 @prim_cons(i64 %arg8361668, i64 %rva8363257)                ; call prim_cons
  %rva8363255 = call i64 @prim_cons(i64 %arg8361669, i64 %rva8363256)                ; call prim_cons
  %cloptr8367868 = inttoptr i64 %cont8360274 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367869 = getelementptr inbounds i64, i64* %cloptr8367868, i64 0             ; &cloptr8367868[0]
  %f8367871 = load i64, i64* %i0ptr8367869, align 8                                  ; load; *i0ptr8367869
  %fptr8367870 = inttoptr i64 %f8367871 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367870(i64 %cont8360274, i64 %rva8363255)          ; tail call
  ret void
}


define void @lam8363480(i64 %env8363481, i64 %rvp8363254) {
  %envptr8367872 = inttoptr i64 %env8363481 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367873 = getelementptr inbounds i64, i64* %envptr8367872, i64 1            ; &envptr8367872[1]
  %nTf$_37length = load i64, i64* %envptr8367873, align 8                            ; load; *envptr8367873
  %cont8360275 = call i64 @prim_car(i64 %rvp8363254)                                 ; call prim_car
  %rvp8363253 = call i64 @prim_cdr(i64 %rvp8363254)                                  ; call prim_cdr
  %dQL$lst = call i64 @prim_car(i64 %rvp8363253)                                     ; call prim_car
  %na8363239 = call i64 @prim_cdr(i64 %rvp8363253)                                   ; call prim_cdr
  %a8359948 = call i64 @prim_null_63(i64 %dQL$lst)                                   ; call prim_null_63
  %cmp8367874 = icmp eq i64 %a8359948, 15                                            ; false?
  br i1 %cmp8367874, label %else8367876, label %then8367875                          ; if

then8367875:
  %arg8361673 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8361672 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363242 = add i64 0, 0                                                         ; quoted ()
  %rva8363241 = call i64 @prim_cons(i64 %arg8361672, i64 %rva8363242)                ; call prim_cons
  %rva8363240 = call i64 @prim_cons(i64 %arg8361673, i64 %rva8363241)                ; call prim_cons
  %cloptr8367877 = inttoptr i64 %cont8360275 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367878 = getelementptr inbounds i64, i64* %cloptr8367877, i64 0             ; &cloptr8367877[0]
  %f8367880 = load i64, i64* %i0ptr8367878, align 8                                  ; load; *i0ptr8367878
  %fptr8367879 = inttoptr i64 %f8367880 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367879(i64 %cont8360275, i64 %rva8363240)          ; tail call
  ret void

else8367876:
  %a8359949 = call i64 @prim_cdr(i64 %dQL$lst)                                       ; call prim_cdr
  %cloptr8367881 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8367883 = getelementptr inbounds i64, i64* %cloptr8367881, i64 1              ; &eptr8367883[1]
  store i64 %cont8360275, i64* %eptr8367883                                          ; *eptr8367883 = %cont8360275
  %eptr8367882 = getelementptr inbounds i64, i64* %cloptr8367881, i64 0              ; &cloptr8367881[0]
  %f8367884 = ptrtoint void(i64,i64)* @lam8363478 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367884, i64* %eptr8367882                                             ; store fptr
  %arg8361677 = ptrtoint i64* %cloptr8367881 to i64                                  ; closure cast; i64* -> i64
  %rva8363252 = add i64 0, 0                                                         ; quoted ()
  %rva8363251 = call i64 @prim_cons(i64 %a8359949, i64 %rva8363252)                  ; call prim_cons
  %rva8363250 = call i64 @prim_cons(i64 %arg8361677, i64 %rva8363251)                ; call prim_cons
  %cloptr8367885 = inttoptr i64 %nTf$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8367886 = getelementptr inbounds i64, i64* %cloptr8367885, i64 0             ; &cloptr8367885[0]
  %f8367888 = load i64, i64* %i0ptr8367886, align 8                                  ; load; *i0ptr8367886
  %fptr8367887 = inttoptr i64 %f8367888 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367887(i64 %nTf$_37length, i64 %rva8363250)        ; tail call
  ret void
}


define void @lam8363478(i64 %env8363479, i64 %rvp8363249) {
  %envptr8367889 = inttoptr i64 %env8363479 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367890 = getelementptr inbounds i64, i64* %envptr8367889, i64 1            ; &envptr8367889[1]
  %cont8360275 = load i64, i64* %envptr8367890, align 8                              ; load; *envptr8367890
  %_958360276 = call i64 @prim_car(i64 %rvp8363249)                                  ; call prim_car
  %rvp8363248 = call i64 @prim_cdr(i64 %rvp8363249)                                  ; call prim_cdr
  %a8359950 = call i64 @prim_car(i64 %rvp8363248)                                    ; call prim_car
  %na8363244 = call i64 @prim_cdr(i64 %rvp8363248)                                   ; call prim_cdr
  %arg8361680 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim8360277 = call i64 @prim__43(i64 %arg8361680, i64 %a8359950)               ; call prim__43
  %arg8361682 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363247 = add i64 0, 0                                                         ; quoted ()
  %rva8363246 = call i64 @prim_cons(i64 %retprim8360277, i64 %rva8363247)            ; call prim_cons
  %rva8363245 = call i64 @prim_cons(i64 %arg8361682, i64 %rva8363246)                ; call prim_cons
  %cloptr8367891 = inttoptr i64 %cont8360275 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367892 = getelementptr inbounds i64, i64* %cloptr8367891, i64 0             ; &cloptr8367891[0]
  %f8367894 = load i64, i64* %i0ptr8367892, align 8                                  ; load; *i0ptr8367892
  %fptr8367893 = inttoptr i64 %f8367894 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367893(i64 %cont8360275, i64 %rva8363245)          ; tail call
  ret void
}


define void @lam8363467(i64 %env8363468, i64 %rvp8363293) {
  %cont8360278 = call i64 @prim_car(i64 %rvp8363293)                                 ; call prim_car
  %rvp8363292 = call i64 @prim_cdr(i64 %rvp8363293)                                  ; call prim_cdr
  %LDf$_37take = call i64 @prim_car(i64 %rvp8363292)                                 ; call prim_car
  %na8363266 = call i64 @prim_cdr(i64 %rvp8363292)                                   ; call prim_cdr
  %arg8361685 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8367895 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8367897 = getelementptr inbounds i64, i64* %cloptr8367895, i64 1              ; &eptr8367897[1]
  store i64 %LDf$_37take, i64* %eptr8367897                                          ; *eptr8367897 = %LDf$_37take
  %eptr8367896 = getelementptr inbounds i64, i64* %cloptr8367895, i64 0              ; &cloptr8367895[0]
  %f8367898 = ptrtoint void(i64,i64)* @lam8363464 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367898, i64* %eptr8367896                                             ; store fptr
  %arg8361684 = ptrtoint i64* %cloptr8367895 to i64                                  ; closure cast; i64* -> i64
  %rva8363291 = add i64 0, 0                                                         ; quoted ()
  %rva8363290 = call i64 @prim_cons(i64 %arg8361684, i64 %rva8363291)                ; call prim_cons
  %rva8363289 = call i64 @prim_cons(i64 %arg8361685, i64 %rva8363290)                ; call prim_cons
  %cloptr8367899 = inttoptr i64 %cont8360278 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367900 = getelementptr inbounds i64, i64* %cloptr8367899, i64 0             ; &cloptr8367899[0]
  %f8367902 = load i64, i64* %i0ptr8367900, align 8                                  ; load; *i0ptr8367900
  %fptr8367901 = inttoptr i64 %f8367902 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367901(i64 %cont8360278, i64 %rva8363289)          ; tail call
  ret void
}


define void @lam8363464(i64 %env8363465, i64 %rvp8363288) {
  %envptr8367903 = inttoptr i64 %env8363465 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367904 = getelementptr inbounds i64, i64* %envptr8367903, i64 1            ; &envptr8367903[1]
  %LDf$_37take = load i64, i64* %envptr8367904, align 8                              ; load; *envptr8367904
  %cont8360279 = call i64 @prim_car(i64 %rvp8363288)                                 ; call prim_car
  %rvp8363287 = call i64 @prim_cdr(i64 %rvp8363288)                                  ; call prim_cdr
  %FJM$lst = call i64 @prim_car(i64 %rvp8363287)                                     ; call prim_car
  %rvp8363286 = call i64 @prim_cdr(i64 %rvp8363287)                                  ; call prim_cdr
  %GhK$n = call i64 @prim_car(i64 %rvp8363286)                                       ; call prim_car
  %na8363268 = call i64 @prim_cdr(i64 %rvp8363286)                                   ; call prim_cdr
  %arg8361687 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a8359942 = call i64 @prim__61(i64 %GhK$n, i64 %arg8361687)                        ; call prim__61
  %cmp8367905 = icmp eq i64 %a8359942, 15                                            ; false?
  br i1 %cmp8367905, label %else8367907, label %then8367906                          ; if

then8367906:
  %arg8361690 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8361689 = add i64 0, 0                                                         ; quoted ()
  %rva8363271 = add i64 0, 0                                                         ; quoted ()
  %rva8363270 = call i64 @prim_cons(i64 %arg8361689, i64 %rva8363271)                ; call prim_cons
  %rva8363269 = call i64 @prim_cons(i64 %arg8361690, i64 %rva8363270)                ; call prim_cons
  %cloptr8367908 = inttoptr i64 %cont8360279 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367909 = getelementptr inbounds i64, i64* %cloptr8367908, i64 0             ; &cloptr8367908[0]
  %f8367911 = load i64, i64* %i0ptr8367909, align 8                                  ; load; *i0ptr8367909
  %fptr8367910 = inttoptr i64 %f8367911 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367910(i64 %cont8360279, i64 %rva8363269)          ; tail call
  ret void

else8367907:
  %a8359943 = call i64 @prim_null_63(i64 %FJM$lst)                                   ; call prim_null_63
  %cmp8367912 = icmp eq i64 %a8359943, 15                                            ; false?
  br i1 %cmp8367912, label %else8367914, label %then8367913                          ; if

then8367913:
  %arg8361694 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8361693 = add i64 0, 0                                                         ; quoted ()
  %rva8363274 = add i64 0, 0                                                         ; quoted ()
  %rva8363273 = call i64 @prim_cons(i64 %arg8361693, i64 %rva8363274)                ; call prim_cons
  %rva8363272 = call i64 @prim_cons(i64 %arg8361694, i64 %rva8363273)                ; call prim_cons
  %cloptr8367915 = inttoptr i64 %cont8360279 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367916 = getelementptr inbounds i64, i64* %cloptr8367915, i64 0             ; &cloptr8367915[0]
  %f8367918 = load i64, i64* %i0ptr8367916, align 8                                  ; load; *i0ptr8367916
  %fptr8367917 = inttoptr i64 %f8367918 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367917(i64 %cont8360279, i64 %rva8363272)          ; tail call
  ret void

else8367914:
  %a8359944 = call i64 @prim_car(i64 %FJM$lst)                                       ; call prim_car
  %a8359945 = call i64 @prim_cdr(i64 %FJM$lst)                                       ; call prim_cdr
  %arg8361698 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a8359946 = call i64 @prim__45(i64 %GhK$n, i64 %arg8361698)                        ; call prim__45
  %cloptr8367919 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367921 = getelementptr inbounds i64, i64* %cloptr8367919, i64 1              ; &eptr8367921[1]
  %eptr8367922 = getelementptr inbounds i64, i64* %cloptr8367919, i64 2              ; &eptr8367922[2]
  store i64 %a8359944, i64* %eptr8367921                                             ; *eptr8367921 = %a8359944
  store i64 %cont8360279, i64* %eptr8367922                                          ; *eptr8367922 = %cont8360279
  %eptr8367920 = getelementptr inbounds i64, i64* %cloptr8367919, i64 0              ; &cloptr8367919[0]
  %f8367923 = ptrtoint void(i64,i64)* @lam8363460 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367923, i64* %eptr8367920                                             ; store fptr
  %arg8361702 = ptrtoint i64* %cloptr8367919 to i64                                  ; closure cast; i64* -> i64
  %rva8363285 = add i64 0, 0                                                         ; quoted ()
  %rva8363284 = call i64 @prim_cons(i64 %a8359946, i64 %rva8363285)                  ; call prim_cons
  %rva8363283 = call i64 @prim_cons(i64 %a8359945, i64 %rva8363284)                  ; call prim_cons
  %rva8363282 = call i64 @prim_cons(i64 %arg8361702, i64 %rva8363283)                ; call prim_cons
  %cloptr8367924 = inttoptr i64 %LDf$_37take to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367925 = getelementptr inbounds i64, i64* %cloptr8367924, i64 0             ; &cloptr8367924[0]
  %f8367927 = load i64, i64* %i0ptr8367925, align 8                                  ; load; *i0ptr8367925
  %fptr8367926 = inttoptr i64 %f8367927 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367926(i64 %LDf$_37take, i64 %rva8363282)          ; tail call
  ret void
}


define void @lam8363460(i64 %env8363461, i64 %rvp8363281) {
  %envptr8367928 = inttoptr i64 %env8363461 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367929 = getelementptr inbounds i64, i64* %envptr8367928, i64 2            ; &envptr8367928[2]
  %cont8360279 = load i64, i64* %envptr8367929, align 8                              ; load; *envptr8367929
  %envptr8367930 = inttoptr i64 %env8363461 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367931 = getelementptr inbounds i64, i64* %envptr8367930, i64 1            ; &envptr8367930[1]
  %a8359944 = load i64, i64* %envptr8367931, align 8                                 ; load; *envptr8367931
  %_958360280 = call i64 @prim_car(i64 %rvp8363281)                                  ; call prim_car
  %rvp8363280 = call i64 @prim_cdr(i64 %rvp8363281)                                  ; call prim_cdr
  %a8359947 = call i64 @prim_car(i64 %rvp8363280)                                    ; call prim_car
  %na8363276 = call i64 @prim_cdr(i64 %rvp8363280)                                   ; call prim_cdr
  %retprim8360281 = call i64 @prim_cons(i64 %a8359944, i64 %a8359947)                ; call prim_cons
  %arg8361707 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363279 = add i64 0, 0                                                         ; quoted ()
  %rva8363278 = call i64 @prim_cons(i64 %retprim8360281, i64 %rva8363279)            ; call prim_cons
  %rva8363277 = call i64 @prim_cons(i64 %arg8361707, i64 %rva8363278)                ; call prim_cons
  %cloptr8367932 = inttoptr i64 %cont8360279 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367933 = getelementptr inbounds i64, i64* %cloptr8367932, i64 0             ; &cloptr8367932[0]
  %f8367935 = load i64, i64* %i0ptr8367933, align 8                                  ; load; *i0ptr8367933
  %fptr8367934 = inttoptr i64 %f8367935 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367934(i64 %cont8360279, i64 %rva8363277)          ; tail call
  ret void
}


define void @lam8363447(i64 %env8363448, i64 %rvp8363331) {
  %cont8360282 = call i64 @prim_car(i64 %rvp8363331)                                 ; call prim_car
  %rvp8363330 = call i64 @prim_cdr(i64 %rvp8363331)                                  ; call prim_cdr
  %adF$_37map = call i64 @prim_car(i64 %rvp8363330)                                  ; call prim_car
  %na8363300 = call i64 @prim_cdr(i64 %rvp8363330)                                   ; call prim_cdr
  %arg8361710 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8367936 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8367938 = getelementptr inbounds i64, i64* %cloptr8367936, i64 1              ; &eptr8367938[1]
  store i64 %adF$_37map, i64* %eptr8367938                                           ; *eptr8367938 = %adF$_37map
  %eptr8367937 = getelementptr inbounds i64, i64* %cloptr8367936, i64 0              ; &cloptr8367936[0]
  %f8367939 = ptrtoint void(i64,i64)* @lam8363444 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367939, i64* %eptr8367937                                             ; store fptr
  %arg8361709 = ptrtoint i64* %cloptr8367936 to i64                                  ; closure cast; i64* -> i64
  %rva8363329 = add i64 0, 0                                                         ; quoted ()
  %rva8363328 = call i64 @prim_cons(i64 %arg8361709, i64 %rva8363329)                ; call prim_cons
  %rva8363327 = call i64 @prim_cons(i64 %arg8361710, i64 %rva8363328)                ; call prim_cons
  %cloptr8367940 = inttoptr i64 %cont8360282 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367941 = getelementptr inbounds i64, i64* %cloptr8367940, i64 0             ; &cloptr8367940[0]
  %f8367943 = load i64, i64* %i0ptr8367941, align 8                                  ; load; *i0ptr8367941
  %fptr8367942 = inttoptr i64 %f8367943 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367942(i64 %cont8360282, i64 %rva8363327)          ; tail call
  ret void
}


define void @lam8363444(i64 %env8363445, i64 %rvp8363326) {
  %envptr8367944 = inttoptr i64 %env8363445 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367945 = getelementptr inbounds i64, i64* %envptr8367944, i64 1            ; &envptr8367944[1]
  %adF$_37map = load i64, i64* %envptr8367945, align 8                               ; load; *envptr8367945
  %cont8360283 = call i64 @prim_car(i64 %rvp8363326)                                 ; call prim_car
  %rvp8363325 = call i64 @prim_cdr(i64 %rvp8363326)                                  ; call prim_cdr
  %VYz$f = call i64 @prim_car(i64 %rvp8363325)                                       ; call prim_car
  %rvp8363324 = call i64 @prim_cdr(i64 %rvp8363325)                                  ; call prim_cdr
  %s6V$lst = call i64 @prim_car(i64 %rvp8363324)                                     ; call prim_car
  %na8363302 = call i64 @prim_cdr(i64 %rvp8363324)                                   ; call prim_cdr
  %a8359937 = call i64 @prim_null_63(i64 %s6V$lst)                                   ; call prim_null_63
  %cmp8367946 = icmp eq i64 %a8359937, 15                                            ; false?
  br i1 %cmp8367946, label %else8367948, label %then8367947                          ; if

then8367947:
  %arg8361714 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg8361713 = add i64 0, 0                                                         ; quoted ()
  %rva8363305 = add i64 0, 0                                                         ; quoted ()
  %rva8363304 = call i64 @prim_cons(i64 %arg8361713, i64 %rva8363305)                ; call prim_cons
  %rva8363303 = call i64 @prim_cons(i64 %arg8361714, i64 %rva8363304)                ; call prim_cons
  %cloptr8367949 = inttoptr i64 %cont8360283 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367950 = getelementptr inbounds i64, i64* %cloptr8367949, i64 0             ; &cloptr8367949[0]
  %f8367952 = load i64, i64* %i0ptr8367950, align 8                                  ; load; *i0ptr8367950
  %fptr8367951 = inttoptr i64 %f8367952 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367951(i64 %cont8360283, i64 %rva8363303)          ; tail call
  ret void

else8367948:
  %a8359938 = call i64 @prim_car(i64 %s6V$lst)                                       ; call prim_car
  %cloptr8367953 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr8367955 = getelementptr inbounds i64, i64* %cloptr8367953, i64 1              ; &eptr8367955[1]
  %eptr8367956 = getelementptr inbounds i64, i64* %cloptr8367953, i64 2              ; &eptr8367956[2]
  %eptr8367957 = getelementptr inbounds i64, i64* %cloptr8367953, i64 3              ; &eptr8367957[3]
  %eptr8367958 = getelementptr inbounds i64, i64* %cloptr8367953, i64 4              ; &eptr8367958[4]
  store i64 %cont8360283, i64* %eptr8367955                                          ; *eptr8367955 = %cont8360283
  store i64 %s6V$lst, i64* %eptr8367956                                              ; *eptr8367956 = %s6V$lst
  store i64 %adF$_37map, i64* %eptr8367957                                           ; *eptr8367957 = %adF$_37map
  store i64 %VYz$f, i64* %eptr8367958                                                ; *eptr8367958 = %VYz$f
  %eptr8367954 = getelementptr inbounds i64, i64* %cloptr8367953, i64 0              ; &cloptr8367953[0]
  %f8367959 = ptrtoint void(i64,i64)* @lam8363442 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367959, i64* %eptr8367954                                             ; store fptr
  %arg8361718 = ptrtoint i64* %cloptr8367953 to i64                                  ; closure cast; i64* -> i64
  %rva8363323 = add i64 0, 0                                                         ; quoted ()
  %rva8363322 = call i64 @prim_cons(i64 %a8359938, i64 %rva8363323)                  ; call prim_cons
  %rva8363321 = call i64 @prim_cons(i64 %arg8361718, i64 %rva8363322)                ; call prim_cons
  %cloptr8367960 = inttoptr i64 %VYz$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8367961 = getelementptr inbounds i64, i64* %cloptr8367960, i64 0             ; &cloptr8367960[0]
  %f8367963 = load i64, i64* %i0ptr8367961, align 8                                  ; load; *i0ptr8367961
  %fptr8367962 = inttoptr i64 %f8367963 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367962(i64 %VYz$f, i64 %rva8363321)                ; tail call
  ret void
}


define void @lam8363442(i64 %env8363443, i64 %rvp8363320) {
  %envptr8367964 = inttoptr i64 %env8363443 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367965 = getelementptr inbounds i64, i64* %envptr8367964, i64 4            ; &envptr8367964[4]
  %VYz$f = load i64, i64* %envptr8367965, align 8                                    ; load; *envptr8367965
  %envptr8367966 = inttoptr i64 %env8363443 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367967 = getelementptr inbounds i64, i64* %envptr8367966, i64 3            ; &envptr8367966[3]
  %adF$_37map = load i64, i64* %envptr8367967, align 8                               ; load; *envptr8367967
  %envptr8367968 = inttoptr i64 %env8363443 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367969 = getelementptr inbounds i64, i64* %envptr8367968, i64 2            ; &envptr8367968[2]
  %s6V$lst = load i64, i64* %envptr8367969, align 8                                  ; load; *envptr8367969
  %envptr8367970 = inttoptr i64 %env8363443 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367971 = getelementptr inbounds i64, i64* %envptr8367970, i64 1            ; &envptr8367970[1]
  %cont8360283 = load i64, i64* %envptr8367971, align 8                              ; load; *envptr8367971
  %_958360284 = call i64 @prim_car(i64 %rvp8363320)                                  ; call prim_car
  %rvp8363319 = call i64 @prim_cdr(i64 %rvp8363320)                                  ; call prim_cdr
  %a8359939 = call i64 @prim_car(i64 %rvp8363319)                                    ; call prim_car
  %na8363307 = call i64 @prim_cdr(i64 %rvp8363319)                                   ; call prim_cdr
  %a8359940 = call i64 @prim_cdr(i64 %s6V$lst)                                       ; call prim_cdr
  %cloptr8367972 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8367974 = getelementptr inbounds i64, i64* %cloptr8367972, i64 1              ; &eptr8367974[1]
  %eptr8367975 = getelementptr inbounds i64, i64* %cloptr8367972, i64 2              ; &eptr8367975[2]
  store i64 %cont8360283, i64* %eptr8367974                                          ; *eptr8367974 = %cont8360283
  store i64 %a8359939, i64* %eptr8367975                                             ; *eptr8367975 = %a8359939
  %eptr8367973 = getelementptr inbounds i64, i64* %cloptr8367972, i64 0              ; &cloptr8367972[0]
  %f8367976 = ptrtoint void(i64,i64)* @lam8363440 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367976, i64* %eptr8367973                                             ; store fptr
  %arg8361723 = ptrtoint i64* %cloptr8367972 to i64                                  ; closure cast; i64* -> i64
  %rva8363318 = add i64 0, 0                                                         ; quoted ()
  %rva8363317 = call i64 @prim_cons(i64 %a8359940, i64 %rva8363318)                  ; call prim_cons
  %rva8363316 = call i64 @prim_cons(i64 %VYz$f, i64 %rva8363317)                     ; call prim_cons
  %rva8363315 = call i64 @prim_cons(i64 %arg8361723, i64 %rva8363316)                ; call prim_cons
  %cloptr8367977 = inttoptr i64 %adF$_37map to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr8367978 = getelementptr inbounds i64, i64* %cloptr8367977, i64 0             ; &cloptr8367977[0]
  %f8367980 = load i64, i64* %i0ptr8367978, align 8                                  ; load; *i0ptr8367978
  %fptr8367979 = inttoptr i64 %f8367980 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367979(i64 %adF$_37map, i64 %rva8363315)           ; tail call
  ret void
}


define void @lam8363440(i64 %env8363441, i64 %rvp8363314) {
  %envptr8367981 = inttoptr i64 %env8363441 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367982 = getelementptr inbounds i64, i64* %envptr8367981, i64 2            ; &envptr8367981[2]
  %a8359939 = load i64, i64* %envptr8367982, align 8                                 ; load; *envptr8367982
  %envptr8367983 = inttoptr i64 %env8363441 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367984 = getelementptr inbounds i64, i64* %envptr8367983, i64 1            ; &envptr8367983[1]
  %cont8360283 = load i64, i64* %envptr8367984, align 8                              ; load; *envptr8367984
  %_958360285 = call i64 @prim_car(i64 %rvp8363314)                                  ; call prim_car
  %rvp8363313 = call i64 @prim_cdr(i64 %rvp8363314)                                  ; call prim_cdr
  %a8359941 = call i64 @prim_car(i64 %rvp8363313)                                    ; call prim_car
  %na8363309 = call i64 @prim_cdr(i64 %rvp8363313)                                   ; call prim_cdr
  %retprim8360286 = call i64 @prim_cons(i64 %a8359939, i64 %a8359941)                ; call prim_cons
  %arg8361728 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363312 = add i64 0, 0                                                         ; quoted ()
  %rva8363311 = call i64 @prim_cons(i64 %retprim8360286, i64 %rva8363312)            ; call prim_cons
  %rva8363310 = call i64 @prim_cons(i64 %arg8361728, i64 %rva8363311)                ; call prim_cons
  %cloptr8367985 = inttoptr i64 %cont8360283 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367986 = getelementptr inbounds i64, i64* %cloptr8367985, i64 0             ; &cloptr8367985[0]
  %f8367988 = load i64, i64* %i0ptr8367986, align 8                                  ; load; *i0ptr8367986
  %fptr8367987 = inttoptr i64 %f8367988 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367987(i64 %cont8360283, i64 %rva8363310)          ; tail call
  ret void
}


define void @lam8363429(i64 %env8363430, i64 %rvp8363365) {
  %cont8360287 = call i64 @prim_car(i64 %rvp8363365)                                 ; call prim_car
  %rvp8363364 = call i64 @prim_cdr(i64 %rvp8363365)                                  ; call prim_cdr
  %lUJ$_37foldr1 = call i64 @prim_car(i64 %rvp8363364)                               ; call prim_car
  %na8363338 = call i64 @prim_cdr(i64 %rvp8363364)                                   ; call prim_cdr
  %arg8361731 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8367989 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8367991 = getelementptr inbounds i64, i64* %cloptr8367989, i64 1              ; &eptr8367991[1]
  store i64 %lUJ$_37foldr1, i64* %eptr8367991                                        ; *eptr8367991 = %lUJ$_37foldr1
  %eptr8367990 = getelementptr inbounds i64, i64* %cloptr8367989, i64 0              ; &cloptr8367989[0]
  %f8367992 = ptrtoint void(i64,i64)* @lam8363426 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8367992, i64* %eptr8367990                                             ; store fptr
  %arg8361730 = ptrtoint i64* %cloptr8367989 to i64                                  ; closure cast; i64* -> i64
  %rva8363363 = add i64 0, 0                                                         ; quoted ()
  %rva8363362 = call i64 @prim_cons(i64 %arg8361730, i64 %rva8363363)                ; call prim_cons
  %rva8363361 = call i64 @prim_cons(i64 %arg8361731, i64 %rva8363362)                ; call prim_cons
  %cloptr8367993 = inttoptr i64 %cont8360287 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8367994 = getelementptr inbounds i64, i64* %cloptr8367993, i64 0             ; &cloptr8367993[0]
  %f8367996 = load i64, i64* %i0ptr8367994, align 8                                  ; load; *i0ptr8367994
  %fptr8367995 = inttoptr i64 %f8367996 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8367995(i64 %cont8360287, i64 %rva8363361)          ; tail call
  ret void
}


define void @lam8363426(i64 %env8363427, i64 %rvp8363360) {
  %envptr8367997 = inttoptr i64 %env8363427 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8367998 = getelementptr inbounds i64, i64* %envptr8367997, i64 1            ; &envptr8367997[1]
  %lUJ$_37foldr1 = load i64, i64* %envptr8367998, align 8                            ; load; *envptr8367998
  %cont8360288 = call i64 @prim_car(i64 %rvp8363360)                                 ; call prim_car
  %rvp8363359 = call i64 @prim_cdr(i64 %rvp8363360)                                  ; call prim_cdr
  %v7t$f = call i64 @prim_car(i64 %rvp8363359)                                       ; call prim_car
  %rvp8363358 = call i64 @prim_cdr(i64 %rvp8363359)                                  ; call prim_cdr
  %xKv$acc = call i64 @prim_car(i64 %rvp8363358)                                     ; call prim_car
  %rvp8363357 = call i64 @prim_cdr(i64 %rvp8363358)                                  ; call prim_cdr
  %CRR$lst = call i64 @prim_car(i64 %rvp8363357)                                     ; call prim_car
  %na8363340 = call i64 @prim_cdr(i64 %rvp8363357)                                   ; call prim_cdr
  %a8359933 = call i64 @prim_null_63(i64 %CRR$lst)                                   ; call prim_null_63
  %cmp8367999 = icmp eq i64 %a8359933, 15                                            ; false?
  br i1 %cmp8367999, label %else8368001, label %then8368000                          ; if

then8368000:
  %arg8361735 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva8363343 = add i64 0, 0                                                         ; quoted ()
  %rva8363342 = call i64 @prim_cons(i64 %xKv$acc, i64 %rva8363343)                   ; call prim_cons
  %rva8363341 = call i64 @prim_cons(i64 %arg8361735, i64 %rva8363342)                ; call prim_cons
  %cloptr8368002 = inttoptr i64 %cont8360288 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8368003 = getelementptr inbounds i64, i64* %cloptr8368002, i64 0             ; &cloptr8368002[0]
  %f8368005 = load i64, i64* %i0ptr8368003, align 8                                  ; load; *i0ptr8368003
  %fptr8368004 = inttoptr i64 %f8368005 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8368004(i64 %cont8360288, i64 %rva8363341)          ; tail call
  ret void

else8368001:
  %a8359934 = call i64 @prim_car(i64 %CRR$lst)                                       ; call prim_car
  %a8359935 = call i64 @prim_cdr(i64 %CRR$lst)                                       ; call prim_cdr
  %cloptr8368006 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8368008 = getelementptr inbounds i64, i64* %cloptr8368006, i64 1              ; &eptr8368008[1]
  %eptr8368009 = getelementptr inbounds i64, i64* %cloptr8368006, i64 2              ; &eptr8368009[2]
  %eptr8368010 = getelementptr inbounds i64, i64* %cloptr8368006, i64 3              ; &eptr8368010[3]
  store i64 %v7t$f, i64* %eptr8368008                                                ; *eptr8368008 = %v7t$f
  store i64 %cont8360288, i64* %eptr8368009                                          ; *eptr8368009 = %cont8360288
  store i64 %a8359934, i64* %eptr8368010                                             ; *eptr8368010 = %a8359934
  %eptr8368007 = getelementptr inbounds i64, i64* %cloptr8368006, i64 0              ; &cloptr8368006[0]
  %f8368011 = ptrtoint void(i64,i64)* @lam8363424 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8368011, i64* %eptr8368007                                             ; store fptr
  %arg8361742 = ptrtoint i64* %cloptr8368006 to i64                                  ; closure cast; i64* -> i64
  %rva8363356 = add i64 0, 0                                                         ; quoted ()
  %rva8363355 = call i64 @prim_cons(i64 %a8359935, i64 %rva8363356)                  ; call prim_cons
  %rva8363354 = call i64 @prim_cons(i64 %xKv$acc, i64 %rva8363355)                   ; call prim_cons
  %rva8363353 = call i64 @prim_cons(i64 %v7t$f, i64 %rva8363354)                     ; call prim_cons
  %rva8363352 = call i64 @prim_cons(i64 %arg8361742, i64 %rva8363353)                ; call prim_cons
  %cloptr8368012 = inttoptr i64 %lUJ$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr8368013 = getelementptr inbounds i64, i64* %cloptr8368012, i64 0             ; &cloptr8368012[0]
  %f8368015 = load i64, i64* %i0ptr8368013, align 8                                  ; load; *i0ptr8368013
  %fptr8368014 = inttoptr i64 %f8368015 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8368014(i64 %lUJ$_37foldr1, i64 %rva8363352)        ; tail call
  ret void
}


define void @lam8363424(i64 %env8363425, i64 %rvp8363351) {
  %envptr8368016 = inttoptr i64 %env8363425 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368017 = getelementptr inbounds i64, i64* %envptr8368016, i64 3            ; &envptr8368016[3]
  %a8359934 = load i64, i64* %envptr8368017, align 8                                 ; load; *envptr8368017
  %envptr8368018 = inttoptr i64 %env8363425 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368019 = getelementptr inbounds i64, i64* %envptr8368018, i64 2            ; &envptr8368018[2]
  %cont8360288 = load i64, i64* %envptr8368019, align 8                              ; load; *envptr8368019
  %envptr8368020 = inttoptr i64 %env8363425 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368021 = getelementptr inbounds i64, i64* %envptr8368020, i64 1            ; &envptr8368020[1]
  %v7t$f = load i64, i64* %envptr8368021, align 8                                    ; load; *envptr8368021
  %_958360289 = call i64 @prim_car(i64 %rvp8363351)                                  ; call prim_car
  %rvp8363350 = call i64 @prim_cdr(i64 %rvp8363351)                                  ; call prim_cdr
  %a8359936 = call i64 @prim_car(i64 %rvp8363350)                                    ; call prim_car
  %na8363345 = call i64 @prim_cdr(i64 %rvp8363350)                                   ; call prim_cdr
  %rva8363349 = add i64 0, 0                                                         ; quoted ()
  %rva8363348 = call i64 @prim_cons(i64 %a8359936, i64 %rva8363349)                  ; call prim_cons
  %rva8363347 = call i64 @prim_cons(i64 %a8359934, i64 %rva8363348)                  ; call prim_cons
  %rva8363346 = call i64 @prim_cons(i64 %cont8360288, i64 %rva8363347)               ; call prim_cons
  %cloptr8368022 = inttoptr i64 %v7t$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8368023 = getelementptr inbounds i64, i64* %cloptr8368022, i64 0             ; &cloptr8368022[0]
  %f8368025 = load i64, i64* %i0ptr8368023, align 8                                  ; load; *i0ptr8368023
  %fptr8368024 = inttoptr i64 %f8368025 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8368024(i64 %v7t$f, i64 %rva8363346)                ; tail call
  ret void
}


define void @lam8363416(i64 %env8363417, i64 %rvp8363398) {
  %cont8360291 = call i64 @prim_car(i64 %rvp8363398)                                 ; call prim_car
  %rvp8363397 = call i64 @prim_cdr(i64 %rvp8363398)                                  ; call prim_cdr
  %GVF$y = call i64 @prim_car(i64 %rvp8363397)                                       ; call prim_car
  %na8363372 = call i64 @prim_cdr(i64 %rvp8363397)                                   ; call prim_cdr
  %arg8361749 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr8368026 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr8368028 = getelementptr inbounds i64, i64* %cloptr8368026, i64 1              ; &eptr8368028[1]
  store i64 %GVF$y, i64* %eptr8368028                                                ; *eptr8368028 = %GVF$y
  %eptr8368027 = getelementptr inbounds i64, i64* %cloptr8368026, i64 0              ; &cloptr8368026[0]
  %f8368029 = ptrtoint void(i64,i64)* @lam8363413 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8368029, i64* %eptr8368027                                             ; store fptr
  %arg8361748 = ptrtoint i64* %cloptr8368026 to i64                                  ; closure cast; i64* -> i64
  %rva8363396 = add i64 0, 0                                                         ; quoted ()
  %rva8363395 = call i64 @prim_cons(i64 %arg8361748, i64 %rva8363396)                ; call prim_cons
  %rva8363394 = call i64 @prim_cons(i64 %arg8361749, i64 %rva8363395)                ; call prim_cons
  %cloptr8368030 = inttoptr i64 %cont8360291 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr8368031 = getelementptr inbounds i64, i64* %cloptr8368030, i64 0             ; &cloptr8368030[0]
  %f8368033 = load i64, i64* %i0ptr8368031, align 8                                  ; load; *i0ptr8368031
  %fptr8368032 = inttoptr i64 %f8368033 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8368032(i64 %cont8360291, i64 %rva8363394)          ; tail call
  ret void
}


define void @lam8363413(i64 %env8363414, i64 %rvp8363393) {
  %envptr8368034 = inttoptr i64 %env8363414 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368035 = getelementptr inbounds i64, i64* %envptr8368034, i64 1            ; &envptr8368034[1]
  %GVF$y = load i64, i64* %envptr8368035, align 8                                    ; load; *envptr8368035
  %cont8360292 = call i64 @prim_car(i64 %rvp8363393)                                 ; call prim_car
  %rvp8363392 = call i64 @prim_cdr(i64 %rvp8363393)                                  ; call prim_cdr
  %dPB$f = call i64 @prim_car(i64 %rvp8363392)                                       ; call prim_car
  %na8363374 = call i64 @prim_cdr(i64 %rvp8363392)                                   ; call prim_cdr
  %cloptr8368036 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8368038 = getelementptr inbounds i64, i64* %cloptr8368036, i64 1              ; &eptr8368038[1]
  %eptr8368039 = getelementptr inbounds i64, i64* %cloptr8368036, i64 2              ; &eptr8368039[2]
  store i64 %GVF$y, i64* %eptr8368038                                                ; *eptr8368038 = %GVF$y
  store i64 %dPB$f, i64* %eptr8368039                                                ; *eptr8368039 = %dPB$f
  %eptr8368037 = getelementptr inbounds i64, i64* %cloptr8368036, i64 0              ; &cloptr8368036[0]
  %f8368040 = ptrtoint void(i64,i64)* @lam8363411 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8368040, i64* %eptr8368037                                             ; store fptr
  %arg8361751 = ptrtoint i64* %cloptr8368036 to i64                                  ; closure cast; i64* -> i64
  %rva8363391 = add i64 0, 0                                                         ; quoted ()
  %rva8363390 = call i64 @prim_cons(i64 %arg8361751, i64 %rva8363391)                ; call prim_cons
  %rva8363389 = call i64 @prim_cons(i64 %cont8360292, i64 %rva8363390)               ; call prim_cons
  %cloptr8368041 = inttoptr i64 %dPB$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8368042 = getelementptr inbounds i64, i64* %cloptr8368041, i64 0             ; &cloptr8368041[0]
  %f8368044 = load i64, i64* %i0ptr8368042, align 8                                  ; load; *i0ptr8368042
  %fptr8368043 = inttoptr i64 %f8368044 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8368043(i64 %dPB$f, i64 %rva8363389)                ; tail call
  ret void
}


define void @lam8363411(i64 %env8363412, i64 %vBp$args8360294) {
  %envptr8368045 = inttoptr i64 %env8363412 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368046 = getelementptr inbounds i64, i64* %envptr8368045, i64 2            ; &envptr8368045[2]
  %dPB$f = load i64, i64* %envptr8368046, align 8                                    ; load; *envptr8368046
  %envptr8368047 = inttoptr i64 %env8363412 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368048 = getelementptr inbounds i64, i64* %envptr8368047, i64 1            ; &envptr8368047[1]
  %GVF$y = load i64, i64* %envptr8368048, align 8                                    ; load; *envptr8368048
  %cont8360293 = call i64 @prim_car(i64 %vBp$args8360294)                            ; call prim_car
  %vBp$args = call i64 @prim_cdr(i64 %vBp$args8360294)                               ; call prim_cdr
  %cloptr8368049 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr8368051 = getelementptr inbounds i64, i64* %cloptr8368049, i64 1              ; &eptr8368051[1]
  %eptr8368052 = getelementptr inbounds i64, i64* %cloptr8368049, i64 2              ; &eptr8368052[2]
  %eptr8368053 = getelementptr inbounds i64, i64* %cloptr8368049, i64 3              ; &eptr8368053[3]
  store i64 %cont8360293, i64* %eptr8368051                                          ; *eptr8368051 = %cont8360293
  store i64 %vBp$args, i64* %eptr8368052                                             ; *eptr8368052 = %vBp$args
  store i64 %dPB$f, i64* %eptr8368053                                                ; *eptr8368053 = %dPB$f
  %eptr8368050 = getelementptr inbounds i64, i64* %cloptr8368049, i64 0              ; &cloptr8368049[0]
  %f8368054 = ptrtoint void(i64,i64)* @lam8363409 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8368054, i64* %eptr8368050                                             ; store fptr
  %arg8361757 = ptrtoint i64* %cloptr8368049 to i64                                  ; closure cast; i64* -> i64
  %rva8363388 = add i64 0, 0                                                         ; quoted ()
  %rva8363387 = call i64 @prim_cons(i64 %GVF$y, i64 %rva8363388)                     ; call prim_cons
  %rva8363386 = call i64 @prim_cons(i64 %arg8361757, i64 %rva8363387)                ; call prim_cons
  %cloptr8368055 = inttoptr i64 %GVF$y to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr8368056 = getelementptr inbounds i64, i64* %cloptr8368055, i64 0             ; &cloptr8368055[0]
  %f8368058 = load i64, i64* %i0ptr8368056, align 8                                  ; load; *i0ptr8368056
  %fptr8368057 = inttoptr i64 %f8368058 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8368057(i64 %GVF$y, i64 %rva8363386)                ; tail call
  ret void
}


define void @lam8363409(i64 %env8363410, i64 %rvp8363385) {
  %envptr8368059 = inttoptr i64 %env8363410 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368060 = getelementptr inbounds i64, i64* %envptr8368059, i64 3            ; &envptr8368059[3]
  %dPB$f = load i64, i64* %envptr8368060, align 8                                    ; load; *envptr8368060
  %envptr8368061 = inttoptr i64 %env8363410 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368062 = getelementptr inbounds i64, i64* %envptr8368061, i64 2            ; &envptr8368061[2]
  %vBp$args = load i64, i64* %envptr8368062, align 8                                 ; load; *envptr8368062
  %envptr8368063 = inttoptr i64 %env8363410 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368064 = getelementptr inbounds i64, i64* %envptr8368063, i64 1            ; &envptr8368063[1]
  %cont8360293 = load i64, i64* %envptr8368064, align 8                              ; load; *envptr8368064
  %_958360295 = call i64 @prim_car(i64 %rvp8363385)                                  ; call prim_car
  %rvp8363384 = call i64 @prim_cdr(i64 %rvp8363385)                                  ; call prim_cdr
  %a8359931 = call i64 @prim_car(i64 %rvp8363384)                                    ; call prim_car
  %na8363376 = call i64 @prim_cdr(i64 %rvp8363384)                                   ; call prim_cdr
  %cloptr8368065 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr8368067 = getelementptr inbounds i64, i64* %cloptr8368065, i64 1              ; &eptr8368067[1]
  %eptr8368068 = getelementptr inbounds i64, i64* %cloptr8368065, i64 2              ; &eptr8368068[2]
  store i64 %cont8360293, i64* %eptr8368067                                          ; *eptr8368067 = %cont8360293
  store i64 %vBp$args, i64* %eptr8368068                                             ; *eptr8368068 = %vBp$args
  %eptr8368066 = getelementptr inbounds i64, i64* %cloptr8368065, i64 0              ; &cloptr8368065[0]
  %f8368069 = ptrtoint void(i64,i64)* @lam8363407 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f8368069, i64* %eptr8368066                                             ; store fptr
  %arg8361760 = ptrtoint i64* %cloptr8368065 to i64                                  ; closure cast; i64* -> i64
  %rva8363383 = add i64 0, 0                                                         ; quoted ()
  %rva8363382 = call i64 @prim_cons(i64 %dPB$f, i64 %rva8363383)                     ; call prim_cons
  %rva8363381 = call i64 @prim_cons(i64 %arg8361760, i64 %rva8363382)                ; call prim_cons
  %cloptr8368070 = inttoptr i64 %a8359931 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8368071 = getelementptr inbounds i64, i64* %cloptr8368070, i64 0             ; &cloptr8368070[0]
  %f8368073 = load i64, i64* %i0ptr8368071, align 8                                  ; load; *i0ptr8368071
  %fptr8368072 = inttoptr i64 %f8368073 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8368072(i64 %a8359931, i64 %rva8363381)             ; tail call
  ret void
}


define void @lam8363407(i64 %env8363408, i64 %rvp8363380) {
  %envptr8368074 = inttoptr i64 %env8363408 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368075 = getelementptr inbounds i64, i64* %envptr8368074, i64 2            ; &envptr8368074[2]
  %vBp$args = load i64, i64* %envptr8368075, align 8                                 ; load; *envptr8368075
  %envptr8368076 = inttoptr i64 %env8363408 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr8368077 = getelementptr inbounds i64, i64* %envptr8368076, i64 1            ; &envptr8368076[1]
  %cont8360293 = load i64, i64* %envptr8368077, align 8                              ; load; *envptr8368077
  %_958360296 = call i64 @prim_car(i64 %rvp8363380)                                  ; call prim_car
  %rvp8363379 = call i64 @prim_cdr(i64 %rvp8363380)                                  ; call prim_cdr
  %a8359932 = call i64 @prim_car(i64 %rvp8363379)                                    ; call prim_car
  %na8363378 = call i64 @prim_cdr(i64 %rvp8363379)                                   ; call prim_cdr
  %cps_45lst8360297 = call i64 @prim_cons(i64 %cont8360293, i64 %vBp$args)           ; call prim_cons
  %cloptr8368078 = inttoptr i64 %a8359932 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr8368079 = getelementptr inbounds i64, i64* %cloptr8368078, i64 0             ; &cloptr8368078[0]
  %f8368081 = load i64, i64* %i0ptr8368079, align 8                                  ; load; *i0ptr8368079
  %fptr8368080 = inttoptr i64 %f8368081 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr8368080(i64 %a8359932, i64 %cps_45lst8360297)       ; tail call
  ret void
}





@sym8365449 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8365470 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8365712 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8365798 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8365852 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8365876 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8365894 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8365965 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8365992 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366026 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366076 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366173 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366200 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366234 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366284 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366386 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366440 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366464 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366482 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366553 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366580 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366614 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366664 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366761 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366788 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366822 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366872 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366920 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8366975 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8367020 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8367080 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8367148 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8367193 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym8367253 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
