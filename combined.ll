; ModuleID = 'header.cpp'
source_filename = "header.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

%class.hamt = type { [7 x %class.KV], i64 }
%class.KV = type { %"union.KV<c_d, c_d, 0>::Key", %"union.KV<c_d, c_d, 0>::Val" }
%"union.KV<c_d, c_d, 0>::Key" = type { i64 }
%"union.KV<c_d, c_d, 0>::Val" = type { %class.KV.0* }
%class.KV.0 = type { %"union.KV<c_d, c_d, 1>::Key", %"union.KV<c_d, c_d, 1>::Val" }
%"union.KV<c_d, c_d, 1>::Key" = type { i64 }
%"union.KV<c_d, c_d, 1>::Val" = type { %class.KV.2* }
%class.KV.2 = type { %"union.KV<c_d, c_d, 2>::Key", %"union.KV<c_d, c_d, 2>::Val" }
%"union.KV<c_d, c_d, 2>::Key" = type { i64 }
%"union.KV<c_d, c_d, 2>::Val" = type { %class.KV.3* }
%class.KV.3 = type { %"union.KV<c_d, c_d, 3>::Key", %"union.KV<c_d, c_d, 3>::Val" }
%"union.KV<c_d, c_d, 3>::Key" = type { i64 }
%"union.KV<c_d, c_d, 3>::Val" = type { %class.KV.4* }
%class.KV.4 = type { %"union.KV<c_d, c_d, 4>::Key", %"union.KV<c_d, c_d, 4>::Val" }
%"union.KV<c_d, c_d, 4>::Key" = type { i64 }
%"union.KV<c_d, c_d, 4>::Val" = type { %class.KV.5* }
%class.KV.5 = type { %"union.KV<c_d, c_d, 5>::Key", %"union.KV<c_d, c_d, 5>::Val" }
%"union.KV<c_d, c_d, 5>::Key" = type { i64 }
%"union.KV<c_d, c_d, 5>::Val" = type { %class.KV.6* }
%class.KV.6 = type { %"union.KV<c_d, c_d, 6>::Key", %"union.KV<c_d, c_d, 6>::Val" }
%"union.KV<c_d, c_d, 6>::Key" = type { i64 }
%"union.KV<c_d, c_d, 6>::Val" = type { %class.KV.7* }
%class.KV.7 = type { %"union.KV<c_d, c_d, 7>::Key", %"union.KV<c_d, c_d, 7>::Val" }
%"union.KV<c_d, c_d, 7>::Key" = type { i64 }
%"union.KV<c_d, c_d, 7>::Val" = type { %class.KV.8* }
%class.KV.8 = type { %"union.KV<c_d, c_d, 8>::Key", %"union.KV<c_d, c_d, 8>::Val" }
%"union.KV<c_d, c_d, 8>::Key" = type { i64 }
%"union.KV<c_d, c_d, 8>::Val" = type { %class.KV.9* }
%class.KV.9 = type { %"union.KV<c_d, c_d, 9>::Key", %"union.KV<c_d, c_d, 9>::Val" }
%"union.KV<c_d, c_d, 9>::Key" = type { i64 }
%"union.KV<c_d, c_d, 9>::Val" = type { %class.KV.10* }
%class.KV.10 = type { %"union.KV<c_d, c_d, 10>::Key", %"union.KV<c_d, c_d, 10>::Val" }
%"union.KV<c_d, c_d, 10>::Key" = type { i64 }
%"union.KV<c_d, c_d, 10>::Val" = type { %class.LL* }
%class.LL = type { %class.c_d*, %class.c_d*, %class.LL* }
%class.c_d = type { i64 }
%class.hamt.1 = type opaque

@current_memory = global i64 0, align 8
@.str = private unnamed_addr constant [25 x i8] c"library run-time error: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"Ran out of memory.\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%llu\0A\00", align 1
@.str.5 = private unnamed_addr constant [68 x i8] c"Expected value: null (in expect_args0). Prim cannot take arguments.\00", align 1
@.str.6 = private unnamed_addr constant [79 x i8] c"Expected cons value (in expect_args1). Prim applied on an empty argument list.\00", align 1
@.str.7 = private unnamed_addr constant [70 x i8] c"Expected null value (in expect_args1). Prim can only take 1 argument.\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"Expected a cons value. (expect_cons)\00", align 1
@.str.9 = private unnamed_addr constant [51 x i8] c"Expected a vector or special value. (expect_other)\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"#<procedure>\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c" . \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"\22%s\22\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"#(\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.19 = private unnamed_addr constant [37 x i8] c"(print.. v); unrecognized value %llu\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"'()\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"'(\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"'%s\00", align 1
@.str.23 = private unnamed_addr constant [35 x i8] c"(print v); unrecognized value %llu\00", align 1
@.str.24 = private unnamed_addr constant [49 x i8] c"first argument to make-vector must be an integer\00", align 1
@.str.25 = private unnamed_addr constant [39 x i8] c"prim applied on more than 2 arguments.\00", align 1
@.str.26 = private unnamed_addr constant [49 x i8] c"second argument to vector-ref must be an integer\00", align 1
@.str.27 = private unnamed_addr constant [46 x i8] c"first argument to vector-ref must be a vector\00", align 1
@.str.28 = private unnamed_addr constant [46 x i8] c"vector-ref not given a properly formed vector\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"index out of bounds exception\00", align 1
@.str.30 = private unnamed_addr constant [48 x i8] c"first argument to vector-ref must be an integer\00", align 1
@.str.31 = private unnamed_addr constant [34 x i8] c"(prim + a b); a is not an integer\00", align 1
@.str.32 = private unnamed_addr constant [34 x i8] c"(prim + a b); b is not an integer\00", align 1
@.str.33 = private unnamed_addr constant [36 x i8] c"Tried to apply + on non list value.\00", align 1
@.str.34 = private unnamed_addr constant [34 x i8] c"(prim - a b); b is not an integer\00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"(prim * a b); a is not an integer\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"(prim * a b); b is not an integer\00", align 1
@.str.37 = private unnamed_addr constant [34 x i8] c"(prim / a b); a is not an integer\00", align 1
@.str.38 = private unnamed_addr constant [34 x i8] c"(prim / a b); b is not an integer\00", align 1
@.str.39 = private unnamed_addr constant [34 x i8] c"(prim = a b); a is not an integer\00", align 1
@.str.40 = private unnamed_addr constant [34 x i8] c"(prim = a b); b is not an integer\00", align 1
@.str.41 = private unnamed_addr constant [34 x i8] c"(prim < a b); a is not an integer\00", align 1
@.str.42 = private unnamed_addr constant [34 x i8] c"(prim < a b); b is not an integer\00", align 1
@.str.43 = private unnamed_addr constant [35 x i8] c"(prim <= a b); a is not an integer\00", align 1
@.str.44 = private unnamed_addr constant [35 x i8] c"(prim <= a b); b is not an integer\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"key does not exist in hash\00", align 1

; Function Attrs: ssp uwtable
define void @fatal_err(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  %4 = load i8*, i8** %2, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %4)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable
                                                  ; No predecessors!
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

; Function Attrs: ssp uwtable
define i64* @alloc(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* @current_memory, align 8
  %4 = load i64, i64* %2, align 8
  %5 = add i64 %3, %4
  store i64 %5, i64* @current_memory, align 8
  %6 = load i64, i64* @current_memory, align 8
  %7 = icmp ugt i64 %6, 250000000
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %1
  %10 = load i64, i64* %2, align 8
  %11 = call i8* @malloc(i64 %10)
  %12 = bitcast i8* %11 to i64*
  ret i64* %12
}

declare i8* @malloc(i64) #1

; Function Attrs: ssp uwtable
define void @print_u64(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i64 %3)
  ret void
}

; Function Attrs: ssp uwtable
define i64 @expect_args0(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.5, i32 0, i32 0))
  br label %6

; <label>:6                                       ; preds = %5, %1
  ret i64 0
}

; Function Attrs: ssp uwtable
define i64 @expect_args1(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = and i64 %4, 7
  %6 = icmp ne i64 %5, 1
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.6, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %1
  %9 = load i64, i64* %2, align 8
  %10 = and i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64* %11, i64** %3, align 8
  %12 = load i64*, i64** %3, align 8
  %13 = getelementptr inbounds i64, i64* %12, i64 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %16, label %17

; <label>:16                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7, i32 0, i32 0))
  br label %17

; <label>:17                                      ; preds = %16, %8
  %18 = load i64*, i64** %3, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: ssp uwtable
define i64 @expect_cons(i64, i64*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 1
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64* %13, i64** %5, align 8
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load i64*, i64** %4, align 8
  store i64 %16, i64* %17, align 8
  %18 = load i64*, i64** %5, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: ssp uwtable
define i64 @expect_other(i64, i64*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 6
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.9, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64* %13, i64** %5, align 8
  %14 = load i64*, i64** %5, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 1
  %16 = load i64, i64* %15, align 8
  %17 = load i64*, i64** %4, align 8
  store i64 %16, i64* %17, align 8
  %18 = load i64*, i64** %5, align 8
  %19 = getelementptr inbounds i64, i64* %18, i64 0
  %20 = load i64, i64* %19, align 8
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_int(i64) #3 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = trunc i64 %3 to i32
  %5 = zext i32 %4 to i64
  %6 = shl i64 %5, 32
  %7 = or i64 %6, 2
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_void() #3 {
  ret i64 39
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_null() #3 {
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_true() #3 {
  ret i64 31
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_false() #3 {
  ret i64 15
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_string(i8*) #3 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = or i64 %4, 3
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define i64 @const_init_symbol(i8*) #3 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = ptrtoint i8* %3 to i64
  %5 = or i64 %4, 4
  ret i64 %5
}

; Function Attrs: ssp uwtable
define i64 @prim_print_aux(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %113

; <label>:11                                      ; preds = %1
  %12 = load i64, i64* %2, align 8
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %11
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0))
  br label %112

; <label>:17                                      ; preds = %11
  %18 = load i64, i64* %2, align 8
  %19 = and i64 %18, 7
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %21, label %36

; <label>:21                                      ; preds = %17
  %22 = load i64, i64* %2, align 8
  %23 = and i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64* %24, i64** %3, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  %26 = load i64*, i64** %3, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 0
  %28 = load i64, i64* %27, align 8
  %29 = call i64 @prim_print_aux(i64 %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  %31 = load i64*, i64** %3, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = call i64 @prim_print_aux(i64 %33)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %111

; <label>:36                                      ; preds = %17
  %37 = load i64, i64* %2, align 8
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 2
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %36
  %41 = load i64, i64* %2, align 8
  %42 = lshr i64 %41, 32
  %43 = trunc i64 %42 to i32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 %43)
  br label %110

; <label>:45                                      ; preds = %36
  %46 = load i64, i64* %2, align 8
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 3
  br i1 %48, label %49, label %54

; <label>:49                                      ; preds = %45
  %50 = load i64, i64* %2, align 8
  %51 = and i64 %50, -8
  %52 = inttoptr i64 %51 to i8*
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* %52)
  br label %109

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %2, align 8
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 4
  br i1 %57, label %58, label %63

; <label>:58                                      ; preds = %54
  %59 = load i64, i64* %2, align 8
  %60 = and i64 %59, -8
  %61 = inttoptr i64 %60 to i8*
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %61)
  br label %108

; <label>:63                                      ; preds = %54
  %64 = load i64, i64* %2, align 8
  %65 = and i64 %64, 7
  %66 = icmp eq i64 %65, 6
  br i1 %66, label %67, label %104

; <label>:67                                      ; preds = %63
  %68 = load i64, i64* %2, align 8
  %69 = and i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  %71 = getelementptr inbounds i64, i64* %70, i64 0
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 7
  %74 = icmp eq i64 1, %73
  br i1 %74, label %75, label %104

; <label>:75                                      ; preds = %67
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  %77 = load i64, i64* %2, align 8
  %78 = and i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64* %79, i64** %4, align 8
  %80 = load i64*, i64** %4, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 0
  %82 = load i64, i64* %81, align 8
  %83 = lshr i64 %82, 3
  store i64 %83, i64* %5, align 8
  %84 = load i64*, i64** %4, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 1
  %86 = load i64, i64* %85, align 8
  %87 = call i64 @prim_print_aux(i64 %86)
  store i64 2, i64* %6, align 8
  br label %88

; <label>:88                                      ; preds = %99, %75
  %89 = load i64, i64* %6, align 8
  %90 = load i64, i64* %5, align 8
  %91 = icmp ule i64 %89, %90
  br i1 %91, label %92, label %102

; <label>:92                                      ; preds = %88
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  %94 = load i64, i64* %6, align 8
  %95 = load i64*, i64** %4, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 %94
  %97 = load i64, i64* %96, align 8
  %98 = call i64 @prim_print_aux(i64 %97)
  br label %99

; <label>:99                                      ; preds = %92
  %100 = load i64, i64* %6, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %6, align 8
  br label %88

; <label>:102                                     ; preds = %88
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %107

; <label>:104                                     ; preds = %67, %63
  %105 = load i64, i64* %2, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.19, i32 0, i32 0), i64 %105)
  br label %107

; <label>:107                                     ; preds = %104, %102
  br label %108

; <label>:108                                     ; preds = %107, %58
  br label %109

; <label>:109                                     ; preds = %108, %49
  br label %110

; <label>:110                                     ; preds = %109, %40
  br label %111

; <label>:111                                     ; preds = %110, %21
  br label %112

; <label>:112                                     ; preds = %111, %15
  br label %113

; <label>:113                                     ; preds = %112, %9
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @prim_print(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %1
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0))
  br label %113

; <label>:11                                      ; preds = %1
  %12 = load i64, i64* %2, align 8
  %13 = and i64 %12, 7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %11
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0))
  br label %112

; <label>:17                                      ; preds = %11
  %18 = load i64, i64* %2, align 8
  %19 = and i64 %18, 7
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %21, label %36

; <label>:21                                      ; preds = %17
  %22 = load i64, i64* %2, align 8
  %23 = and i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64* %24, i64** %3, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0))
  %26 = load i64*, i64** %3, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 0
  %28 = load i64, i64* %27, align 8
  %29 = call i64 @prim_print_aux(i64 %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0))
  %31 = load i64*, i64** %3, align 8
  %32 = getelementptr inbounds i64, i64* %31, i64 1
  %33 = load i64, i64* %32, align 8
  %34 = call i64 @prim_print_aux(i64 %33)
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %111

; <label>:36                                      ; preds = %17
  %37 = load i64, i64* %2, align 8
  %38 = and i64 %37, 7
  %39 = icmp eq i64 %38, 2
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %36
  %41 = load i64, i64* %2, align 8
  %42 = lshr i64 %41, 32
  %43 = trunc i64 %42 to i32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 %43)
  br label %110

; <label>:45                                      ; preds = %36
  %46 = load i64, i64* %2, align 8
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 3
  br i1 %48, label %49, label %54

; <label>:49                                      ; preds = %45
  %50 = load i64, i64* %2, align 8
  %51 = and i64 %50, -8
  %52 = inttoptr i64 %51 to i8*
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* %52)
  br label %109

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %2, align 8
  %56 = and i64 %55, 7
  %57 = icmp eq i64 %56, 4
  br i1 %57, label %58, label %63

; <label>:58                                      ; preds = %54
  %59 = load i64, i64* %2, align 8
  %60 = and i64 %59, -8
  %61 = inttoptr i64 %60 to i8*
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), i8* %61)
  br label %108

; <label>:63                                      ; preds = %54
  %64 = load i64, i64* %2, align 8
  %65 = and i64 %64, 7
  %66 = icmp eq i64 %65, 6
  br i1 %66, label %67, label %104

; <label>:67                                      ; preds = %63
  %68 = load i64, i64* %2, align 8
  %69 = and i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  %71 = getelementptr inbounds i64, i64* %70, i64 0
  %72 = load i64, i64* %71, align 8
  %73 = and i64 %72, 7
  %74 = icmp eq i64 1, %73
  br i1 %74, label %75, label %104

; <label>:75                                      ; preds = %67
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0))
  %77 = load i64, i64* %2, align 8
  %78 = and i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64* %79, i64** %4, align 8
  %80 = load i64*, i64** %4, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 0
  %82 = load i64, i64* %81, align 8
  %83 = lshr i64 %82, 3
  store i64 %83, i64* %5, align 8
  %84 = load i64*, i64** %4, align 8
  %85 = getelementptr inbounds i64, i64* %84, i64 1
  %86 = load i64, i64* %85, align 8
  %87 = call i64 @prim_print(i64 %86)
  store i64 2, i64* %6, align 8
  br label %88

; <label>:88                                      ; preds = %99, %75
  %89 = load i64, i64* %6, align 8
  %90 = load i64, i64* %5, align 8
  %91 = icmp ule i64 %89, %90
  br i1 %91, label %92, label %102

; <label>:92                                      ; preds = %88
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  %94 = load i64, i64* %6, align 8
  %95 = load i64*, i64** %4, align 8
  %96 = getelementptr inbounds i64, i64* %95, i64 %94
  %97 = load i64, i64* %96, align 8
  %98 = call i64 @prim_print(i64 %97)
  br label %99

; <label>:99                                      ; preds = %92
  %100 = load i64, i64* %6, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %6, align 8
  br label %88

; <label>:102                                     ; preds = %88
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0))
  br label %107

; <label>:104                                     ; preds = %67, %63
  %105 = load i64, i64* %2, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.23, i32 0, i32 0), i64 %105)
  br label %107

; <label>:107                                     ; preds = %104, %102
  br label %108

; <label>:108                                     ; preds = %107, %58
  br label %109

; <label>:109                                     ; preds = %108, %49
  br label %110

; <label>:110                                     ; preds = %109, %40
  br label %111

; <label>:111                                     ; preds = %110, %21
  br label %112

; <label>:112                                     ; preds = %111, %15
  br label %113

; <label>:113                                     ; preds = %112, %9
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @applyprim_print(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_print(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_halt(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = call i64 @prim_print(i64 %4)
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 0) #7
  unreachable
                                                  ; No predecessors!
  %8 = load i64, i64* %2, align 8
  ret i64 %8
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 4096
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = icmp ugt i64 %9, 250000000
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %12

; <label>:12                                      ; preds = %11, %1
  %13 = call i8* @malloc(i64 4096)
  %14 = bitcast i8* %13 to i64*
  store i64* %14, i64** %3, align 8
  store i64 0, i64* %4, align 8
  br label %15

; <label>:15                                      ; preds = %24, %12
  %16 = load i64, i64* %2, align 8
  %17 = and i64 %16, 7
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %15
  %20 = load i64, i64* %4, align 8
  %21 = icmp ult i64 %20, 512
  br label %22

; <label>:22                                      ; preds = %19, %15
  %23 = phi i1 [ false, %15 ], [ %21, %19 ]
  br i1 %23, label %24, label %31

; <label>:24                                      ; preds = %22
  %25 = load i64, i64* %2, align 8
  %26 = call i64 @expect_cons(i64 %25, i64* %2)
  %27 = load i64, i64* %4, align 8
  %28 = add i64 %27, 1
  store i64 %28, i64* %4, align 8
  %29 = load i64*, i64** %3, align 8
  %30 = getelementptr inbounds i64, i64* %29, i64 %27
  store i64 %26, i64* %30, align 8
  br label %15

; <label>:31                                      ; preds = %22
  %32 = load i64, i64* %4, align 8
  %33 = add i64 %32, 1
  %34 = mul i64 %33, 8
  %35 = call i64* @alloc(i64 %34)
  store i64* %35, i64** %5, align 8
  %36 = load i64, i64* %4, align 8
  %37 = shl i64 %36, 3
  %38 = or i64 %37, 1
  %39 = load i64*, i64** %5, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 0
  store i64 %38, i64* %40, align 8
  store i64 0, i64* %6, align 8
  br label %41

; <label>:41                                      ; preds = %54, %31
  %42 = load i64, i64* %6, align 8
  %43 = load i64, i64* %4, align 8
  %44 = icmp ult i64 %42, %43
  br i1 %44, label %45, label %57

; <label>:45                                      ; preds = %41
  %46 = load i64, i64* %6, align 8
  %47 = load i64*, i64** %3, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 %46
  %49 = load i64, i64* %48, align 8
  %50 = load i64, i64* %6, align 8
  %51 = add i64 %50, 1
  %52 = load i64*, i64** %5, align 8
  %53 = getelementptr inbounds i64, i64* %52, i64 %51
  store i64 %49, i64* %53, align 8
  br label %54

; <label>:54                                      ; preds = %45
  %55 = load i64, i64* %6, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %6, align 8
  br label %41

; <label>:57                                      ; preds = %41
  %58 = load i64*, i64** %3, align 8
  %59 = icmp eq i64* %58, null
  br i1 %59, label %62, label %60

; <label>:60                                      ; preds = %57
  %61 = bitcast i64* %58 to i8*
  call void @_ZdaPv(i8* %61) #8
  br label %62

; <label>:62                                      ; preds = %60, %57
  %63 = load i64*, i64** %5, align 8
  %64 = ptrtoint i64* %63 to i64
  %65 = or i64 %64, 6
  ret i64 %65
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #4

; Function Attrs: ssp uwtable
define i64 @prim_make_45vector(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = and i64 %8, 7
  %10 = icmp ne i64 %9, 2
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.24, i32 0, i32 0))
  br label %12

; <label>:12                                      ; preds = %11, %2
  %13 = load i64, i64* %3, align 8
  %14 = and i64 %13, -8
  %15 = lshr i64 %14, 32
  %16 = trunc i64 %15 to i32
  %17 = sext i32 %16 to i64
  store i64 %17, i64* %5, align 8
  %18 = load i64, i64* %5, align 8
  %19 = add i64 %18, 1
  %20 = mul i64 %19, 8
  %21 = call i64* @alloc(i64 %20)
  store i64* %21, i64** %6, align 8
  %22 = load i64, i64* %5, align 8
  %23 = shl i64 %22, 3
  %24 = or i64 %23, 1
  %25 = load i64*, i64** %6, align 8
  %26 = getelementptr inbounds i64, i64* %25, i64 0
  store i64 %24, i64* %26, align 8
  store i64 1, i64* %7, align 8
  br label %27

; <label>:27                                      ; preds = %36, %12
  %28 = load i64, i64* %7, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp ule i64 %28, %29
  br i1 %30, label %31, label %39

; <label>:31                                      ; preds = %27
  %32 = load i64, i64* %4, align 8
  %33 = load i64, i64* %7, align 8
  %34 = load i64*, i64** %6, align 8
  %35 = getelementptr inbounds i64, i64* %34, i64 %33
  store i64 %32, i64* %35, align 8
  br label %36

; <label>:36                                      ; preds = %31
  %37 = load i64, i64* %7, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %7, align 8
  br label %27

; <label>:39                                      ; preds = %27
  %40 = load i64*, i64** %6, align 8
  %41 = ptrtoint i64* %40 to i64
  %42 = or i64 %41, 6
  ret i64 %42
}

; Function Attrs: ssp uwtable
define i64 @applyprim_make_45vector(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_make_45vector(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_vector_45ref(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.26, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %3, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 6
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.27, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 7
  %21 = icmp ne i64 %20, 1
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %14
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.28, i32 0, i32 0))
  br label %23

; <label>:23                                      ; preds = %22, %14
  %24 = load i64, i64* %4, align 8
  %25 = and i64 %24, -8
  %26 = lshr i64 %25, 32
  %27 = trunc i64 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = load i64, i64* %3, align 8
  %30 = and i64 %29, -8
  %31 = inttoptr i64 %30 to i64*
  %32 = getelementptr inbounds i64, i64* %31, i64 0
  %33 = load i64, i64* %32, align 8
  %34 = lshr i64 %33, 3
  %35 = icmp uge i64 %28, %34
  br i1 %35, label %36, label %37

; <label>:36                                      ; preds = %23
  call void @fatal_err(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i32 0, i32 0))
  br label %37

; <label>:37                                      ; preds = %36, %23
  %38 = load i64, i64* %4, align 8
  %39 = and i64 %38, -8
  %40 = lshr i64 %39, 32
  %41 = trunc i64 %40 to i32
  %42 = add nsw i32 1, %41
  %43 = sext i32 %42 to i64
  %44 = load i64, i64* %3, align 8
  %45 = and i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  %47 = getelementptr inbounds i64, i64* %46, i64 %43
  %48 = load i64, i64* %47, align 8
  ret i64 %48
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector_45ref(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_vector_45ref(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_vector_45set_33(i64, i64, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = and i64 %7, 7
  %9 = icmp ne i64 %8, 2
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %3
  call void @fatal_err(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.26, i32 0, i32 0))
  br label %11

; <label>:11                                      ; preds = %10, %3
  %12 = load i64, i64* %4, align 8
  %13 = and i64 %12, 7
  %14 = icmp ne i64 %13, 6
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %11
  call void @fatal_err(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.30, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %11
  %17 = load i64, i64* %4, align 8
  %18 = and i64 %17, -8
  %19 = inttoptr i64 %18 to i64*
  %20 = getelementptr inbounds i64, i64* %19, i64 0
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, 7
  %23 = icmp ne i64 %22, 1
  br i1 %23, label %24, label %25

; <label>:24                                      ; preds = %16
  call void @fatal_err(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.28, i32 0, i32 0))
  br label %25

; <label>:25                                      ; preds = %24, %16
  %26 = load i64, i64* %5, align 8
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = load i64, i64* %4, align 8
  %32 = and i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = lshr i64 %35, 3
  %37 = icmp uge i64 %30, %36
  br i1 %37, label %38, label %39

; <label>:38                                      ; preds = %25
  call void @fatal_err(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i32 0, i32 0))
  br label %39

; <label>:39                                      ; preds = %38, %25
  %40 = load i64, i64* %6, align 8
  %41 = load i64, i64* %5, align 8
  %42 = and i64 %41, -8
  %43 = lshr i64 %42, 32
  %44 = trunc i64 %43 to i32
  %45 = add nsw i32 1, %44
  %46 = sext i32 %45 to i64
  %47 = load i64, i64* %4, align 8
  %48 = and i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  %50 = getelementptr inbounds i64, i64* %49, i64 %46
  store i64 %40, i64* %50, align 8
  ret i64 39
}

; Function Attrs: ssp uwtable
define i64 @applyprim_vector_45set_33(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = call i64 @expect_cons(i64 %7, i64* %3)
  store i64 %8, i64* %4, align 8
  %9 = load i64, i64* %3, align 8
  %10 = call i64 @expect_cons(i64 %9, i64* %3)
  store i64 %10, i64* %5, align 8
  %11 = load i64, i64* %3, align 8
  %12 = call i64 @expect_cons(i64 %11, i64* %3)
  store i64 %12, i64* %6, align 8
  %13 = load i64, i64* %3, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %1
  %17 = load i64, i64* %4, align 8
  %18 = load i64, i64* %5, align 8
  %19 = load i64, i64* %6, align 8
  %20 = call i64 @prim_vector_45set_33(i64 %17, i64 %18, i64 %19)
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_void() #3 {
  ret i64 39
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_eq_63(i64, i64) #3 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  store i64 31, i64* %3, align 8
  br label %11

; <label>:10                                      ; preds = %2
  store i64 15, i64* %3, align 8
  br label %11

; <label>:11                                      ; preds = %10, %9
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: ssp uwtable
define i64 @applyprim_eq_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_eq_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_eqv_63(i64, i64) #3 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %6, %7
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  store i64 31, i64* %3, align 8
  br label %11

; <label>:10                                      ; preds = %2
  store i64 15, i64* %3, align 8
  br label %11

; <label>:11                                      ; preds = %10, %9
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: ssp uwtable
define i64 @applyprim_eqv_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_eqv_63(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_number_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_number_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_number_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_integer_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 2
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_integer_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_integer_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_void_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 39
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_void_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_void_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_procedure_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_procedure_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_procedure_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_null_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_null_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_null_63(i64 %6)
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_cons_63(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, 7
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %9

; <label>:8                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %9

; <label>:9                                       ; preds = %8, %7
  %10 = load i64, i64* %2, align 8
  ret i64 %10
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cons_63(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_cons_63(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_cons(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = call i64* @alloc(i64 16)
  store i64* %6, i64** %5, align 8
  %7 = load i64, i64* %3, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = getelementptr inbounds i64, i64* %8, i64 0
  store i64 %7, i64* %9, align 8
  %10 = load i64, i64* %4, align 8
  %11 = load i64*, i64** %5, align 8
  %12 = getelementptr inbounds i64, i64* %11, i64 1
  store i64 %10, i64* %12, align 8
  %13 = load i64*, i64** %5, align 8
  %14 = ptrtoint i64* %13 to i64
  %15 = or i64 %14, 1
  ret i64 %15
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cons(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @expect_cons(i64 %6, i64* %3)
  store i64 %7, i64* %4, align 8
  %8 = load i64, i64* %3, align 8
  %9 = call i64 @expect_cons(i64 %8, i64* %3)
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %1
  call void @fatal_err(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.25, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %1
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i64 @prim_cons(i64 %14, i64 %15)
  ret i64 %16
}

; Function Attrs: ssp uwtable
define i64 @prim_car(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = call i64 @expect_cons(i64 %5, i64* %3)
  store i64 %6, i64* %4, align 8
  %7 = load i64, i64* %4, align 8
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @applyprim_car(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_car(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_cdr(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = call i64 @expect_cons(i64 %5, i64* %3)
  store i64 %6, i64* %4, align 8
  %7 = load i64, i64* %3, align 8
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @applyprim_cdr(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_cdr(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim__43(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.31, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.32, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = add nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__43(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 2, i64* %2, align 8
  br label %34

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = load i64*, i64** %4, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @applyprim__43(i64 %25)
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = add nsw i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 32
  %33 = or i64 %32, 2
  store i64 %33, i64* %2, align 8
  br label %34

; <label>:34                                      ; preds = %13, %7
  %35 = load i64, i64* %2, align 8
  ret i64 %35
}

; Function Attrs: ssp uwtable
define i64 @prim__45(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.31, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.34, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = sub nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__45(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 2, i64* %2, align 8
  br label %50

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %32

; <label>:21                                      ; preds = %13
  %22 = load i64*, i64** %4, align 8
  %23 = getelementptr inbounds i64, i64* %22, i64 0
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, -8
  %26 = lshr i64 %25, 32
  %27 = trunc i64 %26 to i32
  %28 = sub nsw i32 0, %27
  %29 = zext i32 %28 to i64
  %30 = shl i64 %29, 32
  %31 = or i64 %30, 2
  store i64 %31, i64* %2, align 8
  br label %50

; <label>:32                                      ; preds = %13
  %33 = load i64*, i64** %4, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = and i64 %35, -8
  %37 = lshr i64 %36, 32
  %38 = trunc i64 %37 to i32
  %39 = load i64*, i64** %4, align 8
  %40 = getelementptr inbounds i64, i64* %39, i64 1
  %41 = load i64, i64* %40, align 8
  %42 = call i64 @applyprim__43(i64 %41)
  %43 = and i64 %42, -8
  %44 = lshr i64 %43, 32
  %45 = trunc i64 %44 to i32
  %46 = sub nsw i32 %38, %45
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 32
  %49 = or i64 %48, 2
  store i64 %49, i64* %2, align 8
  br label %50

; <label>:50                                      ; preds = %32, %21, %7
  %51 = load i64, i64* %2, align 8
  ret i64 %51
}

; Function Attrs: ssp uwtable
define i64 @prim__42(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = mul nsw i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @applyprim__42(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  store i64 %0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %1
  store i64 4294967298, i64* %2, align 8
  br label %34

; <label>:8                                       ; preds = %1
  %9 = load i64, i64* %3, align 8
  %10 = and i64 %9, 7
  %11 = icmp ne i64 %10, 1
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %8
  call void @fatal_err(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %8
  %14 = load i64, i64* %3, align 8
  %15 = and i64 %14, -8
  %16 = inttoptr i64 %15 to i64*
  store i64* %16, i64** %4, align 8
  %17 = load i64*, i64** %4, align 8
  %18 = getelementptr inbounds i64, i64* %17, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = load i64*, i64** %4, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = call i64 @applyprim__42(i64 %25)
  %27 = and i64 %26, -8
  %28 = lshr i64 %27, 32
  %29 = trunc i64 %28 to i32
  %30 = mul nsw i32 %22, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 32
  %33 = or i64 %32, 2
  store i64 %33, i64* %2, align 8
  br label %34

; <label>:34                                      ; preds = %13, %7
  %35 = load i64, i64* %2, align 8
  ret i64 %35
}

; Function Attrs: ssp uwtable
define i64 @prim__47(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = and i64 %5, 7
  %7 = icmp ne i64 %6, 2
  br i1 %7, label %8, label %9

; <label>:8                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i32 0, i32 0))
  br label %9

; <label>:9                                       ; preds = %8, %2
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, 7
  %12 = icmp ne i64 %11, 2
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %9
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.38, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %9
  %15 = load i64, i64* %3, align 8
  %16 = and i64 %15, -8
  %17 = lshr i64 %16, 32
  %18 = trunc i64 %17 to i32
  %19 = load i64, i64* %4, align 8
  %20 = and i64 %19, -8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i32
  %23 = sdiv i32 %18, %22
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 32
  %26 = or i64 %25, 2
  ret i64 %26
}

; Function Attrs: ssp uwtable
define i64 @prim__61(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.40, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp eq i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: ssp uwtable
define i64 @prim__60(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.41, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.42, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: ssp uwtable
define i64 @prim__60_61(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = and i64 %6, 7
  %8 = icmp ne i64 %7, 2
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.43, i32 0, i32 0))
  br label %10

; <label>:10                                      ; preds = %9, %2
  %11 = load i64, i64* %5, align 8
  %12 = and i64 %11, 7
  %13 = icmp ne i64 %12, 2
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %10
  call void @fatal_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.44, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %10
  %16 = load i64, i64* %4, align 8
  %17 = and i64 %16, -8
  %18 = lshr i64 %17, 32
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %5, align 8
  %21 = and i64 %20, -8
  %22 = lshr i64 %21, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp sle i32 %19, %23
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %27

; <label>:26                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %27

; <label>:27                                      ; preds = %26, %25
  %28 = load i64, i64* %3, align 8
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define i64 @prim_not(i64) #3 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 15
  br i1 %5, label %6, label %7

; <label>:6                                       ; preds = %1
  store i64 31, i64* %2, align 8
  br label %8

; <label>:7                                       ; preds = %1
  store i64 15, i64* %2, align 8
  br label %8

; <label>:8                                       ; preds = %7, %6
  %9 = load i64, i64* %2, align 8
  ret i64 %9
}

; Function Attrs: ssp uwtable
define i64 @applyprim_not(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call i64 @expect_args1(i64 %4)
  store i64 %5, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = call i64 @prim_not(i64 %6)
  ret i64 %7
}

; Function Attrs: ssp uwtable
define i64 @prim_hash() #0 {
  %1 = alloca %class.hamt*, align 8
  %2 = load i64, i64* @current_memory, align 8
  %3 = add i64 %2, 120
  store i64 %3, i64* @current_memory, align 8
  %4 = load i64, i64* @current_memory, align 8
  %5 = add i64 %4, 120
  %6 = icmp ugt i64 %5, 250000000
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %0
  %9 = call i8* @malloc(i64 120)
  %10 = bitcast i8* %9 to %class.hamt.1*
  %11 = bitcast %class.hamt.1* %10 to i8*
  %12 = bitcast i8* %11 to %class.hamt*
  call void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt* %12)
  store %class.hamt* %12, %class.hamt** %1, align 8
  %13 = load %class.hamt*, %class.hamt** %1, align 8
  %14 = ptrtoint %class.hamt* %13 to i64
  ret i64 %14
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt*) unnamed_addr #0 align 2 {
  %2 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %2, align 8
  %3 = load %class.hamt*, %class.hamt** %2, align 8
  call void @_ZN4hamtI3c_dS0_EC2Ev(%class.hamt* %3)
  ret void
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45ref(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  %21 = load %class.c_d*, %class.c_d** %5, align 8
  %22 = call %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt* %20, %class.c_d* %21)
  store %class.c_d* %22, %class.c_d** %6, align 8
  %23 = load %class.c_d*, %class.c_d** %6, align 8
  %24 = icmp eq %class.c_d* %23, null
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %13
  call void @fatal_err(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i32 0, i32 0))
  br label %26

; <label>:26                                      ; preds = %25, %13
  %27 = load %class.c_d*, %class.c_d** %6, align 8
  %28 = getelementptr inbounds %class.c_d, %class.c_d* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  ret i64 %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN3c_dC1Ey(%class.c_d*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca i64, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN3c_dC2Ey(%class.c_d* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %8 = load %class.hamt*, %class.hamt** %4, align 8
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  %10 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %9)
  store i64 %10, i64* %6, align 8
  %11 = load i64, i64* %6, align 8
  %12 = and i64 %11, 15
  %13 = urem i64 %12, 7
  store i64 %13, i64* %7, align 8
  %14 = load i64, i64* %7, align 8
  %15 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %16 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %15, i64 0, i64 %14
  %17 = getelementptr inbounds %class.KV, %class.KV* %16, i32 0, i32 0
  %18 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %22

; <label>:21                                      ; preds = %2
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %56

; <label>:22                                      ; preds = %2
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %25 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %24, i64 0, i64 %23
  %26 = getelementptr inbounds %class.KV, %class.KV* %25, i32 0, i32 0
  %27 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %48

; <label>:31                                      ; preds = %22
  %32 = load i64, i64* %7, align 8
  %33 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %34 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %33, i64 0, i64 %32
  %35 = getelementptr inbounds %class.KV, %class.KV* %34, i32 0, i32 0
  %36 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %35 to %class.c_d**
  %37 = load %class.c_d*, %class.c_d** %36, align 8
  %38 = load %class.c_d*, %class.c_d** %5, align 8
  %39 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %37, %class.c_d* dereferenceable(8) %38)
  br i1 %39, label %40, label %47

; <label>:40                                      ; preds = %31
  %41 = load i64, i64* %7, align 8
  %42 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %43 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %42, i64 0, i64 %41
  %44 = getelementptr inbounds %class.KV, %class.KV* %43, i32 0, i32 1
  %45 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %44 to %class.c_d**
  %46 = load %class.c_d*, %class.c_d** %45, align 8
  store %class.c_d* %46, %class.c_d** %3, align 8
  br label %56

; <label>:47                                      ; preds = %31
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %56

; <label>:48                                      ; preds = %22
  %49 = load i64, i64* %7, align 8
  %50 = getelementptr inbounds %class.hamt, %class.hamt* %8, i32 0, i32 0
  %51 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %50, i64 0, i64 %49
  %52 = load i64, i64* %6, align 8
  %53 = lshr i64 %52, 4
  %54 = load %class.c_d*, %class.c_d** %5, align 8
  %55 = call %class.c_d* @_ZN2KVI3c_dS0_Lj0EE10inner_findERKS1_yPKS0_(%class.KV* dereferenceable(16) %51, i64 %53, %class.c_d* %54)
  store %class.c_d* %55, %class.c_d** %3, align 8
  br label %56

; <label>:56                                      ; preds = %48, %47, %40, %21
  %57 = load %class.c_d*, %class.c_d** %3, align 8
  ret %class.c_d* %57
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45set(i64, i64, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca %class.hamt*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %10 = load i64, i64* @current_memory, align 8
  %11 = add i64 %10, 16
  store i64 %11, i64* @current_memory, align 8
  %12 = load i64, i64* @current_memory, align 8
  %13 = add i64 %12, 16
  %14 = icmp ugt i64 %13, 250000000
  br i1 %14, label %15, label %16

; <label>:15                                      ; preds = %3
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %16

; <label>:16                                      ; preds = %15, %3
  %17 = call i8* @malloc(i64 8)
  %18 = bitcast i8* %17 to %class.c_d*
  %19 = bitcast %class.c_d* %18 to i8*
  %20 = bitcast i8* %19 to %class.c_d*
  %21 = load i64, i64* %5, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %20, i64 %21)
  store %class.c_d* %20, %class.c_d** %7, align 8
  %22 = call i8* @malloc(i64 8)
  %23 = bitcast i8* %22 to %class.c_d*
  %24 = bitcast %class.c_d* %23 to i8*
  %25 = bitcast i8* %24 to %class.c_d*
  %26 = load i64, i64* %6, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %25, i64 %26)
  store %class.c_d* %25, %class.c_d** %8, align 8
  %27 = load i64, i64* %4, align 8
  %28 = inttoptr i64 %27 to %class.hamt*
  store %class.hamt* %28, %class.hamt** %9, align 8
  %29 = load %class.hamt*, %class.hamt** %9, align 8
  %30 = load %class.c_d*, %class.c_d** %7, align 8
  %31 = load %class.c_d*, %class.c_d** %8, align 8
  %32 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt* %29, %class.c_d* %30, %class.c_d* %31)
  %33 = ptrtoint %class.hamt* %32 to i64
  ret i64 %33
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt*, %class.c_d*, %class.c_d*) #0 align 2 {
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %10 = load %class.hamt*, %class.hamt** %4, align 8
  %11 = load %class.c_d*, %class.c_d** %5, align 8
  %12 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %11)
  store i64 %12, i64* %7, align 8
  %13 = load i64, i64* %7, align 8
  %14 = and i64 %13, 15
  %15 = urem i64 %14, 7
  store i64 %15, i64* %8, align 8
  %16 = call i8* @malloc(i64 120)
  %17 = bitcast i8* %16 to %class.hamt*
  store %class.hamt* %17, %class.hamt** %9, align 8
  %18 = load %class.hamt*, %class.hamt** %9, align 8
  %19 = bitcast %class.hamt* %18 to i8*
  %20 = bitcast %class.hamt* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 120, i32 8, i1 false)
  %21 = load i64, i64* %8, align 8
  %22 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %23 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %22, i64 0, i64 %21
  %24 = getelementptr inbounds %class.KV, %class.KV* %23, i32 0, i32 0
  %25 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %41

; <label>:28                                      ; preds = %3
  %29 = load i64, i64* %8, align 8
  %30 = load %class.hamt*, %class.hamt** %9, align 8
  %31 = getelementptr inbounds %class.hamt, %class.hamt* %30, i32 0, i32 0
  %32 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %31, i64 0, i64 %29
  %33 = bitcast %class.KV* %32 to i8*
  %34 = bitcast i8* %33 to %class.KV*
  %35 = load %class.c_d*, %class.c_d** %5, align 8
  %36 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %34, %class.c_d* %35, %class.c_d* %36)
  %37 = load %class.hamt*, %class.hamt** %9, align 8
  %38 = getelementptr inbounds %class.hamt, %class.hamt* %37, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %38, align 8
  br label %121

; <label>:41                                      ; preds = %3
  %42 = load i64, i64* %8, align 8
  %43 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %44 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %43, i64 0, i64 %42
  %45 = getelementptr inbounds %class.KV, %class.KV* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %104

; <label>:50                                      ; preds = %41
  %51 = load i64, i64* %8, align 8
  %52 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %53 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %52, i64 0, i64 %51
  %54 = getelementptr inbounds %class.KV, %class.KV* %53, i32 0, i32 0
  %55 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %54 to %class.c_d**
  %56 = load %class.c_d*, %class.c_d** %55, align 8
  %57 = load %class.c_d*, %class.c_d** %5, align 8
  %58 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %56, %class.c_d* dereferenceable(8) %57)
  br i1 %58, label %59, label %68

; <label>:59                                      ; preds = %50
  %60 = load i64, i64* %8, align 8
  %61 = load %class.hamt*, %class.hamt** %9, align 8
  %62 = getelementptr inbounds %class.hamt, %class.hamt* %61, i32 0, i32 0
  %63 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %62, i64 0, i64 %60
  %64 = bitcast %class.KV* %63 to i8*
  %65 = bitcast i8* %64 to %class.KV*
  %66 = load %class.c_d*, %class.c_d** %5, align 8
  %67 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %65, %class.c_d* %66, %class.c_d* %67)
  br label %103

; <label>:68                                      ; preds = %50
  %69 = load %class.hamt*, %class.hamt** %9, align 8
  %70 = getelementptr inbounds %class.hamt, %class.hamt* %69, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  store i64 %72, i64* %70, align 8
  %73 = load i64, i64* %8, align 8
  %74 = load %class.hamt*, %class.hamt** %9, align 8
  %75 = getelementptr inbounds %class.hamt, %class.hamt* %74, i32 0, i32 0
  %76 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %75, i64 0, i64 %73
  %77 = bitcast %class.KV* %76 to i8*
  %78 = bitcast i8* %77 to %class.KV*
  %79 = load i64, i64* %8, align 8
  %80 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %81 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %80, i64 0, i64 %79
  %82 = getelementptr inbounds %class.KV, %class.KV* %81, i32 0, i32 0
  %83 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %82 to %class.c_d**
  %84 = load %class.c_d*, %class.c_d** %83, align 8
  %85 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %84)
  %86 = lshr i64 %85, 4
  %87 = load i64, i64* %8, align 8
  %88 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %89 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %88, i64 0, i64 %87
  %90 = getelementptr inbounds %class.KV, %class.KV* %89, i32 0, i32 0
  %91 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %90 to %class.c_d**
  %92 = load %class.c_d*, %class.c_d** %91, align 8
  %93 = load i64, i64* %8, align 8
  %94 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %95 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %94, i64 0, i64 %93
  %96 = getelementptr inbounds %class.KV, %class.KV* %95, i32 0, i32 1
  %97 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %96 to %class.c_d**
  %98 = load %class.c_d*, %class.c_d** %97, align 8
  %99 = load i64, i64* %7, align 8
  %100 = lshr i64 %99, 4
  %101 = load %class.c_d*, %class.c_d** %5, align 8
  %102 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV* sret %78, i64 %86, %class.c_d* %92, %class.c_d* %98, i64 %100, %class.c_d* %101, %class.c_d* %102)
  br label %103

; <label>:103                                     ; preds = %68, %59
  br label %120

; <label>:104                                     ; preds = %41
  %105 = load i64, i64* %8, align 8
  %106 = load %class.hamt*, %class.hamt** %9, align 8
  %107 = getelementptr inbounds %class.hamt, %class.hamt* %106, i32 0, i32 0
  %108 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %107, i64 0, i64 %105
  %109 = bitcast %class.KV* %108 to i8*
  %110 = bitcast i8* %109 to %class.KV*
  %111 = load i64, i64* %8, align 8
  %112 = getelementptr inbounds %class.hamt, %class.hamt* %10, i32 0, i32 0
  %113 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %112, i64 0, i64 %111
  %114 = load i64, i64* %7, align 8
  %115 = lshr i64 %114, 4
  %116 = load %class.c_d*, %class.c_d** %5, align 8
  %117 = load %class.c_d*, %class.c_d** %6, align 8
  %118 = load %class.hamt*, %class.hamt** %9, align 8
  %119 = getelementptr inbounds %class.hamt, %class.hamt* %118, i32 0, i32 1
  call void @_ZN2KVI3c_dS0_Lj0EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV* sret %110, %class.KV* dereferenceable(16) %113, i64 %115, %class.c_d* %116, %class.c_d* %117, i64* %119)
  br label %120

; <label>:120                                     ; preds = %104, %103
  br label %121

; <label>:121                                     ; preds = %120, %28
  %122 = load %class.hamt*, %class.hamt** %9, align 8
  ret %class.hamt* %122
}

; Function Attrs: ssp uwtable
define i64 @prim_hash_45remove(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  store %class.hamt* %20, %class.hamt** %6, align 8
  %21 = load %class.hamt*, %class.hamt** %6, align 8
  %22 = load %class.c_d*, %class.c_d** %5, align 8
  %23 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt* %21, %class.c_d* %22)
  %24 = ptrtoint %class.hamt* %23 to i64
  ret i64 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.hamt*, align 8
  %4 = alloca %class.hamt*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.hamt*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %class.KV, align 8
  %11 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %12 = load %class.hamt*, %class.hamt** %4, align 8
  %13 = load %class.c_d*, %class.c_d** %5, align 8
  %14 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %13)
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = and i64 %15, 15
  %17 = urem i64 %16, 7
  store i64 %17, i64* %7, align 8
  %18 = load i64, i64* %7, align 8
  %19 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %20 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %19, i64 0, i64 %18
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %2
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:26                                      ; preds = %2
  %27 = load i64, i64* %7, align 8
  %28 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %29 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %28, i64 0, i64 %27
  %30 = getelementptr inbounds %class.KV, %class.KV* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = and i64 %32, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %61

; <label>:35                                      ; preds = %26
  %36 = load i64, i64* %7, align 8
  %37 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %38 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %37, i64 0, i64 %36
  %39 = getelementptr inbounds %class.KV, %class.KV* %38, i32 0, i32 0
  %40 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %39 to %class.c_d**
  %41 = load %class.c_d*, %class.c_d** %40, align 8
  %42 = load %class.c_d*, %class.c_d** %5, align 8
  %43 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %41, %class.c_d* dereferenceable(8) %42)
  br i1 %43, label %44, label %60

; <label>:44                                      ; preds = %35
  %45 = call i8* @malloc(i64 120)
  %46 = bitcast i8* %45 to %class.hamt*
  store %class.hamt* %46, %class.hamt** %8, align 8
  %47 = load %class.hamt*, %class.hamt** %8, align 8
  %48 = bitcast %class.hamt* %47 to i8*
  %49 = bitcast %class.hamt* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 120, i32 8, i1 false)
  %50 = load i64, i64* %7, align 8
  %51 = load %class.hamt*, %class.hamt** %8, align 8
  %52 = getelementptr inbounds %class.hamt, %class.hamt* %51, i64 %50
  %53 = bitcast %class.hamt* %52 to i8*
  %54 = bitcast i8* %53 to %class.KV*
  call void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV* %54, %class.c_d* null, %class.c_d* null)
  %55 = load %class.hamt*, %class.hamt** %8, align 8
  %56 = getelementptr inbounds %class.hamt, %class.hamt* %55, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, -1
  store i64 %58, i64* %56, align 8
  %59 = load %class.hamt*, %class.hamt** %8, align 8
  store %class.hamt* %59, %class.hamt** %3, align 8
  br label %91

; <label>:60                                      ; preds = %35
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:61                                      ; preds = %26
  %62 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %9, align 8
  %64 = load i64, i64* %7, align 8
  %65 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %66 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %65, i64 0, i64 %64
  %67 = load i64, i64* %6, align 8
  %68 = lshr i64 %67, 4
  %69 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE12remove_innerERKS1_yPKS0_Py(%class.KV* sret %10, %class.KV* dereferenceable(16) %66, i64 %68, %class.c_d* %69, i64* %9)
  %70 = load i64, i64* %7, align 8
  %71 = getelementptr inbounds %class.hamt, %class.hamt* %12, i32 0, i32 0
  %72 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %71, i64 0, i64 %70
  %73 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj0EEeqERKS1_(%class.KV* %10, %class.KV* dereferenceable(16) %72)
  br i1 %73, label %74, label %75

; <label>:74                                      ; preds = %61
  store %class.hamt* %12, %class.hamt** %3, align 8
  br label %91

; <label>:75                                      ; preds = %61
  %76 = call i8* @malloc(i64 120)
  %77 = bitcast i8* %76 to %class.hamt*
  store %class.hamt* %77, %class.hamt** %11, align 8
  %78 = load %class.hamt*, %class.hamt** %11, align 8
  %79 = bitcast %class.hamt* %78 to i8*
  %80 = bitcast %class.hamt* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 120, i32 8, i1 false)
  %81 = load i64, i64* %7, align 8
  %82 = load %class.hamt*, %class.hamt** %11, align 8
  %83 = getelementptr inbounds %class.hamt, %class.hamt* %82, i32 0, i32 0
  %84 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %83, i64 0, i64 %81
  %85 = bitcast %class.KV* %84 to i8*
  %86 = bitcast i8* %85 to %class.KV*
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %86, %class.KV* dereferenceable(16) %10)
  %87 = load i64, i64* %9, align 8
  %88 = load %class.hamt*, %class.hamt** %11, align 8
  %89 = getelementptr inbounds %class.hamt, %class.hamt* %88, i32 0, i32 1
  store i64 %87, i64* %89, align 8
  %90 = load %class.hamt*, %class.hamt** %11, align 8
  store %class.hamt* %90, %class.hamt** %3, align 8
  br label %91

; <label>:91                                      ; preds = %75, %74, %60, %44, %25
  %92 = load %class.hamt*, %class.hamt** %3, align 8
  ret %class.hamt* %92
}

; Function Attrs: ssp uwtable
define i64 @prim_set() #0 {
  %1 = alloca %class.hamt*, align 8
  %2 = load i64, i64* @current_memory, align 8
  %3 = add i64 %2, 120
  store i64 %3, i64* @current_memory, align 8
  %4 = load i64, i64* @current_memory, align 8
  %5 = add i64 %4, 120
  %6 = icmp ugt i64 %5, 250000000
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %8

; <label>:8                                       ; preds = %7, %0
  %9 = call i8* @malloc(i64 120)
  %10 = bitcast i8* %9 to %class.hamt.1*
  %11 = bitcast %class.hamt.1* %10 to i8*
  %12 = bitcast i8* %11 to %class.hamt*
  call void @_ZN4hamtI3c_dS0_EC1Ev(%class.hamt* %12)
  store %class.hamt* %12, %class.hamt** %1, align 8
  %13 = load %class.hamt*, %class.hamt** %1, align 8
  %14 = ptrtoint %class.hamt* %13 to i64
  ret i64 %14
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45add(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* @current_memory, align 8
  %9 = add i64 %8, 16
  store i64 %9, i64* @current_memory, align 8
  %10 = load i64, i64* @current_memory, align 8
  %11 = add i64 %10, 16
  %12 = icmp ugt i64 %11, 250000000
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %14

; <label>:14                                      ; preds = %13, %2
  %15 = call i8* @malloc(i64 8)
  %16 = bitcast i8* %15 to %class.c_d*
  %17 = bitcast %class.c_d* %16 to i8*
  %18 = bitcast i8* %17 to %class.c_d*
  %19 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %18, i64 %19)
  store %class.c_d* %18, %class.c_d** %5, align 8
  %20 = call i8* @malloc(i64 8)
  %21 = bitcast i8* %20 to %class.c_d*
  %22 = bitcast %class.c_d* %21 to i8*
  %23 = bitcast i8* %22 to %class.c_d*
  %24 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %23, i64 %24)
  store %class.c_d* %23, %class.c_d** %6, align 8
  %25 = load i64, i64* %3, align 8
  %26 = inttoptr i64 %25 to %class.hamt*
  store %class.hamt* %26, %class.hamt** %7, align 8
  %27 = load %class.hamt*, %class.hamt** %7, align 8
  %28 = load %class.c_d*, %class.c_d** %5, align 8
  %29 = load %class.c_d*, %class.c_d** %6, align 8
  %30 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6insertEPKS0_S3_(%class.hamt* %27, %class.c_d* %28, %class.c_d* %29)
  %31 = ptrtoint %class.hamt* %30 to i64
  ret i64 %31
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45remove(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.hamt*, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i64, i64* @current_memory, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* @current_memory, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  %11 = icmp ugt i64 %10, 250000000
  br i1 %11, label %12, label %13

; <label>:12                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %13

; <label>:13                                      ; preds = %12, %2
  %14 = call i8* @malloc(i64 8)
  %15 = bitcast i8* %14 to %class.c_d*
  %16 = bitcast %class.c_d* %15 to i8*
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = load i64, i64* %4, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %17, i64 %18)
  store %class.c_d* %17, %class.c_d** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = inttoptr i64 %19 to %class.hamt*
  store %class.hamt* %20, %class.hamt** %6, align 8
  %21 = load %class.hamt*, %class.hamt** %6, align 8
  %22 = load %class.c_d*, %class.c_d** %5, align 8
  %23 = call %class.hamt* @_ZNK4hamtI3c_dS0_E6removeEPKS0_(%class.hamt* %21, %class.c_d* %22)
  %24 = ptrtoint %class.hamt* %23 to i64
  ret i64 %24
}

; Function Attrs: ssp uwtable
define i64 @prim_set_45member_63(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.hamt*, align 8
  %8 = alloca %class.c_d*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %9 = load i64, i64* @current_memory, align 8
  %10 = add i64 %9, 8
  store i64 %10, i64* @current_memory, align 8
  %11 = load i64, i64* @current_memory, align 8
  %12 = add i64 %11, 8
  %13 = icmp ugt i64 %12, 250000000
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %2
  call void @fatal_err(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0))
  br label %15

; <label>:15                                      ; preds = %14, %2
  %16 = call i8* @malloc(i64 8)
  %17 = bitcast i8* %16 to %class.c_d*
  %18 = bitcast %class.c_d* %17 to i8*
  %19 = bitcast i8* %18 to %class.c_d*
  %20 = load i64, i64* %5, align 8
  call void @_ZN3c_dC1Ey(%class.c_d* %19, i64 %20)
  store %class.c_d* %19, %class.c_d** %6, align 8
  %21 = load i64, i64* %4, align 8
  %22 = inttoptr i64 %21 to %class.hamt*
  store %class.hamt* %22, %class.hamt** %7, align 8
  %23 = load %class.hamt*, %class.hamt** %7, align 8
  %24 = load %class.c_d*, %class.c_d** %6, align 8
  %25 = call %class.c_d* @_ZNK4hamtI3c_dS0_E3getEPKS0_(%class.hamt* %23, %class.c_d* %24)
  store %class.c_d* %25, %class.c_d** %8, align 8
  %26 = load %class.c_d*, %class.c_d** %8, align 8
  %27 = icmp eq %class.c_d* %26, null
  br i1 %27, label %28, label %29

; <label>:28                                      ; preds = %15
  store i64 15, i64* %3, align 8
  br label %30

; <label>:29                                      ; preds = %15
  store i64 31, i64* %3, align 8
  br label %30

; <label>:30                                      ; preds = %29, %28
  %31 = load i64, i64* %3, align 8
  ret i64 %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN3c_dC2Ey(%class.c_d*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca i64, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = getelementptr inbounds %class.c_d, %class.c_d* %5, i32 0, i32 0
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN4hamtI3c_dS0_EC2Ev(%class.hamt*) unnamed_addr #0 align 2 {
  %2 = alloca %class.hamt*, align 8
  store %class.hamt* %0, %class.hamt** %2, align 8
  %3 = load %class.hamt*, %class.hamt** %2, align 8
  %4 = getelementptr inbounds %class.hamt, %class.hamt* %3, i32 0, i32 0
  %5 = getelementptr inbounds [7 x %class.KV], [7 x %class.KV]* %4, i32 0, i32 0
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i64 7
  br label %7

; <label>:7                                       ; preds = %7, %1
  %8 = phi %class.KV* [ %5, %1 ], [ %9, %7 ]
  call void @_ZN2KVI3c_dS0_Lj0EEC1Ev(%class.KV* %8)
  %9 = getelementptr inbounds %class.KV, %class.KV* %8, i64 1
  %10 = icmp eq %class.KV* %9, %6
  br i1 %10, label %11, label %7

; <label>:11                                      ; preds = %7
  %12 = getelementptr inbounds %class.hamt, %class.hamt* %3, i32 0, i32 1
  store i64 0, i64* %12, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1Ev(%class.KV*) unnamed_addr #0 align 2 {
  %2 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %2, align 8
  %3 = load %class.KV*, %class.KV** %2, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2Ev(%class.KV* %3)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2Ev(%class.KV*) unnamed_addr #0 align 2 {
  %2 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %2, align 8
  %3 = load %class.KV*, %class.KV** %2, align 8
  %4 = getelementptr inbounds %class.KV, %class.KV* %3, i32 0, i32 0
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"* %4, i64 0)
  %5 = getelementptr inbounds %class.KV, %class.KV* %3, i32 0, i32 1
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.c_d* null)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC2Ey(%"union.KV<c_d, c_d, 0>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC2Ey(%"union.KV<c_d, c_d, 0>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 0>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i64 @_ZNK3c_d4hashEv(%class.c_d*) #3 align 2 {
  %2 = alloca %class.c_d*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store %class.c_d* %0, %class.c_d** %2, align 8
  %6 = load %class.c_d*, %class.c_d** %2, align 8
  %7 = bitcast %class.c_d* %6 to i8*
  store i8* %7, i8** %3, align 8
  store i64 -3750763034362895579, i64* %4, align 8
  store i32 0, i32* %5, align 4
  br label %8

; <label>:8                                       ; preds = %28, %1
  %9 = load i32, i32* %5, align 4
  %10 = zext i32 %9 to i64
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %12, label %30

; <label>:12                                      ; preds = %8
  %13 = load i64, i64* %4, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = xor i64 %13, %16
  store i64 %17, i64* %4, align 8
  %18 = load i64, i64* %4, align 8
  %19 = mul i64 %18, 1099511628211
  store i64 %19, i64* %4, align 8
  br label %20

; <label>:20                                      ; preds = %12
  %21 = load i32, i32* %5, align 4
  %22 = add i32 %21, 1
  store i32 %22, i32* %5, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %20
  %25 = load i8*, i8** %3, align 8
  %26 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %26, i8** %3, align 8
  %27 = icmp ne i8* %26, null
  br label %28

; <label>:28                                      ; preds = %24, %20
  %29 = phi i1 [ false, %20 ], [ %27, %24 ]
  br label %8

; <label>:30                                      ; preds = %8
  %31 = load i64, i64* %4, align 8
  ret i64 %31
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK3c_deqERKS_(%class.c_d*, %class.c_d* dereferenceable(8)) #3 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.c_d*, align 8
  store %class.c_d* %0, %class.c_d** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %class.c_d*, %class.c_d** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  %7 = getelementptr inbounds %class.c_d, %class.c_d* %6, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.c_d, %class.c_d* %5, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  ret i1 %11
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj0EE10inner_findERKS1_yPKS0_(%class.KV* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.0*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV* %0, %class.KV** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV*, %class.KV** %5, align 8
  %17 = getelementptr inbounds %class.KV, %class.KV* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %17 to %class.KV.0**
  %19 = load %class.KV.0*, %class.KV.0** %18, align 8
  store %class.KV.0* %19, %class.KV.0** %9, align 8
  %20 = load %class.KV*, %class.KV** %5, align 8
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.0*, %class.KV.0** %9, align 8
  %44 = getelementptr inbounds %class.KV.0, %class.KV.0* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.0, %class.KV.0* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.0*, %class.KV.0** %9, align 8
  %54 = getelementptr inbounds %class.KV.0, %class.KV.0* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.0, %class.KV.0* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.0*, %class.KV.0** %9, align 8
  %64 = getelementptr inbounds %class.KV.0, %class.KV.0* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.0*, %class.KV.0** %9, align 8
  %73 = getelementptr inbounds %class.KV.0, %class.KV.0* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj1EE10inner_findERKS1_yPKS0_(%class.KV.0* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: nounwind readnone
declare i64 @llvm.ctpop.i64(i64) #5

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj1EE10inner_findERKS1_yPKS0_(%class.KV.0* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.0*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.2*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.0* %0, %class.KV.0** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.0*, %class.KV.0** %5, align 8
  %17 = getelementptr inbounds %class.KV.0, %class.KV.0* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %17 to %class.KV.2**
  %19 = load %class.KV.2*, %class.KV.2** %18, align 8
  store %class.KV.2* %19, %class.KV.2** %9, align 8
  %20 = load %class.KV.0*, %class.KV.0** %5, align 8
  %21 = getelementptr inbounds %class.KV.0, %class.KV.0* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.2*, %class.KV.2** %9, align 8
  %44 = getelementptr inbounds %class.KV.2, %class.KV.2* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.2, %class.KV.2* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.2*, %class.KV.2** %9, align 8
  %54 = getelementptr inbounds %class.KV.2, %class.KV.2* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.2, %class.KV.2* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.2*, %class.KV.2** %9, align 8
  %64 = getelementptr inbounds %class.KV.2, %class.KV.2* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.2*, %class.KV.2** %9, align 8
  %73 = getelementptr inbounds %class.KV.2, %class.KV.2* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj2EE10inner_findERKS1_yPKS0_(%class.KV.2* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj2EE10inner_findERKS1_yPKS0_(%class.KV.2* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.2*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.3*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.2* %0, %class.KV.2** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.2*, %class.KV.2** %5, align 8
  %17 = getelementptr inbounds %class.KV.2, %class.KV.2* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %17 to %class.KV.3**
  %19 = load %class.KV.3*, %class.KV.3** %18, align 8
  store %class.KV.3* %19, %class.KV.3** %9, align 8
  %20 = load %class.KV.2*, %class.KV.2** %5, align 8
  %21 = getelementptr inbounds %class.KV.2, %class.KV.2* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.3*, %class.KV.3** %9, align 8
  %44 = getelementptr inbounds %class.KV.3, %class.KV.3* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.3, %class.KV.3* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.3*, %class.KV.3** %9, align 8
  %54 = getelementptr inbounds %class.KV.3, %class.KV.3* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.3, %class.KV.3* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.3*, %class.KV.3** %9, align 8
  %64 = getelementptr inbounds %class.KV.3, %class.KV.3* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.3*, %class.KV.3** %9, align 8
  %73 = getelementptr inbounds %class.KV.3, %class.KV.3* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj3EE10inner_findERKS1_yPKS0_(%class.KV.3* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj3EE10inner_findERKS1_yPKS0_(%class.KV.3* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.3*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.4*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.3* %0, %class.KV.3** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.3*, %class.KV.3** %5, align 8
  %17 = getelementptr inbounds %class.KV.3, %class.KV.3* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %17 to %class.KV.4**
  %19 = load %class.KV.4*, %class.KV.4** %18, align 8
  store %class.KV.4* %19, %class.KV.4** %9, align 8
  %20 = load %class.KV.3*, %class.KV.3** %5, align 8
  %21 = getelementptr inbounds %class.KV.3, %class.KV.3* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.4*, %class.KV.4** %9, align 8
  %44 = getelementptr inbounds %class.KV.4, %class.KV.4* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.4, %class.KV.4* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.4*, %class.KV.4** %9, align 8
  %54 = getelementptr inbounds %class.KV.4, %class.KV.4* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.4, %class.KV.4* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.4*, %class.KV.4** %9, align 8
  %64 = getelementptr inbounds %class.KV.4, %class.KV.4* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.4*, %class.KV.4** %9, align 8
  %73 = getelementptr inbounds %class.KV.4, %class.KV.4* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj4EE10inner_findERKS1_yPKS0_(%class.KV.4* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj4EE10inner_findERKS1_yPKS0_(%class.KV.4* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.4*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.5*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.4* %0, %class.KV.4** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.4*, %class.KV.4** %5, align 8
  %17 = getelementptr inbounds %class.KV.4, %class.KV.4* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %17 to %class.KV.5**
  %19 = load %class.KV.5*, %class.KV.5** %18, align 8
  store %class.KV.5* %19, %class.KV.5** %9, align 8
  %20 = load %class.KV.4*, %class.KV.4** %5, align 8
  %21 = getelementptr inbounds %class.KV.4, %class.KV.4* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.5*, %class.KV.5** %9, align 8
  %44 = getelementptr inbounds %class.KV.5, %class.KV.5* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.5, %class.KV.5* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.5*, %class.KV.5** %9, align 8
  %54 = getelementptr inbounds %class.KV.5, %class.KV.5* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.5, %class.KV.5* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.5*, %class.KV.5** %9, align 8
  %64 = getelementptr inbounds %class.KV.5, %class.KV.5* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.5*, %class.KV.5** %9, align 8
  %73 = getelementptr inbounds %class.KV.5, %class.KV.5* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj5EE10inner_findERKS1_yPKS0_(%class.KV.5* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj5EE10inner_findERKS1_yPKS0_(%class.KV.5* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.5*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.6*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.5* %0, %class.KV.5** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.5*, %class.KV.5** %5, align 8
  %17 = getelementptr inbounds %class.KV.5, %class.KV.5* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %17 to %class.KV.6**
  %19 = load %class.KV.6*, %class.KV.6** %18, align 8
  store %class.KV.6* %19, %class.KV.6** %9, align 8
  %20 = load %class.KV.5*, %class.KV.5** %5, align 8
  %21 = getelementptr inbounds %class.KV.5, %class.KV.5* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.6*, %class.KV.6** %9, align 8
  %44 = getelementptr inbounds %class.KV.6, %class.KV.6* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.6, %class.KV.6* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.6*, %class.KV.6** %9, align 8
  %54 = getelementptr inbounds %class.KV.6, %class.KV.6* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.6, %class.KV.6* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.6*, %class.KV.6** %9, align 8
  %64 = getelementptr inbounds %class.KV.6, %class.KV.6* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.6*, %class.KV.6** %9, align 8
  %73 = getelementptr inbounds %class.KV.6, %class.KV.6* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj6EE10inner_findERKS1_yPKS0_(%class.KV.6* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj6EE10inner_findERKS1_yPKS0_(%class.KV.6* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.6*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.7*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.6* %0, %class.KV.6** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.6*, %class.KV.6** %5, align 8
  %17 = getelementptr inbounds %class.KV.6, %class.KV.6* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %17 to %class.KV.7**
  %19 = load %class.KV.7*, %class.KV.7** %18, align 8
  store %class.KV.7* %19, %class.KV.7** %9, align 8
  %20 = load %class.KV.6*, %class.KV.6** %5, align 8
  %21 = getelementptr inbounds %class.KV.6, %class.KV.6* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.7*, %class.KV.7** %9, align 8
  %44 = getelementptr inbounds %class.KV.7, %class.KV.7* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.7, %class.KV.7* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.7*, %class.KV.7** %9, align 8
  %54 = getelementptr inbounds %class.KV.7, %class.KV.7* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.7, %class.KV.7* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.7*, %class.KV.7** %9, align 8
  %64 = getelementptr inbounds %class.KV.7, %class.KV.7* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.7*, %class.KV.7** %9, align 8
  %73 = getelementptr inbounds %class.KV.7, %class.KV.7* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj7EE10inner_findERKS1_yPKS0_(%class.KV.7* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj7EE10inner_findERKS1_yPKS0_(%class.KV.7* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.7*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.7* %0, %class.KV.7** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.7*, %class.KV.7** %5, align 8
  %17 = getelementptr inbounds %class.KV.7, %class.KV.7* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %17 to %class.KV.8**
  %19 = load %class.KV.8*, %class.KV.8** %18, align 8
  store %class.KV.8* %19, %class.KV.8** %9, align 8
  %20 = load %class.KV.7*, %class.KV.7** %5, align 8
  %21 = getelementptr inbounds %class.KV.7, %class.KV.7* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.8*, %class.KV.8** %9, align 8
  %44 = getelementptr inbounds %class.KV.8, %class.KV.8* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.8, %class.KV.8* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.8*, %class.KV.8** %9, align 8
  %54 = getelementptr inbounds %class.KV.8, %class.KV.8* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.8, %class.KV.8* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.8*, %class.KV.8** %9, align 8
  %64 = getelementptr inbounds %class.KV.8, %class.KV.8* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.8*, %class.KV.8** %9, align 8
  %73 = getelementptr inbounds %class.KV.8, %class.KV.8* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj8EE10inner_findERKS1_yPKS0_(%class.KV.8* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj8EE10inner_findERKS1_yPKS0_(%class.KV.8* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.9*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.8* %0, %class.KV.8** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.8*, %class.KV.8** %5, align 8
  %17 = getelementptr inbounds %class.KV.8, %class.KV.8* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %17 to %class.KV.9**
  %19 = load %class.KV.9*, %class.KV.9** %18, align 8
  store %class.KV.9* %19, %class.KV.9** %9, align 8
  %20 = load %class.KV.8*, %class.KV.8** %5, align 8
  %21 = getelementptr inbounds %class.KV.8, %class.KV.8* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.9*, %class.KV.9** %9, align 8
  %44 = getelementptr inbounds %class.KV.9, %class.KV.9* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.9, %class.KV.9* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.9*, %class.KV.9** %9, align 8
  %54 = getelementptr inbounds %class.KV.9, %class.KV.9* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.9, %class.KV.9* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.9*, %class.KV.9** %9, align 8
  %64 = getelementptr inbounds %class.KV.9, %class.KV.9* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.9*, %class.KV.9** %9, align 8
  %73 = getelementptr inbounds %class.KV.9, %class.KV.9* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj9EE10inner_findERKS1_yPKS0_(%class.KV.9* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj9EE10inner_findERKS1_yPKS0_(%class.KV.9* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.9*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.KV.10*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store %class.KV.9* %0, %class.KV.9** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %13 = load i64, i64* %6, align 8
  %14 = and i64 %13, 63
  %15 = urem i64 %14, 63
  store i64 %15, i64* %8, align 8
  %16 = load %class.KV.9*, %class.KV.9** %5, align 8
  %17 = getelementptr inbounds %class.KV.9, %class.KV.9* %16, i32 0, i32 1
  %18 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %17 to %class.KV.10**
  %19 = load %class.KV.10*, %class.KV.10** %18, align 8
  store %class.KV.10* %19, %class.KV.10** %9, align 8
  %20 = load %class.KV.9*, %class.KV.9** %5, align 8
  %21 = getelementptr inbounds %class.KV.9, %class.KV.9* %20, i32 0, i32 0
  %22 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %23, 1
  store i64 %24, i64* %10, align 8
  %25 = load i64, i64* %10, align 8
  %26 = load i64, i64* %8, align 8
  %27 = shl i64 1, %26
  %28 = and i64 %25, %27
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  %31 = load i8, i8* %11, align 1
  %32 = trunc i8 %31 to i1
  br i1 %32, label %33, label %78

; <label>:33                                      ; preds = %3
  %34 = load i64, i64* %10, align 8
  %35 = shl i64 %34, 1
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 63, %36
  %38 = shl i64 %35, %37
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %12, align 4
  %41 = load i32, i32* %12, align 4
  %42 = zext i32 %41 to i64
  %43 = load %class.KV.10*, %class.KV.10** %9, align 8
  %44 = getelementptr inbounds %class.KV.10, %class.KV.10* %43, i64 %42
  %45 = getelementptr inbounds %class.KV.10, %class.KV.10* %44, i32 0, i32 0
  %46 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %69

; <label>:50                                      ; preds = %33
  %51 = load i32, i32* %12, align 4
  %52 = zext i32 %51 to i64
  %53 = load %class.KV.10*, %class.KV.10** %9, align 8
  %54 = getelementptr inbounds %class.KV.10, %class.KV.10* %53, i64 %52
  %55 = getelementptr inbounds %class.KV.10, %class.KV.10* %54, i32 0, i32 0
  %56 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %55 to %class.c_d**
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  %58 = load %class.c_d*, %class.c_d** %7, align 8
  %59 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %57, %class.c_d* dereferenceable(8) %58)
  br i1 %59, label %60, label %68

; <label>:60                                      ; preds = %50
  %61 = load i32, i32* %12, align 4
  %62 = zext i32 %61 to i64
  %63 = load %class.KV.10*, %class.KV.10** %9, align 8
  %64 = getelementptr inbounds %class.KV.10, %class.KV.10* %63, i64 %62
  %65 = getelementptr inbounds %class.KV.10, %class.KV.10* %64, i32 0, i32 1
  %66 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %65 to %class.c_d**
  %67 = load %class.c_d*, %class.c_d** %66, align 8
  store %class.c_d* %67, %class.c_d** %4, align 8
  br label %79

; <label>:68                                      ; preds = %50
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:69                                      ; preds = %33
  %70 = load i32, i32* %12, align 4
  %71 = zext i32 %70 to i64
  %72 = load %class.KV.10*, %class.KV.10** %9, align 8
  %73 = getelementptr inbounds %class.KV.10, %class.KV.10* %72, i64 %71
  %74 = load i64, i64* %6, align 8
  %75 = lshr i64 %74, 6
  %76 = load %class.c_d*, %class.c_d** %7, align 8
  %77 = call %class.c_d* @_ZN2KVI3c_dS0_Lj10EE10inner_findERKS1_yPKS0_(%class.KV.10* dereferenceable(16) %73, i64 %75, %class.c_d* %76)
  store %class.c_d* %77, %class.c_d** %4, align 8
  br label %79

; <label>:78                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %79

; <label>:79                                      ; preds = %78, %69, %68, %60
  %80 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %80
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZN2KVI3c_dS0_Lj10EE10inner_findERKS1_yPKS0_(%class.KV.10* dereferenceable(16), i64, %class.c_d*) #0 align 2 {
  %4 = alloca %class.c_d*, align 8
  %5 = alloca %class.KV.10*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %5, align 8
  store i64 %1, i64* %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  %8 = load %class.KV.10*, %class.KV.10** %5, align 8
  %9 = getelementptr inbounds %class.KV.10, %class.KV.10* %8, i32 0, i32 1
  %10 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %9 to %class.LL**
  %11 = load %class.LL*, %class.LL** %10, align 8
  %12 = icmp ne %class.LL* %11, null
  br i1 %12, label %13, label %20

; <label>:13                                      ; preds = %3
  %14 = load %class.KV.10*, %class.KV.10** %5, align 8
  %15 = getelementptr inbounds %class.KV.10, %class.KV.10* %14, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %15 to %class.LL**
  %17 = load %class.LL*, %class.LL** %16, align 8
  %18 = load %class.c_d*, %class.c_d** %7, align 8
  %19 = call %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL* %17, %class.c_d* %18)
  store %class.c_d* %19, %class.c_d** %4, align 8
  br label %21

; <label>:20                                      ; preds = %3
  store %class.c_d* null, %class.c_d** %4, align 8
  br label %21

; <label>:21                                      ; preds = %20, %13
  %22 = load %class.c_d*, %class.c_d** %4, align 8
  ret %class.c_d* %22
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL*, %class.c_d*) #0 align 2 {
  %3 = alloca %class.c_d*, align 8
  %4 = alloca %class.LL*, align 8
  %5 = alloca %class.c_d*, align 8
  store %class.LL* %0, %class.LL** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  %6 = load %class.LL*, %class.LL** %4, align 8
  %7 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 0
  %8 = load %class.c_d*, %class.c_d** %7, align 8
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  %10 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %8, %class.c_d* dereferenceable(8) %9)
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %2
  %12 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 1
  %13 = load %class.c_d*, %class.c_d** %12, align 8
  store %class.c_d* %13, %class.c_d** %3, align 8
  br label %24

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 2
  %16 = load %class.LL*, %class.LL** %15, align 8
  %17 = icmp ne %class.LL* %16, null
  br i1 %17, label %18, label %23

; <label>:18                                      ; preds = %14
  %19 = getelementptr inbounds %class.LL, %class.LL* %6, i32 0, i32 2
  %20 = load %class.LL*, %class.LL** %19, align 8
  %21 = load %class.c_d*, %class.c_d** %5, align 8
  %22 = call %class.c_d* @_ZNK2LLI3c_dS0_E4findEPKS0_(%class.LL* %20, %class.c_d* %21)
  store %class.c_d* %22, %class.c_d** %3, align 8
  br label %24

; <label>:23                                      ; preds = %14
  store %class.c_d* null, %class.c_d** %3, align 8
  br label %24

; <label>:24                                      ; preds = %23, %18, %11
  %25 = load %class.c_d*, %class.c_d** %3, align 8
  ret %class.c_d* %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1EPKS0_S3_(%class.KV*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2EPKS0_S3_(%class.KV* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.0, align 8
  %17 = alloca %class.KV.0*, align 8
  %18 = alloca %class.KV.0*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.0*
  store %class.KV.0* %40, %class.KV.0** %17, align 8
  %41 = load %class.KV.0*, %class.KV.0** %17, align 8
  %42 = getelementptr inbounds %class.KV.0, %class.KV.0* %41, i64 0
  %43 = bitcast %class.KV.0* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.0*
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %44, %class.KV.0* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.0*, %class.KV.0** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %49, %class.KV.0* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.0*
  store %class.KV.0* %53, %class.KV.0** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.0*, %class.KV.0** %18, align 8
  %59 = getelementptr inbounds %class.KV.0, %class.KV.0* %58, i64 0
  %60 = bitcast %class.KV.0* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.0*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.0*, %class.KV.0** %18, align 8
  %65 = getelementptr inbounds %class.KV.0, %class.KV.0* %64, i64 1
  %66 = bitcast %class.KV.0* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.0*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.0*, %class.KV.0** %18, align 8
  %72 = getelementptr inbounds %class.KV.0, %class.KV.0* %71, i64 0
  %73 = bitcast %class.KV.0* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.0*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.0*, %class.KV.0** %18, align 8
  %78 = getelementptr inbounds %class.KV.0, %class.KV.0* %77, i64 1
  %79 = bitcast %class.KV.0* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.0*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.0*, %class.KV.0** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %92, %class.KV.0* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV* noalias sret, %class.KV* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.0*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.0*, align 8
  %19 = alloca %class.KV.0, align 8
  %20 = alloca %class.KV.0, align 8
  %21 = alloca %class.KV.0*, align 8
  %22 = alloca %class.KV.0, align 8
  %23 = alloca %class.KV.0*, align 8
  %24 = alloca %class.KV.0*, align 8
  store %class.KV* %1, %class.KV** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV*, %class.KV** %7, align 8
  %26 = getelementptr inbounds %class.KV, %class.KV* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %26 to %class.KV.0**
  %28 = load %class.KV.0*, %class.KV.0** %27, align 8
  store %class.KV.0* %28, %class.KV.0** %12, align 8
  %29 = load %class.KV*, %class.KV** %7, align 8
  %30 = getelementptr inbounds %class.KV, %class.KV* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.0*, %class.KV.0** %12, align 8
  %62 = getelementptr inbounds %class.KV.0, %class.KV.0* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.0, %class.KV.0* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.0*, %class.KV.0** %12, align 8
  %72 = getelementptr inbounds %class.KV.0, %class.KV.0* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.0, %class.KV.0* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.0*, %class.KV.0** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %79, i32 %80, i32 %81, %class.KV.0* dereferenceable(16) %19)
  store %class.KV.0* %84, %class.KV.0** %18, align 8
  %85 = load %class.KV*, %class.KV** %7, align 8
  %86 = getelementptr inbounds %class.KV, %class.KV* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.0*, %class.KV.0** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %88, %class.KV.0* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.0*, %class.KV.0** %12, align 8
  %97 = getelementptr inbounds %class.KV.0, %class.KV.0* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.0, %class.KV.0* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 10
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.0*, %class.KV.0** %12, align 8
  %106 = getelementptr inbounds %class.KV.0, %class.KV.0* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.0, %class.KV.0* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.0*, %class.KV.0** %12, align 8
  %113 = getelementptr inbounds %class.KV.0, %class.KV.0* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.0, %class.KV.0* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.0*, %class.KV.0** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %121, i32 %122, i32 %123, %class.KV.0* dereferenceable(16) %20)
  store %class.KV.0* %124, %class.KV.0** %21, align 8
  %125 = load %class.KV*, %class.KV** %7, align 8
  %126 = getelementptr inbounds %class.KV, %class.KV* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.0*, %class.KV.0** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %128, %class.KV.0* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.0*, %class.KV.0** %12, align 8
  %134 = getelementptr inbounds %class.KV.0, %class.KV.0* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.0* sret %22, %class.KV.0* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.0*, %class.KV.0** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %140, i32 %141, i32 %142, %class.KV.0* dereferenceable(16) %22)
  store %class.KV.0* %143, %class.KV.0** %23, align 8
  %144 = load %class.KV*, %class.KV** %7, align 8
  %145 = getelementptr inbounds %class.KV, %class.KV* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.0*, %class.KV.0** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %147, %class.KV.0* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.0*
  store %class.KV.0* %158, %class.KV.0** %24, align 8
  %159 = load %class.KV.0*, %class.KV.0** %24, align 8
  %160 = bitcast %class.KV.0* %159 to i8*
  %161 = load %class.KV.0*, %class.KV.0** %12, align 8
  %162 = bitcast %class.KV.0* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.0*, %class.KV.0** %24, align 8
  %170 = getelementptr inbounds %class.KV.0, %class.KV.0* %169, i64 %168
  %171 = bitcast %class.KV.0* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.0*, %class.KV.0** %12, align 8
  %175 = getelementptr inbounds %class.KV.0, %class.KV.0* %174, i64 %173
  %176 = bitcast %class.KV.0* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.0*, %class.KV.0** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.0, %class.KV.0* %182, i64 %184
  %186 = bitcast %class.KV.0* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.0*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.0*, %class.KV.0** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %196, %class.KV.0* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2EPKS0_S3_(%class.KV*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 0>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 0>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 0>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 0>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 0>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 0>::Key"* %0, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Key"*, %"union.KV<c_d, c_d, 0>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.0* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.2, align 8
  %17 = alloca %class.KV.2*, align 8
  %18 = alloca %class.KV.2*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.2*
  store %class.KV.2* %40, %class.KV.2** %17, align 8
  %41 = load %class.KV.2*, %class.KV.2** %17, align 8
  %42 = getelementptr inbounds %class.KV.2, %class.KV.2* %41, i64 0
  %43 = bitcast %class.KV.2* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.2*
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %44, %class.KV.2* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.2*, %class.KV.2** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %49, %class.KV.2* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.2*
  store %class.KV.2* %53, %class.KV.2** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.2*, %class.KV.2** %18, align 8
  %59 = getelementptr inbounds %class.KV.2, %class.KV.2* %58, i64 0
  %60 = bitcast %class.KV.2* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.2*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.2*, %class.KV.2** %18, align 8
  %65 = getelementptr inbounds %class.KV.2, %class.KV.2* %64, i64 1
  %66 = bitcast %class.KV.2* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.2*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.2*, %class.KV.2** %18, align 8
  %72 = getelementptr inbounds %class.KV.2, %class.KV.2* %71, i64 0
  %73 = bitcast %class.KV.2* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.2*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.2*, %class.KV.2** %18, align 8
  %78 = getelementptr inbounds %class.KV.2, %class.KV.2* %77, i64 1
  %79 = bitcast %class.KV.2* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.2*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.2*, %class.KV.2** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %92, %class.KV.2* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = load %class.KV.0*, %class.KV.0** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2ERKS1_(%class.KV.0* %5, %class.KV.0* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV*, i64, %class.KV.0*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.0*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.0* %2, %class.KV.0** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2EyPKS_IS0_S0_Lj1EE(%class.KV* %7, i64 %8, %class.KV.0* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1EPKS0_S3_(%class.KV.0*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2EPKS0_S3_(%class.KV.0* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.3, align 8
  %17 = alloca %class.KV.3*, align 8
  %18 = alloca %class.KV.3*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.3*
  store %class.KV.3* %40, %class.KV.3** %17, align 8
  %41 = load %class.KV.3*, %class.KV.3** %17, align 8
  %42 = getelementptr inbounds %class.KV.3, %class.KV.3* %41, i64 0
  %43 = bitcast %class.KV.3* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.3*
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %44, %class.KV.3* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.3*, %class.KV.3** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %49, %class.KV.3* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.3*
  store %class.KV.3* %53, %class.KV.3** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.3*, %class.KV.3** %18, align 8
  %59 = getelementptr inbounds %class.KV.3, %class.KV.3* %58, i64 0
  %60 = bitcast %class.KV.3* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.3*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.3*, %class.KV.3** %18, align 8
  %65 = getelementptr inbounds %class.KV.3, %class.KV.3* %64, i64 1
  %66 = bitcast %class.KV.3* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.3*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.3*, %class.KV.3** %18, align 8
  %72 = getelementptr inbounds %class.KV.3, %class.KV.3* %71, i64 0
  %73 = bitcast %class.KV.3* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.3*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.3*, %class.KV.3** %18, align 8
  %78 = getelementptr inbounds %class.KV.3, %class.KV.3* %77, i64 1
  %79 = bitcast %class.KV.3* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.3*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.3*, %class.KV.3** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %92, %class.KV.3* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = load %class.KV.2*, %class.KV.2** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2ERKS1_(%class.KV.2* %5, %class.KV.2* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0*, i64, %class.KV.2*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.2*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.2* %2, %class.KV.2** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC2EyPKS_IS0_S0_Lj2EE(%class.KV.0* %7, i64 %8, %class.KV.2* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2EPKS0_S3_(%class.KV.2* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.4, align 8
  %17 = alloca %class.KV.4*, align 8
  %18 = alloca %class.KV.4*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.4*
  store %class.KV.4* %40, %class.KV.4** %17, align 8
  %41 = load %class.KV.4*, %class.KV.4** %17, align 8
  %42 = getelementptr inbounds %class.KV.4, %class.KV.4* %41, i64 0
  %43 = bitcast %class.KV.4* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.4*
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %44, %class.KV.4* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.4*, %class.KV.4** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %49, %class.KV.4* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.4*
  store %class.KV.4* %53, %class.KV.4** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.4*, %class.KV.4** %18, align 8
  %59 = getelementptr inbounds %class.KV.4, %class.KV.4* %58, i64 0
  %60 = bitcast %class.KV.4* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.4*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.4*, %class.KV.4** %18, align 8
  %65 = getelementptr inbounds %class.KV.4, %class.KV.4* %64, i64 1
  %66 = bitcast %class.KV.4* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.4*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.4*, %class.KV.4** %18, align 8
  %72 = getelementptr inbounds %class.KV.4, %class.KV.4* %71, i64 0
  %73 = bitcast %class.KV.4* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.4*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.4*, %class.KV.4** %18, align 8
  %78 = getelementptr inbounds %class.KV.4, %class.KV.4* %77, i64 1
  %79 = bitcast %class.KV.4* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.4*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.4*, %class.KV.4** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %92, %class.KV.4* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = load %class.KV.3*, %class.KV.3** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2ERKS1_(%class.KV.3* %5, %class.KV.3* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2*, i64, %class.KV.3*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.3*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.3* %2, %class.KV.3** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC2EyPKS_IS0_S0_Lj3EE(%class.KV.2* %7, i64 %8, %class.KV.3* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2EPKS0_S3_(%class.KV.3* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.5, align 8
  %17 = alloca %class.KV.5*, align 8
  %18 = alloca %class.KV.5*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.5*
  store %class.KV.5* %40, %class.KV.5** %17, align 8
  %41 = load %class.KV.5*, %class.KV.5** %17, align 8
  %42 = getelementptr inbounds %class.KV.5, %class.KV.5* %41, i64 0
  %43 = bitcast %class.KV.5* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.5*
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %44, %class.KV.5* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.5*, %class.KV.5** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %49, %class.KV.5* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.5*
  store %class.KV.5* %53, %class.KV.5** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.5*, %class.KV.5** %18, align 8
  %59 = getelementptr inbounds %class.KV.5, %class.KV.5* %58, i64 0
  %60 = bitcast %class.KV.5* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.5*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.5*, %class.KV.5** %18, align 8
  %65 = getelementptr inbounds %class.KV.5, %class.KV.5* %64, i64 1
  %66 = bitcast %class.KV.5* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.5*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.5*, %class.KV.5** %18, align 8
  %72 = getelementptr inbounds %class.KV.5, %class.KV.5* %71, i64 0
  %73 = bitcast %class.KV.5* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.5*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.5*, %class.KV.5** %18, align 8
  %78 = getelementptr inbounds %class.KV.5, %class.KV.5* %77, i64 1
  %79 = bitcast %class.KV.5* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.5*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.5*, %class.KV.5** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %92, %class.KV.5* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = load %class.KV.4*, %class.KV.4** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2ERKS1_(%class.KV.4* %5, %class.KV.4* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3*, i64, %class.KV.4*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.4*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.4* %2, %class.KV.4** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC2EyPKS_IS0_S0_Lj4EE(%class.KV.3* %7, i64 %8, %class.KV.4* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2EPKS0_S3_(%class.KV.4* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.6, align 8
  %17 = alloca %class.KV.6*, align 8
  %18 = alloca %class.KV.6*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.6*
  store %class.KV.6* %40, %class.KV.6** %17, align 8
  %41 = load %class.KV.6*, %class.KV.6** %17, align 8
  %42 = getelementptr inbounds %class.KV.6, %class.KV.6* %41, i64 0
  %43 = bitcast %class.KV.6* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.6*
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %44, %class.KV.6* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.6*, %class.KV.6** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %49, %class.KV.6* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.6*
  store %class.KV.6* %53, %class.KV.6** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.6*, %class.KV.6** %18, align 8
  %59 = getelementptr inbounds %class.KV.6, %class.KV.6* %58, i64 0
  %60 = bitcast %class.KV.6* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.6*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.6*, %class.KV.6** %18, align 8
  %65 = getelementptr inbounds %class.KV.6, %class.KV.6* %64, i64 1
  %66 = bitcast %class.KV.6* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.6*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.6*, %class.KV.6** %18, align 8
  %72 = getelementptr inbounds %class.KV.6, %class.KV.6* %71, i64 0
  %73 = bitcast %class.KV.6* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.6*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.6*, %class.KV.6** %18, align 8
  %78 = getelementptr inbounds %class.KV.6, %class.KV.6* %77, i64 1
  %79 = bitcast %class.KV.6* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.6*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.6*, %class.KV.6** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %92, %class.KV.6* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = load %class.KV.5*, %class.KV.5** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2ERKS1_(%class.KV.5* %5, %class.KV.5* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4*, i64, %class.KV.5*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.5*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.5* %2, %class.KV.5** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC2EyPKS_IS0_S0_Lj5EE(%class.KV.4* %7, i64 %8, %class.KV.5* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2EPKS0_S3_(%class.KV.5* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.7, align 8
  %17 = alloca %class.KV.7*, align 8
  %18 = alloca %class.KV.7*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.7*
  store %class.KV.7* %40, %class.KV.7** %17, align 8
  %41 = load %class.KV.7*, %class.KV.7** %17, align 8
  %42 = getelementptr inbounds %class.KV.7, %class.KV.7* %41, i64 0
  %43 = bitcast %class.KV.7* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.7*
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %44, %class.KV.7* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.7*, %class.KV.7** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %49, %class.KV.7* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.7*
  store %class.KV.7* %53, %class.KV.7** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.7*, %class.KV.7** %18, align 8
  %59 = getelementptr inbounds %class.KV.7, %class.KV.7* %58, i64 0
  %60 = bitcast %class.KV.7* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.7*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.7*, %class.KV.7** %18, align 8
  %65 = getelementptr inbounds %class.KV.7, %class.KV.7* %64, i64 1
  %66 = bitcast %class.KV.7* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.7*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.7*, %class.KV.7** %18, align 8
  %72 = getelementptr inbounds %class.KV.7, %class.KV.7* %71, i64 0
  %73 = bitcast %class.KV.7* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.7*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.7*, %class.KV.7** %18, align 8
  %78 = getelementptr inbounds %class.KV.7, %class.KV.7* %77, i64 1
  %79 = bitcast %class.KV.7* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.7*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.7*, %class.KV.7** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %92, %class.KV.7* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = load %class.KV.6*, %class.KV.6** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2ERKS1_(%class.KV.6* %5, %class.KV.6* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5*, i64, %class.KV.6*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.6*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.6* %2, %class.KV.6** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC2EyPKS_IS0_S0_Lj6EE(%class.KV.5* %7, i64 %8, %class.KV.6* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2EPKS0_S3_(%class.KV.6* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.8, align 8
  %17 = alloca %class.KV.8*, align 8
  %18 = alloca %class.KV.8*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.8*
  store %class.KV.8* %40, %class.KV.8** %17, align 8
  %41 = load %class.KV.8*, %class.KV.8** %17, align 8
  %42 = getelementptr inbounds %class.KV.8, %class.KV.8* %41, i64 0
  %43 = bitcast %class.KV.8* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.8*
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %44, %class.KV.8* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.8*, %class.KV.8** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %49, %class.KV.8* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.8*
  store %class.KV.8* %53, %class.KV.8** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.8*, %class.KV.8** %18, align 8
  %59 = getelementptr inbounds %class.KV.8, %class.KV.8* %58, i64 0
  %60 = bitcast %class.KV.8* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.8*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.8*, %class.KV.8** %18, align 8
  %65 = getelementptr inbounds %class.KV.8, %class.KV.8* %64, i64 1
  %66 = bitcast %class.KV.8* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.8*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.8*, %class.KV.8** %18, align 8
  %72 = getelementptr inbounds %class.KV.8, %class.KV.8* %71, i64 0
  %73 = bitcast %class.KV.8* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.8*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.8*, %class.KV.8** %18, align 8
  %78 = getelementptr inbounds %class.KV.8, %class.KV.8* %77, i64 1
  %79 = bitcast %class.KV.8* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.8*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.8*, %class.KV.8** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %92, %class.KV.8* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = load %class.KV.7*, %class.KV.7** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2ERKS1_(%class.KV.7* %5, %class.KV.7* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6*, i64, %class.KV.7*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.7*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.7* %2, %class.KV.7** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC2EyPKS_IS0_S0_Lj7EE(%class.KV.6* %7, i64 %8, %class.KV.7* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2EPKS0_S3_(%class.KV.7* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.9, align 8
  %17 = alloca %class.KV.9*, align 8
  %18 = alloca %class.KV.9*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.9*
  store %class.KV.9* %40, %class.KV.9** %17, align 8
  %41 = load %class.KV.9*, %class.KV.9** %17, align 8
  %42 = getelementptr inbounds %class.KV.9, %class.KV.9* %41, i64 0
  %43 = bitcast %class.KV.9* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.9*
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %44, %class.KV.9* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.9*, %class.KV.9** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %49, %class.KV.9* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.9*
  store %class.KV.9* %53, %class.KV.9** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.9*, %class.KV.9** %18, align 8
  %59 = getelementptr inbounds %class.KV.9, %class.KV.9* %58, i64 0
  %60 = bitcast %class.KV.9* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.9*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.9*, %class.KV.9** %18, align 8
  %65 = getelementptr inbounds %class.KV.9, %class.KV.9* %64, i64 1
  %66 = bitcast %class.KV.9* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.9*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.9*, %class.KV.9** %18, align 8
  %72 = getelementptr inbounds %class.KV.9, %class.KV.9* %71, i64 0
  %73 = bitcast %class.KV.9* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.9*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.9*, %class.KV.9** %18, align 8
  %78 = getelementptr inbounds %class.KV.9, %class.KV.9* %77, i64 1
  %79 = bitcast %class.KV.9* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.9*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.9*, %class.KV.9** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %92, %class.KV.9* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = load %class.KV.8*, %class.KV.8** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2ERKS1_(%class.KV.8* %5, %class.KV.8* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7*, i64, %class.KV.8*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.8*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.8* %2, %class.KV.8** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC2EyPKS_IS0_S0_Lj8EE(%class.KV.7* %7, i64 %8, %class.KV.8* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2EPKS0_S3_(%class.KV.8* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.10, align 8
  %17 = alloca %class.KV.10*, align 8
  %18 = alloca %class.KV.10*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = and i64 %19, 63
  %21 = urem i64 %20, 63
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %14, align 4
  %23 = load i64, i64* %11, align 8
  %24 = and i64 %23, 63
  %25 = urem i64 %24, 63
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %14, align 4
  %28 = load i32, i32* %15, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %51

; <label>:30                                      ; preds = %7
  %31 = load i64, i64* %8, align 8
  %32 = lshr i64 %31, 6
  %33 = load %class.c_d*, %class.c_d** %9, align 8
  %34 = load %class.c_d*, %class.c_d** %10, align 8
  %35 = load i64, i64* %11, align 8
  %36 = lshr i64 %35, 6
  %37 = load %class.c_d*, %class.c_d** %12, align 8
  %38 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* sret %16, i64 %32, %class.c_d* %33, %class.c_d* %34, i64 %36, %class.c_d* %37, %class.c_d* %38)
  %39 = call i8* @malloc(i64 16)
  %40 = bitcast i8* %39 to %class.KV.10*
  store %class.KV.10* %40, %class.KV.10** %17, align 8
  %41 = load %class.KV.10*, %class.KV.10** %17, align 8
  %42 = getelementptr inbounds %class.KV.10, %class.KV.10* %41, i64 0
  %43 = bitcast %class.KV.10* %42 to i8*
  %44 = bitcast i8* %43 to %class.KV.10*
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %44, %class.KV.10* dereferenceable(16) %16)
  %45 = load i32, i32* %14, align 4
  %46 = zext i32 %45 to i64
  %47 = shl i64 1, %46
  %48 = shl i64 %47, 1
  %49 = or i64 %48, 1
  %50 = load %class.KV.10*, %class.KV.10** %17, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %49, %class.KV.10* %50)
  br label %94

; <label>:51                                      ; preds = %7
  %52 = call i8* @malloc(i64 32)
  %53 = bitcast i8* %52 to %class.KV.10*
  store %class.KV.10* %53, %class.KV.10** %18, align 8
  %54 = load i32, i32* %15, align 4
  %55 = load i32, i32* %14, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %57, label %70

; <label>:57                                      ; preds = %51
  %58 = load %class.KV.10*, %class.KV.10** %18, align 8
  %59 = getelementptr inbounds %class.KV.10, %class.KV.10* %58, i64 0
  %60 = bitcast %class.KV.10* %59 to i8*
  %61 = bitcast i8* %60 to %class.KV.10*
  %62 = load %class.c_d*, %class.c_d** %12, align 8
  %63 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %61, %class.c_d* %62, %class.c_d* %63)
  %64 = load %class.KV.10*, %class.KV.10** %18, align 8
  %65 = getelementptr inbounds %class.KV.10, %class.KV.10* %64, i64 1
  %66 = bitcast %class.KV.10* %65 to i8*
  %67 = bitcast i8* %66 to %class.KV.10*
  %68 = load %class.c_d*, %class.c_d** %9, align 8
  %69 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %67, %class.c_d* %68, %class.c_d* %69)
  br label %83

; <label>:70                                      ; preds = %51
  %71 = load %class.KV.10*, %class.KV.10** %18, align 8
  %72 = getelementptr inbounds %class.KV.10, %class.KV.10* %71, i64 0
  %73 = bitcast %class.KV.10* %72 to i8*
  %74 = bitcast i8* %73 to %class.KV.10*
  %75 = load %class.c_d*, %class.c_d** %9, align 8
  %76 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %74, %class.c_d* %75, %class.c_d* %76)
  %77 = load %class.KV.10*, %class.KV.10** %18, align 8
  %78 = getelementptr inbounds %class.KV.10, %class.KV.10* %77, i64 1
  %79 = bitcast %class.KV.10* %78 to i8*
  %80 = bitcast i8* %79 to %class.KV.10*
  %81 = load %class.c_d*, %class.c_d** %12, align 8
  %82 = load %class.c_d*, %class.c_d** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %80, %class.c_d* %81, %class.c_d* %82)
  br label %83

; <label>:83                                      ; preds = %70, %57
  %84 = load i32, i32* %14, align 4
  %85 = zext i32 %84 to i64
  %86 = shl i64 1, %85
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = shl i64 1, %88
  %90 = or i64 %86, %89
  %91 = shl i64 %90, 1
  %92 = or i64 %91, 1
  %93 = load %class.KV.10*, %class.KV.10** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %92, %class.KV.10* %93)
  br label %94

; <label>:94                                      ; preds = %83, %30
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = load %class.KV.9*, %class.KV.9** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2ERKS1_(%class.KV.9* %5, %class.KV.9* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8*, i64, %class.KV.9*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.9*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.9* %2, %class.KV.9** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC2EyPKS_IS0_S0_Lj9EE(%class.KV.8* %7, i64 %8, %class.KV.9* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2EPKS0_S3_(%class.KV.9* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* noalias sret, i64, %class.c_d*, %class.c_d*, i64, %class.c_d*, %class.c_d*) #0 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %class.c_d*, align 8
  %13 = alloca %class.c_d*, align 8
  %14 = alloca %class.LL*, align 8
  %15 = alloca %class.LL*, align 8
  store i64 %1, i64* %8, align 8
  store %class.c_d* %2, %class.c_d** %9, align 8
  store %class.c_d* %3, %class.c_d** %10, align 8
  store i64 %4, i64* %11, align 8
  store %class.c_d* %5, %class.c_d** %12, align 8
  store %class.c_d* %6, %class.c_d** %13, align 8
  %16 = call i8* @malloc(i64 24)
  %17 = bitcast i8* %16 to %class.LL*
  %18 = bitcast %class.LL* %17 to i8*
  %19 = bitcast i8* %18 to %class.LL*
  %20 = load %class.c_d*, %class.c_d** %9, align 8
  %21 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %19, %class.c_d* %20, %class.c_d* %21, %class.LL* null)
  store %class.LL* %19, %class.LL** %14, align 8
  %22 = call i8* @malloc(i64 24)
  %23 = bitcast i8* %22 to %class.LL*
  %24 = bitcast %class.LL* %23 to i8*
  %25 = bitcast i8* %24 to %class.LL*
  %26 = load %class.c_d*, %class.c_d** %12, align 8
  %27 = load %class.c_d*, %class.c_d** %13, align 8
  %28 = load %class.LL*, %class.LL** %14, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %25, %class.c_d* %26, %class.c_d* %27, %class.LL* %28)
  store %class.LL* %25, %class.LL** %15, align 8
  %29 = load %class.LL*, %class.LL** %15, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %29)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = load %class.KV.10*, %class.KV.10** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2ERKS1_(%class.KV.10* %5, %class.KV.10* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9*, i64, %class.KV.10*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.10*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.10* %2, %class.KV.10** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC2EyPKS_IS0_S0_Lj10EE(%class.KV.9* %7, i64 %8, %class.KV.10* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = load %class.c_d*, %class.c_d** %5, align 8
  %9 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2EPKS0_S3_(%class.KV.10* %7, %class.c_d* %8, %class.c_d* %9)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL*, %class.c_d*, %class.c_d*, %class.LL*) unnamed_addr #0 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  store %class.LL* %3, %class.LL** %8, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = load %class.c_d*, %class.c_d** %6, align 8
  %11 = load %class.c_d*, %class.c_d** %7, align 8
  %12 = load %class.LL*, %class.LL** %8, align 8
  call void @_ZN2LLI3c_dS0_EC2EPKS0_S3_PKS1_(%class.LL* %9, %class.c_d* %10, %class.c_d* %11, %class.LL* %12)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10*, i64, %class.LL*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.LL*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.LL* %2, %class.LL** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load %class.LL*, %class.LL** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC2EyPK2LLIS0_S0_E(%class.KV.10* %7, i64 %8, %class.LL* %9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2LLI3c_dS0_EC2EPKS0_S3_PKS1_(%class.LL*, %class.c_d*, %class.c_d*, %class.LL*) unnamed_addr #3 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store %class.c_d* %2, %class.c_d** %7, align 8
  store %class.LL* %3, %class.LL** %8, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  store %class.c_d* %11, %class.c_d** %10, align 8
  %12 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 1
  %13 = load %class.c_d*, %class.c_d** %7, align 8
  store %class.c_d* %13, %class.c_d** %12, align 8
  %14 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %15 = load %class.LL*, %class.LL** %8, align 8
  store %class.LL* %15, %class.LL** %14, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2EyPK2LLIS0_S0_E(%class.KV.10*, i64, %class.LL*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.LL*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.LL* %2, %class.LL** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC1Ey(%"union.KV<c_d, c_d, 10>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 1
  %11 = load %class.LL*, %class.LL** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"* %10, %class.LL* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC1Ey(%"union.KV<c_d, c_d, 10>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC2Ey(%"union.KV<c_d, c_d, 10>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"*, %class.LL*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.LL*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.LL* %1, %class.LL** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = load %class.LL*, %class.LL** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"* %5, %class.LL* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC2Ey(%"union.KV<c_d, c_d, 10>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPK2LLIS0_S0_E(%"union.KV<c_d, c_d, 10>::Val"*, %class.LL*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.LL*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.LL* %1, %class.LL** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %5 to %class.LL**
  %7 = load %class.LL*, %class.LL** %4, align 8
  store %class.LL* %7, %class.LL** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2ERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 0
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 1
  %12 = load %class.KV.10*, %class.KV.10** %4, align 8
  %13 = getelementptr inbounds %class.KV.10, %class.KV.10* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2EyPKS_IS0_S0_Lj10EE(%class.KV.9*, i64, %class.KV.10*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.10*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.10* %2, %class.KV.10** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC1Ey(%"union.KV<c_d, c_d, 9>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 1
  %11 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"* %10, %class.KV.10* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC1Ey(%"union.KV<c_d, c_d, 9>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC2Ey(%"union.KV<c_d, c_d, 9>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"*, %class.KV.10*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = load %class.KV.10*, %class.KV.10** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"* %5, %class.KV.10* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC2Ey(%"union.KV<c_d, c_d, 9>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS_IS0_S0_Lj10EE(%"union.KV<c_d, c_d, 9>::Val"*, %class.KV.10*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %5 to %class.KV.10**
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  store %class.KV.10* %7, %class.KV.10** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EEC2EPKS0_S3_(%class.KV.10*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.10*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.10* %0, %class.KV.10** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.10*, %class.KV.10** %4, align 8
  %8 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 10>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 10>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 10>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 10>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 10>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 10>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 10>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Key"* %0, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Key"*, %"union.KV<c_d, c_d, 10>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 10>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 10>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 10>::Val"* %0, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 10>::Val"*, %"union.KV<c_d, c_d, 10>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2ERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 0
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 1
  %12 = load %class.KV.9*, %class.KV.9** %4, align 8
  %13 = getelementptr inbounds %class.KV.9, %class.KV.9* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2EyPKS_IS0_S0_Lj9EE(%class.KV.8*, i64, %class.KV.9*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.9*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.9* %2, %class.KV.9** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC1Ey(%"union.KV<c_d, c_d, 8>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 1
  %11 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"* %10, %class.KV.9* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC1Ey(%"union.KV<c_d, c_d, 8>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC2Ey(%"union.KV<c_d, c_d, 8>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"*, %class.KV.9*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = load %class.KV.9*, %class.KV.9** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"* %5, %class.KV.9* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC2Ey(%"union.KV<c_d, c_d, 8>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS_IS0_S0_Lj9EE(%"union.KV<c_d, c_d, 8>::Val"*, %class.KV.9*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %5 to %class.KV.9**
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  store %class.KV.9* %7, %class.KV.9** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EEC2EPKS0_S3_(%class.KV.9*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.9*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.9* %0, %class.KV.9** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.9*, %class.KV.9** %4, align 8
  %8 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 9>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 9>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 9>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 9>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 9>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 9>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 9>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Key"* %0, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Key"*, %"union.KV<c_d, c_d, 9>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 9>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 9>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 9>::Val"* %0, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 9>::Val"*, %"union.KV<c_d, c_d, 9>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2ERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 0
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 1
  %12 = load %class.KV.8*, %class.KV.8** %4, align 8
  %13 = getelementptr inbounds %class.KV.8, %class.KV.8* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2EyPKS_IS0_S0_Lj8EE(%class.KV.7*, i64, %class.KV.8*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.8*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.8* %2, %class.KV.8** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC1Ey(%"union.KV<c_d, c_d, 7>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 1
  %11 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"* %10, %class.KV.8* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC1Ey(%"union.KV<c_d, c_d, 7>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC2Ey(%"union.KV<c_d, c_d, 7>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"*, %class.KV.8*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = load %class.KV.8*, %class.KV.8** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"* %5, %class.KV.8* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC2Ey(%"union.KV<c_d, c_d, 7>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS_IS0_S0_Lj8EE(%"union.KV<c_d, c_d, 7>::Val"*, %class.KV.8*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %5 to %class.KV.8**
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  store %class.KV.8* %7, %class.KV.8** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EEC2EPKS0_S3_(%class.KV.8*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.8*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.8* %0, %class.KV.8** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.8*, %class.KV.8** %4, align 8
  %8 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 8>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 8>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 8>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 8>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 8>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 8>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 8>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Key"* %0, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Key"*, %"union.KV<c_d, c_d, 8>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 8>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 8>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 8>::Val"* %0, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 8>::Val"*, %"union.KV<c_d, c_d, 8>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2ERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 0
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 1
  %12 = load %class.KV.7*, %class.KV.7** %4, align 8
  %13 = getelementptr inbounds %class.KV.7, %class.KV.7* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2EyPKS_IS0_S0_Lj7EE(%class.KV.6*, i64, %class.KV.7*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.7*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.7* %2, %class.KV.7** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC1Ey(%"union.KV<c_d, c_d, 6>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 1
  %11 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"* %10, %class.KV.7* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC1Ey(%"union.KV<c_d, c_d, 6>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC2Ey(%"union.KV<c_d, c_d, 6>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"*, %class.KV.7*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = load %class.KV.7*, %class.KV.7** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"* %5, %class.KV.7* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC2Ey(%"union.KV<c_d, c_d, 6>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS_IS0_S0_Lj7EE(%"union.KV<c_d, c_d, 6>::Val"*, %class.KV.7*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %5 to %class.KV.7**
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  store %class.KV.7* %7, %class.KV.7** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EEC2EPKS0_S3_(%class.KV.7*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.7*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.7* %0, %class.KV.7** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.7*, %class.KV.7** %4, align 8
  %8 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 7>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 7>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 7>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 7>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 7>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 7>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 7>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Key"* %0, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Key"*, %"union.KV<c_d, c_d, 7>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 7>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 7>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 7>::Val"* %0, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 7>::Val"*, %"union.KV<c_d, c_d, 7>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2ERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 0
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 1
  %12 = load %class.KV.6*, %class.KV.6** %4, align 8
  %13 = getelementptr inbounds %class.KV.6, %class.KV.6* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2EyPKS_IS0_S0_Lj6EE(%class.KV.5*, i64, %class.KV.6*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.6*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.6* %2, %class.KV.6** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC1Ey(%"union.KV<c_d, c_d, 5>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 1
  %11 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"* %10, %class.KV.6* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC1Ey(%"union.KV<c_d, c_d, 5>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC2Ey(%"union.KV<c_d, c_d, 5>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"*, %class.KV.6*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = load %class.KV.6*, %class.KV.6** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"* %5, %class.KV.6* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC2Ey(%"union.KV<c_d, c_d, 5>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS_IS0_S0_Lj6EE(%"union.KV<c_d, c_d, 5>::Val"*, %class.KV.6*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %5 to %class.KV.6**
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  store %class.KV.6* %7, %class.KV.6** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EEC2EPKS0_S3_(%class.KV.6*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.6*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.6* %0, %class.KV.6** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.6*, %class.KV.6** %4, align 8
  %8 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 6>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 6>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 6>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 6>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 6>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 6>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 6>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Key"* %0, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Key"*, %"union.KV<c_d, c_d, 6>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 6>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 6>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 6>::Val"* %0, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 6>::Val"*, %"union.KV<c_d, c_d, 6>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2ERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 0
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 1
  %12 = load %class.KV.5*, %class.KV.5** %4, align 8
  %13 = getelementptr inbounds %class.KV.5, %class.KV.5* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2EyPKS_IS0_S0_Lj5EE(%class.KV.4*, i64, %class.KV.5*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.5*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.5* %2, %class.KV.5** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC1Ey(%"union.KV<c_d, c_d, 4>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 1
  %11 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"* %10, %class.KV.5* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC1Ey(%"union.KV<c_d, c_d, 4>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC2Ey(%"union.KV<c_d, c_d, 4>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"*, %class.KV.5*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = load %class.KV.5*, %class.KV.5** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"* %5, %class.KV.5* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC2Ey(%"union.KV<c_d, c_d, 4>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS_IS0_S0_Lj5EE(%"union.KV<c_d, c_d, 4>::Val"*, %class.KV.5*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %5 to %class.KV.5**
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  store %class.KV.5* %7, %class.KV.5** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EEC2EPKS0_S3_(%class.KV.5*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.5*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.5* %0, %class.KV.5** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.5*, %class.KV.5** %4, align 8
  %8 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 5>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 5>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 5>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 5>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 5>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 5>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 5>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Key"* %0, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Key"*, %"union.KV<c_d, c_d, 5>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 5>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 5>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 5>::Val"* %0, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 5>::Val"*, %"union.KV<c_d, c_d, 5>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2ERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 0
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 1
  %12 = load %class.KV.4*, %class.KV.4** %4, align 8
  %13 = getelementptr inbounds %class.KV.4, %class.KV.4* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2EyPKS_IS0_S0_Lj4EE(%class.KV.3*, i64, %class.KV.4*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.4*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.4* %2, %class.KV.4** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC1Ey(%"union.KV<c_d, c_d, 3>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 1
  %11 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"* %10, %class.KV.4* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC1Ey(%"union.KV<c_d, c_d, 3>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC2Ey(%"union.KV<c_d, c_d, 3>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"*, %class.KV.4*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = load %class.KV.4*, %class.KV.4** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"* %5, %class.KV.4* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC2Ey(%"union.KV<c_d, c_d, 3>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS_IS0_S0_Lj4EE(%"union.KV<c_d, c_d, 3>::Val"*, %class.KV.4*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %5 to %class.KV.4**
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  store %class.KV.4* %7, %class.KV.4** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EEC2EPKS0_S3_(%class.KV.4*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.4*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.4* %0, %class.KV.4** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.4*, %class.KV.4** %4, align 8
  %8 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 4>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 4>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 4>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 4>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 4>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 4>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 4>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Key"* %0, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Key"*, %"union.KV<c_d, c_d, 4>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 4>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 4>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 4>::Val"* %0, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 4>::Val"*, %"union.KV<c_d, c_d, 4>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2ERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 0
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 1
  %12 = load %class.KV.3*, %class.KV.3** %4, align 8
  %13 = getelementptr inbounds %class.KV.3, %class.KV.3* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2EyPKS_IS0_S0_Lj3EE(%class.KV.2*, i64, %class.KV.3*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.3*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.3* %2, %class.KV.3** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC1Ey(%"union.KV<c_d, c_d, 2>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 1
  %11 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"* %10, %class.KV.3* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC1Ey(%"union.KV<c_d, c_d, 2>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC2Ey(%"union.KV<c_d, c_d, 2>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"*, %class.KV.3*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = load %class.KV.3*, %class.KV.3** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"* %5, %class.KV.3* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC2Ey(%"union.KV<c_d, c_d, 2>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS_IS0_S0_Lj3EE(%"union.KV<c_d, c_d, 2>::Val"*, %class.KV.3*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %5 to %class.KV.3**
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  store %class.KV.3* %7, %class.KV.3** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EEC2EPKS0_S3_(%class.KV.3*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.3*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.3* %0, %class.KV.3** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.3*, %class.KV.3** %4, align 8
  %8 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 3>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 3>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 3>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 3>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 3>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 3>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 3>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Key"* %0, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Key"*, %"union.KV<c_d, c_d, 3>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 3>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 3>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 3>::Val"* %0, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 3>::Val"*, %"union.KV<c_d, c_d, 3>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2ERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 0
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 1
  %12 = load %class.KV.2*, %class.KV.2** %4, align 8
  %13 = getelementptr inbounds %class.KV.2, %class.KV.2* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2EyPKS_IS0_S0_Lj2EE(%class.KV.0*, i64, %class.KV.2*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.2*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.2* %2, %class.KV.2** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC1Ey(%"union.KV<c_d, c_d, 1>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 1
  %11 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"* %10, %class.KV.2* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC1Ey(%"union.KV<c_d, c_d, 1>::Key"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = load i64, i64* %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC2Ey(%"union.KV<c_d, c_d, 1>::Key"* %5, i64 %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"*, %class.KV.2*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = load %class.KV.2*, %class.KV.2** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"* %5, %class.KV.2* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC2Ey(%"union.KV<c_d, c_d, 1>::Key"*, i64) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca i64, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %5 to i64*
  %7 = load i64, i64* %4, align 8
  store i64 %7, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS_IS0_S0_Lj2EE(%"union.KV<c_d, c_d, 1>::Val"*, %class.KV.2*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %5 to %class.KV.2**
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  store %class.KV.2* %7, %class.KV.2** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EEC2EPKS0_S3_(%class.KV.2*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.2*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.2* %0, %class.KV.2** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.2*, %class.KV.2** %4, align 8
  %8 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 2>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 2>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 2>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 2>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 2>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 2>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 2>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Key"* %0, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Key"*, %"union.KV<c_d, c_d, 2>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 2>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 2>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 2>::Val"* %0, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 2>::Val"*, %"union.KV<c_d, c_d, 2>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2ERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 0
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 1
  %12 = load %class.KV.0*, %class.KV.0** %4, align 8
  %13 = getelementptr inbounds %class.KV.0, %class.KV.0* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2EyPKS_IS0_S0_Lj1EE(%class.KV*, i64, %class.KV.0*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.KV.0*, align 8
  store %class.KV* %0, %class.KV** %4, align 8
  store i64 %1, i64* %5, align 8
  store %class.KV.0* %2, %class.KV.0** %6, align 8
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3KeyC1Ey(%"union.KV<c_d, c_d, 0>::Key"* %8, i64 %9)
  %10 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 1
  %11 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"* %10, %class.KV.0* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC1EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"*, %class.KV.0*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = load %class.KV.0*, %class.KV.0** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"* %5, %class.KV.0* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE3ValC2EPKS_IS0_S0_Lj1EE(%"union.KV<c_d, c_d, 0>::Val"*, %class.KV.0*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 0>::Val"*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %"union.KV<c_d, c_d, 0>::Val"* %0, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 0>::Val"*, %"union.KV<c_d, c_d, 0>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %5 to %class.KV.0**
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  store %class.KV.0* %7, %class.KV.0** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EEC2EPKS0_S3_(%class.KV.0*, %class.c_d*, %class.c_d*) unnamed_addr #0 align 2 {
  %4 = alloca %class.KV.0*, align 8
  %5 = alloca %class.c_d*, align 8
  %6 = alloca %class.c_d*, align 8
  store %class.KV.0* %0, %class.KV.0** %4, align 8
  store %class.c_d* %1, %class.c_d** %5, align 8
  store %class.c_d* %2, %class.c_d** %6, align 8
  %7 = load %class.KV.0*, %class.KV.0** %4, align 8
  %8 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 0
  %9 = load %class.c_d*, %class.c_d** %5, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 1>::Key"* %8, %class.c_d* %9)
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %7, i32 0, i32 1
  %11 = load %class.c_d*, %class.c_d** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 1>::Val"* %10, %class.c_d* %11)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC1EPKS0_(%"union.KV<c_d, c_d, 1>::Key"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 1>::Key"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC1EPKS0_(%"union.KV<c_d, c_d, 1>::Val"*, %class.c_d*) unnamed_addr #0 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = load %class.c_d*, %class.c_d** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 1>::Val"* %5, %class.c_d* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3KeyC2EPKS0_(%"union.KV<c_d, c_d, 1>::Key"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Key"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Key"* %0, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Key"*, %"union.KV<c_d, c_d, 1>::Key"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE3ValC2EPKS0_(%"union.KV<c_d, c_d, 1>::Val"*, %class.c_d*) unnamed_addr #3 align 2 {
  %3 = alloca %"union.KV<c_d, c_d, 1>::Val"*, align 8
  %4 = alloca %class.c_d*, align 8
  store %"union.KV<c_d, c_d, 1>::Val"* %0, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  store %class.c_d* %1, %class.c_d** %4, align 8
  %5 = load %"union.KV<c_d, c_d, 1>::Val"*, %"union.KV<c_d, c_d, 1>::Val"** %3, align 8
  %6 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %5 to %class.c_d**
  %7 = load %class.c_d*, %class.c_d** %4, align 8
  store %class.c_d* %7, %class.c_d** %6, align 8
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0*, i32, i32, %class.KV.0* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.0*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.0*, align 8
  %9 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.0* %3, %class.KV.0** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.0*
  store %class.KV.0* %14, %class.KV.0** %9, align 8
  %15 = load %class.KV.0*, %class.KV.0** %9, align 8
  %16 = bitcast %class.KV.0* %15 to i8*
  %17 = load %class.KV.0*, %class.KV.0** %5, align 8
  %18 = bitcast %class.KV.0* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.0*, %class.KV.0** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.0, %class.KV.0* %22, i64 %24
  %26 = bitcast %class.KV.0* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.0*
  %28 = load %class.KV.0*, %class.KV.0** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %27, %class.KV.0* dereferenceable(16) %28)
  %29 = load %class.KV.0*, %class.KV.0** %9, align 8
  ret %class.KV.0* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.0* noalias sret, %class.KV.0* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.0*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.2*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.2*, align 8
  %19 = alloca %class.KV.2, align 8
  %20 = alloca %class.KV.2, align 8
  %21 = alloca %class.KV.2*, align 8
  %22 = alloca %class.KV.2, align 8
  %23 = alloca %class.KV.2*, align 8
  %24 = alloca %class.KV.2*, align 8
  store %class.KV.0* %1, %class.KV.0** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.0*, %class.KV.0** %7, align 8
  %26 = getelementptr inbounds %class.KV.0, %class.KV.0* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %26 to %class.KV.2**
  %28 = load %class.KV.2*, %class.KV.2** %27, align 8
  store %class.KV.2* %28, %class.KV.2** %12, align 8
  %29 = load %class.KV.0*, %class.KV.0** %7, align 8
  %30 = getelementptr inbounds %class.KV.0, %class.KV.0* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.2*, %class.KV.2** %12, align 8
  %62 = getelementptr inbounds %class.KV.2, %class.KV.2* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.2, %class.KV.2* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.2*, %class.KV.2** %12, align 8
  %72 = getelementptr inbounds %class.KV.2, %class.KV.2* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.2, %class.KV.2* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.2*, %class.KV.2** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %79, i32 %80, i32 %81, %class.KV.2* dereferenceable(16) %19)
  store %class.KV.2* %84, %class.KV.2** %18, align 8
  %85 = load %class.KV.0*, %class.KV.0** %7, align 8
  %86 = getelementptr inbounds %class.KV.0, %class.KV.0* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.2*, %class.KV.2** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %88, %class.KV.2* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.2*, %class.KV.2** %12, align 8
  %97 = getelementptr inbounds %class.KV.2, %class.KV.2* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.2, %class.KV.2* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 16
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.2*, %class.KV.2** %12, align 8
  %106 = getelementptr inbounds %class.KV.2, %class.KV.2* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.2, %class.KV.2* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.2*, %class.KV.2** %12, align 8
  %113 = getelementptr inbounds %class.KV.2, %class.KV.2* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.2, %class.KV.2* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.2* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.2*, %class.KV.2** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %121, i32 %122, i32 %123, %class.KV.2* dereferenceable(16) %20)
  store %class.KV.2* %124, %class.KV.2** %21, align 8
  %125 = load %class.KV.0*, %class.KV.0** %7, align 8
  %126 = getelementptr inbounds %class.KV.0, %class.KV.0* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.2*, %class.KV.2** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %128, %class.KV.2* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.2*, %class.KV.2** %12, align 8
  %134 = getelementptr inbounds %class.KV.2, %class.KV.2* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.2* sret %22, %class.KV.2* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.2*, %class.KV.2** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %140, i32 %141, i32 %142, %class.KV.2* dereferenceable(16) %22)
  store %class.KV.2* %143, %class.KV.2** %23, align 8
  %144 = load %class.KV.0*, %class.KV.0** %7, align 8
  %145 = getelementptr inbounds %class.KV.0, %class.KV.0* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.2*, %class.KV.2** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %147, %class.KV.2* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.2*
  store %class.KV.2* %158, %class.KV.2** %24, align 8
  %159 = load %class.KV.2*, %class.KV.2** %24, align 8
  %160 = bitcast %class.KV.2* %159 to i8*
  %161 = load %class.KV.2*, %class.KV.2** %12, align 8
  %162 = bitcast %class.KV.2* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.2*, %class.KV.2** %24, align 8
  %170 = getelementptr inbounds %class.KV.2, %class.KV.2* %169, i64 %168
  %171 = bitcast %class.KV.2* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.2*, %class.KV.2** %12, align 8
  %175 = getelementptr inbounds %class.KV.2, %class.KV.2* %174, i64 %173
  %176 = bitcast %class.KV.2* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.2*, %class.KV.2** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.2, %class.KV.2* %182, i64 %184
  %186 = bitcast %class.KV.2* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.2*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EPKS0_S3_(%class.KV.2* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.2*, %class.KV.2** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %196, %class.KV.2* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2*, i32, i32, %class.KV.2* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.2*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.2*, align 8
  %9 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.2* %3, %class.KV.2** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.2*
  store %class.KV.2* %14, %class.KV.2** %9, align 8
  %15 = load %class.KV.2*, %class.KV.2** %9, align 8
  %16 = bitcast %class.KV.2* %15 to i8*
  %17 = load %class.KV.2*, %class.KV.2** %5, align 8
  %18 = bitcast %class.KV.2* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.2*, %class.KV.2** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.2, %class.KV.2* %22, i64 %24
  %26 = bitcast %class.KV.2* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.2*
  %28 = load %class.KV.2*, %class.KV.2** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %27, %class.KV.2* dereferenceable(16) %28)
  %29 = load %class.KV.2*, %class.KV.2** %9, align 8
  ret %class.KV.2* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.2* noalias sret, %class.KV.2* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.2*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.3*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.3*, align 8
  %19 = alloca %class.KV.3, align 8
  %20 = alloca %class.KV.3, align 8
  %21 = alloca %class.KV.3*, align 8
  %22 = alloca %class.KV.3, align 8
  %23 = alloca %class.KV.3*, align 8
  %24 = alloca %class.KV.3*, align 8
  store %class.KV.2* %1, %class.KV.2** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.2*, %class.KV.2** %7, align 8
  %26 = getelementptr inbounds %class.KV.2, %class.KV.2* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %26 to %class.KV.3**
  %28 = load %class.KV.3*, %class.KV.3** %27, align 8
  store %class.KV.3* %28, %class.KV.3** %12, align 8
  %29 = load %class.KV.2*, %class.KV.2** %7, align 8
  %30 = getelementptr inbounds %class.KV.2, %class.KV.2* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.3*, %class.KV.3** %12, align 8
  %62 = getelementptr inbounds %class.KV.3, %class.KV.3* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.3, %class.KV.3* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.3*, %class.KV.3** %12, align 8
  %72 = getelementptr inbounds %class.KV.3, %class.KV.3* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.3, %class.KV.3* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.3*, %class.KV.3** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %79, i32 %80, i32 %81, %class.KV.3* dereferenceable(16) %19)
  store %class.KV.3* %84, %class.KV.3** %18, align 8
  %85 = load %class.KV.2*, %class.KV.2** %7, align 8
  %86 = getelementptr inbounds %class.KV.2, %class.KV.2* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.3*, %class.KV.3** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %88, %class.KV.3* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.3*, %class.KV.3** %12, align 8
  %97 = getelementptr inbounds %class.KV.3, %class.KV.3* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.3, %class.KV.3* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 22
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.3*, %class.KV.3** %12, align 8
  %106 = getelementptr inbounds %class.KV.3, %class.KV.3* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.3, %class.KV.3* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.3*, %class.KV.3** %12, align 8
  %113 = getelementptr inbounds %class.KV.3, %class.KV.3* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.3, %class.KV.3* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.3* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.3*, %class.KV.3** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %121, i32 %122, i32 %123, %class.KV.3* dereferenceable(16) %20)
  store %class.KV.3* %124, %class.KV.3** %21, align 8
  %125 = load %class.KV.2*, %class.KV.2** %7, align 8
  %126 = getelementptr inbounds %class.KV.2, %class.KV.2* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.3*, %class.KV.3** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %128, %class.KV.3* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.3*, %class.KV.3** %12, align 8
  %134 = getelementptr inbounds %class.KV.3, %class.KV.3* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.3* sret %22, %class.KV.3* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.3*, %class.KV.3** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %140, i32 %141, i32 %142, %class.KV.3* dereferenceable(16) %22)
  store %class.KV.3* %143, %class.KV.3** %23, align 8
  %144 = load %class.KV.2*, %class.KV.2** %7, align 8
  %145 = getelementptr inbounds %class.KV.2, %class.KV.2* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.3*, %class.KV.3** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %147, %class.KV.3* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.3*
  store %class.KV.3* %158, %class.KV.3** %24, align 8
  %159 = load %class.KV.3*, %class.KV.3** %24, align 8
  %160 = bitcast %class.KV.3* %159 to i8*
  %161 = load %class.KV.3*, %class.KV.3** %12, align 8
  %162 = bitcast %class.KV.3* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.3*, %class.KV.3** %24, align 8
  %170 = getelementptr inbounds %class.KV.3, %class.KV.3* %169, i64 %168
  %171 = bitcast %class.KV.3* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.3*, %class.KV.3** %12, align 8
  %175 = getelementptr inbounds %class.KV.3, %class.KV.3* %174, i64 %173
  %176 = bitcast %class.KV.3* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.3*, %class.KV.3** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.3, %class.KV.3* %182, i64 %184
  %186 = bitcast %class.KV.3* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.3*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EPKS0_S3_(%class.KV.3* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.3*, %class.KV.3** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %196, %class.KV.3* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3*, i32, i32, %class.KV.3* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.3*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.3*, align 8
  %9 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.3* %3, %class.KV.3** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.3*
  store %class.KV.3* %14, %class.KV.3** %9, align 8
  %15 = load %class.KV.3*, %class.KV.3** %9, align 8
  %16 = bitcast %class.KV.3* %15 to i8*
  %17 = load %class.KV.3*, %class.KV.3** %5, align 8
  %18 = bitcast %class.KV.3* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.3*, %class.KV.3** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.3, %class.KV.3* %22, i64 %24
  %26 = bitcast %class.KV.3* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.3*
  %28 = load %class.KV.3*, %class.KV.3** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %27, %class.KV.3* dereferenceable(16) %28)
  %29 = load %class.KV.3*, %class.KV.3** %9, align 8
  ret %class.KV.3* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.3* noalias sret, %class.KV.3* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.3*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.4*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.4*, align 8
  %19 = alloca %class.KV.4, align 8
  %20 = alloca %class.KV.4, align 8
  %21 = alloca %class.KV.4*, align 8
  %22 = alloca %class.KV.4, align 8
  %23 = alloca %class.KV.4*, align 8
  %24 = alloca %class.KV.4*, align 8
  store %class.KV.3* %1, %class.KV.3** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.3*, %class.KV.3** %7, align 8
  %26 = getelementptr inbounds %class.KV.3, %class.KV.3* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %26 to %class.KV.4**
  %28 = load %class.KV.4*, %class.KV.4** %27, align 8
  store %class.KV.4* %28, %class.KV.4** %12, align 8
  %29 = load %class.KV.3*, %class.KV.3** %7, align 8
  %30 = getelementptr inbounds %class.KV.3, %class.KV.3* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.4*, %class.KV.4** %12, align 8
  %62 = getelementptr inbounds %class.KV.4, %class.KV.4* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.4, %class.KV.4* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.4*, %class.KV.4** %12, align 8
  %72 = getelementptr inbounds %class.KV.4, %class.KV.4* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.4, %class.KV.4* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.4*, %class.KV.4** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %79, i32 %80, i32 %81, %class.KV.4* dereferenceable(16) %19)
  store %class.KV.4* %84, %class.KV.4** %18, align 8
  %85 = load %class.KV.3*, %class.KV.3** %7, align 8
  %86 = getelementptr inbounds %class.KV.3, %class.KV.3* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.4*, %class.KV.4** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %88, %class.KV.4* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.4*, %class.KV.4** %12, align 8
  %97 = getelementptr inbounds %class.KV.4, %class.KV.4* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.4, %class.KV.4* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 28
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.4*, %class.KV.4** %12, align 8
  %106 = getelementptr inbounds %class.KV.4, %class.KV.4* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.4, %class.KV.4* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.4*, %class.KV.4** %12, align 8
  %113 = getelementptr inbounds %class.KV.4, %class.KV.4* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.4, %class.KV.4* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.4* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.4*, %class.KV.4** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %121, i32 %122, i32 %123, %class.KV.4* dereferenceable(16) %20)
  store %class.KV.4* %124, %class.KV.4** %21, align 8
  %125 = load %class.KV.3*, %class.KV.3** %7, align 8
  %126 = getelementptr inbounds %class.KV.3, %class.KV.3* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.4*, %class.KV.4** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %128, %class.KV.4* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.4*, %class.KV.4** %12, align 8
  %134 = getelementptr inbounds %class.KV.4, %class.KV.4* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.4* sret %22, %class.KV.4* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.4*, %class.KV.4** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %140, i32 %141, i32 %142, %class.KV.4* dereferenceable(16) %22)
  store %class.KV.4* %143, %class.KV.4** %23, align 8
  %144 = load %class.KV.3*, %class.KV.3** %7, align 8
  %145 = getelementptr inbounds %class.KV.3, %class.KV.3* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.4*, %class.KV.4** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %147, %class.KV.4* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.4*
  store %class.KV.4* %158, %class.KV.4** %24, align 8
  %159 = load %class.KV.4*, %class.KV.4** %24, align 8
  %160 = bitcast %class.KV.4* %159 to i8*
  %161 = load %class.KV.4*, %class.KV.4** %12, align 8
  %162 = bitcast %class.KV.4* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.4*, %class.KV.4** %24, align 8
  %170 = getelementptr inbounds %class.KV.4, %class.KV.4* %169, i64 %168
  %171 = bitcast %class.KV.4* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.4*, %class.KV.4** %12, align 8
  %175 = getelementptr inbounds %class.KV.4, %class.KV.4* %174, i64 %173
  %176 = bitcast %class.KV.4* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.4*, %class.KV.4** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.4, %class.KV.4* %182, i64 %184
  %186 = bitcast %class.KV.4* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.4*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EPKS0_S3_(%class.KV.4* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.4*, %class.KV.4** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %196, %class.KV.4* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4*, i32, i32, %class.KV.4* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.4*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.4*, align 8
  %9 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.4* %3, %class.KV.4** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.4*
  store %class.KV.4* %14, %class.KV.4** %9, align 8
  %15 = load %class.KV.4*, %class.KV.4** %9, align 8
  %16 = bitcast %class.KV.4* %15 to i8*
  %17 = load %class.KV.4*, %class.KV.4** %5, align 8
  %18 = bitcast %class.KV.4* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.4*, %class.KV.4** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.4, %class.KV.4* %22, i64 %24
  %26 = bitcast %class.KV.4* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.4*
  %28 = load %class.KV.4*, %class.KV.4** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %27, %class.KV.4* dereferenceable(16) %28)
  %29 = load %class.KV.4*, %class.KV.4** %9, align 8
  ret %class.KV.4* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.4* noalias sret, %class.KV.4* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.4*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.5*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.5*, align 8
  %19 = alloca %class.KV.5, align 8
  %20 = alloca %class.KV.5, align 8
  %21 = alloca %class.KV.5*, align 8
  %22 = alloca %class.KV.5, align 8
  %23 = alloca %class.KV.5*, align 8
  %24 = alloca %class.KV.5*, align 8
  store %class.KV.4* %1, %class.KV.4** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.4*, %class.KV.4** %7, align 8
  %26 = getelementptr inbounds %class.KV.4, %class.KV.4* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %26 to %class.KV.5**
  %28 = load %class.KV.5*, %class.KV.5** %27, align 8
  store %class.KV.5* %28, %class.KV.5** %12, align 8
  %29 = load %class.KV.4*, %class.KV.4** %7, align 8
  %30 = getelementptr inbounds %class.KV.4, %class.KV.4* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.5*, %class.KV.5** %12, align 8
  %62 = getelementptr inbounds %class.KV.5, %class.KV.5* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.5, %class.KV.5* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.5*, %class.KV.5** %12, align 8
  %72 = getelementptr inbounds %class.KV.5, %class.KV.5* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.5, %class.KV.5* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.5*, %class.KV.5** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %79, i32 %80, i32 %81, %class.KV.5* dereferenceable(16) %19)
  store %class.KV.5* %84, %class.KV.5** %18, align 8
  %85 = load %class.KV.4*, %class.KV.4** %7, align 8
  %86 = getelementptr inbounds %class.KV.4, %class.KV.4* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.5*, %class.KV.5** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %88, %class.KV.5* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.5*, %class.KV.5** %12, align 8
  %97 = getelementptr inbounds %class.KV.5, %class.KV.5* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.5, %class.KV.5* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 34
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.5*, %class.KV.5** %12, align 8
  %106 = getelementptr inbounds %class.KV.5, %class.KV.5* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.5, %class.KV.5* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.5*, %class.KV.5** %12, align 8
  %113 = getelementptr inbounds %class.KV.5, %class.KV.5* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.5, %class.KV.5* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.5* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.5*, %class.KV.5** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %121, i32 %122, i32 %123, %class.KV.5* dereferenceable(16) %20)
  store %class.KV.5* %124, %class.KV.5** %21, align 8
  %125 = load %class.KV.4*, %class.KV.4** %7, align 8
  %126 = getelementptr inbounds %class.KV.4, %class.KV.4* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.5*, %class.KV.5** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %128, %class.KV.5* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.5*, %class.KV.5** %12, align 8
  %134 = getelementptr inbounds %class.KV.5, %class.KV.5* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.5* sret %22, %class.KV.5* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.5*, %class.KV.5** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %140, i32 %141, i32 %142, %class.KV.5* dereferenceable(16) %22)
  store %class.KV.5* %143, %class.KV.5** %23, align 8
  %144 = load %class.KV.4*, %class.KV.4** %7, align 8
  %145 = getelementptr inbounds %class.KV.4, %class.KV.4* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.5*, %class.KV.5** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %147, %class.KV.5* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.5*
  store %class.KV.5* %158, %class.KV.5** %24, align 8
  %159 = load %class.KV.5*, %class.KV.5** %24, align 8
  %160 = bitcast %class.KV.5* %159 to i8*
  %161 = load %class.KV.5*, %class.KV.5** %12, align 8
  %162 = bitcast %class.KV.5* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.5*, %class.KV.5** %24, align 8
  %170 = getelementptr inbounds %class.KV.5, %class.KV.5* %169, i64 %168
  %171 = bitcast %class.KV.5* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.5*, %class.KV.5** %12, align 8
  %175 = getelementptr inbounds %class.KV.5, %class.KV.5* %174, i64 %173
  %176 = bitcast %class.KV.5* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.5*, %class.KV.5** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.5, %class.KV.5* %182, i64 %184
  %186 = bitcast %class.KV.5* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.5*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EPKS0_S3_(%class.KV.5* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.5*, %class.KV.5** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %196, %class.KV.5* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5*, i32, i32, %class.KV.5* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.5*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.5*, align 8
  %9 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.5* %3, %class.KV.5** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.5*
  store %class.KV.5* %14, %class.KV.5** %9, align 8
  %15 = load %class.KV.5*, %class.KV.5** %9, align 8
  %16 = bitcast %class.KV.5* %15 to i8*
  %17 = load %class.KV.5*, %class.KV.5** %5, align 8
  %18 = bitcast %class.KV.5* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.5*, %class.KV.5** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.5, %class.KV.5* %22, i64 %24
  %26 = bitcast %class.KV.5* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.5*
  %28 = load %class.KV.5*, %class.KV.5** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %27, %class.KV.5* dereferenceable(16) %28)
  %29 = load %class.KV.5*, %class.KV.5** %9, align 8
  ret %class.KV.5* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.5* noalias sret, %class.KV.5* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.5*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.6*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.6*, align 8
  %19 = alloca %class.KV.6, align 8
  %20 = alloca %class.KV.6, align 8
  %21 = alloca %class.KV.6*, align 8
  %22 = alloca %class.KV.6, align 8
  %23 = alloca %class.KV.6*, align 8
  %24 = alloca %class.KV.6*, align 8
  store %class.KV.5* %1, %class.KV.5** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.5*, %class.KV.5** %7, align 8
  %26 = getelementptr inbounds %class.KV.5, %class.KV.5* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %26 to %class.KV.6**
  %28 = load %class.KV.6*, %class.KV.6** %27, align 8
  store %class.KV.6* %28, %class.KV.6** %12, align 8
  %29 = load %class.KV.5*, %class.KV.5** %7, align 8
  %30 = getelementptr inbounds %class.KV.5, %class.KV.5* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.6*, %class.KV.6** %12, align 8
  %62 = getelementptr inbounds %class.KV.6, %class.KV.6* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.6, %class.KV.6* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.6*, %class.KV.6** %12, align 8
  %72 = getelementptr inbounds %class.KV.6, %class.KV.6* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.6, %class.KV.6* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.6*, %class.KV.6** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %79, i32 %80, i32 %81, %class.KV.6* dereferenceable(16) %19)
  store %class.KV.6* %84, %class.KV.6** %18, align 8
  %85 = load %class.KV.5*, %class.KV.5** %7, align 8
  %86 = getelementptr inbounds %class.KV.5, %class.KV.5* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.6*, %class.KV.6** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %88, %class.KV.6* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.6*, %class.KV.6** %12, align 8
  %97 = getelementptr inbounds %class.KV.6, %class.KV.6* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.6, %class.KV.6* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 40
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.6*, %class.KV.6** %12, align 8
  %106 = getelementptr inbounds %class.KV.6, %class.KV.6* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.6, %class.KV.6* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.6*, %class.KV.6** %12, align 8
  %113 = getelementptr inbounds %class.KV.6, %class.KV.6* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.6, %class.KV.6* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.6* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.6*, %class.KV.6** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %121, i32 %122, i32 %123, %class.KV.6* dereferenceable(16) %20)
  store %class.KV.6* %124, %class.KV.6** %21, align 8
  %125 = load %class.KV.5*, %class.KV.5** %7, align 8
  %126 = getelementptr inbounds %class.KV.5, %class.KV.5* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.6*, %class.KV.6** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %128, %class.KV.6* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.6*, %class.KV.6** %12, align 8
  %134 = getelementptr inbounds %class.KV.6, %class.KV.6* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.6* sret %22, %class.KV.6* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.6*, %class.KV.6** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %140, i32 %141, i32 %142, %class.KV.6* dereferenceable(16) %22)
  store %class.KV.6* %143, %class.KV.6** %23, align 8
  %144 = load %class.KV.5*, %class.KV.5** %7, align 8
  %145 = getelementptr inbounds %class.KV.5, %class.KV.5* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.6*, %class.KV.6** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %147, %class.KV.6* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.6*
  store %class.KV.6* %158, %class.KV.6** %24, align 8
  %159 = load %class.KV.6*, %class.KV.6** %24, align 8
  %160 = bitcast %class.KV.6* %159 to i8*
  %161 = load %class.KV.6*, %class.KV.6** %12, align 8
  %162 = bitcast %class.KV.6* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.6*, %class.KV.6** %24, align 8
  %170 = getelementptr inbounds %class.KV.6, %class.KV.6* %169, i64 %168
  %171 = bitcast %class.KV.6* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.6*, %class.KV.6** %12, align 8
  %175 = getelementptr inbounds %class.KV.6, %class.KV.6* %174, i64 %173
  %176 = bitcast %class.KV.6* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.6*, %class.KV.6** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.6, %class.KV.6* %182, i64 %184
  %186 = bitcast %class.KV.6* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.6*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EPKS0_S3_(%class.KV.6* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.6*, %class.KV.6** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %196, %class.KV.6* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6*, i32, i32, %class.KV.6* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.6*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.6*, align 8
  %9 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.6* %3, %class.KV.6** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.6*
  store %class.KV.6* %14, %class.KV.6** %9, align 8
  %15 = load %class.KV.6*, %class.KV.6** %9, align 8
  %16 = bitcast %class.KV.6* %15 to i8*
  %17 = load %class.KV.6*, %class.KV.6** %5, align 8
  %18 = bitcast %class.KV.6* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.6*, %class.KV.6** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.6, %class.KV.6* %22, i64 %24
  %26 = bitcast %class.KV.6* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.6*
  %28 = load %class.KV.6*, %class.KV.6** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %27, %class.KV.6* dereferenceable(16) %28)
  %29 = load %class.KV.6*, %class.KV.6** %9, align 8
  ret %class.KV.6* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.6* noalias sret, %class.KV.6* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.6*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.7*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.7*, align 8
  %19 = alloca %class.KV.7, align 8
  %20 = alloca %class.KV.7, align 8
  %21 = alloca %class.KV.7*, align 8
  %22 = alloca %class.KV.7, align 8
  %23 = alloca %class.KV.7*, align 8
  %24 = alloca %class.KV.7*, align 8
  store %class.KV.6* %1, %class.KV.6** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.6*, %class.KV.6** %7, align 8
  %26 = getelementptr inbounds %class.KV.6, %class.KV.6* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %26 to %class.KV.7**
  %28 = load %class.KV.7*, %class.KV.7** %27, align 8
  store %class.KV.7* %28, %class.KV.7** %12, align 8
  %29 = load %class.KV.6*, %class.KV.6** %7, align 8
  %30 = getelementptr inbounds %class.KV.6, %class.KV.6* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.7*, %class.KV.7** %12, align 8
  %62 = getelementptr inbounds %class.KV.7, %class.KV.7* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.7, %class.KV.7* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.7*, %class.KV.7** %12, align 8
  %72 = getelementptr inbounds %class.KV.7, %class.KV.7* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.7, %class.KV.7* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.7*, %class.KV.7** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %79, i32 %80, i32 %81, %class.KV.7* dereferenceable(16) %19)
  store %class.KV.7* %84, %class.KV.7** %18, align 8
  %85 = load %class.KV.6*, %class.KV.6** %7, align 8
  %86 = getelementptr inbounds %class.KV.6, %class.KV.6* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.7*, %class.KV.7** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %88, %class.KV.7* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.7*, %class.KV.7** %12, align 8
  %97 = getelementptr inbounds %class.KV.7, %class.KV.7* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.7, %class.KV.7* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 46
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.7*, %class.KV.7** %12, align 8
  %106 = getelementptr inbounds %class.KV.7, %class.KV.7* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.7, %class.KV.7* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.7*, %class.KV.7** %12, align 8
  %113 = getelementptr inbounds %class.KV.7, %class.KV.7* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.7, %class.KV.7* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.7* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.7*, %class.KV.7** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %121, i32 %122, i32 %123, %class.KV.7* dereferenceable(16) %20)
  store %class.KV.7* %124, %class.KV.7** %21, align 8
  %125 = load %class.KV.6*, %class.KV.6** %7, align 8
  %126 = getelementptr inbounds %class.KV.6, %class.KV.6* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.7*, %class.KV.7** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %128, %class.KV.7* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.7*, %class.KV.7** %12, align 8
  %134 = getelementptr inbounds %class.KV.7, %class.KV.7* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.7* sret %22, %class.KV.7* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.7*, %class.KV.7** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %140, i32 %141, i32 %142, %class.KV.7* dereferenceable(16) %22)
  store %class.KV.7* %143, %class.KV.7** %23, align 8
  %144 = load %class.KV.6*, %class.KV.6** %7, align 8
  %145 = getelementptr inbounds %class.KV.6, %class.KV.6* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.7*, %class.KV.7** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %147, %class.KV.7* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.7*
  store %class.KV.7* %158, %class.KV.7** %24, align 8
  %159 = load %class.KV.7*, %class.KV.7** %24, align 8
  %160 = bitcast %class.KV.7* %159 to i8*
  %161 = load %class.KV.7*, %class.KV.7** %12, align 8
  %162 = bitcast %class.KV.7* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.7*, %class.KV.7** %24, align 8
  %170 = getelementptr inbounds %class.KV.7, %class.KV.7* %169, i64 %168
  %171 = bitcast %class.KV.7* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.7*, %class.KV.7** %12, align 8
  %175 = getelementptr inbounds %class.KV.7, %class.KV.7* %174, i64 %173
  %176 = bitcast %class.KV.7* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.7*, %class.KV.7** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.7, %class.KV.7* %182, i64 %184
  %186 = bitcast %class.KV.7* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.7*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EPKS0_S3_(%class.KV.7* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.7*, %class.KV.7** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %196, %class.KV.7* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7*, i32, i32, %class.KV.7* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.7*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.7*, align 8
  %9 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.7* %3, %class.KV.7** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.7*
  store %class.KV.7* %14, %class.KV.7** %9, align 8
  %15 = load %class.KV.7*, %class.KV.7** %9, align 8
  %16 = bitcast %class.KV.7* %15 to i8*
  %17 = load %class.KV.7*, %class.KV.7** %5, align 8
  %18 = bitcast %class.KV.7* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.7*, %class.KV.7** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.7, %class.KV.7* %22, i64 %24
  %26 = bitcast %class.KV.7* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.7*
  %28 = load %class.KV.7*, %class.KV.7** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %27, %class.KV.7* dereferenceable(16) %28)
  %29 = load %class.KV.7*, %class.KV.7** %9, align 8
  ret %class.KV.7* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.7* noalias sret, %class.KV.7* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.7*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.8*, align 8
  %19 = alloca %class.KV.8, align 8
  %20 = alloca %class.KV.8, align 8
  %21 = alloca %class.KV.8*, align 8
  %22 = alloca %class.KV.8, align 8
  %23 = alloca %class.KV.8*, align 8
  %24 = alloca %class.KV.8*, align 8
  store %class.KV.7* %1, %class.KV.7** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.7*, %class.KV.7** %7, align 8
  %26 = getelementptr inbounds %class.KV.7, %class.KV.7* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %26 to %class.KV.8**
  %28 = load %class.KV.8*, %class.KV.8** %27, align 8
  store %class.KV.8* %28, %class.KV.8** %12, align 8
  %29 = load %class.KV.7*, %class.KV.7** %7, align 8
  %30 = getelementptr inbounds %class.KV.7, %class.KV.7* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.8*, %class.KV.8** %12, align 8
  %62 = getelementptr inbounds %class.KV.8, %class.KV.8* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.8, %class.KV.8* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.8*, %class.KV.8** %12, align 8
  %72 = getelementptr inbounds %class.KV.8, %class.KV.8* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.8, %class.KV.8* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.8*, %class.KV.8** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %79, i32 %80, i32 %81, %class.KV.8* dereferenceable(16) %19)
  store %class.KV.8* %84, %class.KV.8** %18, align 8
  %85 = load %class.KV.7*, %class.KV.7** %7, align 8
  %86 = getelementptr inbounds %class.KV.7, %class.KV.7* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.8*, %class.KV.8** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %88, %class.KV.8* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.8*, %class.KV.8** %12, align 8
  %97 = getelementptr inbounds %class.KV.8, %class.KV.8* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.8, %class.KV.8* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 52
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.8*, %class.KV.8** %12, align 8
  %106 = getelementptr inbounds %class.KV.8, %class.KV.8* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.8, %class.KV.8* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.8*, %class.KV.8** %12, align 8
  %113 = getelementptr inbounds %class.KV.8, %class.KV.8* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.8, %class.KV.8* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.8* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.8*, %class.KV.8** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %121, i32 %122, i32 %123, %class.KV.8* dereferenceable(16) %20)
  store %class.KV.8* %124, %class.KV.8** %21, align 8
  %125 = load %class.KV.7*, %class.KV.7** %7, align 8
  %126 = getelementptr inbounds %class.KV.7, %class.KV.7* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.8*, %class.KV.8** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %128, %class.KV.8* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.8*, %class.KV.8** %12, align 8
  %134 = getelementptr inbounds %class.KV.8, %class.KV.8* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.8* sret %22, %class.KV.8* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.8*, %class.KV.8** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %140, i32 %141, i32 %142, %class.KV.8* dereferenceable(16) %22)
  store %class.KV.8* %143, %class.KV.8** %23, align 8
  %144 = load %class.KV.7*, %class.KV.7** %7, align 8
  %145 = getelementptr inbounds %class.KV.7, %class.KV.7* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.8*, %class.KV.8** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %147, %class.KV.8* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.8*
  store %class.KV.8* %158, %class.KV.8** %24, align 8
  %159 = load %class.KV.8*, %class.KV.8** %24, align 8
  %160 = bitcast %class.KV.8* %159 to i8*
  %161 = load %class.KV.8*, %class.KV.8** %12, align 8
  %162 = bitcast %class.KV.8* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.8*, %class.KV.8** %24, align 8
  %170 = getelementptr inbounds %class.KV.8, %class.KV.8* %169, i64 %168
  %171 = bitcast %class.KV.8* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.8*, %class.KV.8** %12, align 8
  %175 = getelementptr inbounds %class.KV.8, %class.KV.8* %174, i64 %173
  %176 = bitcast %class.KV.8* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.8*, %class.KV.8** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.8, %class.KV.8* %182, i64 %184
  %186 = bitcast %class.KV.8* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.8*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EPKS0_S3_(%class.KV.8* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.8*, %class.KV.8** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %196, %class.KV.8* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8*, i32, i32, %class.KV.8* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.8*, align 8
  %9 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.8* %3, %class.KV.8** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.8*
  store %class.KV.8* %14, %class.KV.8** %9, align 8
  %15 = load %class.KV.8*, %class.KV.8** %9, align 8
  %16 = bitcast %class.KV.8* %15 to i8*
  %17 = load %class.KV.8*, %class.KV.8** %5, align 8
  %18 = bitcast %class.KV.8* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.8*, %class.KV.8** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.8, %class.KV.8* %22, i64 %24
  %26 = bitcast %class.KV.8* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.8*
  %28 = load %class.KV.8*, %class.KV.8** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %27, %class.KV.8* dereferenceable(16) %28)
  %29 = load %class.KV.8*, %class.KV.8** %9, align 8
  ret %class.KV.8* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.8* noalias sret, %class.KV.8* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.9*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.9*, align 8
  %19 = alloca %class.KV.9, align 8
  %20 = alloca %class.KV.9, align 8
  %21 = alloca %class.KV.9*, align 8
  %22 = alloca %class.KV.9, align 8
  %23 = alloca %class.KV.9*, align 8
  %24 = alloca %class.KV.9*, align 8
  store %class.KV.8* %1, %class.KV.8** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.8*, %class.KV.8** %7, align 8
  %26 = getelementptr inbounds %class.KV.8, %class.KV.8* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %26 to %class.KV.9**
  %28 = load %class.KV.9*, %class.KV.9** %27, align 8
  store %class.KV.9* %28, %class.KV.9** %12, align 8
  %29 = load %class.KV.8*, %class.KV.8** %7, align 8
  %30 = getelementptr inbounds %class.KV.8, %class.KV.8* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.9*, %class.KV.9** %12, align 8
  %62 = getelementptr inbounds %class.KV.9, %class.KV.9* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.9, %class.KV.9* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.9*, %class.KV.9** %12, align 8
  %72 = getelementptr inbounds %class.KV.9, %class.KV.9* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.9, %class.KV.9* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.9*, %class.KV.9** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %79, i32 %80, i32 %81, %class.KV.9* dereferenceable(16) %19)
  store %class.KV.9* %84, %class.KV.9** %18, align 8
  %85 = load %class.KV.8*, %class.KV.8** %7, align 8
  %86 = getelementptr inbounds %class.KV.8, %class.KV.8* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.9*, %class.KV.9** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %88, %class.KV.9* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.9*, %class.KV.9** %12, align 8
  %97 = getelementptr inbounds %class.KV.9, %class.KV.9* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.9, %class.KV.9* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 58
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.9*, %class.KV.9** %12, align 8
  %106 = getelementptr inbounds %class.KV.9, %class.KV.9* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.9, %class.KV.9* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.9*, %class.KV.9** %12, align 8
  %113 = getelementptr inbounds %class.KV.9, %class.KV.9* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.9, %class.KV.9* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.9* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.9*, %class.KV.9** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %121, i32 %122, i32 %123, %class.KV.9* dereferenceable(16) %20)
  store %class.KV.9* %124, %class.KV.9** %21, align 8
  %125 = load %class.KV.8*, %class.KV.8** %7, align 8
  %126 = getelementptr inbounds %class.KV.8, %class.KV.8* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.9*, %class.KV.9** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %128, %class.KV.9* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.9*, %class.KV.9** %12, align 8
  %134 = getelementptr inbounds %class.KV.9, %class.KV.9* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.9* sret %22, %class.KV.9* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.9*, %class.KV.9** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %140, i32 %141, i32 %142, %class.KV.9* dereferenceable(16) %22)
  store %class.KV.9* %143, %class.KV.9** %23, align 8
  %144 = load %class.KV.8*, %class.KV.8** %7, align 8
  %145 = getelementptr inbounds %class.KV.8, %class.KV.8* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.9*, %class.KV.9** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %147, %class.KV.9* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.9*
  store %class.KV.9* %158, %class.KV.9** %24, align 8
  %159 = load %class.KV.9*, %class.KV.9** %24, align 8
  %160 = bitcast %class.KV.9* %159 to i8*
  %161 = load %class.KV.9*, %class.KV.9** %12, align 8
  %162 = bitcast %class.KV.9* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.9*, %class.KV.9** %24, align 8
  %170 = getelementptr inbounds %class.KV.9, %class.KV.9* %169, i64 %168
  %171 = bitcast %class.KV.9* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.9*, %class.KV.9** %12, align 8
  %175 = getelementptr inbounds %class.KV.9, %class.KV.9* %174, i64 %173
  %176 = bitcast %class.KV.9* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.9*, %class.KV.9** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.9, %class.KV.9* %182, i64 %184
  %186 = bitcast %class.KV.9* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.9*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EPKS0_S3_(%class.KV.9* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.9*, %class.KV.9** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %196, %class.KV.9* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9*, i32, i32, %class.KV.9* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.9*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.9*, align 8
  %9 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.9* %3, %class.KV.9** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.9*
  store %class.KV.9* %14, %class.KV.9** %9, align 8
  %15 = load %class.KV.9*, %class.KV.9** %9, align 8
  %16 = bitcast %class.KV.9* %15 to i8*
  %17 = load %class.KV.9*, %class.KV.9** %5, align 8
  %18 = bitcast %class.KV.9* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.9*, %class.KV.9** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.9, %class.KV.9* %22, i64 %24
  %26 = bitcast %class.KV.9* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.9*
  %28 = load %class.KV.9*, %class.KV.9** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %27, %class.KV.9* dereferenceable(16) %28)
  %29 = load %class.KV.9*, %class.KV.9** %9, align 8
  ret %class.KV.9* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.9* noalias sret, %class.KV.9* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.9*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.KV.10*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %class.KV.10*, align 8
  %19 = alloca %class.KV.10, align 8
  %20 = alloca %class.KV.10, align 8
  %21 = alloca %class.KV.10*, align 8
  %22 = alloca %class.KV.10, align 8
  %23 = alloca %class.KV.10*, align 8
  %24 = alloca %class.KV.10*, align 8
  store %class.KV.9* %1, %class.KV.9** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %25 = load %class.KV.9*, %class.KV.9** %7, align 8
  %26 = getelementptr inbounds %class.KV.9, %class.KV.9* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %26 to %class.KV.10**
  %28 = load %class.KV.10*, %class.KV.10** %27, align 8
  store %class.KV.10* %28, %class.KV.10** %12, align 8
  %29 = load %class.KV.9*, %class.KV.9** %7, align 8
  %30 = getelementptr inbounds %class.KV.9, %class.KV.9* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = lshr i64 %32, 1
  store i64 %33, i64* %13, align 8
  %34 = load i64, i64* %8, align 8
  %35 = and i64 %34, 63
  %36 = urem i64 %35, 63
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %13, align 8
  %39 = call i64 @llvm.ctpop.i64(i64 %38)
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %15, align 4
  %41 = load i64, i64* %13, align 8
  %42 = shl i64 %41, 1
  %43 = load i32, i32* %14, align 4
  %44 = sub i32 63, %43
  %45 = zext i32 %44 to i64
  %46 = shl i64 %42, %45
  %47 = call i64 @llvm.ctpop.i64(i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %16, align 4
  %49 = load i64, i64* %13, align 8
  %50 = load i32, i32* %14, align 4
  %51 = zext i32 %50 to i64
  %52 = shl i64 1, %51
  %53 = and i64 %49, %52
  %54 = icmp ne i64 %53, 0
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %17, align 1
  %56 = load i8, i8* %17, align 1
  %57 = trunc i8 %56 to i1
  br i1 %57, label %58, label %149

; <label>:58                                      ; preds = %6
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = load %class.KV.10*, %class.KV.10** %12, align 8
  %62 = getelementptr inbounds %class.KV.10, %class.KV.10* %61, i64 %60
  %63 = getelementptr inbounds %class.KV.10, %class.KV.10* %62, i32 0, i32 0
  %64 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %130

; <label>:68                                      ; preds = %58
  %69 = load i32, i32* %16, align 4
  %70 = zext i32 %69 to i64
  %71 = load %class.KV.10*, %class.KV.10** %12, align 8
  %72 = getelementptr inbounds %class.KV.10, %class.KV.10* %71, i64 %70
  %73 = getelementptr inbounds %class.KV.10, %class.KV.10* %72, i32 0, i32 0
  %74 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %73 to %class.c_d**
  %75 = load %class.c_d*, %class.c_d** %74, align 8
  %76 = load %class.c_d*, %class.c_d** %9, align 8
  %77 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %75, %class.c_d* dereferenceable(8) %76)
  br i1 %77, label %78, label %90

; <label>:78                                      ; preds = %68
  %79 = load %class.KV.10*, %class.KV.10** %12, align 8
  %80 = load i32, i32* %15, align 4
  %81 = load i32, i32* %16, align 4
  %82 = load %class.c_d*, %class.c_d** %9, align 8
  %83 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %19, %class.c_d* %82, %class.c_d* %83)
  %84 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %79, i32 %80, i32 %81, %class.KV.10* dereferenceable(16) %19)
  store %class.KV.10* %84, %class.KV.10** %18, align 8
  %85 = load %class.KV.9*, %class.KV.9** %7, align 8
  %86 = getelementptr inbounds %class.KV.9, %class.KV.9* %85, i32 0, i32 0
  %87 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %class.KV.10*, %class.KV.10** %18, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %88, %class.KV.10* %89)
  br label %198

; <label>:90                                      ; preds = %68
  %91 = load i64*, i64** %11, align 8
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %91, align 8
  %94 = load i32, i32* %16, align 4
  %95 = zext i32 %94 to i64
  %96 = load %class.KV.10*, %class.KV.10** %12, align 8
  %97 = getelementptr inbounds %class.KV.10, %class.KV.10* %96, i64 %95
  %98 = getelementptr inbounds %class.KV.10, %class.KV.10* %97, i32 0, i32 0
  %99 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %98 to %class.c_d**
  %100 = load %class.c_d*, %class.c_d** %99, align 8
  %101 = call i64 @_ZNK3c_d4hashEv(%class.c_d* %100)
  %102 = lshr i64 %101, 0
  %103 = load i32, i32* %16, align 4
  %104 = zext i32 %103 to i64
  %105 = load %class.KV.10*, %class.KV.10** %12, align 8
  %106 = getelementptr inbounds %class.KV.10, %class.KV.10* %105, i64 %104
  %107 = getelementptr inbounds %class.KV.10, %class.KV.10* %106, i32 0, i32 0
  %108 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %107 to %class.c_d**
  %109 = load %class.c_d*, %class.c_d** %108, align 8
  %110 = load i32, i32* %16, align 4
  %111 = zext i32 %110 to i64
  %112 = load %class.KV.10*, %class.KV.10** %12, align 8
  %113 = getelementptr inbounds %class.KV.10, %class.KV.10* %112, i64 %111
  %114 = getelementptr inbounds %class.KV.10, %class.KV.10* %113, i32 0, i32 1
  %115 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %114 to %class.c_d**
  %116 = load %class.c_d*, %class.c_d** %115, align 8
  %117 = load i64, i64* %8, align 8
  %118 = lshr i64 %117, 6
  %119 = load %class.c_d*, %class.c_d** %9, align 8
  %120 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE14new_inner_nodeEyPKS0_S3_yS3_S3_(%class.KV.10* sret %20, i64 %102, %class.c_d* %109, %class.c_d* %116, i64 %118, %class.c_d* %119, %class.c_d* %120)
  %121 = load %class.KV.10*, %class.KV.10** %12, align 8
  %122 = load i32, i32* %15, align 4
  %123 = load i32, i32* %16, align 4
  %124 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %121, i32 %122, i32 %123, %class.KV.10* dereferenceable(16) %20)
  store %class.KV.10* %124, %class.KV.10** %21, align 8
  %125 = load %class.KV.9*, %class.KV.9** %7, align 8
  %126 = getelementptr inbounds %class.KV.9, %class.KV.9* %125, i32 0, i32 0
  %127 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load %class.KV.10*, %class.KV.10** %21, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %128, %class.KV.10* %129)
  br label %198

; <label>:130                                     ; preds = %58
  %131 = load i32, i32* %16, align 4
  %132 = zext i32 %131 to i64
  %133 = load %class.KV.10*, %class.KV.10** %12, align 8
  %134 = getelementptr inbounds %class.KV.10, %class.KV.10* %133, i64 %132
  %135 = load i64, i64* %8, align 8
  %136 = lshr i64 %135, 6
  %137 = load %class.c_d*, %class.c_d** %9, align 8
  %138 = load %class.c_d*, %class.c_d** %10, align 8
  %139 = load i64*, i64** %11, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.10* sret %22, %class.KV.10* dereferenceable(16) %134, i64 %136, %class.c_d* %137, %class.c_d* %138, i64* %139)
  %140 = load %class.KV.10*, %class.KV.10** %12, align 8
  %141 = load i32, i32* %15, align 4
  %142 = load i32, i32* %16, align 4
  %143 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %140, i32 %141, i32 %142, %class.KV.10* dereferenceable(16) %22)
  store %class.KV.10* %143, %class.KV.10** %23, align 8
  %144 = load %class.KV.9*, %class.KV.9** %7, align 8
  %145 = getelementptr inbounds %class.KV.9, %class.KV.9* %144, i32 0, i32 0
  %146 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load %class.KV.10*, %class.KV.10** %23, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %147, %class.KV.10* %148)
  br label %198

; <label>:149                                     ; preds = %6
  %150 = load i64*, i64** %11, align 8
  %151 = load i64, i64* %150, align 8
  %152 = add i64 %151, 1
  store i64 %152, i64* %150, align 8
  %153 = load i32, i32* %15, align 4
  %154 = add i32 %153, 1
  %155 = zext i32 %154 to i64
  %156 = mul i64 %155, 16
  %157 = call i8* @malloc(i64 %156)
  %158 = bitcast i8* %157 to %class.KV.10*
  store %class.KV.10* %158, %class.KV.10** %24, align 8
  %159 = load %class.KV.10*, %class.KV.10** %24, align 8
  %160 = bitcast %class.KV.10* %159 to i8*
  %161 = load %class.KV.10*, %class.KV.10** %12, align 8
  %162 = bitcast %class.KV.10* %161 to i8*
  %163 = load i32, i32* %16, align 4
  %164 = zext i32 %163 to i64
  %165 = mul i64 %164, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %162, i64 %165, i32 8, i1 false)
  %166 = load i32, i32* %16, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  %169 = load %class.KV.10*, %class.KV.10** %24, align 8
  %170 = getelementptr inbounds %class.KV.10, %class.KV.10* %169, i64 %168
  %171 = bitcast %class.KV.10* %170 to i8*
  %172 = load i32, i32* %16, align 4
  %173 = zext i32 %172 to i64
  %174 = load %class.KV.10*, %class.KV.10** %12, align 8
  %175 = getelementptr inbounds %class.KV.10, %class.KV.10* %174, i64 %173
  %176 = bitcast %class.KV.10* %175 to i8*
  %177 = load i32, i32* %15, align 4
  %178 = load i32, i32* %16, align 4
  %179 = sub i32 %177, %178
  %180 = zext i32 %179 to i64
  %181 = mul i64 %180, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %176, i64 %181, i32 8, i1 false)
  %182 = load %class.KV.10*, %class.KV.10** %24, align 8
  %183 = load i32, i32* %16, align 4
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %class.KV.10, %class.KV.10* %182, i64 %184
  %186 = bitcast %class.KV.10* %185 to i8*
  %187 = bitcast i8* %186 to %class.KV.10*
  %188 = load %class.c_d*, %class.c_d** %9, align 8
  %189 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %187, %class.c_d* %188, %class.c_d* %189)
  %190 = load i64, i64* %13, align 8
  %191 = load i32, i32* %14, align 4
  %192 = zext i32 %191 to i64
  %193 = shl i64 1, %192
  %194 = or i64 %190, %193
  %195 = shl i64 %194, 1
  %196 = or i64 %195, 1
  %197 = load %class.KV.10*, %class.KV.10** %24, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %196, %class.KV.10* %197)
  br label %198

; <label>:198                                     ; preds = %149, %130, %90, %78
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10*, i32, i32, %class.KV.10* dereferenceable(16)) #0 align 2 {
  %5 = alloca %class.KV.10*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %class.KV.10*, align 8
  %9 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %class.KV.10* %3, %class.KV.10** %8, align 8
  %10 = load i32, i32* %6, align 4
  %11 = zext i32 %10 to i64
  %12 = mul i64 %11, 16
  %13 = call i8* @malloc(i64 %12)
  %14 = bitcast i8* %13 to %class.KV.10*
  store %class.KV.10* %14, %class.KV.10** %9, align 8
  %15 = load %class.KV.10*, %class.KV.10** %9, align 8
  %16 = bitcast %class.KV.10* %15 to i8*
  %17 = load %class.KV.10*, %class.KV.10** %5, align 8
  %18 = bitcast %class.KV.10* %17 to i8*
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %18, i64 %21, i32 8, i1 false)
  %22 = load %class.KV.10*, %class.KV.10** %9, align 8
  %23 = load i32, i32* %7, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %class.KV.10, %class.KV.10* %22, i64 %24
  %26 = bitcast %class.KV.10* %25 to i8*
  %27 = bitcast i8* %26 to %class.KV.10*
  %28 = load %class.KV.10*, %class.KV.10** %8, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %27, %class.KV.10* dereferenceable(16) %28)
  %29 = load %class.KV.10*, %class.KV.10** %9, align 8
  ret %class.KV.10* %29
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE12insert_innerERKS1_yPKS0_S5_Py(%class.KV.10* noalias sret, %class.KV.10* dereferenceable(16), i64, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %7 = alloca %class.KV.10*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %class.c_d*, align 8
  %10 = alloca %class.c_d*, align 8
  %11 = alloca i64*, align 8
  %12 = alloca %class.LL*, align 8
  %13 = alloca %class.LL*, align 8
  %14 = alloca %class.LL*, align 8
  store %class.KV.10* %1, %class.KV.10** %7, align 8
  store i64 %2, i64* %8, align 8
  store %class.c_d* %3, %class.c_d** %9, align 8
  store %class.c_d* %4, %class.c_d** %10, align 8
  store i64* %5, i64** %11, align 8
  %15 = load %class.KV.10*, %class.KV.10** %7, align 8
  %16 = getelementptr inbounds %class.KV.10, %class.KV.10* %15, i32 0, i32 0
  %17 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %58

; <label>:21                                      ; preds = %6
  %22 = load %class.KV.10*, %class.KV.10** %7, align 8
  %23 = getelementptr inbounds %class.KV.10, %class.KV.10* %22, i32 0, i32 0
  %24 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %23 to %class.c_d**
  %25 = load %class.c_d*, %class.c_d** %24, align 8
  %26 = load %class.c_d*, %class.c_d** %9, align 8
  %27 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %25, %class.c_d* dereferenceable(8) %26)
  br i1 %27, label %28, label %34

; <label>:28                                      ; preds = %21
  %29 = load %class.KV.10*, %class.KV.10** %7, align 8
  %30 = getelementptr inbounds %class.KV.10, %class.KV.10* %29, i32 0, i32 0
  %31 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %30 to %class.c_d**
  %32 = load %class.c_d*, %class.c_d** %31, align 8
  %33 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EPKS0_S3_(%class.KV.10* %0, %class.c_d* %32, %class.c_d* %33)
  br label %84

; <label>:34                                      ; preds = %21
  %35 = load i64*, i64** %11, align 8
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %35, align 8
  %38 = call i8* @malloc(i64 24)
  %39 = bitcast i8* %38 to %class.LL*
  %40 = bitcast %class.LL* %39 to i8*
  %41 = bitcast i8* %40 to %class.LL*
  %42 = load %class.c_d*, %class.c_d** %9, align 8
  %43 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %41, %class.c_d* %42, %class.c_d* %43, %class.LL* null)
  store %class.LL* %41, %class.LL** %12, align 8
  %44 = call i8* @malloc(i64 24)
  %45 = bitcast i8* %44 to %class.LL*
  %46 = bitcast %class.LL* %45 to i8*
  %47 = bitcast i8* %46 to %class.LL*
  %48 = load %class.KV.10*, %class.KV.10** %7, align 8
  %49 = getelementptr inbounds %class.KV.10, %class.KV.10* %48, i32 0, i32 0
  %50 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %49 to %class.c_d**
  %51 = load %class.c_d*, %class.c_d** %50, align 8
  %52 = load %class.KV.10*, %class.KV.10** %7, align 8
  %53 = getelementptr inbounds %class.KV.10, %class.KV.10* %52, i32 0, i32 1
  %54 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %53 to %class.c_d**
  %55 = load %class.c_d*, %class.c_d** %54, align 8
  %56 = load %class.LL*, %class.LL** %12, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %47, %class.c_d* %51, %class.c_d* %55, %class.LL* %56)
  store %class.LL* %47, %class.LL** %13, align 8
  %57 = load %class.LL*, %class.LL** %13, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %57)
  br label %84

; <label>:58                                      ; preds = %6
  %59 = load %class.KV.10*, %class.KV.10** %7, align 8
  %60 = getelementptr inbounds %class.KV.10, %class.KV.10* %59, i32 0, i32 1
  %61 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %60 to %class.LL**
  %62 = load %class.LL*, %class.LL** %61, align 8
  %63 = icmp ne %class.LL* %62, null
  br i1 %63, label %64, label %73

; <label>:64                                      ; preds = %58
  %65 = load %class.KV.10*, %class.KV.10** %7, align 8
  %66 = getelementptr inbounds %class.KV.10, %class.KV.10* %65, i32 0, i32 1
  %67 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %66 to %class.LL**
  %68 = load %class.LL*, %class.LL** %67, align 8
  %69 = load %class.c_d*, %class.c_d** %9, align 8
  %70 = load %class.c_d*, %class.c_d** %10, align 8
  %71 = load i64*, i64** %11, align 8
  %72 = call %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL* %68, %class.c_d* %69, %class.c_d* %70, i64* %71)
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %72)
  br label %84

; <label>:73                                      ; preds = %58
  %74 = load i64*, i64** %11, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %74, align 8
  %77 = call i8* @malloc(i64 24)
  %78 = bitcast i8* %77 to %class.LL*
  %79 = bitcast %class.LL* %78 to i8*
  %80 = bitcast i8* %79 to %class.LL*
  %81 = load %class.c_d*, %class.c_d** %9, align 8
  %82 = load %class.c_d*, %class.c_d** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %80, %class.c_d* %81, %class.c_d* %82, %class.LL* null)
  store %class.LL* %80, %class.LL** %14, align 8
  %83 = load %class.LL*, %class.LL** %14, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %83)
  br label %84

; <label>:84                                      ; preds = %73, %64, %34, %28
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL*, %class.c_d*, %class.c_d*, i64*) #0 align 2 {
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.LL*, align 8
  %7 = alloca %class.c_d*, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.LL*, align 8
  %11 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %6, align 8
  store %class.c_d* %1, %class.c_d** %7, align 8
  store %class.c_d* %2, %class.c_d** %8, align 8
  store i64* %3, i64** %9, align 8
  %12 = load %class.LL*, %class.LL** %6, align 8
  %13 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %14 = load %class.c_d*, %class.c_d** %13, align 8
  %15 = load %class.c_d*, %class.c_d** %7, align 8
  %16 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %14, %class.c_d* dereferenceable(8) %15)
  br i1 %16, label %17, label %27

; <label>:17                                      ; preds = %4
  %18 = call i8* @malloc(i64 24)
  %19 = bitcast i8* %18 to %class.LL*
  %20 = bitcast %class.LL* %19 to i8*
  %21 = bitcast i8* %20 to %class.LL*
  %22 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %23 = load %class.c_d*, %class.c_d** %22, align 8
  %24 = load %class.c_d*, %class.c_d** %8, align 8
  %25 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %26 = load %class.LL*, %class.LL** %25, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %21, %class.c_d* %23, %class.c_d* %24, %class.LL* %26)
  store %class.LL* %21, %class.LL** %5, align 8
  br label %66

; <label>:27                                      ; preds = %4
  %28 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %29 = load %class.LL*, %class.LL** %28, align 8
  %30 = icmp ne %class.LL* %29, null
  br i1 %30, label %31, label %46

; <label>:31                                      ; preds = %27
  %32 = call i8* @malloc(i64 24)
  %33 = bitcast i8* %32 to %class.LL*
  %34 = bitcast %class.LL* %33 to i8*
  %35 = bitcast i8* %34 to %class.LL*
  %36 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %37 = load %class.c_d*, %class.c_d** %36, align 8
  %38 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 1
  %39 = load %class.c_d*, %class.c_d** %38, align 8
  %40 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 2
  %41 = load %class.LL*, %class.LL** %40, align 8
  %42 = load %class.c_d*, %class.c_d** %7, align 8
  %43 = load %class.c_d*, %class.c_d** %8, align 8
  %44 = load i64*, i64** %9, align 8
  %45 = call %class.LL* @_ZNK2LLI3c_dS0_E6insertEPKS0_S3_Py(%class.LL* %41, %class.c_d* %42, %class.c_d* %43, i64* %44)
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %35, %class.c_d* %37, %class.c_d* %39, %class.LL* %45)
  store %class.LL* %35, %class.LL** %5, align 8
  br label %66

; <label>:46                                      ; preds = %27
  %47 = load i64*, i64** %9, align 8
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %47, align 8
  %50 = call i8* @malloc(i64 24)
  %51 = bitcast i8* %50 to %class.LL*
  %52 = bitcast %class.LL* %51 to i8*
  %53 = bitcast i8* %52 to %class.LL*
  %54 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 0
  %55 = load %class.c_d*, %class.c_d** %54, align 8
  %56 = getelementptr inbounds %class.LL, %class.LL* %12, i32 0, i32 1
  %57 = load %class.c_d*, %class.c_d** %56, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %53, %class.c_d* %55, %class.c_d* %57, %class.LL* null)
  store %class.LL* %53, %class.LL** %10, align 8
  %58 = call i8* @malloc(i64 24)
  %59 = bitcast i8* %58 to %class.LL*
  %60 = bitcast %class.LL* %59 to i8*
  %61 = bitcast i8* %60 to %class.LL*
  %62 = load %class.c_d*, %class.c_d** %7, align 8
  %63 = load %class.c_d*, %class.c_d** %8, align 8
  %64 = load %class.LL*, %class.LL** %10, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %61, %class.c_d* %62, %class.c_d* %63, %class.LL* %64)
  store %class.LL* %61, %class.LL** %11, align 8
  %65 = load %class.LL*, %class.LL** %11, align 8
  store %class.LL* %65, %class.LL** %5, align 8
  br label %66

; <label>:66                                      ; preds = %46, %31, %17
  %67 = load %class.LL*, %class.LL** %5, align 8
  ret %class.LL* %67
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EE12remove_innerERKS1_yPKS0_Py(%class.KV* noalias sret, %class.KV* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.0*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.0*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.0, align 8
  %19 = alloca %class.KV.0*, align 8
  store %class.KV* %1, %class.KV** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV*, %class.KV** %6, align 8
  %21 = getelementptr inbounds %class.KV, %class.KV* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %21 to %class.KV.0**
  %23 = load %class.KV.0*, %class.KV.0** %22, align 8
  store %class.KV.0* %23, %class.KV.0** %10, align 8
  %24 = load %class.KV*, %class.KV** %6, align 8
  %25 = getelementptr inbounds %class.KV, %class.KV* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.0*, %class.KV.0** %10, align 8
  %57 = getelementptr inbounds %class.KV.0, %class.KV.0* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.0, %class.KV.0* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.0*, %class.KV.0** %10, align 8
  %67 = getelementptr inbounds %class.KV.0, %class.KV.0* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.0, %class.KV.0* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.0*
  store %class.KV.0* %82, %class.KV.0** %16, align 8
  %83 = load %class.KV.0*, %class.KV.0** %16, align 8
  %84 = bitcast %class.KV.0* %83 to i8*
  %85 = load %class.KV.0*, %class.KV.0** %10, align 8
  %86 = bitcast %class.KV.0* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.0*, %class.KV.0** %16, align 8
  %93 = getelementptr inbounds %class.KV.0, %class.KV.0* %92, i64 %91
  %94 = bitcast %class.KV.0* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.0*, %class.KV.0** %10, align 8
  %99 = getelementptr inbounds %class.KV.0, %class.KV.0* %98, i64 %97
  %100 = bitcast %class.KV.0* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.0*, %class.KV.0** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %115, %class.KV.0* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.0*, %class.KV.0** %10, align 8
  %123 = getelementptr inbounds %class.KV.0, %class.KV.0* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj1EE12remove_innerERKS1_yPKS0_Py(%class.KV.0* sret %18, %class.KV.0* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.0*, %class.KV.0** %10, align 8
  %131 = getelementptr inbounds %class.KV.0, %class.KV.0* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj1EEeqERKS1_(%class.KV.0* %18, %class.KV.0* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.0*, %class.KV.0** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.0* @_ZN2KVI3c_dS0_Lj1EE11update_nodeEPKS1_jjRS2_(%class.KV.0* %136, i32 %137, i32 %138, %class.KV.0* dereferenceable(16) %18)
  store %class.KV.0* %139, %class.KV.0** %19, align 8
  %140 = load %class.KV*, %class.KV** %6, align 8
  %141 = getelementptr inbounds %class.KV, %class.KV* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.0*, %class.KV.0** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1EyPKS_IS0_S0_Lj1EE(%class.KV* %0, i64 %143, %class.KV.0* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV*, %class.KV** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV* %0, %class.KV* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj0EEeqERKS1_(%class.KV*, %class.KV* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV*, %class.KV** %4, align 8
  %10 = getelementptr inbounds %class.KV, %class.KV* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %15 to %class.KV.0**
  %17 = load %class.KV.0*, %class.KV.0** %16, align 8
  %18 = load %class.KV*, %class.KV** %4, align 8
  %19 = getelementptr inbounds %class.KV, %class.KV* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %19 to %class.KV.0**
  %21 = load %class.KV.0*, %class.KV.0** %20, align 8
  %22 = icmp eq %class.KV.0* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC1ERKS1_(%class.KV*, %class.KV* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = load %class.KV*, %class.KV** %4, align 8
  call void @_ZN2KVI3c_dS0_Lj0EEC2ERKS1_(%class.KV* %5, %class.KV* dereferenceable(16) %6)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj1EE12remove_innerERKS1_yPKS0_Py(%class.KV.0* noalias sret, %class.KV.0* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.0*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.2*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.2*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.2, align 8
  %19 = alloca %class.KV.2*, align 8
  store %class.KV.0* %1, %class.KV.0** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.0*, %class.KV.0** %6, align 8
  %21 = getelementptr inbounds %class.KV.0, %class.KV.0* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %21 to %class.KV.2**
  %23 = load %class.KV.2*, %class.KV.2** %22, align 8
  store %class.KV.2* %23, %class.KV.2** %10, align 8
  %24 = load %class.KV.0*, %class.KV.0** %6, align 8
  %25 = getelementptr inbounds %class.KV.0, %class.KV.0* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.2*, %class.KV.2** %10, align 8
  %57 = getelementptr inbounds %class.KV.2, %class.KV.2* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.2, %class.KV.2* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.2*, %class.KV.2** %10, align 8
  %67 = getelementptr inbounds %class.KV.2, %class.KV.2* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.2, %class.KV.2* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.2*
  store %class.KV.2* %82, %class.KV.2** %16, align 8
  %83 = load %class.KV.2*, %class.KV.2** %16, align 8
  %84 = bitcast %class.KV.2* %83 to i8*
  %85 = load %class.KV.2*, %class.KV.2** %10, align 8
  %86 = bitcast %class.KV.2* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.2*, %class.KV.2** %16, align 8
  %93 = getelementptr inbounds %class.KV.2, %class.KV.2* %92, i64 %91
  %94 = bitcast %class.KV.2* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.2*, %class.KV.2** %10, align 8
  %99 = getelementptr inbounds %class.KV.2, %class.KV.2* %98, i64 %97
  %100 = bitcast %class.KV.2* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.2*, %class.KV.2** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %115, %class.KV.2* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.2*, %class.KV.2** %10, align 8
  %123 = getelementptr inbounds %class.KV.2, %class.KV.2* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj2EE12remove_innerERKS1_yPKS0_Py(%class.KV.2* sret %18, %class.KV.2* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.2*, %class.KV.2** %10, align 8
  %131 = getelementptr inbounds %class.KV.2, %class.KV.2* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj2EEeqERKS1_(%class.KV.2* %18, %class.KV.2* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.2*, %class.KV.2** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.2* @_ZN2KVI3c_dS0_Lj2EE11update_nodeEPKS1_jjRS2_(%class.KV.2* %136, i32 %137, i32 %138, %class.KV.2* dereferenceable(16) %18)
  store %class.KV.2* %139, %class.KV.2** %19, align 8
  %140 = load %class.KV.0*, %class.KV.0** %6, align 8
  %141 = getelementptr inbounds %class.KV.0, %class.KV.0* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.2*, %class.KV.2** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1EyPKS_IS0_S0_Lj2EE(%class.KV.0* %0, i64 %143, %class.KV.2* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.0*, %class.KV.0** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj1EEC1ERKS1_(%class.KV.0* %0, %class.KV.0* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj1EEeqERKS1_(%class.KV.0*, %class.KV.0* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.0*, align 8
  %4 = alloca %class.KV.0*, align 8
  store %class.KV.0* %0, %class.KV.0** %3, align 8
  store %class.KV.0* %1, %class.KV.0** %4, align 8
  %5 = load %class.KV.0*, %class.KV.0** %3, align 8
  %6 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.0*, %class.KV.0** %4, align 8
  %10 = getelementptr inbounds %class.KV.0, %class.KV.0* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 1>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.0, %class.KV.0* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %15 to %class.KV.2**
  %17 = load %class.KV.2*, %class.KV.2** %16, align 8
  %18 = load %class.KV.0*, %class.KV.0** %4, align 8
  %19 = getelementptr inbounds %class.KV.0, %class.KV.0* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 1>::Val"* %19 to %class.KV.2**
  %21 = load %class.KV.2*, %class.KV.2** %20, align 8
  %22 = icmp eq %class.KV.2* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj2EE12remove_innerERKS1_yPKS0_Py(%class.KV.2* noalias sret, %class.KV.2* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.2*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.3*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.3*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.3, align 8
  %19 = alloca %class.KV.3*, align 8
  store %class.KV.2* %1, %class.KV.2** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.2*, %class.KV.2** %6, align 8
  %21 = getelementptr inbounds %class.KV.2, %class.KV.2* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %21 to %class.KV.3**
  %23 = load %class.KV.3*, %class.KV.3** %22, align 8
  store %class.KV.3* %23, %class.KV.3** %10, align 8
  %24 = load %class.KV.2*, %class.KV.2** %6, align 8
  %25 = getelementptr inbounds %class.KV.2, %class.KV.2* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.3*, %class.KV.3** %10, align 8
  %57 = getelementptr inbounds %class.KV.3, %class.KV.3* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.3, %class.KV.3* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.3*, %class.KV.3** %10, align 8
  %67 = getelementptr inbounds %class.KV.3, %class.KV.3* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.3, %class.KV.3* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.3*
  store %class.KV.3* %82, %class.KV.3** %16, align 8
  %83 = load %class.KV.3*, %class.KV.3** %16, align 8
  %84 = bitcast %class.KV.3* %83 to i8*
  %85 = load %class.KV.3*, %class.KV.3** %10, align 8
  %86 = bitcast %class.KV.3* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.3*, %class.KV.3** %16, align 8
  %93 = getelementptr inbounds %class.KV.3, %class.KV.3* %92, i64 %91
  %94 = bitcast %class.KV.3* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.3*, %class.KV.3** %10, align 8
  %99 = getelementptr inbounds %class.KV.3, %class.KV.3* %98, i64 %97
  %100 = bitcast %class.KV.3* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.3*, %class.KV.3** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %115, %class.KV.3* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.3*, %class.KV.3** %10, align 8
  %123 = getelementptr inbounds %class.KV.3, %class.KV.3* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj3EE12remove_innerERKS1_yPKS0_Py(%class.KV.3* sret %18, %class.KV.3* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.3*, %class.KV.3** %10, align 8
  %131 = getelementptr inbounds %class.KV.3, %class.KV.3* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj3EEeqERKS1_(%class.KV.3* %18, %class.KV.3* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.3*, %class.KV.3** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.3* @_ZN2KVI3c_dS0_Lj3EE11update_nodeEPKS1_jjRS2_(%class.KV.3* %136, i32 %137, i32 %138, %class.KV.3* dereferenceable(16) %18)
  store %class.KV.3* %139, %class.KV.3** %19, align 8
  %140 = load %class.KV.2*, %class.KV.2** %6, align 8
  %141 = getelementptr inbounds %class.KV.2, %class.KV.2* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.3*, %class.KV.3** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1EyPKS_IS0_S0_Lj3EE(%class.KV.2* %0, i64 %143, %class.KV.3* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.2*, %class.KV.2** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj2EEC1ERKS1_(%class.KV.2* %0, %class.KV.2* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj2EEeqERKS1_(%class.KV.2*, %class.KV.2* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.2*, align 8
  %4 = alloca %class.KV.2*, align 8
  store %class.KV.2* %0, %class.KV.2** %3, align 8
  store %class.KV.2* %1, %class.KV.2** %4, align 8
  %5 = load %class.KV.2*, %class.KV.2** %3, align 8
  %6 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.2*, %class.KV.2** %4, align 8
  %10 = getelementptr inbounds %class.KV.2, %class.KV.2* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 2>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.2, %class.KV.2* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %15 to %class.KV.3**
  %17 = load %class.KV.3*, %class.KV.3** %16, align 8
  %18 = load %class.KV.2*, %class.KV.2** %4, align 8
  %19 = getelementptr inbounds %class.KV.2, %class.KV.2* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 2>::Val"* %19 to %class.KV.3**
  %21 = load %class.KV.3*, %class.KV.3** %20, align 8
  %22 = icmp eq %class.KV.3* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj3EE12remove_innerERKS1_yPKS0_Py(%class.KV.3* noalias sret, %class.KV.3* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.3*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.4*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.4*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.4, align 8
  %19 = alloca %class.KV.4*, align 8
  store %class.KV.3* %1, %class.KV.3** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.3*, %class.KV.3** %6, align 8
  %21 = getelementptr inbounds %class.KV.3, %class.KV.3* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %21 to %class.KV.4**
  %23 = load %class.KV.4*, %class.KV.4** %22, align 8
  store %class.KV.4* %23, %class.KV.4** %10, align 8
  %24 = load %class.KV.3*, %class.KV.3** %6, align 8
  %25 = getelementptr inbounds %class.KV.3, %class.KV.3* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.4*, %class.KV.4** %10, align 8
  %57 = getelementptr inbounds %class.KV.4, %class.KV.4* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.4, %class.KV.4* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.4*, %class.KV.4** %10, align 8
  %67 = getelementptr inbounds %class.KV.4, %class.KV.4* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.4, %class.KV.4* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.4*
  store %class.KV.4* %82, %class.KV.4** %16, align 8
  %83 = load %class.KV.4*, %class.KV.4** %16, align 8
  %84 = bitcast %class.KV.4* %83 to i8*
  %85 = load %class.KV.4*, %class.KV.4** %10, align 8
  %86 = bitcast %class.KV.4* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.4*, %class.KV.4** %16, align 8
  %93 = getelementptr inbounds %class.KV.4, %class.KV.4* %92, i64 %91
  %94 = bitcast %class.KV.4* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.4*, %class.KV.4** %10, align 8
  %99 = getelementptr inbounds %class.KV.4, %class.KV.4* %98, i64 %97
  %100 = bitcast %class.KV.4* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.4*, %class.KV.4** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %115, %class.KV.4* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.4*, %class.KV.4** %10, align 8
  %123 = getelementptr inbounds %class.KV.4, %class.KV.4* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj4EE12remove_innerERKS1_yPKS0_Py(%class.KV.4* sret %18, %class.KV.4* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.4*, %class.KV.4** %10, align 8
  %131 = getelementptr inbounds %class.KV.4, %class.KV.4* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj4EEeqERKS1_(%class.KV.4* %18, %class.KV.4* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.4*, %class.KV.4** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.4* @_ZN2KVI3c_dS0_Lj4EE11update_nodeEPKS1_jjRS2_(%class.KV.4* %136, i32 %137, i32 %138, %class.KV.4* dereferenceable(16) %18)
  store %class.KV.4* %139, %class.KV.4** %19, align 8
  %140 = load %class.KV.3*, %class.KV.3** %6, align 8
  %141 = getelementptr inbounds %class.KV.3, %class.KV.3* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.4*, %class.KV.4** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1EyPKS_IS0_S0_Lj4EE(%class.KV.3* %0, i64 %143, %class.KV.4* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.3*, %class.KV.3** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj3EEC1ERKS1_(%class.KV.3* %0, %class.KV.3* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj3EEeqERKS1_(%class.KV.3*, %class.KV.3* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.3*, align 8
  %4 = alloca %class.KV.3*, align 8
  store %class.KV.3* %0, %class.KV.3** %3, align 8
  store %class.KV.3* %1, %class.KV.3** %4, align 8
  %5 = load %class.KV.3*, %class.KV.3** %3, align 8
  %6 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.3*, %class.KV.3** %4, align 8
  %10 = getelementptr inbounds %class.KV.3, %class.KV.3* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 3>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.3, %class.KV.3* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %15 to %class.KV.4**
  %17 = load %class.KV.4*, %class.KV.4** %16, align 8
  %18 = load %class.KV.3*, %class.KV.3** %4, align 8
  %19 = getelementptr inbounds %class.KV.3, %class.KV.3* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 3>::Val"* %19 to %class.KV.4**
  %21 = load %class.KV.4*, %class.KV.4** %20, align 8
  %22 = icmp eq %class.KV.4* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj4EE12remove_innerERKS1_yPKS0_Py(%class.KV.4* noalias sret, %class.KV.4* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.4*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.5*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.5*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.5, align 8
  %19 = alloca %class.KV.5*, align 8
  store %class.KV.4* %1, %class.KV.4** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.4*, %class.KV.4** %6, align 8
  %21 = getelementptr inbounds %class.KV.4, %class.KV.4* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %21 to %class.KV.5**
  %23 = load %class.KV.5*, %class.KV.5** %22, align 8
  store %class.KV.5* %23, %class.KV.5** %10, align 8
  %24 = load %class.KV.4*, %class.KV.4** %6, align 8
  %25 = getelementptr inbounds %class.KV.4, %class.KV.4* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.5*, %class.KV.5** %10, align 8
  %57 = getelementptr inbounds %class.KV.5, %class.KV.5* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.5, %class.KV.5* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.5*, %class.KV.5** %10, align 8
  %67 = getelementptr inbounds %class.KV.5, %class.KV.5* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.5, %class.KV.5* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.5*
  store %class.KV.5* %82, %class.KV.5** %16, align 8
  %83 = load %class.KV.5*, %class.KV.5** %16, align 8
  %84 = bitcast %class.KV.5* %83 to i8*
  %85 = load %class.KV.5*, %class.KV.5** %10, align 8
  %86 = bitcast %class.KV.5* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.5*, %class.KV.5** %16, align 8
  %93 = getelementptr inbounds %class.KV.5, %class.KV.5* %92, i64 %91
  %94 = bitcast %class.KV.5* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.5*, %class.KV.5** %10, align 8
  %99 = getelementptr inbounds %class.KV.5, %class.KV.5* %98, i64 %97
  %100 = bitcast %class.KV.5* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.5*, %class.KV.5** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %115, %class.KV.5* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.5*, %class.KV.5** %10, align 8
  %123 = getelementptr inbounds %class.KV.5, %class.KV.5* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj5EE12remove_innerERKS1_yPKS0_Py(%class.KV.5* sret %18, %class.KV.5* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.5*, %class.KV.5** %10, align 8
  %131 = getelementptr inbounds %class.KV.5, %class.KV.5* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj5EEeqERKS1_(%class.KV.5* %18, %class.KV.5* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.5*, %class.KV.5** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.5* @_ZN2KVI3c_dS0_Lj5EE11update_nodeEPKS1_jjRS2_(%class.KV.5* %136, i32 %137, i32 %138, %class.KV.5* dereferenceable(16) %18)
  store %class.KV.5* %139, %class.KV.5** %19, align 8
  %140 = load %class.KV.4*, %class.KV.4** %6, align 8
  %141 = getelementptr inbounds %class.KV.4, %class.KV.4* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.5*, %class.KV.5** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1EyPKS_IS0_S0_Lj5EE(%class.KV.4* %0, i64 %143, %class.KV.5* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.4*, %class.KV.4** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj4EEC1ERKS1_(%class.KV.4* %0, %class.KV.4* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj4EEeqERKS1_(%class.KV.4*, %class.KV.4* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.4*, align 8
  %4 = alloca %class.KV.4*, align 8
  store %class.KV.4* %0, %class.KV.4** %3, align 8
  store %class.KV.4* %1, %class.KV.4** %4, align 8
  %5 = load %class.KV.4*, %class.KV.4** %3, align 8
  %6 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.4*, %class.KV.4** %4, align 8
  %10 = getelementptr inbounds %class.KV.4, %class.KV.4* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 4>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.4, %class.KV.4* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %15 to %class.KV.5**
  %17 = load %class.KV.5*, %class.KV.5** %16, align 8
  %18 = load %class.KV.4*, %class.KV.4** %4, align 8
  %19 = getelementptr inbounds %class.KV.4, %class.KV.4* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 4>::Val"* %19 to %class.KV.5**
  %21 = load %class.KV.5*, %class.KV.5** %20, align 8
  %22 = icmp eq %class.KV.5* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj5EE12remove_innerERKS1_yPKS0_Py(%class.KV.5* noalias sret, %class.KV.5* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.5*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.6*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.6*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.6, align 8
  %19 = alloca %class.KV.6*, align 8
  store %class.KV.5* %1, %class.KV.5** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.5*, %class.KV.5** %6, align 8
  %21 = getelementptr inbounds %class.KV.5, %class.KV.5* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %21 to %class.KV.6**
  %23 = load %class.KV.6*, %class.KV.6** %22, align 8
  store %class.KV.6* %23, %class.KV.6** %10, align 8
  %24 = load %class.KV.5*, %class.KV.5** %6, align 8
  %25 = getelementptr inbounds %class.KV.5, %class.KV.5* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.6*, %class.KV.6** %10, align 8
  %57 = getelementptr inbounds %class.KV.6, %class.KV.6* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.6, %class.KV.6* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.6*, %class.KV.6** %10, align 8
  %67 = getelementptr inbounds %class.KV.6, %class.KV.6* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.6, %class.KV.6* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.6*
  store %class.KV.6* %82, %class.KV.6** %16, align 8
  %83 = load %class.KV.6*, %class.KV.6** %16, align 8
  %84 = bitcast %class.KV.6* %83 to i8*
  %85 = load %class.KV.6*, %class.KV.6** %10, align 8
  %86 = bitcast %class.KV.6* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.6*, %class.KV.6** %16, align 8
  %93 = getelementptr inbounds %class.KV.6, %class.KV.6* %92, i64 %91
  %94 = bitcast %class.KV.6* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.6*, %class.KV.6** %10, align 8
  %99 = getelementptr inbounds %class.KV.6, %class.KV.6* %98, i64 %97
  %100 = bitcast %class.KV.6* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.6*, %class.KV.6** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %115, %class.KV.6* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.6*, %class.KV.6** %10, align 8
  %123 = getelementptr inbounds %class.KV.6, %class.KV.6* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj6EE12remove_innerERKS1_yPKS0_Py(%class.KV.6* sret %18, %class.KV.6* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.6*, %class.KV.6** %10, align 8
  %131 = getelementptr inbounds %class.KV.6, %class.KV.6* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj6EEeqERKS1_(%class.KV.6* %18, %class.KV.6* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.6*, %class.KV.6** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.6* @_ZN2KVI3c_dS0_Lj6EE11update_nodeEPKS1_jjRS2_(%class.KV.6* %136, i32 %137, i32 %138, %class.KV.6* dereferenceable(16) %18)
  store %class.KV.6* %139, %class.KV.6** %19, align 8
  %140 = load %class.KV.5*, %class.KV.5** %6, align 8
  %141 = getelementptr inbounds %class.KV.5, %class.KV.5* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.6*, %class.KV.6** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1EyPKS_IS0_S0_Lj6EE(%class.KV.5* %0, i64 %143, %class.KV.6* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.5*, %class.KV.5** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj5EEC1ERKS1_(%class.KV.5* %0, %class.KV.5* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj5EEeqERKS1_(%class.KV.5*, %class.KV.5* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.5*, align 8
  %4 = alloca %class.KV.5*, align 8
  store %class.KV.5* %0, %class.KV.5** %3, align 8
  store %class.KV.5* %1, %class.KV.5** %4, align 8
  %5 = load %class.KV.5*, %class.KV.5** %3, align 8
  %6 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.5*, %class.KV.5** %4, align 8
  %10 = getelementptr inbounds %class.KV.5, %class.KV.5* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 5>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.5, %class.KV.5* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %15 to %class.KV.6**
  %17 = load %class.KV.6*, %class.KV.6** %16, align 8
  %18 = load %class.KV.5*, %class.KV.5** %4, align 8
  %19 = getelementptr inbounds %class.KV.5, %class.KV.5* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 5>::Val"* %19 to %class.KV.6**
  %21 = load %class.KV.6*, %class.KV.6** %20, align 8
  %22 = icmp eq %class.KV.6* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj6EE12remove_innerERKS1_yPKS0_Py(%class.KV.6* noalias sret, %class.KV.6* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.6*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.7*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.7*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.7, align 8
  %19 = alloca %class.KV.7*, align 8
  store %class.KV.6* %1, %class.KV.6** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.6*, %class.KV.6** %6, align 8
  %21 = getelementptr inbounds %class.KV.6, %class.KV.6* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %21 to %class.KV.7**
  %23 = load %class.KV.7*, %class.KV.7** %22, align 8
  store %class.KV.7* %23, %class.KV.7** %10, align 8
  %24 = load %class.KV.6*, %class.KV.6** %6, align 8
  %25 = getelementptr inbounds %class.KV.6, %class.KV.6* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.7*, %class.KV.7** %10, align 8
  %57 = getelementptr inbounds %class.KV.7, %class.KV.7* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.7, %class.KV.7* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.7*, %class.KV.7** %10, align 8
  %67 = getelementptr inbounds %class.KV.7, %class.KV.7* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.7, %class.KV.7* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.7*
  store %class.KV.7* %82, %class.KV.7** %16, align 8
  %83 = load %class.KV.7*, %class.KV.7** %16, align 8
  %84 = bitcast %class.KV.7* %83 to i8*
  %85 = load %class.KV.7*, %class.KV.7** %10, align 8
  %86 = bitcast %class.KV.7* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.7*, %class.KV.7** %16, align 8
  %93 = getelementptr inbounds %class.KV.7, %class.KV.7* %92, i64 %91
  %94 = bitcast %class.KV.7* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.7*, %class.KV.7** %10, align 8
  %99 = getelementptr inbounds %class.KV.7, %class.KV.7* %98, i64 %97
  %100 = bitcast %class.KV.7* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.7*, %class.KV.7** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %115, %class.KV.7* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.7*, %class.KV.7** %10, align 8
  %123 = getelementptr inbounds %class.KV.7, %class.KV.7* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj7EE12remove_innerERKS1_yPKS0_Py(%class.KV.7* sret %18, %class.KV.7* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.7*, %class.KV.7** %10, align 8
  %131 = getelementptr inbounds %class.KV.7, %class.KV.7* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj7EEeqERKS1_(%class.KV.7* %18, %class.KV.7* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.7*, %class.KV.7** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.7* @_ZN2KVI3c_dS0_Lj7EE11update_nodeEPKS1_jjRS2_(%class.KV.7* %136, i32 %137, i32 %138, %class.KV.7* dereferenceable(16) %18)
  store %class.KV.7* %139, %class.KV.7** %19, align 8
  %140 = load %class.KV.6*, %class.KV.6** %6, align 8
  %141 = getelementptr inbounds %class.KV.6, %class.KV.6* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.7*, %class.KV.7** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1EyPKS_IS0_S0_Lj7EE(%class.KV.6* %0, i64 %143, %class.KV.7* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.6*, %class.KV.6** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj6EEC1ERKS1_(%class.KV.6* %0, %class.KV.6* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj6EEeqERKS1_(%class.KV.6*, %class.KV.6* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.6*, align 8
  %4 = alloca %class.KV.6*, align 8
  store %class.KV.6* %0, %class.KV.6** %3, align 8
  store %class.KV.6* %1, %class.KV.6** %4, align 8
  %5 = load %class.KV.6*, %class.KV.6** %3, align 8
  %6 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.6*, %class.KV.6** %4, align 8
  %10 = getelementptr inbounds %class.KV.6, %class.KV.6* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 6>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.6, %class.KV.6* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %15 to %class.KV.7**
  %17 = load %class.KV.7*, %class.KV.7** %16, align 8
  %18 = load %class.KV.6*, %class.KV.6** %4, align 8
  %19 = getelementptr inbounds %class.KV.6, %class.KV.6* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 6>::Val"* %19 to %class.KV.7**
  %21 = load %class.KV.7*, %class.KV.7** %20, align 8
  %22 = icmp eq %class.KV.7* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj7EE12remove_innerERKS1_yPKS0_Py(%class.KV.7* noalias sret, %class.KV.7* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.7*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.8, align 8
  %19 = alloca %class.KV.8*, align 8
  store %class.KV.7* %1, %class.KV.7** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.7*, %class.KV.7** %6, align 8
  %21 = getelementptr inbounds %class.KV.7, %class.KV.7* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %21 to %class.KV.8**
  %23 = load %class.KV.8*, %class.KV.8** %22, align 8
  store %class.KV.8* %23, %class.KV.8** %10, align 8
  %24 = load %class.KV.7*, %class.KV.7** %6, align 8
  %25 = getelementptr inbounds %class.KV.7, %class.KV.7* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.8*, %class.KV.8** %10, align 8
  %57 = getelementptr inbounds %class.KV.8, %class.KV.8* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.8, %class.KV.8* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.8*, %class.KV.8** %10, align 8
  %67 = getelementptr inbounds %class.KV.8, %class.KV.8* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.8, %class.KV.8* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.8*
  store %class.KV.8* %82, %class.KV.8** %16, align 8
  %83 = load %class.KV.8*, %class.KV.8** %16, align 8
  %84 = bitcast %class.KV.8* %83 to i8*
  %85 = load %class.KV.8*, %class.KV.8** %10, align 8
  %86 = bitcast %class.KV.8* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.8*, %class.KV.8** %16, align 8
  %93 = getelementptr inbounds %class.KV.8, %class.KV.8* %92, i64 %91
  %94 = bitcast %class.KV.8* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.8*, %class.KV.8** %10, align 8
  %99 = getelementptr inbounds %class.KV.8, %class.KV.8* %98, i64 %97
  %100 = bitcast %class.KV.8* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.8*, %class.KV.8** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %115, %class.KV.8* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.8*, %class.KV.8** %10, align 8
  %123 = getelementptr inbounds %class.KV.8, %class.KV.8* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj8EE12remove_innerERKS1_yPKS0_Py(%class.KV.8* sret %18, %class.KV.8* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.8*, %class.KV.8** %10, align 8
  %131 = getelementptr inbounds %class.KV.8, %class.KV.8* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj8EEeqERKS1_(%class.KV.8* %18, %class.KV.8* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.8*, %class.KV.8** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.8* @_ZN2KVI3c_dS0_Lj8EE11update_nodeEPKS1_jjRS2_(%class.KV.8* %136, i32 %137, i32 %138, %class.KV.8* dereferenceable(16) %18)
  store %class.KV.8* %139, %class.KV.8** %19, align 8
  %140 = load %class.KV.7*, %class.KV.7** %6, align 8
  %141 = getelementptr inbounds %class.KV.7, %class.KV.7* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.8*, %class.KV.8** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1EyPKS_IS0_S0_Lj8EE(%class.KV.7* %0, i64 %143, %class.KV.8* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.7*, %class.KV.7** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj7EEC1ERKS1_(%class.KV.7* %0, %class.KV.7* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj7EEeqERKS1_(%class.KV.7*, %class.KV.7* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.7*, align 8
  %4 = alloca %class.KV.7*, align 8
  store %class.KV.7* %0, %class.KV.7** %3, align 8
  store %class.KV.7* %1, %class.KV.7** %4, align 8
  %5 = load %class.KV.7*, %class.KV.7** %3, align 8
  %6 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.7*, %class.KV.7** %4, align 8
  %10 = getelementptr inbounds %class.KV.7, %class.KV.7* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 7>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.7, %class.KV.7* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %15 to %class.KV.8**
  %17 = load %class.KV.8*, %class.KV.8** %16, align 8
  %18 = load %class.KV.7*, %class.KV.7** %4, align 8
  %19 = getelementptr inbounds %class.KV.7, %class.KV.7* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 7>::Val"* %19 to %class.KV.8**
  %21 = load %class.KV.8*, %class.KV.8** %20, align 8
  %22 = icmp eq %class.KV.8* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj8EE12remove_innerERKS1_yPKS0_Py(%class.KV.8* noalias sret, %class.KV.8* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.9*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.9*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.9, align 8
  %19 = alloca %class.KV.9*, align 8
  store %class.KV.8* %1, %class.KV.8** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.8*, %class.KV.8** %6, align 8
  %21 = getelementptr inbounds %class.KV.8, %class.KV.8* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %21 to %class.KV.9**
  %23 = load %class.KV.9*, %class.KV.9** %22, align 8
  store %class.KV.9* %23, %class.KV.9** %10, align 8
  %24 = load %class.KV.8*, %class.KV.8** %6, align 8
  %25 = getelementptr inbounds %class.KV.8, %class.KV.8* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.9*, %class.KV.9** %10, align 8
  %57 = getelementptr inbounds %class.KV.9, %class.KV.9* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.9, %class.KV.9* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.9*, %class.KV.9** %10, align 8
  %67 = getelementptr inbounds %class.KV.9, %class.KV.9* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.9, %class.KV.9* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.9*
  store %class.KV.9* %82, %class.KV.9** %16, align 8
  %83 = load %class.KV.9*, %class.KV.9** %16, align 8
  %84 = bitcast %class.KV.9* %83 to i8*
  %85 = load %class.KV.9*, %class.KV.9** %10, align 8
  %86 = bitcast %class.KV.9* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.9*, %class.KV.9** %16, align 8
  %93 = getelementptr inbounds %class.KV.9, %class.KV.9* %92, i64 %91
  %94 = bitcast %class.KV.9* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.9*, %class.KV.9** %10, align 8
  %99 = getelementptr inbounds %class.KV.9, %class.KV.9* %98, i64 %97
  %100 = bitcast %class.KV.9* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.9*, %class.KV.9** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %115, %class.KV.9* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.9*, %class.KV.9** %10, align 8
  %123 = getelementptr inbounds %class.KV.9, %class.KV.9* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj9EE12remove_innerERKS1_yPKS0_Py(%class.KV.9* sret %18, %class.KV.9* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.9*, %class.KV.9** %10, align 8
  %131 = getelementptr inbounds %class.KV.9, %class.KV.9* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj9EEeqERKS1_(%class.KV.9* %18, %class.KV.9* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.9*, %class.KV.9** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.9* @_ZN2KVI3c_dS0_Lj9EE11update_nodeEPKS1_jjRS2_(%class.KV.9* %136, i32 %137, i32 %138, %class.KV.9* dereferenceable(16) %18)
  store %class.KV.9* %139, %class.KV.9** %19, align 8
  %140 = load %class.KV.8*, %class.KV.8** %6, align 8
  %141 = getelementptr inbounds %class.KV.8, %class.KV.8* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.9*, %class.KV.9** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1EyPKS_IS0_S0_Lj9EE(%class.KV.8* %0, i64 %143, %class.KV.9* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.8*, %class.KV.8** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj8EEC1ERKS1_(%class.KV.8* %0, %class.KV.8* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj8EEeqERKS1_(%class.KV.8*, %class.KV.8* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.8*, align 8
  %4 = alloca %class.KV.8*, align 8
  store %class.KV.8* %0, %class.KV.8** %3, align 8
  store %class.KV.8* %1, %class.KV.8** %4, align 8
  %5 = load %class.KV.8*, %class.KV.8** %3, align 8
  %6 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.8*, %class.KV.8** %4, align 8
  %10 = getelementptr inbounds %class.KV.8, %class.KV.8* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 8>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.8, %class.KV.8* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %15 to %class.KV.9**
  %17 = load %class.KV.9*, %class.KV.9** %16, align 8
  %18 = load %class.KV.8*, %class.KV.8** %4, align 8
  %19 = getelementptr inbounds %class.KV.8, %class.KV.8* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 8>::Val"* %19 to %class.KV.9**
  %21 = load %class.KV.9*, %class.KV.9** %20, align 8
  %22 = icmp eq %class.KV.9* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj9EE12remove_innerERKS1_yPKS0_Py(%class.KV.9* noalias sret, %class.KV.9* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.9*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.KV.10*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  %15 = alloca i32, align 4
  %16 = alloca %class.KV.10*, align 8
  %17 = alloca i64, align 8
  %18 = alloca %class.KV.10, align 8
  %19 = alloca %class.KV.10*, align 8
  store %class.KV.9* %1, %class.KV.9** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %20 = load %class.KV.9*, %class.KV.9** %6, align 8
  %21 = getelementptr inbounds %class.KV.9, %class.KV.9* %20, i32 0, i32 1
  %22 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %21 to %class.KV.10**
  %23 = load %class.KV.10*, %class.KV.10** %22, align 8
  store %class.KV.10* %23, %class.KV.10** %10, align 8
  %24 = load %class.KV.9*, %class.KV.9** %6, align 8
  %25 = getelementptr inbounds %class.KV.9, %class.KV.9* %24, i32 0, i32 0
  %26 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = lshr i64 %27, 1
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %7, align 8
  %30 = and i64 %29, 63
  %31 = urem i64 %30, 63
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i64, i64* %11, align 8
  %34 = call i64 @llvm.ctpop.i64(i64 %33)
  %35 = trunc i64 %34 to i32
  store i32 %35, i32* %13, align 4
  %36 = load i64, i64* %11, align 8
  %37 = load i32, i32* %12, align 4
  %38 = zext i32 %37 to i64
  %39 = shl i64 1, %38
  %40 = and i64 %36, %39
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %14, align 1
  %43 = load i8, i8* %14, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %45, label %145

; <label>:45                                      ; preds = %5
  %46 = load i64, i64* %11, align 8
  %47 = shl i64 %46, 1
  %48 = load i32, i32* %12, align 4
  %49 = sub i32 63, %48
  %50 = zext i32 %49 to i64
  %51 = shl i64 %47, %50
  %52 = call i64 @llvm.ctpop.i64(i64 %51)
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %15, align 4
  %54 = load i32, i32* %15, align 4
  %55 = zext i32 %54 to i64
  %56 = load %class.KV.10*, %class.KV.10** %10, align 8
  %57 = getelementptr inbounds %class.KV.10, %class.KV.10* %56, i64 %55
  %58 = getelementptr inbounds %class.KV.10, %class.KV.10* %57, i32 0, i32 0
  %59 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = and i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %119

; <label>:63                                      ; preds = %45
  %64 = load i32, i32* %15, align 4
  %65 = zext i32 %64 to i64
  %66 = load %class.KV.10*, %class.KV.10** %10, align 8
  %67 = getelementptr inbounds %class.KV.10, %class.KV.10* %66, i64 %65
  %68 = getelementptr inbounds %class.KV.10, %class.KV.10* %67, i32 0, i32 0
  %69 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %68 to %class.c_d**
  %70 = load %class.c_d*, %class.c_d** %69, align 8
  %71 = load %class.c_d*, %class.c_d** %8, align 8
  %72 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %70, %class.c_d* dereferenceable(8) %71)
  br i1 %72, label %73, label %117

; <label>:73                                      ; preds = %63
  %74 = load i64*, i64** %9, align 8
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, -1
  store i64 %76, i64* %74, align 8
  %77 = load i32, i32* %13, align 4
  %78 = sub i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = mul i64 %79, 16
  %81 = call i8* @malloc(i64 %80)
  %82 = bitcast i8* %81 to %class.KV.10*
  store %class.KV.10* %82, %class.KV.10** %16, align 8
  %83 = load %class.KV.10*, %class.KV.10** %16, align 8
  %84 = bitcast %class.KV.10* %83 to i8*
  %85 = load %class.KV.10*, %class.KV.10** %10, align 8
  %86 = bitcast %class.KV.10* %85 to i8*
  %87 = load i32, i32* %15, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %88, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %86, i64 %89, i32 8, i1 false)
  %90 = load i32, i32* %15, align 4
  %91 = zext i32 %90 to i64
  %92 = load %class.KV.10*, %class.KV.10** %16, align 8
  %93 = getelementptr inbounds %class.KV.10, %class.KV.10* %92, i64 %91
  %94 = bitcast %class.KV.10* %93 to i8*
  %95 = load i32, i32* %15, align 4
  %96 = add i32 %95, 1
  %97 = zext i32 %96 to i64
  %98 = load %class.KV.10*, %class.KV.10** %10, align 8
  %99 = getelementptr inbounds %class.KV.10, %class.KV.10* %98, i64 %97
  %100 = bitcast %class.KV.10* %99 to i8*
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %101, 1
  %103 = load i32, i32* %15, align 4
  %104 = sub i32 %102, %103
  %105 = zext i32 %104 to i64
  %106 = mul i64 %105, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %100, i64 %106, i32 8, i1 false)
  %107 = load i64, i64* %11, align 8
  %108 = load i32, i32* %12, align 4
  %109 = zext i32 %108 to i64
  %110 = shl i64 1, %109
  %111 = xor i64 -1, %110
  %112 = and i64 %107, %111
  %113 = shl i64 %112, 1
  %114 = or i64 %113, 1
  store i64 %114, i64* %17, align 8
  %115 = load i64, i64* %17, align 8
  %116 = load %class.KV.10*, %class.KV.10** %16, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %115, %class.KV.10* %116)
  br label %147

; <label>:117                                     ; preds = %63
  %118 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %118)
  br label %147

; <label>:119                                     ; preds = %45
  %120 = load i32, i32* %15, align 4
  %121 = zext i32 %120 to i64
  %122 = load %class.KV.10*, %class.KV.10** %10, align 8
  %123 = getelementptr inbounds %class.KV.10, %class.KV.10* %122, i64 %121
  %124 = load i64, i64* %7, align 8
  %125 = lshr i64 %124, 6
  %126 = load %class.c_d*, %class.c_d** %8, align 8
  %127 = load i64*, i64** %9, align 8
  call void @_ZN2KVI3c_dS0_Lj10EE12remove_innerERKS1_yPKS0_Py(%class.KV.10* sret %18, %class.KV.10* dereferenceable(16) %123, i64 %125, %class.c_d* %126, i64* %127)
  %128 = load i32, i32* %15, align 4
  %129 = zext i32 %128 to i64
  %130 = load %class.KV.10*, %class.KV.10** %10, align 8
  %131 = getelementptr inbounds %class.KV.10, %class.KV.10* %130, i64 %129
  %132 = call zeroext i1 @_ZNK2KVI3c_dS0_Lj10EEeqERKS1_(%class.KV.10* %18, %class.KV.10* dereferenceable(16) %131)
  br i1 %132, label %133, label %135

; <label>:133                                     ; preds = %119
  %134 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %134)
  br label %147

; <label>:135                                     ; preds = %119
  %136 = load %class.KV.10*, %class.KV.10** %10, align 8
  %137 = load i32, i32* %13, align 4
  %138 = load i32, i32* %15, align 4
  %139 = call %class.KV.10* @_ZN2KVI3c_dS0_Lj10EE11update_nodeEPKS1_jjRS2_(%class.KV.10* %136, i32 %137, i32 %138, %class.KV.10* dereferenceable(16) %18)
  store %class.KV.10* %139, %class.KV.10** %19, align 8
  %140 = load %class.KV.9*, %class.KV.9** %6, align 8
  %141 = getelementptr inbounds %class.KV.9, %class.KV.9* %140, i32 0, i32 0
  %142 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = load %class.KV.10*, %class.KV.10** %19, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1EyPKS_IS0_S0_Lj10EE(%class.KV.9* %0, i64 %143, %class.KV.10* %144)
  br label %147

; <label>:145                                     ; preds = %5
  %146 = load %class.KV.9*, %class.KV.9** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj9EEC1ERKS1_(%class.KV.9* %0, %class.KV.9* dereferenceable(16) %146)
  br label %147

; <label>:147                                     ; preds = %145, %135, %133, %117, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj9EEeqERKS1_(%class.KV.9*, %class.KV.9* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.9*, align 8
  %4 = alloca %class.KV.9*, align 8
  store %class.KV.9* %0, %class.KV.9** %3, align 8
  store %class.KV.9* %1, %class.KV.9** %4, align 8
  %5 = load %class.KV.9*, %class.KV.9** %3, align 8
  %6 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.9*, %class.KV.9** %4, align 8
  %10 = getelementptr inbounds %class.KV.9, %class.KV.9* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 9>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.9, %class.KV.9* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %15 to %class.KV.10**
  %17 = load %class.KV.10*, %class.KV.10** %16, align 8
  %18 = load %class.KV.9*, %class.KV.9** %4, align 8
  %19 = getelementptr inbounds %class.KV.9, %class.KV.9* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 9>::Val"* %19 to %class.KV.10**
  %21 = load %class.KV.10*, %class.KV.10** %20, align 8
  %22 = icmp eq %class.KV.10* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj10EE12remove_innerERKS1_yPKS0_Py(%class.KV.10* noalias sret, %class.KV.10* dereferenceable(16), i64, %class.c_d*, i64*) #0 align 2 {
  %6 = alloca %class.KV.10*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %class.c_d*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %class.LL*, align 8
  store %class.KV.10* %1, %class.KV.10** %6, align 8
  store i64 %2, i64* %7, align 8
  store %class.c_d* %3, %class.c_d** %8, align 8
  store i64* %4, i64** %9, align 8
  %11 = load %class.KV.10*, %class.KV.10** %6, align 8
  %12 = getelementptr inbounds %class.KV.10, %class.KV.10* %11, i32 0, i32 1
  %13 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %12 to %class.LL**
  %14 = load %class.LL*, %class.LL** %13, align 8
  %15 = icmp ne %class.LL* %14, null
  br i1 %15, label %16, label %34

; <label>:16                                      ; preds = %5
  %17 = load %class.KV.10*, %class.KV.10** %6, align 8
  %18 = getelementptr inbounds %class.KV.10, %class.KV.10* %17, i32 0, i32 1
  %19 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %18 to %class.LL**
  %20 = load %class.LL*, %class.LL** %19, align 8
  %21 = load %class.c_d*, %class.c_d** %8, align 8
  %22 = load i64*, i64** %9, align 8
  %23 = call %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL* %20, %class.c_d* %21, i64* %22)
  store %class.LL* %23, %class.LL** %10, align 8
  %24 = load %class.LL*, %class.LL** %10, align 8
  %25 = load %class.KV.10*, %class.KV.10** %6, align 8
  %26 = getelementptr inbounds %class.KV.10, %class.KV.10* %25, i32 0, i32 1
  %27 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %26 to %class.LL**
  %28 = load %class.LL*, %class.LL** %27, align 8
  %29 = icmp eq %class.LL* %24, %28
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %16
  %31 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %0, %class.KV.10* dereferenceable(16) %31)
  br label %36

; <label>:32                                      ; preds = %16
  %33 = load %class.LL*, %class.LL** %10, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1EyPK2LLIS0_S0_E(%class.KV.10* %0, i64 1, %class.LL* %33)
  br label %36

; <label>:34                                      ; preds = %5
  %35 = load %class.KV.10*, %class.KV.10** %6, align 8
  call void @_ZN2KVI3c_dS0_Lj10EEC1ERKS1_(%class.KV.10* %0, %class.KV.10* dereferenceable(16) %35)
  br label %36

; <label>:36                                      ; preds = %34, %32, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr zeroext i1 @_ZNK2KVI3c_dS0_Lj10EEeqERKS1_(%class.KV.10*, %class.KV.10* dereferenceable(16)) #3 align 2 {
  %3 = alloca %class.KV.10*, align 8
  %4 = alloca %class.KV.10*, align 8
  store %class.KV.10* %0, %class.KV.10** %3, align 8
  store %class.KV.10* %1, %class.KV.10** %4, align 8
  %5 = load %class.KV.10*, %class.KV.10** %3, align 8
  %6 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 0
  %7 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = load %class.KV.10*, %class.KV.10** %4, align 8
  %10 = getelementptr inbounds %class.KV.10, %class.KV.10* %9, i32 0, i32 0
  %11 = bitcast %"union.KV<c_d, c_d, 10>::Key"* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %8, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %2
  %15 = getelementptr inbounds %class.KV.10, %class.KV.10* %5, i32 0, i32 1
  %16 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %15 to %class.c_d**
  %17 = load %class.c_d*, %class.c_d** %16, align 8
  %18 = load %class.KV.10*, %class.KV.10** %4, align 8
  %19 = getelementptr inbounds %class.KV.10, %class.KV.10* %18, i32 0, i32 1
  %20 = bitcast %"union.KV<c_d, c_d, 10>::Val"* %19 to %class.c_d**
  %21 = load %class.c_d*, %class.c_d** %20, align 8
  %22 = icmp eq %class.c_d* %17, %21
  br label %23

; <label>:23                                      ; preds = %14, %2
  %24 = phi i1 [ false, %2 ], [ %22, %14 ]
  ret i1 %24
}

; Function Attrs: ssp uwtable
define linkonce_odr %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL*, %class.c_d*, i64*) #0 align 2 {
  %4 = alloca %class.LL*, align 8
  %5 = alloca %class.LL*, align 8
  %6 = alloca %class.c_d*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %class.LL*, align 8
  store %class.LL* %0, %class.LL** %5, align 8
  store %class.c_d* %1, %class.c_d** %6, align 8
  store i64* %2, i64** %7, align 8
  %9 = load %class.LL*, %class.LL** %5, align 8
  %10 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %11 = load %class.c_d*, %class.c_d** %10, align 8
  %12 = load %class.c_d*, %class.c_d** %6, align 8
  %13 = call zeroext i1 @_ZNK3c_deqERKS_(%class.c_d* %11, %class.c_d* dereferenceable(8) %12)
  br i1 %13, label %14, label %20

; <label>:14                                      ; preds = %3
  %15 = load i64*, i64** %7, align 8
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, -1
  store i64 %17, i64* %15, align 8
  %18 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %19 = load %class.LL*, %class.LL** %18, align 8
  store %class.LL* %19, %class.LL** %4, align 8
  br label %46

; <label>:20                                      ; preds = %3
  %21 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %22 = load %class.LL*, %class.LL** %21, align 8
  %23 = icmp ne %class.LL* %22, null
  br i1 %23, label %24, label %45

; <label>:24                                      ; preds = %20
  %25 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %26 = load %class.LL*, %class.LL** %25, align 8
  %27 = load %class.c_d*, %class.c_d** %6, align 8
  %28 = load i64*, i64** %7, align 8
  %29 = call %class.LL* @_ZNK2LLI3c_dS0_E6removeEPKS0_Py(%class.LL* %26, %class.c_d* %27, i64* %28)
  store %class.LL* %29, %class.LL** %8, align 8
  %30 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 2
  %31 = load %class.LL*, %class.LL** %30, align 8
  %32 = load %class.LL*, %class.LL** %8, align 8
  %33 = icmp eq %class.LL* %31, %32
  br i1 %33, label %34, label %35

; <label>:34                                      ; preds = %24
  store %class.LL* %9, %class.LL** %4, align 8
  br label %46

; <label>:35                                      ; preds = %24
  %36 = call i8* @malloc(i64 24)
  %37 = bitcast i8* %36 to %class.LL*
  %38 = bitcast %class.LL* %37 to i8*
  %39 = bitcast i8* %38 to %class.LL*
  %40 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 0
  %41 = load %class.c_d*, %class.c_d** %40, align 8
  %42 = getelementptr inbounds %class.LL, %class.LL* %9, i32 0, i32 1
  %43 = load %class.c_d*, %class.c_d** %42, align 8
  %44 = load %class.LL*, %class.LL** %8, align 8
  call void @_ZN2LLI3c_dS0_EC1EPKS0_S3_PKS1_(%class.LL* %39, %class.c_d* %41, %class.c_d* %43, %class.LL* %44)
  store %class.LL* %39, %class.LL** %4, align 8
  br label %46

; <label>:45                                      ; preds = %20
  store %class.LL* %9, %class.LL** %4, align 8
  br label %46

; <label>:46                                      ; preds = %45, %35, %34, %14
  %47 = load %class.LL*, %class.LL** %4, align 8
  ret %class.LL* %47
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZN2KVI3c_dS0_Lj0EEC2ERKS1_(%class.KV*, %class.KV* dereferenceable(16)) unnamed_addr #3 align 2 {
  %3 = alloca %class.KV*, align 8
  %4 = alloca %class.KV*, align 8
  store %class.KV* %0, %class.KV** %3, align 8
  store %class.KV* %1, %class.KV** %4, align 8
  %5 = load %class.KV*, %class.KV** %3, align 8
  %6 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 0
  %7 = load %class.KV*, %class.KV** %4, align 8
  %8 = getelementptr inbounds %class.KV, %class.KV* %7, i32 0, i32 0
  %9 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %6 to i8*
  %10 = bitcast %"union.KV<c_d, c_d, 0>::Key"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  %11 = getelementptr inbounds %class.KV, %class.KV* %5, i32 0, i32 1
  %12 = load %class.KV*, %class.KV** %4, align 8
  %13 = getelementptr inbounds %class.KV, %class.KV* %12, i32 0, i32 1
  %14 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %11 to i8*
  %15 = bitcast %"union.KV<c_d, c_d, 0>::Val"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  ret void
}

attributes #0 = { ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noreturn }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"Apple LLVM version 8.0.0 (clang-800.0.38)"}


;;;;;;

define void @proc_main() {
  %cloptr7587053 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587054 = getelementptr inbounds i64, i64* %cloptr7587053, i64 0              ; &cloptr7587053[0]
  %f7587055 = ptrtoint void(i64,i64)* @lam7587051 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587055, i64* %eptr7587054                                             ; store fptr
  %arg7581467 = ptrtoint i64* %cloptr7587053 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587056 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587057 = getelementptr inbounds i64, i64* %cloptr7587056, i64 0              ; &cloptr7587056[0]
  %f7587058 = ptrtoint void(i64,i64)* @lam7587048 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587058, i64* %eptr7587057                                             ; store fptr
  %arg7581466 = ptrtoint i64* %cloptr7587056 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587059 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587060 = getelementptr inbounds i64, i64* %cloptr7587059, i64 0              ; &cloptr7587059[0]
  %f7587061 = ptrtoint void(i64,i64)* @lam7585651 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587061, i64* %eptr7587060                                             ; store fptr
  %arg7581465 = ptrtoint i64* %cloptr7587059 to i64                                  ; closure cast; i64* -> i64
  %rva7585636 = add i64 0, 0                                                         ; quoted ()
  %rva7585635 = call i64 @prim_cons(i64 %arg7581465, i64 %rva7585636)                ; call prim_cons
  %rva7585634 = call i64 @prim_cons(i64 %arg7581466, i64 %rva7585635)                ; call prim_cons
  %cloptr7587062 = inttoptr i64 %arg7581467 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587063 = getelementptr inbounds i64, i64* %cloptr7587062, i64 0             ; &cloptr7587062[0]
  %f7587065 = load i64, i64* %i0ptr7587063, align 8                                  ; load; *i0ptr7587063
  %fptr7587064 = inttoptr i64 %f7587065 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587064(i64 %arg7581467, i64 %rva7585634)           ; tail call
  ret void
}


define i32 @main() {
  call fastcc void @proc_main()
  ret i32 0
}



define void @lam7587051(i64 %env7587052, i64 %rvp7583487) {
  %cont7581457 = call i64 @prim_car(i64 %rvp7583487)                                 ; call prim_car
  %rvp7583486 = call i64 @prim_cdr(i64 %rvp7583487)                                  ; call prim_cdr
  %A1I$yu = call i64 @prim_car(i64 %rvp7583486)                                      ; call prim_car
  %na7583482 = call i64 @prim_cdr(i64 %rvp7583486)                                   ; call prim_cdr
  %rva7583485 = add i64 0, 0                                                         ; quoted ()
  %rva7583484 = call i64 @prim_cons(i64 %A1I$yu, i64 %rva7583485)                    ; call prim_cons
  %rva7583483 = call i64 @prim_cons(i64 %cont7581457, i64 %rva7583484)               ; call prim_cons
  %cloptr7587066 = inttoptr i64 %A1I$yu to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr7587067 = getelementptr inbounds i64, i64* %cloptr7587066, i64 0             ; &cloptr7587066[0]
  %f7587069 = load i64, i64* %i0ptr7587067, align 8                                  ; load; *i0ptr7587067
  %fptr7587068 = inttoptr i64 %f7587069 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587068(i64 %A1I$yu, i64 %rva7583483)               ; tail call
  ret void
}


define void @lam7587048(i64 %env7587049, i64 %rvp7585605) {
  %_957581186 = call i64 @prim_car(i64 %rvp7585605)                                  ; call prim_car
  %rvp7585604 = call i64 @prim_cdr(i64 %rvp7585605)                                  ; call prim_cdr
  %tIY$Ycmb = call i64 @prim_car(i64 %rvp7585604)                                    ; call prim_car
  %na7583489 = call i64 @prim_cdr(i64 %rvp7585604)                                   ; call prim_cdr
  %cloptr7587070 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7587072 = getelementptr inbounds i64, i64* %cloptr7587070, i64 1              ; &eptr7587072[1]
  store i64 %tIY$Ycmb, i64* %eptr7587072                                             ; *eptr7587072 = %tIY$Ycmb
  %eptr7587071 = getelementptr inbounds i64, i64* %cloptr7587070, i64 0              ; &cloptr7587070[0]
  %f7587073 = ptrtoint void(i64,i64)* @lam7587046 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587073, i64* %eptr7587071                                             ; store fptr
  %arg7581472 = ptrtoint i64* %cloptr7587070 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587074 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587075 = getelementptr inbounds i64, i64* %cloptr7587074, i64 0              ; &cloptr7587074[0]
  %f7587076 = ptrtoint void(i64,i64)* @lam7585664 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587076, i64* %eptr7587075                                             ; store fptr
  %arg7581471 = ptrtoint i64* %cloptr7587074 to i64                                  ; closure cast; i64* -> i64
  %rva7585603 = add i64 0, 0                                                         ; quoted ()
  %rva7585602 = call i64 @prim_cons(i64 %arg7581471, i64 %rva7585603)                ; call prim_cons
  %rva7585601 = call i64 @prim_cons(i64 %arg7581472, i64 %rva7585602)                ; call prim_cons
  %cloptr7587077 = inttoptr i64 %tIY$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7587078 = getelementptr inbounds i64, i64* %cloptr7587077, i64 0             ; &cloptr7587077[0]
  %f7587080 = load i64, i64* %i0ptr7587078, align 8                                  ; load; *i0ptr7587078
  %fptr7587079 = inttoptr i64 %f7587080 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587079(i64 %tIY$Ycmb, i64 %rva7585601)             ; tail call
  ret void
}


define void @lam7587046(i64 %env7587047, i64 %rvp7585571) {
  %envptr7587081 = inttoptr i64 %env7587047 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587082 = getelementptr inbounds i64, i64* %envptr7587081, i64 1            ; &envptr7587081[1]
  %tIY$Ycmb = load i64, i64* %envptr7587082, align 8                                 ; load; *envptr7587082
  %_957581187 = call i64 @prim_car(i64 %rvp7585571)                                  ; call prim_car
  %rvp7585570 = call i64 @prim_cdr(i64 %rvp7585571)                                  ; call prim_cdr
  %be3$_37foldr1 = call i64 @prim_car(i64 %rvp7585570)                               ; call prim_car
  %na7583491 = call i64 @prim_cdr(i64 %rvp7585570)                                   ; call prim_cdr
  %cloptr7587083 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587085 = getelementptr inbounds i64, i64* %cloptr7587083, i64 1              ; &eptr7587085[1]
  %eptr7587086 = getelementptr inbounds i64, i64* %cloptr7587083, i64 2              ; &eptr7587086[2]
  store i64 %tIY$Ycmb, i64* %eptr7587085                                             ; *eptr7587085 = %tIY$Ycmb
  store i64 %be3$_37foldr1, i64* %eptr7587086                                        ; *eptr7587086 = %be3$_37foldr1
  %eptr7587084 = getelementptr inbounds i64, i64* %cloptr7587083, i64 0              ; &cloptr7587083[0]
  %f7587087 = ptrtoint void(i64,i64)* @lam7587044 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587087, i64* %eptr7587084                                             ; store fptr
  %arg7581475 = ptrtoint i64* %cloptr7587083 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587088 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587089 = getelementptr inbounds i64, i64* %cloptr7587088, i64 0              ; &cloptr7587088[0]
  %f7587090 = ptrtoint void(i64,i64)* @lam7585682 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587090, i64* %eptr7587089                                             ; store fptr
  %arg7581474 = ptrtoint i64* %cloptr7587088 to i64                                  ; closure cast; i64* -> i64
  %rva7585569 = add i64 0, 0                                                         ; quoted ()
  %rva7585568 = call i64 @prim_cons(i64 %arg7581474, i64 %rva7585569)                ; call prim_cons
  %rva7585567 = call i64 @prim_cons(i64 %arg7581475, i64 %rva7585568)                ; call prim_cons
  %cloptr7587091 = inttoptr i64 %tIY$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7587092 = getelementptr inbounds i64, i64* %cloptr7587091, i64 0             ; &cloptr7587091[0]
  %f7587094 = load i64, i64* %i0ptr7587092, align 8                                  ; load; *i0ptr7587092
  %fptr7587093 = inttoptr i64 %f7587094 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587093(i64 %tIY$Ycmb, i64 %rva7585567)             ; tail call
  ret void
}


define void @lam7587044(i64 %env7587045, i64 %rvp7585533) {
  %envptr7587095 = inttoptr i64 %env7587045 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587096 = getelementptr inbounds i64, i64* %envptr7587095, i64 2            ; &envptr7587095[2]
  %be3$_37foldr1 = load i64, i64* %envptr7587096, align 8                            ; load; *envptr7587096
  %envptr7587097 = inttoptr i64 %env7587045 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587098 = getelementptr inbounds i64, i64* %envptr7587097, i64 1            ; &envptr7587097[1]
  %tIY$Ycmb = load i64, i64* %envptr7587098, align 8                                 ; load; *envptr7587098
  %_957581188 = call i64 @prim_car(i64 %rvp7585533)                                  ; call prim_car
  %rvp7585532 = call i64 @prim_cdr(i64 %rvp7585533)                                  ; call prim_cdr
  %hXm$_37map1 = call i64 @prim_car(i64 %rvp7585532)                                 ; call prim_car
  %na7583493 = call i64 @prim_cdr(i64 %rvp7585532)                                   ; call prim_cdr
  %cloptr7587099 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587101 = getelementptr inbounds i64, i64* %cloptr7587099, i64 1              ; &eptr7587101[1]
  %eptr7587102 = getelementptr inbounds i64, i64* %cloptr7587099, i64 2              ; &eptr7587102[2]
  %eptr7587103 = getelementptr inbounds i64, i64* %cloptr7587099, i64 3              ; &eptr7587103[3]
  store i64 %hXm$_37map1, i64* %eptr7587101                                          ; *eptr7587101 = %hXm$_37map1
  store i64 %tIY$Ycmb, i64* %eptr7587102                                             ; *eptr7587102 = %tIY$Ycmb
  store i64 %be3$_37foldr1, i64* %eptr7587103                                        ; *eptr7587103 = %be3$_37foldr1
  %eptr7587100 = getelementptr inbounds i64, i64* %cloptr7587099, i64 0              ; &cloptr7587099[0]
  %f7587104 = ptrtoint void(i64,i64)* @lam7587042 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587104, i64* %eptr7587100                                             ; store fptr
  %arg7581478 = ptrtoint i64* %cloptr7587099 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587105 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587106 = getelementptr inbounds i64, i64* %cloptr7587105, i64 0              ; &cloptr7587105[0]
  %f7587107 = ptrtoint void(i64,i64)* @lam7585702 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587107, i64* %eptr7587106                                             ; store fptr
  %arg7581477 = ptrtoint i64* %cloptr7587105 to i64                                  ; closure cast; i64* -> i64
  %rva7585531 = add i64 0, 0                                                         ; quoted ()
  %rva7585530 = call i64 @prim_cons(i64 %arg7581477, i64 %rva7585531)                ; call prim_cons
  %rva7585529 = call i64 @prim_cons(i64 %arg7581478, i64 %rva7585530)                ; call prim_cons
  %cloptr7587108 = inttoptr i64 %tIY$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7587109 = getelementptr inbounds i64, i64* %cloptr7587108, i64 0             ; &cloptr7587108[0]
  %f7587111 = load i64, i64* %i0ptr7587109, align 8                                  ; load; *i0ptr7587109
  %fptr7587110 = inttoptr i64 %f7587111 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587110(i64 %tIY$Ycmb, i64 %rva7585529)             ; tail call
  ret void
}


define void @lam7587042(i64 %env7587043, i64 %rvp7585499) {
  %envptr7587112 = inttoptr i64 %env7587043 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587113 = getelementptr inbounds i64, i64* %envptr7587112, i64 3            ; &envptr7587112[3]
  %be3$_37foldr1 = load i64, i64* %envptr7587113, align 8                            ; load; *envptr7587113
  %envptr7587114 = inttoptr i64 %env7587043 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587115 = getelementptr inbounds i64, i64* %envptr7587114, i64 2            ; &envptr7587114[2]
  %tIY$Ycmb = load i64, i64* %envptr7587115, align 8                                 ; load; *envptr7587115
  %envptr7587116 = inttoptr i64 %env7587043 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587117 = getelementptr inbounds i64, i64* %envptr7587116, i64 1            ; &envptr7587116[1]
  %hXm$_37map1 = load i64, i64* %envptr7587117, align 8                              ; load; *envptr7587117
  %_957581189 = call i64 @prim_car(i64 %rvp7585499)                                  ; call prim_car
  %rvp7585498 = call i64 @prim_cdr(i64 %rvp7585499)                                  ; call prim_cdr
  %ICX$_37take = call i64 @prim_car(i64 %rvp7585498)                                 ; call prim_car
  %na7583495 = call i64 @prim_cdr(i64 %rvp7585498)                                   ; call prim_cdr
  %cloptr7587118 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7587120 = getelementptr inbounds i64, i64* %cloptr7587118, i64 1              ; &eptr7587120[1]
  %eptr7587121 = getelementptr inbounds i64, i64* %cloptr7587118, i64 2              ; &eptr7587121[2]
  %eptr7587122 = getelementptr inbounds i64, i64* %cloptr7587118, i64 3              ; &eptr7587122[3]
  %eptr7587123 = getelementptr inbounds i64, i64* %cloptr7587118, i64 4              ; &eptr7587123[4]
  store i64 %hXm$_37map1, i64* %eptr7587120                                          ; *eptr7587120 = %hXm$_37map1
  store i64 %ICX$_37take, i64* %eptr7587121                                          ; *eptr7587121 = %ICX$_37take
  store i64 %tIY$Ycmb, i64* %eptr7587122                                             ; *eptr7587122 = %tIY$Ycmb
  store i64 %be3$_37foldr1, i64* %eptr7587123                                        ; *eptr7587123 = %be3$_37foldr1
  %eptr7587119 = getelementptr inbounds i64, i64* %cloptr7587118, i64 0              ; &cloptr7587118[0]
  %f7587124 = ptrtoint void(i64,i64)* @lam7587040 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587124, i64* %eptr7587119                                             ; store fptr
  %arg7581481 = ptrtoint i64* %cloptr7587118 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587125 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587126 = getelementptr inbounds i64, i64* %cloptr7587125, i64 0              ; &cloptr7587125[0]
  %f7587127 = ptrtoint void(i64,i64)* @lam7585718 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587127, i64* %eptr7587126                                             ; store fptr
  %arg7581480 = ptrtoint i64* %cloptr7587125 to i64                                  ; closure cast; i64* -> i64
  %rva7585497 = add i64 0, 0                                                         ; quoted ()
  %rva7585496 = call i64 @prim_cons(i64 %arg7581480, i64 %rva7585497)                ; call prim_cons
  %rva7585495 = call i64 @prim_cons(i64 %arg7581481, i64 %rva7585496)                ; call prim_cons
  %cloptr7587128 = inttoptr i64 %tIY$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7587129 = getelementptr inbounds i64, i64* %cloptr7587128, i64 0             ; &cloptr7587128[0]
  %f7587131 = load i64, i64* %i0ptr7587129, align 8                                  ; load; *i0ptr7587129
  %fptr7587130 = inttoptr i64 %f7587131 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587130(i64 %tIY$Ycmb, i64 %rva7585495)             ; tail call
  ret void
}


define void @lam7587040(i64 %env7587041, i64 %rvp7585470) {
  %envptr7587132 = inttoptr i64 %env7587041 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587133 = getelementptr inbounds i64, i64* %envptr7587132, i64 4            ; &envptr7587132[4]
  %be3$_37foldr1 = load i64, i64* %envptr7587133, align 8                            ; load; *envptr7587133
  %envptr7587134 = inttoptr i64 %env7587041 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587135 = getelementptr inbounds i64, i64* %envptr7587134, i64 3            ; &envptr7587134[3]
  %tIY$Ycmb = load i64, i64* %envptr7587135, align 8                                 ; load; *envptr7587135
  %envptr7587136 = inttoptr i64 %env7587041 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587137 = getelementptr inbounds i64, i64* %envptr7587136, i64 2            ; &envptr7587136[2]
  %ICX$_37take = load i64, i64* %envptr7587137, align 8                              ; load; *envptr7587137
  %envptr7587138 = inttoptr i64 %env7587041 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587139 = getelementptr inbounds i64, i64* %envptr7587138, i64 1            ; &envptr7587138[1]
  %hXm$_37map1 = load i64, i64* %envptr7587139, align 8                              ; load; *envptr7587139
  %_957581190 = call i64 @prim_car(i64 %rvp7585470)                                  ; call prim_car
  %rvp7585469 = call i64 @prim_cdr(i64 %rvp7585470)                                  ; call prim_cdr
  %wKy$_37length = call i64 @prim_car(i64 %rvp7585469)                               ; call prim_car
  %na7583497 = call i64 @prim_cdr(i64 %rvp7585469)                                   ; call prim_cdr
  %cloptr7587140 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7587142 = getelementptr inbounds i64, i64* %cloptr7587140, i64 1              ; &eptr7587142[1]
  %eptr7587143 = getelementptr inbounds i64, i64* %cloptr7587140, i64 2              ; &eptr7587143[2]
  %eptr7587144 = getelementptr inbounds i64, i64* %cloptr7587140, i64 3              ; &eptr7587144[3]
  %eptr7587145 = getelementptr inbounds i64, i64* %cloptr7587140, i64 4              ; &eptr7587145[4]
  %eptr7587146 = getelementptr inbounds i64, i64* %cloptr7587140, i64 5              ; &eptr7587146[5]
  store i64 %hXm$_37map1, i64* %eptr7587142                                          ; *eptr7587142 = %hXm$_37map1
  store i64 %wKy$_37length, i64* %eptr7587143                                        ; *eptr7587143 = %wKy$_37length
  store i64 %ICX$_37take, i64* %eptr7587144                                          ; *eptr7587144 = %ICX$_37take
  store i64 %tIY$Ycmb, i64* %eptr7587145                                             ; *eptr7587145 = %tIY$Ycmb
  store i64 %be3$_37foldr1, i64* %eptr7587146                                        ; *eptr7587146 = %be3$_37foldr1
  %eptr7587141 = getelementptr inbounds i64, i64* %cloptr7587140, i64 0              ; &cloptr7587140[0]
  %f7587147 = ptrtoint void(i64,i64)* @lam7587038 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587147, i64* %eptr7587141                                             ; store fptr
  %arg7581484 = ptrtoint i64* %cloptr7587140 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587148 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587149 = getelementptr inbounds i64, i64* %cloptr7587148, i64 0              ; &cloptr7587148[0]
  %f7587150 = ptrtoint void(i64,i64)* @lam7585731 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587150, i64* %eptr7587149                                             ; store fptr
  %arg7581483 = ptrtoint i64* %cloptr7587148 to i64                                  ; closure cast; i64* -> i64
  %rva7585468 = add i64 0, 0                                                         ; quoted ()
  %rva7585467 = call i64 @prim_cons(i64 %arg7581483, i64 %rva7585468)                ; call prim_cons
  %rva7585466 = call i64 @prim_cons(i64 %arg7581484, i64 %rva7585467)                ; call prim_cons
  %cloptr7587151 = inttoptr i64 %tIY$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7587152 = getelementptr inbounds i64, i64* %cloptr7587151, i64 0             ; &cloptr7587151[0]
  %f7587154 = load i64, i64* %i0ptr7587152, align 8                                  ; load; *i0ptr7587152
  %fptr7587153 = inttoptr i64 %f7587154 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587153(i64 %tIY$Ycmb, i64 %rva7585466)             ; tail call
  ret void
}


define void @lam7587038(i64 %env7587039, i64 %rvp7585436) {
  %envptr7587155 = inttoptr i64 %env7587039 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587156 = getelementptr inbounds i64, i64* %envptr7587155, i64 5            ; &envptr7587155[5]
  %be3$_37foldr1 = load i64, i64* %envptr7587156, align 8                            ; load; *envptr7587156
  %envptr7587157 = inttoptr i64 %env7587039 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587158 = getelementptr inbounds i64, i64* %envptr7587157, i64 4            ; &envptr7587157[4]
  %tIY$Ycmb = load i64, i64* %envptr7587158, align 8                                 ; load; *envptr7587158
  %envptr7587159 = inttoptr i64 %env7587039 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587160 = getelementptr inbounds i64, i64* %envptr7587159, i64 3            ; &envptr7587159[3]
  %ICX$_37take = load i64, i64* %envptr7587160, align 8                              ; load; *envptr7587160
  %envptr7587161 = inttoptr i64 %env7587039 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587162 = getelementptr inbounds i64, i64* %envptr7587161, i64 2            ; &envptr7587161[2]
  %wKy$_37length = load i64, i64* %envptr7587162, align 8                            ; load; *envptr7587162
  %envptr7587163 = inttoptr i64 %env7587039 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587164 = getelementptr inbounds i64, i64* %envptr7587163, i64 1            ; &envptr7587163[1]
  %hXm$_37map1 = load i64, i64* %envptr7587164, align 8                              ; load; *envptr7587164
  %_957581191 = call i64 @prim_car(i64 %rvp7585436)                                  ; call prim_car
  %rvp7585435 = call i64 @prim_cdr(i64 %rvp7585436)                                  ; call prim_cdr
  %ajE$_37foldl1 = call i64 @prim_car(i64 %rvp7585435)                               ; call prim_car
  %na7583499 = call i64 @prim_cdr(i64 %rvp7585435)                                   ; call prim_cdr
  %cloptr7587165 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7587167 = getelementptr inbounds i64, i64* %cloptr7587165, i64 1              ; &eptr7587167[1]
  store i64 %ajE$_37foldl1, i64* %eptr7587167                                        ; *eptr7587167 = %ajE$_37foldl1
  %eptr7587166 = getelementptr inbounds i64, i64* %cloptr7587165, i64 0              ; &cloptr7587165[0]
  %f7587168 = ptrtoint void(i64,i64)* @lam7587036 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587168, i64* %eptr7587166                                             ; store fptr
  %lm9$_37last = ptrtoint i64* %cloptr7587165 to i64                                 ; closure cast; i64* -> i64
  %cloptr7587169 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587171 = getelementptr inbounds i64, i64* %cloptr7587169, i64 1              ; &eptr7587171[1]
  %eptr7587172 = getelementptr inbounds i64, i64* %cloptr7587169, i64 2              ; &eptr7587172[2]
  store i64 %wKy$_37length, i64* %eptr7587171                                        ; *eptr7587171 = %wKy$_37length
  store i64 %ICX$_37take, i64* %eptr7587172                                          ; *eptr7587172 = %ICX$_37take
  %eptr7587170 = getelementptr inbounds i64, i64* %cloptr7587169, i64 0              ; &cloptr7587169[0]
  %f7587173 = ptrtoint void(i64,i64)* @lam7587028 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587173, i64* %eptr7587170                                             ; store fptr
  %tOq$_37drop_45right = ptrtoint i64* %cloptr7587169 to i64                         ; closure cast; i64* -> i64
  %cloptr7587174 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7587176 = getelementptr inbounds i64, i64* %cloptr7587174, i64 1              ; &eptr7587176[1]
  %eptr7587177 = getelementptr inbounds i64, i64* %cloptr7587174, i64 2              ; &eptr7587177[2]
  %eptr7587178 = getelementptr inbounds i64, i64* %cloptr7587174, i64 3              ; &eptr7587178[3]
  %eptr7587179 = getelementptr inbounds i64, i64* %cloptr7587174, i64 4              ; &eptr7587179[4]
  %eptr7587180 = getelementptr inbounds i64, i64* %cloptr7587174, i64 5              ; &eptr7587180[5]
  %eptr7587181 = getelementptr inbounds i64, i64* %cloptr7587174, i64 6              ; &eptr7587181[6]
  store i64 %lm9$_37last, i64* %eptr7587176                                          ; *eptr7587176 = %lm9$_37last
  store i64 %ajE$_37foldl1, i64* %eptr7587177                                        ; *eptr7587177 = %ajE$_37foldl1
  store i64 %tOq$_37drop_45right, i64* %eptr7587178                                  ; *eptr7587178 = %tOq$_37drop_45right
  store i64 %wKy$_37length, i64* %eptr7587179                                        ; *eptr7587179 = %wKy$_37length
  store i64 %tIY$Ycmb, i64* %eptr7587180                                             ; *eptr7587180 = %tIY$Ycmb
  store i64 %be3$_37foldr1, i64* %eptr7587181                                        ; *eptr7587181 = %be3$_37foldr1
  %eptr7587175 = getelementptr inbounds i64, i64* %cloptr7587174, i64 0              ; &cloptr7587174[0]
  %f7587182 = ptrtoint void(i64,i64)* @lam7587022 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587182, i64* %eptr7587175                                             ; store fptr
  %arg7581504 = ptrtoint i64* %cloptr7587174 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587183 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587185 = getelementptr inbounds i64, i64* %cloptr7587183, i64 1              ; &eptr7587185[1]
  %eptr7587186 = getelementptr inbounds i64, i64* %cloptr7587183, i64 2              ; &eptr7587186[2]
  store i64 %hXm$_37map1, i64* %eptr7587185                                          ; *eptr7587185 = %hXm$_37map1
  store i64 %be3$_37foldr1, i64* %eptr7587186                                        ; *eptr7587186 = %be3$_37foldr1
  %eptr7587184 = getelementptr inbounds i64, i64* %cloptr7587183, i64 0              ; &cloptr7587183[0]
  %f7587187 = ptrtoint void(i64,i64)* @lam7585782 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587187, i64* %eptr7587184                                             ; store fptr
  %arg7581503 = ptrtoint i64* %cloptr7587183 to i64                                  ; closure cast; i64* -> i64
  %rva7585434 = add i64 0, 0                                                         ; quoted ()
  %rva7585433 = call i64 @prim_cons(i64 %arg7581503, i64 %rva7585434)                ; call prim_cons
  %rva7585432 = call i64 @prim_cons(i64 %arg7581504, i64 %rva7585433)                ; call prim_cons
  %cloptr7587188 = inttoptr i64 %tIY$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7587189 = getelementptr inbounds i64, i64* %cloptr7587188, i64 0             ; &cloptr7587188[0]
  %f7587191 = load i64, i64* %i0ptr7587189, align 8                                  ; load; *i0ptr7587189
  %fptr7587190 = inttoptr i64 %f7587191 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587190(i64 %tIY$Ycmb, i64 %rva7585432)             ; tail call
  ret void
}


define void @lam7587036(i64 %env7587037, i64 %rvp7583516) {
  %envptr7587192 = inttoptr i64 %env7587037 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587193 = getelementptr inbounds i64, i64* %envptr7587192, i64 1            ; &envptr7587192[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7587193, align 8                            ; load; *envptr7587193
  %cont7581192 = call i64 @prim_car(i64 %rvp7583516)                                 ; call prim_car
  %rvp7583515 = call i64 @prim_cdr(i64 %rvp7583516)                                  ; call prim_cdr
  %p13$lst = call i64 @prim_car(i64 %rvp7583515)                                     ; call prim_car
  %na7583501 = call i64 @prim_cdr(i64 %rvp7583515)                                   ; call prim_cdr
  %cloptr7587194 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587195 = getelementptr inbounds i64, i64* %cloptr7587194, i64 0              ; &cloptr7587194[0]
  %f7587196 = ptrtoint void(i64,i64)* @lam7587034 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587196, i64* %eptr7587195                                             ; store fptr
  %arg7581488 = ptrtoint i64* %cloptr7587194 to i64                                  ; closure cast; i64* -> i64
  %arg7581487 = add i64 0, 0                                                         ; quoted ()
  %rva7583514 = add i64 0, 0                                                         ; quoted ()
  %rva7583513 = call i64 @prim_cons(i64 %p13$lst, i64 %rva7583514)                   ; call prim_cons
  %rva7583512 = call i64 @prim_cons(i64 %arg7581487, i64 %rva7583513)                ; call prim_cons
  %rva7583511 = call i64 @prim_cons(i64 %arg7581488, i64 %rva7583512)                ; call prim_cons
  %rva7583510 = call i64 @prim_cons(i64 %cont7581192, i64 %rva7583511)               ; call prim_cons
  %cloptr7587197 = inttoptr i64 %ajE$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7587198 = getelementptr inbounds i64, i64* %cloptr7587197, i64 0             ; &cloptr7587197[0]
  %f7587200 = load i64, i64* %i0ptr7587198, align 8                                  ; load; *i0ptr7587198
  %fptr7587199 = inttoptr i64 %f7587200 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587199(i64 %ajE$_37foldl1, i64 %rva7583510)        ; tail call
  ret void
}


define void @lam7587034(i64 %env7587035, i64 %rvp7583509) {
  %cont7581193 = call i64 @prim_car(i64 %rvp7583509)                                 ; call prim_car
  %rvp7583508 = call i64 @prim_cdr(i64 %rvp7583509)                                  ; call prim_cdr
  %YLj$x = call i64 @prim_car(i64 %rvp7583508)                                       ; call prim_car
  %rvp7583507 = call i64 @prim_cdr(i64 %rvp7583508)                                  ; call prim_cdr
  %jLt$y = call i64 @prim_car(i64 %rvp7583507)                                       ; call prim_car
  %na7583503 = call i64 @prim_cdr(i64 %rvp7583507)                                   ; call prim_cdr
  %arg7581492 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583506 = add i64 0, 0                                                         ; quoted ()
  %rva7583505 = call i64 @prim_cons(i64 %YLj$x, i64 %rva7583506)                     ; call prim_cons
  %rva7583504 = call i64 @prim_cons(i64 %arg7581492, i64 %rva7583505)                ; call prim_cons
  %cloptr7587201 = inttoptr i64 %cont7581193 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587202 = getelementptr inbounds i64, i64* %cloptr7587201, i64 0             ; &cloptr7587201[0]
  %f7587204 = load i64, i64* %i0ptr7587202, align 8                                  ; load; *i0ptr7587202
  %fptr7587203 = inttoptr i64 %f7587204 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587203(i64 %cont7581193, i64 %rva7583504)          ; tail call
  ret void
}


define void @lam7587028(i64 %env7587029, i64 %rvp7583532) {
  %envptr7587205 = inttoptr i64 %env7587029 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587206 = getelementptr inbounds i64, i64* %envptr7587205, i64 2            ; &envptr7587205[2]
  %ICX$_37take = load i64, i64* %envptr7587206, align 8                              ; load; *envptr7587206
  %envptr7587207 = inttoptr i64 %env7587029 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587208 = getelementptr inbounds i64, i64* %envptr7587207, i64 1            ; &envptr7587207[1]
  %wKy$_37length = load i64, i64* %envptr7587208, align 8                            ; load; *envptr7587208
  %cont7581194 = call i64 @prim_car(i64 %rvp7583532)                                 ; call prim_car
  %rvp7583531 = call i64 @prim_cdr(i64 %rvp7583532)                                  ; call prim_cdr
  %q5y$lst = call i64 @prim_car(i64 %rvp7583531)                                     ; call prim_car
  %rvp7583530 = call i64 @prim_cdr(i64 %rvp7583531)                                  ; call prim_cdr
  %uzn$n = call i64 @prim_car(i64 %rvp7583530)                                       ; call prim_car
  %na7583518 = call i64 @prim_cdr(i64 %rvp7583530)                                   ; call prim_cdr
  %cloptr7587209 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7587211 = getelementptr inbounds i64, i64* %cloptr7587209, i64 1              ; &eptr7587211[1]
  %eptr7587212 = getelementptr inbounds i64, i64* %cloptr7587209, i64 2              ; &eptr7587212[2]
  %eptr7587213 = getelementptr inbounds i64, i64* %cloptr7587209, i64 3              ; &eptr7587213[3]
  %eptr7587214 = getelementptr inbounds i64, i64* %cloptr7587209, i64 4              ; &eptr7587214[4]
  store i64 %q5y$lst, i64* %eptr7587211                                              ; *eptr7587211 = %q5y$lst
  store i64 %ICX$_37take, i64* %eptr7587212                                          ; *eptr7587212 = %ICX$_37take
  store i64 %uzn$n, i64* %eptr7587213                                                ; *eptr7587213 = %uzn$n
  store i64 %cont7581194, i64* %eptr7587214                                          ; *eptr7587214 = %cont7581194
  %eptr7587210 = getelementptr inbounds i64, i64* %cloptr7587209, i64 0              ; &cloptr7587209[0]
  %f7587215 = ptrtoint void(i64,i64)* @lam7587026 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587215, i64* %eptr7587210                                             ; store fptr
  %arg7581495 = ptrtoint i64* %cloptr7587209 to i64                                  ; closure cast; i64* -> i64
  %rva7583529 = add i64 0, 0                                                         ; quoted ()
  %rva7583528 = call i64 @prim_cons(i64 %q5y$lst, i64 %rva7583529)                   ; call prim_cons
  %rva7583527 = call i64 @prim_cons(i64 %arg7581495, i64 %rva7583528)                ; call prim_cons
  %cloptr7587216 = inttoptr i64 %wKy$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7587217 = getelementptr inbounds i64, i64* %cloptr7587216, i64 0             ; &cloptr7587216[0]
  %f7587219 = load i64, i64* %i0ptr7587217, align 8                                  ; load; *i0ptr7587217
  %fptr7587218 = inttoptr i64 %f7587219 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587218(i64 %wKy$_37length, i64 %rva7583527)        ; tail call
  ret void
}


define void @lam7587026(i64 %env7587027, i64 %rvp7583526) {
  %envptr7587220 = inttoptr i64 %env7587027 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587221 = getelementptr inbounds i64, i64* %envptr7587220, i64 4            ; &envptr7587220[4]
  %cont7581194 = load i64, i64* %envptr7587221, align 8                              ; load; *envptr7587221
  %envptr7587222 = inttoptr i64 %env7587027 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587223 = getelementptr inbounds i64, i64* %envptr7587222, i64 3            ; &envptr7587222[3]
  %uzn$n = load i64, i64* %envptr7587223, align 8                                    ; load; *envptr7587223
  %envptr7587224 = inttoptr i64 %env7587027 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587225 = getelementptr inbounds i64, i64* %envptr7587224, i64 2            ; &envptr7587224[2]
  %ICX$_37take = load i64, i64* %envptr7587225, align 8                              ; load; *envptr7587225
  %envptr7587226 = inttoptr i64 %env7587027 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587227 = getelementptr inbounds i64, i64* %envptr7587226, i64 1            ; &envptr7587226[1]
  %q5y$lst = load i64, i64* %envptr7587227, align 8                                  ; load; *envptr7587227
  %_957581195 = call i64 @prim_car(i64 %rvp7583526)                                  ; call prim_car
  %rvp7583525 = call i64 @prim_cdr(i64 %rvp7583526)                                  ; call prim_cdr
  %a7580992 = call i64 @prim_car(i64 %rvp7583525)                                    ; call prim_car
  %na7583520 = call i64 @prim_cdr(i64 %rvp7583525)                                   ; call prim_cdr
  %a7580993 = call i64 @prim__45(i64 %a7580992, i64 %uzn$n)                          ; call prim__45
  %rva7583524 = add i64 0, 0                                                         ; quoted ()
  %rva7583523 = call i64 @prim_cons(i64 %a7580993, i64 %rva7583524)                  ; call prim_cons
  %rva7583522 = call i64 @prim_cons(i64 %q5y$lst, i64 %rva7583523)                   ; call prim_cons
  %rva7583521 = call i64 @prim_cons(i64 %cont7581194, i64 %rva7583522)               ; call prim_cons
  %cloptr7587228 = inttoptr i64 %ICX$_37take to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587229 = getelementptr inbounds i64, i64* %cloptr7587228, i64 0             ; &cloptr7587228[0]
  %f7587231 = load i64, i64* %i0ptr7587229, align 8                                  ; load; *i0ptr7587229
  %fptr7587230 = inttoptr i64 %f7587231 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587230(i64 %ICX$_37take, i64 %rva7583521)          ; tail call
  ret void
}


define void @lam7587022(i64 %env7587023, i64 %rvp7585336) {
  %envptr7587232 = inttoptr i64 %env7587023 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587233 = getelementptr inbounds i64, i64* %envptr7587232, i64 6            ; &envptr7587232[6]
  %be3$_37foldr1 = load i64, i64* %envptr7587233, align 8                            ; load; *envptr7587233
  %envptr7587234 = inttoptr i64 %env7587023 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587235 = getelementptr inbounds i64, i64* %envptr7587234, i64 5            ; &envptr7587234[5]
  %tIY$Ycmb = load i64, i64* %envptr7587235, align 8                                 ; load; *envptr7587235
  %envptr7587236 = inttoptr i64 %env7587023 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587237 = getelementptr inbounds i64, i64* %envptr7587236, i64 4            ; &envptr7587236[4]
  %wKy$_37length = load i64, i64* %envptr7587237, align 8                            ; load; *envptr7587237
  %envptr7587238 = inttoptr i64 %env7587023 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587239 = getelementptr inbounds i64, i64* %envptr7587238, i64 3            ; &envptr7587238[3]
  %tOq$_37drop_45right = load i64, i64* %envptr7587239, align 8                      ; load; *envptr7587239
  %envptr7587240 = inttoptr i64 %env7587023 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587241 = getelementptr inbounds i64, i64* %envptr7587240, i64 2            ; &envptr7587240[2]
  %ajE$_37foldl1 = load i64, i64* %envptr7587241, align 8                            ; load; *envptr7587241
  %envptr7587242 = inttoptr i64 %env7587023 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587243 = getelementptr inbounds i64, i64* %envptr7587242, i64 1            ; &envptr7587242[1]
  %lm9$_37last = load i64, i64* %envptr7587243, align 8                              ; load; *envptr7587243
  %_957581196 = call i64 @prim_car(i64 %rvp7585336)                                  ; call prim_car
  %rvp7585335 = call i64 @prim_cdr(i64 %rvp7585336)                                  ; call prim_cdr
  %zF0$_37foldr = call i64 @prim_car(i64 %rvp7585335)                                ; call prim_car
  %na7583534 = call i64 @prim_cdr(i64 %rvp7585335)                                   ; call prim_cdr
  %cloptr7587244 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7587246 = getelementptr inbounds i64, i64* %cloptr7587244, i64 1              ; &eptr7587246[1]
  store i64 %be3$_37foldr1, i64* %eptr7587246                                        ; *eptr7587246 = %be3$_37foldr1
  %eptr7587245 = getelementptr inbounds i64, i64* %cloptr7587244, i64 0              ; &cloptr7587244[0]
  %f7587247 = ptrtoint void(i64,i64)* @lam7587020 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587247, i64* %eptr7587245                                             ; store fptr
  %dEj$_37map1 = ptrtoint i64* %cloptr7587244 to i64                                 ; closure cast; i64* -> i64
  %cloptr7587248 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587250 = getelementptr inbounds i64, i64* %cloptr7587248, i64 1              ; &eptr7587250[1]
  %eptr7587251 = getelementptr inbounds i64, i64* %cloptr7587248, i64 2              ; &eptr7587251[2]
  %eptr7587252 = getelementptr inbounds i64, i64* %cloptr7587248, i64 3              ; &eptr7587252[3]
  store i64 %lm9$_37last, i64* %eptr7587250                                          ; *eptr7587250 = %lm9$_37last
  store i64 %tOq$_37drop_45right, i64* %eptr7587251                                  ; *eptr7587251 = %tOq$_37drop_45right
  store i64 %zF0$_37foldr, i64* %eptr7587252                                         ; *eptr7587252 = %zF0$_37foldr
  %eptr7587249 = getelementptr inbounds i64, i64* %cloptr7587248, i64 0              ; &cloptr7587248[0]
  %f7587253 = ptrtoint void(i64,i64)* @lam7587009 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587253, i64* %eptr7587249                                             ; store fptr
  %MCs$_37map = ptrtoint i64* %cloptr7587248 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587254 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587256 = getelementptr inbounds i64, i64* %cloptr7587254, i64 1              ; &eptr7587256[1]
  %eptr7587257 = getelementptr inbounds i64, i64* %cloptr7587254, i64 2              ; &eptr7587257[2]
  store i64 %ajE$_37foldl1, i64* %eptr7587256                                        ; *eptr7587256 = %ajE$_37foldl1
  store i64 %wKy$_37length, i64* %eptr7587257                                        ; *eptr7587257 = %wKy$_37length
  %eptr7587255 = getelementptr inbounds i64, i64* %cloptr7587254, i64 0              ; &cloptr7587254[0]
  %f7587258 = ptrtoint void(i64,i64)* @lam7586993 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587258, i64* %eptr7587255                                             ; store fptr
  %arg7581546 = ptrtoint i64* %cloptr7587254 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587259 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587261 = getelementptr inbounds i64, i64* %cloptr7587259, i64 1              ; &eptr7587261[1]
  %eptr7587262 = getelementptr inbounds i64, i64* %cloptr7587259, i64 2              ; &eptr7587262[2]
  %eptr7587263 = getelementptr inbounds i64, i64* %cloptr7587259, i64 3              ; &eptr7587263[3]
  store i64 %zF0$_37foldr, i64* %eptr7587261                                         ; *eptr7587261 = %zF0$_37foldr
  store i64 %dEj$_37map1, i64* %eptr7587262                                          ; *eptr7587262 = %dEj$_37map1
  store i64 %be3$_37foldr1, i64* %eptr7587263                                        ; *eptr7587263 = %be3$_37foldr1
  %eptr7587260 = getelementptr inbounds i64, i64* %cloptr7587259, i64 0              ; &cloptr7587259[0]
  %f7587264 = ptrtoint void(i64,i64)* @lam7585833 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587264, i64* %eptr7587260                                             ; store fptr
  %arg7581545 = ptrtoint i64* %cloptr7587259 to i64                                  ; closure cast; i64* -> i64
  %rva7585334 = add i64 0, 0                                                         ; quoted ()
  %rva7585333 = call i64 @prim_cons(i64 %arg7581545, i64 %rva7585334)                ; call prim_cons
  %rva7585332 = call i64 @prim_cons(i64 %arg7581546, i64 %rva7585333)                ; call prim_cons
  %cloptr7587265 = inttoptr i64 %tIY$Ycmb to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7587266 = getelementptr inbounds i64, i64* %cloptr7587265, i64 0             ; &cloptr7587265[0]
  %f7587268 = load i64, i64* %i0ptr7587266, align 8                                  ; load; *i0ptr7587266
  %fptr7587267 = inttoptr i64 %f7587268 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587267(i64 %tIY$Ycmb, i64 %rva7585332)             ; tail call
  ret void
}


define void @lam7587020(i64 %env7587021, i64 %rvp7583559) {
  %envptr7587269 = inttoptr i64 %env7587021 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587270 = getelementptr inbounds i64, i64* %envptr7587269, i64 1            ; &envptr7587269[1]
  %be3$_37foldr1 = load i64, i64* %envptr7587270, align 8                            ; load; *envptr7587270
  %cont7581197 = call i64 @prim_car(i64 %rvp7583559)                                 ; call prim_car
  %rvp7583558 = call i64 @prim_cdr(i64 %rvp7583559)                                  ; call prim_cdr
  %mR5$f = call i64 @prim_car(i64 %rvp7583558)                                       ; call prim_car
  %rvp7583557 = call i64 @prim_cdr(i64 %rvp7583558)                                  ; call prim_cdr
  %WX7$lst = call i64 @prim_car(i64 %rvp7583557)                                     ; call prim_car
  %na7583536 = call i64 @prim_cdr(i64 %rvp7583557)                                   ; call prim_cdr
  %cloptr7587271 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7587273 = getelementptr inbounds i64, i64* %cloptr7587271, i64 1              ; &eptr7587273[1]
  store i64 %mR5$f, i64* %eptr7587273                                                ; *eptr7587273 = %mR5$f
  %eptr7587272 = getelementptr inbounds i64, i64* %cloptr7587271, i64 0              ; &cloptr7587271[0]
  %f7587274 = ptrtoint void(i64,i64)* @lam7587018 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587274, i64* %eptr7587272                                             ; store fptr
  %arg7581508 = ptrtoint i64* %cloptr7587271 to i64                                  ; closure cast; i64* -> i64
  %arg7581507 = add i64 0, 0                                                         ; quoted ()
  %rva7583556 = add i64 0, 0                                                         ; quoted ()
  %rva7583555 = call i64 @prim_cons(i64 %WX7$lst, i64 %rva7583556)                   ; call prim_cons
  %rva7583554 = call i64 @prim_cons(i64 %arg7581507, i64 %rva7583555)                ; call prim_cons
  %rva7583553 = call i64 @prim_cons(i64 %arg7581508, i64 %rva7583554)                ; call prim_cons
  %rva7583552 = call i64 @prim_cons(i64 %cont7581197, i64 %rva7583553)               ; call prim_cons
  %cloptr7587275 = inttoptr i64 %be3$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7587276 = getelementptr inbounds i64, i64* %cloptr7587275, i64 0             ; &cloptr7587275[0]
  %f7587278 = load i64, i64* %i0ptr7587276, align 8                                  ; load; *i0ptr7587276
  %fptr7587277 = inttoptr i64 %f7587278 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587277(i64 %be3$_37foldr1, i64 %rva7583552)        ; tail call
  ret void
}


define void @lam7587018(i64 %env7587019, i64 %rvp7583551) {
  %envptr7587279 = inttoptr i64 %env7587019 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587280 = getelementptr inbounds i64, i64* %envptr7587279, i64 1            ; &envptr7587279[1]
  %mR5$f = load i64, i64* %envptr7587280, align 8                                    ; load; *envptr7587280
  %cont7581198 = call i64 @prim_car(i64 %rvp7583551)                                 ; call prim_car
  %rvp7583550 = call i64 @prim_cdr(i64 %rvp7583551)                                  ; call prim_cdr
  %aTt$v = call i64 @prim_car(i64 %rvp7583550)                                       ; call prim_car
  %rvp7583549 = call i64 @prim_cdr(i64 %rvp7583550)                                  ; call prim_cdr
  %crj$r = call i64 @prim_car(i64 %rvp7583549)                                       ; call prim_car
  %na7583538 = call i64 @prim_cdr(i64 %rvp7583549)                                   ; call prim_cdr
  %cloptr7587281 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587283 = getelementptr inbounds i64, i64* %cloptr7587281, i64 1              ; &eptr7587283[1]
  %eptr7587284 = getelementptr inbounds i64, i64* %cloptr7587281, i64 2              ; &eptr7587284[2]
  store i64 %crj$r, i64* %eptr7587283                                                ; *eptr7587283 = %crj$r
  store i64 %cont7581198, i64* %eptr7587284                                          ; *eptr7587284 = %cont7581198
  %eptr7587282 = getelementptr inbounds i64, i64* %cloptr7587281, i64 0              ; &cloptr7587281[0]
  %f7587285 = ptrtoint void(i64,i64)* @lam7587016 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587285, i64* %eptr7587282                                             ; store fptr
  %arg7581512 = ptrtoint i64* %cloptr7587281 to i64                                  ; closure cast; i64* -> i64
  %rva7583548 = add i64 0, 0                                                         ; quoted ()
  %rva7583547 = call i64 @prim_cons(i64 %aTt$v, i64 %rva7583548)                     ; call prim_cons
  %rva7583546 = call i64 @prim_cons(i64 %arg7581512, i64 %rva7583547)                ; call prim_cons
  %cloptr7587286 = inttoptr i64 %mR5$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7587287 = getelementptr inbounds i64, i64* %cloptr7587286, i64 0             ; &cloptr7587286[0]
  %f7587289 = load i64, i64* %i0ptr7587287, align 8                                  ; load; *i0ptr7587287
  %fptr7587288 = inttoptr i64 %f7587289 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587288(i64 %mR5$f, i64 %rva7583546)                ; tail call
  ret void
}


define void @lam7587016(i64 %env7587017, i64 %rvp7583545) {
  %envptr7587290 = inttoptr i64 %env7587017 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587291 = getelementptr inbounds i64, i64* %envptr7587290, i64 2            ; &envptr7587290[2]
  %cont7581198 = load i64, i64* %envptr7587291, align 8                              ; load; *envptr7587291
  %envptr7587292 = inttoptr i64 %env7587017 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587293 = getelementptr inbounds i64, i64* %envptr7587292, i64 1            ; &envptr7587292[1]
  %crj$r = load i64, i64* %envptr7587293, align 8                                    ; load; *envptr7587293
  %_957581199 = call i64 @prim_car(i64 %rvp7583545)                                  ; call prim_car
  %rvp7583544 = call i64 @prim_cdr(i64 %rvp7583545)                                  ; call prim_cdr
  %a7581002 = call i64 @prim_car(i64 %rvp7583544)                                    ; call prim_car
  %na7583540 = call i64 @prim_cdr(i64 %rvp7583544)                                   ; call prim_cdr
  %retprim7581200 = call i64 @prim_cons(i64 %a7581002, i64 %crj$r)                   ; call prim_cons
  %arg7581517 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583543 = add i64 0, 0                                                         ; quoted ()
  %rva7583542 = call i64 @prim_cons(i64 %retprim7581200, i64 %rva7583543)            ; call prim_cons
  %rva7583541 = call i64 @prim_cons(i64 %arg7581517, i64 %rva7583542)                ; call prim_cons
  %cloptr7587294 = inttoptr i64 %cont7581198 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587295 = getelementptr inbounds i64, i64* %cloptr7587294, i64 0             ; &cloptr7587294[0]
  %f7587297 = load i64, i64* %i0ptr7587295, align 8                                  ; load; *i0ptr7587295
  %fptr7587296 = inttoptr i64 %f7587297 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587296(i64 %cont7581198, i64 %rva7583541)          ; tail call
  ret void
}


define void @lam7587009(i64 %env7587010, i64 %oCW$args7581202) {
  %envptr7587298 = inttoptr i64 %env7587010 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587299 = getelementptr inbounds i64, i64* %envptr7587298, i64 3            ; &envptr7587298[3]
  %zF0$_37foldr = load i64, i64* %envptr7587299, align 8                             ; load; *envptr7587299
  %envptr7587300 = inttoptr i64 %env7587010 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587301 = getelementptr inbounds i64, i64* %envptr7587300, i64 2            ; &envptr7587300[2]
  %tOq$_37drop_45right = load i64, i64* %envptr7587301, align 8                      ; load; *envptr7587301
  %envptr7587302 = inttoptr i64 %env7587010 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587303 = getelementptr inbounds i64, i64* %envptr7587302, i64 1            ; &envptr7587302[1]
  %lm9$_37last = load i64, i64* %envptr7587303, align 8                              ; load; *envptr7587303
  %cont7581201 = call i64 @prim_car(i64 %oCW$args7581202)                            ; call prim_car
  %oCW$args = call i64 @prim_cdr(i64 %oCW$args7581202)                               ; call prim_cdr
  %t8l$f = call i64 @prim_car(i64 %oCW$args)                                         ; call prim_car
  %o3D$lsts = call i64 @prim_cdr(i64 %oCW$args)                                      ; call prim_cdr
  %arg7581524 = add i64 0, 0                                                         ; quoted ()
  %a7581006 = call i64 @prim_cons(i64 %arg7581524, i64 %o3D$lsts)                    ; call prim_cons
  %cloptr7587304 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587306 = getelementptr inbounds i64, i64* %cloptr7587304, i64 1              ; &eptr7587306[1]
  %eptr7587307 = getelementptr inbounds i64, i64* %cloptr7587304, i64 2              ; &eptr7587307[2]
  %eptr7587308 = getelementptr inbounds i64, i64* %cloptr7587304, i64 3              ; &eptr7587308[3]
  store i64 %lm9$_37last, i64* %eptr7587306                                          ; *eptr7587306 = %lm9$_37last
  store i64 %tOq$_37drop_45right, i64* %eptr7587307                                  ; *eptr7587307 = %tOq$_37drop_45right
  store i64 %t8l$f, i64* %eptr7587308                                                ; *eptr7587308 = %t8l$f
  %eptr7587305 = getelementptr inbounds i64, i64* %cloptr7587304, i64 0              ; &cloptr7587304[0]
  %f7587309 = ptrtoint void(i64,i64)* @lam7587006 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587309, i64* %eptr7587305                                             ; store fptr
  %arg7581526 = ptrtoint i64* %cloptr7587304 to i64                                  ; closure cast; i64* -> i64
  %a7581007 = call i64 @prim_cons(i64 %arg7581526, i64 %a7581006)                    ; call prim_cons
  %cps_45lst7581210 = call i64 @prim_cons(i64 %cont7581201, i64 %a7581007)           ; call prim_cons
  %cloptr7587310 = inttoptr i64 %zF0$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr7587311 = getelementptr inbounds i64, i64* %cloptr7587310, i64 0             ; &cloptr7587310[0]
  %f7587313 = load i64, i64* %i0ptr7587311, align 8                                  ; load; *i0ptr7587311
  %fptr7587312 = inttoptr i64 %f7587313 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587312(i64 %zF0$_37foldr, i64 %cps_45lst7581210)   ; tail call
  ret void
}


define void @lam7587006(i64 %env7587007, i64 %W7i$fargs7581204) {
  %envptr7587314 = inttoptr i64 %env7587007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587315 = getelementptr inbounds i64, i64* %envptr7587314, i64 3            ; &envptr7587314[3]
  %t8l$f = load i64, i64* %envptr7587315, align 8                                    ; load; *envptr7587315
  %envptr7587316 = inttoptr i64 %env7587007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587317 = getelementptr inbounds i64, i64* %envptr7587316, i64 2            ; &envptr7587316[2]
  %tOq$_37drop_45right = load i64, i64* %envptr7587317, align 8                      ; load; *envptr7587317
  %envptr7587318 = inttoptr i64 %env7587007 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587319 = getelementptr inbounds i64, i64* %envptr7587318, i64 1            ; &envptr7587318[1]
  %lm9$_37last = load i64, i64* %envptr7587319, align 8                              ; load; *envptr7587319
  %cont7581203 = call i64 @prim_car(i64 %W7i$fargs7581204)                           ; call prim_car
  %W7i$fargs = call i64 @prim_cdr(i64 %W7i$fargs7581204)                             ; call prim_cdr
  %cloptr7587320 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7587322 = getelementptr inbounds i64, i64* %cloptr7587320, i64 1              ; &eptr7587322[1]
  %eptr7587323 = getelementptr inbounds i64, i64* %cloptr7587320, i64 2              ; &eptr7587323[2]
  %eptr7587324 = getelementptr inbounds i64, i64* %cloptr7587320, i64 3              ; &eptr7587324[3]
  %eptr7587325 = getelementptr inbounds i64, i64* %cloptr7587320, i64 4              ; &eptr7587325[4]
  store i64 %lm9$_37last, i64* %eptr7587322                                          ; *eptr7587322 = %lm9$_37last
  store i64 %cont7581203, i64* %eptr7587323                                          ; *eptr7587323 = %cont7581203
  store i64 %t8l$f, i64* %eptr7587324                                                ; *eptr7587324 = %t8l$f
  store i64 %W7i$fargs, i64* %eptr7587325                                            ; *eptr7587325 = %W7i$fargs
  %eptr7587321 = getelementptr inbounds i64, i64* %cloptr7587320, i64 0              ; &cloptr7587320[0]
  %f7587326 = ptrtoint void(i64,i64)* @lam7587004 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587326, i64* %eptr7587321                                             ; store fptr
  %arg7581531 = ptrtoint i64* %cloptr7587320 to i64                                  ; closure cast; i64* -> i64
  %arg7581529 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva7583581 = add i64 0, 0                                                         ; quoted ()
  %rva7583580 = call i64 @prim_cons(i64 %arg7581529, i64 %rva7583581)                ; call prim_cons
  %rva7583579 = call i64 @prim_cons(i64 %W7i$fargs, i64 %rva7583580)                 ; call prim_cons
  %rva7583578 = call i64 @prim_cons(i64 %arg7581531, i64 %rva7583579)                ; call prim_cons
  %cloptr7587327 = inttoptr i64 %tOq$_37drop_45right to i64*                         ; closure/env cast; i64 -> i64*
  %i0ptr7587328 = getelementptr inbounds i64, i64* %cloptr7587327, i64 0             ; &cloptr7587327[0]
  %f7587330 = load i64, i64* %i0ptr7587328, align 8                                  ; load; *i0ptr7587328
  %fptr7587329 = inttoptr i64 %f7587330 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587329(i64 %tOq$_37drop_45right, i64 %rva7583578)  ; tail call
  ret void
}


define void @lam7587004(i64 %env7587005, i64 %rvp7583577) {
  %envptr7587331 = inttoptr i64 %env7587005 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587332 = getelementptr inbounds i64, i64* %envptr7587331, i64 4            ; &envptr7587331[4]
  %W7i$fargs = load i64, i64* %envptr7587332, align 8                                ; load; *envptr7587332
  %envptr7587333 = inttoptr i64 %env7587005 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587334 = getelementptr inbounds i64, i64* %envptr7587333, i64 3            ; &envptr7587333[3]
  %t8l$f = load i64, i64* %envptr7587334, align 8                                    ; load; *envptr7587334
  %envptr7587335 = inttoptr i64 %env7587005 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587336 = getelementptr inbounds i64, i64* %envptr7587335, i64 2            ; &envptr7587335[2]
  %cont7581203 = load i64, i64* %envptr7587336, align 8                              ; load; *envptr7587336
  %envptr7587337 = inttoptr i64 %env7587005 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587338 = getelementptr inbounds i64, i64* %envptr7587337, i64 1            ; &envptr7587337[1]
  %lm9$_37last = load i64, i64* %envptr7587338, align 8                              ; load; *envptr7587338
  %_957581205 = call i64 @prim_car(i64 %rvp7583577)                                  ; call prim_car
  %rvp7583576 = call i64 @prim_cdr(i64 %rvp7583577)                                  ; call prim_cdr
  %a7581003 = call i64 @prim_car(i64 %rvp7583576)                                    ; call prim_car
  %na7583561 = call i64 @prim_cdr(i64 %rvp7583576)                                   ; call prim_cdr
  %cloptr7587339 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587341 = getelementptr inbounds i64, i64* %cloptr7587339, i64 1              ; &eptr7587341[1]
  %eptr7587342 = getelementptr inbounds i64, i64* %cloptr7587339, i64 2              ; &eptr7587342[2]
  %eptr7587343 = getelementptr inbounds i64, i64* %cloptr7587339, i64 3              ; &eptr7587343[3]
  store i64 %lm9$_37last, i64* %eptr7587341                                          ; *eptr7587341 = %lm9$_37last
  store i64 %cont7581203, i64* %eptr7587342                                          ; *eptr7587342 = %cont7581203
  store i64 %W7i$fargs, i64* %eptr7587343                                            ; *eptr7587343 = %W7i$fargs
  %eptr7587340 = getelementptr inbounds i64, i64* %cloptr7587339, i64 0              ; &cloptr7587339[0]
  %f7587344 = ptrtoint void(i64,i64)* @lam7587002 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587344, i64* %eptr7587340                                             ; store fptr
  %arg7581534 = ptrtoint i64* %cloptr7587339 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst7581209 = call i64 @prim_cons(i64 %arg7581534, i64 %a7581003)            ; call prim_cons
  %cloptr7587345 = inttoptr i64 %t8l$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7587346 = getelementptr inbounds i64, i64* %cloptr7587345, i64 0             ; &cloptr7587345[0]
  %f7587348 = load i64, i64* %i0ptr7587346, align 8                                  ; load; *i0ptr7587346
  %fptr7587347 = inttoptr i64 %f7587348 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587347(i64 %t8l$f, i64 %cps_45lst7581209)          ; tail call
  ret void
}


define void @lam7587002(i64 %env7587003, i64 %rvp7583575) {
  %envptr7587349 = inttoptr i64 %env7587003 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587350 = getelementptr inbounds i64, i64* %envptr7587349, i64 3            ; &envptr7587349[3]
  %W7i$fargs = load i64, i64* %envptr7587350, align 8                                ; load; *envptr7587350
  %envptr7587351 = inttoptr i64 %env7587003 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587352 = getelementptr inbounds i64, i64* %envptr7587351, i64 2            ; &envptr7587351[2]
  %cont7581203 = load i64, i64* %envptr7587352, align 8                              ; load; *envptr7587352
  %envptr7587353 = inttoptr i64 %env7587003 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587354 = getelementptr inbounds i64, i64* %envptr7587353, i64 1            ; &envptr7587353[1]
  %lm9$_37last = load i64, i64* %envptr7587354, align 8                              ; load; *envptr7587354
  %_957581206 = call i64 @prim_car(i64 %rvp7583575)                                  ; call prim_car
  %rvp7583574 = call i64 @prim_cdr(i64 %rvp7583575)                                  ; call prim_cdr
  %a7581004 = call i64 @prim_car(i64 %rvp7583574)                                    ; call prim_car
  %na7583563 = call i64 @prim_cdr(i64 %rvp7583574)                                   ; call prim_cdr
  %cloptr7587355 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587357 = getelementptr inbounds i64, i64* %cloptr7587355, i64 1              ; &eptr7587357[1]
  %eptr7587358 = getelementptr inbounds i64, i64* %cloptr7587355, i64 2              ; &eptr7587358[2]
  store i64 %cont7581203, i64* %eptr7587357                                          ; *eptr7587357 = %cont7581203
  store i64 %a7581004, i64* %eptr7587358                                             ; *eptr7587358 = %a7581004
  %eptr7587356 = getelementptr inbounds i64, i64* %cloptr7587355, i64 0              ; &cloptr7587355[0]
  %f7587359 = ptrtoint void(i64,i64)* @lam7587000 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587359, i64* %eptr7587356                                             ; store fptr
  %arg7581536 = ptrtoint i64* %cloptr7587355 to i64                                  ; closure cast; i64* -> i64
  %rva7583573 = add i64 0, 0                                                         ; quoted ()
  %rva7583572 = call i64 @prim_cons(i64 %W7i$fargs, i64 %rva7583573)                 ; call prim_cons
  %rva7583571 = call i64 @prim_cons(i64 %arg7581536, i64 %rva7583572)                ; call prim_cons
  %cloptr7587360 = inttoptr i64 %lm9$_37last to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587361 = getelementptr inbounds i64, i64* %cloptr7587360, i64 0             ; &cloptr7587360[0]
  %f7587363 = load i64, i64* %i0ptr7587361, align 8                                  ; load; *i0ptr7587361
  %fptr7587362 = inttoptr i64 %f7587363 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587362(i64 %lm9$_37last, i64 %rva7583571)          ; tail call
  ret void
}


define void @lam7587000(i64 %env7587001, i64 %rvp7583570) {
  %envptr7587364 = inttoptr i64 %env7587001 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587365 = getelementptr inbounds i64, i64* %envptr7587364, i64 2            ; &envptr7587364[2]
  %a7581004 = load i64, i64* %envptr7587365, align 8                                 ; load; *envptr7587365
  %envptr7587366 = inttoptr i64 %env7587001 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587367 = getelementptr inbounds i64, i64* %envptr7587366, i64 1            ; &envptr7587366[1]
  %cont7581203 = load i64, i64* %envptr7587367, align 8                              ; load; *envptr7587367
  %_957581207 = call i64 @prim_car(i64 %rvp7583570)                                  ; call prim_car
  %rvp7583569 = call i64 @prim_cdr(i64 %rvp7583570)                                  ; call prim_cdr
  %a7581005 = call i64 @prim_car(i64 %rvp7583569)                                    ; call prim_car
  %na7583565 = call i64 @prim_cdr(i64 %rvp7583569)                                   ; call prim_cdr
  %retprim7581208 = call i64 @prim_cons(i64 %a7581004, i64 %a7581005)                ; call prim_cons
  %arg7581541 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583568 = add i64 0, 0                                                         ; quoted ()
  %rva7583567 = call i64 @prim_cons(i64 %retprim7581208, i64 %rva7583568)            ; call prim_cons
  %rva7583566 = call i64 @prim_cons(i64 %arg7581541, i64 %rva7583567)                ; call prim_cons
  %cloptr7587368 = inttoptr i64 %cont7581203 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587369 = getelementptr inbounds i64, i64* %cloptr7587368, i64 0             ; &cloptr7587368[0]
  %f7587371 = load i64, i64* %i0ptr7587369, align 8                                  ; load; *i0ptr7587369
  %fptr7587370 = inttoptr i64 %f7587371 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587370(i64 %cont7581203, i64 %rva7583566)          ; tail call
  ret void
}


define void @lam7586993(i64 %env7586994, i64 %rvp7585236) {
  %envptr7587372 = inttoptr i64 %env7586994 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587373 = getelementptr inbounds i64, i64* %envptr7587372, i64 2            ; &envptr7587372[2]
  %wKy$_37length = load i64, i64* %envptr7587373, align 8                            ; load; *envptr7587373
  %envptr7587374 = inttoptr i64 %env7586994 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587375 = getelementptr inbounds i64, i64* %envptr7587374, i64 1            ; &envptr7587374[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7587375, align 8                            ; load; *envptr7587375
  %_957581211 = call i64 @prim_car(i64 %rvp7585236)                                  ; call prim_car
  %rvp7585235 = call i64 @prim_cdr(i64 %rvp7585236)                                  ; call prim_cdr
  %EPU$_37foldl = call i64 @prim_car(i64 %rvp7585235)                                ; call prim_car
  %na7583583 = call i64 @prim_cdr(i64 %rvp7585235)                                   ; call prim_cdr
  %cloptr7587376 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587377 = getelementptr inbounds i64, i64* %cloptr7587376, i64 0              ; &cloptr7587376[0]
  %f7587378 = ptrtoint void(i64,i64)* @lam7586991 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587378, i64* %eptr7587377                                             ; store fptr
  %AhN$_37_62 = ptrtoint i64* %cloptr7587376 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587379 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587380 = getelementptr inbounds i64, i64* %cloptr7587379, i64 0              ; &cloptr7587379[0]
  %f7587381 = ptrtoint void(i64,i64)* @lam7586987 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587381, i64* %eptr7587380                                             ; store fptr
  %nv0$_37_62_61 = ptrtoint i64* %cloptr7587379 to i64                               ; closure cast; i64* -> i64
  %arg7581561 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %arg7581560 = add i64 0, 0                                                         ; quoted ()
  %fb6$_37append = call i64 @prim_make_45vector(i64 %arg7581561, i64 %arg7581560)    ; call prim_make_45vector
  %arg7581563 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7587382 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7587384 = getelementptr inbounds i64, i64* %cloptr7587382, i64 1              ; &eptr7587384[1]
  store i64 %fb6$_37append, i64* %eptr7587384                                        ; *eptr7587384 = %fb6$_37append
  %eptr7587383 = getelementptr inbounds i64, i64* %cloptr7587382, i64 0              ; &cloptr7587382[0]
  %f7587385 = ptrtoint void(i64,i64)* @lam7586980 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587385, i64* %eptr7587383                                             ; store fptr
  %arg7581562 = ptrtoint i64* %cloptr7587382 to i64                                  ; closure cast; i64* -> i64
  %Wyt$_950 = call i64 @prim_vector_45set_33(i64 %fb6$_37append, i64 %arg7581563, i64 %arg7581562); call prim_vector_45set_33
  %arg7581582 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581393 = call i64 @prim_vector_45ref(i64 %fb6$_37append, i64 %arg7581582) ; call prim_vector_45ref
  %cloptr7587386 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587388 = getelementptr inbounds i64, i64* %cloptr7587386, i64 1              ; &eptr7587388[1]
  %eptr7587389 = getelementptr inbounds i64, i64* %cloptr7587386, i64 2              ; &eptr7587389[2]
  %eptr7587390 = getelementptr inbounds i64, i64* %cloptr7587386, i64 3              ; &eptr7587390[3]
  store i64 %ajE$_37foldl1, i64* %eptr7587388                                        ; *eptr7587388 = %ajE$_37foldl1
  store i64 %AhN$_37_62, i64* %eptr7587389                                           ; *eptr7587389 = %AhN$_37_62
  store i64 %wKy$_37length, i64* %eptr7587390                                        ; *eptr7587390 = %wKy$_37length
  %eptr7587387 = getelementptr inbounds i64, i64* %cloptr7587386, i64 0              ; &cloptr7587386[0]
  %f7587391 = ptrtoint void(i64,i64)* @lam7586969 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587391, i64* %eptr7587387                                             ; store fptr
  %arg7581586 = ptrtoint i64* %cloptr7587386 to i64                                  ; closure cast; i64* -> i64
  %arg7581585 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585234 = add i64 0, 0                                                         ; quoted ()
  %rva7585233 = call i64 @prim_cons(i64 %retprim7581393, i64 %rva7585234)            ; call prim_cons
  %rva7585232 = call i64 @prim_cons(i64 %arg7581585, i64 %rva7585233)                ; call prim_cons
  %cloptr7587392 = inttoptr i64 %arg7581586 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587393 = getelementptr inbounds i64, i64* %cloptr7587392, i64 0             ; &cloptr7587392[0]
  %f7587395 = load i64, i64* %i0ptr7587393, align 8                                  ; load; *i0ptr7587393
  %fptr7587394 = inttoptr i64 %f7587395 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587394(i64 %arg7581586, i64 %rva7585232)           ; tail call
  ret void
}


define void @lam7586991(i64 %env7586992, i64 %rvp7583591) {
  %cont7581212 = call i64 @prim_car(i64 %rvp7583591)                                 ; call prim_car
  %rvp7583590 = call i64 @prim_cdr(i64 %rvp7583591)                                  ; call prim_cdr
  %y90$a = call i64 @prim_car(i64 %rvp7583590)                                       ; call prim_car
  %rvp7583589 = call i64 @prim_cdr(i64 %rvp7583590)                                  ; call prim_cdr
  %uzi$b = call i64 @prim_car(i64 %rvp7583589)                                       ; call prim_car
  %na7583585 = call i64 @prim_cdr(i64 %rvp7583589)                                   ; call prim_cdr
  %a7581015 = call i64 @prim__60_61(i64 %y90$a, i64 %uzi$b)                          ; call prim__60_61
  %retprim7581213 = call i64 @prim_not(i64 %a7581015)                                ; call prim_not
  %arg7581552 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583588 = add i64 0, 0                                                         ; quoted ()
  %rva7583587 = call i64 @prim_cons(i64 %retprim7581213, i64 %rva7583588)            ; call prim_cons
  %rva7583586 = call i64 @prim_cons(i64 %arg7581552, i64 %rva7583587)                ; call prim_cons
  %cloptr7587396 = inttoptr i64 %cont7581212 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587397 = getelementptr inbounds i64, i64* %cloptr7587396, i64 0             ; &cloptr7587396[0]
  %f7587399 = load i64, i64* %i0ptr7587397, align 8                                  ; load; *i0ptr7587397
  %fptr7587398 = inttoptr i64 %f7587399 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587398(i64 %cont7581212, i64 %rva7583586)          ; tail call
  ret void
}


define void @lam7586987(i64 %env7586988, i64 %rvp7583599) {
  %cont7581214 = call i64 @prim_car(i64 %rvp7583599)                                 ; call prim_car
  %rvp7583598 = call i64 @prim_cdr(i64 %rvp7583599)                                  ; call prim_cdr
  %Qm9$a = call i64 @prim_car(i64 %rvp7583598)                                       ; call prim_car
  %rvp7583597 = call i64 @prim_cdr(i64 %rvp7583598)                                  ; call prim_cdr
  %Rj3$b = call i64 @prim_car(i64 %rvp7583597)                                       ; call prim_car
  %na7583593 = call i64 @prim_cdr(i64 %rvp7583597)                                   ; call prim_cdr
  %a7581016 = call i64 @prim__60(i64 %Qm9$a, i64 %Rj3$b)                             ; call prim__60
  %retprim7581215 = call i64 @prim_not(i64 %a7581016)                                ; call prim_not
  %arg7581558 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583596 = add i64 0, 0                                                         ; quoted ()
  %rva7583595 = call i64 @prim_cons(i64 %retprim7581215, i64 %rva7583596)            ; call prim_cons
  %rva7583594 = call i64 @prim_cons(i64 %arg7581558, i64 %rva7583595)                ; call prim_cons
  %cloptr7587400 = inttoptr i64 %cont7581214 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587401 = getelementptr inbounds i64, i64* %cloptr7587400, i64 0             ; &cloptr7587400[0]
  %f7587403 = load i64, i64* %i0ptr7587401, align 8                                  ; load; *i0ptr7587401
  %fptr7587402 = inttoptr i64 %f7587403 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587402(i64 %cont7581214, i64 %rva7583594)          ; tail call
  ret void
}


define void @lam7586980(i64 %env7586981, i64 %rvp7583618) {
  %envptr7587404 = inttoptr i64 %env7586981 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587405 = getelementptr inbounds i64, i64* %envptr7587404, i64 1            ; &envptr7587404[1]
  %fb6$_37append = load i64, i64* %envptr7587405, align 8                            ; load; *envptr7587405
  %cont7581390 = call i64 @prim_car(i64 %rvp7583618)                                 ; call prim_car
  %rvp7583617 = call i64 @prim_cdr(i64 %rvp7583618)                                  ; call prim_cdr
  %Gt1$ls0 = call i64 @prim_car(i64 %rvp7583617)                                     ; call prim_car
  %rvp7583616 = call i64 @prim_cdr(i64 %rvp7583617)                                  ; call prim_cdr
  %gu9$ls1 = call i64 @prim_car(i64 %rvp7583616)                                     ; call prim_car
  %na7583601 = call i64 @prim_cdr(i64 %rvp7583616)                                   ; call prim_cdr
  %a7581017 = call i64 @prim_null_63(i64 %Gt1$ls0)                                   ; call prim_null_63
  %cmp7587406 = icmp eq i64 %a7581017, 15                                            ; false?
  br i1 %cmp7587406, label %else7587408, label %then7587407                          ; if

then7587407:
  %arg7581567 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583604 = add i64 0, 0                                                         ; quoted ()
  %rva7583603 = call i64 @prim_cons(i64 %gu9$ls1, i64 %rva7583604)                   ; call prim_cons
  %rva7583602 = call i64 @prim_cons(i64 %arg7581567, i64 %rva7583603)                ; call prim_cons
  %cloptr7587409 = inttoptr i64 %cont7581390 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587410 = getelementptr inbounds i64, i64* %cloptr7587409, i64 0             ; &cloptr7587409[0]
  %f7587412 = load i64, i64* %i0ptr7587410, align 8                                  ; load; *i0ptr7587410
  %fptr7587411 = inttoptr i64 %f7587412 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587411(i64 %cont7581390, i64 %rva7583602)          ; tail call
  ret void

else7587408:
  %a7581018 = call i64 @prim_car(i64 %Gt1$ls0)                                       ; call prim_car
  %arg7581570 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581019 = call i64 @prim_vector_45ref(i64 %fb6$_37append, i64 %arg7581570)       ; call prim_vector_45ref
  %a7581020 = call i64 @prim_cdr(i64 %Gt1$ls0)                                       ; call prim_cdr
  %cloptr7587413 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587415 = getelementptr inbounds i64, i64* %cloptr7587413, i64 1              ; &eptr7587415[1]
  %eptr7587416 = getelementptr inbounds i64, i64* %cloptr7587413, i64 2              ; &eptr7587416[2]
  store i64 %a7581018, i64* %eptr7587415                                             ; *eptr7587415 = %a7581018
  store i64 %cont7581390, i64* %eptr7587416                                          ; *eptr7587416 = %cont7581390
  %eptr7587414 = getelementptr inbounds i64, i64* %cloptr7587413, i64 0              ; &cloptr7587413[0]
  %f7587417 = ptrtoint void(i64,i64)* @lam7586977 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587417, i64* %eptr7587414                                             ; store fptr
  %arg7581575 = ptrtoint i64* %cloptr7587413 to i64                                  ; closure cast; i64* -> i64
  %rva7583615 = add i64 0, 0                                                         ; quoted ()
  %rva7583614 = call i64 @prim_cons(i64 %gu9$ls1, i64 %rva7583615)                   ; call prim_cons
  %rva7583613 = call i64 @prim_cons(i64 %a7581020, i64 %rva7583614)                  ; call prim_cons
  %rva7583612 = call i64 @prim_cons(i64 %arg7581575, i64 %rva7583613)                ; call prim_cons
  %cloptr7587418 = inttoptr i64 %a7581019 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7587419 = getelementptr inbounds i64, i64* %cloptr7587418, i64 0             ; &cloptr7587418[0]
  %f7587421 = load i64, i64* %i0ptr7587419, align 8                                  ; load; *i0ptr7587419
  %fptr7587420 = inttoptr i64 %f7587421 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587420(i64 %a7581019, i64 %rva7583612)             ; tail call
  ret void
}


define void @lam7586977(i64 %env7586978, i64 %rvp7583611) {
  %envptr7587422 = inttoptr i64 %env7586978 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587423 = getelementptr inbounds i64, i64* %envptr7587422, i64 2            ; &envptr7587422[2]
  %cont7581390 = load i64, i64* %envptr7587423, align 8                              ; load; *envptr7587423
  %envptr7587424 = inttoptr i64 %env7586978 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587425 = getelementptr inbounds i64, i64* %envptr7587424, i64 1            ; &envptr7587424[1]
  %a7581018 = load i64, i64* %envptr7587425, align 8                                 ; load; *envptr7587425
  %_957581391 = call i64 @prim_car(i64 %rvp7583611)                                  ; call prim_car
  %rvp7583610 = call i64 @prim_cdr(i64 %rvp7583611)                                  ; call prim_cdr
  %a7581021 = call i64 @prim_car(i64 %rvp7583610)                                    ; call prim_car
  %na7583606 = call i64 @prim_cdr(i64 %rvp7583610)                                   ; call prim_cdr
  %retprim7581392 = call i64 @prim_cons(i64 %a7581018, i64 %a7581021)                ; call prim_cons
  %arg7581580 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583609 = add i64 0, 0                                                         ; quoted ()
  %rva7583608 = call i64 @prim_cons(i64 %retprim7581392, i64 %rva7583609)            ; call prim_cons
  %rva7583607 = call i64 @prim_cons(i64 %arg7581580, i64 %rva7583608)                ; call prim_cons
  %cloptr7587426 = inttoptr i64 %cont7581390 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587427 = getelementptr inbounds i64, i64* %cloptr7587426, i64 0             ; &cloptr7587426[0]
  %f7587429 = load i64, i64* %i0ptr7587427, align 8                                  ; load; *i0ptr7587427
  %fptr7587428 = inttoptr i64 %f7587429 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587428(i64 %cont7581390, i64 %rva7583607)          ; tail call
  ret void
}


define void @lam7586969(i64 %env7586970, i64 %rvp7585231) {
  %envptr7587430 = inttoptr i64 %env7586970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587431 = getelementptr inbounds i64, i64* %envptr7587430, i64 3            ; &envptr7587430[3]
  %wKy$_37length = load i64, i64* %envptr7587431, align 8                            ; load; *envptr7587431
  %envptr7587432 = inttoptr i64 %env7586970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587433 = getelementptr inbounds i64, i64* %envptr7587432, i64 2            ; &envptr7587432[2]
  %AhN$_37_62 = load i64, i64* %envptr7587433, align 8                               ; load; *envptr7587433
  %envptr7587434 = inttoptr i64 %env7586970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587435 = getelementptr inbounds i64, i64* %envptr7587434, i64 1            ; &envptr7587434[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7587435, align 8                            ; load; *envptr7587435
  %_957581216 = call i64 @prim_car(i64 %rvp7585231)                                  ; call prim_car
  %rvp7585230 = call i64 @prim_cdr(i64 %rvp7585231)                                  ; call prim_cdr
  %z23$_37append = call i64 @prim_car(i64 %rvp7585230)                               ; call prim_car
  %na7583620 = call i64 @prim_cdr(i64 %rvp7585230)                                   ; call prim_cdr
  %cloptr7587436 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587437 = getelementptr inbounds i64, i64* %cloptr7587436, i64 0              ; &cloptr7587436[0]
  %f7587438 = ptrtoint void(i64,i64)* @lam7586967 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587438, i64* %eptr7587437                                             ; store fptr
  %caj$_37list_63 = ptrtoint i64* %cloptr7587436 to i64                              ; closure cast; i64* -> i64
  %cloptr7587439 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587440 = getelementptr inbounds i64, i64* %cloptr7587439, i64 0              ; &cloptr7587439[0]
  %f7587441 = ptrtoint void(i64,i64)* @lam7586915 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587441, i64* %eptr7587440                                             ; store fptr
  %NdK$_37drop = ptrtoint i64* %cloptr7587439 to i64                                 ; closure cast; i64* -> i64
  %cloptr7587442 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587443 = getelementptr inbounds i64, i64* %cloptr7587442, i64 0              ; &cloptr7587442[0]
  %f7587444 = ptrtoint void(i64,i64)* @lam7586865 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587444, i64* %eptr7587443                                             ; store fptr
  %qW2$_37memv = ptrtoint i64* %cloptr7587442 to i64                                 ; closure cast; i64* -> i64
  %cloptr7587445 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7587447 = getelementptr inbounds i64, i64* %cloptr7587445, i64 1              ; &eptr7587447[1]
  store i64 %ajE$_37foldl1, i64* %eptr7587447                                        ; *eptr7587447 = %ajE$_37foldl1
  %eptr7587446 = getelementptr inbounds i64, i64* %cloptr7587445, i64 0              ; &cloptr7587445[0]
  %f7587448 = ptrtoint void(i64,i64)* @lam7586824 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587448, i64* %eptr7587446                                             ; store fptr
  %m0I$_37_47 = ptrtoint i64* %cloptr7587445 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587449 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587450 = getelementptr inbounds i64, i64* %cloptr7587449, i64 0              ; &cloptr7587449[0]
  %f7587451 = ptrtoint void(i64,i64)* @lam7586812 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587451, i64* %eptr7587450                                             ; store fptr
  %rpp$_37first = ptrtoint i64* %cloptr7587449 to i64                                ; closure cast; i64* -> i64
  %cloptr7587452 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587453 = getelementptr inbounds i64, i64* %cloptr7587452, i64 0              ; &cloptr7587452[0]
  %f7587454 = ptrtoint void(i64,i64)* @lam7586808 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587454, i64* %eptr7587453                                             ; store fptr
  %y3i$_37second = ptrtoint i64* %cloptr7587452 to i64                               ; closure cast; i64* -> i64
  %cloptr7587455 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587456 = getelementptr inbounds i64, i64* %cloptr7587455, i64 0              ; &cloptr7587455[0]
  %f7587457 = ptrtoint void(i64,i64)* @lam7586804 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587457, i64* %eptr7587456                                             ; store fptr
  %VEj$_37third = ptrtoint i64* %cloptr7587455 to i64                                ; closure cast; i64* -> i64
  %cloptr7587458 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587459 = getelementptr inbounds i64, i64* %cloptr7587458, i64 0              ; &cloptr7587458[0]
  %f7587460 = ptrtoint void(i64,i64)* @lam7586800 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587460, i64* %eptr7587459                                             ; store fptr
  %dgJ$_37fourth = ptrtoint i64* %cloptr7587458 to i64                               ; closure cast; i64* -> i64
  %cloptr7587461 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587462 = getelementptr inbounds i64, i64* %cloptr7587461, i64 0              ; &cloptr7587461[0]
  %f7587463 = ptrtoint void(i64,i64)* @lam7586796 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587463, i64* %eptr7587462                                             ; store fptr
  %arg7581838 = ptrtoint i64* %cloptr7587461 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587464 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7587466 = getelementptr inbounds i64, i64* %cloptr7587464, i64 1              ; &eptr7587466[1]
  %eptr7587467 = getelementptr inbounds i64, i64* %cloptr7587464, i64 2              ; &eptr7587467[2]
  %eptr7587468 = getelementptr inbounds i64, i64* %cloptr7587464, i64 3              ; &eptr7587468[3]
  %eptr7587469 = getelementptr inbounds i64, i64* %cloptr7587464, i64 4              ; &eptr7587469[4]
  %eptr7587470 = getelementptr inbounds i64, i64* %cloptr7587464, i64 5              ; &eptr7587470[5]
  %eptr7587471 = getelementptr inbounds i64, i64* %cloptr7587464, i64 6              ; &eptr7587471[6]
  store i64 %ajE$_37foldl1, i64* %eptr7587466                                        ; *eptr7587466 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7587467                                        ; *eptr7587467 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7587468                                           ; *eptr7587468 = %m0I$_37_47
  store i64 %AhN$_37_62, i64* %eptr7587469                                           ; *eptr7587469 = %AhN$_37_62
  store i64 %wKy$_37length, i64* %eptr7587470                                        ; *eptr7587470 = %wKy$_37length
  store i64 %NdK$_37drop, i64* %eptr7587471                                          ; *eptr7587471 = %NdK$_37drop
  %eptr7587465 = getelementptr inbounds i64, i64* %cloptr7587464, i64 0              ; &cloptr7587464[0]
  %f7587472 = ptrtoint void(i64,i64)* @lam7586792 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587472, i64* %eptr7587465                                             ; store fptr
  %arg7581837 = ptrtoint i64* %cloptr7587464 to i64                                  ; closure cast; i64* -> i64
  %rva7585229 = add i64 0, 0                                                         ; quoted ()
  %rva7585228 = call i64 @prim_cons(i64 %arg7581837, i64 %rva7585229)                ; call prim_cons
  %cloptr7587473 = inttoptr i64 %arg7581838 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587474 = getelementptr inbounds i64, i64* %cloptr7587473, i64 0             ; &cloptr7587473[0]
  %f7587476 = load i64, i64* %i0ptr7587474, align 8                                  ; load; *i0ptr7587474
  %fptr7587475 = inttoptr i64 %f7587476 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587475(i64 %arg7581838, i64 %rva7585228)           ; tail call
  ret void
}


define void @lam7586967(i64 %env7586968, i64 %rvp7583688) {
  %cont7581217 = call i64 @prim_car(i64 %rvp7583688)                                 ; call prim_car
  %rvp7583687 = call i64 @prim_cdr(i64 %rvp7583688)                                  ; call prim_cdr
  %vSK$a = call i64 @prim_car(i64 %rvp7583687)                                       ; call prim_car
  %na7583622 = call i64 @prim_cdr(i64 %rvp7583687)                                   ; call prim_cdr
  %arg7581588 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %b4t$a = call i64 @prim_make_45vector(i64 %arg7581588, i64 %vSK$a)                 ; call prim_make_45vector
  %cloptr7587477 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587478 = getelementptr inbounds i64, i64* %cloptr7587477, i64 0              ; &cloptr7587477[0]
  %f7587479 = ptrtoint void(i64,i64)* @lam7586964 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587479, i64* %eptr7587478                                             ; store fptr
  %arg7581591 = ptrtoint i64* %cloptr7587477 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587480 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587482 = getelementptr inbounds i64, i64* %cloptr7587480, i64 1              ; &eptr7587482[1]
  %eptr7587483 = getelementptr inbounds i64, i64* %cloptr7587480, i64 2              ; &eptr7587483[2]
  store i64 %b4t$a, i64* %eptr7587482                                                ; *eptr7587482 = %b4t$a
  store i64 %cont7581217, i64* %eptr7587483                                          ; *eptr7587483 = %cont7581217
  %eptr7587481 = getelementptr inbounds i64, i64* %cloptr7587480, i64 0              ; &cloptr7587480[0]
  %f7587484 = ptrtoint void(i64,i64)* @lam7586960 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587484, i64* %eptr7587481                                             ; store fptr
  %arg7581590 = ptrtoint i64* %cloptr7587480 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587485 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587487 = getelementptr inbounds i64, i64* %cloptr7587485, i64 1              ; &eptr7587487[1]
  %eptr7587488 = getelementptr inbounds i64, i64* %cloptr7587485, i64 2              ; &eptr7587488[2]
  store i64 %b4t$a, i64* %eptr7587487                                                ; *eptr7587487 = %b4t$a
  store i64 %cont7581217, i64* %eptr7587488                                          ; *eptr7587488 = %cont7581217
  %eptr7587486 = getelementptr inbounds i64, i64* %cloptr7587485, i64 0              ; &cloptr7587485[0]
  %f7587489 = ptrtoint void(i64,i64)* @lam7586938 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587489, i64* %eptr7587486                                             ; store fptr
  %arg7581589 = ptrtoint i64* %cloptr7587485 to i64                                  ; closure cast; i64* -> i64
  %rva7583686 = add i64 0, 0                                                         ; quoted ()
  %rva7583685 = call i64 @prim_cons(i64 %arg7581589, i64 %rva7583686)                ; call prim_cons
  %rva7583684 = call i64 @prim_cons(i64 %arg7581590, i64 %rva7583685)                ; call prim_cons
  %cloptr7587490 = inttoptr i64 %arg7581591 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587491 = getelementptr inbounds i64, i64* %cloptr7587490, i64 0             ; &cloptr7587490[0]
  %f7587493 = load i64, i64* %i0ptr7587491, align 8                                  ; load; *i0ptr7587491
  %fptr7587492 = inttoptr i64 %f7587493 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587492(i64 %arg7581591, i64 %rva7583684)           ; tail call
  ret void
}


define void @lam7586964(i64 %env7586965, i64 %rvp7583629) {
  %cont7581223 = call i64 @prim_car(i64 %rvp7583629)                                 ; call prim_car
  %rvp7583628 = call i64 @prim_cdr(i64 %rvp7583629)                                  ; call prim_cdr
  %adn$k = call i64 @prim_car(i64 %rvp7583628)                                       ; call prim_car
  %na7583624 = call i64 @prim_cdr(i64 %rvp7583628)                                   ; call prim_cdr
  %arg7581593 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583627 = add i64 0, 0                                                         ; quoted ()
  %rva7583626 = call i64 @prim_cons(i64 %adn$k, i64 %rva7583627)                     ; call prim_cons
  %rva7583625 = call i64 @prim_cons(i64 %arg7581593, i64 %rva7583626)                ; call prim_cons
  %cloptr7587494 = inttoptr i64 %cont7581223 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587495 = getelementptr inbounds i64, i64* %cloptr7587494, i64 0             ; &cloptr7587494[0]
  %f7587497 = load i64, i64* %i0ptr7587495, align 8                                  ; load; *i0ptr7587495
  %fptr7587496 = inttoptr i64 %f7587497 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587496(i64 %cont7581223, i64 %rva7583625)          ; tail call
  ret void
}


define void @lam7586960(i64 %env7586961, i64 %rvp7583656) {
  %envptr7587498 = inttoptr i64 %env7586961 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587499 = getelementptr inbounds i64, i64* %envptr7587498, i64 2            ; &envptr7587498[2]
  %cont7581217 = load i64, i64* %envptr7587499, align 8                              ; load; *envptr7587499
  %envptr7587500 = inttoptr i64 %env7586961 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587501 = getelementptr inbounds i64, i64* %envptr7587500, i64 1            ; &envptr7587500[1]
  %b4t$a = load i64, i64* %envptr7587501, align 8                                    ; load; *envptr7587501
  %_957581218 = call i64 @prim_car(i64 %rvp7583656)                                  ; call prim_car
  %rvp7583655 = call i64 @prim_cdr(i64 %rvp7583656)                                  ; call prim_cdr
  %Ruw$cc = call i64 @prim_car(i64 %rvp7583655)                                      ; call prim_car
  %na7583631 = call i64 @prim_cdr(i64 %rvp7583655)                                   ; call prim_cdr
  %arg7581595 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581022 = call i64 @prim_vector_45ref(i64 %b4t$a, i64 %arg7581595)               ; call prim_vector_45ref
  %a7581023 = call i64 @prim_null_63(i64 %a7581022)                                  ; call prim_null_63
  %cmp7587502 = icmp eq i64 %a7581023, 15                                            ; false?
  br i1 %cmp7587502, label %else7587504, label %then7587503                          ; if

then7587503:
  %arg7581599 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7581598 = call i64 @const_init_true()                                          ; quoted #t
  %rva7583634 = add i64 0, 0                                                         ; quoted ()
  %rva7583633 = call i64 @prim_cons(i64 %arg7581598, i64 %rva7583634)                ; call prim_cons
  %rva7583632 = call i64 @prim_cons(i64 %arg7581599, i64 %rva7583633)                ; call prim_cons
  %cloptr7587505 = inttoptr i64 %cont7581217 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587506 = getelementptr inbounds i64, i64* %cloptr7587505, i64 0             ; &cloptr7587505[0]
  %f7587508 = load i64, i64* %i0ptr7587506, align 8                                  ; load; *i0ptr7587506
  %fptr7587507 = inttoptr i64 %f7587508 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587507(i64 %cont7581217, i64 %rva7583632)          ; tail call
  ret void

else7587504:
  %arg7581601 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581024 = call i64 @prim_vector_45ref(i64 %b4t$a, i64 %arg7581601)               ; call prim_vector_45ref
  %a7581025 = call i64 @prim_cons_63(i64 %a7581024)                                  ; call prim_cons_63
  %cmp7587509 = icmp eq i64 %a7581025, 15                                            ; false?
  br i1 %cmp7587509, label %else7587511, label %then7587510                          ; if

then7587510:
  %arg7581604 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581026 = call i64 @prim_vector_45ref(i64 %b4t$a, i64 %arg7581604)               ; call prim_vector_45ref
  %retprim7581222 = call i64 @prim_cdr(i64 %a7581026)                                ; call prim_cdr
  %cloptr7587512 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587514 = getelementptr inbounds i64, i64* %cloptr7587512, i64 1              ; &eptr7587514[1]
  %eptr7587515 = getelementptr inbounds i64, i64* %cloptr7587512, i64 2              ; &eptr7587515[2]
  %eptr7587516 = getelementptr inbounds i64, i64* %cloptr7587512, i64 3              ; &eptr7587516[3]
  store i64 %Ruw$cc, i64* %eptr7587514                                               ; *eptr7587514 = %Ruw$cc
  store i64 %b4t$a, i64* %eptr7587515                                                ; *eptr7587515 = %b4t$a
  store i64 %cont7581217, i64* %eptr7587516                                          ; *eptr7587516 = %cont7581217
  %eptr7587513 = getelementptr inbounds i64, i64* %cloptr7587512, i64 0              ; &cloptr7587512[0]
  %f7587517 = ptrtoint void(i64,i64)* @lam7586952 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587517, i64* %eptr7587513                                             ; store fptr
  %arg7581609 = ptrtoint i64* %cloptr7587512 to i64                                  ; closure cast; i64* -> i64
  %arg7581608 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583651 = add i64 0, 0                                                         ; quoted ()
  %rva7583650 = call i64 @prim_cons(i64 %retprim7581222, i64 %rva7583651)            ; call prim_cons
  %rva7583649 = call i64 @prim_cons(i64 %arg7581608, i64 %rva7583650)                ; call prim_cons
  %cloptr7587518 = inttoptr i64 %arg7581609 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587519 = getelementptr inbounds i64, i64* %cloptr7587518, i64 0             ; &cloptr7587518[0]
  %f7587521 = load i64, i64* %i0ptr7587519, align 8                                  ; load; *i0ptr7587519
  %fptr7587520 = inttoptr i64 %f7587521 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587520(i64 %arg7581609, i64 %rva7583649)           ; tail call
  ret void

else7587511:
  %arg7581623 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7581622 = call i64 @const_init_false()                                         ; quoted #f
  %rva7583654 = add i64 0, 0                                                         ; quoted ()
  %rva7583653 = call i64 @prim_cons(i64 %arg7581622, i64 %rva7583654)                ; call prim_cons
  %rva7583652 = call i64 @prim_cons(i64 %arg7581623, i64 %rva7583653)                ; call prim_cons
  %cloptr7587522 = inttoptr i64 %cont7581217 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587523 = getelementptr inbounds i64, i64* %cloptr7587522, i64 0             ; &cloptr7587522[0]
  %f7587525 = load i64, i64* %i0ptr7587523, align 8                                  ; load; *i0ptr7587523
  %fptr7587524 = inttoptr i64 %f7587525 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587524(i64 %cont7581217, i64 %rva7583652)          ; tail call
  ret void
}


define void @lam7586952(i64 %env7586953, i64 %rvp7583648) {
  %envptr7587526 = inttoptr i64 %env7586953 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587527 = getelementptr inbounds i64, i64* %envptr7587526, i64 3            ; &envptr7587526[3]
  %cont7581217 = load i64, i64* %envptr7587527, align 8                              ; load; *envptr7587527
  %envptr7587528 = inttoptr i64 %env7586953 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587529 = getelementptr inbounds i64, i64* %envptr7587528, i64 2            ; &envptr7587528[2]
  %b4t$a = load i64, i64* %envptr7587529, align 8                                    ; load; *envptr7587529
  %envptr7587530 = inttoptr i64 %env7586953 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587531 = getelementptr inbounds i64, i64* %envptr7587530, i64 1            ; &envptr7587530[1]
  %Ruw$cc = load i64, i64* %envptr7587531, align 8                                   ; load; *envptr7587531
  %_957581219 = call i64 @prim_car(i64 %rvp7583648)                                  ; call prim_car
  %rvp7583647 = call i64 @prim_cdr(i64 %rvp7583648)                                  ; call prim_cdr
  %gUk$b = call i64 @prim_car(i64 %rvp7583647)                                       ; call prim_car
  %na7583636 = call i64 @prim_cdr(i64 %rvp7583647)                                   ; call prim_cdr
  %arg7581610 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581027 = call i64 @prim_vector_45ref(i64 %b4t$a, i64 %arg7581610)               ; call prim_vector_45ref
  %a7581028 = call i64 @prim_cdr(i64 %a7581027)                                      ; call prim_cdr
  %arg7581614 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581221 = call i64 @prim_vector_45set_33(i64 %b4t$a, i64 %arg7581614, i64 %a7581028); call prim_vector_45set_33
  %cloptr7587532 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587534 = getelementptr inbounds i64, i64* %cloptr7587532, i64 1              ; &eptr7587534[1]
  %eptr7587535 = getelementptr inbounds i64, i64* %cloptr7587532, i64 2              ; &eptr7587535[2]
  store i64 %Ruw$cc, i64* %eptr7587534                                               ; *eptr7587534 = %Ruw$cc
  store i64 %cont7581217, i64* %eptr7587535                                          ; *eptr7587535 = %cont7581217
  %eptr7587533 = getelementptr inbounds i64, i64* %cloptr7587532, i64 0              ; &cloptr7587532[0]
  %f7587536 = ptrtoint void(i64,i64)* @lam7586948 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587536, i64* %eptr7587533                                             ; store fptr
  %arg7581618 = ptrtoint i64* %cloptr7587532 to i64                                  ; closure cast; i64* -> i64
  %arg7581617 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583646 = add i64 0, 0                                                         ; quoted ()
  %rva7583645 = call i64 @prim_cons(i64 %retprim7581221, i64 %rva7583646)            ; call prim_cons
  %rva7583644 = call i64 @prim_cons(i64 %arg7581617, i64 %rva7583645)                ; call prim_cons
  %cloptr7587537 = inttoptr i64 %arg7581618 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587538 = getelementptr inbounds i64, i64* %cloptr7587537, i64 0             ; &cloptr7587537[0]
  %f7587540 = load i64, i64* %i0ptr7587538, align 8                                  ; load; *i0ptr7587538
  %fptr7587539 = inttoptr i64 %f7587540 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587539(i64 %arg7581618, i64 %rva7583644)           ; tail call
  ret void
}


define void @lam7586948(i64 %env7586949, i64 %rvp7583643) {
  %envptr7587541 = inttoptr i64 %env7586949 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587542 = getelementptr inbounds i64, i64* %envptr7587541, i64 2            ; &envptr7587541[2]
  %cont7581217 = load i64, i64* %envptr7587542, align 8                              ; load; *envptr7587542
  %envptr7587543 = inttoptr i64 %env7586949 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587544 = getelementptr inbounds i64, i64* %envptr7587543, i64 1            ; &envptr7587543[1]
  %Ruw$cc = load i64, i64* %envptr7587544, align 8                                   ; load; *envptr7587544
  %_957581220 = call i64 @prim_car(i64 %rvp7583643)                                  ; call prim_car
  %rvp7583642 = call i64 @prim_cdr(i64 %rvp7583643)                                  ; call prim_cdr
  %BPv$_950 = call i64 @prim_car(i64 %rvp7583642)                                    ; call prim_car
  %na7583638 = call i64 @prim_cdr(i64 %rvp7583642)                                   ; call prim_cdr
  %rva7583641 = add i64 0, 0                                                         ; quoted ()
  %rva7583640 = call i64 @prim_cons(i64 %Ruw$cc, i64 %rva7583641)                    ; call prim_cons
  %rva7583639 = call i64 @prim_cons(i64 %cont7581217, i64 %rva7583640)               ; call prim_cons
  %cloptr7587545 = inttoptr i64 %Ruw$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr7587546 = getelementptr inbounds i64, i64* %cloptr7587545, i64 0             ; &cloptr7587545[0]
  %f7587548 = load i64, i64* %i0ptr7587546, align 8                                  ; load; *i0ptr7587546
  %fptr7587547 = inttoptr i64 %f7587548 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587547(i64 %Ruw$cc, i64 %rva7583639)               ; tail call
  ret void
}


define void @lam7586938(i64 %env7586939, i64 %rvp7583683) {
  %envptr7587549 = inttoptr i64 %env7586939 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587550 = getelementptr inbounds i64, i64* %envptr7587549, i64 2            ; &envptr7587549[2]
  %cont7581217 = load i64, i64* %envptr7587550, align 8                              ; load; *envptr7587550
  %envptr7587551 = inttoptr i64 %env7586939 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587552 = getelementptr inbounds i64, i64* %envptr7587551, i64 1            ; &envptr7587551[1]
  %b4t$a = load i64, i64* %envptr7587552, align 8                                    ; load; *envptr7587552
  %_957581218 = call i64 @prim_car(i64 %rvp7583683)                                  ; call prim_car
  %rvp7583682 = call i64 @prim_cdr(i64 %rvp7583683)                                  ; call prim_cdr
  %Ruw$cc = call i64 @prim_car(i64 %rvp7583682)                                      ; call prim_car
  %na7583658 = call i64 @prim_cdr(i64 %rvp7583682)                                   ; call prim_cdr
  %arg7581625 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581022 = call i64 @prim_vector_45ref(i64 %b4t$a, i64 %arg7581625)               ; call prim_vector_45ref
  %a7581023 = call i64 @prim_null_63(i64 %a7581022)                                  ; call prim_null_63
  %cmp7587553 = icmp eq i64 %a7581023, 15                                            ; false?
  br i1 %cmp7587553, label %else7587555, label %then7587554                          ; if

then7587554:
  %arg7581629 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7581628 = call i64 @const_init_true()                                          ; quoted #t
  %rva7583661 = add i64 0, 0                                                         ; quoted ()
  %rva7583660 = call i64 @prim_cons(i64 %arg7581628, i64 %rva7583661)                ; call prim_cons
  %rva7583659 = call i64 @prim_cons(i64 %arg7581629, i64 %rva7583660)                ; call prim_cons
  %cloptr7587556 = inttoptr i64 %cont7581217 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587557 = getelementptr inbounds i64, i64* %cloptr7587556, i64 0             ; &cloptr7587556[0]
  %f7587559 = load i64, i64* %i0ptr7587557, align 8                                  ; load; *i0ptr7587557
  %fptr7587558 = inttoptr i64 %f7587559 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587558(i64 %cont7581217, i64 %rva7583659)          ; tail call
  ret void

else7587555:
  %arg7581631 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581024 = call i64 @prim_vector_45ref(i64 %b4t$a, i64 %arg7581631)               ; call prim_vector_45ref
  %a7581025 = call i64 @prim_cons_63(i64 %a7581024)                                  ; call prim_cons_63
  %cmp7587560 = icmp eq i64 %a7581025, 15                                            ; false?
  br i1 %cmp7587560, label %else7587562, label %then7587561                          ; if

then7587561:
  %arg7581634 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581026 = call i64 @prim_vector_45ref(i64 %b4t$a, i64 %arg7581634)               ; call prim_vector_45ref
  %retprim7581222 = call i64 @prim_cdr(i64 %a7581026)                                ; call prim_cdr
  %cloptr7587563 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587565 = getelementptr inbounds i64, i64* %cloptr7587563, i64 1              ; &eptr7587565[1]
  %eptr7587566 = getelementptr inbounds i64, i64* %cloptr7587563, i64 2              ; &eptr7587566[2]
  %eptr7587567 = getelementptr inbounds i64, i64* %cloptr7587563, i64 3              ; &eptr7587567[3]
  store i64 %Ruw$cc, i64* %eptr7587565                                               ; *eptr7587565 = %Ruw$cc
  store i64 %b4t$a, i64* %eptr7587566                                                ; *eptr7587566 = %b4t$a
  store i64 %cont7581217, i64* %eptr7587567                                          ; *eptr7587567 = %cont7581217
  %eptr7587564 = getelementptr inbounds i64, i64* %cloptr7587563, i64 0              ; &cloptr7587563[0]
  %f7587568 = ptrtoint void(i64,i64)* @lam7586930 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587568, i64* %eptr7587564                                             ; store fptr
  %arg7581639 = ptrtoint i64* %cloptr7587563 to i64                                  ; closure cast; i64* -> i64
  %arg7581638 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583678 = add i64 0, 0                                                         ; quoted ()
  %rva7583677 = call i64 @prim_cons(i64 %retprim7581222, i64 %rva7583678)            ; call prim_cons
  %rva7583676 = call i64 @prim_cons(i64 %arg7581638, i64 %rva7583677)                ; call prim_cons
  %cloptr7587569 = inttoptr i64 %arg7581639 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587570 = getelementptr inbounds i64, i64* %cloptr7587569, i64 0             ; &cloptr7587569[0]
  %f7587572 = load i64, i64* %i0ptr7587570, align 8                                  ; load; *i0ptr7587570
  %fptr7587571 = inttoptr i64 %f7587572 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587571(i64 %arg7581639, i64 %rva7583676)           ; tail call
  ret void

else7587562:
  %arg7581653 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7581652 = call i64 @const_init_false()                                         ; quoted #f
  %rva7583681 = add i64 0, 0                                                         ; quoted ()
  %rva7583680 = call i64 @prim_cons(i64 %arg7581652, i64 %rva7583681)                ; call prim_cons
  %rva7583679 = call i64 @prim_cons(i64 %arg7581653, i64 %rva7583680)                ; call prim_cons
  %cloptr7587573 = inttoptr i64 %cont7581217 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587574 = getelementptr inbounds i64, i64* %cloptr7587573, i64 0             ; &cloptr7587573[0]
  %f7587576 = load i64, i64* %i0ptr7587574, align 8                                  ; load; *i0ptr7587574
  %fptr7587575 = inttoptr i64 %f7587576 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587575(i64 %cont7581217, i64 %rva7583679)          ; tail call
  ret void
}


define void @lam7586930(i64 %env7586931, i64 %rvp7583675) {
  %envptr7587577 = inttoptr i64 %env7586931 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587578 = getelementptr inbounds i64, i64* %envptr7587577, i64 3            ; &envptr7587577[3]
  %cont7581217 = load i64, i64* %envptr7587578, align 8                              ; load; *envptr7587578
  %envptr7587579 = inttoptr i64 %env7586931 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587580 = getelementptr inbounds i64, i64* %envptr7587579, i64 2            ; &envptr7587579[2]
  %b4t$a = load i64, i64* %envptr7587580, align 8                                    ; load; *envptr7587580
  %envptr7587581 = inttoptr i64 %env7586931 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587582 = getelementptr inbounds i64, i64* %envptr7587581, i64 1            ; &envptr7587581[1]
  %Ruw$cc = load i64, i64* %envptr7587582, align 8                                   ; load; *envptr7587582
  %_957581219 = call i64 @prim_car(i64 %rvp7583675)                                  ; call prim_car
  %rvp7583674 = call i64 @prim_cdr(i64 %rvp7583675)                                  ; call prim_cdr
  %gUk$b = call i64 @prim_car(i64 %rvp7583674)                                       ; call prim_car
  %na7583663 = call i64 @prim_cdr(i64 %rvp7583674)                                   ; call prim_cdr
  %arg7581640 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581027 = call i64 @prim_vector_45ref(i64 %b4t$a, i64 %arg7581640)               ; call prim_vector_45ref
  %a7581028 = call i64 @prim_cdr(i64 %a7581027)                                      ; call prim_cdr
  %arg7581644 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581221 = call i64 @prim_vector_45set_33(i64 %b4t$a, i64 %arg7581644, i64 %a7581028); call prim_vector_45set_33
  %cloptr7587583 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587585 = getelementptr inbounds i64, i64* %cloptr7587583, i64 1              ; &eptr7587585[1]
  %eptr7587586 = getelementptr inbounds i64, i64* %cloptr7587583, i64 2              ; &eptr7587586[2]
  store i64 %Ruw$cc, i64* %eptr7587585                                               ; *eptr7587585 = %Ruw$cc
  store i64 %cont7581217, i64* %eptr7587586                                          ; *eptr7587586 = %cont7581217
  %eptr7587584 = getelementptr inbounds i64, i64* %cloptr7587583, i64 0              ; &cloptr7587583[0]
  %f7587587 = ptrtoint void(i64,i64)* @lam7586926 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587587, i64* %eptr7587584                                             ; store fptr
  %arg7581648 = ptrtoint i64* %cloptr7587583 to i64                                  ; closure cast; i64* -> i64
  %arg7581647 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583673 = add i64 0, 0                                                         ; quoted ()
  %rva7583672 = call i64 @prim_cons(i64 %retprim7581221, i64 %rva7583673)            ; call prim_cons
  %rva7583671 = call i64 @prim_cons(i64 %arg7581647, i64 %rva7583672)                ; call prim_cons
  %cloptr7587588 = inttoptr i64 %arg7581648 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587589 = getelementptr inbounds i64, i64* %cloptr7587588, i64 0             ; &cloptr7587588[0]
  %f7587591 = load i64, i64* %i0ptr7587589, align 8                                  ; load; *i0ptr7587589
  %fptr7587590 = inttoptr i64 %f7587591 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587590(i64 %arg7581648, i64 %rva7583671)           ; tail call
  ret void
}


define void @lam7586926(i64 %env7586927, i64 %rvp7583670) {
  %envptr7587592 = inttoptr i64 %env7586927 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587593 = getelementptr inbounds i64, i64* %envptr7587592, i64 2            ; &envptr7587592[2]
  %cont7581217 = load i64, i64* %envptr7587593, align 8                              ; load; *envptr7587593
  %envptr7587594 = inttoptr i64 %env7586927 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587595 = getelementptr inbounds i64, i64* %envptr7587594, i64 1            ; &envptr7587594[1]
  %Ruw$cc = load i64, i64* %envptr7587595, align 8                                   ; load; *envptr7587595
  %_957581220 = call i64 @prim_car(i64 %rvp7583670)                                  ; call prim_car
  %rvp7583669 = call i64 @prim_cdr(i64 %rvp7583670)                                  ; call prim_cdr
  %BPv$_950 = call i64 @prim_car(i64 %rvp7583669)                                    ; call prim_car
  %na7583665 = call i64 @prim_cdr(i64 %rvp7583669)                                   ; call prim_cdr
  %rva7583668 = add i64 0, 0                                                         ; quoted ()
  %rva7583667 = call i64 @prim_cons(i64 %Ruw$cc, i64 %rva7583668)                    ; call prim_cons
  %rva7583666 = call i64 @prim_cons(i64 %cont7581217, i64 %rva7583667)               ; call prim_cons
  %cloptr7587596 = inttoptr i64 %Ruw$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr7587597 = getelementptr inbounds i64, i64* %cloptr7587596, i64 0             ; &cloptr7587596[0]
  %f7587599 = load i64, i64* %i0ptr7587597, align 8                                  ; load; *i0ptr7587597
  %fptr7587598 = inttoptr i64 %f7587599 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587598(i64 %Ruw$cc, i64 %rva7583666)               ; tail call
  ret void
}


define void @lam7586915(i64 %env7586916, i64 %rvp7583751) {
  %cont7581224 = call i64 @prim_car(i64 %rvp7583751)                                 ; call prim_car
  %rvp7583750 = call i64 @prim_cdr(i64 %rvp7583751)                                  ; call prim_cdr
  %ItG$lst = call i64 @prim_car(i64 %rvp7583750)                                     ; call prim_car
  %rvp7583749 = call i64 @prim_cdr(i64 %rvp7583750)                                  ; call prim_cdr
  %qqb$n = call i64 @prim_car(i64 %rvp7583749)                                       ; call prim_car
  %na7583690 = call i64 @prim_cdr(i64 %rvp7583749)                                   ; call prim_cdr
  %arg7581656 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %vn8$lst = call i64 @prim_make_45vector(i64 %arg7581656, i64 %ItG$lst)             ; call prim_make_45vector
  %arg7581658 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %hE1$n = call i64 @prim_make_45vector(i64 %arg7581658, i64 %qqb$n)                 ; call prim_make_45vector
  %cloptr7587600 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587601 = getelementptr inbounds i64, i64* %cloptr7587600, i64 0              ; &cloptr7587600[0]
  %f7587602 = ptrtoint void(i64,i64)* @lam7586911 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587602, i64* %eptr7587601                                             ; store fptr
  %arg7581661 = ptrtoint i64* %cloptr7587600 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587603 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587605 = getelementptr inbounds i64, i64* %cloptr7587603, i64 1              ; &eptr7587605[1]
  %eptr7587606 = getelementptr inbounds i64, i64* %cloptr7587603, i64 2              ; &eptr7587606[2]
  %eptr7587607 = getelementptr inbounds i64, i64* %cloptr7587603, i64 3              ; &eptr7587607[3]
  store i64 %cont7581224, i64* %eptr7587605                                          ; *eptr7587605 = %cont7581224
  store i64 %vn8$lst, i64* %eptr7587606                                              ; *eptr7587606 = %vn8$lst
  store i64 %hE1$n, i64* %eptr7587607                                                ; *eptr7587607 = %hE1$n
  %eptr7587604 = getelementptr inbounds i64, i64* %cloptr7587603, i64 0              ; &cloptr7587603[0]
  %f7587608 = ptrtoint void(i64,i64)* @lam7586908 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587608, i64* %eptr7587604                                             ; store fptr
  %arg7581660 = ptrtoint i64* %cloptr7587603 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587609 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587611 = getelementptr inbounds i64, i64* %cloptr7587609, i64 1              ; &eptr7587611[1]
  %eptr7587612 = getelementptr inbounds i64, i64* %cloptr7587609, i64 2              ; &eptr7587612[2]
  %eptr7587613 = getelementptr inbounds i64, i64* %cloptr7587609, i64 3              ; &eptr7587613[3]
  store i64 %cont7581224, i64* %eptr7587611                                          ; *eptr7587611 = %cont7581224
  store i64 %vn8$lst, i64* %eptr7587612                                              ; *eptr7587612 = %vn8$lst
  store i64 %hE1$n, i64* %eptr7587613                                                ; *eptr7587613 = %hE1$n
  %eptr7587610 = getelementptr inbounds i64, i64* %cloptr7587609, i64 0              ; &cloptr7587609[0]
  %f7587614 = ptrtoint void(i64,i64)* @lam7586887 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587614, i64* %eptr7587610                                             ; store fptr
  %arg7581659 = ptrtoint i64* %cloptr7587609 to i64                                  ; closure cast; i64* -> i64
  %rva7583748 = add i64 0, 0                                                         ; quoted ()
  %rva7583747 = call i64 @prim_cons(i64 %arg7581659, i64 %rva7583748)                ; call prim_cons
  %rva7583746 = call i64 @prim_cons(i64 %arg7581660, i64 %rva7583747)                ; call prim_cons
  %cloptr7587615 = inttoptr i64 %arg7581661 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587616 = getelementptr inbounds i64, i64* %cloptr7587615, i64 0             ; &cloptr7587615[0]
  %f7587618 = load i64, i64* %i0ptr7587616, align 8                                  ; load; *i0ptr7587616
  %fptr7587617 = inttoptr i64 %f7587618 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587617(i64 %arg7581661, i64 %rva7583746)           ; tail call
  ret void
}


define void @lam7586911(i64 %env7586912, i64 %rvp7583697) {
  %cont7581231 = call i64 @prim_car(i64 %rvp7583697)                                 ; call prim_car
  %rvp7583696 = call i64 @prim_cdr(i64 %rvp7583697)                                  ; call prim_cdr
  %jIo$u = call i64 @prim_car(i64 %rvp7583696)                                       ; call prim_car
  %na7583692 = call i64 @prim_cdr(i64 %rvp7583696)                                   ; call prim_cdr
  %rva7583695 = add i64 0, 0                                                         ; quoted ()
  %rva7583694 = call i64 @prim_cons(i64 %jIo$u, i64 %rva7583695)                     ; call prim_cons
  %rva7583693 = call i64 @prim_cons(i64 %cont7581231, i64 %rva7583694)               ; call prim_cons
  %cloptr7587619 = inttoptr i64 %jIo$u to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7587620 = getelementptr inbounds i64, i64* %cloptr7587619, i64 0             ; &cloptr7587619[0]
  %f7587622 = load i64, i64* %i0ptr7587620, align 8                                  ; load; *i0ptr7587620
  %fptr7587621 = inttoptr i64 %f7587622 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587621(i64 %jIo$u, i64 %rva7583693)                ; tail call
  ret void
}


define void @lam7586908(i64 %env7586909, i64 %rvp7583721) {
  %envptr7587623 = inttoptr i64 %env7586909 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587624 = getelementptr inbounds i64, i64* %envptr7587623, i64 3            ; &envptr7587623[3]
  %hE1$n = load i64, i64* %envptr7587624, align 8                                    ; load; *envptr7587624
  %envptr7587625 = inttoptr i64 %env7586909 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587626 = getelementptr inbounds i64, i64* %envptr7587625, i64 2            ; &envptr7587625[2]
  %vn8$lst = load i64, i64* %envptr7587626, align 8                                  ; load; *envptr7587626
  %envptr7587627 = inttoptr i64 %env7586909 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587628 = getelementptr inbounds i64, i64* %envptr7587627, i64 1            ; &envptr7587627[1]
  %cont7581224 = load i64, i64* %envptr7587628, align 8                              ; load; *envptr7587628
  %_957581225 = call i64 @prim_car(i64 %rvp7583721)                                  ; call prim_car
  %rvp7583720 = call i64 @prim_cdr(i64 %rvp7583721)                                  ; call prim_cdr
  %sFl$cc = call i64 @prim_car(i64 %rvp7583720)                                      ; call prim_car
  %na7583699 = call i64 @prim_cdr(i64 %rvp7583720)                                   ; call prim_cdr
  %arg7581665 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581029 = call i64 @prim_vector_45ref(i64 %hE1$n, i64 %arg7581665)               ; call prim_vector_45ref
  %arg7581668 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581030 = call i64 @prim__61(i64 %arg7581668, i64 %a7581029)                     ; call prim__61
  %cmp7587629 = icmp eq i64 %a7581030, 15                                            ; false?
  br i1 %cmp7587629, label %else7587631, label %then7587630                          ; if

then7587630:
  %arg7581669 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581226 = call i64 @prim_vector_45ref(i64 %vn8$lst, i64 %arg7581669)       ; call prim_vector_45ref
  %arg7581672 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583702 = add i64 0, 0                                                         ; quoted ()
  %rva7583701 = call i64 @prim_cons(i64 %retprim7581226, i64 %rva7583702)            ; call prim_cons
  %rva7583700 = call i64 @prim_cons(i64 %arg7581672, i64 %rva7583701)                ; call prim_cons
  %cloptr7587632 = inttoptr i64 %cont7581224 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587633 = getelementptr inbounds i64, i64* %cloptr7587632, i64 0             ; &cloptr7587632[0]
  %f7587635 = load i64, i64* %i0ptr7587633, align 8                                  ; load; *i0ptr7587633
  %fptr7587634 = inttoptr i64 %f7587635 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587634(i64 %cont7581224, i64 %rva7583700)          ; tail call
  ret void

else7587631:
  %arg7581674 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581031 = call i64 @prim_vector_45ref(i64 %vn8$lst, i64 %arg7581674)             ; call prim_vector_45ref
  %a7581032 = call i64 @prim_cdr(i64 %a7581031)                                      ; call prim_cdr
  %arg7581678 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581230 = call i64 @prim_vector_45set_33(i64 %vn8$lst, i64 %arg7581678, i64 %a7581032); call prim_vector_45set_33
  %cloptr7587636 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587638 = getelementptr inbounds i64, i64* %cloptr7587636, i64 1              ; &eptr7587638[1]
  %eptr7587639 = getelementptr inbounds i64, i64* %cloptr7587636, i64 2              ; &eptr7587639[2]
  %eptr7587640 = getelementptr inbounds i64, i64* %cloptr7587636, i64 3              ; &eptr7587640[3]
  store i64 %cont7581224, i64* %eptr7587638                                          ; *eptr7587638 = %cont7581224
  store i64 %sFl$cc, i64* %eptr7587639                                               ; *eptr7587639 = %sFl$cc
  store i64 %hE1$n, i64* %eptr7587640                                                ; *eptr7587640 = %hE1$n
  %eptr7587637 = getelementptr inbounds i64, i64* %cloptr7587636, i64 0              ; &cloptr7587636[0]
  %f7587641 = ptrtoint void(i64,i64)* @lam7586902 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587641, i64* %eptr7587637                                             ; store fptr
  %arg7581682 = ptrtoint i64* %cloptr7587636 to i64                                  ; closure cast; i64* -> i64
  %arg7581681 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583719 = add i64 0, 0                                                         ; quoted ()
  %rva7583718 = call i64 @prim_cons(i64 %retprim7581230, i64 %rva7583719)            ; call prim_cons
  %rva7583717 = call i64 @prim_cons(i64 %arg7581681, i64 %rva7583718)                ; call prim_cons
  %cloptr7587642 = inttoptr i64 %arg7581682 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587643 = getelementptr inbounds i64, i64* %cloptr7587642, i64 0             ; &cloptr7587642[0]
  %f7587645 = load i64, i64* %i0ptr7587643, align 8                                  ; load; *i0ptr7587643
  %fptr7587644 = inttoptr i64 %f7587645 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587644(i64 %arg7581682, i64 %rva7583717)           ; tail call
  ret void
}


define void @lam7586902(i64 %env7586903, i64 %rvp7583716) {
  %envptr7587646 = inttoptr i64 %env7586903 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587647 = getelementptr inbounds i64, i64* %envptr7587646, i64 3            ; &envptr7587646[3]
  %hE1$n = load i64, i64* %envptr7587647, align 8                                    ; load; *envptr7587647
  %envptr7587648 = inttoptr i64 %env7586903 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587649 = getelementptr inbounds i64, i64* %envptr7587648, i64 2            ; &envptr7587648[2]
  %sFl$cc = load i64, i64* %envptr7587649, align 8                                   ; load; *envptr7587649
  %envptr7587650 = inttoptr i64 %env7586903 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587651 = getelementptr inbounds i64, i64* %envptr7587650, i64 1            ; &envptr7587650[1]
  %cont7581224 = load i64, i64* %envptr7587651, align 8                              ; load; *envptr7587651
  %_957581227 = call i64 @prim_car(i64 %rvp7583716)                                  ; call prim_car
  %rvp7583715 = call i64 @prim_cdr(i64 %rvp7583716)                                  ; call prim_cdr
  %QVT$_950 = call i64 @prim_car(i64 %rvp7583715)                                    ; call prim_car
  %na7583704 = call i64 @prim_cdr(i64 %rvp7583715)                                   ; call prim_cdr
  %arg7581683 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581033 = call i64 @prim_vector_45ref(i64 %hE1$n, i64 %arg7581683)               ; call prim_vector_45ref
  %arg7581685 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a7581034 = call i64 @prim__45(i64 %a7581033, i64 %arg7581685)                     ; call prim__45
  %arg7581688 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581229 = call i64 @prim_vector_45set_33(i64 %hE1$n, i64 %arg7581688, i64 %a7581034); call prim_vector_45set_33
  %cloptr7587652 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587654 = getelementptr inbounds i64, i64* %cloptr7587652, i64 1              ; &eptr7587654[1]
  %eptr7587655 = getelementptr inbounds i64, i64* %cloptr7587652, i64 2              ; &eptr7587655[2]
  store i64 %cont7581224, i64* %eptr7587654                                          ; *eptr7587654 = %cont7581224
  store i64 %sFl$cc, i64* %eptr7587655                                               ; *eptr7587655 = %sFl$cc
  %eptr7587653 = getelementptr inbounds i64, i64* %cloptr7587652, i64 0              ; &cloptr7587652[0]
  %f7587656 = ptrtoint void(i64,i64)* @lam7586897 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587656, i64* %eptr7587653                                             ; store fptr
  %arg7581692 = ptrtoint i64* %cloptr7587652 to i64                                  ; closure cast; i64* -> i64
  %arg7581691 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583714 = add i64 0, 0                                                         ; quoted ()
  %rva7583713 = call i64 @prim_cons(i64 %retprim7581229, i64 %rva7583714)            ; call prim_cons
  %rva7583712 = call i64 @prim_cons(i64 %arg7581691, i64 %rva7583713)                ; call prim_cons
  %cloptr7587657 = inttoptr i64 %arg7581692 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587658 = getelementptr inbounds i64, i64* %cloptr7587657, i64 0             ; &cloptr7587657[0]
  %f7587660 = load i64, i64* %i0ptr7587658, align 8                                  ; load; *i0ptr7587658
  %fptr7587659 = inttoptr i64 %f7587660 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587659(i64 %arg7581692, i64 %rva7583712)           ; tail call
  ret void
}


define void @lam7586897(i64 %env7586898, i64 %rvp7583711) {
  %envptr7587661 = inttoptr i64 %env7586898 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587662 = getelementptr inbounds i64, i64* %envptr7587661, i64 2            ; &envptr7587661[2]
  %sFl$cc = load i64, i64* %envptr7587662, align 8                                   ; load; *envptr7587662
  %envptr7587663 = inttoptr i64 %env7586898 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587664 = getelementptr inbounds i64, i64* %envptr7587663, i64 1            ; &envptr7587663[1]
  %cont7581224 = load i64, i64* %envptr7587664, align 8                              ; load; *envptr7587664
  %_957581228 = call i64 @prim_car(i64 %rvp7583711)                                  ; call prim_car
  %rvp7583710 = call i64 @prim_cdr(i64 %rvp7583711)                                  ; call prim_cdr
  %GU8$_951 = call i64 @prim_car(i64 %rvp7583710)                                    ; call prim_car
  %na7583706 = call i64 @prim_cdr(i64 %rvp7583710)                                   ; call prim_cdr
  %rva7583709 = add i64 0, 0                                                         ; quoted ()
  %rva7583708 = call i64 @prim_cons(i64 %sFl$cc, i64 %rva7583709)                    ; call prim_cons
  %rva7583707 = call i64 @prim_cons(i64 %cont7581224, i64 %rva7583708)               ; call prim_cons
  %cloptr7587665 = inttoptr i64 %sFl$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr7587666 = getelementptr inbounds i64, i64* %cloptr7587665, i64 0             ; &cloptr7587665[0]
  %f7587668 = load i64, i64* %i0ptr7587666, align 8                                  ; load; *i0ptr7587666
  %fptr7587667 = inttoptr i64 %f7587668 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587667(i64 %sFl$cc, i64 %rva7583707)               ; tail call
  ret void
}


define void @lam7586887(i64 %env7586888, i64 %rvp7583745) {
  %envptr7587669 = inttoptr i64 %env7586888 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587670 = getelementptr inbounds i64, i64* %envptr7587669, i64 3            ; &envptr7587669[3]
  %hE1$n = load i64, i64* %envptr7587670, align 8                                    ; load; *envptr7587670
  %envptr7587671 = inttoptr i64 %env7586888 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587672 = getelementptr inbounds i64, i64* %envptr7587671, i64 2            ; &envptr7587671[2]
  %vn8$lst = load i64, i64* %envptr7587672, align 8                                  ; load; *envptr7587672
  %envptr7587673 = inttoptr i64 %env7586888 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587674 = getelementptr inbounds i64, i64* %envptr7587673, i64 1            ; &envptr7587673[1]
  %cont7581224 = load i64, i64* %envptr7587674, align 8                              ; load; *envptr7587674
  %_957581225 = call i64 @prim_car(i64 %rvp7583745)                                  ; call prim_car
  %rvp7583744 = call i64 @prim_cdr(i64 %rvp7583745)                                  ; call prim_cdr
  %sFl$cc = call i64 @prim_car(i64 %rvp7583744)                                      ; call prim_car
  %na7583723 = call i64 @prim_cdr(i64 %rvp7583744)                                   ; call prim_cdr
  %arg7581696 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581029 = call i64 @prim_vector_45ref(i64 %hE1$n, i64 %arg7581696)               ; call prim_vector_45ref
  %arg7581699 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581030 = call i64 @prim__61(i64 %arg7581699, i64 %a7581029)                     ; call prim__61
  %cmp7587675 = icmp eq i64 %a7581030, 15                                            ; false?
  br i1 %cmp7587675, label %else7587677, label %then7587676                          ; if

then7587676:
  %arg7581700 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581226 = call i64 @prim_vector_45ref(i64 %vn8$lst, i64 %arg7581700)       ; call prim_vector_45ref
  %arg7581703 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583726 = add i64 0, 0                                                         ; quoted ()
  %rva7583725 = call i64 @prim_cons(i64 %retprim7581226, i64 %rva7583726)            ; call prim_cons
  %rva7583724 = call i64 @prim_cons(i64 %arg7581703, i64 %rva7583725)                ; call prim_cons
  %cloptr7587678 = inttoptr i64 %cont7581224 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587679 = getelementptr inbounds i64, i64* %cloptr7587678, i64 0             ; &cloptr7587678[0]
  %f7587681 = load i64, i64* %i0ptr7587679, align 8                                  ; load; *i0ptr7587679
  %fptr7587680 = inttoptr i64 %f7587681 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587680(i64 %cont7581224, i64 %rva7583724)          ; tail call
  ret void

else7587677:
  %arg7581705 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581031 = call i64 @prim_vector_45ref(i64 %vn8$lst, i64 %arg7581705)             ; call prim_vector_45ref
  %a7581032 = call i64 @prim_cdr(i64 %a7581031)                                      ; call prim_cdr
  %arg7581709 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581230 = call i64 @prim_vector_45set_33(i64 %vn8$lst, i64 %arg7581709, i64 %a7581032); call prim_vector_45set_33
  %cloptr7587682 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587684 = getelementptr inbounds i64, i64* %cloptr7587682, i64 1              ; &eptr7587684[1]
  %eptr7587685 = getelementptr inbounds i64, i64* %cloptr7587682, i64 2              ; &eptr7587685[2]
  %eptr7587686 = getelementptr inbounds i64, i64* %cloptr7587682, i64 3              ; &eptr7587686[3]
  store i64 %cont7581224, i64* %eptr7587684                                          ; *eptr7587684 = %cont7581224
  store i64 %sFl$cc, i64* %eptr7587685                                               ; *eptr7587685 = %sFl$cc
  store i64 %hE1$n, i64* %eptr7587686                                                ; *eptr7587686 = %hE1$n
  %eptr7587683 = getelementptr inbounds i64, i64* %cloptr7587682, i64 0              ; &cloptr7587682[0]
  %f7587687 = ptrtoint void(i64,i64)* @lam7586881 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587687, i64* %eptr7587683                                             ; store fptr
  %arg7581713 = ptrtoint i64* %cloptr7587682 to i64                                  ; closure cast; i64* -> i64
  %arg7581712 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583743 = add i64 0, 0                                                         ; quoted ()
  %rva7583742 = call i64 @prim_cons(i64 %retprim7581230, i64 %rva7583743)            ; call prim_cons
  %rva7583741 = call i64 @prim_cons(i64 %arg7581712, i64 %rva7583742)                ; call prim_cons
  %cloptr7587688 = inttoptr i64 %arg7581713 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587689 = getelementptr inbounds i64, i64* %cloptr7587688, i64 0             ; &cloptr7587688[0]
  %f7587691 = load i64, i64* %i0ptr7587689, align 8                                  ; load; *i0ptr7587689
  %fptr7587690 = inttoptr i64 %f7587691 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587690(i64 %arg7581713, i64 %rva7583741)           ; tail call
  ret void
}


define void @lam7586881(i64 %env7586882, i64 %rvp7583740) {
  %envptr7587692 = inttoptr i64 %env7586882 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587693 = getelementptr inbounds i64, i64* %envptr7587692, i64 3            ; &envptr7587692[3]
  %hE1$n = load i64, i64* %envptr7587693, align 8                                    ; load; *envptr7587693
  %envptr7587694 = inttoptr i64 %env7586882 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587695 = getelementptr inbounds i64, i64* %envptr7587694, i64 2            ; &envptr7587694[2]
  %sFl$cc = load i64, i64* %envptr7587695, align 8                                   ; load; *envptr7587695
  %envptr7587696 = inttoptr i64 %env7586882 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587697 = getelementptr inbounds i64, i64* %envptr7587696, i64 1            ; &envptr7587696[1]
  %cont7581224 = load i64, i64* %envptr7587697, align 8                              ; load; *envptr7587697
  %_957581227 = call i64 @prim_car(i64 %rvp7583740)                                  ; call prim_car
  %rvp7583739 = call i64 @prim_cdr(i64 %rvp7583740)                                  ; call prim_cdr
  %QVT$_950 = call i64 @prim_car(i64 %rvp7583739)                                    ; call prim_car
  %na7583728 = call i64 @prim_cdr(i64 %rvp7583739)                                   ; call prim_cdr
  %arg7581714 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581033 = call i64 @prim_vector_45ref(i64 %hE1$n, i64 %arg7581714)               ; call prim_vector_45ref
  %arg7581716 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a7581034 = call i64 @prim__45(i64 %a7581033, i64 %arg7581716)                     ; call prim__45
  %arg7581719 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581229 = call i64 @prim_vector_45set_33(i64 %hE1$n, i64 %arg7581719, i64 %a7581034); call prim_vector_45set_33
  %cloptr7587698 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587700 = getelementptr inbounds i64, i64* %cloptr7587698, i64 1              ; &eptr7587700[1]
  %eptr7587701 = getelementptr inbounds i64, i64* %cloptr7587698, i64 2              ; &eptr7587701[2]
  store i64 %cont7581224, i64* %eptr7587700                                          ; *eptr7587700 = %cont7581224
  store i64 %sFl$cc, i64* %eptr7587701                                               ; *eptr7587701 = %sFl$cc
  %eptr7587699 = getelementptr inbounds i64, i64* %cloptr7587698, i64 0              ; &cloptr7587698[0]
  %f7587702 = ptrtoint void(i64,i64)* @lam7586876 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587702, i64* %eptr7587699                                             ; store fptr
  %arg7581723 = ptrtoint i64* %cloptr7587698 to i64                                  ; closure cast; i64* -> i64
  %arg7581722 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583738 = add i64 0, 0                                                         ; quoted ()
  %rva7583737 = call i64 @prim_cons(i64 %retprim7581229, i64 %rva7583738)            ; call prim_cons
  %rva7583736 = call i64 @prim_cons(i64 %arg7581722, i64 %rva7583737)                ; call prim_cons
  %cloptr7587703 = inttoptr i64 %arg7581723 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587704 = getelementptr inbounds i64, i64* %cloptr7587703, i64 0             ; &cloptr7587703[0]
  %f7587706 = load i64, i64* %i0ptr7587704, align 8                                  ; load; *i0ptr7587704
  %fptr7587705 = inttoptr i64 %f7587706 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587705(i64 %arg7581723, i64 %rva7583736)           ; tail call
  ret void
}


define void @lam7586876(i64 %env7586877, i64 %rvp7583735) {
  %envptr7587707 = inttoptr i64 %env7586877 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587708 = getelementptr inbounds i64, i64* %envptr7587707, i64 2            ; &envptr7587707[2]
  %sFl$cc = load i64, i64* %envptr7587708, align 8                                   ; load; *envptr7587708
  %envptr7587709 = inttoptr i64 %env7586877 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587710 = getelementptr inbounds i64, i64* %envptr7587709, i64 1            ; &envptr7587709[1]
  %cont7581224 = load i64, i64* %envptr7587710, align 8                              ; load; *envptr7587710
  %_957581228 = call i64 @prim_car(i64 %rvp7583735)                                  ; call prim_car
  %rvp7583734 = call i64 @prim_cdr(i64 %rvp7583735)                                  ; call prim_cdr
  %GU8$_951 = call i64 @prim_car(i64 %rvp7583734)                                    ; call prim_car
  %na7583730 = call i64 @prim_cdr(i64 %rvp7583734)                                   ; call prim_cdr
  %rva7583733 = add i64 0, 0                                                         ; quoted ()
  %rva7583732 = call i64 @prim_cons(i64 %sFl$cc, i64 %rva7583733)                    ; call prim_cons
  %rva7583731 = call i64 @prim_cons(i64 %cont7581224, i64 %rva7583732)               ; call prim_cons
  %cloptr7587711 = inttoptr i64 %sFl$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr7587712 = getelementptr inbounds i64, i64* %cloptr7587711, i64 0             ; &cloptr7587711[0]
  %f7587714 = load i64, i64* %i0ptr7587712, align 8                                  ; load; *i0ptr7587712
  %fptr7587713 = inttoptr i64 %f7587714 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587713(i64 %sFl$cc, i64 %rva7583731)               ; tail call
  ret void
}


define void @lam7586865(i64 %env7586866, i64 %rvp7583806) {
  %cont7581232 = call i64 @prim_car(i64 %rvp7583806)                                 ; call prim_car
  %rvp7583805 = call i64 @prim_cdr(i64 %rvp7583806)                                  ; call prim_cdr
  %oQP$v = call i64 @prim_car(i64 %rvp7583805)                                       ; call prim_car
  %rvp7583804 = call i64 @prim_cdr(i64 %rvp7583805)                                  ; call prim_cdr
  %Lfg$lst = call i64 @prim_car(i64 %rvp7583804)                                     ; call prim_car
  %na7583753 = call i64 @prim_cdr(i64 %rvp7583804)                                   ; call prim_cdr
  %arg7581728 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %dF5$lst = call i64 @prim_make_45vector(i64 %arg7581728, i64 %Lfg$lst)             ; call prim_make_45vector
  %cloptr7587715 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587716 = getelementptr inbounds i64, i64* %cloptr7587715, i64 0              ; &cloptr7587715[0]
  %f7587717 = ptrtoint void(i64,i64)* @lam7586862 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587717, i64* %eptr7587716                                             ; store fptr
  %arg7581731 = ptrtoint i64* %cloptr7587715 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587718 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587720 = getelementptr inbounds i64, i64* %cloptr7587718, i64 1              ; &eptr7587720[1]
  %eptr7587721 = getelementptr inbounds i64, i64* %cloptr7587718, i64 2              ; &eptr7587721[2]
  %eptr7587722 = getelementptr inbounds i64, i64* %cloptr7587718, i64 3              ; &eptr7587722[3]
  store i64 %cont7581232, i64* %eptr7587720                                          ; *eptr7587720 = %cont7581232
  store i64 %dF5$lst, i64* %eptr7587721                                              ; *eptr7587721 = %dF5$lst
  store i64 %oQP$v, i64* %eptr7587722                                                ; *eptr7587722 = %oQP$v
  %eptr7587719 = getelementptr inbounds i64, i64* %cloptr7587718, i64 0              ; &cloptr7587718[0]
  %f7587723 = ptrtoint void(i64,i64)* @lam7586859 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587723, i64* %eptr7587719                                             ; store fptr
  %arg7581730 = ptrtoint i64* %cloptr7587718 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587724 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587726 = getelementptr inbounds i64, i64* %cloptr7587724, i64 1              ; &eptr7587726[1]
  %eptr7587727 = getelementptr inbounds i64, i64* %cloptr7587724, i64 2              ; &eptr7587727[2]
  %eptr7587728 = getelementptr inbounds i64, i64* %cloptr7587724, i64 3              ; &eptr7587728[3]
  store i64 %cont7581232, i64* %eptr7587726                                          ; *eptr7587726 = %cont7581232
  store i64 %dF5$lst, i64* %eptr7587727                                              ; *eptr7587727 = %dF5$lst
  store i64 %oQP$v, i64* %eptr7587728                                                ; *eptr7587728 = %oQP$v
  %eptr7587725 = getelementptr inbounds i64, i64* %cloptr7587724, i64 0              ; &cloptr7587724[0]
  %f7587729 = ptrtoint void(i64,i64)* @lam7586842 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587729, i64* %eptr7587725                                             ; store fptr
  %arg7581729 = ptrtoint i64* %cloptr7587724 to i64                                  ; closure cast; i64* -> i64
  %rva7583803 = add i64 0, 0                                                         ; quoted ()
  %rva7583802 = call i64 @prim_cons(i64 %arg7581729, i64 %rva7583803)                ; call prim_cons
  %rva7583801 = call i64 @prim_cons(i64 %arg7581730, i64 %rva7583802)                ; call prim_cons
  %cloptr7587730 = inttoptr i64 %arg7581731 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587731 = getelementptr inbounds i64, i64* %cloptr7587730, i64 0             ; &cloptr7587730[0]
  %f7587733 = load i64, i64* %i0ptr7587731, align 8                                  ; load; *i0ptr7587731
  %fptr7587732 = inttoptr i64 %f7587733 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587732(i64 %arg7581731, i64 %rva7583801)           ; tail call
  ret void
}


define void @lam7586862(i64 %env7586863, i64 %rvp7583760) {
  %cont7581237 = call i64 @prim_car(i64 %rvp7583760)                                 ; call prim_car
  %rvp7583759 = call i64 @prim_cdr(i64 %rvp7583760)                                  ; call prim_cdr
  %Xid$u = call i64 @prim_car(i64 %rvp7583759)                                       ; call prim_car
  %na7583755 = call i64 @prim_cdr(i64 %rvp7583759)                                   ; call prim_cdr
  %rva7583758 = add i64 0, 0                                                         ; quoted ()
  %rva7583757 = call i64 @prim_cons(i64 %Xid$u, i64 %rva7583758)                     ; call prim_cons
  %rva7583756 = call i64 @prim_cons(i64 %cont7581237, i64 %rva7583757)               ; call prim_cons
  %cloptr7587734 = inttoptr i64 %Xid$u to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7587735 = getelementptr inbounds i64, i64* %cloptr7587734, i64 0             ; &cloptr7587734[0]
  %f7587737 = load i64, i64* %i0ptr7587735, align 8                                  ; load; *i0ptr7587735
  %fptr7587736 = inttoptr i64 %f7587737 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587736(i64 %Xid$u, i64 %rva7583756)                ; tail call
  ret void
}


define void @lam7586859(i64 %env7586860, i64 %rvp7583780) {
  %envptr7587738 = inttoptr i64 %env7586860 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587739 = getelementptr inbounds i64, i64* %envptr7587738, i64 3            ; &envptr7587738[3]
  %oQP$v = load i64, i64* %envptr7587739, align 8                                    ; load; *envptr7587739
  %envptr7587740 = inttoptr i64 %env7586860 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587741 = getelementptr inbounds i64, i64* %envptr7587740, i64 2            ; &envptr7587740[2]
  %dF5$lst = load i64, i64* %envptr7587741, align 8                                  ; load; *envptr7587741
  %envptr7587742 = inttoptr i64 %env7586860 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587743 = getelementptr inbounds i64, i64* %envptr7587742, i64 1            ; &envptr7587742[1]
  %cont7581232 = load i64, i64* %envptr7587743, align 8                              ; load; *envptr7587743
  %_957581233 = call i64 @prim_car(i64 %rvp7583780)                                  ; call prim_car
  %rvp7583779 = call i64 @prim_cdr(i64 %rvp7583780)                                  ; call prim_cdr
  %tGt$cc = call i64 @prim_car(i64 %rvp7583779)                                      ; call prim_car
  %na7583762 = call i64 @prim_cdr(i64 %rvp7583779)                                   ; call prim_cdr
  %arg7581735 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581035 = call i64 @prim_vector_45ref(i64 %dF5$lst, i64 %arg7581735)             ; call prim_vector_45ref
  %a7581036 = call i64 @prim_null_63(i64 %a7581035)                                  ; call prim_null_63
  %cmp7587744 = icmp eq i64 %a7581036, 15                                            ; false?
  br i1 %cmp7587744, label %else7587746, label %then7587745                          ; if

then7587745:
  %arg7581739 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7581738 = call i64 @const_init_false()                                         ; quoted #f
  %rva7583765 = add i64 0, 0                                                         ; quoted ()
  %rva7583764 = call i64 @prim_cons(i64 %arg7581738, i64 %rva7583765)                ; call prim_cons
  %rva7583763 = call i64 @prim_cons(i64 %arg7581739, i64 %rva7583764)                ; call prim_cons
  %cloptr7587747 = inttoptr i64 %cont7581232 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587748 = getelementptr inbounds i64, i64* %cloptr7587747, i64 0             ; &cloptr7587747[0]
  %f7587750 = load i64, i64* %i0ptr7587748, align 8                                  ; load; *i0ptr7587748
  %fptr7587749 = inttoptr i64 %f7587750 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587749(i64 %cont7581232, i64 %rva7583763)          ; tail call
  ret void

else7587746:
  %arg7581741 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581037 = call i64 @prim_vector_45ref(i64 %dF5$lst, i64 %arg7581741)             ; call prim_vector_45ref
  %a7581038 = call i64 @prim_car(i64 %a7581037)                                      ; call prim_car
  %a7581039 = call i64 @prim_eqv_63(i64 %a7581038, i64 %oQP$v)                       ; call prim_eqv_63
  %cmp7587751 = icmp eq i64 %a7581039, 15                                            ; false?
  br i1 %cmp7587751, label %else7587753, label %then7587752                          ; if

then7587752:
  %arg7581746 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581234 = call i64 @prim_vector_45ref(i64 %dF5$lst, i64 %arg7581746)       ; call prim_vector_45ref
  %arg7581749 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583768 = add i64 0, 0                                                         ; quoted ()
  %rva7583767 = call i64 @prim_cons(i64 %retprim7581234, i64 %rva7583768)            ; call prim_cons
  %rva7583766 = call i64 @prim_cons(i64 %arg7581749, i64 %rva7583767)                ; call prim_cons
  %cloptr7587754 = inttoptr i64 %cont7581232 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587755 = getelementptr inbounds i64, i64* %cloptr7587754, i64 0             ; &cloptr7587754[0]
  %f7587757 = load i64, i64* %i0ptr7587755, align 8                                  ; load; *i0ptr7587755
  %fptr7587756 = inttoptr i64 %f7587757 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587756(i64 %cont7581232, i64 %rva7583766)          ; tail call
  ret void

else7587753:
  %arg7581751 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581040 = call i64 @prim_vector_45ref(i64 %dF5$lst, i64 %arg7581751)             ; call prim_vector_45ref
  %a7581041 = call i64 @prim_cdr(i64 %a7581040)                                      ; call prim_cdr
  %arg7581755 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581236 = call i64 @prim_vector_45set_33(i64 %dF5$lst, i64 %arg7581755, i64 %a7581041); call prim_vector_45set_33
  %cloptr7587758 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587760 = getelementptr inbounds i64, i64* %cloptr7587758, i64 1              ; &eptr7587760[1]
  %eptr7587761 = getelementptr inbounds i64, i64* %cloptr7587758, i64 2              ; &eptr7587761[2]
  store i64 %cont7581232, i64* %eptr7587760                                          ; *eptr7587760 = %cont7581232
  store i64 %tGt$cc, i64* %eptr7587761                                               ; *eptr7587761 = %tGt$cc
  %eptr7587759 = getelementptr inbounds i64, i64* %cloptr7587758, i64 0              ; &cloptr7587758[0]
  %f7587762 = ptrtoint void(i64,i64)* @lam7586853 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587762, i64* %eptr7587759                                             ; store fptr
  %arg7581759 = ptrtoint i64* %cloptr7587758 to i64                                  ; closure cast; i64* -> i64
  %arg7581758 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583778 = add i64 0, 0                                                         ; quoted ()
  %rva7583777 = call i64 @prim_cons(i64 %retprim7581236, i64 %rva7583778)            ; call prim_cons
  %rva7583776 = call i64 @prim_cons(i64 %arg7581758, i64 %rva7583777)                ; call prim_cons
  %cloptr7587763 = inttoptr i64 %arg7581759 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587764 = getelementptr inbounds i64, i64* %cloptr7587763, i64 0             ; &cloptr7587763[0]
  %f7587766 = load i64, i64* %i0ptr7587764, align 8                                  ; load; *i0ptr7587764
  %fptr7587765 = inttoptr i64 %f7587766 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587765(i64 %arg7581759, i64 %rva7583776)           ; tail call
  ret void
}


define void @lam7586853(i64 %env7586854, i64 %rvp7583775) {
  %envptr7587767 = inttoptr i64 %env7586854 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587768 = getelementptr inbounds i64, i64* %envptr7587767, i64 2            ; &envptr7587767[2]
  %tGt$cc = load i64, i64* %envptr7587768, align 8                                   ; load; *envptr7587768
  %envptr7587769 = inttoptr i64 %env7586854 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587770 = getelementptr inbounds i64, i64* %envptr7587769, i64 1            ; &envptr7587769[1]
  %cont7581232 = load i64, i64* %envptr7587770, align 8                              ; load; *envptr7587770
  %_957581235 = call i64 @prim_car(i64 %rvp7583775)                                  ; call prim_car
  %rvp7583774 = call i64 @prim_cdr(i64 %rvp7583775)                                  ; call prim_cdr
  %jJ6$_950 = call i64 @prim_car(i64 %rvp7583774)                                    ; call prim_car
  %na7583770 = call i64 @prim_cdr(i64 %rvp7583774)                                   ; call prim_cdr
  %rva7583773 = add i64 0, 0                                                         ; quoted ()
  %rva7583772 = call i64 @prim_cons(i64 %tGt$cc, i64 %rva7583773)                    ; call prim_cons
  %rva7583771 = call i64 @prim_cons(i64 %cont7581232, i64 %rva7583772)               ; call prim_cons
  %cloptr7587771 = inttoptr i64 %tGt$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr7587772 = getelementptr inbounds i64, i64* %cloptr7587771, i64 0             ; &cloptr7587771[0]
  %f7587774 = load i64, i64* %i0ptr7587772, align 8                                  ; load; *i0ptr7587772
  %fptr7587773 = inttoptr i64 %f7587774 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587773(i64 %tGt$cc, i64 %rva7583771)               ; tail call
  ret void
}


define void @lam7586842(i64 %env7586843, i64 %rvp7583800) {
  %envptr7587775 = inttoptr i64 %env7586843 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587776 = getelementptr inbounds i64, i64* %envptr7587775, i64 3            ; &envptr7587775[3]
  %oQP$v = load i64, i64* %envptr7587776, align 8                                    ; load; *envptr7587776
  %envptr7587777 = inttoptr i64 %env7586843 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587778 = getelementptr inbounds i64, i64* %envptr7587777, i64 2            ; &envptr7587777[2]
  %dF5$lst = load i64, i64* %envptr7587778, align 8                                  ; load; *envptr7587778
  %envptr7587779 = inttoptr i64 %env7586843 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587780 = getelementptr inbounds i64, i64* %envptr7587779, i64 1            ; &envptr7587779[1]
  %cont7581232 = load i64, i64* %envptr7587780, align 8                              ; load; *envptr7587780
  %_957581233 = call i64 @prim_car(i64 %rvp7583800)                                  ; call prim_car
  %rvp7583799 = call i64 @prim_cdr(i64 %rvp7583800)                                  ; call prim_cdr
  %tGt$cc = call i64 @prim_car(i64 %rvp7583799)                                      ; call prim_car
  %na7583782 = call i64 @prim_cdr(i64 %rvp7583799)                                   ; call prim_cdr
  %arg7581763 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581035 = call i64 @prim_vector_45ref(i64 %dF5$lst, i64 %arg7581763)             ; call prim_vector_45ref
  %a7581036 = call i64 @prim_null_63(i64 %a7581035)                                  ; call prim_null_63
  %cmp7587781 = icmp eq i64 %a7581036, 15                                            ; false?
  br i1 %cmp7587781, label %else7587783, label %then7587782                          ; if

then7587782:
  %arg7581767 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7581766 = call i64 @const_init_false()                                         ; quoted #f
  %rva7583785 = add i64 0, 0                                                         ; quoted ()
  %rva7583784 = call i64 @prim_cons(i64 %arg7581766, i64 %rva7583785)                ; call prim_cons
  %rva7583783 = call i64 @prim_cons(i64 %arg7581767, i64 %rva7583784)                ; call prim_cons
  %cloptr7587784 = inttoptr i64 %cont7581232 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587785 = getelementptr inbounds i64, i64* %cloptr7587784, i64 0             ; &cloptr7587784[0]
  %f7587787 = load i64, i64* %i0ptr7587785, align 8                                  ; load; *i0ptr7587785
  %fptr7587786 = inttoptr i64 %f7587787 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587786(i64 %cont7581232, i64 %rva7583783)          ; tail call
  ret void

else7587783:
  %arg7581769 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581037 = call i64 @prim_vector_45ref(i64 %dF5$lst, i64 %arg7581769)             ; call prim_vector_45ref
  %a7581038 = call i64 @prim_car(i64 %a7581037)                                      ; call prim_car
  %a7581039 = call i64 @prim_eqv_63(i64 %a7581038, i64 %oQP$v)                       ; call prim_eqv_63
  %cmp7587788 = icmp eq i64 %a7581039, 15                                            ; false?
  br i1 %cmp7587788, label %else7587790, label %then7587789                          ; if

then7587789:
  %arg7581774 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581234 = call i64 @prim_vector_45ref(i64 %dF5$lst, i64 %arg7581774)       ; call prim_vector_45ref
  %arg7581777 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583788 = add i64 0, 0                                                         ; quoted ()
  %rva7583787 = call i64 @prim_cons(i64 %retprim7581234, i64 %rva7583788)            ; call prim_cons
  %rva7583786 = call i64 @prim_cons(i64 %arg7581777, i64 %rva7583787)                ; call prim_cons
  %cloptr7587791 = inttoptr i64 %cont7581232 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587792 = getelementptr inbounds i64, i64* %cloptr7587791, i64 0             ; &cloptr7587791[0]
  %f7587794 = load i64, i64* %i0ptr7587792, align 8                                  ; load; *i0ptr7587792
  %fptr7587793 = inttoptr i64 %f7587794 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587793(i64 %cont7581232, i64 %rva7583786)          ; tail call
  ret void

else7587790:
  %arg7581779 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581040 = call i64 @prim_vector_45ref(i64 %dF5$lst, i64 %arg7581779)             ; call prim_vector_45ref
  %a7581041 = call i64 @prim_cdr(i64 %a7581040)                                      ; call prim_cdr
  %arg7581783 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581236 = call i64 @prim_vector_45set_33(i64 %dF5$lst, i64 %arg7581783, i64 %a7581041); call prim_vector_45set_33
  %cloptr7587795 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587797 = getelementptr inbounds i64, i64* %cloptr7587795, i64 1              ; &eptr7587797[1]
  %eptr7587798 = getelementptr inbounds i64, i64* %cloptr7587795, i64 2              ; &eptr7587798[2]
  store i64 %cont7581232, i64* %eptr7587797                                          ; *eptr7587797 = %cont7581232
  store i64 %tGt$cc, i64* %eptr7587798                                               ; *eptr7587798 = %tGt$cc
  %eptr7587796 = getelementptr inbounds i64, i64* %cloptr7587795, i64 0              ; &cloptr7587795[0]
  %f7587799 = ptrtoint void(i64,i64)* @lam7586836 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587799, i64* %eptr7587796                                             ; store fptr
  %arg7581787 = ptrtoint i64* %cloptr7587795 to i64                                  ; closure cast; i64* -> i64
  %arg7581786 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583798 = add i64 0, 0                                                         ; quoted ()
  %rva7583797 = call i64 @prim_cons(i64 %retprim7581236, i64 %rva7583798)            ; call prim_cons
  %rva7583796 = call i64 @prim_cons(i64 %arg7581786, i64 %rva7583797)                ; call prim_cons
  %cloptr7587800 = inttoptr i64 %arg7581787 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587801 = getelementptr inbounds i64, i64* %cloptr7587800, i64 0             ; &cloptr7587800[0]
  %f7587803 = load i64, i64* %i0ptr7587801, align 8                                  ; load; *i0ptr7587801
  %fptr7587802 = inttoptr i64 %f7587803 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587802(i64 %arg7581787, i64 %rva7583796)           ; tail call
  ret void
}


define void @lam7586836(i64 %env7586837, i64 %rvp7583795) {
  %envptr7587804 = inttoptr i64 %env7586837 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587805 = getelementptr inbounds i64, i64* %envptr7587804, i64 2            ; &envptr7587804[2]
  %tGt$cc = load i64, i64* %envptr7587805, align 8                                   ; load; *envptr7587805
  %envptr7587806 = inttoptr i64 %env7586837 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587807 = getelementptr inbounds i64, i64* %envptr7587806, i64 1            ; &envptr7587806[1]
  %cont7581232 = load i64, i64* %envptr7587807, align 8                              ; load; *envptr7587807
  %_957581235 = call i64 @prim_car(i64 %rvp7583795)                                  ; call prim_car
  %rvp7583794 = call i64 @prim_cdr(i64 %rvp7583795)                                  ; call prim_cdr
  %jJ6$_950 = call i64 @prim_car(i64 %rvp7583794)                                    ; call prim_car
  %na7583790 = call i64 @prim_cdr(i64 %rvp7583794)                                   ; call prim_cdr
  %rva7583793 = add i64 0, 0                                                         ; quoted ()
  %rva7583792 = call i64 @prim_cons(i64 %tGt$cc, i64 %rva7583793)                    ; call prim_cons
  %rva7583791 = call i64 @prim_cons(i64 %cont7581232, i64 %rva7583792)               ; call prim_cons
  %cloptr7587808 = inttoptr i64 %tGt$cc to i64*                                      ; closure/env cast; i64 -> i64*
  %i0ptr7587809 = getelementptr inbounds i64, i64* %cloptr7587808, i64 0             ; &cloptr7587808[0]
  %f7587811 = load i64, i64* %i0ptr7587809, align 8                                  ; load; *i0ptr7587809
  %fptr7587810 = inttoptr i64 %f7587811 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587810(i64 %tGt$cc, i64 %rva7583791)               ; tail call
  ret void
}


define void @lam7586824(i64 %env7586825, i64 %Y6m$args7581239) {
  %envptr7587812 = inttoptr i64 %env7586825 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587813 = getelementptr inbounds i64, i64* %envptr7587812, i64 1            ; &envptr7587812[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7587813, align 8                            ; load; *envptr7587813
  %cont7581238 = call i64 @prim_car(i64 %Y6m$args7581239)                            ; call prim_car
  %Y6m$args = call i64 @prim_cdr(i64 %Y6m$args7581239)                               ; call prim_cdr
  %a7581042 = call i64 @prim_null_63(i64 %Y6m$args)                                  ; call prim_null_63
  %cmp7587814 = icmp eq i64 %a7581042, 15                                            ; false?
  br i1 %cmp7587814, label %else7587816, label %then7587815                          ; if

then7587815:
  %arg7581795 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7581794 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva7583809 = add i64 0, 0                                                         ; quoted ()
  %rva7583808 = call i64 @prim_cons(i64 %arg7581794, i64 %rva7583809)                ; call prim_cons
  %rva7583807 = call i64 @prim_cons(i64 %arg7581795, i64 %rva7583808)                ; call prim_cons
  %cloptr7587817 = inttoptr i64 %cont7581238 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587818 = getelementptr inbounds i64, i64* %cloptr7587817, i64 0             ; &cloptr7587817[0]
  %f7587820 = load i64, i64* %i0ptr7587818, align 8                                  ; load; *i0ptr7587818
  %fptr7587819 = inttoptr i64 %f7587820 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587819(i64 %cont7581238, i64 %rva7583807)          ; tail call
  ret void

else7587816:
  %a7581043 = call i64 @prim_cdr(i64 %Y6m$args)                                      ; call prim_cdr
  %a7581044 = call i64 @prim_null_63(i64 %a7581043)                                  ; call prim_null_63
  %cmp7587821 = icmp eq i64 %a7581044, 15                                            ; false?
  br i1 %cmp7587821, label %else7587823, label %then7587822                          ; if

then7587822:
  %retprim7581240 = call i64 @prim_car(i64 %Y6m$args)                                ; call prim_car
  %arg7581801 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583812 = add i64 0, 0                                                         ; quoted ()
  %rva7583811 = call i64 @prim_cons(i64 %retprim7581240, i64 %rva7583812)            ; call prim_cons
  %rva7583810 = call i64 @prim_cons(i64 %arg7581801, i64 %rva7583811)                ; call prim_cons
  %cloptr7587824 = inttoptr i64 %cont7581238 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587825 = getelementptr inbounds i64, i64* %cloptr7587824, i64 0             ; &cloptr7587824[0]
  %f7587827 = load i64, i64* %i0ptr7587825, align 8                                  ; load; *i0ptr7587825
  %fptr7587826 = inttoptr i64 %f7587827 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587826(i64 %cont7581238, i64 %rva7583810)          ; tail call
  ret void

else7587823:
  %a7581045 = call i64 @prim_car(i64 %Y6m$args)                                      ; call prim_car
  %a7581046 = call i64 @prim_cdr(i64 %Y6m$args)                                      ; call prim_cdr
  %cloptr7587828 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587829 = getelementptr inbounds i64, i64* %cloptr7587828, i64 0              ; &cloptr7587828[0]
  %f7587830 = ptrtoint void(i64,i64)* @lam7586822 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587830, i64* %eptr7587829                                             ; store fptr
  %arg7581807 = ptrtoint i64* %cloptr7587828 to i64                                  ; closure cast; i64* -> i64
  %rva7583825 = add i64 0, 0                                                         ; quoted ()
  %rva7583824 = call i64 @prim_cons(i64 %a7581046, i64 %rva7583825)                  ; call prim_cons
  %rva7583823 = call i64 @prim_cons(i64 %a7581045, i64 %rva7583824)                  ; call prim_cons
  %rva7583822 = call i64 @prim_cons(i64 %arg7581807, i64 %rva7583823)                ; call prim_cons
  %rva7583821 = call i64 @prim_cons(i64 %cont7581238, i64 %rva7583822)               ; call prim_cons
  %cloptr7587831 = inttoptr i64 %ajE$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7587832 = getelementptr inbounds i64, i64* %cloptr7587831, i64 0             ; &cloptr7587831[0]
  %f7587834 = load i64, i64* %i0ptr7587832, align 8                                  ; load; *i0ptr7587832
  %fptr7587833 = inttoptr i64 %f7587834 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587833(i64 %ajE$_37foldl1, i64 %rva7583821)        ; tail call
  ret void
}


define void @lam7586822(i64 %env7586823, i64 %rvp7583820) {
  %cont7581241 = call i64 @prim_car(i64 %rvp7583820)                                 ; call prim_car
  %rvp7583819 = call i64 @prim_cdr(i64 %rvp7583820)                                  ; call prim_cdr
  %I3J$n = call i64 @prim_car(i64 %rvp7583819)                                       ; call prim_car
  %rvp7583818 = call i64 @prim_cdr(i64 %rvp7583819)                                  ; call prim_cdr
  %rBM$v = call i64 @prim_car(i64 %rvp7583818)                                       ; call prim_car
  %na7583814 = call i64 @prim_cdr(i64 %rvp7583818)                                   ; call prim_cdr
  %retprim7581242 = call i64 @prim__47(i64 %rBM$v, i64 %I3J$n)                       ; call prim__47
  %arg7581813 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583817 = add i64 0, 0                                                         ; quoted ()
  %rva7583816 = call i64 @prim_cons(i64 %retprim7581242, i64 %rva7583817)            ; call prim_cons
  %rva7583815 = call i64 @prim_cons(i64 %arg7581813, i64 %rva7583816)                ; call prim_cons
  %cloptr7587835 = inttoptr i64 %cont7581241 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587836 = getelementptr inbounds i64, i64* %cloptr7587835, i64 0             ; &cloptr7587835[0]
  %f7587838 = load i64, i64* %i0ptr7587836, align 8                                  ; load; *i0ptr7587836
  %fptr7587837 = inttoptr i64 %f7587838 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587837(i64 %cont7581241, i64 %rva7583815)          ; tail call
  ret void
}


define void @lam7586812(i64 %env7586813, i64 %rvp7583832) {
  %cont7581243 = call i64 @prim_car(i64 %rvp7583832)                                 ; call prim_car
  %rvp7583831 = call i64 @prim_cdr(i64 %rvp7583832)                                  ; call prim_cdr
  %bia$x = call i64 @prim_car(i64 %rvp7583831)                                       ; call prim_car
  %na7583827 = call i64 @prim_cdr(i64 %rvp7583831)                                   ; call prim_cdr
  %retprim7581244 = call i64 @prim_car(i64 %bia$x)                                   ; call prim_car
  %arg7581817 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583830 = add i64 0, 0                                                         ; quoted ()
  %rva7583829 = call i64 @prim_cons(i64 %retprim7581244, i64 %rva7583830)            ; call prim_cons
  %rva7583828 = call i64 @prim_cons(i64 %arg7581817, i64 %rva7583829)                ; call prim_cons
  %cloptr7587839 = inttoptr i64 %cont7581243 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587840 = getelementptr inbounds i64, i64* %cloptr7587839, i64 0             ; &cloptr7587839[0]
  %f7587842 = load i64, i64* %i0ptr7587840, align 8                                  ; load; *i0ptr7587840
  %fptr7587841 = inttoptr i64 %f7587842 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587841(i64 %cont7581243, i64 %rva7583828)          ; tail call
  ret void
}


define void @lam7586808(i64 %env7586809, i64 %rvp7583839) {
  %cont7581245 = call i64 @prim_car(i64 %rvp7583839)                                 ; call prim_car
  %rvp7583838 = call i64 @prim_cdr(i64 %rvp7583839)                                  ; call prim_cdr
  %j5E$x = call i64 @prim_car(i64 %rvp7583838)                                       ; call prim_car
  %na7583834 = call i64 @prim_cdr(i64 %rvp7583838)                                   ; call prim_cdr
  %a7581047 = call i64 @prim_cdr(i64 %j5E$x)                                         ; call prim_cdr
  %retprim7581246 = call i64 @prim_car(i64 %a7581047)                                ; call prim_car
  %arg7581822 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583837 = add i64 0, 0                                                         ; quoted ()
  %rva7583836 = call i64 @prim_cons(i64 %retprim7581246, i64 %rva7583837)            ; call prim_cons
  %rva7583835 = call i64 @prim_cons(i64 %arg7581822, i64 %rva7583836)                ; call prim_cons
  %cloptr7587843 = inttoptr i64 %cont7581245 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587844 = getelementptr inbounds i64, i64* %cloptr7587843, i64 0             ; &cloptr7587843[0]
  %f7587846 = load i64, i64* %i0ptr7587844, align 8                                  ; load; *i0ptr7587844
  %fptr7587845 = inttoptr i64 %f7587846 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587845(i64 %cont7581245, i64 %rva7583835)          ; tail call
  ret void
}


define void @lam7586804(i64 %env7586805, i64 %rvp7583846) {
  %cont7581247 = call i64 @prim_car(i64 %rvp7583846)                                 ; call prim_car
  %rvp7583845 = call i64 @prim_cdr(i64 %rvp7583846)                                  ; call prim_cdr
  %RAr$x = call i64 @prim_car(i64 %rvp7583845)                                       ; call prim_car
  %na7583841 = call i64 @prim_cdr(i64 %rvp7583845)                                   ; call prim_cdr
  %a7581048 = call i64 @prim_cdr(i64 %RAr$x)                                         ; call prim_cdr
  %a7581049 = call i64 @prim_cdr(i64 %a7581048)                                      ; call prim_cdr
  %retprim7581248 = call i64 @prim_car(i64 %a7581049)                                ; call prim_car
  %arg7581828 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583844 = add i64 0, 0                                                         ; quoted ()
  %rva7583843 = call i64 @prim_cons(i64 %retprim7581248, i64 %rva7583844)            ; call prim_cons
  %rva7583842 = call i64 @prim_cons(i64 %arg7581828, i64 %rva7583843)                ; call prim_cons
  %cloptr7587847 = inttoptr i64 %cont7581247 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587848 = getelementptr inbounds i64, i64* %cloptr7587847, i64 0             ; &cloptr7587847[0]
  %f7587850 = load i64, i64* %i0ptr7587848, align 8                                  ; load; *i0ptr7587848
  %fptr7587849 = inttoptr i64 %f7587850 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587849(i64 %cont7581247, i64 %rva7583842)          ; tail call
  ret void
}


define void @lam7586800(i64 %env7586801, i64 %rvp7583853) {
  %cont7581249 = call i64 @prim_car(i64 %rvp7583853)                                 ; call prim_car
  %rvp7583852 = call i64 @prim_cdr(i64 %rvp7583853)                                  ; call prim_cdr
  %FD7$x = call i64 @prim_car(i64 %rvp7583852)                                       ; call prim_car
  %na7583848 = call i64 @prim_cdr(i64 %rvp7583852)                                   ; call prim_cdr
  %a7581050 = call i64 @prim_cdr(i64 %FD7$x)                                         ; call prim_cdr
  %a7581051 = call i64 @prim_cdr(i64 %a7581050)                                      ; call prim_cdr
  %a7581052 = call i64 @prim_cdr(i64 %a7581051)                                      ; call prim_cdr
  %retprim7581250 = call i64 @prim_car(i64 %a7581052)                                ; call prim_car
  %arg7581835 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583851 = add i64 0, 0                                                         ; quoted ()
  %rva7583850 = call i64 @prim_cons(i64 %retprim7581250, i64 %rva7583851)            ; call prim_cons
  %rva7583849 = call i64 @prim_cons(i64 %arg7581835, i64 %rva7583850)                ; call prim_cons
  %cloptr7587851 = inttoptr i64 %cont7581249 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587852 = getelementptr inbounds i64, i64* %cloptr7587851, i64 0             ; &cloptr7587851[0]
  %f7587854 = load i64, i64* %i0ptr7587852, align 8                                  ; load; *i0ptr7587852
  %fptr7587853 = inttoptr i64 %f7587854 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587853(i64 %cont7581249, i64 %rva7583849)          ; tail call
  ret void
}


define void @lam7586796(i64 %env7586797, i64 %ZVL$lst7581389) {
  %cont7581388 = call i64 @prim_car(i64 %ZVL$lst7581389)                             ; call prim_car
  %ZVL$lst = call i64 @prim_cdr(i64 %ZVL$lst7581389)                                 ; call prim_cdr
  %arg7581842 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583856 = add i64 0, 0                                                         ; quoted ()
  %rva7583855 = call i64 @prim_cons(i64 %ZVL$lst, i64 %rva7583856)                   ; call prim_cons
  %rva7583854 = call i64 @prim_cons(i64 %arg7581842, i64 %rva7583855)                ; call prim_cons
  %cloptr7587855 = inttoptr i64 %cont7581388 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587856 = getelementptr inbounds i64, i64* %cloptr7587855, i64 0             ; &cloptr7587855[0]
  %f7587858 = load i64, i64* %i0ptr7587856, align 8                                  ; load; *i0ptr7587856
  %fptr7587857 = inttoptr i64 %f7587858 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587857(i64 %cont7581388, i64 %rva7583854)          ; tail call
  ret void
}


define void @lam7586792(i64 %env7586793, i64 %rvp7585227) {
  %envptr7587859 = inttoptr i64 %env7586793 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587860 = getelementptr inbounds i64, i64* %envptr7587859, i64 6            ; &envptr7587859[6]
  %NdK$_37drop = load i64, i64* %envptr7587860, align 8                              ; load; *envptr7587860
  %envptr7587861 = inttoptr i64 %env7586793 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587862 = getelementptr inbounds i64, i64* %envptr7587861, i64 5            ; &envptr7587861[5]
  %wKy$_37length = load i64, i64* %envptr7587862, align 8                            ; load; *envptr7587862
  %envptr7587863 = inttoptr i64 %env7586793 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587864 = getelementptr inbounds i64, i64* %envptr7587863, i64 4            ; &envptr7587863[4]
  %AhN$_37_62 = load i64, i64* %envptr7587864, align 8                               ; load; *envptr7587864
  %envptr7587865 = inttoptr i64 %env7586793 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587866 = getelementptr inbounds i64, i64* %envptr7587865, i64 3            ; &envptr7587865[3]
  %m0I$_37_47 = load i64, i64* %envptr7587866, align 8                               ; load; *envptr7587866
  %envptr7587867 = inttoptr i64 %env7586793 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587868 = getelementptr inbounds i64, i64* %envptr7587867, i64 2            ; &envptr7587867[2]
  %z23$_37append = load i64, i64* %envptr7587868, align 8                            ; load; *envptr7587868
  %envptr7587869 = inttoptr i64 %env7586793 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587870 = getelementptr inbounds i64, i64* %envptr7587869, i64 1            ; &envptr7587869[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7587870, align 8                            ; load; *envptr7587870
  %_957581386 = call i64 @prim_car(i64 %rvp7585227)                                  ; call prim_car
  %rvp7585226 = call i64 @prim_cdr(i64 %rvp7585227)                                  ; call prim_cdr
  %a7581053 = call i64 @prim_car(i64 %rvp7585226)                                    ; call prim_car
  %na7583858 = call i64 @prim_cdr(i64 %rvp7585226)                                   ; call prim_cdr
  %arg7581845 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581387 = call i64 @prim_make_45vector(i64 %arg7581845, i64 %a7581053)     ; call prim_make_45vector
  %cloptr7587871 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7587873 = getelementptr inbounds i64, i64* %cloptr7587871, i64 1              ; &eptr7587873[1]
  %eptr7587874 = getelementptr inbounds i64, i64* %cloptr7587871, i64 2              ; &eptr7587874[2]
  %eptr7587875 = getelementptr inbounds i64, i64* %cloptr7587871, i64 3              ; &eptr7587875[3]
  %eptr7587876 = getelementptr inbounds i64, i64* %cloptr7587871, i64 4              ; &eptr7587876[4]
  %eptr7587877 = getelementptr inbounds i64, i64* %cloptr7587871, i64 5              ; &eptr7587877[5]
  %eptr7587878 = getelementptr inbounds i64, i64* %cloptr7587871, i64 6              ; &eptr7587878[6]
  store i64 %ajE$_37foldl1, i64* %eptr7587873                                        ; *eptr7587873 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7587874                                        ; *eptr7587874 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7587875                                           ; *eptr7587875 = %m0I$_37_47
  store i64 %AhN$_37_62, i64* %eptr7587876                                           ; *eptr7587876 = %AhN$_37_62
  store i64 %wKy$_37length, i64* %eptr7587877                                        ; *eptr7587877 = %wKy$_37length
  store i64 %NdK$_37drop, i64* %eptr7587878                                          ; *eptr7587878 = %NdK$_37drop
  %eptr7587872 = getelementptr inbounds i64, i64* %cloptr7587871, i64 0              ; &cloptr7587871[0]
  %f7587879 = ptrtoint void(i64,i64)* @lam7586789 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587879, i64* %eptr7587872                                             ; store fptr
  %arg7581848 = ptrtoint i64* %cloptr7587871 to i64                                  ; closure cast; i64* -> i64
  %arg7581847 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585225 = add i64 0, 0                                                         ; quoted ()
  %rva7585224 = call i64 @prim_cons(i64 %retprim7581387, i64 %rva7585225)            ; call prim_cons
  %rva7585223 = call i64 @prim_cons(i64 %arg7581847, i64 %rva7585224)                ; call prim_cons
  %cloptr7587880 = inttoptr i64 %arg7581848 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587881 = getelementptr inbounds i64, i64* %cloptr7587880, i64 0             ; &cloptr7587880[0]
  %f7587883 = load i64, i64* %i0ptr7587881, align 8                                  ; load; *i0ptr7587881
  %fptr7587882 = inttoptr i64 %f7587883 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587882(i64 %arg7581848, i64 %rva7585223)           ; tail call
  ret void
}


define void @lam7586789(i64 %env7586790, i64 %rvp7585222) {
  %envptr7587884 = inttoptr i64 %env7586790 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587885 = getelementptr inbounds i64, i64* %envptr7587884, i64 6            ; &envptr7587884[6]
  %NdK$_37drop = load i64, i64* %envptr7587885, align 8                              ; load; *envptr7587885
  %envptr7587886 = inttoptr i64 %env7586790 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587887 = getelementptr inbounds i64, i64* %envptr7587886, i64 5            ; &envptr7587886[5]
  %wKy$_37length = load i64, i64* %envptr7587887, align 8                            ; load; *envptr7587887
  %envptr7587888 = inttoptr i64 %env7586790 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587889 = getelementptr inbounds i64, i64* %envptr7587888, i64 4            ; &envptr7587888[4]
  %AhN$_37_62 = load i64, i64* %envptr7587889, align 8                               ; load; *envptr7587889
  %envptr7587890 = inttoptr i64 %env7586790 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587891 = getelementptr inbounds i64, i64* %envptr7587890, i64 3            ; &envptr7587890[3]
  %m0I$_37_47 = load i64, i64* %envptr7587891, align 8                               ; load; *envptr7587891
  %envptr7587892 = inttoptr i64 %env7586790 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587893 = getelementptr inbounds i64, i64* %envptr7587892, i64 2            ; &envptr7587892[2]
  %z23$_37append = load i64, i64* %envptr7587893, align 8                            ; load; *envptr7587893
  %envptr7587894 = inttoptr i64 %env7586790 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587895 = getelementptr inbounds i64, i64* %envptr7587894, i64 1            ; &envptr7587894[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7587895, align 8                            ; load; *envptr7587895
  %_957581251 = call i64 @prim_car(i64 %rvp7585222)                                  ; call prim_car
  %rvp7585221 = call i64 @prim_cdr(i64 %rvp7585222)                                  ; call prim_cdr
  %CPS$_37wind_45stack = call i64 @prim_car(i64 %rvp7585221)                         ; call prim_car
  %na7583860 = call i64 @prim_cdr(i64 %rvp7585221)                                   ; call prim_cdr
  %cloptr7587896 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587898 = getelementptr inbounds i64, i64* %cloptr7587896, i64 1              ; &eptr7587898[1]
  %eptr7587899 = getelementptr inbounds i64, i64* %cloptr7587896, i64 2              ; &eptr7587899[2]
  %eptr7587900 = getelementptr inbounds i64, i64* %cloptr7587896, i64 3              ; &eptr7587900[3]
  store i64 %AhN$_37_62, i64* %eptr7587898                                           ; *eptr7587898 = %AhN$_37_62
  store i64 %wKy$_37length, i64* %eptr7587899                                        ; *eptr7587899 = %wKy$_37length
  store i64 %NdK$_37drop, i64* %eptr7587900                                          ; *eptr7587900 = %NdK$_37drop
  %eptr7587897 = getelementptr inbounds i64, i64* %cloptr7587896, i64 0              ; &cloptr7587896[0]
  %f7587901 = ptrtoint void(i64,i64)* @lam7586787 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587901, i64* %eptr7587897                                             ; store fptr
  %vB2$common_45tail = ptrtoint i64* %cloptr7587896 to i64                           ; closure cast; i64* -> i64
  %cloptr7587902 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7587904 = getelementptr inbounds i64, i64* %cloptr7587902, i64 1              ; &eptr7587904[1]
  %eptr7587905 = getelementptr inbounds i64, i64* %cloptr7587902, i64 2              ; &eptr7587905[2]
  store i64 %CPS$_37wind_45stack, i64* %eptr7587904                                  ; *eptr7587904 = %CPS$_37wind_45stack
  store i64 %vB2$common_45tail, i64* %eptr7587905                                    ; *eptr7587905 = %vB2$common_45tail
  %eptr7587903 = getelementptr inbounds i64, i64* %cloptr7587902, i64 0              ; &cloptr7587902[0]
  %f7587906 = ptrtoint void(i64,i64)* @lam7586717 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587906, i64* %eptr7587903                                             ; store fptr
  %fKu$_37do_45wind = ptrtoint i64* %cloptr7587902 to i64                            ; closure cast; i64* -> i64
  %cloptr7587907 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7587909 = getelementptr inbounds i64, i64* %cloptr7587907, i64 1              ; &eptr7587909[1]
  store i64 %CPS$_37wind_45stack, i64* %eptr7587909                                  ; *eptr7587909 = %CPS$_37wind_45stack
  %eptr7587908 = getelementptr inbounds i64, i64* %cloptr7587907, i64 0              ; &cloptr7587907[0]
  %f7587910 = ptrtoint void(i64,i64)* @lam7586353 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587910, i64* %eptr7587908                                             ; store fptr
  %bFV$_37dynamic_45wind = ptrtoint i64* %cloptr7587907 to i64                       ; closure cast; i64* -> i64
  %cloptr7587911 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587912 = getelementptr inbounds i64, i64* %cloptr7587911, i64 0              ; &cloptr7587911[0]
  %f7587913 = ptrtoint void(i64,i64)* @lam7586243 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587913, i64* %eptr7587912                                             ; store fptr
  %arg7582633 = ptrtoint i64* %cloptr7587911 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587914 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7587916 = getelementptr inbounds i64, i64* %cloptr7587914, i64 1              ; &eptr7587916[1]
  %eptr7587917 = getelementptr inbounds i64, i64* %cloptr7587914, i64 2              ; &eptr7587917[2]
  %eptr7587918 = getelementptr inbounds i64, i64* %cloptr7587914, i64 3              ; &eptr7587918[3]
  store i64 %ajE$_37foldl1, i64* %eptr7587916                                        ; *eptr7587916 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7587917                                        ; *eptr7587917 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7587918                                           ; *eptr7587918 = %m0I$_37_47
  %eptr7587915 = getelementptr inbounds i64, i64* %cloptr7587914, i64 0              ; &cloptr7587914[0]
  %f7587919 = ptrtoint void(i64,i64)* @lam7586239 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587919, i64* %eptr7587915                                             ; store fptr
  %arg7582632 = ptrtoint i64* %cloptr7587914 to i64                                  ; closure cast; i64* -> i64
  %rva7585220 = add i64 0, 0                                                         ; quoted ()
  %rva7585219 = call i64 @prim_cons(i64 %arg7582632, i64 %rva7585220)                ; call prim_cons
  %cloptr7587920 = inttoptr i64 %arg7582633 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587921 = getelementptr inbounds i64, i64* %cloptr7587920, i64 0             ; &cloptr7587920[0]
  %f7587923 = load i64, i64* %i0ptr7587921, align 8                                  ; load; *i0ptr7587921
  %fptr7587922 = inttoptr i64 %f7587923 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587922(i64 %arg7582633, i64 %rva7585219)           ; tail call
  ret void
}


define void @lam7586787(i64 %env7586788, i64 %rvp7583998) {
  %envptr7587924 = inttoptr i64 %env7586788 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587925 = getelementptr inbounds i64, i64* %envptr7587924, i64 3            ; &envptr7587924[3]
  %NdK$_37drop = load i64, i64* %envptr7587925, align 8                              ; load; *envptr7587925
  %envptr7587926 = inttoptr i64 %env7586788 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587927 = getelementptr inbounds i64, i64* %envptr7587926, i64 2            ; &envptr7587926[2]
  %wKy$_37length = load i64, i64* %envptr7587927, align 8                            ; load; *envptr7587927
  %envptr7587928 = inttoptr i64 %env7586788 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587929 = getelementptr inbounds i64, i64* %envptr7587928, i64 1            ; &envptr7587928[1]
  %AhN$_37_62 = load i64, i64* %envptr7587929, align 8                               ; load; *envptr7587929
  %cont7581252 = call i64 @prim_car(i64 %rvp7583998)                                 ; call prim_car
  %rvp7583997 = call i64 @prim_cdr(i64 %rvp7583998)                                  ; call prim_cdr
  %Kdy$x = call i64 @prim_car(i64 %rvp7583997)                                       ; call prim_car
  %rvp7583996 = call i64 @prim_cdr(i64 %rvp7583997)                                  ; call prim_cdr
  %Z94$y = call i64 @prim_car(i64 %rvp7583996)                                       ; call prim_car
  %na7583862 = call i64 @prim_cdr(i64 %rvp7583996)                                   ; call prim_cdr
  %cloptr7587930 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7587932 = getelementptr inbounds i64, i64* %cloptr7587930, i64 1              ; &eptr7587932[1]
  %eptr7587933 = getelementptr inbounds i64, i64* %cloptr7587930, i64 2              ; &eptr7587933[2]
  %eptr7587934 = getelementptr inbounds i64, i64* %cloptr7587930, i64 3              ; &eptr7587934[3]
  %eptr7587935 = getelementptr inbounds i64, i64* %cloptr7587930, i64 4              ; &eptr7587935[4]
  %eptr7587936 = getelementptr inbounds i64, i64* %cloptr7587930, i64 5              ; &eptr7587936[5]
  %eptr7587937 = getelementptr inbounds i64, i64* %cloptr7587930, i64 6              ; &eptr7587937[6]
  store i64 %Kdy$x, i64* %eptr7587932                                                ; *eptr7587932 = %Kdy$x
  store i64 %Z94$y, i64* %eptr7587933                                                ; *eptr7587933 = %Z94$y
  store i64 %AhN$_37_62, i64* %eptr7587934                                           ; *eptr7587934 = %AhN$_37_62
  store i64 %wKy$_37length, i64* %eptr7587935                                        ; *eptr7587935 = %wKy$_37length
  store i64 %NdK$_37drop, i64* %eptr7587936                                          ; *eptr7587936 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7587937                                          ; *eptr7587937 = %cont7581252
  %eptr7587931 = getelementptr inbounds i64, i64* %cloptr7587930, i64 0              ; &cloptr7587930[0]
  %f7587938 = ptrtoint void(i64,i64)* @lam7586785 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587938, i64* %eptr7587931                                             ; store fptr
  %arg7581850 = ptrtoint i64* %cloptr7587930 to i64                                  ; closure cast; i64* -> i64
  %rva7583995 = add i64 0, 0                                                         ; quoted ()
  %rva7583994 = call i64 @prim_cons(i64 %Kdy$x, i64 %rva7583995)                     ; call prim_cons
  %rva7583993 = call i64 @prim_cons(i64 %arg7581850, i64 %rva7583994)                ; call prim_cons
  %cloptr7587939 = inttoptr i64 %wKy$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7587940 = getelementptr inbounds i64, i64* %cloptr7587939, i64 0             ; &cloptr7587939[0]
  %f7587942 = load i64, i64* %i0ptr7587940, align 8                                  ; load; *i0ptr7587940
  %fptr7587941 = inttoptr i64 %f7587942 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587941(i64 %wKy$_37length, i64 %rva7583993)        ; tail call
  ret void
}


define void @lam7586785(i64 %env7586786, i64 %rvp7583992) {
  %envptr7587943 = inttoptr i64 %env7586786 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587944 = getelementptr inbounds i64, i64* %envptr7587943, i64 6            ; &envptr7587943[6]
  %cont7581252 = load i64, i64* %envptr7587944, align 8                              ; load; *envptr7587944
  %envptr7587945 = inttoptr i64 %env7586786 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587946 = getelementptr inbounds i64, i64* %envptr7587945, i64 5            ; &envptr7587945[5]
  %NdK$_37drop = load i64, i64* %envptr7587946, align 8                              ; load; *envptr7587946
  %envptr7587947 = inttoptr i64 %env7586786 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587948 = getelementptr inbounds i64, i64* %envptr7587947, i64 4            ; &envptr7587947[4]
  %wKy$_37length = load i64, i64* %envptr7587948, align 8                            ; load; *envptr7587948
  %envptr7587949 = inttoptr i64 %env7586786 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587950 = getelementptr inbounds i64, i64* %envptr7587949, i64 3            ; &envptr7587949[3]
  %AhN$_37_62 = load i64, i64* %envptr7587950, align 8                               ; load; *envptr7587950
  %envptr7587951 = inttoptr i64 %env7586786 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587952 = getelementptr inbounds i64, i64* %envptr7587951, i64 2            ; &envptr7587951[2]
  %Z94$y = load i64, i64* %envptr7587952, align 8                                    ; load; *envptr7587952
  %envptr7587953 = inttoptr i64 %env7586786 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587954 = getelementptr inbounds i64, i64* %envptr7587953, i64 1            ; &envptr7587953[1]
  %Kdy$x = load i64, i64* %envptr7587954, align 8                                    ; load; *envptr7587954
  %_957581253 = call i64 @prim_car(i64 %rvp7583992)                                  ; call prim_car
  %rvp7583991 = call i64 @prim_cdr(i64 %rvp7583992)                                  ; call prim_cdr
  %fuh$lx = call i64 @prim_car(i64 %rvp7583991)                                      ; call prim_car
  %na7583864 = call i64 @prim_cdr(i64 %rvp7583991)                                   ; call prim_cdr
  %cloptr7587955 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7587957 = getelementptr inbounds i64, i64* %cloptr7587955, i64 1              ; &eptr7587957[1]
  %eptr7587958 = getelementptr inbounds i64, i64* %cloptr7587955, i64 2              ; &eptr7587958[2]
  %eptr7587959 = getelementptr inbounds i64, i64* %cloptr7587955, i64 3              ; &eptr7587959[3]
  %eptr7587960 = getelementptr inbounds i64, i64* %cloptr7587955, i64 4              ; &eptr7587960[4]
  %eptr7587961 = getelementptr inbounds i64, i64* %cloptr7587955, i64 5              ; &eptr7587961[5]
  %eptr7587962 = getelementptr inbounds i64, i64* %cloptr7587955, i64 6              ; &eptr7587962[6]
  store i64 %Kdy$x, i64* %eptr7587957                                                ; *eptr7587957 = %Kdy$x
  store i64 %Z94$y, i64* %eptr7587958                                                ; *eptr7587958 = %Z94$y
  store i64 %fuh$lx, i64* %eptr7587959                                               ; *eptr7587959 = %fuh$lx
  store i64 %AhN$_37_62, i64* %eptr7587960                                           ; *eptr7587960 = %AhN$_37_62
  store i64 %NdK$_37drop, i64* %eptr7587961                                          ; *eptr7587961 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7587962                                          ; *eptr7587962 = %cont7581252
  %eptr7587956 = getelementptr inbounds i64, i64* %cloptr7587955, i64 0              ; &cloptr7587955[0]
  %f7587963 = ptrtoint void(i64,i64)* @lam7586783 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587963, i64* %eptr7587956                                             ; store fptr
  %arg7581853 = ptrtoint i64* %cloptr7587955 to i64                                  ; closure cast; i64* -> i64
  %rva7583990 = add i64 0, 0                                                         ; quoted ()
  %rva7583989 = call i64 @prim_cons(i64 %Z94$y, i64 %rva7583990)                     ; call prim_cons
  %rva7583988 = call i64 @prim_cons(i64 %arg7581853, i64 %rva7583989)                ; call prim_cons
  %cloptr7587964 = inttoptr i64 %wKy$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7587965 = getelementptr inbounds i64, i64* %cloptr7587964, i64 0             ; &cloptr7587964[0]
  %f7587967 = load i64, i64* %i0ptr7587965, align 8                                  ; load; *i0ptr7587965
  %fptr7587966 = inttoptr i64 %f7587967 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587966(i64 %wKy$_37length, i64 %rva7583988)        ; tail call
  ret void
}


define void @lam7586783(i64 %env7586784, i64 %rvp7583987) {
  %envptr7587968 = inttoptr i64 %env7586784 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587969 = getelementptr inbounds i64, i64* %envptr7587968, i64 6            ; &envptr7587968[6]
  %cont7581252 = load i64, i64* %envptr7587969, align 8                              ; load; *envptr7587969
  %envptr7587970 = inttoptr i64 %env7586784 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587971 = getelementptr inbounds i64, i64* %envptr7587970, i64 5            ; &envptr7587970[5]
  %NdK$_37drop = load i64, i64* %envptr7587971, align 8                              ; load; *envptr7587971
  %envptr7587972 = inttoptr i64 %env7586784 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587973 = getelementptr inbounds i64, i64* %envptr7587972, i64 4            ; &envptr7587972[4]
  %AhN$_37_62 = load i64, i64* %envptr7587973, align 8                               ; load; *envptr7587973
  %envptr7587974 = inttoptr i64 %env7586784 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587975 = getelementptr inbounds i64, i64* %envptr7587974, i64 3            ; &envptr7587974[3]
  %fuh$lx = load i64, i64* %envptr7587975, align 8                                   ; load; *envptr7587975
  %envptr7587976 = inttoptr i64 %env7586784 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587977 = getelementptr inbounds i64, i64* %envptr7587976, i64 2            ; &envptr7587976[2]
  %Z94$y = load i64, i64* %envptr7587977, align 8                                    ; load; *envptr7587977
  %envptr7587978 = inttoptr i64 %env7586784 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7587979 = getelementptr inbounds i64, i64* %envptr7587978, i64 1            ; &envptr7587978[1]
  %Kdy$x = load i64, i64* %envptr7587979, align 8                                    ; load; *envptr7587979
  %_957581254 = call i64 @prim_car(i64 %rvp7583987)                                  ; call prim_car
  %rvp7583986 = call i64 @prim_cdr(i64 %rvp7583987)                                  ; call prim_cdr
  %cKx$ly = call i64 @prim_car(i64 %rvp7583986)                                      ; call prim_car
  %na7583866 = call i64 @prim_cdr(i64 %rvp7583986)                                   ; call prim_cdr
  %cloptr7587980 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7587981 = getelementptr inbounds i64, i64* %cloptr7587980, i64 0              ; &cloptr7587980[0]
  %f7587982 = ptrtoint void(i64,i64)* @lam7586781 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587982, i64* %eptr7587981                                             ; store fptr
  %arg7581856 = ptrtoint i64* %cloptr7587980 to i64                                  ; closure cast; i64* -> i64
  %cloptr7587983 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7587985 = getelementptr inbounds i64, i64* %cloptr7587983, i64 1              ; &eptr7587985[1]
  %eptr7587986 = getelementptr inbounds i64, i64* %cloptr7587983, i64 2              ; &eptr7587986[2]
  %eptr7587987 = getelementptr inbounds i64, i64* %cloptr7587983, i64 3              ; &eptr7587987[3]
  %eptr7587988 = getelementptr inbounds i64, i64* %cloptr7587983, i64 4              ; &eptr7587988[4]
  %eptr7587989 = getelementptr inbounds i64, i64* %cloptr7587983, i64 5              ; &eptr7587989[5]
  %eptr7587990 = getelementptr inbounds i64, i64* %cloptr7587983, i64 6              ; &eptr7587990[6]
  %eptr7587991 = getelementptr inbounds i64, i64* %cloptr7587983, i64 7              ; &eptr7587991[7]
  store i64 %Kdy$x, i64* %eptr7587985                                                ; *eptr7587985 = %Kdy$x
  store i64 %Z94$y, i64* %eptr7587986                                                ; *eptr7587986 = %Z94$y
  store i64 %cKx$ly, i64* %eptr7587987                                               ; *eptr7587987 = %cKx$ly
  store i64 %fuh$lx, i64* %eptr7587988                                               ; *eptr7587988 = %fuh$lx
  store i64 %AhN$_37_62, i64* %eptr7587989                                           ; *eptr7587989 = %AhN$_37_62
  store i64 %NdK$_37drop, i64* %eptr7587990                                          ; *eptr7587990 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7587991                                          ; *eptr7587991 = %cont7581252
  %eptr7587984 = getelementptr inbounds i64, i64* %cloptr7587983, i64 0              ; &cloptr7587983[0]
  %f7587992 = ptrtoint void(i64,i64)* @lam7586777 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7587992, i64* %eptr7587984                                             ; store fptr
  %arg7581855 = ptrtoint i64* %cloptr7587983 to i64                                  ; closure cast; i64* -> i64
  %rva7583985 = add i64 0, 0                                                         ; quoted ()
  %rva7583984 = call i64 @prim_cons(i64 %arg7581855, i64 %rva7583985)                ; call prim_cons
  %cloptr7587993 = inttoptr i64 %arg7581856 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7587994 = getelementptr inbounds i64, i64* %cloptr7587993, i64 0             ; &cloptr7587993[0]
  %f7587996 = load i64, i64* %i0ptr7587994, align 8                                  ; load; *i0ptr7587994
  %fptr7587995 = inttoptr i64 %f7587996 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587995(i64 %arg7581856, i64 %rva7583984)           ; tail call
  ret void
}


define void @lam7586781(i64 %env7586782, i64 %mov$lst7581266) {
  %cont7581265 = call i64 @prim_car(i64 %mov$lst7581266)                             ; call prim_car
  %mov$lst = call i64 @prim_cdr(i64 %mov$lst7581266)                                 ; call prim_cdr
  %arg7581860 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583869 = add i64 0, 0                                                         ; quoted ()
  %rva7583868 = call i64 @prim_cons(i64 %mov$lst, i64 %rva7583869)                   ; call prim_cons
  %rva7583867 = call i64 @prim_cons(i64 %arg7581860, i64 %rva7583868)                ; call prim_cons
  %cloptr7587997 = inttoptr i64 %cont7581265 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7587998 = getelementptr inbounds i64, i64* %cloptr7587997, i64 0             ; &cloptr7587997[0]
  %f7588000 = load i64, i64* %i0ptr7587998, align 8                                  ; load; *i0ptr7587998
  %fptr7587999 = inttoptr i64 %f7588000 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7587999(i64 %cont7581265, i64 %rva7583867)          ; tail call
  ret void
}


define void @lam7586777(i64 %env7586778, i64 %rvp7583983) {
  %envptr7588001 = inttoptr i64 %env7586778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588002 = getelementptr inbounds i64, i64* %envptr7588001, i64 7            ; &envptr7588001[7]
  %cont7581252 = load i64, i64* %envptr7588002, align 8                              ; load; *envptr7588002
  %envptr7588003 = inttoptr i64 %env7586778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588004 = getelementptr inbounds i64, i64* %envptr7588003, i64 6            ; &envptr7588003[6]
  %NdK$_37drop = load i64, i64* %envptr7588004, align 8                              ; load; *envptr7588004
  %envptr7588005 = inttoptr i64 %env7586778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588006 = getelementptr inbounds i64, i64* %envptr7588005, i64 5            ; &envptr7588005[5]
  %AhN$_37_62 = load i64, i64* %envptr7588006, align 8                               ; load; *envptr7588006
  %envptr7588007 = inttoptr i64 %env7586778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588008 = getelementptr inbounds i64, i64* %envptr7588007, i64 4            ; &envptr7588007[4]
  %fuh$lx = load i64, i64* %envptr7588008, align 8                                   ; load; *envptr7588008
  %envptr7588009 = inttoptr i64 %env7586778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588010 = getelementptr inbounds i64, i64* %envptr7588009, i64 3            ; &envptr7588009[3]
  %cKx$ly = load i64, i64* %envptr7588010, align 8                                   ; load; *envptr7588010
  %envptr7588011 = inttoptr i64 %env7586778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588012 = getelementptr inbounds i64, i64* %envptr7588011, i64 2            ; &envptr7588011[2]
  %Z94$y = load i64, i64* %envptr7588012, align 8                                    ; load; *envptr7588012
  %envptr7588013 = inttoptr i64 %env7586778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588014 = getelementptr inbounds i64, i64* %envptr7588013, i64 1            ; &envptr7588013[1]
  %Kdy$x = load i64, i64* %envptr7588014, align 8                                    ; load; *envptr7588014
  %_957581263 = call i64 @prim_car(i64 %rvp7583983)                                  ; call prim_car
  %rvp7583982 = call i64 @prim_cdr(i64 %rvp7583983)                                  ; call prim_cdr
  %a7581054 = call i64 @prim_car(i64 %rvp7583982)                                    ; call prim_car
  %na7583871 = call i64 @prim_cdr(i64 %rvp7583982)                                   ; call prim_cdr
  %arg7581863 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581264 = call i64 @prim_make_45vector(i64 %arg7581863, i64 %a7581054)     ; call prim_make_45vector
  %cloptr7588015 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7588017 = getelementptr inbounds i64, i64* %cloptr7588015, i64 1              ; &eptr7588017[1]
  %eptr7588018 = getelementptr inbounds i64, i64* %cloptr7588015, i64 2              ; &eptr7588018[2]
  %eptr7588019 = getelementptr inbounds i64, i64* %cloptr7588015, i64 3              ; &eptr7588019[3]
  %eptr7588020 = getelementptr inbounds i64, i64* %cloptr7588015, i64 4              ; &eptr7588020[4]
  %eptr7588021 = getelementptr inbounds i64, i64* %cloptr7588015, i64 5              ; &eptr7588021[5]
  %eptr7588022 = getelementptr inbounds i64, i64* %cloptr7588015, i64 6              ; &eptr7588022[6]
  %eptr7588023 = getelementptr inbounds i64, i64* %cloptr7588015, i64 7              ; &eptr7588023[7]
  store i64 %Kdy$x, i64* %eptr7588017                                                ; *eptr7588017 = %Kdy$x
  store i64 %Z94$y, i64* %eptr7588018                                                ; *eptr7588018 = %Z94$y
  store i64 %cKx$ly, i64* %eptr7588019                                               ; *eptr7588019 = %cKx$ly
  store i64 %fuh$lx, i64* %eptr7588020                                               ; *eptr7588020 = %fuh$lx
  store i64 %AhN$_37_62, i64* %eptr7588021                                           ; *eptr7588021 = %AhN$_37_62
  store i64 %NdK$_37drop, i64* %eptr7588022                                          ; *eptr7588022 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7588023                                          ; *eptr7588023 = %cont7581252
  %eptr7588016 = getelementptr inbounds i64, i64* %cloptr7588015, i64 0              ; &cloptr7588015[0]
  %f7588024 = ptrtoint void(i64,i64)* @lam7586774 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588024, i64* %eptr7588016                                             ; store fptr
  %arg7581866 = ptrtoint i64* %cloptr7588015 to i64                                  ; closure cast; i64* -> i64
  %arg7581865 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583981 = add i64 0, 0                                                         ; quoted ()
  %rva7583980 = call i64 @prim_cons(i64 %retprim7581264, i64 %rva7583981)            ; call prim_cons
  %rva7583979 = call i64 @prim_cons(i64 %arg7581865, i64 %rva7583980)                ; call prim_cons
  %cloptr7588025 = inttoptr i64 %arg7581866 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588026 = getelementptr inbounds i64, i64* %cloptr7588025, i64 0             ; &cloptr7588025[0]
  %f7588028 = load i64, i64* %i0ptr7588026, align 8                                  ; load; *i0ptr7588026
  %fptr7588027 = inttoptr i64 %f7588028 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588027(i64 %arg7581866, i64 %rva7583979)           ; tail call
  ret void
}


define void @lam7586774(i64 %env7586775, i64 %rvp7583978) {
  %envptr7588029 = inttoptr i64 %env7586775 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588030 = getelementptr inbounds i64, i64* %envptr7588029, i64 7            ; &envptr7588029[7]
  %cont7581252 = load i64, i64* %envptr7588030, align 8                              ; load; *envptr7588030
  %envptr7588031 = inttoptr i64 %env7586775 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588032 = getelementptr inbounds i64, i64* %envptr7588031, i64 6            ; &envptr7588031[6]
  %NdK$_37drop = load i64, i64* %envptr7588032, align 8                              ; load; *envptr7588032
  %envptr7588033 = inttoptr i64 %env7586775 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588034 = getelementptr inbounds i64, i64* %envptr7588033, i64 5            ; &envptr7588033[5]
  %AhN$_37_62 = load i64, i64* %envptr7588034, align 8                               ; load; *envptr7588034
  %envptr7588035 = inttoptr i64 %env7586775 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588036 = getelementptr inbounds i64, i64* %envptr7588035, i64 4            ; &envptr7588035[4]
  %fuh$lx = load i64, i64* %envptr7588036, align 8                                   ; load; *envptr7588036
  %envptr7588037 = inttoptr i64 %env7586775 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588038 = getelementptr inbounds i64, i64* %envptr7588037, i64 3            ; &envptr7588037[3]
  %cKx$ly = load i64, i64* %envptr7588038, align 8                                   ; load; *envptr7588038
  %envptr7588039 = inttoptr i64 %env7586775 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588040 = getelementptr inbounds i64, i64* %envptr7588039, i64 2            ; &envptr7588039[2]
  %Z94$y = load i64, i64* %envptr7588040, align 8                                    ; load; *envptr7588040
  %envptr7588041 = inttoptr i64 %env7586775 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588042 = getelementptr inbounds i64, i64* %envptr7588041, i64 1            ; &envptr7588041[1]
  %Kdy$x = load i64, i64* %envptr7588042, align 8                                    ; load; *envptr7588042
  %_957581255 = call i64 @prim_car(i64 %rvp7583978)                                  ; call prim_car
  %rvp7583977 = call i64 @prim_cdr(i64 %rvp7583978)                                  ; call prim_cdr
  %krY$loop = call i64 @prim_car(i64 %rvp7583977)                                    ; call prim_car
  %na7583873 = call i64 @prim_cdr(i64 %rvp7583977)                                   ; call prim_cdr
  %cloptr7588043 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7588045 = getelementptr inbounds i64, i64* %cloptr7588043, i64 1              ; &eptr7588045[1]
  store i64 %krY$loop, i64* %eptr7588045                                             ; *eptr7588045 = %krY$loop
  %eptr7588044 = getelementptr inbounds i64, i64* %cloptr7588043, i64 0              ; &cloptr7588043[0]
  %f7588046 = ptrtoint void(i64,i64)* @lam7586772 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588046, i64* %eptr7588044                                             ; store fptr
  %qiA$loop7580964 = ptrtoint i64* %cloptr7588043 to i64                             ; closure cast; i64* -> i64
  %arg7581888 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %Tru$_95t = call i64 @prim_vector_45set_33(i64 %krY$loop, i64 %arg7581888, i64 %qiA$loop7580964); call prim_vector_45set_33
  %arg7581890 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581061 = call i64 @prim_vector_45ref(i64 %krY$loop, i64 %arg7581890)            ; call prim_vector_45ref
  %a7581062 = call i64 @prim_procedure_63(i64 %a7581061)                             ; call prim_procedure_63
  %cmp7588047 = icmp eq i64 %a7581062, 15                                            ; false?
  br i1 %cmp7588047, label %else7588049, label %then7588048                          ; if

then7588048:
  %arg7581893 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581063 = call i64 @prim_vector_45ref(i64 %krY$loop, i64 %arg7581893)            ; call prim_vector_45ref
  %cloptr7588050 = call i64* @alloc(i64 72)                                          ; malloc
  %eptr7588052 = getelementptr inbounds i64, i64* %cloptr7588050, i64 1              ; &eptr7588052[1]
  %eptr7588053 = getelementptr inbounds i64, i64* %cloptr7588050, i64 2              ; &eptr7588053[2]
  %eptr7588054 = getelementptr inbounds i64, i64* %cloptr7588050, i64 3              ; &eptr7588054[3]
  %eptr7588055 = getelementptr inbounds i64, i64* %cloptr7588050, i64 4              ; &eptr7588055[4]
  %eptr7588056 = getelementptr inbounds i64, i64* %cloptr7588050, i64 5              ; &eptr7588056[5]
  %eptr7588057 = getelementptr inbounds i64, i64* %cloptr7588050, i64 6              ; &eptr7588057[6]
  %eptr7588058 = getelementptr inbounds i64, i64* %cloptr7588050, i64 7              ; &eptr7588058[7]
  %eptr7588059 = getelementptr inbounds i64, i64* %cloptr7588050, i64 8              ; &eptr7588059[8]
  store i64 %Kdy$x, i64* %eptr7588052                                                ; *eptr7588052 = %Kdy$x
  store i64 %a7581063, i64* %eptr7588053                                             ; *eptr7588053 = %a7581063
  store i64 %Z94$y, i64* %eptr7588054                                                ; *eptr7588054 = %Z94$y
  store i64 %cKx$ly, i64* %eptr7588055                                               ; *eptr7588055 = %cKx$ly
  store i64 %fuh$lx, i64* %eptr7588056                                               ; *eptr7588056 = %fuh$lx
  store i64 %AhN$_37_62, i64* %eptr7588057                                           ; *eptr7588057 = %AhN$_37_62
  store i64 %NdK$_37drop, i64* %eptr7588058                                          ; *eptr7588058 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7588059                                          ; *eptr7588059 = %cont7581252
  %eptr7588051 = getelementptr inbounds i64, i64* %cloptr7588050, i64 0              ; &cloptr7588050[0]
  %f7588060 = ptrtoint void(i64,i64)* @lam7586756 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588060, i64* %eptr7588051                                             ; store fptr
  %arg7581897 = ptrtoint i64* %cloptr7588050 to i64                                  ; closure cast; i64* -> i64
  %rva7583973 = add i64 0, 0                                                         ; quoted ()
  %rva7583972 = call i64 @prim_cons(i64 %cKx$ly, i64 %rva7583973)                    ; call prim_cons
  %rva7583971 = call i64 @prim_cons(i64 %fuh$lx, i64 %rva7583972)                    ; call prim_cons
  %rva7583970 = call i64 @prim_cons(i64 %arg7581897, i64 %rva7583971)                ; call prim_cons
  %cloptr7588061 = inttoptr i64 %AhN$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588062 = getelementptr inbounds i64, i64* %cloptr7588061, i64 0             ; &cloptr7588061[0]
  %f7588064 = load i64, i64* %i0ptr7588062, align 8                                  ; load; *i0ptr7588062
  %fptr7588063 = inttoptr i64 %f7588064 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588063(i64 %AhN$_37_62, i64 %rva7583970)           ; tail call
  ret void

else7588049:
  %arg7581950 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588065, i32 0, i32 0)); quoted string
  %retprim7581262 = call i64 @prim_halt(i64 %arg7581950)                             ; call prim_halt
  %arg7581952 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583976 = add i64 0, 0                                                         ; quoted ()
  %rva7583975 = call i64 @prim_cons(i64 %retprim7581262, i64 %rva7583976)            ; call prim_cons
  %rva7583974 = call i64 @prim_cons(i64 %arg7581952, i64 %rva7583975)                ; call prim_cons
  %cloptr7588066 = inttoptr i64 %cont7581252 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588067 = getelementptr inbounds i64, i64* %cloptr7588066, i64 0             ; &cloptr7588066[0]
  %f7588069 = load i64, i64* %i0ptr7588067, align 8                                  ; load; *i0ptr7588067
  %fptr7588068 = inttoptr i64 %f7588069 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588068(i64 %cont7581252, i64 %rva7583974)          ; tail call
  ret void
}


define void @lam7586772(i64 %env7586773, i64 %rvp7583888) {
  %envptr7588070 = inttoptr i64 %env7586773 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588071 = getelementptr inbounds i64, i64* %envptr7588070, i64 1            ; &envptr7588070[1]
  %krY$loop = load i64, i64* %envptr7588071, align 8                                 ; load; *envptr7588071
  %cont7581256 = call i64 @prim_car(i64 %rvp7583888)                                 ; call prim_car
  %rvp7583887 = call i64 @prim_cdr(i64 %rvp7583888)                                  ; call prim_cdr
  %m4V$x = call i64 @prim_car(i64 %rvp7583887)                                       ; call prim_car
  %rvp7583886 = call i64 @prim_cdr(i64 %rvp7583887)                                  ; call prim_cdr
  %r3g$y = call i64 @prim_car(i64 %rvp7583886)                                       ; call prim_car
  %na7583875 = call i64 @prim_cdr(i64 %rvp7583886)                                   ; call prim_cdr
  %a7581055 = call i64 @prim_eq_63(i64 %m4V$x, i64 %r3g$y)                           ; call prim_eq_63
  %cmp7588072 = icmp eq i64 %a7581055, 15                                            ; false?
  br i1 %cmp7588072, label %else7588074, label %then7588073                          ; if

then7588073:
  %arg7581870 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583878 = add i64 0, 0                                                         ; quoted ()
  %rva7583877 = call i64 @prim_cons(i64 %m4V$x, i64 %rva7583878)                     ; call prim_cons
  %rva7583876 = call i64 @prim_cons(i64 %arg7581870, i64 %rva7583877)                ; call prim_cons
  %cloptr7588075 = inttoptr i64 %cont7581256 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588076 = getelementptr inbounds i64, i64* %cloptr7588075, i64 0             ; &cloptr7588075[0]
  %f7588078 = load i64, i64* %i0ptr7588076, align 8                                  ; load; *i0ptr7588076
  %fptr7588077 = inttoptr i64 %f7588078 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588077(i64 %cont7581256, i64 %rva7583876)          ; tail call
  ret void

else7588074:
  %arg7581872 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581056 = call i64 @prim_vector_45ref(i64 %krY$loop, i64 %arg7581872)            ; call prim_vector_45ref
  %a7581057 = call i64 @prim_procedure_63(i64 %a7581056)                             ; call prim_procedure_63
  %cmp7588079 = icmp eq i64 %a7581057, 15                                            ; false?
  br i1 %cmp7588079, label %else7588081, label %then7588080                          ; if

then7588080:
  %arg7581875 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581058 = call i64 @prim_vector_45ref(i64 %krY$loop, i64 %arg7581875)            ; call prim_vector_45ref
  %a7581059 = call i64 @prim_cdr(i64 %m4V$x)                                         ; call prim_cdr
  %a7581060 = call i64 @prim_cdr(i64 %r3g$y)                                         ; call prim_cdr
  %rva7583882 = add i64 0, 0                                                         ; quoted ()
  %rva7583881 = call i64 @prim_cons(i64 %a7581060, i64 %rva7583882)                  ; call prim_cons
  %rva7583880 = call i64 @prim_cons(i64 %a7581059, i64 %rva7583881)                  ; call prim_cons
  %rva7583879 = call i64 @prim_cons(i64 %cont7581256, i64 %rva7583880)               ; call prim_cons
  %cloptr7588082 = inttoptr i64 %a7581058 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588083 = getelementptr inbounds i64, i64* %cloptr7588082, i64 0             ; &cloptr7588082[0]
  %f7588085 = load i64, i64* %i0ptr7588083, align 8                                  ; load; *i0ptr7588083
  %fptr7588084 = inttoptr i64 %f7588085 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588084(i64 %a7581058, i64 %rva7583879)             ; tail call
  ret void

else7588081:
  %arg7581883 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588086, i32 0, i32 0)); quoted string
  %retprim7581257 = call i64 @prim_halt(i64 %arg7581883)                             ; call prim_halt
  %arg7581885 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583885 = add i64 0, 0                                                         ; quoted ()
  %rva7583884 = call i64 @prim_cons(i64 %retprim7581257, i64 %rva7583885)            ; call prim_cons
  %rva7583883 = call i64 @prim_cons(i64 %arg7581885, i64 %rva7583884)                ; call prim_cons
  %cloptr7588087 = inttoptr i64 %cont7581256 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588088 = getelementptr inbounds i64, i64* %cloptr7588087, i64 0             ; &cloptr7588087[0]
  %f7588090 = load i64, i64* %i0ptr7588088, align 8                                  ; load; *i0ptr7588088
  %fptr7588089 = inttoptr i64 %f7588090 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588089(i64 %cont7581256, i64 %rva7583883)          ; tail call
  ret void
}


define void @lam7586756(i64 %env7586757, i64 %rvp7583969) {
  %envptr7588091 = inttoptr i64 %env7586757 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588092 = getelementptr inbounds i64, i64* %envptr7588091, i64 8            ; &envptr7588091[8]
  %cont7581252 = load i64, i64* %envptr7588092, align 8                              ; load; *envptr7588092
  %envptr7588093 = inttoptr i64 %env7586757 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588094 = getelementptr inbounds i64, i64* %envptr7588093, i64 7            ; &envptr7588093[7]
  %NdK$_37drop = load i64, i64* %envptr7588094, align 8                              ; load; *envptr7588094
  %envptr7588095 = inttoptr i64 %env7586757 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588096 = getelementptr inbounds i64, i64* %envptr7588095, i64 6            ; &envptr7588095[6]
  %AhN$_37_62 = load i64, i64* %envptr7588096, align 8                               ; load; *envptr7588096
  %envptr7588097 = inttoptr i64 %env7586757 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588098 = getelementptr inbounds i64, i64* %envptr7588097, i64 5            ; &envptr7588097[5]
  %fuh$lx = load i64, i64* %envptr7588098, align 8                                   ; load; *envptr7588098
  %envptr7588099 = inttoptr i64 %env7586757 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588100 = getelementptr inbounds i64, i64* %envptr7588099, i64 4            ; &envptr7588099[4]
  %cKx$ly = load i64, i64* %envptr7588100, align 8                                   ; load; *envptr7588100
  %envptr7588101 = inttoptr i64 %env7586757 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588102 = getelementptr inbounds i64, i64* %envptr7588101, i64 3            ; &envptr7588101[3]
  %Z94$y = load i64, i64* %envptr7588102, align 8                                    ; load; *envptr7588102
  %envptr7588103 = inttoptr i64 %env7586757 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588104 = getelementptr inbounds i64, i64* %envptr7588103, i64 2            ; &envptr7588103[2]
  %a7581063 = load i64, i64* %envptr7588104, align 8                                 ; load; *envptr7588104
  %envptr7588105 = inttoptr i64 %env7586757 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588106 = getelementptr inbounds i64, i64* %envptr7588105, i64 1            ; &envptr7588105[1]
  %Kdy$x = load i64, i64* %envptr7588106, align 8                                    ; load; *envptr7588106
  %_957581258 = call i64 @prim_car(i64 %rvp7583969)                                  ; call prim_car
  %rvp7583968 = call i64 @prim_cdr(i64 %rvp7583969)                                  ; call prim_cdr
  %a7581064 = call i64 @prim_car(i64 %rvp7583968)                                    ; call prim_car
  %na7583890 = call i64 @prim_cdr(i64 %rvp7583968)                                   ; call prim_cdr
  %cmp7588107 = icmp eq i64 %a7581064, 15                                            ; false?
  br i1 %cmp7588107, label %else7588109, label %then7588108                          ; if

then7588108:
  %a7581065 = call i64 @prim__45(i64 %fuh$lx, i64 %cKx$ly)                           ; call prim__45
  %cloptr7588110 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7588112 = getelementptr inbounds i64, i64* %cloptr7588110, i64 1              ; &eptr7588112[1]
  %eptr7588113 = getelementptr inbounds i64, i64* %cloptr7588110, i64 2              ; &eptr7588113[2]
  %eptr7588114 = getelementptr inbounds i64, i64* %cloptr7588110, i64 3              ; &eptr7588114[3]
  %eptr7588115 = getelementptr inbounds i64, i64* %cloptr7588110, i64 4              ; &eptr7588115[4]
  %eptr7588116 = getelementptr inbounds i64, i64* %cloptr7588110, i64 5              ; &eptr7588116[5]
  %eptr7588117 = getelementptr inbounds i64, i64* %cloptr7588110, i64 6              ; &eptr7588117[6]
  %eptr7588118 = getelementptr inbounds i64, i64* %cloptr7588110, i64 7              ; &eptr7588118[7]
  store i64 %a7581063, i64* %eptr7588112                                             ; *eptr7588112 = %a7581063
  store i64 %Z94$y, i64* %eptr7588113                                                ; *eptr7588113 = %Z94$y
  store i64 %cKx$ly, i64* %eptr7588114                                               ; *eptr7588114 = %cKx$ly
  store i64 %fuh$lx, i64* %eptr7588115                                               ; *eptr7588115 = %fuh$lx
  store i64 %AhN$_37_62, i64* %eptr7588116                                           ; *eptr7588116 = %AhN$_37_62
  store i64 %NdK$_37drop, i64* %eptr7588117                                          ; *eptr7588117 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7588118                                          ; *eptr7588118 = %cont7581252
  %eptr7588111 = getelementptr inbounds i64, i64* %cloptr7588110, i64 0              ; &cloptr7588110[0]
  %f7588119 = ptrtoint void(i64,i64)* @lam7586738 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588119, i64* %eptr7588111                                             ; store fptr
  %arg7581903 = ptrtoint i64* %cloptr7588110 to i64                                  ; closure cast; i64* -> i64
  %rva7583929 = add i64 0, 0                                                         ; quoted ()
  %rva7583928 = call i64 @prim_cons(i64 %a7581065, i64 %rva7583929)                  ; call prim_cons
  %rva7583927 = call i64 @prim_cons(i64 %Kdy$x, i64 %rva7583928)                     ; call prim_cons
  %rva7583926 = call i64 @prim_cons(i64 %arg7581903, i64 %rva7583927)                ; call prim_cons
  %cloptr7588120 = inttoptr i64 %NdK$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588121 = getelementptr inbounds i64, i64* %cloptr7588120, i64 0             ; &cloptr7588120[0]
  %f7588123 = load i64, i64* %i0ptr7588121, align 8                                  ; load; *i0ptr7588121
  %fptr7588122 = inttoptr i64 %f7588123 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588122(i64 %NdK$_37drop, i64 %rva7583926)          ; tail call
  ret void

else7588109:
  %cloptr7588124 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7588126 = getelementptr inbounds i64, i64* %cloptr7588124, i64 1              ; &eptr7588126[1]
  %eptr7588127 = getelementptr inbounds i64, i64* %cloptr7588124, i64 2              ; &eptr7588127[2]
  %eptr7588128 = getelementptr inbounds i64, i64* %cloptr7588124, i64 3              ; &eptr7588128[3]
  %eptr7588129 = getelementptr inbounds i64, i64* %cloptr7588124, i64 4              ; &eptr7588129[4]
  %eptr7588130 = getelementptr inbounds i64, i64* %cloptr7588124, i64 5              ; &eptr7588130[5]
  %eptr7588131 = getelementptr inbounds i64, i64* %cloptr7588124, i64 6              ; &eptr7588131[6]
  %eptr7588132 = getelementptr inbounds i64, i64* %cloptr7588124, i64 7              ; &eptr7588132[7]
  store i64 %a7581063, i64* %eptr7588126                                             ; *eptr7588126 = %a7581063
  store i64 %Z94$y, i64* %eptr7588127                                                ; *eptr7588127 = %Z94$y
  store i64 %cKx$ly, i64* %eptr7588128                                               ; *eptr7588128 = %cKx$ly
  store i64 %fuh$lx, i64* %eptr7588129                                               ; *eptr7588129 = %fuh$lx
  store i64 %AhN$_37_62, i64* %eptr7588130                                           ; *eptr7588130 = %AhN$_37_62
  store i64 %NdK$_37drop, i64* %eptr7588131                                          ; *eptr7588131 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7588132                                          ; *eptr7588132 = %cont7581252
  %eptr7588125 = getelementptr inbounds i64, i64* %cloptr7588124, i64 0              ; &cloptr7588124[0]
  %f7588133 = ptrtoint void(i64,i64)* @lam7586754 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588133, i64* %eptr7588125                                             ; store fptr
  %arg7581928 = ptrtoint i64* %cloptr7588124 to i64                                  ; closure cast; i64* -> i64
  %arg7581927 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583967 = add i64 0, 0                                                         ; quoted ()
  %rva7583966 = call i64 @prim_cons(i64 %Kdy$x, i64 %rva7583967)                     ; call prim_cons
  %rva7583965 = call i64 @prim_cons(i64 %arg7581927, i64 %rva7583966)                ; call prim_cons
  %cloptr7588134 = inttoptr i64 %arg7581928 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588135 = getelementptr inbounds i64, i64* %cloptr7588134, i64 0             ; &cloptr7588134[0]
  %f7588137 = load i64, i64* %i0ptr7588135, align 8                                  ; load; *i0ptr7588135
  %fptr7588136 = inttoptr i64 %f7588137 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588136(i64 %arg7581928, i64 %rva7583965)           ; tail call
  ret void
}


define void @lam7586754(i64 %env7586755, i64 %rvp7583964) {
  %envptr7588138 = inttoptr i64 %env7586755 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588139 = getelementptr inbounds i64, i64* %envptr7588138, i64 7            ; &envptr7588138[7]
  %cont7581252 = load i64, i64* %envptr7588139, align 8                              ; load; *envptr7588139
  %envptr7588140 = inttoptr i64 %env7586755 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588141 = getelementptr inbounds i64, i64* %envptr7588140, i64 6            ; &envptr7588140[6]
  %NdK$_37drop = load i64, i64* %envptr7588141, align 8                              ; load; *envptr7588141
  %envptr7588142 = inttoptr i64 %env7586755 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588143 = getelementptr inbounds i64, i64* %envptr7588142, i64 5            ; &envptr7588142[5]
  %AhN$_37_62 = load i64, i64* %envptr7588143, align 8                               ; load; *envptr7588143
  %envptr7588144 = inttoptr i64 %env7586755 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588145 = getelementptr inbounds i64, i64* %envptr7588144, i64 4            ; &envptr7588144[4]
  %fuh$lx = load i64, i64* %envptr7588145, align 8                                   ; load; *envptr7588145
  %envptr7588146 = inttoptr i64 %env7586755 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588147 = getelementptr inbounds i64, i64* %envptr7588146, i64 3            ; &envptr7588146[3]
  %cKx$ly = load i64, i64* %envptr7588147, align 8                                   ; load; *envptr7588147
  %envptr7588148 = inttoptr i64 %env7586755 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588149 = getelementptr inbounds i64, i64* %envptr7588148, i64 2            ; &envptr7588148[2]
  %Z94$y = load i64, i64* %envptr7588149, align 8                                    ; load; *envptr7588149
  %envptr7588150 = inttoptr i64 %env7586755 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588151 = getelementptr inbounds i64, i64* %envptr7588150, i64 1            ; &envptr7588150[1]
  %a7581063 = load i64, i64* %envptr7588151, align 8                                 ; load; *envptr7588151
  %_957581259 = call i64 @prim_car(i64 %rvp7583964)                                  ; call prim_car
  %rvp7583963 = call i64 @prim_cdr(i64 %rvp7583964)                                  ; call prim_cdr
  %a7581066 = call i64 @prim_car(i64 %rvp7583963)                                    ; call prim_car
  %na7583931 = call i64 @prim_cdr(i64 %rvp7583963)                                   ; call prim_cdr
  %cloptr7588152 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7588154 = getelementptr inbounds i64, i64* %cloptr7588152, i64 1              ; &eptr7588154[1]
  %eptr7588155 = getelementptr inbounds i64, i64* %cloptr7588152, i64 2              ; &eptr7588155[2]
  %eptr7588156 = getelementptr inbounds i64, i64* %cloptr7588152, i64 3              ; &eptr7588156[3]
  %eptr7588157 = getelementptr inbounds i64, i64* %cloptr7588152, i64 4              ; &eptr7588157[4]
  %eptr7588158 = getelementptr inbounds i64, i64* %cloptr7588152, i64 5              ; &eptr7588158[5]
  %eptr7588159 = getelementptr inbounds i64, i64* %cloptr7588152, i64 6              ; &eptr7588159[6]
  %eptr7588160 = getelementptr inbounds i64, i64* %cloptr7588152, i64 7              ; &eptr7588160[7]
  store i64 %a7581063, i64* %eptr7588154                                             ; *eptr7588154 = %a7581063
  store i64 %a7581066, i64* %eptr7588155                                             ; *eptr7588155 = %a7581066
  store i64 %Z94$y, i64* %eptr7588156                                                ; *eptr7588156 = %Z94$y
  store i64 %cKx$ly, i64* %eptr7588157                                               ; *eptr7588157 = %cKx$ly
  store i64 %fuh$lx, i64* %eptr7588158                                               ; *eptr7588158 = %fuh$lx
  store i64 %NdK$_37drop, i64* %eptr7588159                                          ; *eptr7588159 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7588160                                          ; *eptr7588160 = %cont7581252
  %eptr7588153 = getelementptr inbounds i64, i64* %cloptr7588152, i64 0              ; &cloptr7588152[0]
  %f7588161 = ptrtoint void(i64,i64)* @lam7586752 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588161, i64* %eptr7588153                                             ; store fptr
  %arg7581931 = ptrtoint i64* %cloptr7588152 to i64                                  ; closure cast; i64* -> i64
  %rva7583962 = add i64 0, 0                                                         ; quoted ()
  %rva7583961 = call i64 @prim_cons(i64 %fuh$lx, i64 %rva7583962)                    ; call prim_cons
  %rva7583960 = call i64 @prim_cons(i64 %cKx$ly, i64 %rva7583961)                    ; call prim_cons
  %rva7583959 = call i64 @prim_cons(i64 %arg7581931, i64 %rva7583960)                ; call prim_cons
  %cloptr7588162 = inttoptr i64 %AhN$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588163 = getelementptr inbounds i64, i64* %cloptr7588162, i64 0             ; &cloptr7588162[0]
  %f7588165 = load i64, i64* %i0ptr7588163, align 8                                  ; load; *i0ptr7588163
  %fptr7588164 = inttoptr i64 %f7588165 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588164(i64 %AhN$_37_62, i64 %rva7583959)           ; tail call
  ret void
}


define void @lam7586752(i64 %env7586753, i64 %rvp7583958) {
  %envptr7588166 = inttoptr i64 %env7586753 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588167 = getelementptr inbounds i64, i64* %envptr7588166, i64 7            ; &envptr7588166[7]
  %cont7581252 = load i64, i64* %envptr7588167, align 8                              ; load; *envptr7588167
  %envptr7588168 = inttoptr i64 %env7586753 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588169 = getelementptr inbounds i64, i64* %envptr7588168, i64 6            ; &envptr7588168[6]
  %NdK$_37drop = load i64, i64* %envptr7588169, align 8                              ; load; *envptr7588169
  %envptr7588170 = inttoptr i64 %env7586753 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588171 = getelementptr inbounds i64, i64* %envptr7588170, i64 5            ; &envptr7588170[5]
  %fuh$lx = load i64, i64* %envptr7588171, align 8                                   ; load; *envptr7588171
  %envptr7588172 = inttoptr i64 %env7586753 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588173 = getelementptr inbounds i64, i64* %envptr7588172, i64 4            ; &envptr7588172[4]
  %cKx$ly = load i64, i64* %envptr7588173, align 8                                   ; load; *envptr7588173
  %envptr7588174 = inttoptr i64 %env7586753 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588175 = getelementptr inbounds i64, i64* %envptr7588174, i64 3            ; &envptr7588174[3]
  %Z94$y = load i64, i64* %envptr7588175, align 8                                    ; load; *envptr7588175
  %envptr7588176 = inttoptr i64 %env7586753 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588177 = getelementptr inbounds i64, i64* %envptr7588176, i64 2            ; &envptr7588176[2]
  %a7581066 = load i64, i64* %envptr7588177, align 8                                 ; load; *envptr7588177
  %envptr7588178 = inttoptr i64 %env7586753 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588179 = getelementptr inbounds i64, i64* %envptr7588178, i64 1            ; &envptr7588178[1]
  %a7581063 = load i64, i64* %envptr7588179, align 8                                 ; load; *envptr7588179
  %_957581260 = call i64 @prim_car(i64 %rvp7583958)                                  ; call prim_car
  %rvp7583957 = call i64 @prim_cdr(i64 %rvp7583958)                                  ; call prim_cdr
  %a7581067 = call i64 @prim_car(i64 %rvp7583957)                                    ; call prim_car
  %na7583933 = call i64 @prim_cdr(i64 %rvp7583957)                                   ; call prim_cdr
  %cmp7588180 = icmp eq i64 %a7581067, 15                                            ; false?
  br i1 %cmp7588180, label %else7588182, label %then7588181                          ; if

then7588181:
  %a7581068 = call i64 @prim__45(i64 %cKx$ly, i64 %fuh$lx)                           ; call prim__45
  %cloptr7588183 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588185 = getelementptr inbounds i64, i64* %cloptr7588183, i64 1              ; &eptr7588185[1]
  %eptr7588186 = getelementptr inbounds i64, i64* %cloptr7588183, i64 2              ; &eptr7588186[2]
  %eptr7588187 = getelementptr inbounds i64, i64* %cloptr7588183, i64 3              ; &eptr7588187[3]
  store i64 %a7581063, i64* %eptr7588185                                             ; *eptr7588185 = %a7581063
  store i64 %a7581066, i64* %eptr7588186                                             ; *eptr7588186 = %a7581066
  store i64 %cont7581252, i64* %eptr7588187                                          ; *eptr7588187 = %cont7581252
  %eptr7588184 = getelementptr inbounds i64, i64* %cloptr7588183, i64 0              ; &cloptr7588183[0]
  %f7588188 = ptrtoint void(i64,i64)* @lam7586745 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588188, i64* %eptr7588184                                             ; store fptr
  %arg7581937 = ptrtoint i64* %cloptr7588183 to i64                                  ; closure cast; i64* -> i64
  %rva7583945 = add i64 0, 0                                                         ; quoted ()
  %rva7583944 = call i64 @prim_cons(i64 %a7581068, i64 %rva7583945)                  ; call prim_cons
  %rva7583943 = call i64 @prim_cons(i64 %Z94$y, i64 %rva7583944)                     ; call prim_cons
  %rva7583942 = call i64 @prim_cons(i64 %arg7581937, i64 %rva7583943)                ; call prim_cons
  %cloptr7588189 = inttoptr i64 %NdK$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588190 = getelementptr inbounds i64, i64* %cloptr7588189, i64 0             ; &cloptr7588189[0]
  %f7588192 = load i64, i64* %i0ptr7588190, align 8                                  ; load; *i0ptr7588190
  %fptr7588191 = inttoptr i64 %f7588192 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588191(i64 %NdK$_37drop, i64 %rva7583942)          ; tail call
  ret void

else7588182:
  %cloptr7588193 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588195 = getelementptr inbounds i64, i64* %cloptr7588193, i64 1              ; &eptr7588195[1]
  %eptr7588196 = getelementptr inbounds i64, i64* %cloptr7588193, i64 2              ; &eptr7588196[2]
  %eptr7588197 = getelementptr inbounds i64, i64* %cloptr7588193, i64 3              ; &eptr7588197[3]
  store i64 %a7581063, i64* %eptr7588195                                             ; *eptr7588195 = %a7581063
  store i64 %a7581066, i64* %eptr7588196                                             ; *eptr7588196 = %a7581066
  store i64 %cont7581252, i64* %eptr7588197                                          ; *eptr7588197 = %cont7581252
  %eptr7588194 = getelementptr inbounds i64, i64* %cloptr7588193, i64 0              ; &cloptr7588193[0]
  %f7588198 = ptrtoint void(i64,i64)* @lam7586750 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588198, i64* %eptr7588194                                             ; store fptr
  %arg7581945 = ptrtoint i64* %cloptr7588193 to i64                                  ; closure cast; i64* -> i64
  %arg7581944 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583956 = add i64 0, 0                                                         ; quoted ()
  %rva7583955 = call i64 @prim_cons(i64 %Z94$y, i64 %rva7583956)                     ; call prim_cons
  %rva7583954 = call i64 @prim_cons(i64 %arg7581944, i64 %rva7583955)                ; call prim_cons
  %cloptr7588199 = inttoptr i64 %arg7581945 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588200 = getelementptr inbounds i64, i64* %cloptr7588199, i64 0             ; &cloptr7588199[0]
  %f7588202 = load i64, i64* %i0ptr7588200, align 8                                  ; load; *i0ptr7588200
  %fptr7588201 = inttoptr i64 %f7588202 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588201(i64 %arg7581945, i64 %rva7583954)           ; tail call
  ret void
}


define void @lam7586750(i64 %env7586751, i64 %rvp7583953) {
  %envptr7588203 = inttoptr i64 %env7586751 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588204 = getelementptr inbounds i64, i64* %envptr7588203, i64 3            ; &envptr7588203[3]
  %cont7581252 = load i64, i64* %envptr7588204, align 8                              ; load; *envptr7588204
  %envptr7588205 = inttoptr i64 %env7586751 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588206 = getelementptr inbounds i64, i64* %envptr7588205, i64 2            ; &envptr7588205[2]
  %a7581066 = load i64, i64* %envptr7588206, align 8                                 ; load; *envptr7588206
  %envptr7588207 = inttoptr i64 %env7586751 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588208 = getelementptr inbounds i64, i64* %envptr7588207, i64 1            ; &envptr7588207[1]
  %a7581063 = load i64, i64* %envptr7588208, align 8                                 ; load; *envptr7588208
  %_957581261 = call i64 @prim_car(i64 %rvp7583953)                                  ; call prim_car
  %rvp7583952 = call i64 @prim_cdr(i64 %rvp7583953)                                  ; call prim_cdr
  %a7581069 = call i64 @prim_car(i64 %rvp7583952)                                    ; call prim_car
  %na7583947 = call i64 @prim_cdr(i64 %rvp7583952)                                   ; call prim_cdr
  %rva7583951 = add i64 0, 0                                                         ; quoted ()
  %rva7583950 = call i64 @prim_cons(i64 %a7581069, i64 %rva7583951)                  ; call prim_cons
  %rva7583949 = call i64 @prim_cons(i64 %a7581066, i64 %rva7583950)                  ; call prim_cons
  %rva7583948 = call i64 @prim_cons(i64 %cont7581252, i64 %rva7583949)               ; call prim_cons
  %cloptr7588209 = inttoptr i64 %a7581063 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588210 = getelementptr inbounds i64, i64* %cloptr7588209, i64 0             ; &cloptr7588209[0]
  %f7588212 = load i64, i64* %i0ptr7588210, align 8                                  ; load; *i0ptr7588210
  %fptr7588211 = inttoptr i64 %f7588212 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588211(i64 %a7581063, i64 %rva7583948)             ; tail call
  ret void
}


define void @lam7586745(i64 %env7586746, i64 %rvp7583941) {
  %envptr7588213 = inttoptr i64 %env7586746 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588214 = getelementptr inbounds i64, i64* %envptr7588213, i64 3            ; &envptr7588213[3]
  %cont7581252 = load i64, i64* %envptr7588214, align 8                              ; load; *envptr7588214
  %envptr7588215 = inttoptr i64 %env7586746 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588216 = getelementptr inbounds i64, i64* %envptr7588215, i64 2            ; &envptr7588215[2]
  %a7581066 = load i64, i64* %envptr7588216, align 8                                 ; load; *envptr7588216
  %envptr7588217 = inttoptr i64 %env7586746 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588218 = getelementptr inbounds i64, i64* %envptr7588217, i64 1            ; &envptr7588217[1]
  %a7581063 = load i64, i64* %envptr7588218, align 8                                 ; load; *envptr7588218
  %_957581261 = call i64 @prim_car(i64 %rvp7583941)                                  ; call prim_car
  %rvp7583940 = call i64 @prim_cdr(i64 %rvp7583941)                                  ; call prim_cdr
  %a7581069 = call i64 @prim_car(i64 %rvp7583940)                                    ; call prim_car
  %na7583935 = call i64 @prim_cdr(i64 %rvp7583940)                                   ; call prim_cdr
  %rva7583939 = add i64 0, 0                                                         ; quoted ()
  %rva7583938 = call i64 @prim_cons(i64 %a7581069, i64 %rva7583939)                  ; call prim_cons
  %rva7583937 = call i64 @prim_cons(i64 %a7581066, i64 %rva7583938)                  ; call prim_cons
  %rva7583936 = call i64 @prim_cons(i64 %cont7581252, i64 %rva7583937)               ; call prim_cons
  %cloptr7588219 = inttoptr i64 %a7581063 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588220 = getelementptr inbounds i64, i64* %cloptr7588219, i64 0             ; &cloptr7588219[0]
  %f7588222 = load i64, i64* %i0ptr7588220, align 8                                  ; load; *i0ptr7588220
  %fptr7588221 = inttoptr i64 %f7588222 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588221(i64 %a7581063, i64 %rva7583936)             ; tail call
  ret void
}


define void @lam7586738(i64 %env7586739, i64 %rvp7583925) {
  %envptr7588223 = inttoptr i64 %env7586739 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588224 = getelementptr inbounds i64, i64* %envptr7588223, i64 7            ; &envptr7588223[7]
  %cont7581252 = load i64, i64* %envptr7588224, align 8                              ; load; *envptr7588224
  %envptr7588225 = inttoptr i64 %env7586739 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588226 = getelementptr inbounds i64, i64* %envptr7588225, i64 6            ; &envptr7588225[6]
  %NdK$_37drop = load i64, i64* %envptr7588226, align 8                              ; load; *envptr7588226
  %envptr7588227 = inttoptr i64 %env7586739 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588228 = getelementptr inbounds i64, i64* %envptr7588227, i64 5            ; &envptr7588227[5]
  %AhN$_37_62 = load i64, i64* %envptr7588228, align 8                               ; load; *envptr7588228
  %envptr7588229 = inttoptr i64 %env7586739 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588230 = getelementptr inbounds i64, i64* %envptr7588229, i64 4            ; &envptr7588229[4]
  %fuh$lx = load i64, i64* %envptr7588230, align 8                                   ; load; *envptr7588230
  %envptr7588231 = inttoptr i64 %env7586739 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588232 = getelementptr inbounds i64, i64* %envptr7588231, i64 3            ; &envptr7588231[3]
  %cKx$ly = load i64, i64* %envptr7588232, align 8                                   ; load; *envptr7588232
  %envptr7588233 = inttoptr i64 %env7586739 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588234 = getelementptr inbounds i64, i64* %envptr7588233, i64 2            ; &envptr7588233[2]
  %Z94$y = load i64, i64* %envptr7588234, align 8                                    ; load; *envptr7588234
  %envptr7588235 = inttoptr i64 %env7586739 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588236 = getelementptr inbounds i64, i64* %envptr7588235, i64 1            ; &envptr7588235[1]
  %a7581063 = load i64, i64* %envptr7588236, align 8                                 ; load; *envptr7588236
  %_957581259 = call i64 @prim_car(i64 %rvp7583925)                                  ; call prim_car
  %rvp7583924 = call i64 @prim_cdr(i64 %rvp7583925)                                  ; call prim_cdr
  %a7581066 = call i64 @prim_car(i64 %rvp7583924)                                    ; call prim_car
  %na7583892 = call i64 @prim_cdr(i64 %rvp7583924)                                   ; call prim_cdr
  %cloptr7588237 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7588239 = getelementptr inbounds i64, i64* %cloptr7588237, i64 1              ; &eptr7588239[1]
  %eptr7588240 = getelementptr inbounds i64, i64* %cloptr7588237, i64 2              ; &eptr7588240[2]
  %eptr7588241 = getelementptr inbounds i64, i64* %cloptr7588237, i64 3              ; &eptr7588241[3]
  %eptr7588242 = getelementptr inbounds i64, i64* %cloptr7588237, i64 4              ; &eptr7588242[4]
  %eptr7588243 = getelementptr inbounds i64, i64* %cloptr7588237, i64 5              ; &eptr7588243[5]
  %eptr7588244 = getelementptr inbounds i64, i64* %cloptr7588237, i64 6              ; &eptr7588244[6]
  %eptr7588245 = getelementptr inbounds i64, i64* %cloptr7588237, i64 7              ; &eptr7588245[7]
  store i64 %a7581063, i64* %eptr7588239                                             ; *eptr7588239 = %a7581063
  store i64 %a7581066, i64* %eptr7588240                                             ; *eptr7588240 = %a7581066
  store i64 %Z94$y, i64* %eptr7588241                                                ; *eptr7588241 = %Z94$y
  store i64 %cKx$ly, i64* %eptr7588242                                               ; *eptr7588242 = %cKx$ly
  store i64 %fuh$lx, i64* %eptr7588243                                               ; *eptr7588243 = %fuh$lx
  store i64 %NdK$_37drop, i64* %eptr7588244                                          ; *eptr7588244 = %NdK$_37drop
  store i64 %cont7581252, i64* %eptr7588245                                          ; *eptr7588245 = %cont7581252
  %eptr7588238 = getelementptr inbounds i64, i64* %cloptr7588237, i64 0              ; &cloptr7588237[0]
  %f7588246 = ptrtoint void(i64,i64)* @lam7586736 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588246, i64* %eptr7588238                                             ; store fptr
  %arg7581907 = ptrtoint i64* %cloptr7588237 to i64                                  ; closure cast; i64* -> i64
  %rva7583923 = add i64 0, 0                                                         ; quoted ()
  %rva7583922 = call i64 @prim_cons(i64 %fuh$lx, i64 %rva7583923)                    ; call prim_cons
  %rva7583921 = call i64 @prim_cons(i64 %cKx$ly, i64 %rva7583922)                    ; call prim_cons
  %rva7583920 = call i64 @prim_cons(i64 %arg7581907, i64 %rva7583921)                ; call prim_cons
  %cloptr7588247 = inttoptr i64 %AhN$_37_62 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588248 = getelementptr inbounds i64, i64* %cloptr7588247, i64 0             ; &cloptr7588247[0]
  %f7588250 = load i64, i64* %i0ptr7588248, align 8                                  ; load; *i0ptr7588248
  %fptr7588249 = inttoptr i64 %f7588250 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588249(i64 %AhN$_37_62, i64 %rva7583920)           ; tail call
  ret void
}


define void @lam7586736(i64 %env7586737, i64 %rvp7583919) {
  %envptr7588251 = inttoptr i64 %env7586737 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588252 = getelementptr inbounds i64, i64* %envptr7588251, i64 7            ; &envptr7588251[7]
  %cont7581252 = load i64, i64* %envptr7588252, align 8                              ; load; *envptr7588252
  %envptr7588253 = inttoptr i64 %env7586737 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588254 = getelementptr inbounds i64, i64* %envptr7588253, i64 6            ; &envptr7588253[6]
  %NdK$_37drop = load i64, i64* %envptr7588254, align 8                              ; load; *envptr7588254
  %envptr7588255 = inttoptr i64 %env7586737 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588256 = getelementptr inbounds i64, i64* %envptr7588255, i64 5            ; &envptr7588255[5]
  %fuh$lx = load i64, i64* %envptr7588256, align 8                                   ; load; *envptr7588256
  %envptr7588257 = inttoptr i64 %env7586737 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588258 = getelementptr inbounds i64, i64* %envptr7588257, i64 4            ; &envptr7588257[4]
  %cKx$ly = load i64, i64* %envptr7588258, align 8                                   ; load; *envptr7588258
  %envptr7588259 = inttoptr i64 %env7586737 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588260 = getelementptr inbounds i64, i64* %envptr7588259, i64 3            ; &envptr7588259[3]
  %Z94$y = load i64, i64* %envptr7588260, align 8                                    ; load; *envptr7588260
  %envptr7588261 = inttoptr i64 %env7586737 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588262 = getelementptr inbounds i64, i64* %envptr7588261, i64 2            ; &envptr7588261[2]
  %a7581066 = load i64, i64* %envptr7588262, align 8                                 ; load; *envptr7588262
  %envptr7588263 = inttoptr i64 %env7586737 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588264 = getelementptr inbounds i64, i64* %envptr7588263, i64 1            ; &envptr7588263[1]
  %a7581063 = load i64, i64* %envptr7588264, align 8                                 ; load; *envptr7588264
  %_957581260 = call i64 @prim_car(i64 %rvp7583919)                                  ; call prim_car
  %rvp7583918 = call i64 @prim_cdr(i64 %rvp7583919)                                  ; call prim_cdr
  %a7581067 = call i64 @prim_car(i64 %rvp7583918)                                    ; call prim_car
  %na7583894 = call i64 @prim_cdr(i64 %rvp7583918)                                   ; call prim_cdr
  %cmp7588265 = icmp eq i64 %a7581067, 15                                            ; false?
  br i1 %cmp7588265, label %else7588267, label %then7588266                          ; if

then7588266:
  %a7581068 = call i64 @prim__45(i64 %cKx$ly, i64 %fuh$lx)                           ; call prim__45
  %cloptr7588268 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588270 = getelementptr inbounds i64, i64* %cloptr7588268, i64 1              ; &eptr7588270[1]
  %eptr7588271 = getelementptr inbounds i64, i64* %cloptr7588268, i64 2              ; &eptr7588271[2]
  %eptr7588272 = getelementptr inbounds i64, i64* %cloptr7588268, i64 3              ; &eptr7588272[3]
  store i64 %a7581063, i64* %eptr7588270                                             ; *eptr7588270 = %a7581063
  store i64 %a7581066, i64* %eptr7588271                                             ; *eptr7588271 = %a7581066
  store i64 %cont7581252, i64* %eptr7588272                                          ; *eptr7588272 = %cont7581252
  %eptr7588269 = getelementptr inbounds i64, i64* %cloptr7588268, i64 0              ; &cloptr7588268[0]
  %f7588273 = ptrtoint void(i64,i64)* @lam7586729 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588273, i64* %eptr7588269                                             ; store fptr
  %arg7581913 = ptrtoint i64* %cloptr7588268 to i64                                  ; closure cast; i64* -> i64
  %rva7583906 = add i64 0, 0                                                         ; quoted ()
  %rva7583905 = call i64 @prim_cons(i64 %a7581068, i64 %rva7583906)                  ; call prim_cons
  %rva7583904 = call i64 @prim_cons(i64 %Z94$y, i64 %rva7583905)                     ; call prim_cons
  %rva7583903 = call i64 @prim_cons(i64 %arg7581913, i64 %rva7583904)                ; call prim_cons
  %cloptr7588274 = inttoptr i64 %NdK$_37drop to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588275 = getelementptr inbounds i64, i64* %cloptr7588274, i64 0             ; &cloptr7588274[0]
  %f7588277 = load i64, i64* %i0ptr7588275, align 8                                  ; load; *i0ptr7588275
  %fptr7588276 = inttoptr i64 %f7588277 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588276(i64 %NdK$_37drop, i64 %rva7583903)          ; tail call
  ret void

else7588267:
  %cloptr7588278 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588280 = getelementptr inbounds i64, i64* %cloptr7588278, i64 1              ; &eptr7588280[1]
  %eptr7588281 = getelementptr inbounds i64, i64* %cloptr7588278, i64 2              ; &eptr7588281[2]
  %eptr7588282 = getelementptr inbounds i64, i64* %cloptr7588278, i64 3              ; &eptr7588282[3]
  store i64 %a7581063, i64* %eptr7588280                                             ; *eptr7588280 = %a7581063
  store i64 %a7581066, i64* %eptr7588281                                             ; *eptr7588281 = %a7581066
  store i64 %cont7581252, i64* %eptr7588282                                          ; *eptr7588282 = %cont7581252
  %eptr7588279 = getelementptr inbounds i64, i64* %cloptr7588278, i64 0              ; &cloptr7588278[0]
  %f7588283 = ptrtoint void(i64,i64)* @lam7586734 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588283, i64* %eptr7588279                                             ; store fptr
  %arg7581921 = ptrtoint i64* %cloptr7588278 to i64                                  ; closure cast; i64* -> i64
  %arg7581920 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7583917 = add i64 0, 0                                                         ; quoted ()
  %rva7583916 = call i64 @prim_cons(i64 %Z94$y, i64 %rva7583917)                     ; call prim_cons
  %rva7583915 = call i64 @prim_cons(i64 %arg7581920, i64 %rva7583916)                ; call prim_cons
  %cloptr7588284 = inttoptr i64 %arg7581921 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588285 = getelementptr inbounds i64, i64* %cloptr7588284, i64 0             ; &cloptr7588284[0]
  %f7588287 = load i64, i64* %i0ptr7588285, align 8                                  ; load; *i0ptr7588285
  %fptr7588286 = inttoptr i64 %f7588287 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588286(i64 %arg7581921, i64 %rva7583915)           ; tail call
  ret void
}


define void @lam7586734(i64 %env7586735, i64 %rvp7583914) {
  %envptr7588288 = inttoptr i64 %env7586735 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588289 = getelementptr inbounds i64, i64* %envptr7588288, i64 3            ; &envptr7588288[3]
  %cont7581252 = load i64, i64* %envptr7588289, align 8                              ; load; *envptr7588289
  %envptr7588290 = inttoptr i64 %env7586735 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588291 = getelementptr inbounds i64, i64* %envptr7588290, i64 2            ; &envptr7588290[2]
  %a7581066 = load i64, i64* %envptr7588291, align 8                                 ; load; *envptr7588291
  %envptr7588292 = inttoptr i64 %env7586735 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588293 = getelementptr inbounds i64, i64* %envptr7588292, i64 1            ; &envptr7588292[1]
  %a7581063 = load i64, i64* %envptr7588293, align 8                                 ; load; *envptr7588293
  %_957581261 = call i64 @prim_car(i64 %rvp7583914)                                  ; call prim_car
  %rvp7583913 = call i64 @prim_cdr(i64 %rvp7583914)                                  ; call prim_cdr
  %a7581069 = call i64 @prim_car(i64 %rvp7583913)                                    ; call prim_car
  %na7583908 = call i64 @prim_cdr(i64 %rvp7583913)                                   ; call prim_cdr
  %rva7583912 = add i64 0, 0                                                         ; quoted ()
  %rva7583911 = call i64 @prim_cons(i64 %a7581069, i64 %rva7583912)                  ; call prim_cons
  %rva7583910 = call i64 @prim_cons(i64 %a7581066, i64 %rva7583911)                  ; call prim_cons
  %rva7583909 = call i64 @prim_cons(i64 %cont7581252, i64 %rva7583910)               ; call prim_cons
  %cloptr7588294 = inttoptr i64 %a7581063 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588295 = getelementptr inbounds i64, i64* %cloptr7588294, i64 0             ; &cloptr7588294[0]
  %f7588297 = load i64, i64* %i0ptr7588295, align 8                                  ; load; *i0ptr7588295
  %fptr7588296 = inttoptr i64 %f7588297 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588296(i64 %a7581063, i64 %rva7583909)             ; tail call
  ret void
}


define void @lam7586729(i64 %env7586730, i64 %rvp7583902) {
  %envptr7588298 = inttoptr i64 %env7586730 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588299 = getelementptr inbounds i64, i64* %envptr7588298, i64 3            ; &envptr7588298[3]
  %cont7581252 = load i64, i64* %envptr7588299, align 8                              ; load; *envptr7588299
  %envptr7588300 = inttoptr i64 %env7586730 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588301 = getelementptr inbounds i64, i64* %envptr7588300, i64 2            ; &envptr7588300[2]
  %a7581066 = load i64, i64* %envptr7588301, align 8                                 ; load; *envptr7588301
  %envptr7588302 = inttoptr i64 %env7586730 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588303 = getelementptr inbounds i64, i64* %envptr7588302, i64 1            ; &envptr7588302[1]
  %a7581063 = load i64, i64* %envptr7588303, align 8                                 ; load; *envptr7588303
  %_957581261 = call i64 @prim_car(i64 %rvp7583902)                                  ; call prim_car
  %rvp7583901 = call i64 @prim_cdr(i64 %rvp7583902)                                  ; call prim_cdr
  %a7581069 = call i64 @prim_car(i64 %rvp7583901)                                    ; call prim_car
  %na7583896 = call i64 @prim_cdr(i64 %rvp7583901)                                   ; call prim_cdr
  %rva7583900 = add i64 0, 0                                                         ; quoted ()
  %rva7583899 = call i64 @prim_cons(i64 %a7581069, i64 %rva7583900)                  ; call prim_cons
  %rva7583898 = call i64 @prim_cons(i64 %a7581066, i64 %rva7583899)                  ; call prim_cons
  %rva7583897 = call i64 @prim_cons(i64 %cont7581252, i64 %rva7583898)               ; call prim_cons
  %cloptr7588304 = inttoptr i64 %a7581063 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588305 = getelementptr inbounds i64, i64* %cloptr7588304, i64 0             ; &cloptr7588304[0]
  %f7588307 = load i64, i64* %i0ptr7588305, align 8                                  ; load; *i0ptr7588305
  %fptr7588306 = inttoptr i64 %f7588307 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588306(i64 %a7581063, i64 %rva7583897)             ; tail call
  ret void
}


define void @lam7586717(i64 %env7586718, i64 %rvp7584482) {
  %envptr7588308 = inttoptr i64 %env7586718 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588309 = getelementptr inbounds i64, i64* %envptr7588308, i64 2            ; &envptr7588308[2]
  %vB2$common_45tail = load i64, i64* %envptr7588309, align 8                        ; load; *envptr7588309
  %envptr7588310 = inttoptr i64 %env7586718 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588311 = getelementptr inbounds i64, i64* %envptr7588310, i64 1            ; &envptr7588310[1]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588311, align 8                      ; load; *envptr7588311
  %cont7581267 = call i64 @prim_car(i64 %rvp7584482)                                 ; call prim_car
  %rvp7584481 = call i64 @prim_cdr(i64 %rvp7584482)                                  ; call prim_cdr
  %gKR$new = call i64 @prim_car(i64 %rvp7584481)                                     ; call prim_car
  %na7584000 = call i64 @prim_cdr(i64 %rvp7584481)                                   ; call prim_cdr
  %arg7581954 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581070 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7581954) ; call prim_vector_45ref
  %a7581071 = call i64 @prim_eq_63(i64 %gKR$new, i64 %a7581070)                      ; call prim_eq_63
  %a7581072 = call i64 @prim_not(i64 %a7581071)                                      ; call prim_not
  %cmp7588312 = icmp eq i64 %a7581072, 15                                            ; false?
  br i1 %cmp7588312, label %else7588314, label %then7588313                          ; if

then7588313:
  %a7581073 = call i64 @prim_procedure_63(i64 %vB2$common_45tail)                    ; call prim_procedure_63
  %cmp7588315 = icmp eq i64 %a7581073, 15                                            ; false?
  br i1 %cmp7588315, label %else7588317, label %then7588316                          ; if

then7588316:
  %arg7581960 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581074 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7581960) ; call prim_vector_45ref
  %cloptr7588318 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588320 = getelementptr inbounds i64, i64* %cloptr7588318, i64 1              ; &eptr7588320[1]
  %eptr7588321 = getelementptr inbounds i64, i64* %cloptr7588318, i64 2              ; &eptr7588321[2]
  %eptr7588322 = getelementptr inbounds i64, i64* %cloptr7588318, i64 3              ; &eptr7588322[3]
  store i64 %gKR$new, i64* %eptr7588320                                              ; *eptr7588320 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588321                                  ; *eptr7588321 = %CPS$_37wind_45stack
  store i64 %cont7581267, i64* %eptr7588322                                          ; *eptr7588322 = %cont7581267
  %eptr7588319 = getelementptr inbounds i64, i64* %cloptr7588318, i64 0              ; &cloptr7588318[0]
  %f7588323 = ptrtoint void(i64,i64)* @lam7586531 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588323, i64* %eptr7588319                                             ; store fptr
  %arg7581964 = ptrtoint i64* %cloptr7588318 to i64                                  ; closure cast; i64* -> i64
  %rva7584239 = add i64 0, 0                                                         ; quoted ()
  %rva7584238 = call i64 @prim_cons(i64 %a7581074, i64 %rva7584239)                  ; call prim_cons
  %rva7584237 = call i64 @prim_cons(i64 %gKR$new, i64 %rva7584238)                   ; call prim_cons
  %rva7584236 = call i64 @prim_cons(i64 %arg7581964, i64 %rva7584237)                ; call prim_cons
  %cloptr7588324 = inttoptr i64 %vB2$common_45tail to i64*                           ; closure/env cast; i64 -> i64*
  %i0ptr7588325 = getelementptr inbounds i64, i64* %cloptr7588324, i64 0             ; &cloptr7588324[0]
  %f7588327 = load i64, i64* %i0ptr7588325, align 8                                  ; load; *i0ptr7588325
  %fptr7588326 = inttoptr i64 %f7588327 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588326(i64 %vB2$common_45tail, i64 %rva7584236)    ; tail call
  ret void

else7588317:
  %arg7582229 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588328, i32 0, i32 0)); quoted string
  %retprim7581296 = call i64 @prim_halt(i64 %arg7582229)                             ; call prim_halt
  %cloptr7588329 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588331 = getelementptr inbounds i64, i64* %cloptr7588329, i64 1              ; &eptr7588331[1]
  %eptr7588332 = getelementptr inbounds i64, i64* %cloptr7588329, i64 2              ; &eptr7588332[2]
  %eptr7588333 = getelementptr inbounds i64, i64* %cloptr7588329, i64 3              ; &eptr7588333[3]
  store i64 %gKR$new, i64* %eptr7588331                                              ; *eptr7588331 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588332                                  ; *eptr7588332 = %CPS$_37wind_45stack
  store i64 %cont7581267, i64* %eptr7588333                                          ; *eptr7588333 = %cont7581267
  %eptr7588330 = getelementptr inbounds i64, i64* %cloptr7588329, i64 0              ; &cloptr7588329[0]
  %f7588334 = ptrtoint void(i64,i64)* @lam7586711 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588334, i64* %eptr7588330                                             ; store fptr
  %arg7582232 = ptrtoint i64* %cloptr7588329 to i64                                  ; closure cast; i64* -> i64
  %arg7582231 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584477 = add i64 0, 0                                                         ; quoted ()
  %rva7584476 = call i64 @prim_cons(i64 %retprim7581296, i64 %rva7584477)            ; call prim_cons
  %rva7584475 = call i64 @prim_cons(i64 %arg7582231, i64 %rva7584476)                ; call prim_cons
  %cloptr7588335 = inttoptr i64 %arg7582232 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588336 = getelementptr inbounds i64, i64* %cloptr7588335, i64 0             ; &cloptr7588335[0]
  %f7588338 = load i64, i64* %i0ptr7588336, align 8                                  ; load; *i0ptr7588336
  %fptr7588337 = inttoptr i64 %f7588338 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588337(i64 %arg7582232, i64 %rva7584475)           ; tail call
  ret void

else7588314:
  %retprim7581297 = call i64 @prim_void()                                            ; call prim_void
  %arg7582497 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584480 = add i64 0, 0                                                         ; quoted ()
  %rva7584479 = call i64 @prim_cons(i64 %retprim7581297, i64 %rva7584480)            ; call prim_cons
  %rva7584478 = call i64 @prim_cons(i64 %arg7582497, i64 %rva7584479)                ; call prim_cons
  %cloptr7588339 = inttoptr i64 %cont7581267 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588340 = getelementptr inbounds i64, i64* %cloptr7588339, i64 0             ; &cloptr7588339[0]
  %f7588342 = load i64, i64* %i0ptr7588340, align 8                                  ; load; *i0ptr7588340
  %fptr7588341 = inttoptr i64 %f7588342 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588341(i64 %cont7581267, i64 %rva7584478)          ; tail call
  ret void
}


define void @lam7586711(i64 %env7586712, i64 %rvp7584474) {
  %envptr7588343 = inttoptr i64 %env7586712 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588344 = getelementptr inbounds i64, i64* %envptr7588343, i64 3            ; &envptr7588343[3]
  %cont7581267 = load i64, i64* %envptr7588344, align 8                              ; load; *envptr7588344
  %envptr7588345 = inttoptr i64 %env7586712 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588346 = getelementptr inbounds i64, i64* %envptr7588345, i64 2            ; &envptr7588345[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588346, align 8                      ; load; *envptr7588346
  %envptr7588347 = inttoptr i64 %env7586712 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588348 = getelementptr inbounds i64, i64* %envptr7588347, i64 1            ; &envptr7588347[1]
  %gKR$new = load i64, i64* %envptr7588348, align 8                                  ; load; *envptr7588348
  %_957581268 = call i64 @prim_car(i64 %rvp7584474)                                  ; call prim_car
  %rvp7584473 = call i64 @prim_cdr(i64 %rvp7584474)                                  ; call prim_cdr
  %NkA$tail = call i64 @prim_car(i64 %rvp7584473)                                    ; call prim_car
  %na7584241 = call i64 @prim_cdr(i64 %rvp7584473)                                   ; call prim_cdr
  %cloptr7588349 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7588350 = getelementptr inbounds i64, i64* %cloptr7588349, i64 0              ; &cloptr7588349[0]
  %f7588351 = ptrtoint void(i64,i64)* @lam7586709 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588351, i64* %eptr7588350                                             ; store fptr
  %arg7582234 = ptrtoint i64* %cloptr7588349 to i64                                  ; closure cast; i64* -> i64
  %cloptr7588352 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588354 = getelementptr inbounds i64, i64* %cloptr7588352, i64 1              ; &eptr7588354[1]
  %eptr7588355 = getelementptr inbounds i64, i64* %cloptr7588352, i64 2              ; &eptr7588355[2]
  %eptr7588356 = getelementptr inbounds i64, i64* %cloptr7588352, i64 3              ; &eptr7588356[3]
  %eptr7588357 = getelementptr inbounds i64, i64* %cloptr7588352, i64 4              ; &eptr7588357[4]
  store i64 %gKR$new, i64* %eptr7588354                                              ; *eptr7588354 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588355                                  ; *eptr7588355 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588356                                             ; *eptr7588356 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588357                                          ; *eptr7588357 = %cont7581267
  %eptr7588353 = getelementptr inbounds i64, i64* %cloptr7588352, i64 0              ; &cloptr7588352[0]
  %f7588358 = ptrtoint void(i64,i64)* @lam7586705 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588358, i64* %eptr7588353                                             ; store fptr
  %arg7582233 = ptrtoint i64* %cloptr7588352 to i64                                  ; closure cast; i64* -> i64
  %rva7584472 = add i64 0, 0                                                         ; quoted ()
  %rva7584471 = call i64 @prim_cons(i64 %arg7582233, i64 %rva7584472)                ; call prim_cons
  %cloptr7588359 = inttoptr i64 %arg7582234 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588360 = getelementptr inbounds i64, i64* %cloptr7588359, i64 0             ; &cloptr7588359[0]
  %f7588362 = load i64, i64* %i0ptr7588360, align 8                                  ; load; *i0ptr7588360
  %fptr7588361 = inttoptr i64 %f7588362 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588361(i64 %arg7582234, i64 %rva7584471)           ; tail call
  ret void
}


define void @lam7586709(i64 %env7586710, i64 %Nnm$lst7581295) {
  %cont7581294 = call i64 @prim_car(i64 %Nnm$lst7581295)                             ; call prim_car
  %Nnm$lst = call i64 @prim_cdr(i64 %Nnm$lst7581295)                                 ; call prim_cdr
  %arg7582238 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584244 = add i64 0, 0                                                         ; quoted ()
  %rva7584243 = call i64 @prim_cons(i64 %Nnm$lst, i64 %rva7584244)                   ; call prim_cons
  %rva7584242 = call i64 @prim_cons(i64 %arg7582238, i64 %rva7584243)                ; call prim_cons
  %cloptr7588363 = inttoptr i64 %cont7581294 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588364 = getelementptr inbounds i64, i64* %cloptr7588363, i64 0             ; &cloptr7588363[0]
  %f7588366 = load i64, i64* %i0ptr7588364, align 8                                  ; load; *i0ptr7588364
  %fptr7588365 = inttoptr i64 %f7588366 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588365(i64 %cont7581294, i64 %rva7584242)          ; tail call
  ret void
}


define void @lam7586705(i64 %env7586706, i64 %rvp7584470) {
  %envptr7588367 = inttoptr i64 %env7586706 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588368 = getelementptr inbounds i64, i64* %envptr7588367, i64 4            ; &envptr7588367[4]
  %cont7581267 = load i64, i64* %envptr7588368, align 8                              ; load; *envptr7588368
  %envptr7588369 = inttoptr i64 %env7586706 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588370 = getelementptr inbounds i64, i64* %envptr7588369, i64 3            ; &envptr7588369[3]
  %NkA$tail = load i64, i64* %envptr7588370, align 8                                 ; load; *envptr7588370
  %envptr7588371 = inttoptr i64 %env7586706 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588372 = getelementptr inbounds i64, i64* %envptr7588371, i64 2            ; &envptr7588371[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588372, align 8                      ; load; *envptr7588372
  %envptr7588373 = inttoptr i64 %env7586706 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588374 = getelementptr inbounds i64, i64* %envptr7588373, i64 1            ; &envptr7588373[1]
  %gKR$new = load i64, i64* %envptr7588374, align 8                                  ; load; *envptr7588374
  %_957581292 = call i64 @prim_car(i64 %rvp7584470)                                  ; call prim_car
  %rvp7584469 = call i64 @prim_cdr(i64 %rvp7584470)                                  ; call prim_cdr
  %a7581075 = call i64 @prim_car(i64 %rvp7584469)                                    ; call prim_car
  %na7584246 = call i64 @prim_cdr(i64 %rvp7584469)                                   ; call prim_cdr
  %arg7582241 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581293 = call i64 @prim_make_45vector(i64 %arg7582241, i64 %a7581075)     ; call prim_make_45vector
  %cloptr7588375 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588377 = getelementptr inbounds i64, i64* %cloptr7588375, i64 1              ; &eptr7588377[1]
  %eptr7588378 = getelementptr inbounds i64, i64* %cloptr7588375, i64 2              ; &eptr7588378[2]
  %eptr7588379 = getelementptr inbounds i64, i64* %cloptr7588375, i64 3              ; &eptr7588379[3]
  %eptr7588380 = getelementptr inbounds i64, i64* %cloptr7588375, i64 4              ; &eptr7588380[4]
  store i64 %gKR$new, i64* %eptr7588377                                              ; *eptr7588377 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588378                                  ; *eptr7588378 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588379                                             ; *eptr7588379 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588380                                          ; *eptr7588380 = %cont7581267
  %eptr7588376 = getelementptr inbounds i64, i64* %cloptr7588375, i64 0              ; &cloptr7588375[0]
  %f7588381 = ptrtoint void(i64,i64)* @lam7586702 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588381, i64* %eptr7588376                                             ; store fptr
  %arg7582244 = ptrtoint i64* %cloptr7588375 to i64                                  ; closure cast; i64* -> i64
  %arg7582243 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584468 = add i64 0, 0                                                         ; quoted ()
  %rva7584467 = call i64 @prim_cons(i64 %retprim7581293, i64 %rva7584468)            ; call prim_cons
  %rva7584466 = call i64 @prim_cons(i64 %arg7582243, i64 %rva7584467)                ; call prim_cons
  %cloptr7588382 = inttoptr i64 %arg7582244 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588383 = getelementptr inbounds i64, i64* %cloptr7588382, i64 0             ; &cloptr7588382[0]
  %f7588385 = load i64, i64* %i0ptr7588383, align 8                                  ; load; *i0ptr7588383
  %fptr7588384 = inttoptr i64 %f7588385 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588384(i64 %arg7582244, i64 %rva7584466)           ; tail call
  ret void
}


define void @lam7586702(i64 %env7586703, i64 %rvp7584465) {
  %envptr7588386 = inttoptr i64 %env7586703 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588387 = getelementptr inbounds i64, i64* %envptr7588386, i64 4            ; &envptr7588386[4]
  %cont7581267 = load i64, i64* %envptr7588387, align 8                              ; load; *envptr7588387
  %envptr7588388 = inttoptr i64 %env7586703 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588389 = getelementptr inbounds i64, i64* %envptr7588388, i64 3            ; &envptr7588388[3]
  %NkA$tail = load i64, i64* %envptr7588389, align 8                                 ; load; *envptr7588389
  %envptr7588390 = inttoptr i64 %env7586703 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588391 = getelementptr inbounds i64, i64* %envptr7588390, i64 2            ; &envptr7588390[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588391, align 8                      ; load; *envptr7588391
  %envptr7588392 = inttoptr i64 %env7586703 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588393 = getelementptr inbounds i64, i64* %envptr7588392, i64 1            ; &envptr7588392[1]
  %gKR$new = load i64, i64* %envptr7588393, align 8                                  ; load; *envptr7588393
  %_957581283 = call i64 @prim_car(i64 %rvp7584465)                                  ; call prim_car
  %rvp7584464 = call i64 @prim_cdr(i64 %rvp7584465)                                  ; call prim_cdr
  %HKq$f = call i64 @prim_car(i64 %rvp7584464)                                       ; call prim_car
  %na7584248 = call i64 @prim_cdr(i64 %rvp7584464)                                   ; call prim_cdr
  %cloptr7588394 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588396 = getelementptr inbounds i64, i64* %cloptr7588394, i64 1              ; &eptr7588396[1]
  %eptr7588397 = getelementptr inbounds i64, i64* %cloptr7588394, i64 2              ; &eptr7588397[2]
  %eptr7588398 = getelementptr inbounds i64, i64* %cloptr7588394, i64 3              ; &eptr7588398[3]
  store i64 %HKq$f, i64* %eptr7588396                                                ; *eptr7588396 = %HKq$f
  store i64 %CPS$_37wind_45stack, i64* %eptr7588397                                  ; *eptr7588397 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588398                                             ; *eptr7588398 = %NkA$tail
  %eptr7588395 = getelementptr inbounds i64, i64* %cloptr7588394, i64 0              ; &cloptr7588394[0]
  %f7588399 = ptrtoint void(i64,i64)* @lam7586700 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588399, i64* %eptr7588395                                             ; store fptr
  %rpt$f7580965 = ptrtoint i64* %cloptr7588394 to i64                                ; closure cast; i64* -> i64
  %arg7582296 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %RHd$_95t = call i64 @prim_vector_45set_33(i64 %HKq$f, i64 %arg7582296, i64 %rpt$f7580965); call prim_vector_45set_33
  %arg7582298 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581088 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582298)               ; call prim_vector_45ref
  %a7581089 = call i64 @prim_procedure_63(i64 %a7581088)                             ; call prim_procedure_63
  %cmp7588400 = icmp eq i64 %a7581089, 15                                            ; false?
  br i1 %cmp7588400, label %else7588402, label %then7588401                          ; if

then7588401:
  %arg7582301 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581090 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582301)               ; call prim_vector_45ref
  %arg7582303 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581091 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7582303) ; call prim_vector_45ref
  %cloptr7588403 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588405 = getelementptr inbounds i64, i64* %cloptr7588403, i64 1              ; &eptr7588405[1]
  %eptr7588406 = getelementptr inbounds i64, i64* %cloptr7588403, i64 2              ; &eptr7588406[2]
  %eptr7588407 = getelementptr inbounds i64, i64* %cloptr7588403, i64 3              ; &eptr7588407[3]
  %eptr7588408 = getelementptr inbounds i64, i64* %cloptr7588403, i64 4              ; &eptr7588408[4]
  store i64 %gKR$new, i64* %eptr7588405                                              ; *eptr7588405 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588406                                  ; *eptr7588406 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588407                                             ; *eptr7588407 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588408                                          ; *eptr7588408 = %cont7581267
  %eptr7588404 = getelementptr inbounds i64, i64* %cloptr7588403, i64 0              ; &cloptr7588403[0]
  %f7588409 = ptrtoint void(i64,i64)* @lam7586601 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588409, i64* %eptr7588404                                             ; store fptr
  %arg7582306 = ptrtoint i64* %cloptr7588403 to i64                                  ; closure cast; i64* -> i64
  %rva7584375 = add i64 0, 0                                                         ; quoted ()
  %rva7584374 = call i64 @prim_cons(i64 %a7581091, i64 %rva7584375)                  ; call prim_cons
  %rva7584373 = call i64 @prim_cons(i64 %arg7582306, i64 %rva7584374)                ; call prim_cons
  %cloptr7588410 = inttoptr i64 %a7581090 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588411 = getelementptr inbounds i64, i64* %cloptr7588410, i64 0             ; &cloptr7588410[0]
  %f7588413 = load i64, i64* %i0ptr7588411, align 8                                  ; load; *i0ptr7588411
  %fptr7588412 = inttoptr i64 %f7588413 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588412(i64 %a7581090, i64 %rva7584373)             ; tail call
  ret void

else7588402:
  %arg7582400 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588414, i32 0, i32 0)); quoted string
  %retprim7581291 = call i64 @prim_halt(i64 %arg7582400)                             ; call prim_halt
  %cloptr7588415 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588417 = getelementptr inbounds i64, i64* %cloptr7588415, i64 1              ; &eptr7588417[1]
  %eptr7588418 = getelementptr inbounds i64, i64* %cloptr7588415, i64 2              ; &eptr7588418[2]
  %eptr7588419 = getelementptr inbounds i64, i64* %cloptr7588415, i64 3              ; &eptr7588419[3]
  %eptr7588420 = getelementptr inbounds i64, i64* %cloptr7588415, i64 4              ; &eptr7588420[4]
  store i64 %gKR$new, i64* %eptr7588417                                              ; *eptr7588417 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588418                                  ; *eptr7588418 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588419                                             ; *eptr7588419 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588420                                          ; *eptr7588420 = %cont7581267
  %eptr7588416 = getelementptr inbounds i64, i64* %cloptr7588415, i64 0              ; &cloptr7588415[0]
  %f7588421 = ptrtoint void(i64,i64)* @lam7586668 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588421, i64* %eptr7588416                                             ; store fptr
  %arg7582403 = ptrtoint i64* %cloptr7588415 to i64                                  ; closure cast; i64* -> i64
  %arg7582402 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584463 = add i64 0, 0                                                         ; quoted ()
  %rva7584462 = call i64 @prim_cons(i64 %retprim7581291, i64 %rva7584463)            ; call prim_cons
  %rva7584461 = call i64 @prim_cons(i64 %arg7582402, i64 %rva7584462)                ; call prim_cons
  %cloptr7588422 = inttoptr i64 %arg7582403 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588423 = getelementptr inbounds i64, i64* %cloptr7588422, i64 0             ; &cloptr7588422[0]
  %f7588425 = load i64, i64* %i0ptr7588423, align 8                                  ; load; *i0ptr7588423
  %fptr7588424 = inttoptr i64 %f7588425 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588424(i64 %arg7582403, i64 %rva7584461)           ; tail call
  ret void
}


define void @lam7586700(i64 %env7586701, i64 %rvp7584287) {
  %envptr7588426 = inttoptr i64 %env7586701 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588427 = getelementptr inbounds i64, i64* %envptr7588426, i64 3            ; &envptr7588426[3]
  %NkA$tail = load i64, i64* %envptr7588427, align 8                                 ; load; *envptr7588427
  %envptr7588428 = inttoptr i64 %env7586701 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588429 = getelementptr inbounds i64, i64* %envptr7588428, i64 2            ; &envptr7588428[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588429, align 8                      ; load; *envptr7588429
  %envptr7588430 = inttoptr i64 %env7586701 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588431 = getelementptr inbounds i64, i64* %envptr7588430, i64 1            ; &envptr7588430[1]
  %HKq$f = load i64, i64* %envptr7588431, align 8                                    ; load; *envptr7588431
  %cont7581284 = call i64 @prim_car(i64 %rvp7584287)                                 ; call prim_car
  %rvp7584286 = call i64 @prim_cdr(i64 %rvp7584287)                                  ; call prim_cdr
  %p9I$l = call i64 @prim_car(i64 %rvp7584286)                                       ; call prim_car
  %na7584250 = call i64 @prim_cdr(i64 %rvp7584286)                                   ; call prim_cdr
  %a7581076 = call i64 @prim_eq_63(i64 %p9I$l, i64 %NkA$tail)                        ; call prim_eq_63
  %a7581077 = call i64 @prim_not(i64 %a7581076)                                      ; call prim_not
  %cmp7588432 = icmp eq i64 %a7581077, 15                                            ; false?
  br i1 %cmp7588432, label %else7588434, label %then7588433                          ; if

then7588433:
  %a7581078 = call i64 @prim_cdr(i64 %p9I$l)                                         ; call prim_cdr
  %arg7582250 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581289 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582250, i64 %a7581078); call prim_vector_45set_33
  %cloptr7588435 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588437 = getelementptr inbounds i64, i64* %cloptr7588435, i64 1              ; &eptr7588437[1]
  %eptr7588438 = getelementptr inbounds i64, i64* %cloptr7588435, i64 2              ; &eptr7588438[2]
  %eptr7588439 = getelementptr inbounds i64, i64* %cloptr7588435, i64 3              ; &eptr7588439[3]
  store i64 %HKq$f, i64* %eptr7588437                                                ; *eptr7588437 = %HKq$f
  store i64 %p9I$l, i64* %eptr7588438                                                ; *eptr7588438 = %p9I$l
  store i64 %cont7581284, i64* %eptr7588439                                          ; *eptr7588439 = %cont7581284
  %eptr7588436 = getelementptr inbounds i64, i64* %cloptr7588435, i64 0              ; &cloptr7588435[0]
  %f7588440 = ptrtoint void(i64,i64)* @lam7586695 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588440, i64* %eptr7588436                                             ; store fptr
  %arg7582254 = ptrtoint i64* %cloptr7588435 to i64                                  ; closure cast; i64* -> i64
  %arg7582253 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584282 = add i64 0, 0                                                         ; quoted ()
  %rva7584281 = call i64 @prim_cons(i64 %retprim7581289, i64 %rva7584282)            ; call prim_cons
  %rva7584280 = call i64 @prim_cons(i64 %arg7582253, i64 %rva7584281)                ; call prim_cons
  %cloptr7588441 = inttoptr i64 %arg7582254 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588442 = getelementptr inbounds i64, i64* %cloptr7588441, i64 0             ; &cloptr7588441[0]
  %f7588444 = load i64, i64* %i0ptr7588442, align 8                                  ; load; *i0ptr7588442
  %fptr7588443 = inttoptr i64 %f7588444 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588443(i64 %arg7582254, i64 %rva7584280)           ; tail call
  ret void

else7588434:
  %retprim7581290 = call i64 @prim_void()                                            ; call prim_void
  %arg7582293 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584285 = add i64 0, 0                                                         ; quoted ()
  %rva7584284 = call i64 @prim_cons(i64 %retprim7581290, i64 %rva7584285)            ; call prim_cons
  %rva7584283 = call i64 @prim_cons(i64 %arg7582293, i64 %rva7584284)                ; call prim_cons
  %cloptr7588445 = inttoptr i64 %cont7581284 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588446 = getelementptr inbounds i64, i64* %cloptr7588445, i64 0             ; &cloptr7588445[0]
  %f7588448 = load i64, i64* %i0ptr7588446, align 8                                  ; load; *i0ptr7588446
  %fptr7588447 = inttoptr i64 %f7588448 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588447(i64 %cont7581284, i64 %rva7584283)          ; tail call
  ret void
}


define void @lam7586695(i64 %env7586696, i64 %rvp7584279) {
  %envptr7588449 = inttoptr i64 %env7586696 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588450 = getelementptr inbounds i64, i64* %envptr7588449, i64 3            ; &envptr7588449[3]
  %cont7581284 = load i64, i64* %envptr7588450, align 8                              ; load; *envptr7588450
  %envptr7588451 = inttoptr i64 %env7586696 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588452 = getelementptr inbounds i64, i64* %envptr7588451, i64 2            ; &envptr7588451[2]
  %p9I$l = load i64, i64* %envptr7588452, align 8                                    ; load; *envptr7588452
  %envptr7588453 = inttoptr i64 %env7586696 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588454 = getelementptr inbounds i64, i64* %envptr7588453, i64 1            ; &envptr7588453[1]
  %HKq$f = load i64, i64* %envptr7588454, align 8                                    ; load; *envptr7588454
  %_957581285 = call i64 @prim_car(i64 %rvp7584279)                                  ; call prim_car
  %rvp7584278 = call i64 @prim_cdr(i64 %rvp7584279)                                  ; call prim_cdr
  %Dqg$_95t = call i64 @prim_car(i64 %rvp7584278)                                    ; call prim_car
  %na7584252 = call i64 @prim_cdr(i64 %rvp7584278)                                   ; call prim_cdr
  %a7581079 = call i64 @prim_car(i64 %p9I$l)                                         ; call prim_car
  %a7581080 = call i64 @prim_cdr(i64 %a7581079)                                      ; call prim_cdr
  %a7581081 = call i64 @prim_procedure_63(i64 %a7581080)                             ; call prim_procedure_63
  %cmp7588455 = icmp eq i64 %a7581081, 15                                            ; false?
  br i1 %cmp7588455, label %else7588457, label %then7588456                          ; if

then7588456:
  %a7581082 = call i64 @prim_car(i64 %p9I$l)                                         ; call prim_car
  %a7581083 = call i64 @prim_cdr(i64 %a7581082)                                      ; call prim_cdr
  %cloptr7588458 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588460 = getelementptr inbounds i64, i64* %cloptr7588458, i64 1              ; &eptr7588460[1]
  %eptr7588461 = getelementptr inbounds i64, i64* %cloptr7588458, i64 2              ; &eptr7588461[2]
  %eptr7588462 = getelementptr inbounds i64, i64* %cloptr7588458, i64 3              ; &eptr7588462[3]
  store i64 %HKq$f, i64* %eptr7588460                                                ; *eptr7588460 = %HKq$f
  store i64 %p9I$l, i64* %eptr7588461                                                ; *eptr7588461 = %p9I$l
  store i64 %cont7581284, i64* %eptr7588462                                          ; *eptr7588462 = %cont7581284
  %eptr7588459 = getelementptr inbounds i64, i64* %cloptr7588458, i64 0              ; &cloptr7588458[0]
  %f7588463 = ptrtoint void(i64,i64)* @lam7586682 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588463, i64* %eptr7588459                                             ; store fptr
  %arg7582260 = ptrtoint i64* %cloptr7588458 to i64                                  ; closure cast; i64* -> i64
  %rva7584264 = add i64 0, 0                                                         ; quoted ()
  %rva7584263 = call i64 @prim_cons(i64 %arg7582260, i64 %rva7584264)                ; call prim_cons
  %cloptr7588464 = inttoptr i64 %a7581083 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588465 = getelementptr inbounds i64, i64* %cloptr7588464, i64 0             ; &cloptr7588464[0]
  %f7588467 = load i64, i64* %i0ptr7588465, align 8                                  ; load; *i0ptr7588465
  %fptr7588466 = inttoptr i64 %f7588467 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588466(i64 %a7581083, i64 %rva7584263)             ; tail call
  ret void

else7588457:
  %arg7582275 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588468, i32 0, i32 0)); quoted string
  %retprim7581288 = call i64 @prim_halt(i64 %arg7582275)                             ; call prim_halt
  %cloptr7588469 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588471 = getelementptr inbounds i64, i64* %cloptr7588469, i64 1              ; &eptr7588471[1]
  %eptr7588472 = getelementptr inbounds i64, i64* %cloptr7588469, i64 2              ; &eptr7588472[2]
  %eptr7588473 = getelementptr inbounds i64, i64* %cloptr7588469, i64 3              ; &eptr7588473[3]
  store i64 %HKq$f, i64* %eptr7588471                                                ; *eptr7588471 = %HKq$f
  store i64 %p9I$l, i64* %eptr7588472                                                ; *eptr7588472 = %p9I$l
  store i64 %cont7581284, i64* %eptr7588473                                          ; *eptr7588473 = %cont7581284
  %eptr7588470 = getelementptr inbounds i64, i64* %cloptr7588469, i64 0              ; &cloptr7588469[0]
  %f7588474 = ptrtoint void(i64,i64)* @lam7586692 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588474, i64* %eptr7588470                                             ; store fptr
  %arg7582278 = ptrtoint i64* %cloptr7588469 to i64                                  ; closure cast; i64* -> i64
  %arg7582277 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584277 = add i64 0, 0                                                         ; quoted ()
  %rva7584276 = call i64 @prim_cons(i64 %retprim7581288, i64 %rva7584277)            ; call prim_cons
  %rva7584275 = call i64 @prim_cons(i64 %arg7582277, i64 %rva7584276)                ; call prim_cons
  %cloptr7588475 = inttoptr i64 %arg7582278 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588476 = getelementptr inbounds i64, i64* %cloptr7588475, i64 0             ; &cloptr7588475[0]
  %f7588478 = load i64, i64* %i0ptr7588476, align 8                                  ; load; *i0ptr7588476
  %fptr7588477 = inttoptr i64 %f7588478 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588477(i64 %arg7582278, i64 %rva7584275)           ; tail call
  ret void
}


define void @lam7586692(i64 %env7586693, i64 %rvp7584274) {
  %envptr7588479 = inttoptr i64 %env7586693 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588480 = getelementptr inbounds i64, i64* %envptr7588479, i64 3            ; &envptr7588479[3]
  %cont7581284 = load i64, i64* %envptr7588480, align 8                              ; load; *envptr7588480
  %envptr7588481 = inttoptr i64 %env7586693 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588482 = getelementptr inbounds i64, i64* %envptr7588481, i64 2            ; &envptr7588481[2]
  %p9I$l = load i64, i64* %envptr7588482, align 8                                    ; load; *envptr7588482
  %envptr7588483 = inttoptr i64 %env7586693 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588484 = getelementptr inbounds i64, i64* %envptr7588483, i64 1            ; &envptr7588483[1]
  %HKq$f = load i64, i64* %envptr7588484, align 8                                    ; load; *envptr7588484
  %_957581286 = call i64 @prim_car(i64 %rvp7584274)                                  ; call prim_car
  %rvp7584273 = call i64 @prim_cdr(i64 %rvp7584274)                                  ; call prim_cdr
  %H0N$_95t = call i64 @prim_car(i64 %rvp7584273)                                    ; call prim_car
  %na7584266 = call i64 @prim_cdr(i64 %rvp7584273)                                   ; call prim_cdr
  %arg7582279 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581084 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582279)               ; call prim_vector_45ref
  %a7581085 = call i64 @prim_procedure_63(i64 %a7581084)                             ; call prim_procedure_63
  %cmp7588485 = icmp eq i64 %a7581085, 15                                            ; false?
  br i1 %cmp7588485, label %else7588487, label %then7588486                          ; if

then7588486:
  %arg7582282 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581086 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582282)               ; call prim_vector_45ref
  %a7581087 = call i64 @prim_cdr(i64 %p9I$l)                                         ; call prim_cdr
  %rva7584269 = add i64 0, 0                                                         ; quoted ()
  %rva7584268 = call i64 @prim_cons(i64 %a7581087, i64 %rva7584269)                  ; call prim_cons
  %rva7584267 = call i64 @prim_cons(i64 %cont7581284, i64 %rva7584268)               ; call prim_cons
  %cloptr7588488 = inttoptr i64 %a7581086 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588489 = getelementptr inbounds i64, i64* %cloptr7588488, i64 0             ; &cloptr7588488[0]
  %f7588491 = load i64, i64* %i0ptr7588489, align 8                                  ; load; *i0ptr7588489
  %fptr7588490 = inttoptr i64 %f7588491 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588490(i64 %a7581086, i64 %rva7584267)             ; tail call
  ret void

else7588487:
  %arg7582288 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588492, i32 0, i32 0)); quoted string
  %retprim7581287 = call i64 @prim_halt(i64 %arg7582288)                             ; call prim_halt
  %arg7582290 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584272 = add i64 0, 0                                                         ; quoted ()
  %rva7584271 = call i64 @prim_cons(i64 %retprim7581287, i64 %rva7584272)            ; call prim_cons
  %rva7584270 = call i64 @prim_cons(i64 %arg7582290, i64 %rva7584271)                ; call prim_cons
  %cloptr7588493 = inttoptr i64 %cont7581284 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588494 = getelementptr inbounds i64, i64* %cloptr7588493, i64 0             ; &cloptr7588493[0]
  %f7588496 = load i64, i64* %i0ptr7588494, align 8                                  ; load; *i0ptr7588494
  %fptr7588495 = inttoptr i64 %f7588496 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588495(i64 %cont7581284, i64 %rva7584270)          ; tail call
  ret void
}


define void @lam7586682(i64 %env7586683, i64 %rvp7584262) {
  %envptr7588497 = inttoptr i64 %env7586683 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588498 = getelementptr inbounds i64, i64* %envptr7588497, i64 3            ; &envptr7588497[3]
  %cont7581284 = load i64, i64* %envptr7588498, align 8                              ; load; *envptr7588498
  %envptr7588499 = inttoptr i64 %env7586683 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588500 = getelementptr inbounds i64, i64* %envptr7588499, i64 2            ; &envptr7588499[2]
  %p9I$l = load i64, i64* %envptr7588500, align 8                                    ; load; *envptr7588500
  %envptr7588501 = inttoptr i64 %env7586683 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588502 = getelementptr inbounds i64, i64* %envptr7588501, i64 1            ; &envptr7588501[1]
  %HKq$f = load i64, i64* %envptr7588502, align 8                                    ; load; *envptr7588502
  %_957581286 = call i64 @prim_car(i64 %rvp7584262)                                  ; call prim_car
  %rvp7584261 = call i64 @prim_cdr(i64 %rvp7584262)                                  ; call prim_cdr
  %H0N$_95t = call i64 @prim_car(i64 %rvp7584261)                                    ; call prim_car
  %na7584254 = call i64 @prim_cdr(i64 %rvp7584261)                                   ; call prim_cdr
  %arg7582262 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581084 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582262)               ; call prim_vector_45ref
  %a7581085 = call i64 @prim_procedure_63(i64 %a7581084)                             ; call prim_procedure_63
  %cmp7588503 = icmp eq i64 %a7581085, 15                                            ; false?
  br i1 %cmp7588503, label %else7588505, label %then7588504                          ; if

then7588504:
  %arg7582265 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581086 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582265)               ; call prim_vector_45ref
  %a7581087 = call i64 @prim_cdr(i64 %p9I$l)                                         ; call prim_cdr
  %rva7584257 = add i64 0, 0                                                         ; quoted ()
  %rva7584256 = call i64 @prim_cons(i64 %a7581087, i64 %rva7584257)                  ; call prim_cons
  %rva7584255 = call i64 @prim_cons(i64 %cont7581284, i64 %rva7584256)               ; call prim_cons
  %cloptr7588506 = inttoptr i64 %a7581086 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588507 = getelementptr inbounds i64, i64* %cloptr7588506, i64 0             ; &cloptr7588506[0]
  %f7588509 = load i64, i64* %i0ptr7588507, align 8                                  ; load; *i0ptr7588507
  %fptr7588508 = inttoptr i64 %f7588509 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588508(i64 %a7581086, i64 %rva7584255)             ; tail call
  ret void

else7588505:
  %arg7582271 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588510, i32 0, i32 0)); quoted string
  %retprim7581287 = call i64 @prim_halt(i64 %arg7582271)                             ; call prim_halt
  %arg7582273 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584260 = add i64 0, 0                                                         ; quoted ()
  %rva7584259 = call i64 @prim_cons(i64 %retprim7581287, i64 %rva7584260)            ; call prim_cons
  %rva7584258 = call i64 @prim_cons(i64 %arg7582273, i64 %rva7584259)                ; call prim_cons
  %cloptr7588511 = inttoptr i64 %cont7581284 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588512 = getelementptr inbounds i64, i64* %cloptr7588511, i64 0             ; &cloptr7588511[0]
  %f7588514 = load i64, i64* %i0ptr7588512, align 8                                  ; load; *i0ptr7588512
  %fptr7588513 = inttoptr i64 %f7588514 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588513(i64 %cont7581284, i64 %rva7584258)          ; tail call
  ret void
}


define void @lam7586668(i64 %env7586669, i64 %rvp7584460) {
  %envptr7588515 = inttoptr i64 %env7586669 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588516 = getelementptr inbounds i64, i64* %envptr7588515, i64 4            ; &envptr7588515[4]
  %cont7581267 = load i64, i64* %envptr7588516, align 8                              ; load; *envptr7588516
  %envptr7588517 = inttoptr i64 %env7586669 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588518 = getelementptr inbounds i64, i64* %envptr7588517, i64 3            ; &envptr7588517[3]
  %NkA$tail = load i64, i64* %envptr7588518, align 8                                 ; load; *envptr7588518
  %envptr7588519 = inttoptr i64 %env7586669 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588520 = getelementptr inbounds i64, i64* %envptr7588519, i64 2            ; &envptr7588519[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588520, align 8                      ; load; *envptr7588520
  %envptr7588521 = inttoptr i64 %env7586669 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588522 = getelementptr inbounds i64, i64* %envptr7588521, i64 1            ; &envptr7588521[1]
  %gKR$new = load i64, i64* %envptr7588522, align 8                                  ; load; *envptr7588522
  %_957581269 = call i64 @prim_car(i64 %rvp7584460)                                  ; call prim_car
  %rvp7584459 = call i64 @prim_cdr(i64 %rvp7584460)                                  ; call prim_cdr
  %NGZ$_95t = call i64 @prim_car(i64 %rvp7584459)                                    ; call prim_car
  %na7584377 = call i64 @prim_cdr(i64 %rvp7584459)                                   ; call prim_cdr
  %cloptr7588523 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7588524 = getelementptr inbounds i64, i64* %cloptr7588523, i64 0              ; &cloptr7588523[0]
  %f7588525 = ptrtoint void(i64,i64)* @lam7586666 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588525, i64* %eptr7588524                                             ; store fptr
  %arg7582405 = ptrtoint i64* %cloptr7588523 to i64                                  ; closure cast; i64* -> i64
  %cloptr7588526 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588528 = getelementptr inbounds i64, i64* %cloptr7588526, i64 1              ; &eptr7588528[1]
  %eptr7588529 = getelementptr inbounds i64, i64* %cloptr7588526, i64 2              ; &eptr7588529[2]
  %eptr7588530 = getelementptr inbounds i64, i64* %cloptr7588526, i64 3              ; &eptr7588530[3]
  %eptr7588531 = getelementptr inbounds i64, i64* %cloptr7588526, i64 4              ; &eptr7588531[4]
  store i64 %gKR$new, i64* %eptr7588528                                              ; *eptr7588528 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588529                                  ; *eptr7588529 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588530                                             ; *eptr7588530 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588531                                          ; *eptr7588531 = %cont7581267
  %eptr7588527 = getelementptr inbounds i64, i64* %cloptr7588526, i64 0              ; &cloptr7588526[0]
  %f7588532 = ptrtoint void(i64,i64)* @lam7586662 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588532, i64* %eptr7588527                                             ; store fptr
  %arg7582404 = ptrtoint i64* %cloptr7588526 to i64                                  ; closure cast; i64* -> i64
  %rva7584458 = add i64 0, 0                                                         ; quoted ()
  %rva7584457 = call i64 @prim_cons(i64 %arg7582404, i64 %rva7584458)                ; call prim_cons
  %cloptr7588533 = inttoptr i64 %arg7582405 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588534 = getelementptr inbounds i64, i64* %cloptr7588533, i64 0             ; &cloptr7588533[0]
  %f7588536 = load i64, i64* %i0ptr7588534, align 8                                  ; load; *i0ptr7588534
  %fptr7588535 = inttoptr i64 %f7588536 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588535(i64 %arg7582405, i64 %rva7584457)           ; tail call
  ret void
}


define void @lam7586666(i64 %env7586667, i64 %Noz$lst7581282) {
  %cont7581281 = call i64 @prim_car(i64 %Noz$lst7581282)                             ; call prim_car
  %Noz$lst = call i64 @prim_cdr(i64 %Noz$lst7581282)                                 ; call prim_cdr
  %arg7582409 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584380 = add i64 0, 0                                                         ; quoted ()
  %rva7584379 = call i64 @prim_cons(i64 %Noz$lst, i64 %rva7584380)                   ; call prim_cons
  %rva7584378 = call i64 @prim_cons(i64 %arg7582409, i64 %rva7584379)                ; call prim_cons
  %cloptr7588537 = inttoptr i64 %cont7581281 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588538 = getelementptr inbounds i64, i64* %cloptr7588537, i64 0             ; &cloptr7588537[0]
  %f7588540 = load i64, i64* %i0ptr7588538, align 8                                  ; load; *i0ptr7588538
  %fptr7588539 = inttoptr i64 %f7588540 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588539(i64 %cont7581281, i64 %rva7584378)          ; tail call
  ret void
}


define void @lam7586662(i64 %env7586663, i64 %rvp7584456) {
  %envptr7588541 = inttoptr i64 %env7586663 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588542 = getelementptr inbounds i64, i64* %envptr7588541, i64 4            ; &envptr7588541[4]
  %cont7581267 = load i64, i64* %envptr7588542, align 8                              ; load; *envptr7588542
  %envptr7588543 = inttoptr i64 %env7586663 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588544 = getelementptr inbounds i64, i64* %envptr7588543, i64 3            ; &envptr7588543[3]
  %NkA$tail = load i64, i64* %envptr7588544, align 8                                 ; load; *envptr7588544
  %envptr7588545 = inttoptr i64 %env7586663 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588546 = getelementptr inbounds i64, i64* %envptr7588545, i64 2            ; &envptr7588545[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588546, align 8                      ; load; *envptr7588546
  %envptr7588547 = inttoptr i64 %env7586663 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588548 = getelementptr inbounds i64, i64* %envptr7588547, i64 1            ; &envptr7588547[1]
  %gKR$new = load i64, i64* %envptr7588548, align 8                                  ; load; *envptr7588548
  %_957581279 = call i64 @prim_car(i64 %rvp7584456)                                  ; call prim_car
  %rvp7584455 = call i64 @prim_cdr(i64 %rvp7584456)                                  ; call prim_cdr
  %a7581092 = call i64 @prim_car(i64 %rvp7584455)                                    ; call prim_car
  %na7584382 = call i64 @prim_cdr(i64 %rvp7584455)                                   ; call prim_cdr
  %arg7582412 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581280 = call i64 @prim_make_45vector(i64 %arg7582412, i64 %a7581092)     ; call prim_make_45vector
  %cloptr7588549 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588551 = getelementptr inbounds i64, i64* %cloptr7588549, i64 1              ; &eptr7588551[1]
  %eptr7588552 = getelementptr inbounds i64, i64* %cloptr7588549, i64 2              ; &eptr7588552[2]
  %eptr7588553 = getelementptr inbounds i64, i64* %cloptr7588549, i64 3              ; &eptr7588553[3]
  %eptr7588554 = getelementptr inbounds i64, i64* %cloptr7588549, i64 4              ; &eptr7588554[4]
  store i64 %gKR$new, i64* %eptr7588551                                              ; *eptr7588551 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588552                                  ; *eptr7588552 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588553                                             ; *eptr7588553 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588554                                          ; *eptr7588554 = %cont7581267
  %eptr7588550 = getelementptr inbounds i64, i64* %cloptr7588549, i64 0              ; &cloptr7588549[0]
  %f7588555 = ptrtoint void(i64,i64)* @lam7586659 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588555, i64* %eptr7588550                                             ; store fptr
  %arg7582415 = ptrtoint i64* %cloptr7588549 to i64                                  ; closure cast; i64* -> i64
  %arg7582414 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584454 = add i64 0, 0                                                         ; quoted ()
  %rva7584453 = call i64 @prim_cons(i64 %retprim7581280, i64 %rva7584454)            ; call prim_cons
  %rva7584452 = call i64 @prim_cons(i64 %arg7582414, i64 %rva7584453)                ; call prim_cons
  %cloptr7588556 = inttoptr i64 %arg7582415 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588557 = getelementptr inbounds i64, i64* %cloptr7588556, i64 0             ; &cloptr7588556[0]
  %f7588559 = load i64, i64* %i0ptr7588557, align 8                                  ; load; *i0ptr7588557
  %fptr7588558 = inttoptr i64 %f7588559 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588558(i64 %arg7582415, i64 %rva7584452)           ; tail call
  ret void
}


define void @lam7586659(i64 %env7586660, i64 %rvp7584451) {
  %envptr7588560 = inttoptr i64 %env7586660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588561 = getelementptr inbounds i64, i64* %envptr7588560, i64 4            ; &envptr7588560[4]
  %cont7581267 = load i64, i64* %envptr7588561, align 8                              ; load; *envptr7588561
  %envptr7588562 = inttoptr i64 %env7586660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588563 = getelementptr inbounds i64, i64* %envptr7588562, i64 3            ; &envptr7588562[3]
  %NkA$tail = load i64, i64* %envptr7588563, align 8                                 ; load; *envptr7588563
  %envptr7588564 = inttoptr i64 %env7586660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588565 = getelementptr inbounds i64, i64* %envptr7588564, i64 2            ; &envptr7588564[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588565, align 8                      ; load; *envptr7588565
  %envptr7588566 = inttoptr i64 %env7586660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588567 = getelementptr inbounds i64, i64* %envptr7588566, i64 1            ; &envptr7588566[1]
  %gKR$new = load i64, i64* %envptr7588567, align 8                                  ; load; *envptr7588567
  %_957581270 = call i64 @prim_car(i64 %rvp7584451)                                  ; call prim_car
  %rvp7584450 = call i64 @prim_cdr(i64 %rvp7584451)                                  ; call prim_cdr
  %yup$f = call i64 @prim_car(i64 %rvp7584450)                                       ; call prim_car
  %na7584384 = call i64 @prim_cdr(i64 %rvp7584450)                                   ; call prim_cdr
  %cloptr7588568 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588570 = getelementptr inbounds i64, i64* %cloptr7588568, i64 1              ; &eptr7588570[1]
  %eptr7588571 = getelementptr inbounds i64, i64* %cloptr7588568, i64 2              ; &eptr7588571[2]
  %eptr7588572 = getelementptr inbounds i64, i64* %cloptr7588568, i64 3              ; &eptr7588572[3]
  store i64 %CPS$_37wind_45stack, i64* %eptr7588570                                  ; *eptr7588570 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588571                                             ; *eptr7588571 = %NkA$tail
  store i64 %yup$f, i64* %eptr7588572                                                ; *eptr7588572 = %yup$f
  %eptr7588569 = getelementptr inbounds i64, i64* %cloptr7588568, i64 0              ; &cloptr7588568[0]
  %f7588573 = ptrtoint void(i64,i64)* @lam7586657 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588573, i64* %eptr7588569                                             ; store fptr
  %C5u$f7580966 = ptrtoint i64* %cloptr7588568 to i64                                ; closure cast; i64* -> i64
  %arg7582482 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %Ksh$_95t = call i64 @prim_vector_45set_33(i64 %yup$f, i64 %arg7582482, i64 %C5u$f7580966); call prim_vector_45set_33
  %arg7582484 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581104 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582484)               ; call prim_vector_45ref
  %a7581105 = call i64 @prim_procedure_63(i64 %a7581104)                             ; call prim_procedure_63
  %cmp7588574 = icmp eq i64 %a7581105, 15                                            ; false?
  br i1 %cmp7588574, label %else7588576, label %then7588575                          ; if

then7588575:
  %arg7582487 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581106 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582487)               ; call prim_vector_45ref
  %rva7584446 = add i64 0, 0                                                         ; quoted ()
  %rva7584445 = call i64 @prim_cons(i64 %gKR$new, i64 %rva7584446)                   ; call prim_cons
  %rva7584444 = call i64 @prim_cons(i64 %cont7581267, i64 %rva7584445)               ; call prim_cons
  %cloptr7588577 = inttoptr i64 %a7581106 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588578 = getelementptr inbounds i64, i64* %cloptr7588577, i64 0             ; &cloptr7588577[0]
  %f7588580 = load i64, i64* %i0ptr7588578, align 8                                  ; load; *i0ptr7588578
  %fptr7588579 = inttoptr i64 %f7588580 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588579(i64 %a7581106, i64 %rva7584444)             ; tail call
  ret void

else7588576:
  %arg7582492 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588581, i32 0, i32 0)); quoted string
  %retprim7581278 = call i64 @prim_halt(i64 %arg7582492)                             ; call prim_halt
  %arg7582494 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584449 = add i64 0, 0                                                         ; quoted ()
  %rva7584448 = call i64 @prim_cons(i64 %retprim7581278, i64 %rva7584449)            ; call prim_cons
  %rva7584447 = call i64 @prim_cons(i64 %arg7582494, i64 %rva7584448)                ; call prim_cons
  %cloptr7588582 = inttoptr i64 %cont7581267 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588583 = getelementptr inbounds i64, i64* %cloptr7588582, i64 0             ; &cloptr7588582[0]
  %f7588585 = load i64, i64* %i0ptr7588583, align 8                                  ; load; *i0ptr7588583
  %fptr7588584 = inttoptr i64 %f7588585 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588584(i64 %cont7581267, i64 %rva7584447)          ; tail call
  ret void
}


define void @lam7586657(i64 %env7586658, i64 %rvp7584443) {
  %envptr7588586 = inttoptr i64 %env7586658 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588587 = getelementptr inbounds i64, i64* %envptr7588586, i64 3            ; &envptr7588586[3]
  %yup$f = load i64, i64* %envptr7588587, align 8                                    ; load; *envptr7588587
  %envptr7588588 = inttoptr i64 %env7586658 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588589 = getelementptr inbounds i64, i64* %envptr7588588, i64 2            ; &envptr7588588[2]
  %NkA$tail = load i64, i64* %envptr7588589, align 8                                 ; load; *envptr7588589
  %envptr7588590 = inttoptr i64 %env7586658 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588591 = getelementptr inbounds i64, i64* %envptr7588590, i64 1            ; &envptr7588590[1]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588591, align 8                      ; load; *envptr7588591
  %cont7581271 = call i64 @prim_car(i64 %rvp7584443)                                 ; call prim_car
  %rvp7584442 = call i64 @prim_cdr(i64 %rvp7584443)                                  ; call prim_cdr
  %eox$l = call i64 @prim_car(i64 %rvp7584442)                                       ; call prim_car
  %na7584386 = call i64 @prim_cdr(i64 %rvp7584442)                                   ; call prim_cdr
  %a7581093 = call i64 @prim_eq_63(i64 %eox$l, i64 %NkA$tail)                        ; call prim_eq_63
  %a7581094 = call i64 @prim_not(i64 %a7581093)                                      ; call prim_not
  %cmp7588592 = icmp eq i64 %a7581094, 15                                            ; false?
  br i1 %cmp7588592, label %else7588594, label %then7588593                          ; if

then7588593:
  %arg7582419 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581095 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582419)               ; call prim_vector_45ref
  %a7581096 = call i64 @prim_procedure_63(i64 %a7581095)                             ; call prim_procedure_63
  %cmp7588595 = icmp eq i64 %a7581096, 15                                            ; false?
  br i1 %cmp7588595, label %else7588597, label %then7588596                          ; if

then7588596:
  %arg7582422 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581097 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582422)               ; call prim_vector_45ref
  %a7581098 = call i64 @prim_cdr(i64 %eox$l)                                         ; call prim_cdr
  %cloptr7588598 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588600 = getelementptr inbounds i64, i64* %cloptr7588598, i64 1              ; &eptr7588600[1]
  %eptr7588601 = getelementptr inbounds i64, i64* %cloptr7588598, i64 2              ; &eptr7588601[2]
  %eptr7588602 = getelementptr inbounds i64, i64* %cloptr7588598, i64 3              ; &eptr7588602[3]
  store i64 %eox$l, i64* %eptr7588600                                                ; *eptr7588600 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588601                                  ; *eptr7588601 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588602                                          ; *eptr7588602 = %cont7581271
  %eptr7588599 = getelementptr inbounds i64, i64* %cloptr7588598, i64 0              ; &cloptr7588598[0]
  %f7588603 = ptrtoint void(i64,i64)* @lam7586632 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588603, i64* %eptr7588599                                             ; store fptr
  %arg7582426 = ptrtoint i64* %cloptr7588598 to i64                                  ; closure cast; i64* -> i64
  %rva7584412 = add i64 0, 0                                                         ; quoted ()
  %rva7584411 = call i64 @prim_cons(i64 %a7581098, i64 %rva7584412)                  ; call prim_cons
  %rva7584410 = call i64 @prim_cons(i64 %arg7582426, i64 %rva7584411)                ; call prim_cons
  %cloptr7588604 = inttoptr i64 %a7581097 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588605 = getelementptr inbounds i64, i64* %cloptr7588604, i64 0             ; &cloptr7588604[0]
  %f7588607 = load i64, i64* %i0ptr7588605, align 8                                  ; load; *i0ptr7588605
  %fptr7588606 = inttoptr i64 %f7588607 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588606(i64 %a7581097, i64 %rva7584410)             ; tail call
  ret void

else7588597:
  %arg7582451 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588608, i32 0, i32 0)); quoted string
  %retprim7581276 = call i64 @prim_halt(i64 %arg7582451)                             ; call prim_halt
  %cloptr7588609 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588611 = getelementptr inbounds i64, i64* %cloptr7588609, i64 1              ; &eptr7588611[1]
  %eptr7588612 = getelementptr inbounds i64, i64* %cloptr7588609, i64 2              ; &eptr7588612[2]
  %eptr7588613 = getelementptr inbounds i64, i64* %cloptr7588609, i64 3              ; &eptr7588613[3]
  store i64 %eox$l, i64* %eptr7588611                                                ; *eptr7588611 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588612                                  ; *eptr7588612 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588613                                          ; *eptr7588613 = %cont7581271
  %eptr7588610 = getelementptr inbounds i64, i64* %cloptr7588609, i64 0              ; &cloptr7588609[0]
  %f7588614 = ptrtoint void(i64,i64)* @lam7586651 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588614, i64* %eptr7588610                                             ; store fptr
  %arg7582454 = ptrtoint i64* %cloptr7588609 to i64                                  ; closure cast; i64* -> i64
  %arg7582453 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584438 = add i64 0, 0                                                         ; quoted ()
  %rva7584437 = call i64 @prim_cons(i64 %retprim7581276, i64 %rva7584438)            ; call prim_cons
  %rva7584436 = call i64 @prim_cons(i64 %arg7582453, i64 %rva7584437)                ; call prim_cons
  %cloptr7588615 = inttoptr i64 %arg7582454 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588616 = getelementptr inbounds i64, i64* %cloptr7588615, i64 0             ; &cloptr7588615[0]
  %f7588618 = load i64, i64* %i0ptr7588616, align 8                                  ; load; *i0ptr7588616
  %fptr7588617 = inttoptr i64 %f7588618 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588617(i64 %arg7582454, i64 %rva7584436)           ; tail call
  ret void

else7588594:
  %retprim7581277 = call i64 @prim_void()                                            ; call prim_void
  %arg7582479 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584441 = add i64 0, 0                                                         ; quoted ()
  %rva7584440 = call i64 @prim_cons(i64 %retprim7581277, i64 %rva7584441)            ; call prim_cons
  %rva7584439 = call i64 @prim_cons(i64 %arg7582479, i64 %rva7584440)                ; call prim_cons
  %cloptr7588619 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588620 = getelementptr inbounds i64, i64* %cloptr7588619, i64 0             ; &cloptr7588619[0]
  %f7588622 = load i64, i64* %i0ptr7588620, align 8                                  ; load; *i0ptr7588620
  %fptr7588621 = inttoptr i64 %f7588622 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588621(i64 %cont7581271, i64 %rva7584439)          ; tail call
  ret void
}


define void @lam7586651(i64 %env7586652, i64 %rvp7584435) {
  %envptr7588623 = inttoptr i64 %env7586652 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588624 = getelementptr inbounds i64, i64* %envptr7588623, i64 3            ; &envptr7588623[3]
  %cont7581271 = load i64, i64* %envptr7588624, align 8                              ; load; *envptr7588624
  %envptr7588625 = inttoptr i64 %env7586652 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588626 = getelementptr inbounds i64, i64* %envptr7588625, i64 2            ; &envptr7588625[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588626, align 8                      ; load; *envptr7588626
  %envptr7588627 = inttoptr i64 %env7586652 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588628 = getelementptr inbounds i64, i64* %envptr7588627, i64 1            ; &envptr7588627[1]
  %eox$l = load i64, i64* %envptr7588628, align 8                                    ; load; *envptr7588628
  %_957581272 = call i64 @prim_car(i64 %rvp7584435)                                  ; call prim_car
  %rvp7584434 = call i64 @prim_cdr(i64 %rvp7584435)                                  ; call prim_cdr
  %TO0$_95t = call i64 @prim_car(i64 %rvp7584434)                                    ; call prim_car
  %na7584414 = call i64 @prim_cdr(i64 %rvp7584434)                                   ; call prim_cdr
  %a7581099 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581100 = call i64 @prim_car(i64 %a7581099)                                      ; call prim_car
  %a7581101 = call i64 @prim_procedure_63(i64 %a7581100)                             ; call prim_procedure_63
  %cmp7588629 = icmp eq i64 %a7581101, 15                                            ; false?
  br i1 %cmp7588629, label %else7588631, label %then7588630                          ; if

then7588630:
  %a7581102 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581103 = call i64 @prim_car(i64 %a7581102)                                      ; call prim_car
  %cloptr7588632 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588634 = getelementptr inbounds i64, i64* %cloptr7588632, i64 1              ; &eptr7588634[1]
  %eptr7588635 = getelementptr inbounds i64, i64* %cloptr7588632, i64 2              ; &eptr7588635[2]
  %eptr7588636 = getelementptr inbounds i64, i64* %cloptr7588632, i64 3              ; &eptr7588636[3]
  store i64 %eox$l, i64* %eptr7588634                                                ; *eptr7588634 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588635                                  ; *eptr7588635 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588636                                          ; *eptr7588636 = %cont7581271
  %eptr7588633 = getelementptr inbounds i64, i64* %cloptr7588632, i64 0              ; &cloptr7588632[0]
  %f7588637 = ptrtoint void(i64,i64)* @lam7586641 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588637, i64* %eptr7588633                                             ; store fptr
  %arg7582460 = ptrtoint i64* %cloptr7588632 to i64                                  ; closure cast; i64* -> i64
  %rva7584423 = add i64 0, 0                                                         ; quoted ()
  %rva7584422 = call i64 @prim_cons(i64 %arg7582460, i64 %rva7584423)                ; call prim_cons
  %cloptr7588638 = inttoptr i64 %a7581103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588639 = getelementptr inbounds i64, i64* %cloptr7588638, i64 0             ; &cloptr7588638[0]
  %f7588641 = load i64, i64* %i0ptr7588639, align 8                                  ; load; *i0ptr7588639
  %fptr7588640 = inttoptr i64 %f7588641 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588640(i64 %a7581103, i64 %rva7584422)             ; tail call
  ret void

else7588631:
  %arg7582468 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588642, i32 0, i32 0)); quoted string
  %retprim7581275 = call i64 @prim_halt(i64 %arg7582468)                             ; call prim_halt
  %cloptr7588643 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588645 = getelementptr inbounds i64, i64* %cloptr7588643, i64 1              ; &eptr7588645[1]
  %eptr7588646 = getelementptr inbounds i64, i64* %cloptr7588643, i64 2              ; &eptr7588646[2]
  %eptr7588647 = getelementptr inbounds i64, i64* %cloptr7588643, i64 3              ; &eptr7588647[3]
  store i64 %eox$l, i64* %eptr7588645                                                ; *eptr7588645 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588646                                  ; *eptr7588646 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588647                                          ; *eptr7588647 = %cont7581271
  %eptr7588644 = getelementptr inbounds i64, i64* %cloptr7588643, i64 0              ; &cloptr7588643[0]
  %f7588648 = ptrtoint void(i64,i64)* @lam7586648 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588648, i64* %eptr7588644                                             ; store fptr
  %arg7582471 = ptrtoint i64* %cloptr7588643 to i64                                  ; closure cast; i64* -> i64
  %arg7582470 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584433 = add i64 0, 0                                                         ; quoted ()
  %rva7584432 = call i64 @prim_cons(i64 %retprim7581275, i64 %rva7584433)            ; call prim_cons
  %rva7584431 = call i64 @prim_cons(i64 %arg7582470, i64 %rva7584432)                ; call prim_cons
  %cloptr7588649 = inttoptr i64 %arg7582471 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588650 = getelementptr inbounds i64, i64* %cloptr7588649, i64 0             ; &cloptr7588649[0]
  %f7588652 = load i64, i64* %i0ptr7588650, align 8                                  ; load; *i0ptr7588650
  %fptr7588651 = inttoptr i64 %f7588652 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588651(i64 %arg7582471, i64 %rva7584431)           ; tail call
  ret void
}


define void @lam7586648(i64 %env7586649, i64 %rvp7584430) {
  %envptr7588653 = inttoptr i64 %env7586649 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588654 = getelementptr inbounds i64, i64* %envptr7588653, i64 3            ; &envptr7588653[3]
  %cont7581271 = load i64, i64* %envptr7588654, align 8                              ; load; *envptr7588654
  %envptr7588655 = inttoptr i64 %env7586649 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588656 = getelementptr inbounds i64, i64* %envptr7588655, i64 2            ; &envptr7588655[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588656, align 8                      ; load; *envptr7588656
  %envptr7588657 = inttoptr i64 %env7586649 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588658 = getelementptr inbounds i64, i64* %envptr7588657, i64 1            ; &envptr7588657[1]
  %eox$l = load i64, i64* %envptr7588658, align 8                                    ; load; *envptr7588658
  %_957581273 = call i64 @prim_car(i64 %rvp7584430)                                  ; call prim_car
  %rvp7584429 = call i64 @prim_cdr(i64 %rvp7584430)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584429)                                    ; call prim_car
  %na7584425 = call i64 @prim_cdr(i64 %rvp7584429)                                   ; call prim_cdr
  %arg7582473 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582473, i64 %eox$l); call prim_vector_45set_33
  %arg7582476 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584428 = add i64 0, 0                                                         ; quoted ()
  %rva7584427 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584428)            ; call prim_cons
  %rva7584426 = call i64 @prim_cons(i64 %arg7582476, i64 %rva7584427)                ; call prim_cons
  %cloptr7588659 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588660 = getelementptr inbounds i64, i64* %cloptr7588659, i64 0             ; &cloptr7588659[0]
  %f7588662 = load i64, i64* %i0ptr7588660, align 8                                  ; load; *i0ptr7588660
  %fptr7588661 = inttoptr i64 %f7588662 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588661(i64 %cont7581271, i64 %rva7584426)          ; tail call
  ret void
}


define void @lam7586641(i64 %env7586642, i64 %rvp7584421) {
  %envptr7588663 = inttoptr i64 %env7586642 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588664 = getelementptr inbounds i64, i64* %envptr7588663, i64 3            ; &envptr7588663[3]
  %cont7581271 = load i64, i64* %envptr7588664, align 8                              ; load; *envptr7588664
  %envptr7588665 = inttoptr i64 %env7586642 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588666 = getelementptr inbounds i64, i64* %envptr7588665, i64 2            ; &envptr7588665[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588666, align 8                      ; load; *envptr7588666
  %envptr7588667 = inttoptr i64 %env7586642 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588668 = getelementptr inbounds i64, i64* %envptr7588667, i64 1            ; &envptr7588667[1]
  %eox$l = load i64, i64* %envptr7588668, align 8                                    ; load; *envptr7588668
  %_957581273 = call i64 @prim_car(i64 %rvp7584421)                                  ; call prim_car
  %rvp7584420 = call i64 @prim_cdr(i64 %rvp7584421)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584420)                                    ; call prim_car
  %na7584416 = call i64 @prim_cdr(i64 %rvp7584420)                                   ; call prim_cdr
  %arg7582463 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582463, i64 %eox$l); call prim_vector_45set_33
  %arg7582466 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584419 = add i64 0, 0                                                         ; quoted ()
  %rva7584418 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584419)            ; call prim_cons
  %rva7584417 = call i64 @prim_cons(i64 %arg7582466, i64 %rva7584418)                ; call prim_cons
  %cloptr7588669 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588670 = getelementptr inbounds i64, i64* %cloptr7588669, i64 0             ; &cloptr7588669[0]
  %f7588672 = load i64, i64* %i0ptr7588670, align 8                                  ; load; *i0ptr7588670
  %fptr7588671 = inttoptr i64 %f7588672 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588671(i64 %cont7581271, i64 %rva7584417)          ; tail call
  ret void
}


define void @lam7586632(i64 %env7586633, i64 %rvp7584409) {
  %envptr7588673 = inttoptr i64 %env7586633 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588674 = getelementptr inbounds i64, i64* %envptr7588673, i64 3            ; &envptr7588673[3]
  %cont7581271 = load i64, i64* %envptr7588674, align 8                              ; load; *envptr7588674
  %envptr7588675 = inttoptr i64 %env7586633 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588676 = getelementptr inbounds i64, i64* %envptr7588675, i64 2            ; &envptr7588675[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588676, align 8                      ; load; *envptr7588676
  %envptr7588677 = inttoptr i64 %env7586633 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588678 = getelementptr inbounds i64, i64* %envptr7588677, i64 1            ; &envptr7588677[1]
  %eox$l = load i64, i64* %envptr7588678, align 8                                    ; load; *envptr7588678
  %_957581272 = call i64 @prim_car(i64 %rvp7584409)                                  ; call prim_car
  %rvp7584408 = call i64 @prim_cdr(i64 %rvp7584409)                                  ; call prim_cdr
  %TO0$_95t = call i64 @prim_car(i64 %rvp7584408)                                    ; call prim_car
  %na7584388 = call i64 @prim_cdr(i64 %rvp7584408)                                   ; call prim_cdr
  %a7581099 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581100 = call i64 @prim_car(i64 %a7581099)                                      ; call prim_car
  %a7581101 = call i64 @prim_procedure_63(i64 %a7581100)                             ; call prim_procedure_63
  %cmp7588679 = icmp eq i64 %a7581101, 15                                            ; false?
  br i1 %cmp7588679, label %else7588681, label %then7588680                          ; if

then7588680:
  %a7581102 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581103 = call i64 @prim_car(i64 %a7581102)                                      ; call prim_car
  %cloptr7588682 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588684 = getelementptr inbounds i64, i64* %cloptr7588682, i64 1              ; &eptr7588684[1]
  %eptr7588685 = getelementptr inbounds i64, i64* %cloptr7588682, i64 2              ; &eptr7588685[2]
  %eptr7588686 = getelementptr inbounds i64, i64* %cloptr7588682, i64 3              ; &eptr7588686[3]
  store i64 %eox$l, i64* %eptr7588684                                                ; *eptr7588684 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588685                                  ; *eptr7588685 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588686                                          ; *eptr7588686 = %cont7581271
  %eptr7588683 = getelementptr inbounds i64, i64* %cloptr7588682, i64 0              ; &cloptr7588682[0]
  %f7588687 = ptrtoint void(i64,i64)* @lam7586622 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588687, i64* %eptr7588683                                             ; store fptr
  %arg7582433 = ptrtoint i64* %cloptr7588682 to i64                                  ; closure cast; i64* -> i64
  %rva7584397 = add i64 0, 0                                                         ; quoted ()
  %rva7584396 = call i64 @prim_cons(i64 %arg7582433, i64 %rva7584397)                ; call prim_cons
  %cloptr7588688 = inttoptr i64 %a7581103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588689 = getelementptr inbounds i64, i64* %cloptr7588688, i64 0             ; &cloptr7588688[0]
  %f7588691 = load i64, i64* %i0ptr7588689, align 8                                  ; load; *i0ptr7588689
  %fptr7588690 = inttoptr i64 %f7588691 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588690(i64 %a7581103, i64 %rva7584396)             ; tail call
  ret void

else7588681:
  %arg7582441 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588692, i32 0, i32 0)); quoted string
  %retprim7581275 = call i64 @prim_halt(i64 %arg7582441)                             ; call prim_halt
  %cloptr7588693 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588695 = getelementptr inbounds i64, i64* %cloptr7588693, i64 1              ; &eptr7588695[1]
  %eptr7588696 = getelementptr inbounds i64, i64* %cloptr7588693, i64 2              ; &eptr7588696[2]
  %eptr7588697 = getelementptr inbounds i64, i64* %cloptr7588693, i64 3              ; &eptr7588697[3]
  store i64 %eox$l, i64* %eptr7588695                                                ; *eptr7588695 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588696                                  ; *eptr7588696 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588697                                          ; *eptr7588697 = %cont7581271
  %eptr7588694 = getelementptr inbounds i64, i64* %cloptr7588693, i64 0              ; &cloptr7588693[0]
  %f7588698 = ptrtoint void(i64,i64)* @lam7586629 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588698, i64* %eptr7588694                                             ; store fptr
  %arg7582444 = ptrtoint i64* %cloptr7588693 to i64                                  ; closure cast; i64* -> i64
  %arg7582443 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584407 = add i64 0, 0                                                         ; quoted ()
  %rva7584406 = call i64 @prim_cons(i64 %retprim7581275, i64 %rva7584407)            ; call prim_cons
  %rva7584405 = call i64 @prim_cons(i64 %arg7582443, i64 %rva7584406)                ; call prim_cons
  %cloptr7588699 = inttoptr i64 %arg7582444 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588700 = getelementptr inbounds i64, i64* %cloptr7588699, i64 0             ; &cloptr7588699[0]
  %f7588702 = load i64, i64* %i0ptr7588700, align 8                                  ; load; *i0ptr7588700
  %fptr7588701 = inttoptr i64 %f7588702 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588701(i64 %arg7582444, i64 %rva7584405)           ; tail call
  ret void
}


define void @lam7586629(i64 %env7586630, i64 %rvp7584404) {
  %envptr7588703 = inttoptr i64 %env7586630 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588704 = getelementptr inbounds i64, i64* %envptr7588703, i64 3            ; &envptr7588703[3]
  %cont7581271 = load i64, i64* %envptr7588704, align 8                              ; load; *envptr7588704
  %envptr7588705 = inttoptr i64 %env7586630 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588706 = getelementptr inbounds i64, i64* %envptr7588705, i64 2            ; &envptr7588705[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588706, align 8                      ; load; *envptr7588706
  %envptr7588707 = inttoptr i64 %env7586630 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588708 = getelementptr inbounds i64, i64* %envptr7588707, i64 1            ; &envptr7588707[1]
  %eox$l = load i64, i64* %envptr7588708, align 8                                    ; load; *envptr7588708
  %_957581273 = call i64 @prim_car(i64 %rvp7584404)                                  ; call prim_car
  %rvp7584403 = call i64 @prim_cdr(i64 %rvp7584404)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584403)                                    ; call prim_car
  %na7584399 = call i64 @prim_cdr(i64 %rvp7584403)                                   ; call prim_cdr
  %arg7582446 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582446, i64 %eox$l); call prim_vector_45set_33
  %arg7582449 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584402 = add i64 0, 0                                                         ; quoted ()
  %rva7584401 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584402)            ; call prim_cons
  %rva7584400 = call i64 @prim_cons(i64 %arg7582449, i64 %rva7584401)                ; call prim_cons
  %cloptr7588709 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588710 = getelementptr inbounds i64, i64* %cloptr7588709, i64 0             ; &cloptr7588709[0]
  %f7588712 = load i64, i64* %i0ptr7588710, align 8                                  ; load; *i0ptr7588710
  %fptr7588711 = inttoptr i64 %f7588712 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588711(i64 %cont7581271, i64 %rva7584400)          ; tail call
  ret void
}


define void @lam7586622(i64 %env7586623, i64 %rvp7584395) {
  %envptr7588713 = inttoptr i64 %env7586623 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588714 = getelementptr inbounds i64, i64* %envptr7588713, i64 3            ; &envptr7588713[3]
  %cont7581271 = load i64, i64* %envptr7588714, align 8                              ; load; *envptr7588714
  %envptr7588715 = inttoptr i64 %env7586623 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588716 = getelementptr inbounds i64, i64* %envptr7588715, i64 2            ; &envptr7588715[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588716, align 8                      ; load; *envptr7588716
  %envptr7588717 = inttoptr i64 %env7586623 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588718 = getelementptr inbounds i64, i64* %envptr7588717, i64 1            ; &envptr7588717[1]
  %eox$l = load i64, i64* %envptr7588718, align 8                                    ; load; *envptr7588718
  %_957581273 = call i64 @prim_car(i64 %rvp7584395)                                  ; call prim_car
  %rvp7584394 = call i64 @prim_cdr(i64 %rvp7584395)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584394)                                    ; call prim_car
  %na7584390 = call i64 @prim_cdr(i64 %rvp7584394)                                   ; call prim_cdr
  %arg7582436 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582436, i64 %eox$l); call prim_vector_45set_33
  %arg7582439 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584393 = add i64 0, 0                                                         ; quoted ()
  %rva7584392 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584393)            ; call prim_cons
  %rva7584391 = call i64 @prim_cons(i64 %arg7582439, i64 %rva7584392)                ; call prim_cons
  %cloptr7588719 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588720 = getelementptr inbounds i64, i64* %cloptr7588719, i64 0             ; &cloptr7588719[0]
  %f7588722 = load i64, i64* %i0ptr7588720, align 8                                  ; load; *i0ptr7588720
  %fptr7588721 = inttoptr i64 %f7588722 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588721(i64 %cont7581271, i64 %rva7584391)          ; tail call
  ret void
}


define void @lam7586601(i64 %env7586602, i64 %rvp7584372) {
  %envptr7588723 = inttoptr i64 %env7586602 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588724 = getelementptr inbounds i64, i64* %envptr7588723, i64 4            ; &envptr7588723[4]
  %cont7581267 = load i64, i64* %envptr7588724, align 8                              ; load; *envptr7588724
  %envptr7588725 = inttoptr i64 %env7586602 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588726 = getelementptr inbounds i64, i64* %envptr7588725, i64 3            ; &envptr7588725[3]
  %NkA$tail = load i64, i64* %envptr7588726, align 8                                 ; load; *envptr7588726
  %envptr7588727 = inttoptr i64 %env7586602 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588728 = getelementptr inbounds i64, i64* %envptr7588727, i64 2            ; &envptr7588727[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588728, align 8                      ; load; *envptr7588728
  %envptr7588729 = inttoptr i64 %env7586602 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588730 = getelementptr inbounds i64, i64* %envptr7588729, i64 1            ; &envptr7588729[1]
  %gKR$new = load i64, i64* %envptr7588730, align 8                                  ; load; *envptr7588730
  %_957581269 = call i64 @prim_car(i64 %rvp7584372)                                  ; call prim_car
  %rvp7584371 = call i64 @prim_cdr(i64 %rvp7584372)                                  ; call prim_cdr
  %NGZ$_95t = call i64 @prim_car(i64 %rvp7584371)                                    ; call prim_car
  %na7584289 = call i64 @prim_cdr(i64 %rvp7584371)                                   ; call prim_cdr
  %cloptr7588731 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7588732 = getelementptr inbounds i64, i64* %cloptr7588731, i64 0              ; &cloptr7588731[0]
  %f7588733 = ptrtoint void(i64,i64)* @lam7586599 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588733, i64* %eptr7588732                                             ; store fptr
  %arg7582309 = ptrtoint i64* %cloptr7588731 to i64                                  ; closure cast; i64* -> i64
  %cloptr7588734 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588736 = getelementptr inbounds i64, i64* %cloptr7588734, i64 1              ; &eptr7588736[1]
  %eptr7588737 = getelementptr inbounds i64, i64* %cloptr7588734, i64 2              ; &eptr7588737[2]
  %eptr7588738 = getelementptr inbounds i64, i64* %cloptr7588734, i64 3              ; &eptr7588738[3]
  %eptr7588739 = getelementptr inbounds i64, i64* %cloptr7588734, i64 4              ; &eptr7588739[4]
  store i64 %gKR$new, i64* %eptr7588736                                              ; *eptr7588736 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588737                                  ; *eptr7588737 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588738                                             ; *eptr7588738 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588739                                          ; *eptr7588739 = %cont7581267
  %eptr7588735 = getelementptr inbounds i64, i64* %cloptr7588734, i64 0              ; &cloptr7588734[0]
  %f7588740 = ptrtoint void(i64,i64)* @lam7586595 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588740, i64* %eptr7588735                                             ; store fptr
  %arg7582308 = ptrtoint i64* %cloptr7588734 to i64                                  ; closure cast; i64* -> i64
  %rva7584370 = add i64 0, 0                                                         ; quoted ()
  %rva7584369 = call i64 @prim_cons(i64 %arg7582308, i64 %rva7584370)                ; call prim_cons
  %cloptr7588741 = inttoptr i64 %arg7582309 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588742 = getelementptr inbounds i64, i64* %cloptr7588741, i64 0             ; &cloptr7588741[0]
  %f7588744 = load i64, i64* %i0ptr7588742, align 8                                  ; load; *i0ptr7588742
  %fptr7588743 = inttoptr i64 %f7588744 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588743(i64 %arg7582309, i64 %rva7584369)           ; tail call
  ret void
}


define void @lam7586599(i64 %env7586600, i64 %Noz$lst7581282) {
  %cont7581281 = call i64 @prim_car(i64 %Noz$lst7581282)                             ; call prim_car
  %Noz$lst = call i64 @prim_cdr(i64 %Noz$lst7581282)                                 ; call prim_cdr
  %arg7582313 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584292 = add i64 0, 0                                                         ; quoted ()
  %rva7584291 = call i64 @prim_cons(i64 %Noz$lst, i64 %rva7584292)                   ; call prim_cons
  %rva7584290 = call i64 @prim_cons(i64 %arg7582313, i64 %rva7584291)                ; call prim_cons
  %cloptr7588745 = inttoptr i64 %cont7581281 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588746 = getelementptr inbounds i64, i64* %cloptr7588745, i64 0             ; &cloptr7588745[0]
  %f7588748 = load i64, i64* %i0ptr7588746, align 8                                  ; load; *i0ptr7588746
  %fptr7588747 = inttoptr i64 %f7588748 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588747(i64 %cont7581281, i64 %rva7584290)          ; tail call
  ret void
}


define void @lam7586595(i64 %env7586596, i64 %rvp7584368) {
  %envptr7588749 = inttoptr i64 %env7586596 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588750 = getelementptr inbounds i64, i64* %envptr7588749, i64 4            ; &envptr7588749[4]
  %cont7581267 = load i64, i64* %envptr7588750, align 8                              ; load; *envptr7588750
  %envptr7588751 = inttoptr i64 %env7586596 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588752 = getelementptr inbounds i64, i64* %envptr7588751, i64 3            ; &envptr7588751[3]
  %NkA$tail = load i64, i64* %envptr7588752, align 8                                 ; load; *envptr7588752
  %envptr7588753 = inttoptr i64 %env7586596 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588754 = getelementptr inbounds i64, i64* %envptr7588753, i64 2            ; &envptr7588753[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588754, align 8                      ; load; *envptr7588754
  %envptr7588755 = inttoptr i64 %env7586596 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588756 = getelementptr inbounds i64, i64* %envptr7588755, i64 1            ; &envptr7588755[1]
  %gKR$new = load i64, i64* %envptr7588756, align 8                                  ; load; *envptr7588756
  %_957581279 = call i64 @prim_car(i64 %rvp7584368)                                  ; call prim_car
  %rvp7584367 = call i64 @prim_cdr(i64 %rvp7584368)                                  ; call prim_cdr
  %a7581092 = call i64 @prim_car(i64 %rvp7584367)                                    ; call prim_car
  %na7584294 = call i64 @prim_cdr(i64 %rvp7584367)                                   ; call prim_cdr
  %arg7582316 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581280 = call i64 @prim_make_45vector(i64 %arg7582316, i64 %a7581092)     ; call prim_make_45vector
  %cloptr7588757 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588759 = getelementptr inbounds i64, i64* %cloptr7588757, i64 1              ; &eptr7588759[1]
  %eptr7588760 = getelementptr inbounds i64, i64* %cloptr7588757, i64 2              ; &eptr7588760[2]
  %eptr7588761 = getelementptr inbounds i64, i64* %cloptr7588757, i64 3              ; &eptr7588761[3]
  %eptr7588762 = getelementptr inbounds i64, i64* %cloptr7588757, i64 4              ; &eptr7588762[4]
  store i64 %gKR$new, i64* %eptr7588759                                              ; *eptr7588759 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588760                                  ; *eptr7588760 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588761                                             ; *eptr7588761 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588762                                          ; *eptr7588762 = %cont7581267
  %eptr7588758 = getelementptr inbounds i64, i64* %cloptr7588757, i64 0              ; &cloptr7588757[0]
  %f7588763 = ptrtoint void(i64,i64)* @lam7586592 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588763, i64* %eptr7588758                                             ; store fptr
  %arg7582319 = ptrtoint i64* %cloptr7588757 to i64                                  ; closure cast; i64* -> i64
  %arg7582318 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584366 = add i64 0, 0                                                         ; quoted ()
  %rva7584365 = call i64 @prim_cons(i64 %retprim7581280, i64 %rva7584366)            ; call prim_cons
  %rva7584364 = call i64 @prim_cons(i64 %arg7582318, i64 %rva7584365)                ; call prim_cons
  %cloptr7588764 = inttoptr i64 %arg7582319 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588765 = getelementptr inbounds i64, i64* %cloptr7588764, i64 0             ; &cloptr7588764[0]
  %f7588767 = load i64, i64* %i0ptr7588765, align 8                                  ; load; *i0ptr7588765
  %fptr7588766 = inttoptr i64 %f7588767 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588766(i64 %arg7582319, i64 %rva7584364)           ; tail call
  ret void
}


define void @lam7586592(i64 %env7586593, i64 %rvp7584363) {
  %envptr7588768 = inttoptr i64 %env7586593 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588769 = getelementptr inbounds i64, i64* %envptr7588768, i64 4            ; &envptr7588768[4]
  %cont7581267 = load i64, i64* %envptr7588769, align 8                              ; load; *envptr7588769
  %envptr7588770 = inttoptr i64 %env7586593 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588771 = getelementptr inbounds i64, i64* %envptr7588770, i64 3            ; &envptr7588770[3]
  %NkA$tail = load i64, i64* %envptr7588771, align 8                                 ; load; *envptr7588771
  %envptr7588772 = inttoptr i64 %env7586593 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588773 = getelementptr inbounds i64, i64* %envptr7588772, i64 2            ; &envptr7588772[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588773, align 8                      ; load; *envptr7588773
  %envptr7588774 = inttoptr i64 %env7586593 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588775 = getelementptr inbounds i64, i64* %envptr7588774, i64 1            ; &envptr7588774[1]
  %gKR$new = load i64, i64* %envptr7588775, align 8                                  ; load; *envptr7588775
  %_957581270 = call i64 @prim_car(i64 %rvp7584363)                                  ; call prim_car
  %rvp7584362 = call i64 @prim_cdr(i64 %rvp7584363)                                  ; call prim_cdr
  %yup$f = call i64 @prim_car(i64 %rvp7584362)                                       ; call prim_car
  %na7584296 = call i64 @prim_cdr(i64 %rvp7584362)                                   ; call prim_cdr
  %cloptr7588776 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588778 = getelementptr inbounds i64, i64* %cloptr7588776, i64 1              ; &eptr7588778[1]
  %eptr7588779 = getelementptr inbounds i64, i64* %cloptr7588776, i64 2              ; &eptr7588779[2]
  %eptr7588780 = getelementptr inbounds i64, i64* %cloptr7588776, i64 3              ; &eptr7588780[3]
  store i64 %CPS$_37wind_45stack, i64* %eptr7588778                                  ; *eptr7588778 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588779                                             ; *eptr7588779 = %NkA$tail
  store i64 %yup$f, i64* %eptr7588780                                                ; *eptr7588780 = %yup$f
  %eptr7588777 = getelementptr inbounds i64, i64* %cloptr7588776, i64 0              ; &cloptr7588776[0]
  %f7588781 = ptrtoint void(i64,i64)* @lam7586590 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588781, i64* %eptr7588777                                             ; store fptr
  %C5u$f7580966 = ptrtoint i64* %cloptr7588776 to i64                                ; closure cast; i64* -> i64
  %arg7582386 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %Ksh$_95t = call i64 @prim_vector_45set_33(i64 %yup$f, i64 %arg7582386, i64 %C5u$f7580966); call prim_vector_45set_33
  %arg7582388 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581104 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582388)               ; call prim_vector_45ref
  %a7581105 = call i64 @prim_procedure_63(i64 %a7581104)                             ; call prim_procedure_63
  %cmp7588782 = icmp eq i64 %a7581105, 15                                            ; false?
  br i1 %cmp7588782, label %else7588784, label %then7588783                          ; if

then7588783:
  %arg7582391 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581106 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582391)               ; call prim_vector_45ref
  %rva7584358 = add i64 0, 0                                                         ; quoted ()
  %rva7584357 = call i64 @prim_cons(i64 %gKR$new, i64 %rva7584358)                   ; call prim_cons
  %rva7584356 = call i64 @prim_cons(i64 %cont7581267, i64 %rva7584357)               ; call prim_cons
  %cloptr7588785 = inttoptr i64 %a7581106 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588786 = getelementptr inbounds i64, i64* %cloptr7588785, i64 0             ; &cloptr7588785[0]
  %f7588788 = load i64, i64* %i0ptr7588786, align 8                                  ; load; *i0ptr7588786
  %fptr7588787 = inttoptr i64 %f7588788 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588787(i64 %a7581106, i64 %rva7584356)             ; tail call
  ret void

else7588784:
  %arg7582396 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588789, i32 0, i32 0)); quoted string
  %retprim7581278 = call i64 @prim_halt(i64 %arg7582396)                             ; call prim_halt
  %arg7582398 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584361 = add i64 0, 0                                                         ; quoted ()
  %rva7584360 = call i64 @prim_cons(i64 %retprim7581278, i64 %rva7584361)            ; call prim_cons
  %rva7584359 = call i64 @prim_cons(i64 %arg7582398, i64 %rva7584360)                ; call prim_cons
  %cloptr7588790 = inttoptr i64 %cont7581267 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588791 = getelementptr inbounds i64, i64* %cloptr7588790, i64 0             ; &cloptr7588790[0]
  %f7588793 = load i64, i64* %i0ptr7588791, align 8                                  ; load; *i0ptr7588791
  %fptr7588792 = inttoptr i64 %f7588793 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588792(i64 %cont7581267, i64 %rva7584359)          ; tail call
  ret void
}


define void @lam7586590(i64 %env7586591, i64 %rvp7584355) {
  %envptr7588794 = inttoptr i64 %env7586591 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588795 = getelementptr inbounds i64, i64* %envptr7588794, i64 3            ; &envptr7588794[3]
  %yup$f = load i64, i64* %envptr7588795, align 8                                    ; load; *envptr7588795
  %envptr7588796 = inttoptr i64 %env7586591 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588797 = getelementptr inbounds i64, i64* %envptr7588796, i64 2            ; &envptr7588796[2]
  %NkA$tail = load i64, i64* %envptr7588797, align 8                                 ; load; *envptr7588797
  %envptr7588798 = inttoptr i64 %env7586591 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588799 = getelementptr inbounds i64, i64* %envptr7588798, i64 1            ; &envptr7588798[1]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588799, align 8                      ; load; *envptr7588799
  %cont7581271 = call i64 @prim_car(i64 %rvp7584355)                                 ; call prim_car
  %rvp7584354 = call i64 @prim_cdr(i64 %rvp7584355)                                  ; call prim_cdr
  %eox$l = call i64 @prim_car(i64 %rvp7584354)                                       ; call prim_car
  %na7584298 = call i64 @prim_cdr(i64 %rvp7584354)                                   ; call prim_cdr
  %a7581093 = call i64 @prim_eq_63(i64 %eox$l, i64 %NkA$tail)                        ; call prim_eq_63
  %a7581094 = call i64 @prim_not(i64 %a7581093)                                      ; call prim_not
  %cmp7588800 = icmp eq i64 %a7581094, 15                                            ; false?
  br i1 %cmp7588800, label %else7588802, label %then7588801                          ; if

then7588801:
  %arg7582323 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581095 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582323)               ; call prim_vector_45ref
  %a7581096 = call i64 @prim_procedure_63(i64 %a7581095)                             ; call prim_procedure_63
  %cmp7588803 = icmp eq i64 %a7581096, 15                                            ; false?
  br i1 %cmp7588803, label %else7588805, label %then7588804                          ; if

then7588804:
  %arg7582326 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581097 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582326)               ; call prim_vector_45ref
  %a7581098 = call i64 @prim_cdr(i64 %eox$l)                                         ; call prim_cdr
  %cloptr7588806 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588808 = getelementptr inbounds i64, i64* %cloptr7588806, i64 1              ; &eptr7588808[1]
  %eptr7588809 = getelementptr inbounds i64, i64* %cloptr7588806, i64 2              ; &eptr7588809[2]
  %eptr7588810 = getelementptr inbounds i64, i64* %cloptr7588806, i64 3              ; &eptr7588810[3]
  store i64 %eox$l, i64* %eptr7588808                                                ; *eptr7588808 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588809                                  ; *eptr7588809 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588810                                          ; *eptr7588810 = %cont7581271
  %eptr7588807 = getelementptr inbounds i64, i64* %cloptr7588806, i64 0              ; &cloptr7588806[0]
  %f7588811 = ptrtoint void(i64,i64)* @lam7586565 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588811, i64* %eptr7588807                                             ; store fptr
  %arg7582330 = ptrtoint i64* %cloptr7588806 to i64                                  ; closure cast; i64* -> i64
  %rva7584324 = add i64 0, 0                                                         ; quoted ()
  %rva7584323 = call i64 @prim_cons(i64 %a7581098, i64 %rva7584324)                  ; call prim_cons
  %rva7584322 = call i64 @prim_cons(i64 %arg7582330, i64 %rva7584323)                ; call prim_cons
  %cloptr7588812 = inttoptr i64 %a7581097 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588813 = getelementptr inbounds i64, i64* %cloptr7588812, i64 0             ; &cloptr7588812[0]
  %f7588815 = load i64, i64* %i0ptr7588813, align 8                                  ; load; *i0ptr7588813
  %fptr7588814 = inttoptr i64 %f7588815 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588814(i64 %a7581097, i64 %rva7584322)             ; tail call
  ret void

else7588805:
  %arg7582355 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588816, i32 0, i32 0)); quoted string
  %retprim7581276 = call i64 @prim_halt(i64 %arg7582355)                             ; call prim_halt
  %cloptr7588817 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588819 = getelementptr inbounds i64, i64* %cloptr7588817, i64 1              ; &eptr7588819[1]
  %eptr7588820 = getelementptr inbounds i64, i64* %cloptr7588817, i64 2              ; &eptr7588820[2]
  %eptr7588821 = getelementptr inbounds i64, i64* %cloptr7588817, i64 3              ; &eptr7588821[3]
  store i64 %eox$l, i64* %eptr7588819                                                ; *eptr7588819 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588820                                  ; *eptr7588820 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588821                                          ; *eptr7588821 = %cont7581271
  %eptr7588818 = getelementptr inbounds i64, i64* %cloptr7588817, i64 0              ; &cloptr7588817[0]
  %f7588822 = ptrtoint void(i64,i64)* @lam7586584 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588822, i64* %eptr7588818                                             ; store fptr
  %arg7582358 = ptrtoint i64* %cloptr7588817 to i64                                  ; closure cast; i64* -> i64
  %arg7582357 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584350 = add i64 0, 0                                                         ; quoted ()
  %rva7584349 = call i64 @prim_cons(i64 %retprim7581276, i64 %rva7584350)            ; call prim_cons
  %rva7584348 = call i64 @prim_cons(i64 %arg7582357, i64 %rva7584349)                ; call prim_cons
  %cloptr7588823 = inttoptr i64 %arg7582358 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588824 = getelementptr inbounds i64, i64* %cloptr7588823, i64 0             ; &cloptr7588823[0]
  %f7588826 = load i64, i64* %i0ptr7588824, align 8                                  ; load; *i0ptr7588824
  %fptr7588825 = inttoptr i64 %f7588826 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588825(i64 %arg7582358, i64 %rva7584348)           ; tail call
  ret void

else7588802:
  %retprim7581277 = call i64 @prim_void()                                            ; call prim_void
  %arg7582383 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584353 = add i64 0, 0                                                         ; quoted ()
  %rva7584352 = call i64 @prim_cons(i64 %retprim7581277, i64 %rva7584353)            ; call prim_cons
  %rva7584351 = call i64 @prim_cons(i64 %arg7582383, i64 %rva7584352)                ; call prim_cons
  %cloptr7588827 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588828 = getelementptr inbounds i64, i64* %cloptr7588827, i64 0             ; &cloptr7588827[0]
  %f7588830 = load i64, i64* %i0ptr7588828, align 8                                  ; load; *i0ptr7588828
  %fptr7588829 = inttoptr i64 %f7588830 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588829(i64 %cont7581271, i64 %rva7584351)          ; tail call
  ret void
}


define void @lam7586584(i64 %env7586585, i64 %rvp7584347) {
  %envptr7588831 = inttoptr i64 %env7586585 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588832 = getelementptr inbounds i64, i64* %envptr7588831, i64 3            ; &envptr7588831[3]
  %cont7581271 = load i64, i64* %envptr7588832, align 8                              ; load; *envptr7588832
  %envptr7588833 = inttoptr i64 %env7586585 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588834 = getelementptr inbounds i64, i64* %envptr7588833, i64 2            ; &envptr7588833[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588834, align 8                      ; load; *envptr7588834
  %envptr7588835 = inttoptr i64 %env7586585 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588836 = getelementptr inbounds i64, i64* %envptr7588835, i64 1            ; &envptr7588835[1]
  %eox$l = load i64, i64* %envptr7588836, align 8                                    ; load; *envptr7588836
  %_957581272 = call i64 @prim_car(i64 %rvp7584347)                                  ; call prim_car
  %rvp7584346 = call i64 @prim_cdr(i64 %rvp7584347)                                  ; call prim_cdr
  %TO0$_95t = call i64 @prim_car(i64 %rvp7584346)                                    ; call prim_car
  %na7584326 = call i64 @prim_cdr(i64 %rvp7584346)                                   ; call prim_cdr
  %a7581099 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581100 = call i64 @prim_car(i64 %a7581099)                                      ; call prim_car
  %a7581101 = call i64 @prim_procedure_63(i64 %a7581100)                             ; call prim_procedure_63
  %cmp7588837 = icmp eq i64 %a7581101, 15                                            ; false?
  br i1 %cmp7588837, label %else7588839, label %then7588838                          ; if

then7588838:
  %a7581102 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581103 = call i64 @prim_car(i64 %a7581102)                                      ; call prim_car
  %cloptr7588840 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588842 = getelementptr inbounds i64, i64* %cloptr7588840, i64 1              ; &eptr7588842[1]
  %eptr7588843 = getelementptr inbounds i64, i64* %cloptr7588840, i64 2              ; &eptr7588843[2]
  %eptr7588844 = getelementptr inbounds i64, i64* %cloptr7588840, i64 3              ; &eptr7588844[3]
  store i64 %eox$l, i64* %eptr7588842                                                ; *eptr7588842 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588843                                  ; *eptr7588843 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588844                                          ; *eptr7588844 = %cont7581271
  %eptr7588841 = getelementptr inbounds i64, i64* %cloptr7588840, i64 0              ; &cloptr7588840[0]
  %f7588845 = ptrtoint void(i64,i64)* @lam7586574 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588845, i64* %eptr7588841                                             ; store fptr
  %arg7582364 = ptrtoint i64* %cloptr7588840 to i64                                  ; closure cast; i64* -> i64
  %rva7584335 = add i64 0, 0                                                         ; quoted ()
  %rva7584334 = call i64 @prim_cons(i64 %arg7582364, i64 %rva7584335)                ; call prim_cons
  %cloptr7588846 = inttoptr i64 %a7581103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588847 = getelementptr inbounds i64, i64* %cloptr7588846, i64 0             ; &cloptr7588846[0]
  %f7588849 = load i64, i64* %i0ptr7588847, align 8                                  ; load; *i0ptr7588847
  %fptr7588848 = inttoptr i64 %f7588849 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588848(i64 %a7581103, i64 %rva7584334)             ; tail call
  ret void

else7588839:
  %arg7582372 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588850, i32 0, i32 0)); quoted string
  %retprim7581275 = call i64 @prim_halt(i64 %arg7582372)                             ; call prim_halt
  %cloptr7588851 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588853 = getelementptr inbounds i64, i64* %cloptr7588851, i64 1              ; &eptr7588853[1]
  %eptr7588854 = getelementptr inbounds i64, i64* %cloptr7588851, i64 2              ; &eptr7588854[2]
  %eptr7588855 = getelementptr inbounds i64, i64* %cloptr7588851, i64 3              ; &eptr7588855[3]
  store i64 %eox$l, i64* %eptr7588853                                                ; *eptr7588853 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588854                                  ; *eptr7588854 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588855                                          ; *eptr7588855 = %cont7581271
  %eptr7588852 = getelementptr inbounds i64, i64* %cloptr7588851, i64 0              ; &cloptr7588851[0]
  %f7588856 = ptrtoint void(i64,i64)* @lam7586581 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588856, i64* %eptr7588852                                             ; store fptr
  %arg7582375 = ptrtoint i64* %cloptr7588851 to i64                                  ; closure cast; i64* -> i64
  %arg7582374 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584345 = add i64 0, 0                                                         ; quoted ()
  %rva7584344 = call i64 @prim_cons(i64 %retprim7581275, i64 %rva7584345)            ; call prim_cons
  %rva7584343 = call i64 @prim_cons(i64 %arg7582374, i64 %rva7584344)                ; call prim_cons
  %cloptr7588857 = inttoptr i64 %arg7582375 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588858 = getelementptr inbounds i64, i64* %cloptr7588857, i64 0             ; &cloptr7588857[0]
  %f7588860 = load i64, i64* %i0ptr7588858, align 8                                  ; load; *i0ptr7588858
  %fptr7588859 = inttoptr i64 %f7588860 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588859(i64 %arg7582375, i64 %rva7584343)           ; tail call
  ret void
}


define void @lam7586581(i64 %env7586582, i64 %rvp7584342) {
  %envptr7588861 = inttoptr i64 %env7586582 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588862 = getelementptr inbounds i64, i64* %envptr7588861, i64 3            ; &envptr7588861[3]
  %cont7581271 = load i64, i64* %envptr7588862, align 8                              ; load; *envptr7588862
  %envptr7588863 = inttoptr i64 %env7586582 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588864 = getelementptr inbounds i64, i64* %envptr7588863, i64 2            ; &envptr7588863[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588864, align 8                      ; load; *envptr7588864
  %envptr7588865 = inttoptr i64 %env7586582 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588866 = getelementptr inbounds i64, i64* %envptr7588865, i64 1            ; &envptr7588865[1]
  %eox$l = load i64, i64* %envptr7588866, align 8                                    ; load; *envptr7588866
  %_957581273 = call i64 @prim_car(i64 %rvp7584342)                                  ; call prim_car
  %rvp7584341 = call i64 @prim_cdr(i64 %rvp7584342)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584341)                                    ; call prim_car
  %na7584337 = call i64 @prim_cdr(i64 %rvp7584341)                                   ; call prim_cdr
  %arg7582377 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582377, i64 %eox$l); call prim_vector_45set_33
  %arg7582380 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584340 = add i64 0, 0                                                         ; quoted ()
  %rva7584339 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584340)            ; call prim_cons
  %rva7584338 = call i64 @prim_cons(i64 %arg7582380, i64 %rva7584339)                ; call prim_cons
  %cloptr7588867 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588868 = getelementptr inbounds i64, i64* %cloptr7588867, i64 0             ; &cloptr7588867[0]
  %f7588870 = load i64, i64* %i0ptr7588868, align 8                                  ; load; *i0ptr7588868
  %fptr7588869 = inttoptr i64 %f7588870 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588869(i64 %cont7581271, i64 %rva7584338)          ; tail call
  ret void
}


define void @lam7586574(i64 %env7586575, i64 %rvp7584333) {
  %envptr7588871 = inttoptr i64 %env7586575 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588872 = getelementptr inbounds i64, i64* %envptr7588871, i64 3            ; &envptr7588871[3]
  %cont7581271 = load i64, i64* %envptr7588872, align 8                              ; load; *envptr7588872
  %envptr7588873 = inttoptr i64 %env7586575 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588874 = getelementptr inbounds i64, i64* %envptr7588873, i64 2            ; &envptr7588873[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588874, align 8                      ; load; *envptr7588874
  %envptr7588875 = inttoptr i64 %env7586575 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588876 = getelementptr inbounds i64, i64* %envptr7588875, i64 1            ; &envptr7588875[1]
  %eox$l = load i64, i64* %envptr7588876, align 8                                    ; load; *envptr7588876
  %_957581273 = call i64 @prim_car(i64 %rvp7584333)                                  ; call prim_car
  %rvp7584332 = call i64 @prim_cdr(i64 %rvp7584333)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584332)                                    ; call prim_car
  %na7584328 = call i64 @prim_cdr(i64 %rvp7584332)                                   ; call prim_cdr
  %arg7582367 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582367, i64 %eox$l); call prim_vector_45set_33
  %arg7582370 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584331 = add i64 0, 0                                                         ; quoted ()
  %rva7584330 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584331)            ; call prim_cons
  %rva7584329 = call i64 @prim_cons(i64 %arg7582370, i64 %rva7584330)                ; call prim_cons
  %cloptr7588877 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588878 = getelementptr inbounds i64, i64* %cloptr7588877, i64 0             ; &cloptr7588877[0]
  %f7588880 = load i64, i64* %i0ptr7588878, align 8                                  ; load; *i0ptr7588878
  %fptr7588879 = inttoptr i64 %f7588880 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588879(i64 %cont7581271, i64 %rva7584329)          ; tail call
  ret void
}


define void @lam7586565(i64 %env7586566, i64 %rvp7584321) {
  %envptr7588881 = inttoptr i64 %env7586566 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588882 = getelementptr inbounds i64, i64* %envptr7588881, i64 3            ; &envptr7588881[3]
  %cont7581271 = load i64, i64* %envptr7588882, align 8                              ; load; *envptr7588882
  %envptr7588883 = inttoptr i64 %env7586566 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588884 = getelementptr inbounds i64, i64* %envptr7588883, i64 2            ; &envptr7588883[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588884, align 8                      ; load; *envptr7588884
  %envptr7588885 = inttoptr i64 %env7586566 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588886 = getelementptr inbounds i64, i64* %envptr7588885, i64 1            ; &envptr7588885[1]
  %eox$l = load i64, i64* %envptr7588886, align 8                                    ; load; *envptr7588886
  %_957581272 = call i64 @prim_car(i64 %rvp7584321)                                  ; call prim_car
  %rvp7584320 = call i64 @prim_cdr(i64 %rvp7584321)                                  ; call prim_cdr
  %TO0$_95t = call i64 @prim_car(i64 %rvp7584320)                                    ; call prim_car
  %na7584300 = call i64 @prim_cdr(i64 %rvp7584320)                                   ; call prim_cdr
  %a7581099 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581100 = call i64 @prim_car(i64 %a7581099)                                      ; call prim_car
  %a7581101 = call i64 @prim_procedure_63(i64 %a7581100)                             ; call prim_procedure_63
  %cmp7588887 = icmp eq i64 %a7581101, 15                                            ; false?
  br i1 %cmp7588887, label %else7588889, label %then7588888                          ; if

then7588888:
  %a7581102 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581103 = call i64 @prim_car(i64 %a7581102)                                      ; call prim_car
  %cloptr7588890 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588892 = getelementptr inbounds i64, i64* %cloptr7588890, i64 1              ; &eptr7588892[1]
  %eptr7588893 = getelementptr inbounds i64, i64* %cloptr7588890, i64 2              ; &eptr7588893[2]
  %eptr7588894 = getelementptr inbounds i64, i64* %cloptr7588890, i64 3              ; &eptr7588894[3]
  store i64 %eox$l, i64* %eptr7588892                                                ; *eptr7588892 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588893                                  ; *eptr7588893 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588894                                          ; *eptr7588894 = %cont7581271
  %eptr7588891 = getelementptr inbounds i64, i64* %cloptr7588890, i64 0              ; &cloptr7588890[0]
  %f7588895 = ptrtoint void(i64,i64)* @lam7586555 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588895, i64* %eptr7588891                                             ; store fptr
  %arg7582337 = ptrtoint i64* %cloptr7588890 to i64                                  ; closure cast; i64* -> i64
  %rva7584309 = add i64 0, 0                                                         ; quoted ()
  %rva7584308 = call i64 @prim_cons(i64 %arg7582337, i64 %rva7584309)                ; call prim_cons
  %cloptr7588896 = inttoptr i64 %a7581103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588897 = getelementptr inbounds i64, i64* %cloptr7588896, i64 0             ; &cloptr7588896[0]
  %f7588899 = load i64, i64* %i0ptr7588897, align 8                                  ; load; *i0ptr7588897
  %fptr7588898 = inttoptr i64 %f7588899 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588898(i64 %a7581103, i64 %rva7584308)             ; tail call
  ret void

else7588889:
  %arg7582345 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7588900, i32 0, i32 0)); quoted string
  %retprim7581275 = call i64 @prim_halt(i64 %arg7582345)                             ; call prim_halt
  %cloptr7588901 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588903 = getelementptr inbounds i64, i64* %cloptr7588901, i64 1              ; &eptr7588903[1]
  %eptr7588904 = getelementptr inbounds i64, i64* %cloptr7588901, i64 2              ; &eptr7588904[2]
  %eptr7588905 = getelementptr inbounds i64, i64* %cloptr7588901, i64 3              ; &eptr7588905[3]
  store i64 %eox$l, i64* %eptr7588903                                                ; *eptr7588903 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7588904                                  ; *eptr7588904 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7588905                                          ; *eptr7588905 = %cont7581271
  %eptr7588902 = getelementptr inbounds i64, i64* %cloptr7588901, i64 0              ; &cloptr7588901[0]
  %f7588906 = ptrtoint void(i64,i64)* @lam7586562 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588906, i64* %eptr7588902                                             ; store fptr
  %arg7582348 = ptrtoint i64* %cloptr7588901 to i64                                  ; closure cast; i64* -> i64
  %arg7582347 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584319 = add i64 0, 0                                                         ; quoted ()
  %rva7584318 = call i64 @prim_cons(i64 %retprim7581275, i64 %rva7584319)            ; call prim_cons
  %rva7584317 = call i64 @prim_cons(i64 %arg7582347, i64 %rva7584318)                ; call prim_cons
  %cloptr7588907 = inttoptr i64 %arg7582348 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588908 = getelementptr inbounds i64, i64* %cloptr7588907, i64 0             ; &cloptr7588907[0]
  %f7588910 = load i64, i64* %i0ptr7588908, align 8                                  ; load; *i0ptr7588908
  %fptr7588909 = inttoptr i64 %f7588910 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588909(i64 %arg7582348, i64 %rva7584317)           ; tail call
  ret void
}


define void @lam7586562(i64 %env7586563, i64 %rvp7584316) {
  %envptr7588911 = inttoptr i64 %env7586563 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588912 = getelementptr inbounds i64, i64* %envptr7588911, i64 3            ; &envptr7588911[3]
  %cont7581271 = load i64, i64* %envptr7588912, align 8                              ; load; *envptr7588912
  %envptr7588913 = inttoptr i64 %env7586563 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588914 = getelementptr inbounds i64, i64* %envptr7588913, i64 2            ; &envptr7588913[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588914, align 8                      ; load; *envptr7588914
  %envptr7588915 = inttoptr i64 %env7586563 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588916 = getelementptr inbounds i64, i64* %envptr7588915, i64 1            ; &envptr7588915[1]
  %eox$l = load i64, i64* %envptr7588916, align 8                                    ; load; *envptr7588916
  %_957581273 = call i64 @prim_car(i64 %rvp7584316)                                  ; call prim_car
  %rvp7584315 = call i64 @prim_cdr(i64 %rvp7584316)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584315)                                    ; call prim_car
  %na7584311 = call i64 @prim_cdr(i64 %rvp7584315)                                   ; call prim_cdr
  %arg7582350 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582350, i64 %eox$l); call prim_vector_45set_33
  %arg7582353 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584314 = add i64 0, 0                                                         ; quoted ()
  %rva7584313 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584314)            ; call prim_cons
  %rva7584312 = call i64 @prim_cons(i64 %arg7582353, i64 %rva7584313)                ; call prim_cons
  %cloptr7588917 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588918 = getelementptr inbounds i64, i64* %cloptr7588917, i64 0             ; &cloptr7588917[0]
  %f7588920 = load i64, i64* %i0ptr7588918, align 8                                  ; load; *i0ptr7588918
  %fptr7588919 = inttoptr i64 %f7588920 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588919(i64 %cont7581271, i64 %rva7584312)          ; tail call
  ret void
}


define void @lam7586555(i64 %env7586556, i64 %rvp7584307) {
  %envptr7588921 = inttoptr i64 %env7586556 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588922 = getelementptr inbounds i64, i64* %envptr7588921, i64 3            ; &envptr7588921[3]
  %cont7581271 = load i64, i64* %envptr7588922, align 8                              ; load; *envptr7588922
  %envptr7588923 = inttoptr i64 %env7586556 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588924 = getelementptr inbounds i64, i64* %envptr7588923, i64 2            ; &envptr7588923[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588924, align 8                      ; load; *envptr7588924
  %envptr7588925 = inttoptr i64 %env7586556 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588926 = getelementptr inbounds i64, i64* %envptr7588925, i64 1            ; &envptr7588925[1]
  %eox$l = load i64, i64* %envptr7588926, align 8                                    ; load; *envptr7588926
  %_957581273 = call i64 @prim_car(i64 %rvp7584307)                                  ; call prim_car
  %rvp7584306 = call i64 @prim_cdr(i64 %rvp7584307)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584306)                                    ; call prim_car
  %na7584302 = call i64 @prim_cdr(i64 %rvp7584306)                                   ; call prim_cdr
  %arg7582340 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582340, i64 %eox$l); call prim_vector_45set_33
  %arg7582343 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584305 = add i64 0, 0                                                         ; quoted ()
  %rva7584304 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584305)            ; call prim_cons
  %rva7584303 = call i64 @prim_cons(i64 %arg7582343, i64 %rva7584304)                ; call prim_cons
  %cloptr7588927 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588928 = getelementptr inbounds i64, i64* %cloptr7588927, i64 0             ; &cloptr7588927[0]
  %f7588930 = load i64, i64* %i0ptr7588928, align 8                                  ; load; *i0ptr7588928
  %fptr7588929 = inttoptr i64 %f7588930 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588929(i64 %cont7581271, i64 %rva7584303)          ; tail call
  ret void
}


define void @lam7586531(i64 %env7586532, i64 %rvp7584235) {
  %envptr7588931 = inttoptr i64 %env7586532 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588932 = getelementptr inbounds i64, i64* %envptr7588931, i64 3            ; &envptr7588931[3]
  %cont7581267 = load i64, i64* %envptr7588932, align 8                              ; load; *envptr7588932
  %envptr7588933 = inttoptr i64 %env7586532 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588934 = getelementptr inbounds i64, i64* %envptr7588933, i64 2            ; &envptr7588933[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588934, align 8                      ; load; *envptr7588934
  %envptr7588935 = inttoptr i64 %env7586532 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588936 = getelementptr inbounds i64, i64* %envptr7588935, i64 1            ; &envptr7588935[1]
  %gKR$new = load i64, i64* %envptr7588936, align 8                                  ; load; *envptr7588936
  %_957581268 = call i64 @prim_car(i64 %rvp7584235)                                  ; call prim_car
  %rvp7584234 = call i64 @prim_cdr(i64 %rvp7584235)                                  ; call prim_cdr
  %NkA$tail = call i64 @prim_car(i64 %rvp7584234)                                    ; call prim_car
  %na7584002 = call i64 @prim_cdr(i64 %rvp7584234)                                   ; call prim_cdr
  %cloptr7588937 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7588938 = getelementptr inbounds i64, i64* %cloptr7588937, i64 0              ; &cloptr7588937[0]
  %f7588939 = ptrtoint void(i64,i64)* @lam7586529 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588939, i64* %eptr7588938                                             ; store fptr
  %arg7581967 = ptrtoint i64* %cloptr7588937 to i64                                  ; closure cast; i64* -> i64
  %cloptr7588940 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588942 = getelementptr inbounds i64, i64* %cloptr7588940, i64 1              ; &eptr7588942[1]
  %eptr7588943 = getelementptr inbounds i64, i64* %cloptr7588940, i64 2              ; &eptr7588943[2]
  %eptr7588944 = getelementptr inbounds i64, i64* %cloptr7588940, i64 3              ; &eptr7588944[3]
  %eptr7588945 = getelementptr inbounds i64, i64* %cloptr7588940, i64 4              ; &eptr7588945[4]
  store i64 %gKR$new, i64* %eptr7588942                                              ; *eptr7588942 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588943                                  ; *eptr7588943 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588944                                             ; *eptr7588944 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588945                                          ; *eptr7588945 = %cont7581267
  %eptr7588941 = getelementptr inbounds i64, i64* %cloptr7588940, i64 0              ; &cloptr7588940[0]
  %f7588946 = ptrtoint void(i64,i64)* @lam7586525 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588946, i64* %eptr7588941                                             ; store fptr
  %arg7581966 = ptrtoint i64* %cloptr7588940 to i64                                  ; closure cast; i64* -> i64
  %rva7584233 = add i64 0, 0                                                         ; quoted ()
  %rva7584232 = call i64 @prim_cons(i64 %arg7581966, i64 %rva7584233)                ; call prim_cons
  %cloptr7588947 = inttoptr i64 %arg7581967 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588948 = getelementptr inbounds i64, i64* %cloptr7588947, i64 0             ; &cloptr7588947[0]
  %f7588950 = load i64, i64* %i0ptr7588948, align 8                                  ; load; *i0ptr7588948
  %fptr7588949 = inttoptr i64 %f7588950 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588949(i64 %arg7581967, i64 %rva7584232)           ; tail call
  ret void
}


define void @lam7586529(i64 %env7586530, i64 %Nnm$lst7581295) {
  %cont7581294 = call i64 @prim_car(i64 %Nnm$lst7581295)                             ; call prim_car
  %Nnm$lst = call i64 @prim_cdr(i64 %Nnm$lst7581295)                                 ; call prim_cdr
  %arg7581971 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584005 = add i64 0, 0                                                         ; quoted ()
  %rva7584004 = call i64 @prim_cons(i64 %Nnm$lst, i64 %rva7584005)                   ; call prim_cons
  %rva7584003 = call i64 @prim_cons(i64 %arg7581971, i64 %rva7584004)                ; call prim_cons
  %cloptr7588951 = inttoptr i64 %cont7581294 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7588952 = getelementptr inbounds i64, i64* %cloptr7588951, i64 0             ; &cloptr7588951[0]
  %f7588954 = load i64, i64* %i0ptr7588952, align 8                                  ; load; *i0ptr7588952
  %fptr7588953 = inttoptr i64 %f7588954 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588953(i64 %cont7581294, i64 %rva7584003)          ; tail call
  ret void
}


define void @lam7586525(i64 %env7586526, i64 %rvp7584231) {
  %envptr7588955 = inttoptr i64 %env7586526 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588956 = getelementptr inbounds i64, i64* %envptr7588955, i64 4            ; &envptr7588955[4]
  %cont7581267 = load i64, i64* %envptr7588956, align 8                              ; load; *envptr7588956
  %envptr7588957 = inttoptr i64 %env7586526 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588958 = getelementptr inbounds i64, i64* %envptr7588957, i64 3            ; &envptr7588957[3]
  %NkA$tail = load i64, i64* %envptr7588958, align 8                                 ; load; *envptr7588958
  %envptr7588959 = inttoptr i64 %env7586526 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588960 = getelementptr inbounds i64, i64* %envptr7588959, i64 2            ; &envptr7588959[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588960, align 8                      ; load; *envptr7588960
  %envptr7588961 = inttoptr i64 %env7586526 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588962 = getelementptr inbounds i64, i64* %envptr7588961, i64 1            ; &envptr7588961[1]
  %gKR$new = load i64, i64* %envptr7588962, align 8                                  ; load; *envptr7588962
  %_957581292 = call i64 @prim_car(i64 %rvp7584231)                                  ; call prim_car
  %rvp7584230 = call i64 @prim_cdr(i64 %rvp7584231)                                  ; call prim_cdr
  %a7581075 = call i64 @prim_car(i64 %rvp7584230)                                    ; call prim_car
  %na7584007 = call i64 @prim_cdr(i64 %rvp7584230)                                   ; call prim_cdr
  %arg7581974 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581293 = call i64 @prim_make_45vector(i64 %arg7581974, i64 %a7581075)     ; call prim_make_45vector
  %cloptr7588963 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588965 = getelementptr inbounds i64, i64* %cloptr7588963, i64 1              ; &eptr7588965[1]
  %eptr7588966 = getelementptr inbounds i64, i64* %cloptr7588963, i64 2              ; &eptr7588966[2]
  %eptr7588967 = getelementptr inbounds i64, i64* %cloptr7588963, i64 3              ; &eptr7588967[3]
  %eptr7588968 = getelementptr inbounds i64, i64* %cloptr7588963, i64 4              ; &eptr7588968[4]
  store i64 %gKR$new, i64* %eptr7588965                                              ; *eptr7588965 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588966                                  ; *eptr7588966 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588967                                             ; *eptr7588967 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588968                                          ; *eptr7588968 = %cont7581267
  %eptr7588964 = getelementptr inbounds i64, i64* %cloptr7588963, i64 0              ; &cloptr7588963[0]
  %f7588969 = ptrtoint void(i64,i64)* @lam7586522 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588969, i64* %eptr7588964                                             ; store fptr
  %arg7581977 = ptrtoint i64* %cloptr7588963 to i64                                  ; closure cast; i64* -> i64
  %arg7581976 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584229 = add i64 0, 0                                                         ; quoted ()
  %rva7584228 = call i64 @prim_cons(i64 %retprim7581293, i64 %rva7584229)            ; call prim_cons
  %rva7584227 = call i64 @prim_cons(i64 %arg7581976, i64 %rva7584228)                ; call prim_cons
  %cloptr7588970 = inttoptr i64 %arg7581977 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7588971 = getelementptr inbounds i64, i64* %cloptr7588970, i64 0             ; &cloptr7588970[0]
  %f7588973 = load i64, i64* %i0ptr7588971, align 8                                  ; load; *i0ptr7588971
  %fptr7588972 = inttoptr i64 %f7588973 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7588972(i64 %arg7581977, i64 %rva7584227)           ; tail call
  ret void
}


define void @lam7586522(i64 %env7586523, i64 %rvp7584226) {
  %envptr7588974 = inttoptr i64 %env7586523 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588975 = getelementptr inbounds i64, i64* %envptr7588974, i64 4            ; &envptr7588974[4]
  %cont7581267 = load i64, i64* %envptr7588975, align 8                              ; load; *envptr7588975
  %envptr7588976 = inttoptr i64 %env7586523 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588977 = getelementptr inbounds i64, i64* %envptr7588976, i64 3            ; &envptr7588976[3]
  %NkA$tail = load i64, i64* %envptr7588977, align 8                                 ; load; *envptr7588977
  %envptr7588978 = inttoptr i64 %env7586523 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588979 = getelementptr inbounds i64, i64* %envptr7588978, i64 2            ; &envptr7588978[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7588979, align 8                      ; load; *envptr7588979
  %envptr7588980 = inttoptr i64 %env7586523 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7588981 = getelementptr inbounds i64, i64* %envptr7588980, i64 1            ; &envptr7588980[1]
  %gKR$new = load i64, i64* %envptr7588981, align 8                                  ; load; *envptr7588981
  %_957581283 = call i64 @prim_car(i64 %rvp7584226)                                  ; call prim_car
  %rvp7584225 = call i64 @prim_cdr(i64 %rvp7584226)                                  ; call prim_cdr
  %HKq$f = call i64 @prim_car(i64 %rvp7584225)                                       ; call prim_car
  %na7584009 = call i64 @prim_cdr(i64 %rvp7584225)                                   ; call prim_cdr
  %cloptr7588982 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7588984 = getelementptr inbounds i64, i64* %cloptr7588982, i64 1              ; &eptr7588984[1]
  %eptr7588985 = getelementptr inbounds i64, i64* %cloptr7588982, i64 2              ; &eptr7588985[2]
  %eptr7588986 = getelementptr inbounds i64, i64* %cloptr7588982, i64 3              ; &eptr7588986[3]
  store i64 %HKq$f, i64* %eptr7588984                                                ; *eptr7588984 = %HKq$f
  store i64 %CPS$_37wind_45stack, i64* %eptr7588985                                  ; *eptr7588985 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588986                                             ; *eptr7588986 = %NkA$tail
  %eptr7588983 = getelementptr inbounds i64, i64* %cloptr7588982, i64 0              ; &cloptr7588982[0]
  %f7588987 = ptrtoint void(i64,i64)* @lam7586520 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588987, i64* %eptr7588983                                             ; store fptr
  %rpt$f7580965 = ptrtoint i64* %cloptr7588982 to i64                                ; closure cast; i64* -> i64
  %arg7582029 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %RHd$_95t = call i64 @prim_vector_45set_33(i64 %HKq$f, i64 %arg7582029, i64 %rpt$f7580965); call prim_vector_45set_33
  %arg7582031 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581088 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582031)               ; call prim_vector_45ref
  %a7581089 = call i64 @prim_procedure_63(i64 %a7581088)                             ; call prim_procedure_63
  %cmp7588988 = icmp eq i64 %a7581089, 15                                            ; false?
  br i1 %cmp7588988, label %else7588990, label %then7588989                          ; if

then7588989:
  %arg7582034 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581090 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582034)               ; call prim_vector_45ref
  %arg7582036 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581091 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7582036) ; call prim_vector_45ref
  %cloptr7588991 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7588993 = getelementptr inbounds i64, i64* %cloptr7588991, i64 1              ; &eptr7588993[1]
  %eptr7588994 = getelementptr inbounds i64, i64* %cloptr7588991, i64 2              ; &eptr7588994[2]
  %eptr7588995 = getelementptr inbounds i64, i64* %cloptr7588991, i64 3              ; &eptr7588995[3]
  %eptr7588996 = getelementptr inbounds i64, i64* %cloptr7588991, i64 4              ; &eptr7588996[4]
  store i64 %gKR$new, i64* %eptr7588993                                              ; *eptr7588993 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7588994                                  ; *eptr7588994 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7588995                                             ; *eptr7588995 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7588996                                          ; *eptr7588996 = %cont7581267
  %eptr7588992 = getelementptr inbounds i64, i64* %cloptr7588991, i64 0              ; &cloptr7588991[0]
  %f7588997 = ptrtoint void(i64,i64)* @lam7586421 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7588997, i64* %eptr7588992                                             ; store fptr
  %arg7582039 = ptrtoint i64* %cloptr7588991 to i64                                  ; closure cast; i64* -> i64
  %rva7584136 = add i64 0, 0                                                         ; quoted ()
  %rva7584135 = call i64 @prim_cons(i64 %a7581091, i64 %rva7584136)                  ; call prim_cons
  %rva7584134 = call i64 @prim_cons(i64 %arg7582039, i64 %rva7584135)                ; call prim_cons
  %cloptr7588998 = inttoptr i64 %a7581090 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7588999 = getelementptr inbounds i64, i64* %cloptr7588998, i64 0             ; &cloptr7588998[0]
  %f7589001 = load i64, i64* %i0ptr7588999, align 8                                  ; load; *i0ptr7588999
  %fptr7589000 = inttoptr i64 %f7589001 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589000(i64 %a7581090, i64 %rva7584134)             ; tail call
  ret void

else7588990:
  %arg7582133 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589002, i32 0, i32 0)); quoted string
  %retprim7581291 = call i64 @prim_halt(i64 %arg7582133)                             ; call prim_halt
  %cloptr7589003 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7589005 = getelementptr inbounds i64, i64* %cloptr7589003, i64 1              ; &eptr7589005[1]
  %eptr7589006 = getelementptr inbounds i64, i64* %cloptr7589003, i64 2              ; &eptr7589006[2]
  %eptr7589007 = getelementptr inbounds i64, i64* %cloptr7589003, i64 3              ; &eptr7589007[3]
  %eptr7589008 = getelementptr inbounds i64, i64* %cloptr7589003, i64 4              ; &eptr7589008[4]
  store i64 %gKR$new, i64* %eptr7589005                                              ; *eptr7589005 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7589006                                  ; *eptr7589006 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7589007                                             ; *eptr7589007 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7589008                                          ; *eptr7589008 = %cont7581267
  %eptr7589004 = getelementptr inbounds i64, i64* %cloptr7589003, i64 0              ; &cloptr7589003[0]
  %f7589009 = ptrtoint void(i64,i64)* @lam7586488 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589009, i64* %eptr7589004                                             ; store fptr
  %arg7582136 = ptrtoint i64* %cloptr7589003 to i64                                  ; closure cast; i64* -> i64
  %arg7582135 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584224 = add i64 0, 0                                                         ; quoted ()
  %rva7584223 = call i64 @prim_cons(i64 %retprim7581291, i64 %rva7584224)            ; call prim_cons
  %rva7584222 = call i64 @prim_cons(i64 %arg7582135, i64 %rva7584223)                ; call prim_cons
  %cloptr7589010 = inttoptr i64 %arg7582136 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589011 = getelementptr inbounds i64, i64* %cloptr7589010, i64 0             ; &cloptr7589010[0]
  %f7589013 = load i64, i64* %i0ptr7589011, align 8                                  ; load; *i0ptr7589011
  %fptr7589012 = inttoptr i64 %f7589013 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589012(i64 %arg7582136, i64 %rva7584222)           ; tail call
  ret void
}


define void @lam7586520(i64 %env7586521, i64 %rvp7584048) {
  %envptr7589014 = inttoptr i64 %env7586521 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589015 = getelementptr inbounds i64, i64* %envptr7589014, i64 3            ; &envptr7589014[3]
  %NkA$tail = load i64, i64* %envptr7589015, align 8                                 ; load; *envptr7589015
  %envptr7589016 = inttoptr i64 %env7586521 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589017 = getelementptr inbounds i64, i64* %envptr7589016, i64 2            ; &envptr7589016[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589017, align 8                      ; load; *envptr7589017
  %envptr7589018 = inttoptr i64 %env7586521 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589019 = getelementptr inbounds i64, i64* %envptr7589018, i64 1            ; &envptr7589018[1]
  %HKq$f = load i64, i64* %envptr7589019, align 8                                    ; load; *envptr7589019
  %cont7581284 = call i64 @prim_car(i64 %rvp7584048)                                 ; call prim_car
  %rvp7584047 = call i64 @prim_cdr(i64 %rvp7584048)                                  ; call prim_cdr
  %p9I$l = call i64 @prim_car(i64 %rvp7584047)                                       ; call prim_car
  %na7584011 = call i64 @prim_cdr(i64 %rvp7584047)                                   ; call prim_cdr
  %a7581076 = call i64 @prim_eq_63(i64 %p9I$l, i64 %NkA$tail)                        ; call prim_eq_63
  %a7581077 = call i64 @prim_not(i64 %a7581076)                                      ; call prim_not
  %cmp7589020 = icmp eq i64 %a7581077, 15                                            ; false?
  br i1 %cmp7589020, label %else7589022, label %then7589021                          ; if

then7589021:
  %a7581078 = call i64 @prim_cdr(i64 %p9I$l)                                         ; call prim_cdr
  %arg7581983 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581289 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7581983, i64 %a7581078); call prim_vector_45set_33
  %cloptr7589023 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589025 = getelementptr inbounds i64, i64* %cloptr7589023, i64 1              ; &eptr7589025[1]
  %eptr7589026 = getelementptr inbounds i64, i64* %cloptr7589023, i64 2              ; &eptr7589026[2]
  %eptr7589027 = getelementptr inbounds i64, i64* %cloptr7589023, i64 3              ; &eptr7589027[3]
  store i64 %HKq$f, i64* %eptr7589025                                                ; *eptr7589025 = %HKq$f
  store i64 %p9I$l, i64* %eptr7589026                                                ; *eptr7589026 = %p9I$l
  store i64 %cont7581284, i64* %eptr7589027                                          ; *eptr7589027 = %cont7581284
  %eptr7589024 = getelementptr inbounds i64, i64* %cloptr7589023, i64 0              ; &cloptr7589023[0]
  %f7589028 = ptrtoint void(i64,i64)* @lam7586515 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589028, i64* %eptr7589024                                             ; store fptr
  %arg7581987 = ptrtoint i64* %cloptr7589023 to i64                                  ; closure cast; i64* -> i64
  %arg7581986 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584043 = add i64 0, 0                                                         ; quoted ()
  %rva7584042 = call i64 @prim_cons(i64 %retprim7581289, i64 %rva7584043)            ; call prim_cons
  %rva7584041 = call i64 @prim_cons(i64 %arg7581986, i64 %rva7584042)                ; call prim_cons
  %cloptr7589029 = inttoptr i64 %arg7581987 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589030 = getelementptr inbounds i64, i64* %cloptr7589029, i64 0             ; &cloptr7589029[0]
  %f7589032 = load i64, i64* %i0ptr7589030, align 8                                  ; load; *i0ptr7589030
  %fptr7589031 = inttoptr i64 %f7589032 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589031(i64 %arg7581987, i64 %rva7584041)           ; tail call
  ret void

else7589022:
  %retprim7581290 = call i64 @prim_void()                                            ; call prim_void
  %arg7582026 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584046 = add i64 0, 0                                                         ; quoted ()
  %rva7584045 = call i64 @prim_cons(i64 %retprim7581290, i64 %rva7584046)            ; call prim_cons
  %rva7584044 = call i64 @prim_cons(i64 %arg7582026, i64 %rva7584045)                ; call prim_cons
  %cloptr7589033 = inttoptr i64 %cont7581284 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589034 = getelementptr inbounds i64, i64* %cloptr7589033, i64 0             ; &cloptr7589033[0]
  %f7589036 = load i64, i64* %i0ptr7589034, align 8                                  ; load; *i0ptr7589034
  %fptr7589035 = inttoptr i64 %f7589036 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589035(i64 %cont7581284, i64 %rva7584044)          ; tail call
  ret void
}


define void @lam7586515(i64 %env7586516, i64 %rvp7584040) {
  %envptr7589037 = inttoptr i64 %env7586516 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589038 = getelementptr inbounds i64, i64* %envptr7589037, i64 3            ; &envptr7589037[3]
  %cont7581284 = load i64, i64* %envptr7589038, align 8                              ; load; *envptr7589038
  %envptr7589039 = inttoptr i64 %env7586516 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589040 = getelementptr inbounds i64, i64* %envptr7589039, i64 2            ; &envptr7589039[2]
  %p9I$l = load i64, i64* %envptr7589040, align 8                                    ; load; *envptr7589040
  %envptr7589041 = inttoptr i64 %env7586516 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589042 = getelementptr inbounds i64, i64* %envptr7589041, i64 1            ; &envptr7589041[1]
  %HKq$f = load i64, i64* %envptr7589042, align 8                                    ; load; *envptr7589042
  %_957581285 = call i64 @prim_car(i64 %rvp7584040)                                  ; call prim_car
  %rvp7584039 = call i64 @prim_cdr(i64 %rvp7584040)                                  ; call prim_cdr
  %Dqg$_95t = call i64 @prim_car(i64 %rvp7584039)                                    ; call prim_car
  %na7584013 = call i64 @prim_cdr(i64 %rvp7584039)                                   ; call prim_cdr
  %a7581079 = call i64 @prim_car(i64 %p9I$l)                                         ; call prim_car
  %a7581080 = call i64 @prim_cdr(i64 %a7581079)                                      ; call prim_cdr
  %a7581081 = call i64 @prim_procedure_63(i64 %a7581080)                             ; call prim_procedure_63
  %cmp7589043 = icmp eq i64 %a7581081, 15                                            ; false?
  br i1 %cmp7589043, label %else7589045, label %then7589044                          ; if

then7589044:
  %a7581082 = call i64 @prim_car(i64 %p9I$l)                                         ; call prim_car
  %a7581083 = call i64 @prim_cdr(i64 %a7581082)                                      ; call prim_cdr
  %cloptr7589046 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589048 = getelementptr inbounds i64, i64* %cloptr7589046, i64 1              ; &eptr7589048[1]
  %eptr7589049 = getelementptr inbounds i64, i64* %cloptr7589046, i64 2              ; &eptr7589049[2]
  %eptr7589050 = getelementptr inbounds i64, i64* %cloptr7589046, i64 3              ; &eptr7589050[3]
  store i64 %HKq$f, i64* %eptr7589048                                                ; *eptr7589048 = %HKq$f
  store i64 %p9I$l, i64* %eptr7589049                                                ; *eptr7589049 = %p9I$l
  store i64 %cont7581284, i64* %eptr7589050                                          ; *eptr7589050 = %cont7581284
  %eptr7589047 = getelementptr inbounds i64, i64* %cloptr7589046, i64 0              ; &cloptr7589046[0]
  %f7589051 = ptrtoint void(i64,i64)* @lam7586502 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589051, i64* %eptr7589047                                             ; store fptr
  %arg7581993 = ptrtoint i64* %cloptr7589046 to i64                                  ; closure cast; i64* -> i64
  %rva7584025 = add i64 0, 0                                                         ; quoted ()
  %rva7584024 = call i64 @prim_cons(i64 %arg7581993, i64 %rva7584025)                ; call prim_cons
  %cloptr7589052 = inttoptr i64 %a7581083 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589053 = getelementptr inbounds i64, i64* %cloptr7589052, i64 0             ; &cloptr7589052[0]
  %f7589055 = load i64, i64* %i0ptr7589053, align 8                                  ; load; *i0ptr7589053
  %fptr7589054 = inttoptr i64 %f7589055 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589054(i64 %a7581083, i64 %rva7584024)             ; tail call
  ret void

else7589045:
  %arg7582008 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589056, i32 0, i32 0)); quoted string
  %retprim7581288 = call i64 @prim_halt(i64 %arg7582008)                             ; call prim_halt
  %cloptr7589057 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589059 = getelementptr inbounds i64, i64* %cloptr7589057, i64 1              ; &eptr7589059[1]
  %eptr7589060 = getelementptr inbounds i64, i64* %cloptr7589057, i64 2              ; &eptr7589060[2]
  %eptr7589061 = getelementptr inbounds i64, i64* %cloptr7589057, i64 3              ; &eptr7589061[3]
  store i64 %HKq$f, i64* %eptr7589059                                                ; *eptr7589059 = %HKq$f
  store i64 %p9I$l, i64* %eptr7589060                                                ; *eptr7589060 = %p9I$l
  store i64 %cont7581284, i64* %eptr7589061                                          ; *eptr7589061 = %cont7581284
  %eptr7589058 = getelementptr inbounds i64, i64* %cloptr7589057, i64 0              ; &cloptr7589057[0]
  %f7589062 = ptrtoint void(i64,i64)* @lam7586512 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589062, i64* %eptr7589058                                             ; store fptr
  %arg7582011 = ptrtoint i64* %cloptr7589057 to i64                                  ; closure cast; i64* -> i64
  %arg7582010 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584038 = add i64 0, 0                                                         ; quoted ()
  %rva7584037 = call i64 @prim_cons(i64 %retprim7581288, i64 %rva7584038)            ; call prim_cons
  %rva7584036 = call i64 @prim_cons(i64 %arg7582010, i64 %rva7584037)                ; call prim_cons
  %cloptr7589063 = inttoptr i64 %arg7582011 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589064 = getelementptr inbounds i64, i64* %cloptr7589063, i64 0             ; &cloptr7589063[0]
  %f7589066 = load i64, i64* %i0ptr7589064, align 8                                  ; load; *i0ptr7589064
  %fptr7589065 = inttoptr i64 %f7589066 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589065(i64 %arg7582011, i64 %rva7584036)           ; tail call
  ret void
}


define void @lam7586512(i64 %env7586513, i64 %rvp7584035) {
  %envptr7589067 = inttoptr i64 %env7586513 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589068 = getelementptr inbounds i64, i64* %envptr7589067, i64 3            ; &envptr7589067[3]
  %cont7581284 = load i64, i64* %envptr7589068, align 8                              ; load; *envptr7589068
  %envptr7589069 = inttoptr i64 %env7586513 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589070 = getelementptr inbounds i64, i64* %envptr7589069, i64 2            ; &envptr7589069[2]
  %p9I$l = load i64, i64* %envptr7589070, align 8                                    ; load; *envptr7589070
  %envptr7589071 = inttoptr i64 %env7586513 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589072 = getelementptr inbounds i64, i64* %envptr7589071, i64 1            ; &envptr7589071[1]
  %HKq$f = load i64, i64* %envptr7589072, align 8                                    ; load; *envptr7589072
  %_957581286 = call i64 @prim_car(i64 %rvp7584035)                                  ; call prim_car
  %rvp7584034 = call i64 @prim_cdr(i64 %rvp7584035)                                  ; call prim_cdr
  %H0N$_95t = call i64 @prim_car(i64 %rvp7584034)                                    ; call prim_car
  %na7584027 = call i64 @prim_cdr(i64 %rvp7584034)                                   ; call prim_cdr
  %arg7582012 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581084 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582012)               ; call prim_vector_45ref
  %a7581085 = call i64 @prim_procedure_63(i64 %a7581084)                             ; call prim_procedure_63
  %cmp7589073 = icmp eq i64 %a7581085, 15                                            ; false?
  br i1 %cmp7589073, label %else7589075, label %then7589074                          ; if

then7589074:
  %arg7582015 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581086 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7582015)               ; call prim_vector_45ref
  %a7581087 = call i64 @prim_cdr(i64 %p9I$l)                                         ; call prim_cdr
  %rva7584030 = add i64 0, 0                                                         ; quoted ()
  %rva7584029 = call i64 @prim_cons(i64 %a7581087, i64 %rva7584030)                  ; call prim_cons
  %rva7584028 = call i64 @prim_cons(i64 %cont7581284, i64 %rva7584029)               ; call prim_cons
  %cloptr7589076 = inttoptr i64 %a7581086 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589077 = getelementptr inbounds i64, i64* %cloptr7589076, i64 0             ; &cloptr7589076[0]
  %f7589079 = load i64, i64* %i0ptr7589077, align 8                                  ; load; *i0ptr7589077
  %fptr7589078 = inttoptr i64 %f7589079 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589078(i64 %a7581086, i64 %rva7584028)             ; tail call
  ret void

else7589075:
  %arg7582021 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589080, i32 0, i32 0)); quoted string
  %retprim7581287 = call i64 @prim_halt(i64 %arg7582021)                             ; call prim_halt
  %arg7582023 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584033 = add i64 0, 0                                                         ; quoted ()
  %rva7584032 = call i64 @prim_cons(i64 %retprim7581287, i64 %rva7584033)            ; call prim_cons
  %rva7584031 = call i64 @prim_cons(i64 %arg7582023, i64 %rva7584032)                ; call prim_cons
  %cloptr7589081 = inttoptr i64 %cont7581284 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589082 = getelementptr inbounds i64, i64* %cloptr7589081, i64 0             ; &cloptr7589081[0]
  %f7589084 = load i64, i64* %i0ptr7589082, align 8                                  ; load; *i0ptr7589082
  %fptr7589083 = inttoptr i64 %f7589084 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589083(i64 %cont7581284, i64 %rva7584031)          ; tail call
  ret void
}


define void @lam7586502(i64 %env7586503, i64 %rvp7584023) {
  %envptr7589085 = inttoptr i64 %env7586503 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589086 = getelementptr inbounds i64, i64* %envptr7589085, i64 3            ; &envptr7589085[3]
  %cont7581284 = load i64, i64* %envptr7589086, align 8                              ; load; *envptr7589086
  %envptr7589087 = inttoptr i64 %env7586503 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589088 = getelementptr inbounds i64, i64* %envptr7589087, i64 2            ; &envptr7589087[2]
  %p9I$l = load i64, i64* %envptr7589088, align 8                                    ; load; *envptr7589088
  %envptr7589089 = inttoptr i64 %env7586503 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589090 = getelementptr inbounds i64, i64* %envptr7589089, i64 1            ; &envptr7589089[1]
  %HKq$f = load i64, i64* %envptr7589090, align 8                                    ; load; *envptr7589090
  %_957581286 = call i64 @prim_car(i64 %rvp7584023)                                  ; call prim_car
  %rvp7584022 = call i64 @prim_cdr(i64 %rvp7584023)                                  ; call prim_cdr
  %H0N$_95t = call i64 @prim_car(i64 %rvp7584022)                                    ; call prim_car
  %na7584015 = call i64 @prim_cdr(i64 %rvp7584022)                                   ; call prim_cdr
  %arg7581995 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581084 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7581995)               ; call prim_vector_45ref
  %a7581085 = call i64 @prim_procedure_63(i64 %a7581084)                             ; call prim_procedure_63
  %cmp7589091 = icmp eq i64 %a7581085, 15                                            ; false?
  br i1 %cmp7589091, label %else7589093, label %then7589092                          ; if

then7589092:
  %arg7581998 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581086 = call i64 @prim_vector_45ref(i64 %HKq$f, i64 %arg7581998)               ; call prim_vector_45ref
  %a7581087 = call i64 @prim_cdr(i64 %p9I$l)                                         ; call prim_cdr
  %rva7584018 = add i64 0, 0                                                         ; quoted ()
  %rva7584017 = call i64 @prim_cons(i64 %a7581087, i64 %rva7584018)                  ; call prim_cons
  %rva7584016 = call i64 @prim_cons(i64 %cont7581284, i64 %rva7584017)               ; call prim_cons
  %cloptr7589094 = inttoptr i64 %a7581086 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589095 = getelementptr inbounds i64, i64* %cloptr7589094, i64 0             ; &cloptr7589094[0]
  %f7589097 = load i64, i64* %i0ptr7589095, align 8                                  ; load; *i0ptr7589095
  %fptr7589096 = inttoptr i64 %f7589097 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589096(i64 %a7581086, i64 %rva7584016)             ; tail call
  ret void

else7589093:
  %arg7582004 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589098, i32 0, i32 0)); quoted string
  %retprim7581287 = call i64 @prim_halt(i64 %arg7582004)                             ; call prim_halt
  %arg7582006 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584021 = add i64 0, 0                                                         ; quoted ()
  %rva7584020 = call i64 @prim_cons(i64 %retprim7581287, i64 %rva7584021)            ; call prim_cons
  %rva7584019 = call i64 @prim_cons(i64 %arg7582006, i64 %rva7584020)                ; call prim_cons
  %cloptr7589099 = inttoptr i64 %cont7581284 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589100 = getelementptr inbounds i64, i64* %cloptr7589099, i64 0             ; &cloptr7589099[0]
  %f7589102 = load i64, i64* %i0ptr7589100, align 8                                  ; load; *i0ptr7589100
  %fptr7589101 = inttoptr i64 %f7589102 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589101(i64 %cont7581284, i64 %rva7584019)          ; tail call
  ret void
}


define void @lam7586488(i64 %env7586489, i64 %rvp7584221) {
  %envptr7589103 = inttoptr i64 %env7586489 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589104 = getelementptr inbounds i64, i64* %envptr7589103, i64 4            ; &envptr7589103[4]
  %cont7581267 = load i64, i64* %envptr7589104, align 8                              ; load; *envptr7589104
  %envptr7589105 = inttoptr i64 %env7586489 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589106 = getelementptr inbounds i64, i64* %envptr7589105, i64 3            ; &envptr7589105[3]
  %NkA$tail = load i64, i64* %envptr7589106, align 8                                 ; load; *envptr7589106
  %envptr7589107 = inttoptr i64 %env7586489 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589108 = getelementptr inbounds i64, i64* %envptr7589107, i64 2            ; &envptr7589107[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589108, align 8                      ; load; *envptr7589108
  %envptr7589109 = inttoptr i64 %env7586489 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589110 = getelementptr inbounds i64, i64* %envptr7589109, i64 1            ; &envptr7589109[1]
  %gKR$new = load i64, i64* %envptr7589110, align 8                                  ; load; *envptr7589110
  %_957581269 = call i64 @prim_car(i64 %rvp7584221)                                  ; call prim_car
  %rvp7584220 = call i64 @prim_cdr(i64 %rvp7584221)                                  ; call prim_cdr
  %NGZ$_95t = call i64 @prim_car(i64 %rvp7584220)                                    ; call prim_car
  %na7584138 = call i64 @prim_cdr(i64 %rvp7584220)                                   ; call prim_cdr
  %cloptr7589111 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7589112 = getelementptr inbounds i64, i64* %cloptr7589111, i64 0              ; &cloptr7589111[0]
  %f7589113 = ptrtoint void(i64,i64)* @lam7586486 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589113, i64* %eptr7589112                                             ; store fptr
  %arg7582138 = ptrtoint i64* %cloptr7589111 to i64                                  ; closure cast; i64* -> i64
  %cloptr7589114 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7589116 = getelementptr inbounds i64, i64* %cloptr7589114, i64 1              ; &eptr7589116[1]
  %eptr7589117 = getelementptr inbounds i64, i64* %cloptr7589114, i64 2              ; &eptr7589117[2]
  %eptr7589118 = getelementptr inbounds i64, i64* %cloptr7589114, i64 3              ; &eptr7589118[3]
  %eptr7589119 = getelementptr inbounds i64, i64* %cloptr7589114, i64 4              ; &eptr7589119[4]
  store i64 %gKR$new, i64* %eptr7589116                                              ; *eptr7589116 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7589117                                  ; *eptr7589117 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7589118                                             ; *eptr7589118 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7589119                                          ; *eptr7589119 = %cont7581267
  %eptr7589115 = getelementptr inbounds i64, i64* %cloptr7589114, i64 0              ; &cloptr7589114[0]
  %f7589120 = ptrtoint void(i64,i64)* @lam7586482 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589120, i64* %eptr7589115                                             ; store fptr
  %arg7582137 = ptrtoint i64* %cloptr7589114 to i64                                  ; closure cast; i64* -> i64
  %rva7584219 = add i64 0, 0                                                         ; quoted ()
  %rva7584218 = call i64 @prim_cons(i64 %arg7582137, i64 %rva7584219)                ; call prim_cons
  %cloptr7589121 = inttoptr i64 %arg7582138 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589122 = getelementptr inbounds i64, i64* %cloptr7589121, i64 0             ; &cloptr7589121[0]
  %f7589124 = load i64, i64* %i0ptr7589122, align 8                                  ; load; *i0ptr7589122
  %fptr7589123 = inttoptr i64 %f7589124 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589123(i64 %arg7582138, i64 %rva7584218)           ; tail call
  ret void
}


define void @lam7586486(i64 %env7586487, i64 %Noz$lst7581282) {
  %cont7581281 = call i64 @prim_car(i64 %Noz$lst7581282)                             ; call prim_car
  %Noz$lst = call i64 @prim_cdr(i64 %Noz$lst7581282)                                 ; call prim_cdr
  %arg7582142 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584141 = add i64 0, 0                                                         ; quoted ()
  %rva7584140 = call i64 @prim_cons(i64 %Noz$lst, i64 %rva7584141)                   ; call prim_cons
  %rva7584139 = call i64 @prim_cons(i64 %arg7582142, i64 %rva7584140)                ; call prim_cons
  %cloptr7589125 = inttoptr i64 %cont7581281 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589126 = getelementptr inbounds i64, i64* %cloptr7589125, i64 0             ; &cloptr7589125[0]
  %f7589128 = load i64, i64* %i0ptr7589126, align 8                                  ; load; *i0ptr7589126
  %fptr7589127 = inttoptr i64 %f7589128 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589127(i64 %cont7581281, i64 %rva7584139)          ; tail call
  ret void
}


define void @lam7586482(i64 %env7586483, i64 %rvp7584217) {
  %envptr7589129 = inttoptr i64 %env7586483 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589130 = getelementptr inbounds i64, i64* %envptr7589129, i64 4            ; &envptr7589129[4]
  %cont7581267 = load i64, i64* %envptr7589130, align 8                              ; load; *envptr7589130
  %envptr7589131 = inttoptr i64 %env7586483 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589132 = getelementptr inbounds i64, i64* %envptr7589131, i64 3            ; &envptr7589131[3]
  %NkA$tail = load i64, i64* %envptr7589132, align 8                                 ; load; *envptr7589132
  %envptr7589133 = inttoptr i64 %env7586483 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589134 = getelementptr inbounds i64, i64* %envptr7589133, i64 2            ; &envptr7589133[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589134, align 8                      ; load; *envptr7589134
  %envptr7589135 = inttoptr i64 %env7586483 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589136 = getelementptr inbounds i64, i64* %envptr7589135, i64 1            ; &envptr7589135[1]
  %gKR$new = load i64, i64* %envptr7589136, align 8                                  ; load; *envptr7589136
  %_957581279 = call i64 @prim_car(i64 %rvp7584217)                                  ; call prim_car
  %rvp7584216 = call i64 @prim_cdr(i64 %rvp7584217)                                  ; call prim_cdr
  %a7581092 = call i64 @prim_car(i64 %rvp7584216)                                    ; call prim_car
  %na7584143 = call i64 @prim_cdr(i64 %rvp7584216)                                   ; call prim_cdr
  %arg7582145 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581280 = call i64 @prim_make_45vector(i64 %arg7582145, i64 %a7581092)     ; call prim_make_45vector
  %cloptr7589137 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7589139 = getelementptr inbounds i64, i64* %cloptr7589137, i64 1              ; &eptr7589139[1]
  %eptr7589140 = getelementptr inbounds i64, i64* %cloptr7589137, i64 2              ; &eptr7589140[2]
  %eptr7589141 = getelementptr inbounds i64, i64* %cloptr7589137, i64 3              ; &eptr7589141[3]
  %eptr7589142 = getelementptr inbounds i64, i64* %cloptr7589137, i64 4              ; &eptr7589142[4]
  store i64 %gKR$new, i64* %eptr7589139                                              ; *eptr7589139 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7589140                                  ; *eptr7589140 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7589141                                             ; *eptr7589141 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7589142                                          ; *eptr7589142 = %cont7581267
  %eptr7589138 = getelementptr inbounds i64, i64* %cloptr7589137, i64 0              ; &cloptr7589137[0]
  %f7589143 = ptrtoint void(i64,i64)* @lam7586479 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589143, i64* %eptr7589138                                             ; store fptr
  %arg7582148 = ptrtoint i64* %cloptr7589137 to i64                                  ; closure cast; i64* -> i64
  %arg7582147 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584215 = add i64 0, 0                                                         ; quoted ()
  %rva7584214 = call i64 @prim_cons(i64 %retprim7581280, i64 %rva7584215)            ; call prim_cons
  %rva7584213 = call i64 @prim_cons(i64 %arg7582147, i64 %rva7584214)                ; call prim_cons
  %cloptr7589144 = inttoptr i64 %arg7582148 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589145 = getelementptr inbounds i64, i64* %cloptr7589144, i64 0             ; &cloptr7589144[0]
  %f7589147 = load i64, i64* %i0ptr7589145, align 8                                  ; load; *i0ptr7589145
  %fptr7589146 = inttoptr i64 %f7589147 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589146(i64 %arg7582148, i64 %rva7584213)           ; tail call
  ret void
}


define void @lam7586479(i64 %env7586480, i64 %rvp7584212) {
  %envptr7589148 = inttoptr i64 %env7586480 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589149 = getelementptr inbounds i64, i64* %envptr7589148, i64 4            ; &envptr7589148[4]
  %cont7581267 = load i64, i64* %envptr7589149, align 8                              ; load; *envptr7589149
  %envptr7589150 = inttoptr i64 %env7586480 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589151 = getelementptr inbounds i64, i64* %envptr7589150, i64 3            ; &envptr7589150[3]
  %NkA$tail = load i64, i64* %envptr7589151, align 8                                 ; load; *envptr7589151
  %envptr7589152 = inttoptr i64 %env7586480 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589153 = getelementptr inbounds i64, i64* %envptr7589152, i64 2            ; &envptr7589152[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589153, align 8                      ; load; *envptr7589153
  %envptr7589154 = inttoptr i64 %env7586480 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589155 = getelementptr inbounds i64, i64* %envptr7589154, i64 1            ; &envptr7589154[1]
  %gKR$new = load i64, i64* %envptr7589155, align 8                                  ; load; *envptr7589155
  %_957581270 = call i64 @prim_car(i64 %rvp7584212)                                  ; call prim_car
  %rvp7584211 = call i64 @prim_cdr(i64 %rvp7584212)                                  ; call prim_cdr
  %yup$f = call i64 @prim_car(i64 %rvp7584211)                                       ; call prim_car
  %na7584145 = call i64 @prim_cdr(i64 %rvp7584211)                                   ; call prim_cdr
  %cloptr7589156 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589158 = getelementptr inbounds i64, i64* %cloptr7589156, i64 1              ; &eptr7589158[1]
  %eptr7589159 = getelementptr inbounds i64, i64* %cloptr7589156, i64 2              ; &eptr7589159[2]
  %eptr7589160 = getelementptr inbounds i64, i64* %cloptr7589156, i64 3              ; &eptr7589160[3]
  store i64 %CPS$_37wind_45stack, i64* %eptr7589158                                  ; *eptr7589158 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7589159                                             ; *eptr7589159 = %NkA$tail
  store i64 %yup$f, i64* %eptr7589160                                                ; *eptr7589160 = %yup$f
  %eptr7589157 = getelementptr inbounds i64, i64* %cloptr7589156, i64 0              ; &cloptr7589156[0]
  %f7589161 = ptrtoint void(i64,i64)* @lam7586477 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589161, i64* %eptr7589157                                             ; store fptr
  %C5u$f7580966 = ptrtoint i64* %cloptr7589156 to i64                                ; closure cast; i64* -> i64
  %arg7582215 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %Ksh$_95t = call i64 @prim_vector_45set_33(i64 %yup$f, i64 %arg7582215, i64 %C5u$f7580966); call prim_vector_45set_33
  %arg7582217 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581104 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582217)               ; call prim_vector_45ref
  %a7581105 = call i64 @prim_procedure_63(i64 %a7581104)                             ; call prim_procedure_63
  %cmp7589162 = icmp eq i64 %a7581105, 15                                            ; false?
  br i1 %cmp7589162, label %else7589164, label %then7589163                          ; if

then7589163:
  %arg7582220 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581106 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582220)               ; call prim_vector_45ref
  %rva7584207 = add i64 0, 0                                                         ; quoted ()
  %rva7584206 = call i64 @prim_cons(i64 %gKR$new, i64 %rva7584207)                   ; call prim_cons
  %rva7584205 = call i64 @prim_cons(i64 %cont7581267, i64 %rva7584206)               ; call prim_cons
  %cloptr7589165 = inttoptr i64 %a7581106 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589166 = getelementptr inbounds i64, i64* %cloptr7589165, i64 0             ; &cloptr7589165[0]
  %f7589168 = load i64, i64* %i0ptr7589166, align 8                                  ; load; *i0ptr7589166
  %fptr7589167 = inttoptr i64 %f7589168 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589167(i64 %a7581106, i64 %rva7584205)             ; tail call
  ret void

else7589164:
  %arg7582225 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589169, i32 0, i32 0)); quoted string
  %retprim7581278 = call i64 @prim_halt(i64 %arg7582225)                             ; call prim_halt
  %arg7582227 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584210 = add i64 0, 0                                                         ; quoted ()
  %rva7584209 = call i64 @prim_cons(i64 %retprim7581278, i64 %rva7584210)            ; call prim_cons
  %rva7584208 = call i64 @prim_cons(i64 %arg7582227, i64 %rva7584209)                ; call prim_cons
  %cloptr7589170 = inttoptr i64 %cont7581267 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589171 = getelementptr inbounds i64, i64* %cloptr7589170, i64 0             ; &cloptr7589170[0]
  %f7589173 = load i64, i64* %i0ptr7589171, align 8                                  ; load; *i0ptr7589171
  %fptr7589172 = inttoptr i64 %f7589173 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589172(i64 %cont7581267, i64 %rva7584208)          ; tail call
  ret void
}


define void @lam7586477(i64 %env7586478, i64 %rvp7584204) {
  %envptr7589174 = inttoptr i64 %env7586478 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589175 = getelementptr inbounds i64, i64* %envptr7589174, i64 3            ; &envptr7589174[3]
  %yup$f = load i64, i64* %envptr7589175, align 8                                    ; load; *envptr7589175
  %envptr7589176 = inttoptr i64 %env7586478 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589177 = getelementptr inbounds i64, i64* %envptr7589176, i64 2            ; &envptr7589176[2]
  %NkA$tail = load i64, i64* %envptr7589177, align 8                                 ; load; *envptr7589177
  %envptr7589178 = inttoptr i64 %env7586478 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589179 = getelementptr inbounds i64, i64* %envptr7589178, i64 1            ; &envptr7589178[1]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589179, align 8                      ; load; *envptr7589179
  %cont7581271 = call i64 @prim_car(i64 %rvp7584204)                                 ; call prim_car
  %rvp7584203 = call i64 @prim_cdr(i64 %rvp7584204)                                  ; call prim_cdr
  %eox$l = call i64 @prim_car(i64 %rvp7584203)                                       ; call prim_car
  %na7584147 = call i64 @prim_cdr(i64 %rvp7584203)                                   ; call prim_cdr
  %a7581093 = call i64 @prim_eq_63(i64 %eox$l, i64 %NkA$tail)                        ; call prim_eq_63
  %a7581094 = call i64 @prim_not(i64 %a7581093)                                      ; call prim_not
  %cmp7589180 = icmp eq i64 %a7581094, 15                                            ; false?
  br i1 %cmp7589180, label %else7589182, label %then7589181                          ; if

then7589181:
  %arg7582152 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581095 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582152)               ; call prim_vector_45ref
  %a7581096 = call i64 @prim_procedure_63(i64 %a7581095)                             ; call prim_procedure_63
  %cmp7589183 = icmp eq i64 %a7581096, 15                                            ; false?
  br i1 %cmp7589183, label %else7589185, label %then7589184                          ; if

then7589184:
  %arg7582155 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581097 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582155)               ; call prim_vector_45ref
  %a7581098 = call i64 @prim_cdr(i64 %eox$l)                                         ; call prim_cdr
  %cloptr7589186 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589188 = getelementptr inbounds i64, i64* %cloptr7589186, i64 1              ; &eptr7589188[1]
  %eptr7589189 = getelementptr inbounds i64, i64* %cloptr7589186, i64 2              ; &eptr7589189[2]
  %eptr7589190 = getelementptr inbounds i64, i64* %cloptr7589186, i64 3              ; &eptr7589190[3]
  store i64 %eox$l, i64* %eptr7589188                                                ; *eptr7589188 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589189                                  ; *eptr7589189 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589190                                          ; *eptr7589190 = %cont7581271
  %eptr7589187 = getelementptr inbounds i64, i64* %cloptr7589186, i64 0              ; &cloptr7589186[0]
  %f7589191 = ptrtoint void(i64,i64)* @lam7586452 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589191, i64* %eptr7589187                                             ; store fptr
  %arg7582159 = ptrtoint i64* %cloptr7589186 to i64                                  ; closure cast; i64* -> i64
  %rva7584173 = add i64 0, 0                                                         ; quoted ()
  %rva7584172 = call i64 @prim_cons(i64 %a7581098, i64 %rva7584173)                  ; call prim_cons
  %rva7584171 = call i64 @prim_cons(i64 %arg7582159, i64 %rva7584172)                ; call prim_cons
  %cloptr7589192 = inttoptr i64 %a7581097 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589193 = getelementptr inbounds i64, i64* %cloptr7589192, i64 0             ; &cloptr7589192[0]
  %f7589195 = load i64, i64* %i0ptr7589193, align 8                                  ; load; *i0ptr7589193
  %fptr7589194 = inttoptr i64 %f7589195 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589194(i64 %a7581097, i64 %rva7584171)             ; tail call
  ret void

else7589185:
  %arg7582184 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589196, i32 0, i32 0)); quoted string
  %retprim7581276 = call i64 @prim_halt(i64 %arg7582184)                             ; call prim_halt
  %cloptr7589197 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589199 = getelementptr inbounds i64, i64* %cloptr7589197, i64 1              ; &eptr7589199[1]
  %eptr7589200 = getelementptr inbounds i64, i64* %cloptr7589197, i64 2              ; &eptr7589200[2]
  %eptr7589201 = getelementptr inbounds i64, i64* %cloptr7589197, i64 3              ; &eptr7589201[3]
  store i64 %eox$l, i64* %eptr7589199                                                ; *eptr7589199 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589200                                  ; *eptr7589200 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589201                                          ; *eptr7589201 = %cont7581271
  %eptr7589198 = getelementptr inbounds i64, i64* %cloptr7589197, i64 0              ; &cloptr7589197[0]
  %f7589202 = ptrtoint void(i64,i64)* @lam7586471 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589202, i64* %eptr7589198                                             ; store fptr
  %arg7582187 = ptrtoint i64* %cloptr7589197 to i64                                  ; closure cast; i64* -> i64
  %arg7582186 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584199 = add i64 0, 0                                                         ; quoted ()
  %rva7584198 = call i64 @prim_cons(i64 %retprim7581276, i64 %rva7584199)            ; call prim_cons
  %rva7584197 = call i64 @prim_cons(i64 %arg7582186, i64 %rva7584198)                ; call prim_cons
  %cloptr7589203 = inttoptr i64 %arg7582187 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589204 = getelementptr inbounds i64, i64* %cloptr7589203, i64 0             ; &cloptr7589203[0]
  %f7589206 = load i64, i64* %i0ptr7589204, align 8                                  ; load; *i0ptr7589204
  %fptr7589205 = inttoptr i64 %f7589206 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589205(i64 %arg7582187, i64 %rva7584197)           ; tail call
  ret void

else7589182:
  %retprim7581277 = call i64 @prim_void()                                            ; call prim_void
  %arg7582212 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584202 = add i64 0, 0                                                         ; quoted ()
  %rva7584201 = call i64 @prim_cons(i64 %retprim7581277, i64 %rva7584202)            ; call prim_cons
  %rva7584200 = call i64 @prim_cons(i64 %arg7582212, i64 %rva7584201)                ; call prim_cons
  %cloptr7589207 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589208 = getelementptr inbounds i64, i64* %cloptr7589207, i64 0             ; &cloptr7589207[0]
  %f7589210 = load i64, i64* %i0ptr7589208, align 8                                  ; load; *i0ptr7589208
  %fptr7589209 = inttoptr i64 %f7589210 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589209(i64 %cont7581271, i64 %rva7584200)          ; tail call
  ret void
}


define void @lam7586471(i64 %env7586472, i64 %rvp7584196) {
  %envptr7589211 = inttoptr i64 %env7586472 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589212 = getelementptr inbounds i64, i64* %envptr7589211, i64 3            ; &envptr7589211[3]
  %cont7581271 = load i64, i64* %envptr7589212, align 8                              ; load; *envptr7589212
  %envptr7589213 = inttoptr i64 %env7586472 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589214 = getelementptr inbounds i64, i64* %envptr7589213, i64 2            ; &envptr7589213[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589214, align 8                      ; load; *envptr7589214
  %envptr7589215 = inttoptr i64 %env7586472 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589216 = getelementptr inbounds i64, i64* %envptr7589215, i64 1            ; &envptr7589215[1]
  %eox$l = load i64, i64* %envptr7589216, align 8                                    ; load; *envptr7589216
  %_957581272 = call i64 @prim_car(i64 %rvp7584196)                                  ; call prim_car
  %rvp7584195 = call i64 @prim_cdr(i64 %rvp7584196)                                  ; call prim_cdr
  %TO0$_95t = call i64 @prim_car(i64 %rvp7584195)                                    ; call prim_car
  %na7584175 = call i64 @prim_cdr(i64 %rvp7584195)                                   ; call prim_cdr
  %a7581099 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581100 = call i64 @prim_car(i64 %a7581099)                                      ; call prim_car
  %a7581101 = call i64 @prim_procedure_63(i64 %a7581100)                             ; call prim_procedure_63
  %cmp7589217 = icmp eq i64 %a7581101, 15                                            ; false?
  br i1 %cmp7589217, label %else7589219, label %then7589218                          ; if

then7589218:
  %a7581102 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581103 = call i64 @prim_car(i64 %a7581102)                                      ; call prim_car
  %cloptr7589220 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589222 = getelementptr inbounds i64, i64* %cloptr7589220, i64 1              ; &eptr7589222[1]
  %eptr7589223 = getelementptr inbounds i64, i64* %cloptr7589220, i64 2              ; &eptr7589223[2]
  %eptr7589224 = getelementptr inbounds i64, i64* %cloptr7589220, i64 3              ; &eptr7589224[3]
  store i64 %eox$l, i64* %eptr7589222                                                ; *eptr7589222 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589223                                  ; *eptr7589223 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589224                                          ; *eptr7589224 = %cont7581271
  %eptr7589221 = getelementptr inbounds i64, i64* %cloptr7589220, i64 0              ; &cloptr7589220[0]
  %f7589225 = ptrtoint void(i64,i64)* @lam7586461 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589225, i64* %eptr7589221                                             ; store fptr
  %arg7582193 = ptrtoint i64* %cloptr7589220 to i64                                  ; closure cast; i64* -> i64
  %rva7584184 = add i64 0, 0                                                         ; quoted ()
  %rva7584183 = call i64 @prim_cons(i64 %arg7582193, i64 %rva7584184)                ; call prim_cons
  %cloptr7589226 = inttoptr i64 %a7581103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589227 = getelementptr inbounds i64, i64* %cloptr7589226, i64 0             ; &cloptr7589226[0]
  %f7589229 = load i64, i64* %i0ptr7589227, align 8                                  ; load; *i0ptr7589227
  %fptr7589228 = inttoptr i64 %f7589229 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589228(i64 %a7581103, i64 %rva7584183)             ; tail call
  ret void

else7589219:
  %arg7582201 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589230, i32 0, i32 0)); quoted string
  %retprim7581275 = call i64 @prim_halt(i64 %arg7582201)                             ; call prim_halt
  %cloptr7589231 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589233 = getelementptr inbounds i64, i64* %cloptr7589231, i64 1              ; &eptr7589233[1]
  %eptr7589234 = getelementptr inbounds i64, i64* %cloptr7589231, i64 2              ; &eptr7589234[2]
  %eptr7589235 = getelementptr inbounds i64, i64* %cloptr7589231, i64 3              ; &eptr7589235[3]
  store i64 %eox$l, i64* %eptr7589233                                                ; *eptr7589233 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589234                                  ; *eptr7589234 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589235                                          ; *eptr7589235 = %cont7581271
  %eptr7589232 = getelementptr inbounds i64, i64* %cloptr7589231, i64 0              ; &cloptr7589231[0]
  %f7589236 = ptrtoint void(i64,i64)* @lam7586468 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589236, i64* %eptr7589232                                             ; store fptr
  %arg7582204 = ptrtoint i64* %cloptr7589231 to i64                                  ; closure cast; i64* -> i64
  %arg7582203 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584194 = add i64 0, 0                                                         ; quoted ()
  %rva7584193 = call i64 @prim_cons(i64 %retprim7581275, i64 %rva7584194)            ; call prim_cons
  %rva7584192 = call i64 @prim_cons(i64 %arg7582203, i64 %rva7584193)                ; call prim_cons
  %cloptr7589237 = inttoptr i64 %arg7582204 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589238 = getelementptr inbounds i64, i64* %cloptr7589237, i64 0             ; &cloptr7589237[0]
  %f7589240 = load i64, i64* %i0ptr7589238, align 8                                  ; load; *i0ptr7589238
  %fptr7589239 = inttoptr i64 %f7589240 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589239(i64 %arg7582204, i64 %rva7584192)           ; tail call
  ret void
}


define void @lam7586468(i64 %env7586469, i64 %rvp7584191) {
  %envptr7589241 = inttoptr i64 %env7586469 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589242 = getelementptr inbounds i64, i64* %envptr7589241, i64 3            ; &envptr7589241[3]
  %cont7581271 = load i64, i64* %envptr7589242, align 8                              ; load; *envptr7589242
  %envptr7589243 = inttoptr i64 %env7586469 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589244 = getelementptr inbounds i64, i64* %envptr7589243, i64 2            ; &envptr7589243[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589244, align 8                      ; load; *envptr7589244
  %envptr7589245 = inttoptr i64 %env7586469 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589246 = getelementptr inbounds i64, i64* %envptr7589245, i64 1            ; &envptr7589245[1]
  %eox$l = load i64, i64* %envptr7589246, align 8                                    ; load; *envptr7589246
  %_957581273 = call i64 @prim_car(i64 %rvp7584191)                                  ; call prim_car
  %rvp7584190 = call i64 @prim_cdr(i64 %rvp7584191)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584190)                                    ; call prim_car
  %na7584186 = call i64 @prim_cdr(i64 %rvp7584190)                                   ; call prim_cdr
  %arg7582206 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582206, i64 %eox$l); call prim_vector_45set_33
  %arg7582209 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584189 = add i64 0, 0                                                         ; quoted ()
  %rva7584188 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584189)            ; call prim_cons
  %rva7584187 = call i64 @prim_cons(i64 %arg7582209, i64 %rva7584188)                ; call prim_cons
  %cloptr7589247 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589248 = getelementptr inbounds i64, i64* %cloptr7589247, i64 0             ; &cloptr7589247[0]
  %f7589250 = load i64, i64* %i0ptr7589248, align 8                                  ; load; *i0ptr7589248
  %fptr7589249 = inttoptr i64 %f7589250 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589249(i64 %cont7581271, i64 %rva7584187)          ; tail call
  ret void
}


define void @lam7586461(i64 %env7586462, i64 %rvp7584182) {
  %envptr7589251 = inttoptr i64 %env7586462 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589252 = getelementptr inbounds i64, i64* %envptr7589251, i64 3            ; &envptr7589251[3]
  %cont7581271 = load i64, i64* %envptr7589252, align 8                              ; load; *envptr7589252
  %envptr7589253 = inttoptr i64 %env7586462 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589254 = getelementptr inbounds i64, i64* %envptr7589253, i64 2            ; &envptr7589253[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589254, align 8                      ; load; *envptr7589254
  %envptr7589255 = inttoptr i64 %env7586462 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589256 = getelementptr inbounds i64, i64* %envptr7589255, i64 1            ; &envptr7589255[1]
  %eox$l = load i64, i64* %envptr7589256, align 8                                    ; load; *envptr7589256
  %_957581273 = call i64 @prim_car(i64 %rvp7584182)                                  ; call prim_car
  %rvp7584181 = call i64 @prim_cdr(i64 %rvp7584182)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584181)                                    ; call prim_car
  %na7584177 = call i64 @prim_cdr(i64 %rvp7584181)                                   ; call prim_cdr
  %arg7582196 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582196, i64 %eox$l); call prim_vector_45set_33
  %arg7582199 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584180 = add i64 0, 0                                                         ; quoted ()
  %rva7584179 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584180)            ; call prim_cons
  %rva7584178 = call i64 @prim_cons(i64 %arg7582199, i64 %rva7584179)                ; call prim_cons
  %cloptr7589257 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589258 = getelementptr inbounds i64, i64* %cloptr7589257, i64 0             ; &cloptr7589257[0]
  %f7589260 = load i64, i64* %i0ptr7589258, align 8                                  ; load; *i0ptr7589258
  %fptr7589259 = inttoptr i64 %f7589260 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589259(i64 %cont7581271, i64 %rva7584178)          ; tail call
  ret void
}


define void @lam7586452(i64 %env7586453, i64 %rvp7584170) {
  %envptr7589261 = inttoptr i64 %env7586453 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589262 = getelementptr inbounds i64, i64* %envptr7589261, i64 3            ; &envptr7589261[3]
  %cont7581271 = load i64, i64* %envptr7589262, align 8                              ; load; *envptr7589262
  %envptr7589263 = inttoptr i64 %env7586453 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589264 = getelementptr inbounds i64, i64* %envptr7589263, i64 2            ; &envptr7589263[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589264, align 8                      ; load; *envptr7589264
  %envptr7589265 = inttoptr i64 %env7586453 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589266 = getelementptr inbounds i64, i64* %envptr7589265, i64 1            ; &envptr7589265[1]
  %eox$l = load i64, i64* %envptr7589266, align 8                                    ; load; *envptr7589266
  %_957581272 = call i64 @prim_car(i64 %rvp7584170)                                  ; call prim_car
  %rvp7584169 = call i64 @prim_cdr(i64 %rvp7584170)                                  ; call prim_cdr
  %TO0$_95t = call i64 @prim_car(i64 %rvp7584169)                                    ; call prim_car
  %na7584149 = call i64 @prim_cdr(i64 %rvp7584169)                                   ; call prim_cdr
  %a7581099 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581100 = call i64 @prim_car(i64 %a7581099)                                      ; call prim_car
  %a7581101 = call i64 @prim_procedure_63(i64 %a7581100)                             ; call prim_procedure_63
  %cmp7589267 = icmp eq i64 %a7581101, 15                                            ; false?
  br i1 %cmp7589267, label %else7589269, label %then7589268                          ; if

then7589268:
  %a7581102 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581103 = call i64 @prim_car(i64 %a7581102)                                      ; call prim_car
  %cloptr7589270 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589272 = getelementptr inbounds i64, i64* %cloptr7589270, i64 1              ; &eptr7589272[1]
  %eptr7589273 = getelementptr inbounds i64, i64* %cloptr7589270, i64 2              ; &eptr7589273[2]
  %eptr7589274 = getelementptr inbounds i64, i64* %cloptr7589270, i64 3              ; &eptr7589274[3]
  store i64 %eox$l, i64* %eptr7589272                                                ; *eptr7589272 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589273                                  ; *eptr7589273 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589274                                          ; *eptr7589274 = %cont7581271
  %eptr7589271 = getelementptr inbounds i64, i64* %cloptr7589270, i64 0              ; &cloptr7589270[0]
  %f7589275 = ptrtoint void(i64,i64)* @lam7586442 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589275, i64* %eptr7589271                                             ; store fptr
  %arg7582166 = ptrtoint i64* %cloptr7589270 to i64                                  ; closure cast; i64* -> i64
  %rva7584158 = add i64 0, 0                                                         ; quoted ()
  %rva7584157 = call i64 @prim_cons(i64 %arg7582166, i64 %rva7584158)                ; call prim_cons
  %cloptr7589276 = inttoptr i64 %a7581103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589277 = getelementptr inbounds i64, i64* %cloptr7589276, i64 0             ; &cloptr7589276[0]
  %f7589279 = load i64, i64* %i0ptr7589277, align 8                                  ; load; *i0ptr7589277
  %fptr7589278 = inttoptr i64 %f7589279 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589278(i64 %a7581103, i64 %rva7584157)             ; tail call
  ret void

else7589269:
  %arg7582174 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589280, i32 0, i32 0)); quoted string
  %retprim7581275 = call i64 @prim_halt(i64 %arg7582174)                             ; call prim_halt
  %cloptr7589281 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589283 = getelementptr inbounds i64, i64* %cloptr7589281, i64 1              ; &eptr7589283[1]
  %eptr7589284 = getelementptr inbounds i64, i64* %cloptr7589281, i64 2              ; &eptr7589284[2]
  %eptr7589285 = getelementptr inbounds i64, i64* %cloptr7589281, i64 3              ; &eptr7589285[3]
  store i64 %eox$l, i64* %eptr7589283                                                ; *eptr7589283 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589284                                  ; *eptr7589284 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589285                                          ; *eptr7589285 = %cont7581271
  %eptr7589282 = getelementptr inbounds i64, i64* %cloptr7589281, i64 0              ; &cloptr7589281[0]
  %f7589286 = ptrtoint void(i64,i64)* @lam7586449 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589286, i64* %eptr7589282                                             ; store fptr
  %arg7582177 = ptrtoint i64* %cloptr7589281 to i64                                  ; closure cast; i64* -> i64
  %arg7582176 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584168 = add i64 0, 0                                                         ; quoted ()
  %rva7584167 = call i64 @prim_cons(i64 %retprim7581275, i64 %rva7584168)            ; call prim_cons
  %rva7584166 = call i64 @prim_cons(i64 %arg7582176, i64 %rva7584167)                ; call prim_cons
  %cloptr7589287 = inttoptr i64 %arg7582177 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589288 = getelementptr inbounds i64, i64* %cloptr7589287, i64 0             ; &cloptr7589287[0]
  %f7589290 = load i64, i64* %i0ptr7589288, align 8                                  ; load; *i0ptr7589288
  %fptr7589289 = inttoptr i64 %f7589290 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589289(i64 %arg7582177, i64 %rva7584166)           ; tail call
  ret void
}


define void @lam7586449(i64 %env7586450, i64 %rvp7584165) {
  %envptr7589291 = inttoptr i64 %env7586450 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589292 = getelementptr inbounds i64, i64* %envptr7589291, i64 3            ; &envptr7589291[3]
  %cont7581271 = load i64, i64* %envptr7589292, align 8                              ; load; *envptr7589292
  %envptr7589293 = inttoptr i64 %env7586450 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589294 = getelementptr inbounds i64, i64* %envptr7589293, i64 2            ; &envptr7589293[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589294, align 8                      ; load; *envptr7589294
  %envptr7589295 = inttoptr i64 %env7586450 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589296 = getelementptr inbounds i64, i64* %envptr7589295, i64 1            ; &envptr7589295[1]
  %eox$l = load i64, i64* %envptr7589296, align 8                                    ; load; *envptr7589296
  %_957581273 = call i64 @prim_car(i64 %rvp7584165)                                  ; call prim_car
  %rvp7584164 = call i64 @prim_cdr(i64 %rvp7584165)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584164)                                    ; call prim_car
  %na7584160 = call i64 @prim_cdr(i64 %rvp7584164)                                   ; call prim_cdr
  %arg7582179 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582179, i64 %eox$l); call prim_vector_45set_33
  %arg7582182 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584163 = add i64 0, 0                                                         ; quoted ()
  %rva7584162 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584163)            ; call prim_cons
  %rva7584161 = call i64 @prim_cons(i64 %arg7582182, i64 %rva7584162)                ; call prim_cons
  %cloptr7589297 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589298 = getelementptr inbounds i64, i64* %cloptr7589297, i64 0             ; &cloptr7589297[0]
  %f7589300 = load i64, i64* %i0ptr7589298, align 8                                  ; load; *i0ptr7589298
  %fptr7589299 = inttoptr i64 %f7589300 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589299(i64 %cont7581271, i64 %rva7584161)          ; tail call
  ret void
}


define void @lam7586442(i64 %env7586443, i64 %rvp7584156) {
  %envptr7589301 = inttoptr i64 %env7586443 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589302 = getelementptr inbounds i64, i64* %envptr7589301, i64 3            ; &envptr7589301[3]
  %cont7581271 = load i64, i64* %envptr7589302, align 8                              ; load; *envptr7589302
  %envptr7589303 = inttoptr i64 %env7586443 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589304 = getelementptr inbounds i64, i64* %envptr7589303, i64 2            ; &envptr7589303[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589304, align 8                      ; load; *envptr7589304
  %envptr7589305 = inttoptr i64 %env7586443 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589306 = getelementptr inbounds i64, i64* %envptr7589305, i64 1            ; &envptr7589305[1]
  %eox$l = load i64, i64* %envptr7589306, align 8                                    ; load; *envptr7589306
  %_957581273 = call i64 @prim_car(i64 %rvp7584156)                                  ; call prim_car
  %rvp7584155 = call i64 @prim_cdr(i64 %rvp7584156)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584155)                                    ; call prim_car
  %na7584151 = call i64 @prim_cdr(i64 %rvp7584155)                                   ; call prim_cdr
  %arg7582169 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582169, i64 %eox$l); call prim_vector_45set_33
  %arg7582172 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584154 = add i64 0, 0                                                         ; quoted ()
  %rva7584153 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584154)            ; call prim_cons
  %rva7584152 = call i64 @prim_cons(i64 %arg7582172, i64 %rva7584153)                ; call prim_cons
  %cloptr7589307 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589308 = getelementptr inbounds i64, i64* %cloptr7589307, i64 0             ; &cloptr7589307[0]
  %f7589310 = load i64, i64* %i0ptr7589308, align 8                                  ; load; *i0ptr7589308
  %fptr7589309 = inttoptr i64 %f7589310 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589309(i64 %cont7581271, i64 %rva7584152)          ; tail call
  ret void
}


define void @lam7586421(i64 %env7586422, i64 %rvp7584133) {
  %envptr7589311 = inttoptr i64 %env7586422 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589312 = getelementptr inbounds i64, i64* %envptr7589311, i64 4            ; &envptr7589311[4]
  %cont7581267 = load i64, i64* %envptr7589312, align 8                              ; load; *envptr7589312
  %envptr7589313 = inttoptr i64 %env7586422 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589314 = getelementptr inbounds i64, i64* %envptr7589313, i64 3            ; &envptr7589313[3]
  %NkA$tail = load i64, i64* %envptr7589314, align 8                                 ; load; *envptr7589314
  %envptr7589315 = inttoptr i64 %env7586422 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589316 = getelementptr inbounds i64, i64* %envptr7589315, i64 2            ; &envptr7589315[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589316, align 8                      ; load; *envptr7589316
  %envptr7589317 = inttoptr i64 %env7586422 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589318 = getelementptr inbounds i64, i64* %envptr7589317, i64 1            ; &envptr7589317[1]
  %gKR$new = load i64, i64* %envptr7589318, align 8                                  ; load; *envptr7589318
  %_957581269 = call i64 @prim_car(i64 %rvp7584133)                                  ; call prim_car
  %rvp7584132 = call i64 @prim_cdr(i64 %rvp7584133)                                  ; call prim_cdr
  %NGZ$_95t = call i64 @prim_car(i64 %rvp7584132)                                    ; call prim_car
  %na7584050 = call i64 @prim_cdr(i64 %rvp7584132)                                   ; call prim_cdr
  %cloptr7589319 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7589320 = getelementptr inbounds i64, i64* %cloptr7589319, i64 0              ; &cloptr7589319[0]
  %f7589321 = ptrtoint void(i64,i64)* @lam7586419 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589321, i64* %eptr7589320                                             ; store fptr
  %arg7582042 = ptrtoint i64* %cloptr7589319 to i64                                  ; closure cast; i64* -> i64
  %cloptr7589322 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7589324 = getelementptr inbounds i64, i64* %cloptr7589322, i64 1              ; &eptr7589324[1]
  %eptr7589325 = getelementptr inbounds i64, i64* %cloptr7589322, i64 2              ; &eptr7589325[2]
  %eptr7589326 = getelementptr inbounds i64, i64* %cloptr7589322, i64 3              ; &eptr7589326[3]
  %eptr7589327 = getelementptr inbounds i64, i64* %cloptr7589322, i64 4              ; &eptr7589327[4]
  store i64 %gKR$new, i64* %eptr7589324                                              ; *eptr7589324 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7589325                                  ; *eptr7589325 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7589326                                             ; *eptr7589326 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7589327                                          ; *eptr7589327 = %cont7581267
  %eptr7589323 = getelementptr inbounds i64, i64* %cloptr7589322, i64 0              ; &cloptr7589322[0]
  %f7589328 = ptrtoint void(i64,i64)* @lam7586415 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589328, i64* %eptr7589323                                             ; store fptr
  %arg7582041 = ptrtoint i64* %cloptr7589322 to i64                                  ; closure cast; i64* -> i64
  %rva7584131 = add i64 0, 0                                                         ; quoted ()
  %rva7584130 = call i64 @prim_cons(i64 %arg7582041, i64 %rva7584131)                ; call prim_cons
  %cloptr7589329 = inttoptr i64 %arg7582042 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589330 = getelementptr inbounds i64, i64* %cloptr7589329, i64 0             ; &cloptr7589329[0]
  %f7589332 = load i64, i64* %i0ptr7589330, align 8                                  ; load; *i0ptr7589330
  %fptr7589331 = inttoptr i64 %f7589332 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589331(i64 %arg7582042, i64 %rva7584130)           ; tail call
  ret void
}


define void @lam7586419(i64 %env7586420, i64 %Noz$lst7581282) {
  %cont7581281 = call i64 @prim_car(i64 %Noz$lst7581282)                             ; call prim_car
  %Noz$lst = call i64 @prim_cdr(i64 %Noz$lst7581282)                                 ; call prim_cdr
  %arg7582046 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584053 = add i64 0, 0                                                         ; quoted ()
  %rva7584052 = call i64 @prim_cons(i64 %Noz$lst, i64 %rva7584053)                   ; call prim_cons
  %rva7584051 = call i64 @prim_cons(i64 %arg7582046, i64 %rva7584052)                ; call prim_cons
  %cloptr7589333 = inttoptr i64 %cont7581281 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589334 = getelementptr inbounds i64, i64* %cloptr7589333, i64 0             ; &cloptr7589333[0]
  %f7589336 = load i64, i64* %i0ptr7589334, align 8                                  ; load; *i0ptr7589334
  %fptr7589335 = inttoptr i64 %f7589336 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589335(i64 %cont7581281, i64 %rva7584051)          ; tail call
  ret void
}


define void @lam7586415(i64 %env7586416, i64 %rvp7584129) {
  %envptr7589337 = inttoptr i64 %env7586416 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589338 = getelementptr inbounds i64, i64* %envptr7589337, i64 4            ; &envptr7589337[4]
  %cont7581267 = load i64, i64* %envptr7589338, align 8                              ; load; *envptr7589338
  %envptr7589339 = inttoptr i64 %env7586416 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589340 = getelementptr inbounds i64, i64* %envptr7589339, i64 3            ; &envptr7589339[3]
  %NkA$tail = load i64, i64* %envptr7589340, align 8                                 ; load; *envptr7589340
  %envptr7589341 = inttoptr i64 %env7586416 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589342 = getelementptr inbounds i64, i64* %envptr7589341, i64 2            ; &envptr7589341[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589342, align 8                      ; load; *envptr7589342
  %envptr7589343 = inttoptr i64 %env7586416 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589344 = getelementptr inbounds i64, i64* %envptr7589343, i64 1            ; &envptr7589343[1]
  %gKR$new = load i64, i64* %envptr7589344, align 8                                  ; load; *envptr7589344
  %_957581279 = call i64 @prim_car(i64 %rvp7584129)                                  ; call prim_car
  %rvp7584128 = call i64 @prim_cdr(i64 %rvp7584129)                                  ; call prim_cdr
  %a7581092 = call i64 @prim_car(i64 %rvp7584128)                                    ; call prim_car
  %na7584055 = call i64 @prim_cdr(i64 %rvp7584128)                                   ; call prim_cdr
  %arg7582049 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581280 = call i64 @prim_make_45vector(i64 %arg7582049, i64 %a7581092)     ; call prim_make_45vector
  %cloptr7589345 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7589347 = getelementptr inbounds i64, i64* %cloptr7589345, i64 1              ; &eptr7589347[1]
  %eptr7589348 = getelementptr inbounds i64, i64* %cloptr7589345, i64 2              ; &eptr7589348[2]
  %eptr7589349 = getelementptr inbounds i64, i64* %cloptr7589345, i64 3              ; &eptr7589349[3]
  %eptr7589350 = getelementptr inbounds i64, i64* %cloptr7589345, i64 4              ; &eptr7589350[4]
  store i64 %gKR$new, i64* %eptr7589347                                              ; *eptr7589347 = %gKR$new
  store i64 %CPS$_37wind_45stack, i64* %eptr7589348                                  ; *eptr7589348 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7589349                                             ; *eptr7589349 = %NkA$tail
  store i64 %cont7581267, i64* %eptr7589350                                          ; *eptr7589350 = %cont7581267
  %eptr7589346 = getelementptr inbounds i64, i64* %cloptr7589345, i64 0              ; &cloptr7589345[0]
  %f7589351 = ptrtoint void(i64,i64)* @lam7586412 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589351, i64* %eptr7589346                                             ; store fptr
  %arg7582052 = ptrtoint i64* %cloptr7589345 to i64                                  ; closure cast; i64* -> i64
  %arg7582051 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584127 = add i64 0, 0                                                         ; quoted ()
  %rva7584126 = call i64 @prim_cons(i64 %retprim7581280, i64 %rva7584127)            ; call prim_cons
  %rva7584125 = call i64 @prim_cons(i64 %arg7582051, i64 %rva7584126)                ; call prim_cons
  %cloptr7589352 = inttoptr i64 %arg7582052 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589353 = getelementptr inbounds i64, i64* %cloptr7589352, i64 0             ; &cloptr7589352[0]
  %f7589355 = load i64, i64* %i0ptr7589353, align 8                                  ; load; *i0ptr7589353
  %fptr7589354 = inttoptr i64 %f7589355 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589354(i64 %arg7582052, i64 %rva7584125)           ; tail call
  ret void
}


define void @lam7586412(i64 %env7586413, i64 %rvp7584124) {
  %envptr7589356 = inttoptr i64 %env7586413 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589357 = getelementptr inbounds i64, i64* %envptr7589356, i64 4            ; &envptr7589356[4]
  %cont7581267 = load i64, i64* %envptr7589357, align 8                              ; load; *envptr7589357
  %envptr7589358 = inttoptr i64 %env7586413 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589359 = getelementptr inbounds i64, i64* %envptr7589358, i64 3            ; &envptr7589358[3]
  %NkA$tail = load i64, i64* %envptr7589359, align 8                                 ; load; *envptr7589359
  %envptr7589360 = inttoptr i64 %env7586413 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589361 = getelementptr inbounds i64, i64* %envptr7589360, i64 2            ; &envptr7589360[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589361, align 8                      ; load; *envptr7589361
  %envptr7589362 = inttoptr i64 %env7586413 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589363 = getelementptr inbounds i64, i64* %envptr7589362, i64 1            ; &envptr7589362[1]
  %gKR$new = load i64, i64* %envptr7589363, align 8                                  ; load; *envptr7589363
  %_957581270 = call i64 @prim_car(i64 %rvp7584124)                                  ; call prim_car
  %rvp7584123 = call i64 @prim_cdr(i64 %rvp7584124)                                  ; call prim_cdr
  %yup$f = call i64 @prim_car(i64 %rvp7584123)                                       ; call prim_car
  %na7584057 = call i64 @prim_cdr(i64 %rvp7584123)                                   ; call prim_cdr
  %cloptr7589364 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589366 = getelementptr inbounds i64, i64* %cloptr7589364, i64 1              ; &eptr7589366[1]
  %eptr7589367 = getelementptr inbounds i64, i64* %cloptr7589364, i64 2              ; &eptr7589367[2]
  %eptr7589368 = getelementptr inbounds i64, i64* %cloptr7589364, i64 3              ; &eptr7589368[3]
  store i64 %CPS$_37wind_45stack, i64* %eptr7589366                                  ; *eptr7589366 = %CPS$_37wind_45stack
  store i64 %NkA$tail, i64* %eptr7589367                                             ; *eptr7589367 = %NkA$tail
  store i64 %yup$f, i64* %eptr7589368                                                ; *eptr7589368 = %yup$f
  %eptr7589365 = getelementptr inbounds i64, i64* %cloptr7589364, i64 0              ; &cloptr7589364[0]
  %f7589369 = ptrtoint void(i64,i64)* @lam7586410 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589369, i64* %eptr7589365                                             ; store fptr
  %C5u$f7580966 = ptrtoint i64* %cloptr7589364 to i64                                ; closure cast; i64* -> i64
  %arg7582119 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %Ksh$_95t = call i64 @prim_vector_45set_33(i64 %yup$f, i64 %arg7582119, i64 %C5u$f7580966); call prim_vector_45set_33
  %arg7582121 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581104 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582121)               ; call prim_vector_45ref
  %a7581105 = call i64 @prim_procedure_63(i64 %a7581104)                             ; call prim_procedure_63
  %cmp7589370 = icmp eq i64 %a7581105, 15                                            ; false?
  br i1 %cmp7589370, label %else7589372, label %then7589371                          ; if

then7589371:
  %arg7582124 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581106 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582124)               ; call prim_vector_45ref
  %rva7584119 = add i64 0, 0                                                         ; quoted ()
  %rva7584118 = call i64 @prim_cons(i64 %gKR$new, i64 %rva7584119)                   ; call prim_cons
  %rva7584117 = call i64 @prim_cons(i64 %cont7581267, i64 %rva7584118)               ; call prim_cons
  %cloptr7589373 = inttoptr i64 %a7581106 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589374 = getelementptr inbounds i64, i64* %cloptr7589373, i64 0             ; &cloptr7589373[0]
  %f7589376 = load i64, i64* %i0ptr7589374, align 8                                  ; load; *i0ptr7589374
  %fptr7589375 = inttoptr i64 %f7589376 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589375(i64 %a7581106, i64 %rva7584117)             ; tail call
  ret void

else7589372:
  %arg7582129 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589377, i32 0, i32 0)); quoted string
  %retprim7581278 = call i64 @prim_halt(i64 %arg7582129)                             ; call prim_halt
  %arg7582131 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584122 = add i64 0, 0                                                         ; quoted ()
  %rva7584121 = call i64 @prim_cons(i64 %retprim7581278, i64 %rva7584122)            ; call prim_cons
  %rva7584120 = call i64 @prim_cons(i64 %arg7582131, i64 %rva7584121)                ; call prim_cons
  %cloptr7589378 = inttoptr i64 %cont7581267 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589379 = getelementptr inbounds i64, i64* %cloptr7589378, i64 0             ; &cloptr7589378[0]
  %f7589381 = load i64, i64* %i0ptr7589379, align 8                                  ; load; *i0ptr7589379
  %fptr7589380 = inttoptr i64 %f7589381 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589380(i64 %cont7581267, i64 %rva7584120)          ; tail call
  ret void
}


define void @lam7586410(i64 %env7586411, i64 %rvp7584116) {
  %envptr7589382 = inttoptr i64 %env7586411 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589383 = getelementptr inbounds i64, i64* %envptr7589382, i64 3            ; &envptr7589382[3]
  %yup$f = load i64, i64* %envptr7589383, align 8                                    ; load; *envptr7589383
  %envptr7589384 = inttoptr i64 %env7586411 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589385 = getelementptr inbounds i64, i64* %envptr7589384, i64 2            ; &envptr7589384[2]
  %NkA$tail = load i64, i64* %envptr7589385, align 8                                 ; load; *envptr7589385
  %envptr7589386 = inttoptr i64 %env7586411 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589387 = getelementptr inbounds i64, i64* %envptr7589386, i64 1            ; &envptr7589386[1]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589387, align 8                      ; load; *envptr7589387
  %cont7581271 = call i64 @prim_car(i64 %rvp7584116)                                 ; call prim_car
  %rvp7584115 = call i64 @prim_cdr(i64 %rvp7584116)                                  ; call prim_cdr
  %eox$l = call i64 @prim_car(i64 %rvp7584115)                                       ; call prim_car
  %na7584059 = call i64 @prim_cdr(i64 %rvp7584115)                                   ; call prim_cdr
  %a7581093 = call i64 @prim_eq_63(i64 %eox$l, i64 %NkA$tail)                        ; call prim_eq_63
  %a7581094 = call i64 @prim_not(i64 %a7581093)                                      ; call prim_not
  %cmp7589388 = icmp eq i64 %a7581094, 15                                            ; false?
  br i1 %cmp7589388, label %else7589390, label %then7589389                          ; if

then7589389:
  %arg7582056 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581095 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582056)               ; call prim_vector_45ref
  %a7581096 = call i64 @prim_procedure_63(i64 %a7581095)                             ; call prim_procedure_63
  %cmp7589391 = icmp eq i64 %a7581096, 15                                            ; false?
  br i1 %cmp7589391, label %else7589393, label %then7589392                          ; if

then7589392:
  %arg7582059 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581097 = call i64 @prim_vector_45ref(i64 %yup$f, i64 %arg7582059)               ; call prim_vector_45ref
  %a7581098 = call i64 @prim_cdr(i64 %eox$l)                                         ; call prim_cdr
  %cloptr7589394 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589396 = getelementptr inbounds i64, i64* %cloptr7589394, i64 1              ; &eptr7589396[1]
  %eptr7589397 = getelementptr inbounds i64, i64* %cloptr7589394, i64 2              ; &eptr7589397[2]
  %eptr7589398 = getelementptr inbounds i64, i64* %cloptr7589394, i64 3              ; &eptr7589398[3]
  store i64 %eox$l, i64* %eptr7589396                                                ; *eptr7589396 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589397                                  ; *eptr7589397 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589398                                          ; *eptr7589398 = %cont7581271
  %eptr7589395 = getelementptr inbounds i64, i64* %cloptr7589394, i64 0              ; &cloptr7589394[0]
  %f7589399 = ptrtoint void(i64,i64)* @lam7586385 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589399, i64* %eptr7589395                                             ; store fptr
  %arg7582063 = ptrtoint i64* %cloptr7589394 to i64                                  ; closure cast; i64* -> i64
  %rva7584085 = add i64 0, 0                                                         ; quoted ()
  %rva7584084 = call i64 @prim_cons(i64 %a7581098, i64 %rva7584085)                  ; call prim_cons
  %rva7584083 = call i64 @prim_cons(i64 %arg7582063, i64 %rva7584084)                ; call prim_cons
  %cloptr7589400 = inttoptr i64 %a7581097 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589401 = getelementptr inbounds i64, i64* %cloptr7589400, i64 0             ; &cloptr7589400[0]
  %f7589403 = load i64, i64* %i0ptr7589401, align 8                                  ; load; *i0ptr7589401
  %fptr7589402 = inttoptr i64 %f7589403 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589402(i64 %a7581097, i64 %rva7584083)             ; tail call
  ret void

else7589393:
  %arg7582088 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589404, i32 0, i32 0)); quoted string
  %retprim7581276 = call i64 @prim_halt(i64 %arg7582088)                             ; call prim_halt
  %cloptr7589405 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589407 = getelementptr inbounds i64, i64* %cloptr7589405, i64 1              ; &eptr7589407[1]
  %eptr7589408 = getelementptr inbounds i64, i64* %cloptr7589405, i64 2              ; &eptr7589408[2]
  %eptr7589409 = getelementptr inbounds i64, i64* %cloptr7589405, i64 3              ; &eptr7589409[3]
  store i64 %eox$l, i64* %eptr7589407                                                ; *eptr7589407 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589408                                  ; *eptr7589408 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589409                                          ; *eptr7589409 = %cont7581271
  %eptr7589406 = getelementptr inbounds i64, i64* %cloptr7589405, i64 0              ; &cloptr7589405[0]
  %f7589410 = ptrtoint void(i64,i64)* @lam7586404 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589410, i64* %eptr7589406                                             ; store fptr
  %arg7582091 = ptrtoint i64* %cloptr7589405 to i64                                  ; closure cast; i64* -> i64
  %arg7582090 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584111 = add i64 0, 0                                                         ; quoted ()
  %rva7584110 = call i64 @prim_cons(i64 %retprim7581276, i64 %rva7584111)            ; call prim_cons
  %rva7584109 = call i64 @prim_cons(i64 %arg7582090, i64 %rva7584110)                ; call prim_cons
  %cloptr7589411 = inttoptr i64 %arg7582091 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589412 = getelementptr inbounds i64, i64* %cloptr7589411, i64 0             ; &cloptr7589411[0]
  %f7589414 = load i64, i64* %i0ptr7589412, align 8                                  ; load; *i0ptr7589412
  %fptr7589413 = inttoptr i64 %f7589414 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589413(i64 %arg7582091, i64 %rva7584109)           ; tail call
  ret void

else7589390:
  %retprim7581277 = call i64 @prim_void()                                            ; call prim_void
  %arg7582116 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584114 = add i64 0, 0                                                         ; quoted ()
  %rva7584113 = call i64 @prim_cons(i64 %retprim7581277, i64 %rva7584114)            ; call prim_cons
  %rva7584112 = call i64 @prim_cons(i64 %arg7582116, i64 %rva7584113)                ; call prim_cons
  %cloptr7589415 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589416 = getelementptr inbounds i64, i64* %cloptr7589415, i64 0             ; &cloptr7589415[0]
  %f7589418 = load i64, i64* %i0ptr7589416, align 8                                  ; load; *i0ptr7589416
  %fptr7589417 = inttoptr i64 %f7589418 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589417(i64 %cont7581271, i64 %rva7584112)          ; tail call
  ret void
}


define void @lam7586404(i64 %env7586405, i64 %rvp7584108) {
  %envptr7589419 = inttoptr i64 %env7586405 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589420 = getelementptr inbounds i64, i64* %envptr7589419, i64 3            ; &envptr7589419[3]
  %cont7581271 = load i64, i64* %envptr7589420, align 8                              ; load; *envptr7589420
  %envptr7589421 = inttoptr i64 %env7586405 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589422 = getelementptr inbounds i64, i64* %envptr7589421, i64 2            ; &envptr7589421[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589422, align 8                      ; load; *envptr7589422
  %envptr7589423 = inttoptr i64 %env7586405 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589424 = getelementptr inbounds i64, i64* %envptr7589423, i64 1            ; &envptr7589423[1]
  %eox$l = load i64, i64* %envptr7589424, align 8                                    ; load; *envptr7589424
  %_957581272 = call i64 @prim_car(i64 %rvp7584108)                                  ; call prim_car
  %rvp7584107 = call i64 @prim_cdr(i64 %rvp7584108)                                  ; call prim_cdr
  %TO0$_95t = call i64 @prim_car(i64 %rvp7584107)                                    ; call prim_car
  %na7584087 = call i64 @prim_cdr(i64 %rvp7584107)                                   ; call prim_cdr
  %a7581099 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581100 = call i64 @prim_car(i64 %a7581099)                                      ; call prim_car
  %a7581101 = call i64 @prim_procedure_63(i64 %a7581100)                             ; call prim_procedure_63
  %cmp7589425 = icmp eq i64 %a7581101, 15                                            ; false?
  br i1 %cmp7589425, label %else7589427, label %then7589426                          ; if

then7589426:
  %a7581102 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581103 = call i64 @prim_car(i64 %a7581102)                                      ; call prim_car
  %cloptr7589428 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589430 = getelementptr inbounds i64, i64* %cloptr7589428, i64 1              ; &eptr7589430[1]
  %eptr7589431 = getelementptr inbounds i64, i64* %cloptr7589428, i64 2              ; &eptr7589431[2]
  %eptr7589432 = getelementptr inbounds i64, i64* %cloptr7589428, i64 3              ; &eptr7589432[3]
  store i64 %eox$l, i64* %eptr7589430                                                ; *eptr7589430 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589431                                  ; *eptr7589431 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589432                                          ; *eptr7589432 = %cont7581271
  %eptr7589429 = getelementptr inbounds i64, i64* %cloptr7589428, i64 0              ; &cloptr7589428[0]
  %f7589433 = ptrtoint void(i64,i64)* @lam7586394 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589433, i64* %eptr7589429                                             ; store fptr
  %arg7582097 = ptrtoint i64* %cloptr7589428 to i64                                  ; closure cast; i64* -> i64
  %rva7584096 = add i64 0, 0                                                         ; quoted ()
  %rva7584095 = call i64 @prim_cons(i64 %arg7582097, i64 %rva7584096)                ; call prim_cons
  %cloptr7589434 = inttoptr i64 %a7581103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589435 = getelementptr inbounds i64, i64* %cloptr7589434, i64 0             ; &cloptr7589434[0]
  %f7589437 = load i64, i64* %i0ptr7589435, align 8                                  ; load; *i0ptr7589435
  %fptr7589436 = inttoptr i64 %f7589437 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589436(i64 %a7581103, i64 %rva7584095)             ; tail call
  ret void

else7589427:
  %arg7582105 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589438, i32 0, i32 0)); quoted string
  %retprim7581275 = call i64 @prim_halt(i64 %arg7582105)                             ; call prim_halt
  %cloptr7589439 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589441 = getelementptr inbounds i64, i64* %cloptr7589439, i64 1              ; &eptr7589441[1]
  %eptr7589442 = getelementptr inbounds i64, i64* %cloptr7589439, i64 2              ; &eptr7589442[2]
  %eptr7589443 = getelementptr inbounds i64, i64* %cloptr7589439, i64 3              ; &eptr7589443[3]
  store i64 %eox$l, i64* %eptr7589441                                                ; *eptr7589441 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589442                                  ; *eptr7589442 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589443                                          ; *eptr7589443 = %cont7581271
  %eptr7589440 = getelementptr inbounds i64, i64* %cloptr7589439, i64 0              ; &cloptr7589439[0]
  %f7589444 = ptrtoint void(i64,i64)* @lam7586401 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589444, i64* %eptr7589440                                             ; store fptr
  %arg7582108 = ptrtoint i64* %cloptr7589439 to i64                                  ; closure cast; i64* -> i64
  %arg7582107 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584106 = add i64 0, 0                                                         ; quoted ()
  %rva7584105 = call i64 @prim_cons(i64 %retprim7581275, i64 %rva7584106)            ; call prim_cons
  %rva7584104 = call i64 @prim_cons(i64 %arg7582107, i64 %rva7584105)                ; call prim_cons
  %cloptr7589445 = inttoptr i64 %arg7582108 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589446 = getelementptr inbounds i64, i64* %cloptr7589445, i64 0             ; &cloptr7589445[0]
  %f7589448 = load i64, i64* %i0ptr7589446, align 8                                  ; load; *i0ptr7589446
  %fptr7589447 = inttoptr i64 %f7589448 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589447(i64 %arg7582108, i64 %rva7584104)           ; tail call
  ret void
}


define void @lam7586401(i64 %env7586402, i64 %rvp7584103) {
  %envptr7589449 = inttoptr i64 %env7586402 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589450 = getelementptr inbounds i64, i64* %envptr7589449, i64 3            ; &envptr7589449[3]
  %cont7581271 = load i64, i64* %envptr7589450, align 8                              ; load; *envptr7589450
  %envptr7589451 = inttoptr i64 %env7586402 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589452 = getelementptr inbounds i64, i64* %envptr7589451, i64 2            ; &envptr7589451[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589452, align 8                      ; load; *envptr7589452
  %envptr7589453 = inttoptr i64 %env7586402 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589454 = getelementptr inbounds i64, i64* %envptr7589453, i64 1            ; &envptr7589453[1]
  %eox$l = load i64, i64* %envptr7589454, align 8                                    ; load; *envptr7589454
  %_957581273 = call i64 @prim_car(i64 %rvp7584103)                                  ; call prim_car
  %rvp7584102 = call i64 @prim_cdr(i64 %rvp7584103)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584102)                                    ; call prim_car
  %na7584098 = call i64 @prim_cdr(i64 %rvp7584102)                                   ; call prim_cdr
  %arg7582110 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582110, i64 %eox$l); call prim_vector_45set_33
  %arg7582113 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584101 = add i64 0, 0                                                         ; quoted ()
  %rva7584100 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584101)            ; call prim_cons
  %rva7584099 = call i64 @prim_cons(i64 %arg7582113, i64 %rva7584100)                ; call prim_cons
  %cloptr7589455 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589456 = getelementptr inbounds i64, i64* %cloptr7589455, i64 0             ; &cloptr7589455[0]
  %f7589458 = load i64, i64* %i0ptr7589456, align 8                                  ; load; *i0ptr7589456
  %fptr7589457 = inttoptr i64 %f7589458 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589457(i64 %cont7581271, i64 %rva7584099)          ; tail call
  ret void
}


define void @lam7586394(i64 %env7586395, i64 %rvp7584094) {
  %envptr7589459 = inttoptr i64 %env7586395 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589460 = getelementptr inbounds i64, i64* %envptr7589459, i64 3            ; &envptr7589459[3]
  %cont7581271 = load i64, i64* %envptr7589460, align 8                              ; load; *envptr7589460
  %envptr7589461 = inttoptr i64 %env7586395 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589462 = getelementptr inbounds i64, i64* %envptr7589461, i64 2            ; &envptr7589461[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589462, align 8                      ; load; *envptr7589462
  %envptr7589463 = inttoptr i64 %env7586395 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589464 = getelementptr inbounds i64, i64* %envptr7589463, i64 1            ; &envptr7589463[1]
  %eox$l = load i64, i64* %envptr7589464, align 8                                    ; load; *envptr7589464
  %_957581273 = call i64 @prim_car(i64 %rvp7584094)                                  ; call prim_car
  %rvp7584093 = call i64 @prim_cdr(i64 %rvp7584094)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584093)                                    ; call prim_car
  %na7584089 = call i64 @prim_cdr(i64 %rvp7584093)                                   ; call prim_cdr
  %arg7582100 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582100, i64 %eox$l); call prim_vector_45set_33
  %arg7582103 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584092 = add i64 0, 0                                                         ; quoted ()
  %rva7584091 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584092)            ; call prim_cons
  %rva7584090 = call i64 @prim_cons(i64 %arg7582103, i64 %rva7584091)                ; call prim_cons
  %cloptr7589465 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589466 = getelementptr inbounds i64, i64* %cloptr7589465, i64 0             ; &cloptr7589465[0]
  %f7589468 = load i64, i64* %i0ptr7589466, align 8                                  ; load; *i0ptr7589466
  %fptr7589467 = inttoptr i64 %f7589468 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589467(i64 %cont7581271, i64 %rva7584090)          ; tail call
  ret void
}


define void @lam7586385(i64 %env7586386, i64 %rvp7584082) {
  %envptr7589469 = inttoptr i64 %env7586386 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589470 = getelementptr inbounds i64, i64* %envptr7589469, i64 3            ; &envptr7589469[3]
  %cont7581271 = load i64, i64* %envptr7589470, align 8                              ; load; *envptr7589470
  %envptr7589471 = inttoptr i64 %env7586386 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589472 = getelementptr inbounds i64, i64* %envptr7589471, i64 2            ; &envptr7589471[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589472, align 8                      ; load; *envptr7589472
  %envptr7589473 = inttoptr i64 %env7586386 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589474 = getelementptr inbounds i64, i64* %envptr7589473, i64 1            ; &envptr7589473[1]
  %eox$l = load i64, i64* %envptr7589474, align 8                                    ; load; *envptr7589474
  %_957581272 = call i64 @prim_car(i64 %rvp7584082)                                  ; call prim_car
  %rvp7584081 = call i64 @prim_cdr(i64 %rvp7584082)                                  ; call prim_cdr
  %TO0$_95t = call i64 @prim_car(i64 %rvp7584081)                                    ; call prim_car
  %na7584061 = call i64 @prim_cdr(i64 %rvp7584081)                                   ; call prim_cdr
  %a7581099 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581100 = call i64 @prim_car(i64 %a7581099)                                      ; call prim_car
  %a7581101 = call i64 @prim_procedure_63(i64 %a7581100)                             ; call prim_procedure_63
  %cmp7589475 = icmp eq i64 %a7581101, 15                                            ; false?
  br i1 %cmp7589475, label %else7589477, label %then7589476                          ; if

then7589476:
  %a7581102 = call i64 @prim_car(i64 %eox$l)                                         ; call prim_car
  %a7581103 = call i64 @prim_car(i64 %a7581102)                                      ; call prim_car
  %cloptr7589478 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589480 = getelementptr inbounds i64, i64* %cloptr7589478, i64 1              ; &eptr7589480[1]
  %eptr7589481 = getelementptr inbounds i64, i64* %cloptr7589478, i64 2              ; &eptr7589481[2]
  %eptr7589482 = getelementptr inbounds i64, i64* %cloptr7589478, i64 3              ; &eptr7589482[3]
  store i64 %eox$l, i64* %eptr7589480                                                ; *eptr7589480 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589481                                  ; *eptr7589481 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589482                                          ; *eptr7589482 = %cont7581271
  %eptr7589479 = getelementptr inbounds i64, i64* %cloptr7589478, i64 0              ; &cloptr7589478[0]
  %f7589483 = ptrtoint void(i64,i64)* @lam7586375 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589483, i64* %eptr7589479                                             ; store fptr
  %arg7582070 = ptrtoint i64* %cloptr7589478 to i64                                  ; closure cast; i64* -> i64
  %rva7584070 = add i64 0, 0                                                         ; quoted ()
  %rva7584069 = call i64 @prim_cons(i64 %arg7582070, i64 %rva7584070)                ; call prim_cons
  %cloptr7589484 = inttoptr i64 %a7581103 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589485 = getelementptr inbounds i64, i64* %cloptr7589484, i64 0             ; &cloptr7589484[0]
  %f7589487 = load i64, i64* %i0ptr7589485, align 8                                  ; load; *i0ptr7589485
  %fptr7589486 = inttoptr i64 %f7589487 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589486(i64 %a7581103, i64 %rva7584069)             ; tail call
  ret void

else7589477:
  %arg7582078 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589488, i32 0, i32 0)); quoted string
  %retprim7581275 = call i64 @prim_halt(i64 %arg7582078)                             ; call prim_halt
  %cloptr7589489 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589491 = getelementptr inbounds i64, i64* %cloptr7589489, i64 1              ; &eptr7589491[1]
  %eptr7589492 = getelementptr inbounds i64, i64* %cloptr7589489, i64 2              ; &eptr7589492[2]
  %eptr7589493 = getelementptr inbounds i64, i64* %cloptr7589489, i64 3              ; &eptr7589493[3]
  store i64 %eox$l, i64* %eptr7589491                                                ; *eptr7589491 = %eox$l
  store i64 %CPS$_37wind_45stack, i64* %eptr7589492                                  ; *eptr7589492 = %CPS$_37wind_45stack
  store i64 %cont7581271, i64* %eptr7589493                                          ; *eptr7589493 = %cont7581271
  %eptr7589490 = getelementptr inbounds i64, i64* %cloptr7589489, i64 0              ; &cloptr7589489[0]
  %f7589494 = ptrtoint void(i64,i64)* @lam7586382 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589494, i64* %eptr7589490                                             ; store fptr
  %arg7582081 = ptrtoint i64* %cloptr7589489 to i64                                  ; closure cast; i64* -> i64
  %arg7582080 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584080 = add i64 0, 0                                                         ; quoted ()
  %rva7584079 = call i64 @prim_cons(i64 %retprim7581275, i64 %rva7584080)            ; call prim_cons
  %rva7584078 = call i64 @prim_cons(i64 %arg7582080, i64 %rva7584079)                ; call prim_cons
  %cloptr7589495 = inttoptr i64 %arg7582081 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589496 = getelementptr inbounds i64, i64* %cloptr7589495, i64 0             ; &cloptr7589495[0]
  %f7589498 = load i64, i64* %i0ptr7589496, align 8                                  ; load; *i0ptr7589496
  %fptr7589497 = inttoptr i64 %f7589498 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589497(i64 %arg7582081, i64 %rva7584078)           ; tail call
  ret void
}


define void @lam7586382(i64 %env7586383, i64 %rvp7584077) {
  %envptr7589499 = inttoptr i64 %env7586383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589500 = getelementptr inbounds i64, i64* %envptr7589499, i64 3            ; &envptr7589499[3]
  %cont7581271 = load i64, i64* %envptr7589500, align 8                              ; load; *envptr7589500
  %envptr7589501 = inttoptr i64 %env7586383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589502 = getelementptr inbounds i64, i64* %envptr7589501, i64 2            ; &envptr7589501[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589502, align 8                      ; load; *envptr7589502
  %envptr7589503 = inttoptr i64 %env7586383 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589504 = getelementptr inbounds i64, i64* %envptr7589503, i64 1            ; &envptr7589503[1]
  %eox$l = load i64, i64* %envptr7589504, align 8                                    ; load; *envptr7589504
  %_957581273 = call i64 @prim_car(i64 %rvp7584077)                                  ; call prim_car
  %rvp7584076 = call i64 @prim_cdr(i64 %rvp7584077)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584076)                                    ; call prim_car
  %na7584072 = call i64 @prim_cdr(i64 %rvp7584076)                                   ; call prim_cdr
  %arg7582083 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582083, i64 %eox$l); call prim_vector_45set_33
  %arg7582086 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584075 = add i64 0, 0                                                         ; quoted ()
  %rva7584074 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584075)            ; call prim_cons
  %rva7584073 = call i64 @prim_cons(i64 %arg7582086, i64 %rva7584074)                ; call prim_cons
  %cloptr7589505 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589506 = getelementptr inbounds i64, i64* %cloptr7589505, i64 0             ; &cloptr7589505[0]
  %f7589508 = load i64, i64* %i0ptr7589506, align 8                                  ; load; *i0ptr7589506
  %fptr7589507 = inttoptr i64 %f7589508 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589507(i64 %cont7581271, i64 %rva7584073)          ; tail call
  ret void
}


define void @lam7586375(i64 %env7586376, i64 %rvp7584068) {
  %envptr7589509 = inttoptr i64 %env7586376 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589510 = getelementptr inbounds i64, i64* %envptr7589509, i64 3            ; &envptr7589509[3]
  %cont7581271 = load i64, i64* %envptr7589510, align 8                              ; load; *envptr7589510
  %envptr7589511 = inttoptr i64 %env7586376 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589512 = getelementptr inbounds i64, i64* %envptr7589511, i64 2            ; &envptr7589511[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589512, align 8                      ; load; *envptr7589512
  %envptr7589513 = inttoptr i64 %env7586376 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589514 = getelementptr inbounds i64, i64* %envptr7589513, i64 1            ; &envptr7589513[1]
  %eox$l = load i64, i64* %envptr7589514, align 8                                    ; load; *envptr7589514
  %_957581273 = call i64 @prim_car(i64 %rvp7584068)                                  ; call prim_car
  %rvp7584067 = call i64 @prim_cdr(i64 %rvp7584068)                                  ; call prim_cdr
  %EtB$_95t = call i64 @prim_car(i64 %rvp7584067)                                    ; call prim_car
  %na7584063 = call i64 @prim_cdr(i64 %rvp7584067)                                   ; call prim_cdr
  %arg7582073 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581274 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582073, i64 %eox$l); call prim_vector_45set_33
  %arg7582076 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584066 = add i64 0, 0                                                         ; quoted ()
  %rva7584065 = call i64 @prim_cons(i64 %retprim7581274, i64 %rva7584066)            ; call prim_cons
  %rva7584064 = call i64 @prim_cons(i64 %arg7582076, i64 %rva7584065)                ; call prim_cons
  %cloptr7589515 = inttoptr i64 %cont7581271 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589516 = getelementptr inbounds i64, i64* %cloptr7589515, i64 0             ; &cloptr7589515[0]
  %f7589518 = load i64, i64* %i0ptr7589516, align 8                                  ; load; *i0ptr7589516
  %fptr7589517 = inttoptr i64 %f7589518 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589517(i64 %cont7581271, i64 %rva7584064)          ; tail call
  ret void
}


define void @lam7586353(i64 %env7586354, i64 %rvp7584645) {
  %envptr7589519 = inttoptr i64 %env7586354 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589520 = getelementptr inbounds i64, i64* %envptr7589519, i64 1            ; &envptr7589519[1]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589520, align 8                      ; load; *envptr7589520
  %cont7581298 = call i64 @prim_car(i64 %rvp7584645)                                 ; call prim_car
  %rvp7584644 = call i64 @prim_cdr(i64 %rvp7584645)                                  ; call prim_cdr
  %Q7p$pre = call i64 @prim_car(i64 %rvp7584644)                                     ; call prim_car
  %rvp7584643 = call i64 @prim_cdr(i64 %rvp7584644)                                  ; call prim_cdr
  %Ky7$body = call i64 @prim_car(i64 %rvp7584643)                                    ; call prim_car
  %rvp7584642 = call i64 @prim_cdr(i64 %rvp7584643)                                  ; call prim_cdr
  %uhr$post = call i64 @prim_car(i64 %rvp7584642)                                    ; call prim_car
  %na7584484 = call i64 @prim_cdr(i64 %rvp7584642)                                   ; call prim_cdr
  %a7581107 = call i64 @prim_procedure_63(i64 %Q7p$pre)                              ; call prim_procedure_63
  %cmp7589521 = icmp eq i64 %a7581107, 15                                            ; false?
  br i1 %cmp7589521, label %else7589523, label %then7589522                          ; if

then7589522:
  %cloptr7589524 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7589526 = getelementptr inbounds i64, i64* %cloptr7589524, i64 1              ; &eptr7589526[1]
  %eptr7589527 = getelementptr inbounds i64, i64* %cloptr7589524, i64 2              ; &eptr7589527[2]
  %eptr7589528 = getelementptr inbounds i64, i64* %cloptr7589524, i64 3              ; &eptr7589528[3]
  %eptr7589529 = getelementptr inbounds i64, i64* %cloptr7589524, i64 4              ; &eptr7589529[4]
  %eptr7589530 = getelementptr inbounds i64, i64* %cloptr7589524, i64 5              ; &eptr7589530[5]
  store i64 %Ky7$body, i64* %eptr7589526                                             ; *eptr7589526 = %Ky7$body
  store i64 %uhr$post, i64* %eptr7589527                                             ; *eptr7589527 = %uhr$post
  store i64 %Q7p$pre, i64* %eptr7589528                                              ; *eptr7589528 = %Q7p$pre
  store i64 %CPS$_37wind_45stack, i64* %eptr7589529                                  ; *eptr7589529 = %CPS$_37wind_45stack
  store i64 %cont7581298, i64* %eptr7589530                                          ; *eptr7589530 = %cont7581298
  %eptr7589525 = getelementptr inbounds i64, i64* %cloptr7589524, i64 0              ; &cloptr7589524[0]
  %f7589531 = ptrtoint void(i64,i64)* @lam7586296 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589531, i64* %eptr7589525                                             ; store fptr
  %arg7582500 = ptrtoint i64* %cloptr7589524 to i64                                  ; closure cast; i64* -> i64
  %rva7584562 = add i64 0, 0                                                         ; quoted ()
  %rva7584561 = call i64 @prim_cons(i64 %arg7582500, i64 %rva7584562)                ; call prim_cons
  %cloptr7589532 = inttoptr i64 %Q7p$pre to i64*                                     ; closure/env cast; i64 -> i64*
  %i0ptr7589533 = getelementptr inbounds i64, i64* %cloptr7589532, i64 0             ; &cloptr7589532[0]
  %f7589535 = load i64, i64* %i0ptr7589533, align 8                                  ; load; *i0ptr7589533
  %fptr7589534 = inttoptr i64 %f7589535 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589534(i64 %Q7p$pre, i64 %rva7584561)              ; tail call
  ret void

else7589523:
  %arg7582565 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589536, i32 0, i32 0)); quoted string
  %retprim7581308 = call i64 @prim_halt(i64 %arg7582565)                             ; call prim_halt
  %cloptr7589537 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7589539 = getelementptr inbounds i64, i64* %cloptr7589537, i64 1              ; &eptr7589539[1]
  %eptr7589540 = getelementptr inbounds i64, i64* %cloptr7589537, i64 2              ; &eptr7589540[2]
  %eptr7589541 = getelementptr inbounds i64, i64* %cloptr7589537, i64 3              ; &eptr7589541[3]
  %eptr7589542 = getelementptr inbounds i64, i64* %cloptr7589537, i64 4              ; &eptr7589542[4]
  %eptr7589543 = getelementptr inbounds i64, i64* %cloptr7589537, i64 5              ; &eptr7589543[5]
  store i64 %Ky7$body, i64* %eptr7589539                                             ; *eptr7589539 = %Ky7$body
  store i64 %uhr$post, i64* %eptr7589540                                             ; *eptr7589540 = %uhr$post
  store i64 %Q7p$pre, i64* %eptr7589541                                              ; *eptr7589541 = %Q7p$pre
  store i64 %CPS$_37wind_45stack, i64* %eptr7589542                                  ; *eptr7589542 = %CPS$_37wind_45stack
  store i64 %cont7581298, i64* %eptr7589543                                          ; *eptr7589543 = %cont7581298
  %eptr7589538 = getelementptr inbounds i64, i64* %cloptr7589537, i64 0              ; &cloptr7589537[0]
  %f7589544 = ptrtoint void(i64,i64)* @lam7586350 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589544, i64* %eptr7589538                                             ; store fptr
  %arg7582568 = ptrtoint i64* %cloptr7589537 to i64                                  ; closure cast; i64* -> i64
  %arg7582567 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584641 = add i64 0, 0                                                         ; quoted ()
  %rva7584640 = call i64 @prim_cons(i64 %retprim7581308, i64 %rva7584641)            ; call prim_cons
  %rva7584639 = call i64 @prim_cons(i64 %arg7582567, i64 %rva7584640)                ; call prim_cons
  %cloptr7589545 = inttoptr i64 %arg7582568 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589546 = getelementptr inbounds i64, i64* %cloptr7589545, i64 0             ; &cloptr7589545[0]
  %f7589548 = load i64, i64* %i0ptr7589546, align 8                                  ; load; *i0ptr7589546
  %fptr7589547 = inttoptr i64 %f7589548 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589547(i64 %arg7582568, i64 %rva7584639)           ; tail call
  ret void
}


define void @lam7586350(i64 %env7586351, i64 %rvp7584638) {
  %envptr7589549 = inttoptr i64 %env7586351 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589550 = getelementptr inbounds i64, i64* %envptr7589549, i64 5            ; &envptr7589549[5]
  %cont7581298 = load i64, i64* %envptr7589550, align 8                              ; load; *envptr7589550
  %envptr7589551 = inttoptr i64 %env7586351 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589552 = getelementptr inbounds i64, i64* %envptr7589551, i64 4            ; &envptr7589551[4]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589552, align 8                      ; load; *envptr7589552
  %envptr7589553 = inttoptr i64 %env7586351 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589554 = getelementptr inbounds i64, i64* %envptr7589553, i64 3            ; &envptr7589553[3]
  %Q7p$pre = load i64, i64* %envptr7589554, align 8                                  ; load; *envptr7589554
  %envptr7589555 = inttoptr i64 %env7586351 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589556 = getelementptr inbounds i64, i64* %envptr7589555, i64 2            ; &envptr7589555[2]
  %uhr$post = load i64, i64* %envptr7589556, align 8                                 ; load; *envptr7589556
  %envptr7589557 = inttoptr i64 %env7586351 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589558 = getelementptr inbounds i64, i64* %envptr7589557, i64 1            ; &envptr7589557[1]
  %Ky7$body = load i64, i64* %envptr7589558, align 8                                 ; load; *envptr7589558
  %_957581299 = call i64 @prim_car(i64 %rvp7584638)                                  ; call prim_car
  %rvp7584637 = call i64 @prim_cdr(i64 %rvp7584638)                                  ; call prim_cdr
  %TL2$_95t = call i64 @prim_car(i64 %rvp7584637)                                    ; call prim_car
  %na7584564 = call i64 @prim_cdr(i64 %rvp7584637)                                   ; call prim_cdr
  %a7581108 = call i64 @prim_cons(i64 %Q7p$pre, i64 %uhr$post)                       ; call prim_cons
  %arg7582571 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581109 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7582571) ; call prim_vector_45ref
  %a7581110 = call i64 @prim_cons(i64 %a7581108, i64 %a7581109)                      ; call prim_cons
  %arg7582576 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581307 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582576, i64 %a7581110); call prim_vector_45set_33
  %cloptr7589559 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7589561 = getelementptr inbounds i64, i64* %cloptr7589559, i64 1              ; &eptr7589561[1]
  %eptr7589562 = getelementptr inbounds i64, i64* %cloptr7589559, i64 2              ; &eptr7589562[2]
  %eptr7589563 = getelementptr inbounds i64, i64* %cloptr7589559, i64 3              ; &eptr7589563[3]
  %eptr7589564 = getelementptr inbounds i64, i64* %cloptr7589559, i64 4              ; &eptr7589564[4]
  store i64 %Ky7$body, i64* %eptr7589561                                             ; *eptr7589561 = %Ky7$body
  store i64 %uhr$post, i64* %eptr7589562                                             ; *eptr7589562 = %uhr$post
  store i64 %CPS$_37wind_45stack, i64* %eptr7589563                                  ; *eptr7589563 = %CPS$_37wind_45stack
  store i64 %cont7581298, i64* %eptr7589564                                          ; *eptr7589564 = %cont7581298
  %eptr7589560 = getelementptr inbounds i64, i64* %cloptr7589559, i64 0              ; &cloptr7589559[0]
  %f7589565 = ptrtoint void(i64,i64)* @lam7586346 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589565, i64* %eptr7589560                                             ; store fptr
  %arg7582580 = ptrtoint i64* %cloptr7589559 to i64                                  ; closure cast; i64* -> i64
  %arg7582579 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584636 = add i64 0, 0                                                         ; quoted ()
  %rva7584635 = call i64 @prim_cons(i64 %retprim7581307, i64 %rva7584636)            ; call prim_cons
  %rva7584634 = call i64 @prim_cons(i64 %arg7582579, i64 %rva7584635)                ; call prim_cons
  %cloptr7589566 = inttoptr i64 %arg7582580 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589567 = getelementptr inbounds i64, i64* %cloptr7589566, i64 0             ; &cloptr7589566[0]
  %f7589569 = load i64, i64* %i0ptr7589567, align 8                                  ; load; *i0ptr7589567
  %fptr7589568 = inttoptr i64 %f7589569 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589568(i64 %arg7582580, i64 %rva7584634)           ; tail call
  ret void
}


define void @lam7586346(i64 %env7586347, i64 %rvp7584633) {
  %envptr7589570 = inttoptr i64 %env7586347 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589571 = getelementptr inbounds i64, i64* %envptr7589570, i64 4            ; &envptr7589570[4]
  %cont7581298 = load i64, i64* %envptr7589571, align 8                              ; load; *envptr7589571
  %envptr7589572 = inttoptr i64 %env7586347 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589573 = getelementptr inbounds i64, i64* %envptr7589572, i64 3            ; &envptr7589572[3]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589573, align 8                      ; load; *envptr7589573
  %envptr7589574 = inttoptr i64 %env7586347 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589575 = getelementptr inbounds i64, i64* %envptr7589574, i64 2            ; &envptr7589574[2]
  %uhr$post = load i64, i64* %envptr7589575, align 8                                 ; load; *envptr7589575
  %envptr7589576 = inttoptr i64 %env7586347 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589577 = getelementptr inbounds i64, i64* %envptr7589576, i64 1            ; &envptr7589576[1]
  %Ky7$body = load i64, i64* %envptr7589577, align 8                                 ; load; *envptr7589577
  %_957581300 = call i64 @prim_car(i64 %rvp7584633)                                  ; call prim_car
  %rvp7584632 = call i64 @prim_cdr(i64 %rvp7584633)                                  ; call prim_cdr
  %yFi$_95t = call i64 @prim_car(i64 %rvp7584632)                                    ; call prim_car
  %na7584566 = call i64 @prim_cdr(i64 %rvp7584632)                                   ; call prim_cdr
  %a7581111 = call i64 @prim_procedure_63(i64 %Ky7$body)                             ; call prim_procedure_63
  %cmp7589578 = icmp eq i64 %a7581111, 15                                            ; false?
  br i1 %cmp7589578, label %else7589580, label %then7589579                          ; if

then7589579:
  %cloptr7589581 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589583 = getelementptr inbounds i64, i64* %cloptr7589581, i64 1              ; &eptr7589583[1]
  %eptr7589584 = getelementptr inbounds i64, i64* %cloptr7589581, i64 2              ; &eptr7589584[2]
  %eptr7589585 = getelementptr inbounds i64, i64* %cloptr7589581, i64 3              ; &eptr7589585[3]
  store i64 %uhr$post, i64* %eptr7589583                                             ; *eptr7589583 = %uhr$post
  store i64 %CPS$_37wind_45stack, i64* %eptr7589584                                  ; *eptr7589584 = %CPS$_37wind_45stack
  store i64 %cont7581298, i64* %eptr7589585                                          ; *eptr7589585 = %cont7581298
  %eptr7589582 = getelementptr inbounds i64, i64* %cloptr7589581, i64 0              ; &cloptr7589581[0]
  %f7589586 = ptrtoint void(i64,i64)* @lam7586321 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589586, i64* %eptr7589582                                             ; store fptr
  %arg7582582 = ptrtoint i64* %cloptr7589581 to i64                                  ; closure cast; i64* -> i64
  %rva7584598 = add i64 0, 0                                                         ; quoted ()
  %rva7584597 = call i64 @prim_cons(i64 %arg7582582, i64 %rva7584598)                ; call prim_cons
  %cloptr7589587 = inttoptr i64 %Ky7$body to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589588 = getelementptr inbounds i64, i64* %cloptr7589587, i64 0             ; &cloptr7589587[0]
  %f7589590 = load i64, i64* %i0ptr7589588, align 8                                  ; load; *i0ptr7589588
  %fptr7589589 = inttoptr i64 %f7589590 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589589(i64 %Ky7$body, i64 %rva7584597)             ; tail call
  ret void

else7589580:
  %arg7582606 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589591, i32 0, i32 0)); quoted string
  %retprim7581306 = call i64 @prim_halt(i64 %arg7582606)                             ; call prim_halt
  %cloptr7589592 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589594 = getelementptr inbounds i64, i64* %cloptr7589592, i64 1              ; &eptr7589594[1]
  %eptr7589595 = getelementptr inbounds i64, i64* %cloptr7589592, i64 2              ; &eptr7589595[2]
  %eptr7589596 = getelementptr inbounds i64, i64* %cloptr7589592, i64 3              ; &eptr7589596[3]
  store i64 %uhr$post, i64* %eptr7589594                                             ; *eptr7589594 = %uhr$post
  store i64 %CPS$_37wind_45stack, i64* %eptr7589595                                  ; *eptr7589595 = %CPS$_37wind_45stack
  store i64 %cont7581298, i64* %eptr7589596                                          ; *eptr7589596 = %cont7581298
  %eptr7589593 = getelementptr inbounds i64, i64* %cloptr7589592, i64 0              ; &cloptr7589592[0]
  %f7589597 = ptrtoint void(i64,i64)* @lam7586343 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589597, i64* %eptr7589593                                             ; store fptr
  %arg7582609 = ptrtoint i64* %cloptr7589592 to i64                                  ; closure cast; i64* -> i64
  %arg7582608 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584631 = add i64 0, 0                                                         ; quoted ()
  %rva7584630 = call i64 @prim_cons(i64 %retprim7581306, i64 %rva7584631)            ; call prim_cons
  %rva7584629 = call i64 @prim_cons(i64 %arg7582608, i64 %rva7584630)                ; call prim_cons
  %cloptr7589598 = inttoptr i64 %arg7582609 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589599 = getelementptr inbounds i64, i64* %cloptr7589598, i64 0             ; &cloptr7589598[0]
  %f7589601 = load i64, i64* %i0ptr7589599, align 8                                  ; load; *i0ptr7589599
  %fptr7589600 = inttoptr i64 %f7589601 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589600(i64 %arg7582609, i64 %rva7584629)           ; tail call
  ret void
}


define void @lam7586343(i64 %env7586344, i64 %rvp7584628) {
  %envptr7589602 = inttoptr i64 %env7586344 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589603 = getelementptr inbounds i64, i64* %envptr7589602, i64 3            ; &envptr7589602[3]
  %cont7581298 = load i64, i64* %envptr7589603, align 8                              ; load; *envptr7589603
  %envptr7589604 = inttoptr i64 %env7586344 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589605 = getelementptr inbounds i64, i64* %envptr7589604, i64 2            ; &envptr7589604[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589605, align 8                      ; load; *envptr7589605
  %envptr7589606 = inttoptr i64 %env7586344 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589607 = getelementptr inbounds i64, i64* %envptr7589606, i64 1            ; &envptr7589606[1]
  %uhr$post = load i64, i64* %envptr7589607, align 8                                 ; load; *envptr7589607
  %_957581301 = call i64 @prim_car(i64 %rvp7584628)                                  ; call prim_car
  %rvp7584627 = call i64 @prim_cdr(i64 %rvp7584628)                                  ; call prim_cdr
  %hKD$v = call i64 @prim_car(i64 %rvp7584627)                                       ; call prim_car
  %na7584600 = call i64 @prim_cdr(i64 %rvp7584627)                                   ; call prim_cdr
  %arg7582610 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581112 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7582610) ; call prim_vector_45ref
  %a7581113 = call i64 @prim_cdr(i64 %a7581112)                                      ; call prim_cdr
  %arg7582614 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581305 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582614, i64 %a7581113); call prim_vector_45set_33
  %cloptr7589608 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589610 = getelementptr inbounds i64, i64* %cloptr7589608, i64 1              ; &eptr7589610[1]
  %eptr7589611 = getelementptr inbounds i64, i64* %cloptr7589608, i64 2              ; &eptr7589611[2]
  %eptr7589612 = getelementptr inbounds i64, i64* %cloptr7589608, i64 3              ; &eptr7589612[3]
  store i64 %uhr$post, i64* %eptr7589610                                             ; *eptr7589610 = %uhr$post
  store i64 %hKD$v, i64* %eptr7589611                                                ; *eptr7589611 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589612                                          ; *eptr7589612 = %cont7581298
  %eptr7589609 = getelementptr inbounds i64, i64* %cloptr7589608, i64 0              ; &cloptr7589608[0]
  %f7589613 = ptrtoint void(i64,i64)* @lam7586339 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589613, i64* %eptr7589609                                             ; store fptr
  %arg7582618 = ptrtoint i64* %cloptr7589608 to i64                                  ; closure cast; i64* -> i64
  %arg7582617 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584626 = add i64 0, 0                                                         ; quoted ()
  %rva7584625 = call i64 @prim_cons(i64 %retprim7581305, i64 %rva7584626)            ; call prim_cons
  %rva7584624 = call i64 @prim_cons(i64 %arg7582617, i64 %rva7584625)                ; call prim_cons
  %cloptr7589614 = inttoptr i64 %arg7582618 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589615 = getelementptr inbounds i64, i64* %cloptr7589614, i64 0             ; &cloptr7589614[0]
  %f7589617 = load i64, i64* %i0ptr7589615, align 8                                  ; load; *i0ptr7589615
  %fptr7589616 = inttoptr i64 %f7589617 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589616(i64 %arg7582618, i64 %rva7584624)           ; tail call
  ret void
}


define void @lam7586339(i64 %env7586340, i64 %rvp7584623) {
  %envptr7589618 = inttoptr i64 %env7586340 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589619 = getelementptr inbounds i64, i64* %envptr7589618, i64 3            ; &envptr7589618[3]
  %cont7581298 = load i64, i64* %envptr7589619, align 8                              ; load; *envptr7589619
  %envptr7589620 = inttoptr i64 %env7586340 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589621 = getelementptr inbounds i64, i64* %envptr7589620, i64 2            ; &envptr7589620[2]
  %hKD$v = load i64, i64* %envptr7589621, align 8                                    ; load; *envptr7589621
  %envptr7589622 = inttoptr i64 %env7586340 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589623 = getelementptr inbounds i64, i64* %envptr7589622, i64 1            ; &envptr7589622[1]
  %uhr$post = load i64, i64* %envptr7589623, align 8                                 ; load; *envptr7589623
  %_957581302 = call i64 @prim_car(i64 %rvp7584623)                                  ; call prim_car
  %rvp7584622 = call i64 @prim_cdr(i64 %rvp7584623)                                  ; call prim_cdr
  %nhy$_95t = call i64 @prim_car(i64 %rvp7584622)                                    ; call prim_car
  %na7584602 = call i64 @prim_cdr(i64 %rvp7584622)                                   ; call prim_cdr
  %a7581114 = call i64 @prim_procedure_63(i64 %uhr$post)                             ; call prim_procedure_63
  %cmp7589624 = icmp eq i64 %a7581114, 15                                            ; false?
  br i1 %cmp7589624, label %else7589626, label %then7589625                          ; if

then7589625:
  %cloptr7589627 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7589629 = getelementptr inbounds i64, i64* %cloptr7589627, i64 1              ; &eptr7589629[1]
  %eptr7589630 = getelementptr inbounds i64, i64* %cloptr7589627, i64 2              ; &eptr7589630[2]
  store i64 %hKD$v, i64* %eptr7589629                                                ; *eptr7589629 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589630                                          ; *eptr7589630 = %cont7581298
  %eptr7589628 = getelementptr inbounds i64, i64* %cloptr7589627, i64 0              ; &cloptr7589627[0]
  %f7589631 = ptrtoint void(i64,i64)* @lam7586330 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589631, i64* %eptr7589628                                             ; store fptr
  %arg7582620 = ptrtoint i64* %cloptr7589627 to i64                                  ; closure cast; i64* -> i64
  %rva7584611 = add i64 0, 0                                                         ; quoted ()
  %rva7584610 = call i64 @prim_cons(i64 %arg7582620, i64 %rva7584611)                ; call prim_cons
  %cloptr7589632 = inttoptr i64 %uhr$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589633 = getelementptr inbounds i64, i64* %cloptr7589632, i64 0             ; &cloptr7589632[0]
  %f7589635 = load i64, i64* %i0ptr7589633, align 8                                  ; load; *i0ptr7589633
  %fptr7589634 = inttoptr i64 %f7589635 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589634(i64 %uhr$post, i64 %rva7584610)             ; tail call
  ret void

else7589626:
  %arg7582625 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589636, i32 0, i32 0)); quoted string
  %retprim7581304 = call i64 @prim_halt(i64 %arg7582625)                             ; call prim_halt
  %cloptr7589637 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7589639 = getelementptr inbounds i64, i64* %cloptr7589637, i64 1              ; &eptr7589639[1]
  %eptr7589640 = getelementptr inbounds i64, i64* %cloptr7589637, i64 2              ; &eptr7589640[2]
  store i64 %hKD$v, i64* %eptr7589639                                                ; *eptr7589639 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589640                                          ; *eptr7589640 = %cont7581298
  %eptr7589638 = getelementptr inbounds i64, i64* %cloptr7589637, i64 0              ; &cloptr7589637[0]
  %f7589641 = ptrtoint void(i64,i64)* @lam7586336 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589641, i64* %eptr7589638                                             ; store fptr
  %arg7582628 = ptrtoint i64* %cloptr7589637 to i64                                  ; closure cast; i64* -> i64
  %arg7582627 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584621 = add i64 0, 0                                                         ; quoted ()
  %rva7584620 = call i64 @prim_cons(i64 %retprim7581304, i64 %rva7584621)            ; call prim_cons
  %rva7584619 = call i64 @prim_cons(i64 %arg7582627, i64 %rva7584620)                ; call prim_cons
  %cloptr7589642 = inttoptr i64 %arg7582628 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589643 = getelementptr inbounds i64, i64* %cloptr7589642, i64 0             ; &cloptr7589642[0]
  %f7589645 = load i64, i64* %i0ptr7589643, align 8                                  ; load; *i0ptr7589643
  %fptr7589644 = inttoptr i64 %f7589645 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589644(i64 %arg7582628, i64 %rva7584619)           ; tail call
  ret void
}


define void @lam7586336(i64 %env7586337, i64 %rvp7584618) {
  %envptr7589646 = inttoptr i64 %env7586337 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589647 = getelementptr inbounds i64, i64* %envptr7589646, i64 2            ; &envptr7589646[2]
  %cont7581298 = load i64, i64* %envptr7589647, align 8                              ; load; *envptr7589647
  %envptr7589648 = inttoptr i64 %env7586337 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589649 = getelementptr inbounds i64, i64* %envptr7589648, i64 1            ; &envptr7589648[1]
  %hKD$v = load i64, i64* %envptr7589649, align 8                                    ; load; *envptr7589649
  %_957581303 = call i64 @prim_car(i64 %rvp7584618)                                  ; call prim_car
  %rvp7584617 = call i64 @prim_cdr(i64 %rvp7584618)                                  ; call prim_cdr
  %m1n$_95t = call i64 @prim_car(i64 %rvp7584617)                                    ; call prim_car
  %na7584613 = call i64 @prim_cdr(i64 %rvp7584617)                                   ; call prim_cdr
  %arg7582630 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584616 = add i64 0, 0                                                         ; quoted ()
  %rva7584615 = call i64 @prim_cons(i64 %hKD$v, i64 %rva7584616)                     ; call prim_cons
  %rva7584614 = call i64 @prim_cons(i64 %arg7582630, i64 %rva7584615)                ; call prim_cons
  %cloptr7589650 = inttoptr i64 %cont7581298 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589651 = getelementptr inbounds i64, i64* %cloptr7589650, i64 0             ; &cloptr7589650[0]
  %f7589653 = load i64, i64* %i0ptr7589651, align 8                                  ; load; *i0ptr7589651
  %fptr7589652 = inttoptr i64 %f7589653 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589652(i64 %cont7581298, i64 %rva7584614)          ; tail call
  ret void
}


define void @lam7586330(i64 %env7586331, i64 %rvp7584609) {
  %envptr7589654 = inttoptr i64 %env7586331 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589655 = getelementptr inbounds i64, i64* %envptr7589654, i64 2            ; &envptr7589654[2]
  %cont7581298 = load i64, i64* %envptr7589655, align 8                              ; load; *envptr7589655
  %envptr7589656 = inttoptr i64 %env7586331 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589657 = getelementptr inbounds i64, i64* %envptr7589656, i64 1            ; &envptr7589656[1]
  %hKD$v = load i64, i64* %envptr7589657, align 8                                    ; load; *envptr7589657
  %_957581303 = call i64 @prim_car(i64 %rvp7584609)                                  ; call prim_car
  %rvp7584608 = call i64 @prim_cdr(i64 %rvp7584609)                                  ; call prim_cdr
  %m1n$_95t = call i64 @prim_car(i64 %rvp7584608)                                    ; call prim_car
  %na7584604 = call i64 @prim_cdr(i64 %rvp7584608)                                   ; call prim_cdr
  %arg7582623 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584607 = add i64 0, 0                                                         ; quoted ()
  %rva7584606 = call i64 @prim_cons(i64 %hKD$v, i64 %rva7584607)                     ; call prim_cons
  %rva7584605 = call i64 @prim_cons(i64 %arg7582623, i64 %rva7584606)                ; call prim_cons
  %cloptr7589658 = inttoptr i64 %cont7581298 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589659 = getelementptr inbounds i64, i64* %cloptr7589658, i64 0             ; &cloptr7589658[0]
  %f7589661 = load i64, i64* %i0ptr7589659, align 8                                  ; load; *i0ptr7589659
  %fptr7589660 = inttoptr i64 %f7589661 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589660(i64 %cont7581298, i64 %rva7584605)          ; tail call
  ret void
}


define void @lam7586321(i64 %env7586322, i64 %rvp7584596) {
  %envptr7589662 = inttoptr i64 %env7586322 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589663 = getelementptr inbounds i64, i64* %envptr7589662, i64 3            ; &envptr7589662[3]
  %cont7581298 = load i64, i64* %envptr7589663, align 8                              ; load; *envptr7589663
  %envptr7589664 = inttoptr i64 %env7586322 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589665 = getelementptr inbounds i64, i64* %envptr7589664, i64 2            ; &envptr7589664[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589665, align 8                      ; load; *envptr7589665
  %envptr7589666 = inttoptr i64 %env7586322 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589667 = getelementptr inbounds i64, i64* %envptr7589666, i64 1            ; &envptr7589666[1]
  %uhr$post = load i64, i64* %envptr7589667, align 8                                 ; load; *envptr7589667
  %_957581301 = call i64 @prim_car(i64 %rvp7584596)                                  ; call prim_car
  %rvp7584595 = call i64 @prim_cdr(i64 %rvp7584596)                                  ; call prim_cdr
  %hKD$v = call i64 @prim_car(i64 %rvp7584595)                                       ; call prim_car
  %na7584568 = call i64 @prim_cdr(i64 %rvp7584595)                                   ; call prim_cdr
  %arg7582584 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581112 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7582584) ; call prim_vector_45ref
  %a7581113 = call i64 @prim_cdr(i64 %a7581112)                                      ; call prim_cdr
  %arg7582588 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581305 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582588, i64 %a7581113); call prim_vector_45set_33
  %cloptr7589668 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589670 = getelementptr inbounds i64, i64* %cloptr7589668, i64 1              ; &eptr7589670[1]
  %eptr7589671 = getelementptr inbounds i64, i64* %cloptr7589668, i64 2              ; &eptr7589671[2]
  %eptr7589672 = getelementptr inbounds i64, i64* %cloptr7589668, i64 3              ; &eptr7589672[3]
  store i64 %uhr$post, i64* %eptr7589670                                             ; *eptr7589670 = %uhr$post
  store i64 %hKD$v, i64* %eptr7589671                                                ; *eptr7589671 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589672                                          ; *eptr7589672 = %cont7581298
  %eptr7589669 = getelementptr inbounds i64, i64* %cloptr7589668, i64 0              ; &cloptr7589668[0]
  %f7589673 = ptrtoint void(i64,i64)* @lam7586317 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589673, i64* %eptr7589669                                             ; store fptr
  %arg7582592 = ptrtoint i64* %cloptr7589668 to i64                                  ; closure cast; i64* -> i64
  %arg7582591 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584594 = add i64 0, 0                                                         ; quoted ()
  %rva7584593 = call i64 @prim_cons(i64 %retprim7581305, i64 %rva7584594)            ; call prim_cons
  %rva7584592 = call i64 @prim_cons(i64 %arg7582591, i64 %rva7584593)                ; call prim_cons
  %cloptr7589674 = inttoptr i64 %arg7582592 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589675 = getelementptr inbounds i64, i64* %cloptr7589674, i64 0             ; &cloptr7589674[0]
  %f7589677 = load i64, i64* %i0ptr7589675, align 8                                  ; load; *i0ptr7589675
  %fptr7589676 = inttoptr i64 %f7589677 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589676(i64 %arg7582592, i64 %rva7584592)           ; tail call
  ret void
}


define void @lam7586317(i64 %env7586318, i64 %rvp7584591) {
  %envptr7589678 = inttoptr i64 %env7586318 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589679 = getelementptr inbounds i64, i64* %envptr7589678, i64 3            ; &envptr7589678[3]
  %cont7581298 = load i64, i64* %envptr7589679, align 8                              ; load; *envptr7589679
  %envptr7589680 = inttoptr i64 %env7586318 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589681 = getelementptr inbounds i64, i64* %envptr7589680, i64 2            ; &envptr7589680[2]
  %hKD$v = load i64, i64* %envptr7589681, align 8                                    ; load; *envptr7589681
  %envptr7589682 = inttoptr i64 %env7586318 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589683 = getelementptr inbounds i64, i64* %envptr7589682, i64 1            ; &envptr7589682[1]
  %uhr$post = load i64, i64* %envptr7589683, align 8                                 ; load; *envptr7589683
  %_957581302 = call i64 @prim_car(i64 %rvp7584591)                                  ; call prim_car
  %rvp7584590 = call i64 @prim_cdr(i64 %rvp7584591)                                  ; call prim_cdr
  %nhy$_95t = call i64 @prim_car(i64 %rvp7584590)                                    ; call prim_car
  %na7584570 = call i64 @prim_cdr(i64 %rvp7584590)                                   ; call prim_cdr
  %a7581114 = call i64 @prim_procedure_63(i64 %uhr$post)                             ; call prim_procedure_63
  %cmp7589684 = icmp eq i64 %a7581114, 15                                            ; false?
  br i1 %cmp7589684, label %else7589686, label %then7589685                          ; if

then7589685:
  %cloptr7589687 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7589689 = getelementptr inbounds i64, i64* %cloptr7589687, i64 1              ; &eptr7589689[1]
  %eptr7589690 = getelementptr inbounds i64, i64* %cloptr7589687, i64 2              ; &eptr7589690[2]
  store i64 %hKD$v, i64* %eptr7589689                                                ; *eptr7589689 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589690                                          ; *eptr7589690 = %cont7581298
  %eptr7589688 = getelementptr inbounds i64, i64* %cloptr7589687, i64 0              ; &cloptr7589687[0]
  %f7589691 = ptrtoint void(i64,i64)* @lam7586308 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589691, i64* %eptr7589688                                             ; store fptr
  %arg7582594 = ptrtoint i64* %cloptr7589687 to i64                                  ; closure cast; i64* -> i64
  %rva7584579 = add i64 0, 0                                                         ; quoted ()
  %rva7584578 = call i64 @prim_cons(i64 %arg7582594, i64 %rva7584579)                ; call prim_cons
  %cloptr7589692 = inttoptr i64 %uhr$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589693 = getelementptr inbounds i64, i64* %cloptr7589692, i64 0             ; &cloptr7589692[0]
  %f7589695 = load i64, i64* %i0ptr7589693, align 8                                  ; load; *i0ptr7589693
  %fptr7589694 = inttoptr i64 %f7589695 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589694(i64 %uhr$post, i64 %rva7584578)             ; tail call
  ret void

else7589686:
  %arg7582599 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589696, i32 0, i32 0)); quoted string
  %retprim7581304 = call i64 @prim_halt(i64 %arg7582599)                             ; call prim_halt
  %cloptr7589697 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7589699 = getelementptr inbounds i64, i64* %cloptr7589697, i64 1              ; &eptr7589699[1]
  %eptr7589700 = getelementptr inbounds i64, i64* %cloptr7589697, i64 2              ; &eptr7589700[2]
  store i64 %hKD$v, i64* %eptr7589699                                                ; *eptr7589699 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589700                                          ; *eptr7589700 = %cont7581298
  %eptr7589698 = getelementptr inbounds i64, i64* %cloptr7589697, i64 0              ; &cloptr7589697[0]
  %f7589701 = ptrtoint void(i64,i64)* @lam7586314 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589701, i64* %eptr7589698                                             ; store fptr
  %arg7582602 = ptrtoint i64* %cloptr7589697 to i64                                  ; closure cast; i64* -> i64
  %arg7582601 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584589 = add i64 0, 0                                                         ; quoted ()
  %rva7584588 = call i64 @prim_cons(i64 %retprim7581304, i64 %rva7584589)            ; call prim_cons
  %rva7584587 = call i64 @prim_cons(i64 %arg7582601, i64 %rva7584588)                ; call prim_cons
  %cloptr7589702 = inttoptr i64 %arg7582602 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589703 = getelementptr inbounds i64, i64* %cloptr7589702, i64 0             ; &cloptr7589702[0]
  %f7589705 = load i64, i64* %i0ptr7589703, align 8                                  ; load; *i0ptr7589703
  %fptr7589704 = inttoptr i64 %f7589705 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589704(i64 %arg7582602, i64 %rva7584587)           ; tail call
  ret void
}


define void @lam7586314(i64 %env7586315, i64 %rvp7584586) {
  %envptr7589706 = inttoptr i64 %env7586315 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589707 = getelementptr inbounds i64, i64* %envptr7589706, i64 2            ; &envptr7589706[2]
  %cont7581298 = load i64, i64* %envptr7589707, align 8                              ; load; *envptr7589707
  %envptr7589708 = inttoptr i64 %env7586315 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589709 = getelementptr inbounds i64, i64* %envptr7589708, i64 1            ; &envptr7589708[1]
  %hKD$v = load i64, i64* %envptr7589709, align 8                                    ; load; *envptr7589709
  %_957581303 = call i64 @prim_car(i64 %rvp7584586)                                  ; call prim_car
  %rvp7584585 = call i64 @prim_cdr(i64 %rvp7584586)                                  ; call prim_cdr
  %m1n$_95t = call i64 @prim_car(i64 %rvp7584585)                                    ; call prim_car
  %na7584581 = call i64 @prim_cdr(i64 %rvp7584585)                                   ; call prim_cdr
  %arg7582604 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584584 = add i64 0, 0                                                         ; quoted ()
  %rva7584583 = call i64 @prim_cons(i64 %hKD$v, i64 %rva7584584)                     ; call prim_cons
  %rva7584582 = call i64 @prim_cons(i64 %arg7582604, i64 %rva7584583)                ; call prim_cons
  %cloptr7589710 = inttoptr i64 %cont7581298 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589711 = getelementptr inbounds i64, i64* %cloptr7589710, i64 0             ; &cloptr7589710[0]
  %f7589713 = load i64, i64* %i0ptr7589711, align 8                                  ; load; *i0ptr7589711
  %fptr7589712 = inttoptr i64 %f7589713 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589712(i64 %cont7581298, i64 %rva7584582)          ; tail call
  ret void
}


define void @lam7586308(i64 %env7586309, i64 %rvp7584577) {
  %envptr7589714 = inttoptr i64 %env7586309 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589715 = getelementptr inbounds i64, i64* %envptr7589714, i64 2            ; &envptr7589714[2]
  %cont7581298 = load i64, i64* %envptr7589715, align 8                              ; load; *envptr7589715
  %envptr7589716 = inttoptr i64 %env7586309 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589717 = getelementptr inbounds i64, i64* %envptr7589716, i64 1            ; &envptr7589716[1]
  %hKD$v = load i64, i64* %envptr7589717, align 8                                    ; load; *envptr7589717
  %_957581303 = call i64 @prim_car(i64 %rvp7584577)                                  ; call prim_car
  %rvp7584576 = call i64 @prim_cdr(i64 %rvp7584577)                                  ; call prim_cdr
  %m1n$_95t = call i64 @prim_car(i64 %rvp7584576)                                    ; call prim_car
  %na7584572 = call i64 @prim_cdr(i64 %rvp7584576)                                   ; call prim_cdr
  %arg7582597 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584575 = add i64 0, 0                                                         ; quoted ()
  %rva7584574 = call i64 @prim_cons(i64 %hKD$v, i64 %rva7584575)                     ; call prim_cons
  %rva7584573 = call i64 @prim_cons(i64 %arg7582597, i64 %rva7584574)                ; call prim_cons
  %cloptr7589718 = inttoptr i64 %cont7581298 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589719 = getelementptr inbounds i64, i64* %cloptr7589718, i64 0             ; &cloptr7589718[0]
  %f7589721 = load i64, i64* %i0ptr7589719, align 8                                  ; load; *i0ptr7589719
  %fptr7589720 = inttoptr i64 %f7589721 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589720(i64 %cont7581298, i64 %rva7584573)          ; tail call
  ret void
}


define void @lam7586296(i64 %env7586297, i64 %rvp7584560) {
  %envptr7589722 = inttoptr i64 %env7586297 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589723 = getelementptr inbounds i64, i64* %envptr7589722, i64 5            ; &envptr7589722[5]
  %cont7581298 = load i64, i64* %envptr7589723, align 8                              ; load; *envptr7589723
  %envptr7589724 = inttoptr i64 %env7586297 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589725 = getelementptr inbounds i64, i64* %envptr7589724, i64 4            ; &envptr7589724[4]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589725, align 8                      ; load; *envptr7589725
  %envptr7589726 = inttoptr i64 %env7586297 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589727 = getelementptr inbounds i64, i64* %envptr7589726, i64 3            ; &envptr7589726[3]
  %Q7p$pre = load i64, i64* %envptr7589727, align 8                                  ; load; *envptr7589727
  %envptr7589728 = inttoptr i64 %env7586297 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589729 = getelementptr inbounds i64, i64* %envptr7589728, i64 2            ; &envptr7589728[2]
  %uhr$post = load i64, i64* %envptr7589729, align 8                                 ; load; *envptr7589729
  %envptr7589730 = inttoptr i64 %env7586297 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589731 = getelementptr inbounds i64, i64* %envptr7589730, i64 1            ; &envptr7589730[1]
  %Ky7$body = load i64, i64* %envptr7589731, align 8                                 ; load; *envptr7589731
  %_957581299 = call i64 @prim_car(i64 %rvp7584560)                                  ; call prim_car
  %rvp7584559 = call i64 @prim_cdr(i64 %rvp7584560)                                  ; call prim_cdr
  %TL2$_95t = call i64 @prim_car(i64 %rvp7584559)                                    ; call prim_car
  %na7584486 = call i64 @prim_cdr(i64 %rvp7584559)                                   ; call prim_cdr
  %a7581108 = call i64 @prim_cons(i64 %Q7p$pre, i64 %uhr$post)                       ; call prim_cons
  %arg7582504 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581109 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7582504) ; call prim_vector_45ref
  %a7581110 = call i64 @prim_cons(i64 %a7581108, i64 %a7581109)                      ; call prim_cons
  %arg7582509 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581307 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582509, i64 %a7581110); call prim_vector_45set_33
  %cloptr7589732 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7589734 = getelementptr inbounds i64, i64* %cloptr7589732, i64 1              ; &eptr7589734[1]
  %eptr7589735 = getelementptr inbounds i64, i64* %cloptr7589732, i64 2              ; &eptr7589735[2]
  %eptr7589736 = getelementptr inbounds i64, i64* %cloptr7589732, i64 3              ; &eptr7589736[3]
  %eptr7589737 = getelementptr inbounds i64, i64* %cloptr7589732, i64 4              ; &eptr7589737[4]
  store i64 %Ky7$body, i64* %eptr7589734                                             ; *eptr7589734 = %Ky7$body
  store i64 %uhr$post, i64* %eptr7589735                                             ; *eptr7589735 = %uhr$post
  store i64 %CPS$_37wind_45stack, i64* %eptr7589736                                  ; *eptr7589736 = %CPS$_37wind_45stack
  store i64 %cont7581298, i64* %eptr7589737                                          ; *eptr7589737 = %cont7581298
  %eptr7589733 = getelementptr inbounds i64, i64* %cloptr7589732, i64 0              ; &cloptr7589732[0]
  %f7589738 = ptrtoint void(i64,i64)* @lam7586292 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589738, i64* %eptr7589733                                             ; store fptr
  %arg7582513 = ptrtoint i64* %cloptr7589732 to i64                                  ; closure cast; i64* -> i64
  %arg7582512 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584558 = add i64 0, 0                                                         ; quoted ()
  %rva7584557 = call i64 @prim_cons(i64 %retprim7581307, i64 %rva7584558)            ; call prim_cons
  %rva7584556 = call i64 @prim_cons(i64 %arg7582512, i64 %rva7584557)                ; call prim_cons
  %cloptr7589739 = inttoptr i64 %arg7582513 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589740 = getelementptr inbounds i64, i64* %cloptr7589739, i64 0             ; &cloptr7589739[0]
  %f7589742 = load i64, i64* %i0ptr7589740, align 8                                  ; load; *i0ptr7589740
  %fptr7589741 = inttoptr i64 %f7589742 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589741(i64 %arg7582513, i64 %rva7584556)           ; tail call
  ret void
}


define void @lam7586292(i64 %env7586293, i64 %rvp7584555) {
  %envptr7589743 = inttoptr i64 %env7586293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589744 = getelementptr inbounds i64, i64* %envptr7589743, i64 4            ; &envptr7589743[4]
  %cont7581298 = load i64, i64* %envptr7589744, align 8                              ; load; *envptr7589744
  %envptr7589745 = inttoptr i64 %env7586293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589746 = getelementptr inbounds i64, i64* %envptr7589745, i64 3            ; &envptr7589745[3]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589746, align 8                      ; load; *envptr7589746
  %envptr7589747 = inttoptr i64 %env7586293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589748 = getelementptr inbounds i64, i64* %envptr7589747, i64 2            ; &envptr7589747[2]
  %uhr$post = load i64, i64* %envptr7589748, align 8                                 ; load; *envptr7589748
  %envptr7589749 = inttoptr i64 %env7586293 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589750 = getelementptr inbounds i64, i64* %envptr7589749, i64 1            ; &envptr7589749[1]
  %Ky7$body = load i64, i64* %envptr7589750, align 8                                 ; load; *envptr7589750
  %_957581300 = call i64 @prim_car(i64 %rvp7584555)                                  ; call prim_car
  %rvp7584554 = call i64 @prim_cdr(i64 %rvp7584555)                                  ; call prim_cdr
  %yFi$_95t = call i64 @prim_car(i64 %rvp7584554)                                    ; call prim_car
  %na7584488 = call i64 @prim_cdr(i64 %rvp7584554)                                   ; call prim_cdr
  %a7581111 = call i64 @prim_procedure_63(i64 %Ky7$body)                             ; call prim_procedure_63
  %cmp7589751 = icmp eq i64 %a7581111, 15                                            ; false?
  br i1 %cmp7589751, label %else7589753, label %then7589752                          ; if

then7589752:
  %cloptr7589754 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589756 = getelementptr inbounds i64, i64* %cloptr7589754, i64 1              ; &eptr7589756[1]
  %eptr7589757 = getelementptr inbounds i64, i64* %cloptr7589754, i64 2              ; &eptr7589757[2]
  %eptr7589758 = getelementptr inbounds i64, i64* %cloptr7589754, i64 3              ; &eptr7589758[3]
  store i64 %uhr$post, i64* %eptr7589756                                             ; *eptr7589756 = %uhr$post
  store i64 %CPS$_37wind_45stack, i64* %eptr7589757                                  ; *eptr7589757 = %CPS$_37wind_45stack
  store i64 %cont7581298, i64* %eptr7589758                                          ; *eptr7589758 = %cont7581298
  %eptr7589755 = getelementptr inbounds i64, i64* %cloptr7589754, i64 0              ; &cloptr7589754[0]
  %f7589759 = ptrtoint void(i64,i64)* @lam7586267 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589759, i64* %eptr7589755                                             ; store fptr
  %arg7582515 = ptrtoint i64* %cloptr7589754 to i64                                  ; closure cast; i64* -> i64
  %rva7584520 = add i64 0, 0                                                         ; quoted ()
  %rva7584519 = call i64 @prim_cons(i64 %arg7582515, i64 %rva7584520)                ; call prim_cons
  %cloptr7589760 = inttoptr i64 %Ky7$body to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589761 = getelementptr inbounds i64, i64* %cloptr7589760, i64 0             ; &cloptr7589760[0]
  %f7589763 = load i64, i64* %i0ptr7589761, align 8                                  ; load; *i0ptr7589761
  %fptr7589762 = inttoptr i64 %f7589763 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589762(i64 %Ky7$body, i64 %rva7584519)             ; tail call
  ret void

else7589753:
  %arg7582539 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589764, i32 0, i32 0)); quoted string
  %retprim7581306 = call i64 @prim_halt(i64 %arg7582539)                             ; call prim_halt
  %cloptr7589765 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589767 = getelementptr inbounds i64, i64* %cloptr7589765, i64 1              ; &eptr7589767[1]
  %eptr7589768 = getelementptr inbounds i64, i64* %cloptr7589765, i64 2              ; &eptr7589768[2]
  %eptr7589769 = getelementptr inbounds i64, i64* %cloptr7589765, i64 3              ; &eptr7589769[3]
  store i64 %uhr$post, i64* %eptr7589767                                             ; *eptr7589767 = %uhr$post
  store i64 %CPS$_37wind_45stack, i64* %eptr7589768                                  ; *eptr7589768 = %CPS$_37wind_45stack
  store i64 %cont7581298, i64* %eptr7589769                                          ; *eptr7589769 = %cont7581298
  %eptr7589766 = getelementptr inbounds i64, i64* %cloptr7589765, i64 0              ; &cloptr7589765[0]
  %f7589770 = ptrtoint void(i64,i64)* @lam7586289 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589770, i64* %eptr7589766                                             ; store fptr
  %arg7582542 = ptrtoint i64* %cloptr7589765 to i64                                  ; closure cast; i64* -> i64
  %arg7582541 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584553 = add i64 0, 0                                                         ; quoted ()
  %rva7584552 = call i64 @prim_cons(i64 %retprim7581306, i64 %rva7584553)            ; call prim_cons
  %rva7584551 = call i64 @prim_cons(i64 %arg7582541, i64 %rva7584552)                ; call prim_cons
  %cloptr7589771 = inttoptr i64 %arg7582542 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589772 = getelementptr inbounds i64, i64* %cloptr7589771, i64 0             ; &cloptr7589771[0]
  %f7589774 = load i64, i64* %i0ptr7589772, align 8                                  ; load; *i0ptr7589772
  %fptr7589773 = inttoptr i64 %f7589774 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589773(i64 %arg7582542, i64 %rva7584551)           ; tail call
  ret void
}


define void @lam7586289(i64 %env7586290, i64 %rvp7584550) {
  %envptr7589775 = inttoptr i64 %env7586290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589776 = getelementptr inbounds i64, i64* %envptr7589775, i64 3            ; &envptr7589775[3]
  %cont7581298 = load i64, i64* %envptr7589776, align 8                              ; load; *envptr7589776
  %envptr7589777 = inttoptr i64 %env7586290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589778 = getelementptr inbounds i64, i64* %envptr7589777, i64 2            ; &envptr7589777[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589778, align 8                      ; load; *envptr7589778
  %envptr7589779 = inttoptr i64 %env7586290 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589780 = getelementptr inbounds i64, i64* %envptr7589779, i64 1            ; &envptr7589779[1]
  %uhr$post = load i64, i64* %envptr7589780, align 8                                 ; load; *envptr7589780
  %_957581301 = call i64 @prim_car(i64 %rvp7584550)                                  ; call prim_car
  %rvp7584549 = call i64 @prim_cdr(i64 %rvp7584550)                                  ; call prim_cdr
  %hKD$v = call i64 @prim_car(i64 %rvp7584549)                                       ; call prim_car
  %na7584522 = call i64 @prim_cdr(i64 %rvp7584549)                                   ; call prim_cdr
  %arg7582543 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581112 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7582543) ; call prim_vector_45ref
  %a7581113 = call i64 @prim_cdr(i64 %a7581112)                                      ; call prim_cdr
  %arg7582547 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581305 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582547, i64 %a7581113); call prim_vector_45set_33
  %cloptr7589781 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589783 = getelementptr inbounds i64, i64* %cloptr7589781, i64 1              ; &eptr7589783[1]
  %eptr7589784 = getelementptr inbounds i64, i64* %cloptr7589781, i64 2              ; &eptr7589784[2]
  %eptr7589785 = getelementptr inbounds i64, i64* %cloptr7589781, i64 3              ; &eptr7589785[3]
  store i64 %uhr$post, i64* %eptr7589783                                             ; *eptr7589783 = %uhr$post
  store i64 %hKD$v, i64* %eptr7589784                                                ; *eptr7589784 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589785                                          ; *eptr7589785 = %cont7581298
  %eptr7589782 = getelementptr inbounds i64, i64* %cloptr7589781, i64 0              ; &cloptr7589781[0]
  %f7589786 = ptrtoint void(i64,i64)* @lam7586285 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589786, i64* %eptr7589782                                             ; store fptr
  %arg7582551 = ptrtoint i64* %cloptr7589781 to i64                                  ; closure cast; i64* -> i64
  %arg7582550 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584548 = add i64 0, 0                                                         ; quoted ()
  %rva7584547 = call i64 @prim_cons(i64 %retprim7581305, i64 %rva7584548)            ; call prim_cons
  %rva7584546 = call i64 @prim_cons(i64 %arg7582550, i64 %rva7584547)                ; call prim_cons
  %cloptr7589787 = inttoptr i64 %arg7582551 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589788 = getelementptr inbounds i64, i64* %cloptr7589787, i64 0             ; &cloptr7589787[0]
  %f7589790 = load i64, i64* %i0ptr7589788, align 8                                  ; load; *i0ptr7589788
  %fptr7589789 = inttoptr i64 %f7589790 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589789(i64 %arg7582551, i64 %rva7584546)           ; tail call
  ret void
}


define void @lam7586285(i64 %env7586286, i64 %rvp7584545) {
  %envptr7589791 = inttoptr i64 %env7586286 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589792 = getelementptr inbounds i64, i64* %envptr7589791, i64 3            ; &envptr7589791[3]
  %cont7581298 = load i64, i64* %envptr7589792, align 8                              ; load; *envptr7589792
  %envptr7589793 = inttoptr i64 %env7586286 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589794 = getelementptr inbounds i64, i64* %envptr7589793, i64 2            ; &envptr7589793[2]
  %hKD$v = load i64, i64* %envptr7589794, align 8                                    ; load; *envptr7589794
  %envptr7589795 = inttoptr i64 %env7586286 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589796 = getelementptr inbounds i64, i64* %envptr7589795, i64 1            ; &envptr7589795[1]
  %uhr$post = load i64, i64* %envptr7589796, align 8                                 ; load; *envptr7589796
  %_957581302 = call i64 @prim_car(i64 %rvp7584545)                                  ; call prim_car
  %rvp7584544 = call i64 @prim_cdr(i64 %rvp7584545)                                  ; call prim_cdr
  %nhy$_95t = call i64 @prim_car(i64 %rvp7584544)                                    ; call prim_car
  %na7584524 = call i64 @prim_cdr(i64 %rvp7584544)                                   ; call prim_cdr
  %a7581114 = call i64 @prim_procedure_63(i64 %uhr$post)                             ; call prim_procedure_63
  %cmp7589797 = icmp eq i64 %a7581114, 15                                            ; false?
  br i1 %cmp7589797, label %else7589799, label %then7589798                          ; if

then7589798:
  %cloptr7589800 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7589802 = getelementptr inbounds i64, i64* %cloptr7589800, i64 1              ; &eptr7589802[1]
  %eptr7589803 = getelementptr inbounds i64, i64* %cloptr7589800, i64 2              ; &eptr7589803[2]
  store i64 %hKD$v, i64* %eptr7589802                                                ; *eptr7589802 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589803                                          ; *eptr7589803 = %cont7581298
  %eptr7589801 = getelementptr inbounds i64, i64* %cloptr7589800, i64 0              ; &cloptr7589800[0]
  %f7589804 = ptrtoint void(i64,i64)* @lam7586276 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589804, i64* %eptr7589801                                             ; store fptr
  %arg7582553 = ptrtoint i64* %cloptr7589800 to i64                                  ; closure cast; i64* -> i64
  %rva7584533 = add i64 0, 0                                                         ; quoted ()
  %rva7584532 = call i64 @prim_cons(i64 %arg7582553, i64 %rva7584533)                ; call prim_cons
  %cloptr7589805 = inttoptr i64 %uhr$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589806 = getelementptr inbounds i64, i64* %cloptr7589805, i64 0             ; &cloptr7589805[0]
  %f7589808 = load i64, i64* %i0ptr7589806, align 8                                  ; load; *i0ptr7589806
  %fptr7589807 = inttoptr i64 %f7589808 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589807(i64 %uhr$post, i64 %rva7584532)             ; tail call
  ret void

else7589799:
  %arg7582558 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589809, i32 0, i32 0)); quoted string
  %retprim7581304 = call i64 @prim_halt(i64 %arg7582558)                             ; call prim_halt
  %cloptr7589810 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7589812 = getelementptr inbounds i64, i64* %cloptr7589810, i64 1              ; &eptr7589812[1]
  %eptr7589813 = getelementptr inbounds i64, i64* %cloptr7589810, i64 2              ; &eptr7589813[2]
  store i64 %hKD$v, i64* %eptr7589812                                                ; *eptr7589812 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589813                                          ; *eptr7589813 = %cont7581298
  %eptr7589811 = getelementptr inbounds i64, i64* %cloptr7589810, i64 0              ; &cloptr7589810[0]
  %f7589814 = ptrtoint void(i64,i64)* @lam7586282 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589814, i64* %eptr7589811                                             ; store fptr
  %arg7582561 = ptrtoint i64* %cloptr7589810 to i64                                  ; closure cast; i64* -> i64
  %arg7582560 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584543 = add i64 0, 0                                                         ; quoted ()
  %rva7584542 = call i64 @prim_cons(i64 %retprim7581304, i64 %rva7584543)            ; call prim_cons
  %rva7584541 = call i64 @prim_cons(i64 %arg7582560, i64 %rva7584542)                ; call prim_cons
  %cloptr7589815 = inttoptr i64 %arg7582561 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589816 = getelementptr inbounds i64, i64* %cloptr7589815, i64 0             ; &cloptr7589815[0]
  %f7589818 = load i64, i64* %i0ptr7589816, align 8                                  ; load; *i0ptr7589816
  %fptr7589817 = inttoptr i64 %f7589818 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589817(i64 %arg7582561, i64 %rva7584541)           ; tail call
  ret void
}


define void @lam7586282(i64 %env7586283, i64 %rvp7584540) {
  %envptr7589819 = inttoptr i64 %env7586283 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589820 = getelementptr inbounds i64, i64* %envptr7589819, i64 2            ; &envptr7589819[2]
  %cont7581298 = load i64, i64* %envptr7589820, align 8                              ; load; *envptr7589820
  %envptr7589821 = inttoptr i64 %env7586283 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589822 = getelementptr inbounds i64, i64* %envptr7589821, i64 1            ; &envptr7589821[1]
  %hKD$v = load i64, i64* %envptr7589822, align 8                                    ; load; *envptr7589822
  %_957581303 = call i64 @prim_car(i64 %rvp7584540)                                  ; call prim_car
  %rvp7584539 = call i64 @prim_cdr(i64 %rvp7584540)                                  ; call prim_cdr
  %m1n$_95t = call i64 @prim_car(i64 %rvp7584539)                                    ; call prim_car
  %na7584535 = call i64 @prim_cdr(i64 %rvp7584539)                                   ; call prim_cdr
  %arg7582563 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584538 = add i64 0, 0                                                         ; quoted ()
  %rva7584537 = call i64 @prim_cons(i64 %hKD$v, i64 %rva7584538)                     ; call prim_cons
  %rva7584536 = call i64 @prim_cons(i64 %arg7582563, i64 %rva7584537)                ; call prim_cons
  %cloptr7589823 = inttoptr i64 %cont7581298 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589824 = getelementptr inbounds i64, i64* %cloptr7589823, i64 0             ; &cloptr7589823[0]
  %f7589826 = load i64, i64* %i0ptr7589824, align 8                                  ; load; *i0ptr7589824
  %fptr7589825 = inttoptr i64 %f7589826 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589825(i64 %cont7581298, i64 %rva7584536)          ; tail call
  ret void
}


define void @lam7586276(i64 %env7586277, i64 %rvp7584531) {
  %envptr7589827 = inttoptr i64 %env7586277 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589828 = getelementptr inbounds i64, i64* %envptr7589827, i64 2            ; &envptr7589827[2]
  %cont7581298 = load i64, i64* %envptr7589828, align 8                              ; load; *envptr7589828
  %envptr7589829 = inttoptr i64 %env7586277 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589830 = getelementptr inbounds i64, i64* %envptr7589829, i64 1            ; &envptr7589829[1]
  %hKD$v = load i64, i64* %envptr7589830, align 8                                    ; load; *envptr7589830
  %_957581303 = call i64 @prim_car(i64 %rvp7584531)                                  ; call prim_car
  %rvp7584530 = call i64 @prim_cdr(i64 %rvp7584531)                                  ; call prim_cdr
  %m1n$_95t = call i64 @prim_car(i64 %rvp7584530)                                    ; call prim_car
  %na7584526 = call i64 @prim_cdr(i64 %rvp7584530)                                   ; call prim_cdr
  %arg7582556 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584529 = add i64 0, 0                                                         ; quoted ()
  %rva7584528 = call i64 @prim_cons(i64 %hKD$v, i64 %rva7584529)                     ; call prim_cons
  %rva7584527 = call i64 @prim_cons(i64 %arg7582556, i64 %rva7584528)                ; call prim_cons
  %cloptr7589831 = inttoptr i64 %cont7581298 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589832 = getelementptr inbounds i64, i64* %cloptr7589831, i64 0             ; &cloptr7589831[0]
  %f7589834 = load i64, i64* %i0ptr7589832, align 8                                  ; load; *i0ptr7589832
  %fptr7589833 = inttoptr i64 %f7589834 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589833(i64 %cont7581298, i64 %rva7584527)          ; tail call
  ret void
}


define void @lam7586267(i64 %env7586268, i64 %rvp7584518) {
  %envptr7589835 = inttoptr i64 %env7586268 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589836 = getelementptr inbounds i64, i64* %envptr7589835, i64 3            ; &envptr7589835[3]
  %cont7581298 = load i64, i64* %envptr7589836, align 8                              ; load; *envptr7589836
  %envptr7589837 = inttoptr i64 %env7586268 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589838 = getelementptr inbounds i64, i64* %envptr7589837, i64 2            ; &envptr7589837[2]
  %CPS$_37wind_45stack = load i64, i64* %envptr7589838, align 8                      ; load; *envptr7589838
  %envptr7589839 = inttoptr i64 %env7586268 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589840 = getelementptr inbounds i64, i64* %envptr7589839, i64 1            ; &envptr7589839[1]
  %uhr$post = load i64, i64* %envptr7589840, align 8                                 ; load; *envptr7589840
  %_957581301 = call i64 @prim_car(i64 %rvp7584518)                                  ; call prim_car
  %rvp7584517 = call i64 @prim_cdr(i64 %rvp7584518)                                  ; call prim_cdr
  %hKD$v = call i64 @prim_car(i64 %rvp7584517)                                       ; call prim_car
  %na7584490 = call i64 @prim_cdr(i64 %rvp7584517)                                   ; call prim_cdr
  %arg7582517 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581112 = call i64 @prim_vector_45ref(i64 %CPS$_37wind_45stack, i64 %arg7582517) ; call prim_vector_45ref
  %a7581113 = call i64 @prim_cdr(i64 %a7581112)                                      ; call prim_cdr
  %arg7582521 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %retprim7581305 = call i64 @prim_vector_45set_33(i64 %CPS$_37wind_45stack, i64 %arg7582521, i64 %a7581113); call prim_vector_45set_33
  %cloptr7589841 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589843 = getelementptr inbounds i64, i64* %cloptr7589841, i64 1              ; &eptr7589843[1]
  %eptr7589844 = getelementptr inbounds i64, i64* %cloptr7589841, i64 2              ; &eptr7589844[2]
  %eptr7589845 = getelementptr inbounds i64, i64* %cloptr7589841, i64 3              ; &eptr7589845[3]
  store i64 %uhr$post, i64* %eptr7589843                                             ; *eptr7589843 = %uhr$post
  store i64 %hKD$v, i64* %eptr7589844                                                ; *eptr7589844 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589845                                          ; *eptr7589845 = %cont7581298
  %eptr7589842 = getelementptr inbounds i64, i64* %cloptr7589841, i64 0              ; &cloptr7589841[0]
  %f7589846 = ptrtoint void(i64,i64)* @lam7586263 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589846, i64* %eptr7589842                                             ; store fptr
  %arg7582525 = ptrtoint i64* %cloptr7589841 to i64                                  ; closure cast; i64* -> i64
  %arg7582524 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584516 = add i64 0, 0                                                         ; quoted ()
  %rva7584515 = call i64 @prim_cons(i64 %retprim7581305, i64 %rva7584516)            ; call prim_cons
  %rva7584514 = call i64 @prim_cons(i64 %arg7582524, i64 %rva7584515)                ; call prim_cons
  %cloptr7589847 = inttoptr i64 %arg7582525 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589848 = getelementptr inbounds i64, i64* %cloptr7589847, i64 0             ; &cloptr7589847[0]
  %f7589850 = load i64, i64* %i0ptr7589848, align 8                                  ; load; *i0ptr7589848
  %fptr7589849 = inttoptr i64 %f7589850 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589849(i64 %arg7582525, i64 %rva7584514)           ; tail call
  ret void
}


define void @lam7586263(i64 %env7586264, i64 %rvp7584513) {
  %envptr7589851 = inttoptr i64 %env7586264 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589852 = getelementptr inbounds i64, i64* %envptr7589851, i64 3            ; &envptr7589851[3]
  %cont7581298 = load i64, i64* %envptr7589852, align 8                              ; load; *envptr7589852
  %envptr7589853 = inttoptr i64 %env7586264 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589854 = getelementptr inbounds i64, i64* %envptr7589853, i64 2            ; &envptr7589853[2]
  %hKD$v = load i64, i64* %envptr7589854, align 8                                    ; load; *envptr7589854
  %envptr7589855 = inttoptr i64 %env7586264 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589856 = getelementptr inbounds i64, i64* %envptr7589855, i64 1            ; &envptr7589855[1]
  %uhr$post = load i64, i64* %envptr7589856, align 8                                 ; load; *envptr7589856
  %_957581302 = call i64 @prim_car(i64 %rvp7584513)                                  ; call prim_car
  %rvp7584512 = call i64 @prim_cdr(i64 %rvp7584513)                                  ; call prim_cdr
  %nhy$_95t = call i64 @prim_car(i64 %rvp7584512)                                    ; call prim_car
  %na7584492 = call i64 @prim_cdr(i64 %rvp7584512)                                   ; call prim_cdr
  %a7581114 = call i64 @prim_procedure_63(i64 %uhr$post)                             ; call prim_procedure_63
  %cmp7589857 = icmp eq i64 %a7581114, 15                                            ; false?
  br i1 %cmp7589857, label %else7589859, label %then7589858                          ; if

then7589858:
  %cloptr7589860 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7589862 = getelementptr inbounds i64, i64* %cloptr7589860, i64 1              ; &eptr7589862[1]
  %eptr7589863 = getelementptr inbounds i64, i64* %cloptr7589860, i64 2              ; &eptr7589863[2]
  store i64 %hKD$v, i64* %eptr7589862                                                ; *eptr7589862 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589863                                          ; *eptr7589863 = %cont7581298
  %eptr7589861 = getelementptr inbounds i64, i64* %cloptr7589860, i64 0              ; &cloptr7589860[0]
  %f7589864 = ptrtoint void(i64,i64)* @lam7586254 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589864, i64* %eptr7589861                                             ; store fptr
  %arg7582527 = ptrtoint i64* %cloptr7589860 to i64                                  ; closure cast; i64* -> i64
  %rva7584501 = add i64 0, 0                                                         ; quoted ()
  %rva7584500 = call i64 @prim_cons(i64 %arg7582527, i64 %rva7584501)                ; call prim_cons
  %cloptr7589865 = inttoptr i64 %uhr$post to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589866 = getelementptr inbounds i64, i64* %cloptr7589865, i64 0             ; &cloptr7589865[0]
  %f7589868 = load i64, i64* %i0ptr7589866, align 8                                  ; load; *i0ptr7589866
  %fptr7589867 = inttoptr i64 %f7589868 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589867(i64 %uhr$post, i64 %rva7584500)             ; tail call
  ret void

else7589859:
  %arg7582532 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589869, i32 0, i32 0)); quoted string
  %retprim7581304 = call i64 @prim_halt(i64 %arg7582532)                             ; call prim_halt
  %cloptr7589870 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7589872 = getelementptr inbounds i64, i64* %cloptr7589870, i64 1              ; &eptr7589872[1]
  %eptr7589873 = getelementptr inbounds i64, i64* %cloptr7589870, i64 2              ; &eptr7589873[2]
  store i64 %hKD$v, i64* %eptr7589872                                                ; *eptr7589872 = %hKD$v
  store i64 %cont7581298, i64* %eptr7589873                                          ; *eptr7589873 = %cont7581298
  %eptr7589871 = getelementptr inbounds i64, i64* %cloptr7589870, i64 0              ; &cloptr7589870[0]
  %f7589874 = ptrtoint void(i64,i64)* @lam7586260 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589874, i64* %eptr7589871                                             ; store fptr
  %arg7582535 = ptrtoint i64* %cloptr7589870 to i64                                  ; closure cast; i64* -> i64
  %arg7582534 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584511 = add i64 0, 0                                                         ; quoted ()
  %rva7584510 = call i64 @prim_cons(i64 %retprim7581304, i64 %rva7584511)            ; call prim_cons
  %rva7584509 = call i64 @prim_cons(i64 %arg7582534, i64 %rva7584510)                ; call prim_cons
  %cloptr7589875 = inttoptr i64 %arg7582535 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589876 = getelementptr inbounds i64, i64* %cloptr7589875, i64 0             ; &cloptr7589875[0]
  %f7589878 = load i64, i64* %i0ptr7589876, align 8                                  ; load; *i0ptr7589876
  %fptr7589877 = inttoptr i64 %f7589878 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589877(i64 %arg7582535, i64 %rva7584509)           ; tail call
  ret void
}


define void @lam7586260(i64 %env7586261, i64 %rvp7584508) {
  %envptr7589879 = inttoptr i64 %env7586261 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589880 = getelementptr inbounds i64, i64* %envptr7589879, i64 2            ; &envptr7589879[2]
  %cont7581298 = load i64, i64* %envptr7589880, align 8                              ; load; *envptr7589880
  %envptr7589881 = inttoptr i64 %env7586261 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589882 = getelementptr inbounds i64, i64* %envptr7589881, i64 1            ; &envptr7589881[1]
  %hKD$v = load i64, i64* %envptr7589882, align 8                                    ; load; *envptr7589882
  %_957581303 = call i64 @prim_car(i64 %rvp7584508)                                  ; call prim_car
  %rvp7584507 = call i64 @prim_cdr(i64 %rvp7584508)                                  ; call prim_cdr
  %m1n$_95t = call i64 @prim_car(i64 %rvp7584507)                                    ; call prim_car
  %na7584503 = call i64 @prim_cdr(i64 %rvp7584507)                                   ; call prim_cdr
  %arg7582537 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584506 = add i64 0, 0                                                         ; quoted ()
  %rva7584505 = call i64 @prim_cons(i64 %hKD$v, i64 %rva7584506)                     ; call prim_cons
  %rva7584504 = call i64 @prim_cons(i64 %arg7582537, i64 %rva7584505)                ; call prim_cons
  %cloptr7589883 = inttoptr i64 %cont7581298 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589884 = getelementptr inbounds i64, i64* %cloptr7589883, i64 0             ; &cloptr7589883[0]
  %f7589886 = load i64, i64* %i0ptr7589884, align 8                                  ; load; *i0ptr7589884
  %fptr7589885 = inttoptr i64 %f7589886 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589885(i64 %cont7581298, i64 %rva7584504)          ; tail call
  ret void
}


define void @lam7586254(i64 %env7586255, i64 %rvp7584499) {
  %envptr7589887 = inttoptr i64 %env7586255 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589888 = getelementptr inbounds i64, i64* %envptr7589887, i64 2            ; &envptr7589887[2]
  %cont7581298 = load i64, i64* %envptr7589888, align 8                              ; load; *envptr7589888
  %envptr7589889 = inttoptr i64 %env7586255 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589890 = getelementptr inbounds i64, i64* %envptr7589889, i64 1            ; &envptr7589889[1]
  %hKD$v = load i64, i64* %envptr7589890, align 8                                    ; load; *envptr7589890
  %_957581303 = call i64 @prim_car(i64 %rvp7584499)                                  ; call prim_car
  %rvp7584498 = call i64 @prim_cdr(i64 %rvp7584499)                                  ; call prim_cdr
  %m1n$_95t = call i64 @prim_car(i64 %rvp7584498)                                    ; call prim_car
  %na7584494 = call i64 @prim_cdr(i64 %rvp7584498)                                   ; call prim_cdr
  %arg7582530 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584497 = add i64 0, 0                                                         ; quoted ()
  %rva7584496 = call i64 @prim_cons(i64 %hKD$v, i64 %rva7584497)                     ; call prim_cons
  %rva7584495 = call i64 @prim_cons(i64 %arg7582530, i64 %rva7584496)                ; call prim_cons
  %cloptr7589891 = inttoptr i64 %cont7581298 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589892 = getelementptr inbounds i64, i64* %cloptr7589891, i64 0             ; &cloptr7589891[0]
  %f7589894 = load i64, i64* %i0ptr7589892, align 8                                  ; load; *i0ptr7589892
  %fptr7589893 = inttoptr i64 %f7589894 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589893(i64 %cont7581298, i64 %rva7584495)          ; tail call
  ret void
}


define void @lam7586243(i64 %env7586244, i64 %pRP$lst7581385) {
  %cont7581384 = call i64 @prim_car(i64 %pRP$lst7581385)                             ; call prim_car
  %pRP$lst = call i64 @prim_cdr(i64 %pRP$lst7581385)                                 ; call prim_cdr
  %arg7582637 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584648 = add i64 0, 0                                                         ; quoted ()
  %rva7584647 = call i64 @prim_cons(i64 %pRP$lst, i64 %rva7584648)                   ; call prim_cons
  %rva7584646 = call i64 @prim_cons(i64 %arg7582637, i64 %rva7584647)                ; call prim_cons
  %cloptr7589895 = inttoptr i64 %cont7581384 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589896 = getelementptr inbounds i64, i64* %cloptr7589895, i64 0             ; &cloptr7589895[0]
  %f7589898 = load i64, i64* %i0ptr7589896, align 8                                  ; load; *i0ptr7589896
  %fptr7589897 = inttoptr i64 %f7589898 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589897(i64 %cont7581384, i64 %rva7584646)          ; tail call
  ret void
}


define void @lam7586239(i64 %env7586240, i64 %rvp7585218) {
  %envptr7589899 = inttoptr i64 %env7586240 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589900 = getelementptr inbounds i64, i64* %envptr7589899, i64 3            ; &envptr7589899[3]
  %m0I$_37_47 = load i64, i64* %envptr7589900, align 8                               ; load; *envptr7589900
  %envptr7589901 = inttoptr i64 %env7586240 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589902 = getelementptr inbounds i64, i64* %envptr7589901, i64 2            ; &envptr7589901[2]
  %z23$_37append = load i64, i64* %envptr7589902, align 8                            ; load; *envptr7589902
  %envptr7589903 = inttoptr i64 %env7586240 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589904 = getelementptr inbounds i64, i64* %envptr7589903, i64 1            ; &envptr7589903[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7589904, align 8                            ; load; *envptr7589904
  %_957581309 = call i64 @prim_car(i64 %rvp7585218)                                  ; call prim_car
  %rvp7585217 = call i64 @prim_cdr(i64 %rvp7585218)                                  ; call prim_cdr
  %MTh$_37raise_45handler = call i64 @prim_car(i64 %rvp7585217)                      ; call prim_car
  %na7584650 = call i64 @prim_cdr(i64 %rvp7585217)                                   ; call prim_cdr
  %cloptr7589905 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7589906 = getelementptr inbounds i64, i64* %cloptr7589905, i64 0              ; &cloptr7589905[0]
  %f7589907 = ptrtoint void(i64,i64)* @lam7586237 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589907, i64* %eptr7589906                                             ; store fptr
  %arg7582640 = ptrtoint i64* %cloptr7589905 to i64                                  ; closure cast; i64* -> i64
  %cloptr7589908 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589910 = getelementptr inbounds i64, i64* %cloptr7589908, i64 1              ; &eptr7589910[1]
  %eptr7589911 = getelementptr inbounds i64, i64* %cloptr7589908, i64 2              ; &eptr7589911[2]
  %eptr7589912 = getelementptr inbounds i64, i64* %cloptr7589908, i64 3              ; &eptr7589912[3]
  store i64 %ajE$_37foldl1, i64* %eptr7589910                                        ; *eptr7589910 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7589911                                        ; *eptr7589911 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7589912                                           ; *eptr7589912 = %m0I$_37_47
  %eptr7589909 = getelementptr inbounds i64, i64* %cloptr7589908, i64 0              ; &cloptr7589908[0]
  %f7589913 = ptrtoint void(i64,i64)* @lam7586233 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589913, i64* %eptr7589909                                             ; store fptr
  %arg7582639 = ptrtoint i64* %cloptr7589908 to i64                                  ; closure cast; i64* -> i64
  %rva7585216 = add i64 0, 0                                                         ; quoted ()
  %rva7585215 = call i64 @prim_cons(i64 %arg7582639, i64 %rva7585216)                ; call prim_cons
  %cloptr7589914 = inttoptr i64 %arg7582640 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589915 = getelementptr inbounds i64, i64* %cloptr7589914, i64 0             ; &cloptr7589914[0]
  %f7589917 = load i64, i64* %i0ptr7589915, align 8                                  ; load; *i0ptr7589915
  %fptr7589916 = inttoptr i64 %f7589917 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589916(i64 %arg7582640, i64 %rva7585215)           ; tail call
  ret void
}


define void @lam7586237(i64 %env7586238, i64 %oue$lst7581383) {
  %cont7581382 = call i64 @prim_car(i64 %oue$lst7581383)                             ; call prim_car
  %oue$lst = call i64 @prim_cdr(i64 %oue$lst7581383)                                 ; call prim_cdr
  %arg7582644 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584653 = add i64 0, 0                                                         ; quoted ()
  %rva7584652 = call i64 @prim_cons(i64 %oue$lst, i64 %rva7584653)                   ; call prim_cons
  %rva7584651 = call i64 @prim_cons(i64 %arg7582644, i64 %rva7584652)                ; call prim_cons
  %cloptr7589918 = inttoptr i64 %cont7581382 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589919 = getelementptr inbounds i64, i64* %cloptr7589918, i64 0             ; &cloptr7589918[0]
  %f7589921 = load i64, i64* %i0ptr7589919, align 8                                  ; load; *i0ptr7589919
  %fptr7589920 = inttoptr i64 %f7589921 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589920(i64 %cont7581382, i64 %rva7584651)          ; tail call
  ret void
}


define void @lam7586233(i64 %env7586234, i64 %rvp7585214) {
  %envptr7589922 = inttoptr i64 %env7586234 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589923 = getelementptr inbounds i64, i64* %envptr7589922, i64 3            ; &envptr7589922[3]
  %m0I$_37_47 = load i64, i64* %envptr7589923, align 8                               ; load; *envptr7589923
  %envptr7589924 = inttoptr i64 %env7586234 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589925 = getelementptr inbounds i64, i64* %envptr7589924, i64 2            ; &envptr7589924[2]
  %z23$_37append = load i64, i64* %envptr7589925, align 8                            ; load; *envptr7589925
  %envptr7589926 = inttoptr i64 %env7586234 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589927 = getelementptr inbounds i64, i64* %envptr7589926, i64 1            ; &envptr7589926[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7589927, align 8                            ; load; *envptr7589927
  %_957581380 = call i64 @prim_car(i64 %rvp7585214)                                  ; call prim_car
  %rvp7585213 = call i64 @prim_cdr(i64 %rvp7585214)                                  ; call prim_cdr
  %a7581115 = call i64 @prim_car(i64 %rvp7585213)                                    ; call prim_car
  %na7584655 = call i64 @prim_cdr(i64 %rvp7585213)                                   ; call prim_cdr
  %arg7582647 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581381 = call i64 @prim_make_45vector(i64 %arg7582647, i64 %a7581115)     ; call prim_make_45vector
  %cloptr7589928 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589930 = getelementptr inbounds i64, i64* %cloptr7589928, i64 1              ; &eptr7589930[1]
  %eptr7589931 = getelementptr inbounds i64, i64* %cloptr7589928, i64 2              ; &eptr7589931[2]
  %eptr7589932 = getelementptr inbounds i64, i64* %cloptr7589928, i64 3              ; &eptr7589932[3]
  store i64 %ajE$_37foldl1, i64* %eptr7589930                                        ; *eptr7589930 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7589931                                        ; *eptr7589931 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7589932                                           ; *eptr7589932 = %m0I$_37_47
  %eptr7589929 = getelementptr inbounds i64, i64* %cloptr7589928, i64 0              ; &cloptr7589928[0]
  %f7589933 = ptrtoint void(i64,i64)* @lam7586230 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589933, i64* %eptr7589929                                             ; store fptr
  %arg7582650 = ptrtoint i64* %cloptr7589928 to i64                                  ; closure cast; i64* -> i64
  %arg7582649 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585212 = add i64 0, 0                                                         ; quoted ()
  %rva7585211 = call i64 @prim_cons(i64 %retprim7581381, i64 %rva7585212)            ; call prim_cons
  %rva7585210 = call i64 @prim_cons(i64 %arg7582649, i64 %rva7585211)                ; call prim_cons
  %cloptr7589934 = inttoptr i64 %arg7582650 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589935 = getelementptr inbounds i64, i64* %cloptr7589934, i64 0             ; &cloptr7589934[0]
  %f7589937 = load i64, i64* %i0ptr7589935, align 8                                  ; load; *i0ptr7589935
  %fptr7589936 = inttoptr i64 %f7589937 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589936(i64 %arg7582650, i64 %rva7585210)           ; tail call
  ret void
}


define void @lam7586230(i64 %env7586231, i64 %rvp7585209) {
  %envptr7589938 = inttoptr i64 %env7586231 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589939 = getelementptr inbounds i64, i64* %envptr7589938, i64 3            ; &envptr7589938[3]
  %m0I$_37_47 = load i64, i64* %envptr7589939, align 8                               ; load; *envptr7589939
  %envptr7589940 = inttoptr i64 %env7586231 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589941 = getelementptr inbounds i64, i64* %envptr7589940, i64 2            ; &envptr7589940[2]
  %z23$_37append = load i64, i64* %envptr7589941, align 8                            ; load; *envptr7589941
  %envptr7589942 = inttoptr i64 %env7586231 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589943 = getelementptr inbounds i64, i64* %envptr7589942, i64 1            ; &envptr7589942[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7589943, align 8                            ; load; *envptr7589943
  %_957581310 = call i64 @prim_car(i64 %rvp7585209)                                  ; call prim_car
  %rvp7585208 = call i64 @prim_cdr(i64 %rvp7585209)                                  ; call prim_cdr
  %qso$nqueens = call i64 @prim_car(i64 %rvp7585208)                                 ; call prim_car
  %na7584657 = call i64 @prim_cdr(i64 %rvp7585208)                                   ; call prim_cdr
  %arg7582652 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7589944 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7589946 = getelementptr inbounds i64, i64* %cloptr7589944, i64 1              ; &eptr7589946[1]
  %eptr7589947 = getelementptr inbounds i64, i64* %cloptr7589944, i64 2              ; &eptr7589947[2]
  %eptr7589948 = getelementptr inbounds i64, i64* %cloptr7589944, i64 3              ; &eptr7589948[3]
  store i64 %ajE$_37foldl1, i64* %eptr7589946                                        ; *eptr7589946 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7589947                                        ; *eptr7589947 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7589948                                           ; *eptr7589948 = %m0I$_37_47
  %eptr7589945 = getelementptr inbounds i64, i64* %cloptr7589944, i64 0              ; &cloptr7589944[0]
  %f7589949 = ptrtoint void(i64,i64)* @lam7586227 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589949, i64* %eptr7589945                                             ; store fptr
  %arg7582651 = ptrtoint i64* %cloptr7589944 to i64                                  ; closure cast; i64* -> i64
  %pZY$_95t = call i64 @prim_vector_45set_33(i64 %qso$nqueens, i64 %arg7582652, i64 %arg7582651); call prim_vector_45set_33
  %arg7583206 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581183 = call i64 @prim_vector_45ref(i64 %qso$nqueens, i64 %arg7583206)         ; call prim_vector_45ref
  %a7581184 = call i64 @prim_procedure_63(i64 %a7581183)                             ; call prim_procedure_63
  %cmp7589950 = icmp eq i64 %a7581184, 15                                            ; false?
  br i1 %cmp7589950, label %else7589952, label %then7589951                          ; if

then7589951:
  %arg7583209 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581185 = call i64 @prim_vector_45ref(i64 %qso$nqueens, i64 %arg7583209)         ; call prim_vector_45ref
  %cloptr7589953 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7589954 = getelementptr inbounds i64, i64* %cloptr7589953, i64 0              ; &cloptr7589953[0]
  %f7589955 = ptrtoint void(i64,i64)* @lam7585847 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589955, i64* %eptr7589954                                             ; store fptr
  %arg7583212 = ptrtoint i64* %cloptr7589953 to i64                                  ; closure cast; i64* -> i64
  %arg7583211 = call i64 @const_init_int(i64 8)                                      ; quoted int
  %rva7585198 = add i64 0, 0                                                         ; quoted ()
  %rva7585197 = call i64 @prim_cons(i64 %arg7583211, i64 %rva7585198)                ; call prim_cons
  %rva7585196 = call i64 @prim_cons(i64 %arg7583212, i64 %rva7585197)                ; call prim_cons
  %cloptr7589956 = inttoptr i64 %a7581185 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7589957 = getelementptr inbounds i64, i64* %cloptr7589956, i64 0             ; &cloptr7589956[0]
  %f7589959 = load i64, i64* %i0ptr7589957, align 8                                  ; load; *i0ptr7589957
  %fptr7589958 = inttoptr i64 %f7589959 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589958(i64 %a7581185, i64 %rva7585196)             ; tail call
  ret void

else7589952:
  %arg7583217 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7589960, i32 0, i32 0)); quoted string
  %retprim7581379 = call i64 @prim_halt(i64 %arg7583217)                             ; call prim_halt
  %cloptr7589961 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7589962 = getelementptr inbounds i64, i64* %cloptr7589961, i64 0              ; &cloptr7589961[0]
  %f7589963 = ptrtoint void(i64,i64)* @lam7585853 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589963, i64* %eptr7589962                                             ; store fptr
  %arg7583220 = ptrtoint i64* %cloptr7589961 to i64                                  ; closure cast; i64* -> i64
  %arg7583219 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585207 = add i64 0, 0                                                         ; quoted ()
  %rva7585206 = call i64 @prim_cons(i64 %retprim7581379, i64 %rva7585207)            ; call prim_cons
  %rva7585205 = call i64 @prim_cons(i64 %arg7583219, i64 %rva7585206)                ; call prim_cons
  %cloptr7589964 = inttoptr i64 %arg7583220 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589965 = getelementptr inbounds i64, i64* %cloptr7589964, i64 0             ; &cloptr7589964[0]
  %f7589967 = load i64, i64* %i0ptr7589965, align 8                                  ; load; *i0ptr7589965
  %fptr7589966 = inttoptr i64 %f7589967 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589966(i64 %arg7583220, i64 %rva7585205)           ; tail call
  ret void
}


define void @lam7586227(i64 %env7586228, i64 %rvp7585189) {
  %envptr7589968 = inttoptr i64 %env7586228 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589969 = getelementptr inbounds i64, i64* %envptr7589968, i64 3            ; &envptr7589968[3]
  %m0I$_37_47 = load i64, i64* %envptr7589969, align 8                               ; load; *envptr7589969
  %envptr7589970 = inttoptr i64 %env7586228 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589971 = getelementptr inbounds i64, i64* %envptr7589970, i64 2            ; &envptr7589970[2]
  %z23$_37append = load i64, i64* %envptr7589971, align 8                            ; load; *envptr7589971
  %envptr7589972 = inttoptr i64 %env7586228 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589973 = getelementptr inbounds i64, i64* %envptr7589972, i64 1            ; &envptr7589972[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7589973, align 8                            ; load; *envptr7589973
  %cont7581311 = call i64 @prim_car(i64 %rvp7585189)                                 ; call prim_car
  %rvp7585188 = call i64 @prim_cdr(i64 %rvp7585189)                                  ; call prim_cdr
  %pZt$n = call i64 @prim_car(i64 %rvp7585188)                                       ; call prim_car
  %na7584659 = call i64 @prim_cdr(i64 %rvp7585188)                                   ; call prim_cdr
  %cloptr7589974 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7589975 = getelementptr inbounds i64, i64* %cloptr7589974, i64 0              ; &cloptr7589974[0]
  %f7589976 = ptrtoint void(i64,i64)* @lam7586225 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589976, i64* %eptr7589975                                             ; store fptr
  %arg7582655 = ptrtoint i64* %cloptr7589974 to i64                                  ; closure cast; i64* -> i64
  %cloptr7589977 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7589979 = getelementptr inbounds i64, i64* %cloptr7589977, i64 1              ; &eptr7589979[1]
  %eptr7589980 = getelementptr inbounds i64, i64* %cloptr7589977, i64 2              ; &eptr7589980[2]
  %eptr7589981 = getelementptr inbounds i64, i64* %cloptr7589977, i64 3              ; &eptr7589981[3]
  %eptr7589982 = getelementptr inbounds i64, i64* %cloptr7589977, i64 4              ; &eptr7589982[4]
  %eptr7589983 = getelementptr inbounds i64, i64* %cloptr7589977, i64 5              ; &eptr7589983[5]
  store i64 %ajE$_37foldl1, i64* %eptr7589979                                        ; *eptr7589979 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7589980                                        ; *eptr7589980 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7589981                                           ; *eptr7589981 = %m0I$_37_47
  store i64 %pZt$n, i64* %eptr7589982                                                ; *eptr7589982 = %pZt$n
  store i64 %cont7581311, i64* %eptr7589983                                          ; *eptr7589983 = %cont7581311
  %eptr7589978 = getelementptr inbounds i64, i64* %cloptr7589977, i64 0              ; &cloptr7589977[0]
  %f7589984 = ptrtoint void(i64,i64)* @lam7586221 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7589984, i64* %eptr7589978                                             ; store fptr
  %arg7582654 = ptrtoint i64* %cloptr7589977 to i64                                  ; closure cast; i64* -> i64
  %rva7585187 = add i64 0, 0                                                         ; quoted ()
  %rva7585186 = call i64 @prim_cons(i64 %arg7582654, i64 %rva7585187)                ; call prim_cons
  %cloptr7589985 = inttoptr i64 %arg7582655 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7589986 = getelementptr inbounds i64, i64* %cloptr7589985, i64 0             ; &cloptr7589985[0]
  %f7589988 = load i64, i64* %i0ptr7589986, align 8                                  ; load; *i0ptr7589986
  %fptr7589987 = inttoptr i64 %f7589988 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589987(i64 %arg7582655, i64 %rva7585186)           ; tail call
  ret void
}


define void @lam7586225(i64 %env7586226, i64 %Iu6$lst7581378) {
  %cont7581377 = call i64 @prim_car(i64 %Iu6$lst7581378)                             ; call prim_car
  %Iu6$lst = call i64 @prim_cdr(i64 %Iu6$lst7581378)                                 ; call prim_cdr
  %arg7582659 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584662 = add i64 0, 0                                                         ; quoted ()
  %rva7584661 = call i64 @prim_cons(i64 %Iu6$lst, i64 %rva7584662)                   ; call prim_cons
  %rva7584660 = call i64 @prim_cons(i64 %arg7582659, i64 %rva7584661)                ; call prim_cons
  %cloptr7589989 = inttoptr i64 %cont7581377 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7589990 = getelementptr inbounds i64, i64* %cloptr7589989, i64 0             ; &cloptr7589989[0]
  %f7589992 = load i64, i64* %i0ptr7589990, align 8                                  ; load; *i0ptr7589990
  %fptr7589991 = inttoptr i64 %f7589992 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7589991(i64 %cont7581377, i64 %rva7584660)          ; tail call
  ret void
}


define void @lam7586221(i64 %env7586222, i64 %rvp7585185) {
  %envptr7589993 = inttoptr i64 %env7586222 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589994 = getelementptr inbounds i64, i64* %envptr7589993, i64 5            ; &envptr7589993[5]
  %cont7581311 = load i64, i64* %envptr7589994, align 8                              ; load; *envptr7589994
  %envptr7589995 = inttoptr i64 %env7586222 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589996 = getelementptr inbounds i64, i64* %envptr7589995, i64 4            ; &envptr7589995[4]
  %pZt$n = load i64, i64* %envptr7589996, align 8                                    ; load; *envptr7589996
  %envptr7589997 = inttoptr i64 %env7586222 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7589998 = getelementptr inbounds i64, i64* %envptr7589997, i64 3            ; &envptr7589997[3]
  %m0I$_37_47 = load i64, i64* %envptr7589998, align 8                               ; load; *envptr7589998
  %envptr7589999 = inttoptr i64 %env7586222 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590000 = getelementptr inbounds i64, i64* %envptr7589999, i64 2            ; &envptr7589999[2]
  %z23$_37append = load i64, i64* %envptr7590000, align 8                            ; load; *envptr7590000
  %envptr7590001 = inttoptr i64 %env7586222 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590002 = getelementptr inbounds i64, i64* %envptr7590001, i64 1            ; &envptr7590001[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590002, align 8                            ; load; *envptr7590002
  %_957581375 = call i64 @prim_car(i64 %rvp7585185)                                  ; call prim_car
  %rvp7585184 = call i64 @prim_cdr(i64 %rvp7585185)                                  ; call prim_cdr
  %a7581116 = call i64 @prim_car(i64 %rvp7585184)                                    ; call prim_car
  %na7584664 = call i64 @prim_cdr(i64 %rvp7585184)                                   ; call prim_cdr
  %arg7582662 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581376 = call i64 @prim_make_45vector(i64 %arg7582662, i64 %a7581116)     ; call prim_make_45vector
  %cloptr7590003 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7590005 = getelementptr inbounds i64, i64* %cloptr7590003, i64 1              ; &eptr7590005[1]
  %eptr7590006 = getelementptr inbounds i64, i64* %cloptr7590003, i64 2              ; &eptr7590006[2]
  %eptr7590007 = getelementptr inbounds i64, i64* %cloptr7590003, i64 3              ; &eptr7590007[3]
  %eptr7590008 = getelementptr inbounds i64, i64* %cloptr7590003, i64 4              ; &eptr7590008[4]
  %eptr7590009 = getelementptr inbounds i64, i64* %cloptr7590003, i64 5              ; &eptr7590009[5]
  store i64 %ajE$_37foldl1, i64* %eptr7590005                                        ; *eptr7590005 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7590006                                        ; *eptr7590006 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7590007                                           ; *eptr7590007 = %m0I$_37_47
  store i64 %pZt$n, i64* %eptr7590008                                                ; *eptr7590008 = %pZt$n
  store i64 %cont7581311, i64* %eptr7590009                                          ; *eptr7590009 = %cont7581311
  %eptr7590004 = getelementptr inbounds i64, i64* %cloptr7590003, i64 0              ; &cloptr7590003[0]
  %f7590010 = ptrtoint void(i64,i64)* @lam7586218 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590010, i64* %eptr7590004                                             ; store fptr
  %arg7582665 = ptrtoint i64* %cloptr7590003 to i64                                  ; closure cast; i64* -> i64
  %arg7582664 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585183 = add i64 0, 0                                                         ; quoted ()
  %rva7585182 = call i64 @prim_cons(i64 %retprim7581376, i64 %rva7585183)            ; call prim_cons
  %rva7585181 = call i64 @prim_cons(i64 %arg7582664, i64 %rva7585182)                ; call prim_cons
  %cloptr7590011 = inttoptr i64 %arg7582665 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590012 = getelementptr inbounds i64, i64* %cloptr7590011, i64 0             ; &cloptr7590011[0]
  %f7590014 = load i64, i64* %i0ptr7590012, align 8                                  ; load; *i0ptr7590012
  %fptr7590013 = inttoptr i64 %f7590014 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590013(i64 %arg7582665, i64 %rva7585181)           ; tail call
  ret void
}


define void @lam7586218(i64 %env7586219, i64 %rvp7585180) {
  %envptr7590015 = inttoptr i64 %env7586219 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590016 = getelementptr inbounds i64, i64* %envptr7590015, i64 5            ; &envptr7590015[5]
  %cont7581311 = load i64, i64* %envptr7590016, align 8                              ; load; *envptr7590016
  %envptr7590017 = inttoptr i64 %env7586219 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590018 = getelementptr inbounds i64, i64* %envptr7590017, i64 4            ; &envptr7590017[4]
  %pZt$n = load i64, i64* %envptr7590018, align 8                                    ; load; *envptr7590018
  %envptr7590019 = inttoptr i64 %env7586219 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590020 = getelementptr inbounds i64, i64* %envptr7590019, i64 3            ; &envptr7590019[3]
  %m0I$_37_47 = load i64, i64* %envptr7590020, align 8                               ; load; *envptr7590020
  %envptr7590021 = inttoptr i64 %env7586219 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590022 = getelementptr inbounds i64, i64* %envptr7590021, i64 2            ; &envptr7590021[2]
  %z23$_37append = load i64, i64* %envptr7590022, align 8                            ; load; *envptr7590022
  %envptr7590023 = inttoptr i64 %env7586219 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590024 = getelementptr inbounds i64, i64* %envptr7590023, i64 1            ; &envptr7590023[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590024, align 8                            ; load; *envptr7590024
  %_957581312 = call i64 @prim_car(i64 %rvp7585180)                                  ; call prim_car
  %rvp7585179 = call i64 @prim_cdr(i64 %rvp7585180)                                  ; call prim_cdr
  %SHC$one_45to = call i64 @prim_car(i64 %rvp7585179)                                ; call prim_car
  %na7584666 = call i64 @prim_cdr(i64 %rvp7585179)                                   ; call prim_cdr
  %cloptr7590025 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590026 = getelementptr inbounds i64, i64* %cloptr7590025, i64 0              ; &cloptr7590025[0]
  %f7590027 = ptrtoint void(i64,i64)* @lam7586216 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590027, i64* %eptr7590026                                             ; store fptr
  %arg7582667 = ptrtoint i64* %cloptr7590025 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590028 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7590030 = getelementptr inbounds i64, i64* %cloptr7590028, i64 1              ; &eptr7590030[1]
  %eptr7590031 = getelementptr inbounds i64, i64* %cloptr7590028, i64 2              ; &eptr7590031[2]
  %eptr7590032 = getelementptr inbounds i64, i64* %cloptr7590028, i64 3              ; &eptr7590032[3]
  %eptr7590033 = getelementptr inbounds i64, i64* %cloptr7590028, i64 4              ; &eptr7590033[4]
  %eptr7590034 = getelementptr inbounds i64, i64* %cloptr7590028, i64 5              ; &eptr7590034[5]
  %eptr7590035 = getelementptr inbounds i64, i64* %cloptr7590028, i64 6              ; &eptr7590035[6]
  store i64 %ajE$_37foldl1, i64* %eptr7590030                                        ; *eptr7590030 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7590031                                        ; *eptr7590031 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7590032                                           ; *eptr7590032 = %m0I$_37_47
  store i64 %pZt$n, i64* %eptr7590033                                                ; *eptr7590033 = %pZt$n
  store i64 %cont7581311, i64* %eptr7590034                                          ; *eptr7590034 = %cont7581311
  store i64 %SHC$one_45to, i64* %eptr7590035                                         ; *eptr7590035 = %SHC$one_45to
  %eptr7590029 = getelementptr inbounds i64, i64* %cloptr7590028, i64 0              ; &cloptr7590028[0]
  %f7590036 = ptrtoint void(i64,i64)* @lam7586212 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590036, i64* %eptr7590029                                             ; store fptr
  %arg7582666 = ptrtoint i64* %cloptr7590028 to i64                                  ; closure cast; i64* -> i64
  %rva7585178 = add i64 0, 0                                                         ; quoted ()
  %rva7585177 = call i64 @prim_cons(i64 %arg7582666, i64 %rva7585178)                ; call prim_cons
  %cloptr7590037 = inttoptr i64 %arg7582667 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590038 = getelementptr inbounds i64, i64* %cloptr7590037, i64 0             ; &cloptr7590037[0]
  %f7590040 = load i64, i64* %i0ptr7590038, align 8                                  ; load; *i0ptr7590038
  %fptr7590039 = inttoptr i64 %f7590040 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590039(i64 %arg7582667, i64 %rva7585177)           ; tail call
  ret void
}


define void @lam7586216(i64 %env7586217, i64 %VYX$lst7581374) {
  %cont7581373 = call i64 @prim_car(i64 %VYX$lst7581374)                             ; call prim_car
  %VYX$lst = call i64 @prim_cdr(i64 %VYX$lst7581374)                                 ; call prim_cdr
  %arg7582671 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584669 = add i64 0, 0                                                         ; quoted ()
  %rva7584668 = call i64 @prim_cons(i64 %VYX$lst, i64 %rva7584669)                   ; call prim_cons
  %rva7584667 = call i64 @prim_cons(i64 %arg7582671, i64 %rva7584668)                ; call prim_cons
  %cloptr7590041 = inttoptr i64 %cont7581373 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590042 = getelementptr inbounds i64, i64* %cloptr7590041, i64 0             ; &cloptr7590041[0]
  %f7590044 = load i64, i64* %i0ptr7590042, align 8                                  ; load; *i0ptr7590042
  %fptr7590043 = inttoptr i64 %f7590044 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590043(i64 %cont7581373, i64 %rva7584667)          ; tail call
  ret void
}


define void @lam7586212(i64 %env7586213, i64 %rvp7585176) {
  %envptr7590045 = inttoptr i64 %env7586213 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590046 = getelementptr inbounds i64, i64* %envptr7590045, i64 6            ; &envptr7590045[6]
  %SHC$one_45to = load i64, i64* %envptr7590046, align 8                             ; load; *envptr7590046
  %envptr7590047 = inttoptr i64 %env7586213 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590048 = getelementptr inbounds i64, i64* %envptr7590047, i64 5            ; &envptr7590047[5]
  %cont7581311 = load i64, i64* %envptr7590048, align 8                              ; load; *envptr7590048
  %envptr7590049 = inttoptr i64 %env7586213 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590050 = getelementptr inbounds i64, i64* %envptr7590049, i64 4            ; &envptr7590049[4]
  %pZt$n = load i64, i64* %envptr7590050, align 8                                    ; load; *envptr7590050
  %envptr7590051 = inttoptr i64 %env7586213 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590052 = getelementptr inbounds i64, i64* %envptr7590051, i64 3            ; &envptr7590051[3]
  %m0I$_37_47 = load i64, i64* %envptr7590052, align 8                               ; load; *envptr7590052
  %envptr7590053 = inttoptr i64 %env7586213 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590054 = getelementptr inbounds i64, i64* %envptr7590053, i64 2            ; &envptr7590053[2]
  %z23$_37append = load i64, i64* %envptr7590054, align 8                            ; load; *envptr7590054
  %envptr7590055 = inttoptr i64 %env7586213 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590056 = getelementptr inbounds i64, i64* %envptr7590055, i64 1            ; &envptr7590055[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590056, align 8                            ; load; *envptr7590056
  %_957581371 = call i64 @prim_car(i64 %rvp7585176)                                  ; call prim_car
  %rvp7585175 = call i64 @prim_cdr(i64 %rvp7585176)                                  ; call prim_cdr
  %a7581117 = call i64 @prim_car(i64 %rvp7585175)                                    ; call prim_car
  %na7584671 = call i64 @prim_cdr(i64 %rvp7585175)                                   ; call prim_cdr
  %arg7582674 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581372 = call i64 @prim_make_45vector(i64 %arg7582674, i64 %a7581117)     ; call prim_make_45vector
  %cloptr7590057 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7590059 = getelementptr inbounds i64, i64* %cloptr7590057, i64 1              ; &eptr7590059[1]
  %eptr7590060 = getelementptr inbounds i64, i64* %cloptr7590057, i64 2              ; &eptr7590060[2]
  %eptr7590061 = getelementptr inbounds i64, i64* %cloptr7590057, i64 3              ; &eptr7590061[3]
  %eptr7590062 = getelementptr inbounds i64, i64* %cloptr7590057, i64 4              ; &eptr7590062[4]
  %eptr7590063 = getelementptr inbounds i64, i64* %cloptr7590057, i64 5              ; &eptr7590063[5]
  %eptr7590064 = getelementptr inbounds i64, i64* %cloptr7590057, i64 6              ; &eptr7590064[6]
  store i64 %ajE$_37foldl1, i64* %eptr7590059                                        ; *eptr7590059 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7590060                                        ; *eptr7590060 = %z23$_37append
  store i64 %m0I$_37_47, i64* %eptr7590061                                           ; *eptr7590061 = %m0I$_37_47
  store i64 %pZt$n, i64* %eptr7590062                                                ; *eptr7590062 = %pZt$n
  store i64 %cont7581311, i64* %eptr7590063                                          ; *eptr7590063 = %cont7581311
  store i64 %SHC$one_45to, i64* %eptr7590064                                         ; *eptr7590064 = %SHC$one_45to
  %eptr7590058 = getelementptr inbounds i64, i64* %cloptr7590057, i64 0              ; &cloptr7590057[0]
  %f7590065 = ptrtoint void(i64,i64)* @lam7586209 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590065, i64* %eptr7590058                                             ; store fptr
  %arg7582677 = ptrtoint i64* %cloptr7590057 to i64                                  ; closure cast; i64* -> i64
  %arg7582676 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585174 = add i64 0, 0                                                         ; quoted ()
  %rva7585173 = call i64 @prim_cons(i64 %retprim7581372, i64 %rva7585174)            ; call prim_cons
  %rva7585172 = call i64 @prim_cons(i64 %arg7582676, i64 %rva7585173)                ; call prim_cons
  %cloptr7590066 = inttoptr i64 %arg7582677 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590067 = getelementptr inbounds i64, i64* %cloptr7590066, i64 0             ; &cloptr7590066[0]
  %f7590069 = load i64, i64* %i0ptr7590067, align 8                                  ; load; *i0ptr7590067
  %fptr7590068 = inttoptr i64 %f7590069 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590068(i64 %arg7582677, i64 %rva7585172)           ; tail call
  ret void
}


define void @lam7586209(i64 %env7586210, i64 %rvp7585171) {
  %envptr7590070 = inttoptr i64 %env7586210 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590071 = getelementptr inbounds i64, i64* %envptr7590070, i64 6            ; &envptr7590070[6]
  %SHC$one_45to = load i64, i64* %envptr7590071, align 8                             ; load; *envptr7590071
  %envptr7590072 = inttoptr i64 %env7586210 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590073 = getelementptr inbounds i64, i64* %envptr7590072, i64 5            ; &envptr7590072[5]
  %cont7581311 = load i64, i64* %envptr7590073, align 8                              ; load; *envptr7590073
  %envptr7590074 = inttoptr i64 %env7586210 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590075 = getelementptr inbounds i64, i64* %envptr7590074, i64 4            ; &envptr7590074[4]
  %pZt$n = load i64, i64* %envptr7590075, align 8                                    ; load; *envptr7590075
  %envptr7590076 = inttoptr i64 %env7586210 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590077 = getelementptr inbounds i64, i64* %envptr7590076, i64 3            ; &envptr7590076[3]
  %m0I$_37_47 = load i64, i64* %envptr7590077, align 8                               ; load; *envptr7590077
  %envptr7590078 = inttoptr i64 %env7586210 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590079 = getelementptr inbounds i64, i64* %envptr7590078, i64 2            ; &envptr7590078[2]
  %z23$_37append = load i64, i64* %envptr7590079, align 8                            ; load; *envptr7590079
  %envptr7590080 = inttoptr i64 %env7586210 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590081 = getelementptr inbounds i64, i64* %envptr7590080, i64 1            ; &envptr7590080[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590081, align 8                            ; load; *envptr7590081
  %_957581313 = call i64 @prim_car(i64 %rvp7585171)                                  ; call prim_car
  %rvp7585170 = call i64 @prim_cdr(i64 %rvp7585171)                                  ; call prim_cdr
  %DNM$my_45try = call i64 @prim_car(i64 %rvp7585170)                                ; call prim_car
  %na7584673 = call i64 @prim_cdr(i64 %rvp7585170)                                   ; call prim_cdr
  %cloptr7590082 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590083 = getelementptr inbounds i64, i64* %cloptr7590082, i64 0              ; &cloptr7590082[0]
  %f7590084 = ptrtoint void(i64,i64)* @lam7586207 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590084, i64* %eptr7590083                                             ; store fptr
  %arg7582679 = ptrtoint i64* %cloptr7590082 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590085 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7590087 = getelementptr inbounds i64, i64* %cloptr7590085, i64 1              ; &eptr7590087[1]
  %eptr7590088 = getelementptr inbounds i64, i64* %cloptr7590085, i64 2              ; &eptr7590088[2]
  %eptr7590089 = getelementptr inbounds i64, i64* %cloptr7590085, i64 3              ; &eptr7590089[3]
  %eptr7590090 = getelementptr inbounds i64, i64* %cloptr7590085, i64 4              ; &eptr7590090[4]
  %eptr7590091 = getelementptr inbounds i64, i64* %cloptr7590085, i64 5              ; &eptr7590091[5]
  %eptr7590092 = getelementptr inbounds i64, i64* %cloptr7590085, i64 6              ; &eptr7590092[6]
  %eptr7590093 = getelementptr inbounds i64, i64* %cloptr7590085, i64 7              ; &eptr7590093[7]
  store i64 %ajE$_37foldl1, i64* %eptr7590087                                        ; *eptr7590087 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7590088                                        ; *eptr7590088 = %z23$_37append
  store i64 %DNM$my_45try, i64* %eptr7590089                                         ; *eptr7590089 = %DNM$my_45try
  store i64 %m0I$_37_47, i64* %eptr7590090                                           ; *eptr7590090 = %m0I$_37_47
  store i64 %pZt$n, i64* %eptr7590091                                                ; *eptr7590091 = %pZt$n
  store i64 %cont7581311, i64* %eptr7590092                                          ; *eptr7590092 = %cont7581311
  store i64 %SHC$one_45to, i64* %eptr7590093                                         ; *eptr7590093 = %SHC$one_45to
  %eptr7590086 = getelementptr inbounds i64, i64* %cloptr7590085, i64 0              ; &cloptr7590085[0]
  %f7590094 = ptrtoint void(i64,i64)* @lam7586203 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590094, i64* %eptr7590086                                             ; store fptr
  %arg7582678 = ptrtoint i64* %cloptr7590085 to i64                                  ; closure cast; i64* -> i64
  %rva7585169 = add i64 0, 0                                                         ; quoted ()
  %rva7585168 = call i64 @prim_cons(i64 %arg7582678, i64 %rva7585169)                ; call prim_cons
  %cloptr7590095 = inttoptr i64 %arg7582679 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590096 = getelementptr inbounds i64, i64* %cloptr7590095, i64 0             ; &cloptr7590095[0]
  %f7590098 = load i64, i64* %i0ptr7590096, align 8                                  ; load; *i0ptr7590096
  %fptr7590097 = inttoptr i64 %f7590098 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590097(i64 %arg7582679, i64 %rva7585168)           ; tail call
  ret void
}


define void @lam7586207(i64 %env7586208, i64 %Pyb$lst7581370) {
  %cont7581369 = call i64 @prim_car(i64 %Pyb$lst7581370)                             ; call prim_car
  %Pyb$lst = call i64 @prim_cdr(i64 %Pyb$lst7581370)                                 ; call prim_cdr
  %arg7582683 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584676 = add i64 0, 0                                                         ; quoted ()
  %rva7584675 = call i64 @prim_cons(i64 %Pyb$lst, i64 %rva7584676)                   ; call prim_cons
  %rva7584674 = call i64 @prim_cons(i64 %arg7582683, i64 %rva7584675)                ; call prim_cons
  %cloptr7590099 = inttoptr i64 %cont7581369 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590100 = getelementptr inbounds i64, i64* %cloptr7590099, i64 0             ; &cloptr7590099[0]
  %f7590102 = load i64, i64* %i0ptr7590100, align 8                                  ; load; *i0ptr7590100
  %fptr7590101 = inttoptr i64 %f7590102 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590101(i64 %cont7581369, i64 %rva7584674)          ; tail call
  ret void
}


define void @lam7586203(i64 %env7586204, i64 %rvp7585167) {
  %envptr7590103 = inttoptr i64 %env7586204 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590104 = getelementptr inbounds i64, i64* %envptr7590103, i64 7            ; &envptr7590103[7]
  %SHC$one_45to = load i64, i64* %envptr7590104, align 8                             ; load; *envptr7590104
  %envptr7590105 = inttoptr i64 %env7586204 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590106 = getelementptr inbounds i64, i64* %envptr7590105, i64 6            ; &envptr7590105[6]
  %cont7581311 = load i64, i64* %envptr7590106, align 8                              ; load; *envptr7590106
  %envptr7590107 = inttoptr i64 %env7586204 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590108 = getelementptr inbounds i64, i64* %envptr7590107, i64 5            ; &envptr7590107[5]
  %pZt$n = load i64, i64* %envptr7590108, align 8                                    ; load; *envptr7590108
  %envptr7590109 = inttoptr i64 %env7586204 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590110 = getelementptr inbounds i64, i64* %envptr7590109, i64 4            ; &envptr7590109[4]
  %m0I$_37_47 = load i64, i64* %envptr7590110, align 8                               ; load; *envptr7590110
  %envptr7590111 = inttoptr i64 %env7586204 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590112 = getelementptr inbounds i64, i64* %envptr7590111, i64 3            ; &envptr7590111[3]
  %DNM$my_45try = load i64, i64* %envptr7590112, align 8                             ; load; *envptr7590112
  %envptr7590113 = inttoptr i64 %env7586204 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590114 = getelementptr inbounds i64, i64* %envptr7590113, i64 2            ; &envptr7590113[2]
  %z23$_37append = load i64, i64* %envptr7590114, align 8                            ; load; *envptr7590114
  %envptr7590115 = inttoptr i64 %env7586204 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590116 = getelementptr inbounds i64, i64* %envptr7590115, i64 1            ; &envptr7590115[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590116, align 8                            ; load; *envptr7590116
  %_957581367 = call i64 @prim_car(i64 %rvp7585167)                                  ; call prim_car
  %rvp7585166 = call i64 @prim_cdr(i64 %rvp7585167)                                  ; call prim_cdr
  %a7581118 = call i64 @prim_car(i64 %rvp7585166)                                    ; call prim_car
  %na7584678 = call i64 @prim_cdr(i64 %rvp7585166)                                   ; call prim_cdr
  %arg7582686 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581368 = call i64 @prim_make_45vector(i64 %arg7582686, i64 %a7581118)     ; call prim_make_45vector
  %cloptr7590117 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7590119 = getelementptr inbounds i64, i64* %cloptr7590117, i64 1              ; &eptr7590119[1]
  %eptr7590120 = getelementptr inbounds i64, i64* %cloptr7590117, i64 2              ; &eptr7590120[2]
  %eptr7590121 = getelementptr inbounds i64, i64* %cloptr7590117, i64 3              ; &eptr7590121[3]
  %eptr7590122 = getelementptr inbounds i64, i64* %cloptr7590117, i64 4              ; &eptr7590122[4]
  %eptr7590123 = getelementptr inbounds i64, i64* %cloptr7590117, i64 5              ; &eptr7590123[5]
  %eptr7590124 = getelementptr inbounds i64, i64* %cloptr7590117, i64 6              ; &eptr7590124[6]
  %eptr7590125 = getelementptr inbounds i64, i64* %cloptr7590117, i64 7              ; &eptr7590125[7]
  store i64 %ajE$_37foldl1, i64* %eptr7590119                                        ; *eptr7590119 = %ajE$_37foldl1
  store i64 %z23$_37append, i64* %eptr7590120                                        ; *eptr7590120 = %z23$_37append
  store i64 %DNM$my_45try, i64* %eptr7590121                                         ; *eptr7590121 = %DNM$my_45try
  store i64 %m0I$_37_47, i64* %eptr7590122                                           ; *eptr7590122 = %m0I$_37_47
  store i64 %pZt$n, i64* %eptr7590123                                                ; *eptr7590123 = %pZt$n
  store i64 %cont7581311, i64* %eptr7590124                                          ; *eptr7590124 = %cont7581311
  store i64 %SHC$one_45to, i64* %eptr7590125                                         ; *eptr7590125 = %SHC$one_45to
  %eptr7590118 = getelementptr inbounds i64, i64* %cloptr7590117, i64 0              ; &cloptr7590117[0]
  %f7590126 = ptrtoint void(i64,i64)* @lam7586200 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590126, i64* %eptr7590118                                             ; store fptr
  %arg7582689 = ptrtoint i64* %cloptr7590117 to i64                                  ; closure cast; i64* -> i64
  %arg7582688 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585165 = add i64 0, 0                                                         ; quoted ()
  %rva7585164 = call i64 @prim_cons(i64 %retprim7581368, i64 %rva7585165)            ; call prim_cons
  %rva7585163 = call i64 @prim_cons(i64 %arg7582688, i64 %rva7585164)                ; call prim_cons
  %cloptr7590127 = inttoptr i64 %arg7582689 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590128 = getelementptr inbounds i64, i64* %cloptr7590127, i64 0             ; &cloptr7590127[0]
  %f7590130 = load i64, i64* %i0ptr7590128, align 8                                  ; load; *i0ptr7590128
  %fptr7590129 = inttoptr i64 %f7590130 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590129(i64 %arg7582689, i64 %rva7585163)           ; tail call
  ret void
}


define void @lam7586200(i64 %env7586201, i64 %rvp7585162) {
  %envptr7590131 = inttoptr i64 %env7586201 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590132 = getelementptr inbounds i64, i64* %envptr7590131, i64 7            ; &envptr7590131[7]
  %SHC$one_45to = load i64, i64* %envptr7590132, align 8                             ; load; *envptr7590132
  %envptr7590133 = inttoptr i64 %env7586201 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590134 = getelementptr inbounds i64, i64* %envptr7590133, i64 6            ; &envptr7590133[6]
  %cont7581311 = load i64, i64* %envptr7590134, align 8                              ; load; *envptr7590134
  %envptr7590135 = inttoptr i64 %env7586201 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590136 = getelementptr inbounds i64, i64* %envptr7590135, i64 5            ; &envptr7590135[5]
  %pZt$n = load i64, i64* %envptr7590136, align 8                                    ; load; *envptr7590136
  %envptr7590137 = inttoptr i64 %env7586201 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590138 = getelementptr inbounds i64, i64* %envptr7590137, i64 4            ; &envptr7590137[4]
  %m0I$_37_47 = load i64, i64* %envptr7590138, align 8                               ; load; *envptr7590138
  %envptr7590139 = inttoptr i64 %env7586201 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590140 = getelementptr inbounds i64, i64* %envptr7590139, i64 3            ; &envptr7590139[3]
  %DNM$my_45try = load i64, i64* %envptr7590140, align 8                             ; load; *envptr7590140
  %envptr7590141 = inttoptr i64 %env7586201 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590142 = getelementptr inbounds i64, i64* %envptr7590141, i64 2            ; &envptr7590141[2]
  %z23$_37append = load i64, i64* %envptr7590142, align 8                            ; load; *envptr7590142
  %envptr7590143 = inttoptr i64 %env7586201 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590144 = getelementptr inbounds i64, i64* %envptr7590143, i64 1            ; &envptr7590143[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590144, align 8                            ; load; *envptr7590144
  %_957581314 = call i64 @prim_car(i64 %rvp7585162)                                  ; call prim_car
  %rvp7585161 = call i64 @prim_cdr(i64 %rvp7585162)                                  ; call prim_cdr
  %E10$ok_63 = call i64 @prim_car(i64 %rvp7585161)                                   ; call prim_car
  %na7584680 = call i64 @prim_cdr(i64 %rvp7585161)                                   ; call prim_cdr
  %arg7582691 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7590145 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590146 = getelementptr inbounds i64, i64* %cloptr7590145, i64 0              ; &cloptr7590145[0]
  %f7590147 = ptrtoint void(i64,i64)* @lam7586197 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590147, i64* %eptr7590146                                             ; store fptr
  %arg7582690 = ptrtoint i64* %cloptr7590145 to i64                                  ; closure cast; i64* -> i64
  %RyG$_95t = call i64 @prim_vector_45set_33(i64 %SHC$one_45to, i64 %arg7582691, i64 %arg7582690); call prim_vector_45set_33
  %arg7582749 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7590148 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7590150 = getelementptr inbounds i64, i64* %cloptr7590148, i64 1              ; &eptr7590150[1]
  %eptr7590151 = getelementptr inbounds i64, i64* %cloptr7590148, i64 2              ; &eptr7590151[2]
  %eptr7590152 = getelementptr inbounds i64, i64* %cloptr7590148, i64 3              ; &eptr7590152[3]
  store i64 %z23$_37append, i64* %eptr7590150                                        ; *eptr7590150 = %z23$_37append
  store i64 %E10$ok_63, i64* %eptr7590151                                            ; *eptr7590151 = %E10$ok_63
  store i64 %DNM$my_45try, i64* %eptr7590152                                         ; *eptr7590152 = %DNM$my_45try
  %eptr7590149 = getelementptr inbounds i64, i64* %cloptr7590148, i64 0              ; &cloptr7590148[0]
  %f7590153 = ptrtoint void(i64,i64)* @lam7586157 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590153, i64* %eptr7590149                                             ; store fptr
  %arg7582748 = ptrtoint i64* %cloptr7590148 to i64                                  ; closure cast; i64* -> i64
  %rSb$_95t = call i64 @prim_vector_45set_33(i64 %DNM$my_45try, i64 %arg7582749, i64 %arg7582748); call prim_vector_45set_33
  %arg7583007 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7590154 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7590156 = getelementptr inbounds i64, i64* %cloptr7590154, i64 1              ; &eptr7590156[1]
  %eptr7590157 = getelementptr inbounds i64, i64* %cloptr7590154, i64 2              ; &eptr7590157[2]
  %eptr7590158 = getelementptr inbounds i64, i64* %cloptr7590154, i64 3              ; &eptr7590158[3]
  store i64 %ajE$_37foldl1, i64* %eptr7590156                                        ; *eptr7590156 = %ajE$_37foldl1
  store i64 %E10$ok_63, i64* %eptr7590157                                            ; *eptr7590157 = %E10$ok_63
  store i64 %m0I$_37_47, i64* %eptr7590158                                           ; *eptr7590158 = %m0I$_37_47
  %eptr7590155 = getelementptr inbounds i64, i64* %cloptr7590154, i64 0              ; &cloptr7590154[0]
  %f7590159 = ptrtoint void(i64,i64)* @lam7586003 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590159, i64* %eptr7590155                                             ; store fptr
  %arg7583006 = ptrtoint i64* %cloptr7590154 to i64                                  ; closure cast; i64* -> i64
  %cV1$_95t = call i64 @prim_vector_45set_33(i64 %E10$ok_63, i64 %arg7583007, i64 %arg7583006); call prim_vector_45set_33
  %arg7583147 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581174 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7583147)        ; call prim_vector_45ref
  %a7581175 = call i64 @prim_procedure_63(i64 %a7581174)                             ; call prim_procedure_63
  %cmp7590160 = icmp eq i64 %a7581175, 15                                            ; false?
  br i1 %cmp7590160, label %else7590162, label %then7590161                          ; if

then7590161:
  %arg7583150 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581176 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7583150)        ; call prim_vector_45ref
  %arg7583152 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581177 = call i64 @prim_vector_45ref(i64 %SHC$one_45to, i64 %arg7583152)        ; call prim_vector_45ref
  %a7581178 = call i64 @prim_procedure_63(i64 %a7581177)                             ; call prim_procedure_63
  %cmp7590163 = icmp eq i64 %a7581178, 15                                            ; false?
  br i1 %cmp7590163, label %else7590165, label %then7590164                          ; if

then7590164:
  %arg7583155 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581179 = call i64 @prim_vector_45ref(i64 %SHC$one_45to, i64 %arg7583155)        ; call prim_vector_45ref
  %cloptr7590166 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590168 = getelementptr inbounds i64, i64* %cloptr7590166, i64 1              ; &eptr7590168[1]
  %eptr7590169 = getelementptr inbounds i64, i64* %cloptr7590166, i64 2              ; &eptr7590169[2]
  store i64 %a7581176, i64* %eptr7590168                                             ; *eptr7590168 = %a7581176
  store i64 %cont7581311, i64* %eptr7590169                                          ; *eptr7590169 = %cont7581311
  %eptr7590167 = getelementptr inbounds i64, i64* %cloptr7590166, i64 0              ; &cloptr7590166[0]
  %f7590170 = ptrtoint void(i64,i64)* @lam7585882 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590170, i64* %eptr7590167                                             ; store fptr
  %arg7583158 = ptrtoint i64* %cloptr7590166 to i64                                  ; closure cast; i64* -> i64
  %rva7585127 = add i64 0, 0                                                         ; quoted ()
  %rva7585126 = call i64 @prim_cons(i64 %pZt$n, i64 %rva7585127)                     ; call prim_cons
  %rva7585125 = call i64 @prim_cons(i64 %arg7583158, i64 %rva7585126)                ; call prim_cons
  %cloptr7590171 = inttoptr i64 %a7581179 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590172 = getelementptr inbounds i64, i64* %cloptr7590171, i64 0             ; &cloptr7590171[0]
  %f7590174 = load i64, i64* %i0ptr7590172, align 8                                  ; load; *i0ptr7590172
  %fptr7590173 = inttoptr i64 %f7590174 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590173(i64 %a7581179, i64 %rva7585125)             ; tail call
  ret void

else7590165:
  %arg7583179 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590175, i32 0, i32 0)); quoted string
  %retprim7581365 = call i64 @prim_halt(i64 %arg7583179)                             ; call prim_halt
  %cloptr7590176 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590178 = getelementptr inbounds i64, i64* %cloptr7590176, i64 1              ; &eptr7590178[1]
  %eptr7590179 = getelementptr inbounds i64, i64* %cloptr7590176, i64 2              ; &eptr7590179[2]
  store i64 %a7581176, i64* %eptr7590178                                             ; *eptr7590178 = %a7581176
  store i64 %cont7581311, i64* %eptr7590179                                          ; *eptr7590179 = %cont7581311
  %eptr7590177 = getelementptr inbounds i64, i64* %cloptr7590176, i64 0              ; &cloptr7590176[0]
  %f7590180 = ptrtoint void(i64,i64)* @lam7585902 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590180, i64* %eptr7590177                                             ; store fptr
  %arg7583182 = ptrtoint i64* %cloptr7590176 to i64                                  ; closure cast; i64* -> i64
  %arg7583181 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585157 = add i64 0, 0                                                         ; quoted ()
  %rva7585156 = call i64 @prim_cons(i64 %retprim7581365, i64 %rva7585157)            ; call prim_cons
  %rva7585155 = call i64 @prim_cons(i64 %arg7583181, i64 %rva7585156)                ; call prim_cons
  %cloptr7590181 = inttoptr i64 %arg7583182 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590182 = getelementptr inbounds i64, i64* %cloptr7590181, i64 0             ; &cloptr7590181[0]
  %f7590184 = load i64, i64* %i0ptr7590182, align 8                                  ; load; *i0ptr7590182
  %fptr7590183 = inttoptr i64 %f7590184 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590183(i64 %arg7583182, i64 %rva7585155)           ; tail call
  ret void

else7590162:
  %arg7583202 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590185, i32 0, i32 0)); quoted string
  %retprim7581366 = call i64 @prim_halt(i64 %arg7583202)                             ; call prim_halt
  %arg7583204 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585160 = add i64 0, 0                                                         ; quoted ()
  %rva7585159 = call i64 @prim_cons(i64 %retprim7581366, i64 %rva7585160)            ; call prim_cons
  %rva7585158 = call i64 @prim_cons(i64 %arg7583204, i64 %rva7585159)                ; call prim_cons
  %cloptr7590186 = inttoptr i64 %cont7581311 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590187 = getelementptr inbounds i64, i64* %cloptr7590186, i64 0             ; &cloptr7590186[0]
  %f7590189 = load i64, i64* %i0ptr7590187, align 8                                  ; load; *i0ptr7590187
  %fptr7590188 = inttoptr i64 %f7590189 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590188(i64 %cont7581311, i64 %rva7585158)          ; tail call
  ret void
}


define void @lam7586197(i64 %env7586198, i64 %rvp7584731) {
  %cont7581315 = call i64 @prim_car(i64 %rvp7584731)                                 ; call prim_car
  %rvp7584730 = call i64 @prim_cdr(i64 %rvp7584731)                                  ; call prim_cdr
  %efP$n = call i64 @prim_car(i64 %rvp7584730)                                       ; call prim_car
  %na7584682 = call i64 @prim_cdr(i64 %rvp7584730)                                   ; call prim_cdr
  %cloptr7590190 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590191 = getelementptr inbounds i64, i64* %cloptr7590190, i64 0              ; &cloptr7590190[0]
  %f7590192 = ptrtoint void(i64,i64)* @lam7586195 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590192, i64* %eptr7590191                                             ; store fptr
  %arg7582694 = ptrtoint i64* %cloptr7590190 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590193 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590195 = getelementptr inbounds i64, i64* %cloptr7590193, i64 1              ; &eptr7590195[1]
  %eptr7590196 = getelementptr inbounds i64, i64* %cloptr7590193, i64 2              ; &eptr7590196[2]
  store i64 %efP$n, i64* %eptr7590195                                                ; *eptr7590195 = %efP$n
  store i64 %cont7581315, i64* %eptr7590196                                          ; *eptr7590196 = %cont7581315
  %eptr7590194 = getelementptr inbounds i64, i64* %cloptr7590193, i64 0              ; &cloptr7590193[0]
  %f7590197 = ptrtoint void(i64,i64)* @lam7586191 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590197, i64* %eptr7590194                                             ; store fptr
  %arg7582693 = ptrtoint i64* %cloptr7590193 to i64                                  ; closure cast; i64* -> i64
  %rva7584729 = add i64 0, 0                                                         ; quoted ()
  %rva7584728 = call i64 @prim_cons(i64 %arg7582693, i64 %rva7584729)                ; call prim_cons
  %cloptr7590198 = inttoptr i64 %arg7582694 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590199 = getelementptr inbounds i64, i64* %cloptr7590198, i64 0             ; &cloptr7590198[0]
  %f7590201 = load i64, i64* %i0ptr7590199, align 8                                  ; load; *i0ptr7590199
  %fptr7590200 = inttoptr i64 %f7590201 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590200(i64 %arg7582694, i64 %rva7584728)           ; tail call
  ret void
}


define void @lam7586195(i64 %env7586196, i64 %NjS$lst7581326) {
  %cont7581325 = call i64 @prim_car(i64 %NjS$lst7581326)                             ; call prim_car
  %NjS$lst = call i64 @prim_cdr(i64 %NjS$lst7581326)                                 ; call prim_cdr
  %arg7582698 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584685 = add i64 0, 0                                                         ; quoted ()
  %rva7584684 = call i64 @prim_cons(i64 %NjS$lst, i64 %rva7584685)                   ; call prim_cons
  %rva7584683 = call i64 @prim_cons(i64 %arg7582698, i64 %rva7584684)                ; call prim_cons
  %cloptr7590202 = inttoptr i64 %cont7581325 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590203 = getelementptr inbounds i64, i64* %cloptr7590202, i64 0             ; &cloptr7590202[0]
  %f7590205 = load i64, i64* %i0ptr7590203, align 8                                  ; load; *i0ptr7590203
  %fptr7590204 = inttoptr i64 %f7590205 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590204(i64 %cont7581325, i64 %rva7584683)          ; tail call
  ret void
}


define void @lam7586191(i64 %env7586192, i64 %rvp7584727) {
  %envptr7590206 = inttoptr i64 %env7586192 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590207 = getelementptr inbounds i64, i64* %envptr7590206, i64 2            ; &envptr7590206[2]
  %cont7581315 = load i64, i64* %envptr7590207, align 8                              ; load; *envptr7590207
  %envptr7590208 = inttoptr i64 %env7586192 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590209 = getelementptr inbounds i64, i64* %envptr7590208, i64 1            ; &envptr7590208[1]
  %efP$n = load i64, i64* %envptr7590209, align 8                                    ; load; *envptr7590209
  %_957581323 = call i64 @prim_car(i64 %rvp7584727)                                  ; call prim_car
  %rvp7584726 = call i64 @prim_cdr(i64 %rvp7584727)                                  ; call prim_cdr
  %a7581119 = call i64 @prim_car(i64 %rvp7584726)                                    ; call prim_car
  %na7584687 = call i64 @prim_cdr(i64 %rvp7584726)                                   ; call prim_cdr
  %arg7582701 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581324 = call i64 @prim_make_45vector(i64 %arg7582701, i64 %a7581119)     ; call prim_make_45vector
  %cloptr7590210 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590212 = getelementptr inbounds i64, i64* %cloptr7590210, i64 1              ; &eptr7590212[1]
  %eptr7590213 = getelementptr inbounds i64, i64* %cloptr7590210, i64 2              ; &eptr7590213[2]
  store i64 %efP$n, i64* %eptr7590212                                                ; *eptr7590212 = %efP$n
  store i64 %cont7581315, i64* %eptr7590213                                          ; *eptr7590213 = %cont7581315
  %eptr7590211 = getelementptr inbounds i64, i64* %cloptr7590210, i64 0              ; &cloptr7590210[0]
  %f7590214 = ptrtoint void(i64,i64)* @lam7586188 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590214, i64* %eptr7590211                                             ; store fptr
  %arg7582704 = ptrtoint i64* %cloptr7590210 to i64                                  ; closure cast; i64* -> i64
  %arg7582703 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584725 = add i64 0, 0                                                         ; quoted ()
  %rva7584724 = call i64 @prim_cons(i64 %retprim7581324, i64 %rva7584725)            ; call prim_cons
  %rva7584723 = call i64 @prim_cons(i64 %arg7582703, i64 %rva7584724)                ; call prim_cons
  %cloptr7590215 = inttoptr i64 %arg7582704 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590216 = getelementptr inbounds i64, i64* %cloptr7590215, i64 0             ; &cloptr7590215[0]
  %f7590218 = load i64, i64* %i0ptr7590216, align 8                                  ; load; *i0ptr7590216
  %fptr7590217 = inttoptr i64 %f7590218 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590217(i64 %arg7582704, i64 %rva7584723)           ; tail call
  ret void
}


define void @lam7586188(i64 %env7586189, i64 %rvp7584722) {
  %envptr7590219 = inttoptr i64 %env7586189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590220 = getelementptr inbounds i64, i64* %envptr7590219, i64 2            ; &envptr7590219[2]
  %cont7581315 = load i64, i64* %envptr7590220, align 8                              ; load; *envptr7590220
  %envptr7590221 = inttoptr i64 %env7586189 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590222 = getelementptr inbounds i64, i64* %envptr7590221, i64 1            ; &envptr7590221[1]
  %efP$n = load i64, i64* %envptr7590222, align 8                                    ; load; *envptr7590222
  %_957581316 = call i64 @prim_car(i64 %rvp7584722)                                  ; call prim_car
  %rvp7584721 = call i64 @prim_cdr(i64 %rvp7584722)                                  ; call prim_cdr
  %Vf9$loop = call i64 @prim_car(i64 %rvp7584721)                                    ; call prim_car
  %na7584689 = call i64 @prim_cdr(i64 %rvp7584721)                                   ; call prim_cdr
  %cloptr7590223 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7590225 = getelementptr inbounds i64, i64* %cloptr7590223, i64 1              ; &eptr7590225[1]
  store i64 %Vf9$loop, i64* %eptr7590225                                             ; *eptr7590225 = %Vf9$loop
  %eptr7590224 = getelementptr inbounds i64, i64* %cloptr7590223, i64 0              ; &cloptr7590223[0]
  %f7590226 = ptrtoint void(i64,i64)* @lam7586186 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590226, i64* %eptr7590224                                             ; store fptr
  %QMo$loop7580967 = ptrtoint i64* %cloptr7590223 to i64                             ; closure cast; i64* -> i64
  %arg7582726 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %Z6f$_95t = call i64 @prim_vector_45set_33(i64 %Vf9$loop, i64 %arg7582726, i64 %QMo$loop7580967); call prim_vector_45set_33
  %arg7582728 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581125 = call i64 @prim_vector_45ref(i64 %Vf9$loop, i64 %arg7582728)            ; call prim_vector_45ref
  %a7581126 = call i64 @prim_procedure_63(i64 %a7581125)                             ; call prim_procedure_63
  %cmp7590227 = icmp eq i64 %a7581126, 15                                            ; false?
  br i1 %cmp7590227, label %else7590229, label %then7590228                          ; if

then7590228:
  %arg7582731 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581127 = call i64 @prim_vector_45ref(i64 %Vf9$loop, i64 %arg7582731)            ; call prim_vector_45ref
  %cloptr7590230 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590231 = getelementptr inbounds i64, i64* %cloptr7590230, i64 0              ; &cloptr7590230[0]
  %f7590232 = ptrtoint void(i64,i64)* @lam7586169 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590232, i64* %eptr7590231                                             ; store fptr
  %arg7582734 = ptrtoint i64* %cloptr7590230 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590233 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7590235 = getelementptr inbounds i64, i64* %cloptr7590233, i64 1              ; &eptr7590235[1]
  %eptr7590236 = getelementptr inbounds i64, i64* %cloptr7590233, i64 2              ; &eptr7590236[2]
  %eptr7590237 = getelementptr inbounds i64, i64* %cloptr7590233, i64 3              ; &eptr7590237[3]
  store i64 %efP$n, i64* %eptr7590235                                                ; *eptr7590235 = %efP$n
  store i64 %cont7581315, i64* %eptr7590236                                          ; *eptr7590236 = %cont7581315
  store i64 %a7581127, i64* %eptr7590237                                             ; *eptr7590237 = %a7581127
  %eptr7590234 = getelementptr inbounds i64, i64* %cloptr7590233, i64 0              ; &cloptr7590233[0]
  %f7590238 = ptrtoint void(i64,i64)* @lam7586165 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590238, i64* %eptr7590234                                             ; store fptr
  %arg7582733 = ptrtoint i64* %cloptr7590233 to i64                                  ; closure cast; i64* -> i64
  %rva7584717 = add i64 0, 0                                                         ; quoted ()
  %rva7584716 = call i64 @prim_cons(i64 %arg7582733, i64 %rva7584717)                ; call prim_cons
  %cloptr7590239 = inttoptr i64 %arg7582734 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590240 = getelementptr inbounds i64, i64* %cloptr7590239, i64 0             ; &cloptr7590239[0]
  %f7590242 = load i64, i64* %i0ptr7590240, align 8                                  ; load; *i0ptr7590240
  %fptr7590241 = inttoptr i64 %f7590242 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590241(i64 %arg7582734, i64 %rva7584716)           ; tail call
  ret void

else7590229:
  %arg7582744 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590243, i32 0, i32 0)); quoted string
  %retprim7581322 = call i64 @prim_halt(i64 %arg7582744)                             ; call prim_halt
  %arg7582746 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584720 = add i64 0, 0                                                         ; quoted ()
  %rva7584719 = call i64 @prim_cons(i64 %retprim7581322, i64 %rva7584720)            ; call prim_cons
  %rva7584718 = call i64 @prim_cons(i64 %arg7582746, i64 %rva7584719)                ; call prim_cons
  %cloptr7590244 = inttoptr i64 %cont7581315 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590245 = getelementptr inbounds i64, i64* %cloptr7590244, i64 0             ; &cloptr7590244[0]
  %f7590247 = load i64, i64* %i0ptr7590245, align 8                                  ; load; *i0ptr7590245
  %fptr7590246 = inttoptr i64 %f7590247 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590246(i64 %cont7581315, i64 %rva7584718)          ; tail call
  ret void
}


define void @lam7586186(i64 %env7586187, i64 %rvp7584704) {
  %envptr7590248 = inttoptr i64 %env7586187 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590249 = getelementptr inbounds i64, i64* %envptr7590248, i64 1            ; &envptr7590248[1]
  %Vf9$loop = load i64, i64* %envptr7590249, align 8                                 ; load; *envptr7590249
  %cont7581317 = call i64 @prim_car(i64 %rvp7584704)                                 ; call prim_car
  %rvp7584703 = call i64 @prim_cdr(i64 %rvp7584704)                                  ; call prim_cdr
  %r1D$i = call i64 @prim_car(i64 %rvp7584703)                                       ; call prim_car
  %rvp7584702 = call i64 @prim_cdr(i64 %rvp7584703)                                  ; call prim_cdr
  %cDf$l = call i64 @prim_car(i64 %rvp7584702)                                       ; call prim_car
  %na7584691 = call i64 @prim_cdr(i64 %rvp7584702)                                   ; call prim_cdr
  %arg7582705 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581120 = call i64 @prim__61(i64 %r1D$i, i64 %arg7582705)                        ; call prim__61
  %cmp7590250 = icmp eq i64 %a7581120, 15                                            ; false?
  br i1 %cmp7590250, label %else7590252, label %then7590251                          ; if

then7590251:
  %arg7582708 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584694 = add i64 0, 0                                                         ; quoted ()
  %rva7584693 = call i64 @prim_cons(i64 %cDf$l, i64 %rva7584694)                     ; call prim_cons
  %rva7584692 = call i64 @prim_cons(i64 %arg7582708, i64 %rva7584693)                ; call prim_cons
  %cloptr7590253 = inttoptr i64 %cont7581317 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590254 = getelementptr inbounds i64, i64* %cloptr7590253, i64 0             ; &cloptr7590253[0]
  %f7590256 = load i64, i64* %i0ptr7590254, align 8                                  ; load; *i0ptr7590254
  %fptr7590255 = inttoptr i64 %f7590256 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590255(i64 %cont7581317, i64 %rva7584692)          ; tail call
  ret void

else7590252:
  %arg7582710 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581121 = call i64 @prim_vector_45ref(i64 %Vf9$loop, i64 %arg7582710)            ; call prim_vector_45ref
  %a7581122 = call i64 @prim_procedure_63(i64 %a7581121)                             ; call prim_procedure_63
  %cmp7590257 = icmp eq i64 %a7581122, 15                                            ; false?
  br i1 %cmp7590257, label %else7590259, label %then7590258                          ; if

then7590258:
  %arg7582713 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581123 = call i64 @prim_vector_45ref(i64 %Vf9$loop, i64 %arg7582713)            ; call prim_vector_45ref
  %a7581124 = call i64 @prim_cons(i64 %r1D$i, i64 %cDf$l)                            ; call prim_cons
  %rva7584698 = add i64 0, 0                                                         ; quoted ()
  %rva7584697 = call i64 @prim_cons(i64 %a7581124, i64 %rva7584698)                  ; call prim_cons
  %rva7584696 = call i64 @prim_cons(i64 %r1D$i, i64 %rva7584697)                     ; call prim_cons
  %rva7584695 = call i64 @prim_cons(i64 %cont7581317, i64 %rva7584696)               ; call prim_cons
  %cloptr7590260 = inttoptr i64 %a7581123 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590261 = getelementptr inbounds i64, i64* %cloptr7590260, i64 0             ; &cloptr7590260[0]
  %f7590263 = load i64, i64* %i0ptr7590261, align 8                                  ; load; *i0ptr7590261
  %fptr7590262 = inttoptr i64 %f7590263 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590262(i64 %a7581123, i64 %rva7584695)             ; tail call
  ret void

else7590259:
  %arg7582721 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590264, i32 0, i32 0)); quoted string
  %retprim7581318 = call i64 @prim_halt(i64 %arg7582721)                             ; call prim_halt
  %arg7582723 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584701 = add i64 0, 0                                                         ; quoted ()
  %rva7584700 = call i64 @prim_cons(i64 %retprim7581318, i64 %rva7584701)            ; call prim_cons
  %rva7584699 = call i64 @prim_cons(i64 %arg7582723, i64 %rva7584700)                ; call prim_cons
  %cloptr7590265 = inttoptr i64 %cont7581317 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590266 = getelementptr inbounds i64, i64* %cloptr7590265, i64 0             ; &cloptr7590265[0]
  %f7590268 = load i64, i64* %i0ptr7590266, align 8                                  ; load; *i0ptr7590266
  %fptr7590267 = inttoptr i64 %f7590268 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590267(i64 %cont7581317, i64 %rva7584699)          ; tail call
  ret void
}


define void @lam7586169(i64 %env7586170, i64 %jPi$lst7581321) {
  %cont7581320 = call i64 @prim_car(i64 %jPi$lst7581321)                             ; call prim_car
  %jPi$lst = call i64 @prim_cdr(i64 %jPi$lst7581321)                                 ; call prim_cdr
  %arg7582738 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584707 = add i64 0, 0                                                         ; quoted ()
  %rva7584706 = call i64 @prim_cons(i64 %jPi$lst, i64 %rva7584707)                   ; call prim_cons
  %rva7584705 = call i64 @prim_cons(i64 %arg7582738, i64 %rva7584706)                ; call prim_cons
  %cloptr7590269 = inttoptr i64 %cont7581320 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590270 = getelementptr inbounds i64, i64* %cloptr7590269, i64 0             ; &cloptr7590269[0]
  %f7590272 = load i64, i64* %i0ptr7590270, align 8                                  ; load; *i0ptr7590270
  %fptr7590271 = inttoptr i64 %f7590272 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590271(i64 %cont7581320, i64 %rva7584705)          ; tail call
  ret void
}


define void @lam7586165(i64 %env7586166, i64 %rvp7584715) {
  %envptr7590273 = inttoptr i64 %env7586166 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590274 = getelementptr inbounds i64, i64* %envptr7590273, i64 3            ; &envptr7590273[3]
  %a7581127 = load i64, i64* %envptr7590274, align 8                                 ; load; *envptr7590274
  %envptr7590275 = inttoptr i64 %env7586166 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590276 = getelementptr inbounds i64, i64* %envptr7590275, i64 2            ; &envptr7590275[2]
  %cont7581315 = load i64, i64* %envptr7590276, align 8                              ; load; *envptr7590276
  %envptr7590277 = inttoptr i64 %env7586166 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590278 = getelementptr inbounds i64, i64* %envptr7590277, i64 1            ; &envptr7590277[1]
  %efP$n = load i64, i64* %envptr7590278, align 8                                    ; load; *envptr7590278
  %_957581319 = call i64 @prim_car(i64 %rvp7584715)                                  ; call prim_car
  %rvp7584714 = call i64 @prim_cdr(i64 %rvp7584715)                                  ; call prim_cdr
  %a7581128 = call i64 @prim_car(i64 %rvp7584714)                                    ; call prim_car
  %na7584709 = call i64 @prim_cdr(i64 %rvp7584714)                                   ; call prim_cdr
  %rva7584713 = add i64 0, 0                                                         ; quoted ()
  %rva7584712 = call i64 @prim_cons(i64 %a7581128, i64 %rva7584713)                  ; call prim_cons
  %rva7584711 = call i64 @prim_cons(i64 %efP$n, i64 %rva7584712)                     ; call prim_cons
  %rva7584710 = call i64 @prim_cons(i64 %cont7581315, i64 %rva7584711)               ; call prim_cons
  %cloptr7590279 = inttoptr i64 %a7581127 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590280 = getelementptr inbounds i64, i64* %cloptr7590279, i64 0             ; &cloptr7590279[0]
  %f7590282 = load i64, i64* %i0ptr7590280, align 8                                  ; load; *i0ptr7590280
  %fptr7590281 = inttoptr i64 %f7590282 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590281(i64 %a7581127, i64 %rva7584710)             ; tail call
  ret void
}


define void @lam7586157(i64 %env7586158, i64 %rvp7584971) {
  %envptr7590283 = inttoptr i64 %env7586158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590284 = getelementptr inbounds i64, i64* %envptr7590283, i64 3            ; &envptr7590283[3]
  %DNM$my_45try = load i64, i64* %envptr7590284, align 8                             ; load; *envptr7590284
  %envptr7590285 = inttoptr i64 %env7586158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590286 = getelementptr inbounds i64, i64* %envptr7590285, i64 2            ; &envptr7590285[2]
  %E10$ok_63 = load i64, i64* %envptr7590286, align 8                                ; load; *envptr7590286
  %envptr7590287 = inttoptr i64 %env7586158 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590288 = getelementptr inbounds i64, i64* %envptr7590287, i64 1            ; &envptr7590287[1]
  %z23$_37append = load i64, i64* %envptr7590288, align 8                            ; load; *envptr7590288
  %cont7581327 = call i64 @prim_car(i64 %rvp7584971)                                 ; call prim_car
  %rvp7584970 = call i64 @prim_cdr(i64 %rvp7584971)                                  ; call prim_cdr
  %K7C$x = call i64 @prim_car(i64 %rvp7584970)                                       ; call prim_car
  %rvp7584969 = call i64 @prim_cdr(i64 %rvp7584970)                                  ; call prim_cdr
  %tx0$y = call i64 @prim_car(i64 %rvp7584969)                                       ; call prim_car
  %rvp7584968 = call i64 @prim_cdr(i64 %rvp7584969)                                  ; call prim_cdr
  %tdU$z = call i64 @prim_car(i64 %rvp7584968)                                       ; call prim_car
  %na7584733 = call i64 @prim_cdr(i64 %rvp7584968)                                   ; call prim_cdr
  %a7581129 = call i64 @prim_null_63(i64 %K7C$x)                                     ; call prim_null_63
  %cmp7590289 = icmp eq i64 %a7581129, 15                                            ; false?
  br i1 %cmp7590289, label %else7590291, label %then7590290                          ; if

then7590290:
  %a7581130 = call i64 @prim_null_63(i64 %tx0$y)                                     ; call prim_null_63
  %cmp7590292 = icmp eq i64 %a7581130, 15                                            ; false?
  br i1 %cmp7590292, label %else7590294, label %then7590293                          ; if

then7590293:
  %arg7582754 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7582753 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva7584736 = add i64 0, 0                                                         ; quoted ()
  %rva7584735 = call i64 @prim_cons(i64 %arg7582753, i64 %rva7584736)                ; call prim_cons
  %rva7584734 = call i64 @prim_cons(i64 %arg7582754, i64 %rva7584735)                ; call prim_cons
  %cloptr7590295 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590296 = getelementptr inbounds i64, i64* %cloptr7590295, i64 0             ; &cloptr7590295[0]
  %f7590298 = load i64, i64* %i0ptr7590296, align 8                                  ; load; *i0ptr7590296
  %fptr7590297 = inttoptr i64 %f7590298 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590297(i64 %cont7581327, i64 %rva7584734)          ; tail call
  ret void

else7590294:
  %arg7582757 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7582756 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584739 = add i64 0, 0                                                         ; quoted ()
  %rva7584738 = call i64 @prim_cons(i64 %arg7582756, i64 %rva7584739)                ; call prim_cons
  %rva7584737 = call i64 @prim_cons(i64 %arg7582757, i64 %rva7584738)                ; call prim_cons
  %cloptr7590299 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590300 = getelementptr inbounds i64, i64* %cloptr7590299, i64 0             ; &cloptr7590299[0]
  %f7590302 = load i64, i64* %i0ptr7590300, align 8                                  ; load; *i0ptr7590300
  %fptr7590301 = inttoptr i64 %f7590302 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590301(i64 %cont7581327, i64 %rva7584737)          ; tail call
  ret void

else7590291:
  %arg7582759 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581131 = call i64 @prim_vector_45ref(i64 %E10$ok_63, i64 %arg7582759)           ; call prim_vector_45ref
  %a7581132 = call i64 @prim_procedure_63(i64 %a7581131)                             ; call prim_procedure_63
  %cmp7590303 = icmp eq i64 %a7581132, 15                                            ; false?
  br i1 %cmp7590303, label %else7590305, label %then7590304                          ; if

then7590304:
  %arg7582762 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581133 = call i64 @prim_vector_45ref(i64 %E10$ok_63, i64 %arg7582762)           ; call prim_vector_45ref
  %a7581134 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %cloptr7590306 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7590308 = getelementptr inbounds i64, i64* %cloptr7590306, i64 1              ; &eptr7590308[1]
  %eptr7590309 = getelementptr inbounds i64, i64* %cloptr7590306, i64 2              ; &eptr7590309[2]
  %eptr7590310 = getelementptr inbounds i64, i64* %cloptr7590306, i64 3              ; &eptr7590310[3]
  %eptr7590311 = getelementptr inbounds i64, i64* %cloptr7590306, i64 4              ; &eptr7590311[4]
  %eptr7590312 = getelementptr inbounds i64, i64* %cloptr7590306, i64 5              ; &eptr7590312[5]
  %eptr7590313 = getelementptr inbounds i64, i64* %cloptr7590306, i64 6              ; &eptr7590313[6]
  store i64 %K7C$x, i64* %eptr7590308                                                ; *eptr7590308 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590309                                                ; *eptr7590309 = %tx0$y
  store i64 %z23$_37append, i64* %eptr7590310                                        ; *eptr7590310 = %z23$_37append
  store i64 %DNM$my_45try, i64* %eptr7590311                                         ; *eptr7590311 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590312                                                ; *eptr7590312 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590313                                          ; *eptr7590313 = %cont7581327
  %eptr7590307 = getelementptr inbounds i64, i64* %cloptr7590306, i64 0              ; &cloptr7590306[0]
  %f7590314 = ptrtoint void(i64,i64)* @lam7586081 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590314, i64* %eptr7590307                                             ; store fptr
  %arg7582768 = ptrtoint i64* %cloptr7590306 to i64                                  ; closure cast; i64* -> i64
  %arg7582766 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %rva7584854 = add i64 0, 0                                                         ; quoted ()
  %rva7584853 = call i64 @prim_cons(i64 %tdU$z, i64 %rva7584854)                     ; call prim_cons
  %rva7584852 = call i64 @prim_cons(i64 %arg7582766, i64 %rva7584853)                ; call prim_cons
  %rva7584851 = call i64 @prim_cons(i64 %a7581134, i64 %rva7584852)                  ; call prim_cons
  %rva7584850 = call i64 @prim_cons(i64 %arg7582768, i64 %rva7584851)                ; call prim_cons
  %cloptr7590315 = inttoptr i64 %a7581133 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590316 = getelementptr inbounds i64, i64* %cloptr7590315, i64 0             ; &cloptr7590315[0]
  %f7590318 = load i64, i64* %i0ptr7590316, align 8                                  ; load; *i0ptr7590316
  %fptr7590317 = inttoptr i64 %f7590318 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590317(i64 %a7581133, i64 %rva7584850)             ; tail call
  ret void

else7590305:
  %arg7582886 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590319, i32 0, i32 0)); quoted string
  %retprim7581338 = call i64 @prim_halt(i64 %arg7582886)                             ; call prim_halt
  %cloptr7590320 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7590322 = getelementptr inbounds i64, i64* %cloptr7590320, i64 1              ; &eptr7590322[1]
  %eptr7590323 = getelementptr inbounds i64, i64* %cloptr7590320, i64 2              ; &eptr7590323[2]
  %eptr7590324 = getelementptr inbounds i64, i64* %cloptr7590320, i64 3              ; &eptr7590324[3]
  %eptr7590325 = getelementptr inbounds i64, i64* %cloptr7590320, i64 4              ; &eptr7590325[4]
  %eptr7590326 = getelementptr inbounds i64, i64* %cloptr7590320, i64 5              ; &eptr7590326[5]
  %eptr7590327 = getelementptr inbounds i64, i64* %cloptr7590320, i64 6              ; &eptr7590327[6]
  store i64 %K7C$x, i64* %eptr7590322                                                ; *eptr7590322 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590323                                                ; *eptr7590323 = %tx0$y
  store i64 %z23$_37append, i64* %eptr7590324                                        ; *eptr7590324 = %z23$_37append
  store i64 %DNM$my_45try, i64* %eptr7590325                                         ; *eptr7590325 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590326                                                ; *eptr7590326 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590327                                          ; *eptr7590327 = %cont7581327
  %eptr7590321 = getelementptr inbounds i64, i64* %cloptr7590320, i64 0              ; &cloptr7590320[0]
  %f7590328 = ptrtoint void(i64,i64)* @lam7586153 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590328, i64* %eptr7590321                                             ; store fptr
  %arg7582889 = ptrtoint i64* %cloptr7590320 to i64                                  ; closure cast; i64* -> i64
  %arg7582888 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584967 = add i64 0, 0                                                         ; quoted ()
  %rva7584966 = call i64 @prim_cons(i64 %retprim7581338, i64 %rva7584967)            ; call prim_cons
  %rva7584965 = call i64 @prim_cons(i64 %arg7582888, i64 %rva7584966)                ; call prim_cons
  %cloptr7590329 = inttoptr i64 %arg7582889 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590330 = getelementptr inbounds i64, i64* %cloptr7590329, i64 0             ; &cloptr7590329[0]
  %f7590332 = load i64, i64* %i0ptr7590330, align 8                                  ; load; *i0ptr7590330
  %fptr7590331 = inttoptr i64 %f7590332 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590331(i64 %arg7582889, i64 %rva7584965)           ; tail call
  ret void
}


define void @lam7586153(i64 %env7586154, i64 %rvp7584964) {
  %envptr7590333 = inttoptr i64 %env7586154 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590334 = getelementptr inbounds i64, i64* %envptr7590333, i64 6            ; &envptr7590333[6]
  %cont7581327 = load i64, i64* %envptr7590334, align 8                              ; load; *envptr7590334
  %envptr7590335 = inttoptr i64 %env7586154 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590336 = getelementptr inbounds i64, i64* %envptr7590335, i64 5            ; &envptr7590335[5]
  %tdU$z = load i64, i64* %envptr7590336, align 8                                    ; load; *envptr7590336
  %envptr7590337 = inttoptr i64 %env7586154 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590338 = getelementptr inbounds i64, i64* %envptr7590337, i64 4            ; &envptr7590337[4]
  %DNM$my_45try = load i64, i64* %envptr7590338, align 8                             ; load; *envptr7590338
  %envptr7590339 = inttoptr i64 %env7586154 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590340 = getelementptr inbounds i64, i64* %envptr7590339, i64 3            ; &envptr7590339[3]
  %z23$_37append = load i64, i64* %envptr7590340, align 8                            ; load; *envptr7590340
  %envptr7590341 = inttoptr i64 %env7586154 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590342 = getelementptr inbounds i64, i64* %envptr7590341, i64 2            ; &envptr7590341[2]
  %tx0$y = load i64, i64* %envptr7590342, align 8                                    ; load; *envptr7590342
  %envptr7590343 = inttoptr i64 %env7586154 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590344 = getelementptr inbounds i64, i64* %envptr7590343, i64 1            ; &envptr7590343[1]
  %K7C$x = load i64, i64* %envptr7590344, align 8                                    ; load; *envptr7590344
  %_957581328 = call i64 @prim_car(i64 %rvp7584964)                                  ; call prim_car
  %rvp7584963 = call i64 @prim_cdr(i64 %rvp7584964)                                  ; call prim_cdr
  %a7581135 = call i64 @prim_car(i64 %rvp7584963)                                    ; call prim_car
  %na7584856 = call i64 @prim_cdr(i64 %rvp7584963)                                   ; call prim_cdr
  %cmp7590345 = icmp eq i64 %a7581135, 15                                            ; false?
  br i1 %cmp7590345, label %else7590347, label %then7590346                          ; if

then7590346:
  %arg7582890 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581136 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582890)        ; call prim_vector_45ref
  %a7581137 = call i64 @prim_procedure_63(i64 %a7581136)                             ; call prim_procedure_63
  %cmp7590348 = icmp eq i64 %a7581137, 15                                            ; false?
  br i1 %cmp7590348, label %else7590350, label %then7590349                          ; if

then7590349:
  %arg7582893 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581138 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582893)        ; call prim_vector_45ref
  %a7581139 = call i64 @prim_cdr(i64 %K7C$x)                                         ; call prim_cdr
  %cloptr7590351 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7590353 = getelementptr inbounds i64, i64* %cloptr7590351, i64 1              ; &eptr7590353[1]
  %eptr7590354 = getelementptr inbounds i64, i64* %cloptr7590351, i64 2              ; &eptr7590354[2]
  %eptr7590355 = getelementptr inbounds i64, i64* %cloptr7590351, i64 3              ; &eptr7590355[3]
  %eptr7590356 = getelementptr inbounds i64, i64* %cloptr7590351, i64 4              ; &eptr7590356[4]
  %eptr7590357 = getelementptr inbounds i64, i64* %cloptr7590351, i64 5              ; &eptr7590357[5]
  %eptr7590358 = getelementptr inbounds i64, i64* %cloptr7590351, i64 6              ; &eptr7590358[6]
  store i64 %K7C$x, i64* %eptr7590353                                                ; *eptr7590353 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590354                                                ; *eptr7590354 = %tx0$y
  store i64 %a7581138, i64* %eptr7590355                                             ; *eptr7590355 = %a7581138
  store i64 %DNM$my_45try, i64* %eptr7590356                                         ; *eptr7590356 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590357                                                ; *eptr7590357 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590358                                          ; *eptr7590358 = %cont7581327
  %eptr7590352 = getelementptr inbounds i64, i64* %cloptr7590351, i64 0              ; &cloptr7590351[0]
  %f7590359 = ptrtoint void(i64,i64)* @lam7586111 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590359, i64* %eptr7590352                                             ; store fptr
  %arg7582898 = ptrtoint i64* %cloptr7590351 to i64                                  ; closure cast; i64* -> i64
  %rva7584904 = add i64 0, 0                                                         ; quoted ()
  %rva7584903 = call i64 @prim_cons(i64 %tx0$y, i64 %rva7584904)                     ; call prim_cons
  %rva7584902 = call i64 @prim_cons(i64 %a7581139, i64 %rva7584903)                  ; call prim_cons
  %rva7584901 = call i64 @prim_cons(i64 %arg7582898, i64 %rva7584902)                ; call prim_cons
  %cloptr7590360 = inttoptr i64 %z23$_37append to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7590361 = getelementptr inbounds i64, i64* %cloptr7590360, i64 0             ; &cloptr7590360[0]
  %f7590363 = load i64, i64* %i0ptr7590361, align 8                                  ; load; *i0ptr7590361
  %fptr7590362 = inttoptr i64 %f7590363 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590362(i64 %z23$_37append, i64 %rva7584901)        ; tail call
  ret void

else7590350:
  %arg7582943 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590364, i32 0, i32 0)); quoted string
  %retprim7581337 = call i64 @prim_halt(i64 %arg7582943)                             ; call prim_halt
  %cloptr7590365 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7590367 = getelementptr inbounds i64, i64* %cloptr7590365, i64 1              ; &eptr7590367[1]
  %eptr7590368 = getelementptr inbounds i64, i64* %cloptr7590365, i64 2              ; &eptr7590368[2]
  %eptr7590369 = getelementptr inbounds i64, i64* %cloptr7590365, i64 3              ; &eptr7590369[3]
  %eptr7590370 = getelementptr inbounds i64, i64* %cloptr7590365, i64 4              ; &eptr7590370[4]
  %eptr7590371 = getelementptr inbounds i64, i64* %cloptr7590365, i64 5              ; &eptr7590371[5]
  store i64 %K7C$x, i64* %eptr7590367                                                ; *eptr7590367 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590368                                                ; *eptr7590368 = %tx0$y
  store i64 %DNM$my_45try, i64* %eptr7590369                                         ; *eptr7590369 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590370                                                ; *eptr7590370 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590371                                          ; *eptr7590371 = %cont7581327
  %eptr7590366 = getelementptr inbounds i64, i64* %cloptr7590365, i64 0              ; &cloptr7590365[0]
  %f7590372 = ptrtoint void(i64,i64)* @lam7586130 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590372, i64* %eptr7590366                                             ; store fptr
  %arg7582946 = ptrtoint i64* %cloptr7590365 to i64                                  ; closure cast; i64* -> i64
  %arg7582945 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584933 = add i64 0, 0                                                         ; quoted ()
  %rva7584932 = call i64 @prim_cons(i64 %retprim7581337, i64 %rva7584933)            ; call prim_cons
  %rva7584931 = call i64 @prim_cons(i64 %arg7582945, i64 %rva7584932)                ; call prim_cons
  %cloptr7590373 = inttoptr i64 %arg7582946 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590374 = getelementptr inbounds i64, i64* %cloptr7590373, i64 0             ; &cloptr7590373[0]
  %f7590376 = load i64, i64* %i0ptr7590374, align 8                                  ; load; *i0ptr7590374
  %fptr7590375 = inttoptr i64 %f7590376 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590375(i64 %arg7582946, i64 %rva7584931)           ; tail call
  ret void

else7590347:
  %cloptr7590377 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7590379 = getelementptr inbounds i64, i64* %cloptr7590377, i64 1              ; &eptr7590379[1]
  %eptr7590380 = getelementptr inbounds i64, i64* %cloptr7590377, i64 2              ; &eptr7590380[2]
  %eptr7590381 = getelementptr inbounds i64, i64* %cloptr7590377, i64 3              ; &eptr7590381[3]
  %eptr7590382 = getelementptr inbounds i64, i64* %cloptr7590377, i64 4              ; &eptr7590382[4]
  %eptr7590383 = getelementptr inbounds i64, i64* %cloptr7590377, i64 5              ; &eptr7590383[5]
  store i64 %K7C$x, i64* %eptr7590379                                                ; *eptr7590379 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590380                                                ; *eptr7590380 = %tx0$y
  store i64 %DNM$my_45try, i64* %eptr7590381                                         ; *eptr7590381 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590382                                                ; *eptr7590382 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590383                                          ; *eptr7590383 = %cont7581327
  %eptr7590378 = getelementptr inbounds i64, i64* %cloptr7590377, i64 0              ; &cloptr7590377[0]
  %f7590384 = ptrtoint void(i64,i64)* @lam7586151 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590384, i64* %eptr7590378                                             ; store fptr
  %arg7582977 = ptrtoint i64* %cloptr7590377 to i64                                  ; closure cast; i64* -> i64
  %arg7582976 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7582975 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584962 = add i64 0, 0                                                         ; quoted ()
  %rva7584961 = call i64 @prim_cons(i64 %arg7582975, i64 %rva7584962)                ; call prim_cons
  %rva7584960 = call i64 @prim_cons(i64 %arg7582976, i64 %rva7584961)                ; call prim_cons
  %cloptr7590385 = inttoptr i64 %arg7582977 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590386 = getelementptr inbounds i64, i64* %cloptr7590385, i64 0             ; &cloptr7590385[0]
  %f7590388 = load i64, i64* %i0ptr7590386, align 8                                  ; load; *i0ptr7590386
  %fptr7590387 = inttoptr i64 %f7590388 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590387(i64 %arg7582977, i64 %rva7584960)           ; tail call
  ret void
}


define void @lam7586151(i64 %env7586152, i64 %rvp7584959) {
  %envptr7590389 = inttoptr i64 %env7586152 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590390 = getelementptr inbounds i64, i64* %envptr7590389, i64 5            ; &envptr7590389[5]
  %cont7581327 = load i64, i64* %envptr7590390, align 8                              ; load; *envptr7590390
  %envptr7590391 = inttoptr i64 %env7586152 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590392 = getelementptr inbounds i64, i64* %envptr7590391, i64 4            ; &envptr7590391[4]
  %tdU$z = load i64, i64* %envptr7590392, align 8                                    ; load; *envptr7590392
  %envptr7590393 = inttoptr i64 %env7586152 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590394 = getelementptr inbounds i64, i64* %envptr7590393, i64 3            ; &envptr7590393[3]
  %DNM$my_45try = load i64, i64* %envptr7590394, align 8                             ; load; *envptr7590394
  %envptr7590395 = inttoptr i64 %env7586152 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590396 = getelementptr inbounds i64, i64* %envptr7590395, i64 2            ; &envptr7590395[2]
  %tx0$y = load i64, i64* %envptr7590396, align 8                                    ; load; *envptr7590396
  %envptr7590397 = inttoptr i64 %env7586152 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590398 = getelementptr inbounds i64, i64* %envptr7590397, i64 1            ; &envptr7590397[1]
  %K7C$x = load i64, i64* %envptr7590398, align 8                                    ; load; *envptr7590398
  %_957581329 = call i64 @prim_car(i64 %rvp7584959)                                  ; call prim_car
  %rvp7584958 = call i64 @prim_cdr(i64 %rvp7584959)                                  ; call prim_cdr
  %a7581144 = call i64 @prim_car(i64 %rvp7584958)                                    ; call prim_car
  %na7584935 = call i64 @prim_cdr(i64 %rvp7584958)                                   ; call prim_cdr
  %arg7582978 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581145 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582978)        ; call prim_vector_45ref
  %a7581146 = call i64 @prim_procedure_63(i64 %a7581145)                             ; call prim_procedure_63
  %cmp7590399 = icmp eq i64 %a7581146, 15                                            ; false?
  br i1 %cmp7590399, label %else7590401, label %then7590400                          ; if

then7590400:
  %arg7582981 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581147 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582981)        ; call prim_vector_45ref
  %a7581148 = call i64 @prim_cdr(i64 %K7C$x)                                         ; call prim_cdr
  %a7581149 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %a7581150 = call i64 @prim_cons(i64 %a7581149, i64 %tx0$y)                         ; call prim_cons
  %cloptr7590402 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590404 = getelementptr inbounds i64, i64* %cloptr7590402, i64 1              ; &eptr7590404[1]
  %eptr7590405 = getelementptr inbounds i64, i64* %cloptr7590402, i64 2              ; &eptr7590405[2]
  store i64 %a7581144, i64* %eptr7590404                                             ; *eptr7590404 = %a7581144
  store i64 %cont7581327, i64* %eptr7590405                                          ; *eptr7590405 = %cont7581327
  %eptr7590403 = getelementptr inbounds i64, i64* %cloptr7590402, i64 0              ; &cloptr7590402[0]
  %f7590406 = ptrtoint void(i64,i64)* @lam7586140 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590406, i64* %eptr7590403                                             ; store fptr
  %arg7582990 = ptrtoint i64* %cloptr7590402 to i64                                  ; closure cast; i64* -> i64
  %rva7584947 = add i64 0, 0                                                         ; quoted ()
  %rva7584946 = call i64 @prim_cons(i64 %tdU$z, i64 %rva7584947)                     ; call prim_cons
  %rva7584945 = call i64 @prim_cons(i64 %a7581150, i64 %rva7584946)                  ; call prim_cons
  %rva7584944 = call i64 @prim_cons(i64 %a7581148, i64 %rva7584945)                  ; call prim_cons
  %rva7584943 = call i64 @prim_cons(i64 %arg7582990, i64 %rva7584944)                ; call prim_cons
  %cloptr7590407 = inttoptr i64 %a7581147 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590408 = getelementptr inbounds i64, i64* %cloptr7590407, i64 0             ; &cloptr7590407[0]
  %f7590410 = load i64, i64* %i0ptr7590408, align 8                                  ; load; *i0ptr7590408
  %fptr7590409 = inttoptr i64 %f7590410 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590409(i64 %a7581147, i64 %rva7584943)             ; tail call
  ret void

else7590401:
  %arg7582997 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590411, i32 0, i32 0)); quoted string
  %retprim7581332 = call i64 @prim_halt(i64 %arg7582997)                             ; call prim_halt
  %cloptr7590412 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590414 = getelementptr inbounds i64, i64* %cloptr7590412, i64 1              ; &eptr7590414[1]
  %eptr7590415 = getelementptr inbounds i64, i64* %cloptr7590412, i64 2              ; &eptr7590415[2]
  store i64 %a7581144, i64* %eptr7590414                                             ; *eptr7590414 = %a7581144
  store i64 %cont7581327, i64* %eptr7590415                                          ; *eptr7590415 = %cont7581327
  %eptr7590413 = getelementptr inbounds i64, i64* %cloptr7590412, i64 0              ; &cloptr7590412[0]
  %f7590416 = ptrtoint void(i64,i64)* @lam7586147 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590416, i64* %eptr7590413                                             ; store fptr
  %arg7583000 = ptrtoint i64* %cloptr7590412 to i64                                  ; closure cast; i64* -> i64
  %arg7582999 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584957 = add i64 0, 0                                                         ; quoted ()
  %rva7584956 = call i64 @prim_cons(i64 %retprim7581332, i64 %rva7584957)            ; call prim_cons
  %rva7584955 = call i64 @prim_cons(i64 %arg7582999, i64 %rva7584956)                ; call prim_cons
  %cloptr7590417 = inttoptr i64 %arg7583000 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590418 = getelementptr inbounds i64, i64* %cloptr7590417, i64 0             ; &cloptr7590417[0]
  %f7590420 = load i64, i64* %i0ptr7590418, align 8                                  ; load; *i0ptr7590418
  %fptr7590419 = inttoptr i64 %f7590420 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590419(i64 %arg7583000, i64 %rva7584955)           ; tail call
  ret void
}


define void @lam7586147(i64 %env7586148, i64 %rvp7584954) {
  %envptr7590421 = inttoptr i64 %env7586148 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590422 = getelementptr inbounds i64, i64* %envptr7590421, i64 2            ; &envptr7590421[2]
  %cont7581327 = load i64, i64* %envptr7590422, align 8                              ; load; *envptr7590422
  %envptr7590423 = inttoptr i64 %env7586148 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590424 = getelementptr inbounds i64, i64* %envptr7590423, i64 1            ; &envptr7590423[1]
  %a7581144 = load i64, i64* %envptr7590424, align 8                                 ; load; *envptr7590424
  %_957581330 = call i64 @prim_car(i64 %rvp7584954)                                  ; call prim_car
  %rvp7584953 = call i64 @prim_cdr(i64 %rvp7584954)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584953)                                    ; call prim_car
  %na7584949 = call i64 @prim_cdr(i64 %rvp7584953)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7583004 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584952 = add i64 0, 0                                                         ; quoted ()
  %rva7584951 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584952)            ; call prim_cons
  %rva7584950 = call i64 @prim_cons(i64 %arg7583004, i64 %rva7584951)                ; call prim_cons
  %cloptr7590425 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590426 = getelementptr inbounds i64, i64* %cloptr7590425, i64 0             ; &cloptr7590425[0]
  %f7590428 = load i64, i64* %i0ptr7590426, align 8                                  ; load; *i0ptr7590426
  %fptr7590427 = inttoptr i64 %f7590428 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590427(i64 %cont7581327, i64 %rva7584950)          ; tail call
  ret void
}


define void @lam7586140(i64 %env7586141, i64 %rvp7584942) {
  %envptr7590429 = inttoptr i64 %env7586141 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590430 = getelementptr inbounds i64, i64* %envptr7590429, i64 2            ; &envptr7590429[2]
  %cont7581327 = load i64, i64* %envptr7590430, align 8                              ; load; *envptr7590430
  %envptr7590431 = inttoptr i64 %env7586141 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590432 = getelementptr inbounds i64, i64* %envptr7590431, i64 1            ; &envptr7590431[1]
  %a7581144 = load i64, i64* %envptr7590432, align 8                                 ; load; *envptr7590432
  %_957581330 = call i64 @prim_car(i64 %rvp7584942)                                  ; call prim_car
  %rvp7584941 = call i64 @prim_cdr(i64 %rvp7584942)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584941)                                    ; call prim_car
  %na7584937 = call i64 @prim_cdr(i64 %rvp7584941)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582995 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584940 = add i64 0, 0                                                         ; quoted ()
  %rva7584939 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584940)            ; call prim_cons
  %rva7584938 = call i64 @prim_cons(i64 %arg7582995, i64 %rva7584939)                ; call prim_cons
  %cloptr7590433 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590434 = getelementptr inbounds i64, i64* %cloptr7590433, i64 0             ; &cloptr7590433[0]
  %f7590436 = load i64, i64* %i0ptr7590434, align 8                                  ; load; *i0ptr7590434
  %fptr7590435 = inttoptr i64 %f7590436 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590435(i64 %cont7581327, i64 %rva7584938)          ; tail call
  ret void
}


define void @lam7586130(i64 %env7586131, i64 %rvp7584930) {
  %envptr7590437 = inttoptr i64 %env7586131 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590438 = getelementptr inbounds i64, i64* %envptr7590437, i64 5            ; &envptr7590437[5]
  %cont7581327 = load i64, i64* %envptr7590438, align 8                              ; load; *envptr7590438
  %envptr7590439 = inttoptr i64 %env7586131 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590440 = getelementptr inbounds i64, i64* %envptr7590439, i64 4            ; &envptr7590439[4]
  %tdU$z = load i64, i64* %envptr7590440, align 8                                    ; load; *envptr7590440
  %envptr7590441 = inttoptr i64 %env7586131 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590442 = getelementptr inbounds i64, i64* %envptr7590441, i64 3            ; &envptr7590441[3]
  %DNM$my_45try = load i64, i64* %envptr7590442, align 8                             ; load; *envptr7590442
  %envptr7590443 = inttoptr i64 %env7586131 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590444 = getelementptr inbounds i64, i64* %envptr7590443, i64 2            ; &envptr7590443[2]
  %tx0$y = load i64, i64* %envptr7590444, align 8                                    ; load; *envptr7590444
  %envptr7590445 = inttoptr i64 %env7586131 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590446 = getelementptr inbounds i64, i64* %envptr7590445, i64 1            ; &envptr7590445[1]
  %K7C$x = load i64, i64* %envptr7590446, align 8                                    ; load; *envptr7590446
  %_957581329 = call i64 @prim_car(i64 %rvp7584930)                                  ; call prim_car
  %rvp7584929 = call i64 @prim_cdr(i64 %rvp7584930)                                  ; call prim_cdr
  %a7581144 = call i64 @prim_car(i64 %rvp7584929)                                    ; call prim_car
  %na7584906 = call i64 @prim_cdr(i64 %rvp7584929)                                   ; call prim_cdr
  %arg7582947 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581145 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582947)        ; call prim_vector_45ref
  %a7581146 = call i64 @prim_procedure_63(i64 %a7581145)                             ; call prim_procedure_63
  %cmp7590447 = icmp eq i64 %a7581146, 15                                            ; false?
  br i1 %cmp7590447, label %else7590449, label %then7590448                          ; if

then7590448:
  %arg7582950 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581147 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582950)        ; call prim_vector_45ref
  %a7581148 = call i64 @prim_cdr(i64 %K7C$x)                                         ; call prim_cdr
  %a7581149 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %a7581150 = call i64 @prim_cons(i64 %a7581149, i64 %tx0$y)                         ; call prim_cons
  %cloptr7590450 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590452 = getelementptr inbounds i64, i64* %cloptr7590450, i64 1              ; &eptr7590452[1]
  %eptr7590453 = getelementptr inbounds i64, i64* %cloptr7590450, i64 2              ; &eptr7590453[2]
  store i64 %a7581144, i64* %eptr7590452                                             ; *eptr7590452 = %a7581144
  store i64 %cont7581327, i64* %eptr7590453                                          ; *eptr7590453 = %cont7581327
  %eptr7590451 = getelementptr inbounds i64, i64* %cloptr7590450, i64 0              ; &cloptr7590450[0]
  %f7590454 = ptrtoint void(i64,i64)* @lam7586119 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590454, i64* %eptr7590451                                             ; store fptr
  %arg7582959 = ptrtoint i64* %cloptr7590450 to i64                                  ; closure cast; i64* -> i64
  %rva7584918 = add i64 0, 0                                                         ; quoted ()
  %rva7584917 = call i64 @prim_cons(i64 %tdU$z, i64 %rva7584918)                     ; call prim_cons
  %rva7584916 = call i64 @prim_cons(i64 %a7581150, i64 %rva7584917)                  ; call prim_cons
  %rva7584915 = call i64 @prim_cons(i64 %a7581148, i64 %rva7584916)                  ; call prim_cons
  %rva7584914 = call i64 @prim_cons(i64 %arg7582959, i64 %rva7584915)                ; call prim_cons
  %cloptr7590455 = inttoptr i64 %a7581147 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590456 = getelementptr inbounds i64, i64* %cloptr7590455, i64 0             ; &cloptr7590455[0]
  %f7590458 = load i64, i64* %i0ptr7590456, align 8                                  ; load; *i0ptr7590456
  %fptr7590457 = inttoptr i64 %f7590458 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590457(i64 %a7581147, i64 %rva7584914)             ; tail call
  ret void

else7590449:
  %arg7582966 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590459, i32 0, i32 0)); quoted string
  %retprim7581332 = call i64 @prim_halt(i64 %arg7582966)                             ; call prim_halt
  %cloptr7590460 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590462 = getelementptr inbounds i64, i64* %cloptr7590460, i64 1              ; &eptr7590462[1]
  %eptr7590463 = getelementptr inbounds i64, i64* %cloptr7590460, i64 2              ; &eptr7590463[2]
  store i64 %a7581144, i64* %eptr7590462                                             ; *eptr7590462 = %a7581144
  store i64 %cont7581327, i64* %eptr7590463                                          ; *eptr7590463 = %cont7581327
  %eptr7590461 = getelementptr inbounds i64, i64* %cloptr7590460, i64 0              ; &cloptr7590460[0]
  %f7590464 = ptrtoint void(i64,i64)* @lam7586126 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590464, i64* %eptr7590461                                             ; store fptr
  %arg7582969 = ptrtoint i64* %cloptr7590460 to i64                                  ; closure cast; i64* -> i64
  %arg7582968 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584928 = add i64 0, 0                                                         ; quoted ()
  %rva7584927 = call i64 @prim_cons(i64 %retprim7581332, i64 %rva7584928)            ; call prim_cons
  %rva7584926 = call i64 @prim_cons(i64 %arg7582968, i64 %rva7584927)                ; call prim_cons
  %cloptr7590465 = inttoptr i64 %arg7582969 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590466 = getelementptr inbounds i64, i64* %cloptr7590465, i64 0             ; &cloptr7590465[0]
  %f7590468 = load i64, i64* %i0ptr7590466, align 8                                  ; load; *i0ptr7590466
  %fptr7590467 = inttoptr i64 %f7590468 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590467(i64 %arg7582969, i64 %rva7584926)           ; tail call
  ret void
}


define void @lam7586126(i64 %env7586127, i64 %rvp7584925) {
  %envptr7590469 = inttoptr i64 %env7586127 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590470 = getelementptr inbounds i64, i64* %envptr7590469, i64 2            ; &envptr7590469[2]
  %cont7581327 = load i64, i64* %envptr7590470, align 8                              ; load; *envptr7590470
  %envptr7590471 = inttoptr i64 %env7586127 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590472 = getelementptr inbounds i64, i64* %envptr7590471, i64 1            ; &envptr7590471[1]
  %a7581144 = load i64, i64* %envptr7590472, align 8                                 ; load; *envptr7590472
  %_957581330 = call i64 @prim_car(i64 %rvp7584925)                                  ; call prim_car
  %rvp7584924 = call i64 @prim_cdr(i64 %rvp7584925)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584924)                                    ; call prim_car
  %na7584920 = call i64 @prim_cdr(i64 %rvp7584924)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582973 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584923 = add i64 0, 0                                                         ; quoted ()
  %rva7584922 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584923)            ; call prim_cons
  %rva7584921 = call i64 @prim_cons(i64 %arg7582973, i64 %rva7584922)                ; call prim_cons
  %cloptr7590473 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590474 = getelementptr inbounds i64, i64* %cloptr7590473, i64 0             ; &cloptr7590473[0]
  %f7590476 = load i64, i64* %i0ptr7590474, align 8                                  ; load; *i0ptr7590474
  %fptr7590475 = inttoptr i64 %f7590476 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590475(i64 %cont7581327, i64 %rva7584921)          ; tail call
  ret void
}


define void @lam7586119(i64 %env7586120, i64 %rvp7584913) {
  %envptr7590477 = inttoptr i64 %env7586120 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590478 = getelementptr inbounds i64, i64* %envptr7590477, i64 2            ; &envptr7590477[2]
  %cont7581327 = load i64, i64* %envptr7590478, align 8                              ; load; *envptr7590478
  %envptr7590479 = inttoptr i64 %env7586120 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590480 = getelementptr inbounds i64, i64* %envptr7590479, i64 1            ; &envptr7590479[1]
  %a7581144 = load i64, i64* %envptr7590480, align 8                                 ; load; *envptr7590480
  %_957581330 = call i64 @prim_car(i64 %rvp7584913)                                  ; call prim_car
  %rvp7584912 = call i64 @prim_cdr(i64 %rvp7584913)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584912)                                    ; call prim_car
  %na7584908 = call i64 @prim_cdr(i64 %rvp7584912)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582964 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584911 = add i64 0, 0                                                         ; quoted ()
  %rva7584910 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584911)            ; call prim_cons
  %rva7584909 = call i64 @prim_cons(i64 %arg7582964, i64 %rva7584910)                ; call prim_cons
  %cloptr7590481 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590482 = getelementptr inbounds i64, i64* %cloptr7590481, i64 0             ; &cloptr7590481[0]
  %f7590484 = load i64, i64* %i0ptr7590482, align 8                                  ; load; *i0ptr7590482
  %fptr7590483 = inttoptr i64 %f7590484 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590483(i64 %cont7581327, i64 %rva7584909)          ; tail call
  ret void
}


define void @lam7586111(i64 %env7586112, i64 %rvp7584900) {
  %envptr7590485 = inttoptr i64 %env7586112 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590486 = getelementptr inbounds i64, i64* %envptr7590485, i64 6            ; &envptr7590485[6]
  %cont7581327 = load i64, i64* %envptr7590486, align 8                              ; load; *envptr7590486
  %envptr7590487 = inttoptr i64 %env7586112 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590488 = getelementptr inbounds i64, i64* %envptr7590487, i64 5            ; &envptr7590487[5]
  %tdU$z = load i64, i64* %envptr7590488, align 8                                    ; load; *envptr7590488
  %envptr7590489 = inttoptr i64 %env7586112 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590490 = getelementptr inbounds i64, i64* %envptr7590489, i64 4            ; &envptr7590489[4]
  %DNM$my_45try = load i64, i64* %envptr7590490, align 8                             ; load; *envptr7590490
  %envptr7590491 = inttoptr i64 %env7586112 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590492 = getelementptr inbounds i64, i64* %envptr7590491, i64 3            ; &envptr7590491[3]
  %a7581138 = load i64, i64* %envptr7590492, align 8                                 ; load; *envptr7590492
  %envptr7590493 = inttoptr i64 %env7586112 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590494 = getelementptr inbounds i64, i64* %envptr7590493, i64 2            ; &envptr7590493[2]
  %tx0$y = load i64, i64* %envptr7590494, align 8                                    ; load; *envptr7590494
  %envptr7590495 = inttoptr i64 %env7586112 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590496 = getelementptr inbounds i64, i64* %envptr7590495, i64 1            ; &envptr7590495[1]
  %K7C$x = load i64, i64* %envptr7590496, align 8                                    ; load; *envptr7590496
  %_957581333 = call i64 @prim_car(i64 %rvp7584900)                                  ; call prim_car
  %rvp7584899 = call i64 @prim_cdr(i64 %rvp7584900)                                  ; call prim_cdr
  %a7581140 = call i64 @prim_car(i64 %rvp7584899)                                    ; call prim_car
  %na7584858 = call i64 @prim_cdr(i64 %rvp7584899)                                   ; call prim_cdr
  %cloptr7590497 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590498 = getelementptr inbounds i64, i64* %cloptr7590497, i64 0              ; &cloptr7590497[0]
  %f7590499 = ptrtoint void(i64,i64)* @lam7586109 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590499, i64* %eptr7590498                                             ; store fptr
  %arg7582901 = ptrtoint i64* %cloptr7590497 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590500 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7590502 = getelementptr inbounds i64, i64* %cloptr7590500, i64 1              ; &eptr7590502[1]
  %eptr7590503 = getelementptr inbounds i64, i64* %cloptr7590500, i64 2              ; &eptr7590503[2]
  %eptr7590504 = getelementptr inbounds i64, i64* %cloptr7590500, i64 3              ; &eptr7590504[3]
  %eptr7590505 = getelementptr inbounds i64, i64* %cloptr7590500, i64 4              ; &eptr7590505[4]
  %eptr7590506 = getelementptr inbounds i64, i64* %cloptr7590500, i64 5              ; &eptr7590506[5]
  %eptr7590507 = getelementptr inbounds i64, i64* %cloptr7590500, i64 6              ; &eptr7590507[6]
  %eptr7590508 = getelementptr inbounds i64, i64* %cloptr7590500, i64 7              ; &eptr7590508[7]
  store i64 %K7C$x, i64* %eptr7590502                                                ; *eptr7590502 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590503                                                ; *eptr7590503 = %tx0$y
  store i64 %a7581138, i64* %eptr7590504                                             ; *eptr7590504 = %a7581138
  store i64 %DNM$my_45try, i64* %eptr7590505                                         ; *eptr7590505 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590506                                                ; *eptr7590506 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590507                                          ; *eptr7590507 = %cont7581327
  store i64 %a7581140, i64* %eptr7590508                                             ; *eptr7590508 = %a7581140
  %eptr7590501 = getelementptr inbounds i64, i64* %cloptr7590500, i64 0              ; &cloptr7590500[0]
  %f7590509 = ptrtoint void(i64,i64)* @lam7586105 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590509, i64* %eptr7590501                                             ; store fptr
  %arg7582900 = ptrtoint i64* %cloptr7590500 to i64                                  ; closure cast; i64* -> i64
  %rva7584898 = add i64 0, 0                                                         ; quoted ()
  %rva7584897 = call i64 @prim_cons(i64 %arg7582900, i64 %rva7584898)                ; call prim_cons
  %cloptr7590510 = inttoptr i64 %arg7582901 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590511 = getelementptr inbounds i64, i64* %cloptr7590510, i64 0             ; &cloptr7590510[0]
  %f7590513 = load i64, i64* %i0ptr7590511, align 8                                  ; load; *i0ptr7590511
  %fptr7590512 = inttoptr i64 %f7590513 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590512(i64 %arg7582901, i64 %rva7584897)           ; tail call
  ret void
}


define void @lam7586109(i64 %env7586110, i64 %uTh$lst7581336) {
  %cont7581335 = call i64 @prim_car(i64 %uTh$lst7581336)                             ; call prim_car
  %uTh$lst = call i64 @prim_cdr(i64 %uTh$lst7581336)                                 ; call prim_cdr
  %arg7582905 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584861 = add i64 0, 0                                                         ; quoted ()
  %rva7584860 = call i64 @prim_cons(i64 %uTh$lst, i64 %rva7584861)                   ; call prim_cons
  %rva7584859 = call i64 @prim_cons(i64 %arg7582905, i64 %rva7584860)                ; call prim_cons
  %cloptr7590514 = inttoptr i64 %cont7581335 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590515 = getelementptr inbounds i64, i64* %cloptr7590514, i64 0             ; &cloptr7590514[0]
  %f7590517 = load i64, i64* %i0ptr7590515, align 8                                  ; load; *i0ptr7590515
  %fptr7590516 = inttoptr i64 %f7590517 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590516(i64 %cont7581335, i64 %rva7584859)          ; tail call
  ret void
}


define void @lam7586105(i64 %env7586106, i64 %rvp7584896) {
  %envptr7590518 = inttoptr i64 %env7586106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590519 = getelementptr inbounds i64, i64* %envptr7590518, i64 7            ; &envptr7590518[7]
  %a7581140 = load i64, i64* %envptr7590519, align 8                                 ; load; *envptr7590519
  %envptr7590520 = inttoptr i64 %env7586106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590521 = getelementptr inbounds i64, i64* %envptr7590520, i64 6            ; &envptr7590520[6]
  %cont7581327 = load i64, i64* %envptr7590521, align 8                              ; load; *envptr7590521
  %envptr7590522 = inttoptr i64 %env7586106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590523 = getelementptr inbounds i64, i64* %envptr7590522, i64 5            ; &envptr7590522[5]
  %tdU$z = load i64, i64* %envptr7590523, align 8                                    ; load; *envptr7590523
  %envptr7590524 = inttoptr i64 %env7586106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590525 = getelementptr inbounds i64, i64* %envptr7590524, i64 4            ; &envptr7590524[4]
  %DNM$my_45try = load i64, i64* %envptr7590525, align 8                             ; load; *envptr7590525
  %envptr7590526 = inttoptr i64 %env7586106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590527 = getelementptr inbounds i64, i64* %envptr7590526, i64 3            ; &envptr7590526[3]
  %a7581138 = load i64, i64* %envptr7590527, align 8                                 ; load; *envptr7590527
  %envptr7590528 = inttoptr i64 %env7586106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590529 = getelementptr inbounds i64, i64* %envptr7590528, i64 2            ; &envptr7590528[2]
  %tx0$y = load i64, i64* %envptr7590529, align 8                                    ; load; *envptr7590529
  %envptr7590530 = inttoptr i64 %env7586106 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590531 = getelementptr inbounds i64, i64* %envptr7590530, i64 1            ; &envptr7590530[1]
  %K7C$x = load i64, i64* %envptr7590531, align 8                                    ; load; *envptr7590531
  %_957581334 = call i64 @prim_car(i64 %rvp7584896)                                  ; call prim_car
  %rvp7584895 = call i64 @prim_cdr(i64 %rvp7584896)                                  ; call prim_cdr
  %a7581141 = call i64 @prim_car(i64 %rvp7584895)                                    ; call prim_car
  %na7584863 = call i64 @prim_cdr(i64 %rvp7584895)                                   ; call prim_cdr
  %a7581142 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %a7581143 = call i64 @prim_cons(i64 %a7581142, i64 %tdU$z)                         ; call prim_cons
  %cloptr7590532 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7590534 = getelementptr inbounds i64, i64* %cloptr7590532, i64 1              ; &eptr7590534[1]
  %eptr7590535 = getelementptr inbounds i64, i64* %cloptr7590532, i64 2              ; &eptr7590535[2]
  %eptr7590536 = getelementptr inbounds i64, i64* %cloptr7590532, i64 3              ; &eptr7590536[3]
  %eptr7590537 = getelementptr inbounds i64, i64* %cloptr7590532, i64 4              ; &eptr7590537[4]
  %eptr7590538 = getelementptr inbounds i64, i64* %cloptr7590532, i64 5              ; &eptr7590538[5]
  store i64 %K7C$x, i64* %eptr7590534                                                ; *eptr7590534 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590535                                                ; *eptr7590535 = %tx0$y
  store i64 %DNM$my_45try, i64* %eptr7590536                                         ; *eptr7590536 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590537                                                ; *eptr7590537 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590538                                          ; *eptr7590538 = %cont7581327
  %eptr7590533 = getelementptr inbounds i64, i64* %cloptr7590532, i64 0              ; &cloptr7590532[0]
  %f7590539 = ptrtoint void(i64,i64)* @lam7586103 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590539, i64* %eptr7590533                                             ; store fptr
  %arg7582913 = ptrtoint i64* %cloptr7590532 to i64                                  ; closure cast; i64* -> i64
  %rva7584894 = add i64 0, 0                                                         ; quoted ()
  %rva7584893 = call i64 @prim_cons(i64 %a7581143, i64 %rva7584894)                  ; call prim_cons
  %rva7584892 = call i64 @prim_cons(i64 %a7581141, i64 %rva7584893)                  ; call prim_cons
  %rva7584891 = call i64 @prim_cons(i64 %a7581140, i64 %rva7584892)                  ; call prim_cons
  %rva7584890 = call i64 @prim_cons(i64 %arg7582913, i64 %rva7584891)                ; call prim_cons
  %cloptr7590540 = inttoptr i64 %a7581138 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590541 = getelementptr inbounds i64, i64* %cloptr7590540, i64 0             ; &cloptr7590540[0]
  %f7590543 = load i64, i64* %i0ptr7590541, align 8                                  ; load; *i0ptr7590541
  %fptr7590542 = inttoptr i64 %f7590543 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590542(i64 %a7581138, i64 %rva7584890)             ; tail call
  ret void
}


define void @lam7586103(i64 %env7586104, i64 %rvp7584889) {
  %envptr7590544 = inttoptr i64 %env7586104 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590545 = getelementptr inbounds i64, i64* %envptr7590544, i64 5            ; &envptr7590544[5]
  %cont7581327 = load i64, i64* %envptr7590545, align 8                              ; load; *envptr7590545
  %envptr7590546 = inttoptr i64 %env7586104 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590547 = getelementptr inbounds i64, i64* %envptr7590546, i64 4            ; &envptr7590546[4]
  %tdU$z = load i64, i64* %envptr7590547, align 8                                    ; load; *envptr7590547
  %envptr7590548 = inttoptr i64 %env7586104 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590549 = getelementptr inbounds i64, i64* %envptr7590548, i64 3            ; &envptr7590548[3]
  %DNM$my_45try = load i64, i64* %envptr7590549, align 8                             ; load; *envptr7590549
  %envptr7590550 = inttoptr i64 %env7586104 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590551 = getelementptr inbounds i64, i64* %envptr7590550, i64 2            ; &envptr7590550[2]
  %tx0$y = load i64, i64* %envptr7590551, align 8                                    ; load; *envptr7590551
  %envptr7590552 = inttoptr i64 %env7586104 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590553 = getelementptr inbounds i64, i64* %envptr7590552, i64 1            ; &envptr7590552[1]
  %K7C$x = load i64, i64* %envptr7590553, align 8                                    ; load; *envptr7590553
  %_957581329 = call i64 @prim_car(i64 %rvp7584889)                                  ; call prim_car
  %rvp7584888 = call i64 @prim_cdr(i64 %rvp7584889)                                  ; call prim_cdr
  %a7581144 = call i64 @prim_car(i64 %rvp7584888)                                    ; call prim_car
  %na7584865 = call i64 @prim_cdr(i64 %rvp7584888)                                   ; call prim_cdr
  %arg7582915 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581145 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582915)        ; call prim_vector_45ref
  %a7581146 = call i64 @prim_procedure_63(i64 %a7581145)                             ; call prim_procedure_63
  %cmp7590554 = icmp eq i64 %a7581146, 15                                            ; false?
  br i1 %cmp7590554, label %else7590556, label %then7590555                          ; if

then7590555:
  %arg7582918 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581147 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582918)        ; call prim_vector_45ref
  %a7581148 = call i64 @prim_cdr(i64 %K7C$x)                                         ; call prim_cdr
  %a7581149 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %a7581150 = call i64 @prim_cons(i64 %a7581149, i64 %tx0$y)                         ; call prim_cons
  %cloptr7590557 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590559 = getelementptr inbounds i64, i64* %cloptr7590557, i64 1              ; &eptr7590559[1]
  %eptr7590560 = getelementptr inbounds i64, i64* %cloptr7590557, i64 2              ; &eptr7590560[2]
  store i64 %a7581144, i64* %eptr7590559                                             ; *eptr7590559 = %a7581144
  store i64 %cont7581327, i64* %eptr7590560                                          ; *eptr7590560 = %cont7581327
  %eptr7590558 = getelementptr inbounds i64, i64* %cloptr7590557, i64 0              ; &cloptr7590557[0]
  %f7590561 = ptrtoint void(i64,i64)* @lam7586092 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590561, i64* %eptr7590558                                             ; store fptr
  %arg7582927 = ptrtoint i64* %cloptr7590557 to i64                                  ; closure cast; i64* -> i64
  %rva7584877 = add i64 0, 0                                                         ; quoted ()
  %rva7584876 = call i64 @prim_cons(i64 %tdU$z, i64 %rva7584877)                     ; call prim_cons
  %rva7584875 = call i64 @prim_cons(i64 %a7581150, i64 %rva7584876)                  ; call prim_cons
  %rva7584874 = call i64 @prim_cons(i64 %a7581148, i64 %rva7584875)                  ; call prim_cons
  %rva7584873 = call i64 @prim_cons(i64 %arg7582927, i64 %rva7584874)                ; call prim_cons
  %cloptr7590562 = inttoptr i64 %a7581147 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590563 = getelementptr inbounds i64, i64* %cloptr7590562, i64 0             ; &cloptr7590562[0]
  %f7590565 = load i64, i64* %i0ptr7590563, align 8                                  ; load; *i0ptr7590563
  %fptr7590564 = inttoptr i64 %f7590565 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590564(i64 %a7581147, i64 %rva7584873)             ; tail call
  ret void

else7590556:
  %arg7582934 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590566, i32 0, i32 0)); quoted string
  %retprim7581332 = call i64 @prim_halt(i64 %arg7582934)                             ; call prim_halt
  %cloptr7590567 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590569 = getelementptr inbounds i64, i64* %cloptr7590567, i64 1              ; &eptr7590569[1]
  %eptr7590570 = getelementptr inbounds i64, i64* %cloptr7590567, i64 2              ; &eptr7590570[2]
  store i64 %a7581144, i64* %eptr7590569                                             ; *eptr7590569 = %a7581144
  store i64 %cont7581327, i64* %eptr7590570                                          ; *eptr7590570 = %cont7581327
  %eptr7590568 = getelementptr inbounds i64, i64* %cloptr7590567, i64 0              ; &cloptr7590567[0]
  %f7590571 = ptrtoint void(i64,i64)* @lam7586099 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590571, i64* %eptr7590568                                             ; store fptr
  %arg7582937 = ptrtoint i64* %cloptr7590567 to i64                                  ; closure cast; i64* -> i64
  %arg7582936 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584887 = add i64 0, 0                                                         ; quoted ()
  %rva7584886 = call i64 @prim_cons(i64 %retprim7581332, i64 %rva7584887)            ; call prim_cons
  %rva7584885 = call i64 @prim_cons(i64 %arg7582936, i64 %rva7584886)                ; call prim_cons
  %cloptr7590572 = inttoptr i64 %arg7582937 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590573 = getelementptr inbounds i64, i64* %cloptr7590572, i64 0             ; &cloptr7590572[0]
  %f7590575 = load i64, i64* %i0ptr7590573, align 8                                  ; load; *i0ptr7590573
  %fptr7590574 = inttoptr i64 %f7590575 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590574(i64 %arg7582937, i64 %rva7584885)           ; tail call
  ret void
}


define void @lam7586099(i64 %env7586100, i64 %rvp7584884) {
  %envptr7590576 = inttoptr i64 %env7586100 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590577 = getelementptr inbounds i64, i64* %envptr7590576, i64 2            ; &envptr7590576[2]
  %cont7581327 = load i64, i64* %envptr7590577, align 8                              ; load; *envptr7590577
  %envptr7590578 = inttoptr i64 %env7586100 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590579 = getelementptr inbounds i64, i64* %envptr7590578, i64 1            ; &envptr7590578[1]
  %a7581144 = load i64, i64* %envptr7590579, align 8                                 ; load; *envptr7590579
  %_957581330 = call i64 @prim_car(i64 %rvp7584884)                                  ; call prim_car
  %rvp7584883 = call i64 @prim_cdr(i64 %rvp7584884)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584883)                                    ; call prim_car
  %na7584879 = call i64 @prim_cdr(i64 %rvp7584883)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582941 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584882 = add i64 0, 0                                                         ; quoted ()
  %rva7584881 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584882)            ; call prim_cons
  %rva7584880 = call i64 @prim_cons(i64 %arg7582941, i64 %rva7584881)                ; call prim_cons
  %cloptr7590580 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590581 = getelementptr inbounds i64, i64* %cloptr7590580, i64 0             ; &cloptr7590580[0]
  %f7590583 = load i64, i64* %i0ptr7590581, align 8                                  ; load; *i0ptr7590581
  %fptr7590582 = inttoptr i64 %f7590583 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590582(i64 %cont7581327, i64 %rva7584880)          ; tail call
  ret void
}


define void @lam7586092(i64 %env7586093, i64 %rvp7584872) {
  %envptr7590584 = inttoptr i64 %env7586093 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590585 = getelementptr inbounds i64, i64* %envptr7590584, i64 2            ; &envptr7590584[2]
  %cont7581327 = load i64, i64* %envptr7590585, align 8                              ; load; *envptr7590585
  %envptr7590586 = inttoptr i64 %env7586093 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590587 = getelementptr inbounds i64, i64* %envptr7590586, i64 1            ; &envptr7590586[1]
  %a7581144 = load i64, i64* %envptr7590587, align 8                                 ; load; *envptr7590587
  %_957581330 = call i64 @prim_car(i64 %rvp7584872)                                  ; call prim_car
  %rvp7584871 = call i64 @prim_cdr(i64 %rvp7584872)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584871)                                    ; call prim_car
  %na7584867 = call i64 @prim_cdr(i64 %rvp7584871)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582932 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584870 = add i64 0, 0                                                         ; quoted ()
  %rva7584869 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584870)            ; call prim_cons
  %rva7584868 = call i64 @prim_cons(i64 %arg7582932, i64 %rva7584869)                ; call prim_cons
  %cloptr7590588 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590589 = getelementptr inbounds i64, i64* %cloptr7590588, i64 0             ; &cloptr7590588[0]
  %f7590591 = load i64, i64* %i0ptr7590589, align 8                                  ; load; *i0ptr7590589
  %fptr7590590 = inttoptr i64 %f7590591 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590590(i64 %cont7581327, i64 %rva7584868)          ; tail call
  ret void
}


define void @lam7586081(i64 %env7586082, i64 %rvp7584849) {
  %envptr7590592 = inttoptr i64 %env7586082 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590593 = getelementptr inbounds i64, i64* %envptr7590592, i64 6            ; &envptr7590592[6]
  %cont7581327 = load i64, i64* %envptr7590593, align 8                              ; load; *envptr7590593
  %envptr7590594 = inttoptr i64 %env7586082 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590595 = getelementptr inbounds i64, i64* %envptr7590594, i64 5            ; &envptr7590594[5]
  %tdU$z = load i64, i64* %envptr7590595, align 8                                    ; load; *envptr7590595
  %envptr7590596 = inttoptr i64 %env7586082 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590597 = getelementptr inbounds i64, i64* %envptr7590596, i64 4            ; &envptr7590596[4]
  %DNM$my_45try = load i64, i64* %envptr7590597, align 8                             ; load; *envptr7590597
  %envptr7590598 = inttoptr i64 %env7586082 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590599 = getelementptr inbounds i64, i64* %envptr7590598, i64 3            ; &envptr7590598[3]
  %z23$_37append = load i64, i64* %envptr7590599, align 8                            ; load; *envptr7590599
  %envptr7590600 = inttoptr i64 %env7586082 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590601 = getelementptr inbounds i64, i64* %envptr7590600, i64 2            ; &envptr7590600[2]
  %tx0$y = load i64, i64* %envptr7590601, align 8                                    ; load; *envptr7590601
  %envptr7590602 = inttoptr i64 %env7586082 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590603 = getelementptr inbounds i64, i64* %envptr7590602, i64 1            ; &envptr7590602[1]
  %K7C$x = load i64, i64* %envptr7590603, align 8                                    ; load; *envptr7590603
  %_957581328 = call i64 @prim_car(i64 %rvp7584849)                                  ; call prim_car
  %rvp7584848 = call i64 @prim_cdr(i64 %rvp7584849)                                  ; call prim_cdr
  %a7581135 = call i64 @prim_car(i64 %rvp7584848)                                    ; call prim_car
  %na7584741 = call i64 @prim_cdr(i64 %rvp7584848)                                   ; call prim_cdr
  %cmp7590604 = icmp eq i64 %a7581135, 15                                            ; false?
  br i1 %cmp7590604, label %else7590606, label %then7590605                          ; if

then7590605:
  %arg7582770 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581136 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582770)        ; call prim_vector_45ref
  %a7581137 = call i64 @prim_procedure_63(i64 %a7581136)                             ; call prim_procedure_63
  %cmp7590607 = icmp eq i64 %a7581137, 15                                            ; false?
  br i1 %cmp7590607, label %else7590609, label %then7590608                          ; if

then7590608:
  %arg7582773 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581138 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582773)        ; call prim_vector_45ref
  %a7581139 = call i64 @prim_cdr(i64 %K7C$x)                                         ; call prim_cdr
  %cloptr7590610 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7590612 = getelementptr inbounds i64, i64* %cloptr7590610, i64 1              ; &eptr7590612[1]
  %eptr7590613 = getelementptr inbounds i64, i64* %cloptr7590610, i64 2              ; &eptr7590613[2]
  %eptr7590614 = getelementptr inbounds i64, i64* %cloptr7590610, i64 3              ; &eptr7590614[3]
  %eptr7590615 = getelementptr inbounds i64, i64* %cloptr7590610, i64 4              ; &eptr7590615[4]
  %eptr7590616 = getelementptr inbounds i64, i64* %cloptr7590610, i64 5              ; &eptr7590616[5]
  %eptr7590617 = getelementptr inbounds i64, i64* %cloptr7590610, i64 6              ; &eptr7590617[6]
  store i64 %K7C$x, i64* %eptr7590612                                                ; *eptr7590612 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590613                                                ; *eptr7590613 = %tx0$y
  store i64 %a7581138, i64* %eptr7590614                                             ; *eptr7590614 = %a7581138
  store i64 %DNM$my_45try, i64* %eptr7590615                                         ; *eptr7590615 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590616                                                ; *eptr7590616 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590617                                          ; *eptr7590617 = %cont7581327
  %eptr7590611 = getelementptr inbounds i64, i64* %cloptr7590610, i64 0              ; &cloptr7590610[0]
  %f7590618 = ptrtoint void(i64,i64)* @lam7586039 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590618, i64* %eptr7590611                                             ; store fptr
  %arg7582778 = ptrtoint i64* %cloptr7590610 to i64                                  ; closure cast; i64* -> i64
  %rva7584789 = add i64 0, 0                                                         ; quoted ()
  %rva7584788 = call i64 @prim_cons(i64 %tx0$y, i64 %rva7584789)                     ; call prim_cons
  %rva7584787 = call i64 @prim_cons(i64 %a7581139, i64 %rva7584788)                  ; call prim_cons
  %rva7584786 = call i64 @prim_cons(i64 %arg7582778, i64 %rva7584787)                ; call prim_cons
  %cloptr7590619 = inttoptr i64 %z23$_37append to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7590620 = getelementptr inbounds i64, i64* %cloptr7590619, i64 0             ; &cloptr7590619[0]
  %f7590622 = load i64, i64* %i0ptr7590620, align 8                                  ; load; *i0ptr7590620
  %fptr7590621 = inttoptr i64 %f7590622 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590621(i64 %z23$_37append, i64 %rva7584786)        ; tail call
  ret void

else7590609:
  %arg7582823 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590623, i32 0, i32 0)); quoted string
  %retprim7581337 = call i64 @prim_halt(i64 %arg7582823)                             ; call prim_halt
  %cloptr7590624 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7590626 = getelementptr inbounds i64, i64* %cloptr7590624, i64 1              ; &eptr7590626[1]
  %eptr7590627 = getelementptr inbounds i64, i64* %cloptr7590624, i64 2              ; &eptr7590627[2]
  %eptr7590628 = getelementptr inbounds i64, i64* %cloptr7590624, i64 3              ; &eptr7590628[3]
  %eptr7590629 = getelementptr inbounds i64, i64* %cloptr7590624, i64 4              ; &eptr7590629[4]
  %eptr7590630 = getelementptr inbounds i64, i64* %cloptr7590624, i64 5              ; &eptr7590630[5]
  store i64 %K7C$x, i64* %eptr7590626                                                ; *eptr7590626 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590627                                                ; *eptr7590627 = %tx0$y
  store i64 %DNM$my_45try, i64* %eptr7590628                                         ; *eptr7590628 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590629                                                ; *eptr7590629 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590630                                          ; *eptr7590630 = %cont7581327
  %eptr7590625 = getelementptr inbounds i64, i64* %cloptr7590624, i64 0              ; &cloptr7590624[0]
  %f7590631 = ptrtoint void(i64,i64)* @lam7586058 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590631, i64* %eptr7590625                                             ; store fptr
  %arg7582826 = ptrtoint i64* %cloptr7590624 to i64                                  ; closure cast; i64* -> i64
  %arg7582825 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584818 = add i64 0, 0                                                         ; quoted ()
  %rva7584817 = call i64 @prim_cons(i64 %retprim7581337, i64 %rva7584818)            ; call prim_cons
  %rva7584816 = call i64 @prim_cons(i64 %arg7582825, i64 %rva7584817)                ; call prim_cons
  %cloptr7590632 = inttoptr i64 %arg7582826 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590633 = getelementptr inbounds i64, i64* %cloptr7590632, i64 0             ; &cloptr7590632[0]
  %f7590635 = load i64, i64* %i0ptr7590633, align 8                                  ; load; *i0ptr7590633
  %fptr7590634 = inttoptr i64 %f7590635 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590634(i64 %arg7582826, i64 %rva7584816)           ; tail call
  ret void

else7590606:
  %cloptr7590636 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7590638 = getelementptr inbounds i64, i64* %cloptr7590636, i64 1              ; &eptr7590638[1]
  %eptr7590639 = getelementptr inbounds i64, i64* %cloptr7590636, i64 2              ; &eptr7590639[2]
  %eptr7590640 = getelementptr inbounds i64, i64* %cloptr7590636, i64 3              ; &eptr7590640[3]
  %eptr7590641 = getelementptr inbounds i64, i64* %cloptr7590636, i64 4              ; &eptr7590641[4]
  %eptr7590642 = getelementptr inbounds i64, i64* %cloptr7590636, i64 5              ; &eptr7590642[5]
  store i64 %K7C$x, i64* %eptr7590638                                                ; *eptr7590638 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590639                                                ; *eptr7590639 = %tx0$y
  store i64 %DNM$my_45try, i64* %eptr7590640                                         ; *eptr7590640 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590641                                                ; *eptr7590641 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590642                                          ; *eptr7590642 = %cont7581327
  %eptr7590637 = getelementptr inbounds i64, i64* %cloptr7590636, i64 0              ; &cloptr7590636[0]
  %f7590643 = ptrtoint void(i64,i64)* @lam7586079 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590643, i64* %eptr7590637                                             ; store fptr
  %arg7582857 = ptrtoint i64* %cloptr7590636 to i64                                  ; closure cast; i64* -> i64
  %arg7582856 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7582855 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584847 = add i64 0, 0                                                         ; quoted ()
  %rva7584846 = call i64 @prim_cons(i64 %arg7582855, i64 %rva7584847)                ; call prim_cons
  %rva7584845 = call i64 @prim_cons(i64 %arg7582856, i64 %rva7584846)                ; call prim_cons
  %cloptr7590644 = inttoptr i64 %arg7582857 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590645 = getelementptr inbounds i64, i64* %cloptr7590644, i64 0             ; &cloptr7590644[0]
  %f7590647 = load i64, i64* %i0ptr7590645, align 8                                  ; load; *i0ptr7590645
  %fptr7590646 = inttoptr i64 %f7590647 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590646(i64 %arg7582857, i64 %rva7584845)           ; tail call
  ret void
}


define void @lam7586079(i64 %env7586080, i64 %rvp7584844) {
  %envptr7590648 = inttoptr i64 %env7586080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590649 = getelementptr inbounds i64, i64* %envptr7590648, i64 5            ; &envptr7590648[5]
  %cont7581327 = load i64, i64* %envptr7590649, align 8                              ; load; *envptr7590649
  %envptr7590650 = inttoptr i64 %env7586080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590651 = getelementptr inbounds i64, i64* %envptr7590650, i64 4            ; &envptr7590650[4]
  %tdU$z = load i64, i64* %envptr7590651, align 8                                    ; load; *envptr7590651
  %envptr7590652 = inttoptr i64 %env7586080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590653 = getelementptr inbounds i64, i64* %envptr7590652, i64 3            ; &envptr7590652[3]
  %DNM$my_45try = load i64, i64* %envptr7590653, align 8                             ; load; *envptr7590653
  %envptr7590654 = inttoptr i64 %env7586080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590655 = getelementptr inbounds i64, i64* %envptr7590654, i64 2            ; &envptr7590654[2]
  %tx0$y = load i64, i64* %envptr7590655, align 8                                    ; load; *envptr7590655
  %envptr7590656 = inttoptr i64 %env7586080 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590657 = getelementptr inbounds i64, i64* %envptr7590656, i64 1            ; &envptr7590656[1]
  %K7C$x = load i64, i64* %envptr7590657, align 8                                    ; load; *envptr7590657
  %_957581329 = call i64 @prim_car(i64 %rvp7584844)                                  ; call prim_car
  %rvp7584843 = call i64 @prim_cdr(i64 %rvp7584844)                                  ; call prim_cdr
  %a7581144 = call i64 @prim_car(i64 %rvp7584843)                                    ; call prim_car
  %na7584820 = call i64 @prim_cdr(i64 %rvp7584843)                                   ; call prim_cdr
  %arg7582858 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581145 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582858)        ; call prim_vector_45ref
  %a7581146 = call i64 @prim_procedure_63(i64 %a7581145)                             ; call prim_procedure_63
  %cmp7590658 = icmp eq i64 %a7581146, 15                                            ; false?
  br i1 %cmp7590658, label %else7590660, label %then7590659                          ; if

then7590659:
  %arg7582861 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581147 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582861)        ; call prim_vector_45ref
  %a7581148 = call i64 @prim_cdr(i64 %K7C$x)                                         ; call prim_cdr
  %a7581149 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %a7581150 = call i64 @prim_cons(i64 %a7581149, i64 %tx0$y)                         ; call prim_cons
  %cloptr7590661 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590663 = getelementptr inbounds i64, i64* %cloptr7590661, i64 1              ; &eptr7590663[1]
  %eptr7590664 = getelementptr inbounds i64, i64* %cloptr7590661, i64 2              ; &eptr7590664[2]
  store i64 %a7581144, i64* %eptr7590663                                             ; *eptr7590663 = %a7581144
  store i64 %cont7581327, i64* %eptr7590664                                          ; *eptr7590664 = %cont7581327
  %eptr7590662 = getelementptr inbounds i64, i64* %cloptr7590661, i64 0              ; &cloptr7590661[0]
  %f7590665 = ptrtoint void(i64,i64)* @lam7586068 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590665, i64* %eptr7590662                                             ; store fptr
  %arg7582870 = ptrtoint i64* %cloptr7590661 to i64                                  ; closure cast; i64* -> i64
  %rva7584832 = add i64 0, 0                                                         ; quoted ()
  %rva7584831 = call i64 @prim_cons(i64 %tdU$z, i64 %rva7584832)                     ; call prim_cons
  %rva7584830 = call i64 @prim_cons(i64 %a7581150, i64 %rva7584831)                  ; call prim_cons
  %rva7584829 = call i64 @prim_cons(i64 %a7581148, i64 %rva7584830)                  ; call prim_cons
  %rva7584828 = call i64 @prim_cons(i64 %arg7582870, i64 %rva7584829)                ; call prim_cons
  %cloptr7590666 = inttoptr i64 %a7581147 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590667 = getelementptr inbounds i64, i64* %cloptr7590666, i64 0             ; &cloptr7590666[0]
  %f7590669 = load i64, i64* %i0ptr7590667, align 8                                  ; load; *i0ptr7590667
  %fptr7590668 = inttoptr i64 %f7590669 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590668(i64 %a7581147, i64 %rva7584828)             ; tail call
  ret void

else7590660:
  %arg7582877 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590670, i32 0, i32 0)); quoted string
  %retprim7581332 = call i64 @prim_halt(i64 %arg7582877)                             ; call prim_halt
  %cloptr7590671 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590673 = getelementptr inbounds i64, i64* %cloptr7590671, i64 1              ; &eptr7590673[1]
  %eptr7590674 = getelementptr inbounds i64, i64* %cloptr7590671, i64 2              ; &eptr7590674[2]
  store i64 %a7581144, i64* %eptr7590673                                             ; *eptr7590673 = %a7581144
  store i64 %cont7581327, i64* %eptr7590674                                          ; *eptr7590674 = %cont7581327
  %eptr7590672 = getelementptr inbounds i64, i64* %cloptr7590671, i64 0              ; &cloptr7590671[0]
  %f7590675 = ptrtoint void(i64,i64)* @lam7586075 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590675, i64* %eptr7590672                                             ; store fptr
  %arg7582880 = ptrtoint i64* %cloptr7590671 to i64                                  ; closure cast; i64* -> i64
  %arg7582879 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584842 = add i64 0, 0                                                         ; quoted ()
  %rva7584841 = call i64 @prim_cons(i64 %retprim7581332, i64 %rva7584842)            ; call prim_cons
  %rva7584840 = call i64 @prim_cons(i64 %arg7582879, i64 %rva7584841)                ; call prim_cons
  %cloptr7590676 = inttoptr i64 %arg7582880 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590677 = getelementptr inbounds i64, i64* %cloptr7590676, i64 0             ; &cloptr7590676[0]
  %f7590679 = load i64, i64* %i0ptr7590677, align 8                                  ; load; *i0ptr7590677
  %fptr7590678 = inttoptr i64 %f7590679 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590678(i64 %arg7582880, i64 %rva7584840)           ; tail call
  ret void
}


define void @lam7586075(i64 %env7586076, i64 %rvp7584839) {
  %envptr7590680 = inttoptr i64 %env7586076 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590681 = getelementptr inbounds i64, i64* %envptr7590680, i64 2            ; &envptr7590680[2]
  %cont7581327 = load i64, i64* %envptr7590681, align 8                              ; load; *envptr7590681
  %envptr7590682 = inttoptr i64 %env7586076 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590683 = getelementptr inbounds i64, i64* %envptr7590682, i64 1            ; &envptr7590682[1]
  %a7581144 = load i64, i64* %envptr7590683, align 8                                 ; load; *envptr7590683
  %_957581330 = call i64 @prim_car(i64 %rvp7584839)                                  ; call prim_car
  %rvp7584838 = call i64 @prim_cdr(i64 %rvp7584839)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584838)                                    ; call prim_car
  %na7584834 = call i64 @prim_cdr(i64 %rvp7584838)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582884 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584837 = add i64 0, 0                                                         ; quoted ()
  %rva7584836 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584837)            ; call prim_cons
  %rva7584835 = call i64 @prim_cons(i64 %arg7582884, i64 %rva7584836)                ; call prim_cons
  %cloptr7590684 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590685 = getelementptr inbounds i64, i64* %cloptr7590684, i64 0             ; &cloptr7590684[0]
  %f7590687 = load i64, i64* %i0ptr7590685, align 8                                  ; load; *i0ptr7590685
  %fptr7590686 = inttoptr i64 %f7590687 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590686(i64 %cont7581327, i64 %rva7584835)          ; tail call
  ret void
}


define void @lam7586068(i64 %env7586069, i64 %rvp7584827) {
  %envptr7590688 = inttoptr i64 %env7586069 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590689 = getelementptr inbounds i64, i64* %envptr7590688, i64 2            ; &envptr7590688[2]
  %cont7581327 = load i64, i64* %envptr7590689, align 8                              ; load; *envptr7590689
  %envptr7590690 = inttoptr i64 %env7586069 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590691 = getelementptr inbounds i64, i64* %envptr7590690, i64 1            ; &envptr7590690[1]
  %a7581144 = load i64, i64* %envptr7590691, align 8                                 ; load; *envptr7590691
  %_957581330 = call i64 @prim_car(i64 %rvp7584827)                                  ; call prim_car
  %rvp7584826 = call i64 @prim_cdr(i64 %rvp7584827)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584826)                                    ; call prim_car
  %na7584822 = call i64 @prim_cdr(i64 %rvp7584826)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582875 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584825 = add i64 0, 0                                                         ; quoted ()
  %rva7584824 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584825)            ; call prim_cons
  %rva7584823 = call i64 @prim_cons(i64 %arg7582875, i64 %rva7584824)                ; call prim_cons
  %cloptr7590692 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590693 = getelementptr inbounds i64, i64* %cloptr7590692, i64 0             ; &cloptr7590692[0]
  %f7590695 = load i64, i64* %i0ptr7590693, align 8                                  ; load; *i0ptr7590693
  %fptr7590694 = inttoptr i64 %f7590695 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590694(i64 %cont7581327, i64 %rva7584823)          ; tail call
  ret void
}


define void @lam7586058(i64 %env7586059, i64 %rvp7584815) {
  %envptr7590696 = inttoptr i64 %env7586059 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590697 = getelementptr inbounds i64, i64* %envptr7590696, i64 5            ; &envptr7590696[5]
  %cont7581327 = load i64, i64* %envptr7590697, align 8                              ; load; *envptr7590697
  %envptr7590698 = inttoptr i64 %env7586059 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590699 = getelementptr inbounds i64, i64* %envptr7590698, i64 4            ; &envptr7590698[4]
  %tdU$z = load i64, i64* %envptr7590699, align 8                                    ; load; *envptr7590699
  %envptr7590700 = inttoptr i64 %env7586059 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590701 = getelementptr inbounds i64, i64* %envptr7590700, i64 3            ; &envptr7590700[3]
  %DNM$my_45try = load i64, i64* %envptr7590701, align 8                             ; load; *envptr7590701
  %envptr7590702 = inttoptr i64 %env7586059 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590703 = getelementptr inbounds i64, i64* %envptr7590702, i64 2            ; &envptr7590702[2]
  %tx0$y = load i64, i64* %envptr7590703, align 8                                    ; load; *envptr7590703
  %envptr7590704 = inttoptr i64 %env7586059 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590705 = getelementptr inbounds i64, i64* %envptr7590704, i64 1            ; &envptr7590704[1]
  %K7C$x = load i64, i64* %envptr7590705, align 8                                    ; load; *envptr7590705
  %_957581329 = call i64 @prim_car(i64 %rvp7584815)                                  ; call prim_car
  %rvp7584814 = call i64 @prim_cdr(i64 %rvp7584815)                                  ; call prim_cdr
  %a7581144 = call i64 @prim_car(i64 %rvp7584814)                                    ; call prim_car
  %na7584791 = call i64 @prim_cdr(i64 %rvp7584814)                                   ; call prim_cdr
  %arg7582827 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581145 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582827)        ; call prim_vector_45ref
  %a7581146 = call i64 @prim_procedure_63(i64 %a7581145)                             ; call prim_procedure_63
  %cmp7590706 = icmp eq i64 %a7581146, 15                                            ; false?
  br i1 %cmp7590706, label %else7590708, label %then7590707                          ; if

then7590707:
  %arg7582830 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581147 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582830)        ; call prim_vector_45ref
  %a7581148 = call i64 @prim_cdr(i64 %K7C$x)                                         ; call prim_cdr
  %a7581149 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %a7581150 = call i64 @prim_cons(i64 %a7581149, i64 %tx0$y)                         ; call prim_cons
  %cloptr7590709 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590711 = getelementptr inbounds i64, i64* %cloptr7590709, i64 1              ; &eptr7590711[1]
  %eptr7590712 = getelementptr inbounds i64, i64* %cloptr7590709, i64 2              ; &eptr7590712[2]
  store i64 %a7581144, i64* %eptr7590711                                             ; *eptr7590711 = %a7581144
  store i64 %cont7581327, i64* %eptr7590712                                          ; *eptr7590712 = %cont7581327
  %eptr7590710 = getelementptr inbounds i64, i64* %cloptr7590709, i64 0              ; &cloptr7590709[0]
  %f7590713 = ptrtoint void(i64,i64)* @lam7586047 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590713, i64* %eptr7590710                                             ; store fptr
  %arg7582839 = ptrtoint i64* %cloptr7590709 to i64                                  ; closure cast; i64* -> i64
  %rva7584803 = add i64 0, 0                                                         ; quoted ()
  %rva7584802 = call i64 @prim_cons(i64 %tdU$z, i64 %rva7584803)                     ; call prim_cons
  %rva7584801 = call i64 @prim_cons(i64 %a7581150, i64 %rva7584802)                  ; call prim_cons
  %rva7584800 = call i64 @prim_cons(i64 %a7581148, i64 %rva7584801)                  ; call prim_cons
  %rva7584799 = call i64 @prim_cons(i64 %arg7582839, i64 %rva7584800)                ; call prim_cons
  %cloptr7590714 = inttoptr i64 %a7581147 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590715 = getelementptr inbounds i64, i64* %cloptr7590714, i64 0             ; &cloptr7590714[0]
  %f7590717 = load i64, i64* %i0ptr7590715, align 8                                  ; load; *i0ptr7590715
  %fptr7590716 = inttoptr i64 %f7590717 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590716(i64 %a7581147, i64 %rva7584799)             ; tail call
  ret void

else7590708:
  %arg7582846 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590718, i32 0, i32 0)); quoted string
  %retprim7581332 = call i64 @prim_halt(i64 %arg7582846)                             ; call prim_halt
  %cloptr7590719 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590721 = getelementptr inbounds i64, i64* %cloptr7590719, i64 1              ; &eptr7590721[1]
  %eptr7590722 = getelementptr inbounds i64, i64* %cloptr7590719, i64 2              ; &eptr7590722[2]
  store i64 %a7581144, i64* %eptr7590721                                             ; *eptr7590721 = %a7581144
  store i64 %cont7581327, i64* %eptr7590722                                          ; *eptr7590722 = %cont7581327
  %eptr7590720 = getelementptr inbounds i64, i64* %cloptr7590719, i64 0              ; &cloptr7590719[0]
  %f7590723 = ptrtoint void(i64,i64)* @lam7586054 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590723, i64* %eptr7590720                                             ; store fptr
  %arg7582849 = ptrtoint i64* %cloptr7590719 to i64                                  ; closure cast; i64* -> i64
  %arg7582848 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584813 = add i64 0, 0                                                         ; quoted ()
  %rva7584812 = call i64 @prim_cons(i64 %retprim7581332, i64 %rva7584813)            ; call prim_cons
  %rva7584811 = call i64 @prim_cons(i64 %arg7582848, i64 %rva7584812)                ; call prim_cons
  %cloptr7590724 = inttoptr i64 %arg7582849 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590725 = getelementptr inbounds i64, i64* %cloptr7590724, i64 0             ; &cloptr7590724[0]
  %f7590727 = load i64, i64* %i0ptr7590725, align 8                                  ; load; *i0ptr7590725
  %fptr7590726 = inttoptr i64 %f7590727 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590726(i64 %arg7582849, i64 %rva7584811)           ; tail call
  ret void
}


define void @lam7586054(i64 %env7586055, i64 %rvp7584810) {
  %envptr7590728 = inttoptr i64 %env7586055 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590729 = getelementptr inbounds i64, i64* %envptr7590728, i64 2            ; &envptr7590728[2]
  %cont7581327 = load i64, i64* %envptr7590729, align 8                              ; load; *envptr7590729
  %envptr7590730 = inttoptr i64 %env7586055 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590731 = getelementptr inbounds i64, i64* %envptr7590730, i64 1            ; &envptr7590730[1]
  %a7581144 = load i64, i64* %envptr7590731, align 8                                 ; load; *envptr7590731
  %_957581330 = call i64 @prim_car(i64 %rvp7584810)                                  ; call prim_car
  %rvp7584809 = call i64 @prim_cdr(i64 %rvp7584810)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584809)                                    ; call prim_car
  %na7584805 = call i64 @prim_cdr(i64 %rvp7584809)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582853 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584808 = add i64 0, 0                                                         ; quoted ()
  %rva7584807 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584808)            ; call prim_cons
  %rva7584806 = call i64 @prim_cons(i64 %arg7582853, i64 %rva7584807)                ; call prim_cons
  %cloptr7590732 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590733 = getelementptr inbounds i64, i64* %cloptr7590732, i64 0             ; &cloptr7590732[0]
  %f7590735 = load i64, i64* %i0ptr7590733, align 8                                  ; load; *i0ptr7590733
  %fptr7590734 = inttoptr i64 %f7590735 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590734(i64 %cont7581327, i64 %rva7584806)          ; tail call
  ret void
}


define void @lam7586047(i64 %env7586048, i64 %rvp7584798) {
  %envptr7590736 = inttoptr i64 %env7586048 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590737 = getelementptr inbounds i64, i64* %envptr7590736, i64 2            ; &envptr7590736[2]
  %cont7581327 = load i64, i64* %envptr7590737, align 8                              ; load; *envptr7590737
  %envptr7590738 = inttoptr i64 %env7586048 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590739 = getelementptr inbounds i64, i64* %envptr7590738, i64 1            ; &envptr7590738[1]
  %a7581144 = load i64, i64* %envptr7590739, align 8                                 ; load; *envptr7590739
  %_957581330 = call i64 @prim_car(i64 %rvp7584798)                                  ; call prim_car
  %rvp7584797 = call i64 @prim_cdr(i64 %rvp7584798)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584797)                                    ; call prim_car
  %na7584793 = call i64 @prim_cdr(i64 %rvp7584797)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582844 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584796 = add i64 0, 0                                                         ; quoted ()
  %rva7584795 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584796)            ; call prim_cons
  %rva7584794 = call i64 @prim_cons(i64 %arg7582844, i64 %rva7584795)                ; call prim_cons
  %cloptr7590740 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590741 = getelementptr inbounds i64, i64* %cloptr7590740, i64 0             ; &cloptr7590740[0]
  %f7590743 = load i64, i64* %i0ptr7590741, align 8                                  ; load; *i0ptr7590741
  %fptr7590742 = inttoptr i64 %f7590743 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590742(i64 %cont7581327, i64 %rva7584794)          ; tail call
  ret void
}


define void @lam7586039(i64 %env7586040, i64 %rvp7584785) {
  %envptr7590744 = inttoptr i64 %env7586040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590745 = getelementptr inbounds i64, i64* %envptr7590744, i64 6            ; &envptr7590744[6]
  %cont7581327 = load i64, i64* %envptr7590745, align 8                              ; load; *envptr7590745
  %envptr7590746 = inttoptr i64 %env7586040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590747 = getelementptr inbounds i64, i64* %envptr7590746, i64 5            ; &envptr7590746[5]
  %tdU$z = load i64, i64* %envptr7590747, align 8                                    ; load; *envptr7590747
  %envptr7590748 = inttoptr i64 %env7586040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590749 = getelementptr inbounds i64, i64* %envptr7590748, i64 4            ; &envptr7590748[4]
  %DNM$my_45try = load i64, i64* %envptr7590749, align 8                             ; load; *envptr7590749
  %envptr7590750 = inttoptr i64 %env7586040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590751 = getelementptr inbounds i64, i64* %envptr7590750, i64 3            ; &envptr7590750[3]
  %a7581138 = load i64, i64* %envptr7590751, align 8                                 ; load; *envptr7590751
  %envptr7590752 = inttoptr i64 %env7586040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590753 = getelementptr inbounds i64, i64* %envptr7590752, i64 2            ; &envptr7590752[2]
  %tx0$y = load i64, i64* %envptr7590753, align 8                                    ; load; *envptr7590753
  %envptr7590754 = inttoptr i64 %env7586040 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590755 = getelementptr inbounds i64, i64* %envptr7590754, i64 1            ; &envptr7590754[1]
  %K7C$x = load i64, i64* %envptr7590755, align 8                                    ; load; *envptr7590755
  %_957581333 = call i64 @prim_car(i64 %rvp7584785)                                  ; call prim_car
  %rvp7584784 = call i64 @prim_cdr(i64 %rvp7584785)                                  ; call prim_cdr
  %a7581140 = call i64 @prim_car(i64 %rvp7584784)                                    ; call prim_car
  %na7584743 = call i64 @prim_cdr(i64 %rvp7584784)                                   ; call prim_cdr
  %cloptr7590756 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590757 = getelementptr inbounds i64, i64* %cloptr7590756, i64 0              ; &cloptr7590756[0]
  %f7590758 = ptrtoint void(i64,i64)* @lam7586037 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590758, i64* %eptr7590757                                             ; store fptr
  %arg7582781 = ptrtoint i64* %cloptr7590756 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590759 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7590761 = getelementptr inbounds i64, i64* %cloptr7590759, i64 1              ; &eptr7590761[1]
  %eptr7590762 = getelementptr inbounds i64, i64* %cloptr7590759, i64 2              ; &eptr7590762[2]
  %eptr7590763 = getelementptr inbounds i64, i64* %cloptr7590759, i64 3              ; &eptr7590763[3]
  %eptr7590764 = getelementptr inbounds i64, i64* %cloptr7590759, i64 4              ; &eptr7590764[4]
  %eptr7590765 = getelementptr inbounds i64, i64* %cloptr7590759, i64 5              ; &eptr7590765[5]
  %eptr7590766 = getelementptr inbounds i64, i64* %cloptr7590759, i64 6              ; &eptr7590766[6]
  %eptr7590767 = getelementptr inbounds i64, i64* %cloptr7590759, i64 7              ; &eptr7590767[7]
  store i64 %K7C$x, i64* %eptr7590761                                                ; *eptr7590761 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590762                                                ; *eptr7590762 = %tx0$y
  store i64 %a7581138, i64* %eptr7590763                                             ; *eptr7590763 = %a7581138
  store i64 %DNM$my_45try, i64* %eptr7590764                                         ; *eptr7590764 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590765                                                ; *eptr7590765 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590766                                          ; *eptr7590766 = %cont7581327
  store i64 %a7581140, i64* %eptr7590767                                             ; *eptr7590767 = %a7581140
  %eptr7590760 = getelementptr inbounds i64, i64* %cloptr7590759, i64 0              ; &cloptr7590759[0]
  %f7590768 = ptrtoint void(i64,i64)* @lam7586033 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590768, i64* %eptr7590760                                             ; store fptr
  %arg7582780 = ptrtoint i64* %cloptr7590759 to i64                                  ; closure cast; i64* -> i64
  %rva7584783 = add i64 0, 0                                                         ; quoted ()
  %rva7584782 = call i64 @prim_cons(i64 %arg7582780, i64 %rva7584783)                ; call prim_cons
  %cloptr7590769 = inttoptr i64 %arg7582781 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590770 = getelementptr inbounds i64, i64* %cloptr7590769, i64 0             ; &cloptr7590769[0]
  %f7590772 = load i64, i64* %i0ptr7590770, align 8                                  ; load; *i0ptr7590770
  %fptr7590771 = inttoptr i64 %f7590772 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590771(i64 %arg7582781, i64 %rva7584782)           ; tail call
  ret void
}


define void @lam7586037(i64 %env7586038, i64 %uTh$lst7581336) {
  %cont7581335 = call i64 @prim_car(i64 %uTh$lst7581336)                             ; call prim_car
  %uTh$lst = call i64 @prim_cdr(i64 %uTh$lst7581336)                                 ; call prim_cdr
  %arg7582785 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584746 = add i64 0, 0                                                         ; quoted ()
  %rva7584745 = call i64 @prim_cons(i64 %uTh$lst, i64 %rva7584746)                   ; call prim_cons
  %rva7584744 = call i64 @prim_cons(i64 %arg7582785, i64 %rva7584745)                ; call prim_cons
  %cloptr7590773 = inttoptr i64 %cont7581335 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590774 = getelementptr inbounds i64, i64* %cloptr7590773, i64 0             ; &cloptr7590773[0]
  %f7590776 = load i64, i64* %i0ptr7590774, align 8                                  ; load; *i0ptr7590774
  %fptr7590775 = inttoptr i64 %f7590776 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590775(i64 %cont7581335, i64 %rva7584744)          ; tail call
  ret void
}


define void @lam7586033(i64 %env7586034, i64 %rvp7584781) {
  %envptr7590777 = inttoptr i64 %env7586034 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590778 = getelementptr inbounds i64, i64* %envptr7590777, i64 7            ; &envptr7590777[7]
  %a7581140 = load i64, i64* %envptr7590778, align 8                                 ; load; *envptr7590778
  %envptr7590779 = inttoptr i64 %env7586034 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590780 = getelementptr inbounds i64, i64* %envptr7590779, i64 6            ; &envptr7590779[6]
  %cont7581327 = load i64, i64* %envptr7590780, align 8                              ; load; *envptr7590780
  %envptr7590781 = inttoptr i64 %env7586034 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590782 = getelementptr inbounds i64, i64* %envptr7590781, i64 5            ; &envptr7590781[5]
  %tdU$z = load i64, i64* %envptr7590782, align 8                                    ; load; *envptr7590782
  %envptr7590783 = inttoptr i64 %env7586034 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590784 = getelementptr inbounds i64, i64* %envptr7590783, i64 4            ; &envptr7590783[4]
  %DNM$my_45try = load i64, i64* %envptr7590784, align 8                             ; load; *envptr7590784
  %envptr7590785 = inttoptr i64 %env7586034 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590786 = getelementptr inbounds i64, i64* %envptr7590785, i64 3            ; &envptr7590785[3]
  %a7581138 = load i64, i64* %envptr7590786, align 8                                 ; load; *envptr7590786
  %envptr7590787 = inttoptr i64 %env7586034 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590788 = getelementptr inbounds i64, i64* %envptr7590787, i64 2            ; &envptr7590787[2]
  %tx0$y = load i64, i64* %envptr7590788, align 8                                    ; load; *envptr7590788
  %envptr7590789 = inttoptr i64 %env7586034 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590790 = getelementptr inbounds i64, i64* %envptr7590789, i64 1            ; &envptr7590789[1]
  %K7C$x = load i64, i64* %envptr7590790, align 8                                    ; load; *envptr7590790
  %_957581334 = call i64 @prim_car(i64 %rvp7584781)                                  ; call prim_car
  %rvp7584780 = call i64 @prim_cdr(i64 %rvp7584781)                                  ; call prim_cdr
  %a7581141 = call i64 @prim_car(i64 %rvp7584780)                                    ; call prim_car
  %na7584748 = call i64 @prim_cdr(i64 %rvp7584780)                                   ; call prim_cdr
  %a7581142 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %a7581143 = call i64 @prim_cons(i64 %a7581142, i64 %tdU$z)                         ; call prim_cons
  %cloptr7590791 = call i64* @alloc(i64 48)                                          ; malloc
  %eptr7590793 = getelementptr inbounds i64, i64* %cloptr7590791, i64 1              ; &eptr7590793[1]
  %eptr7590794 = getelementptr inbounds i64, i64* %cloptr7590791, i64 2              ; &eptr7590794[2]
  %eptr7590795 = getelementptr inbounds i64, i64* %cloptr7590791, i64 3              ; &eptr7590795[3]
  %eptr7590796 = getelementptr inbounds i64, i64* %cloptr7590791, i64 4              ; &eptr7590796[4]
  %eptr7590797 = getelementptr inbounds i64, i64* %cloptr7590791, i64 5              ; &eptr7590797[5]
  store i64 %K7C$x, i64* %eptr7590793                                                ; *eptr7590793 = %K7C$x
  store i64 %tx0$y, i64* %eptr7590794                                                ; *eptr7590794 = %tx0$y
  store i64 %DNM$my_45try, i64* %eptr7590795                                         ; *eptr7590795 = %DNM$my_45try
  store i64 %tdU$z, i64* %eptr7590796                                                ; *eptr7590796 = %tdU$z
  store i64 %cont7581327, i64* %eptr7590797                                          ; *eptr7590797 = %cont7581327
  %eptr7590792 = getelementptr inbounds i64, i64* %cloptr7590791, i64 0              ; &cloptr7590791[0]
  %f7590798 = ptrtoint void(i64,i64)* @lam7586031 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590798, i64* %eptr7590792                                             ; store fptr
  %arg7582793 = ptrtoint i64* %cloptr7590791 to i64                                  ; closure cast; i64* -> i64
  %rva7584779 = add i64 0, 0                                                         ; quoted ()
  %rva7584778 = call i64 @prim_cons(i64 %a7581143, i64 %rva7584779)                  ; call prim_cons
  %rva7584777 = call i64 @prim_cons(i64 %a7581141, i64 %rva7584778)                  ; call prim_cons
  %rva7584776 = call i64 @prim_cons(i64 %a7581140, i64 %rva7584777)                  ; call prim_cons
  %rva7584775 = call i64 @prim_cons(i64 %arg7582793, i64 %rva7584776)                ; call prim_cons
  %cloptr7590799 = inttoptr i64 %a7581138 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590800 = getelementptr inbounds i64, i64* %cloptr7590799, i64 0             ; &cloptr7590799[0]
  %f7590802 = load i64, i64* %i0ptr7590800, align 8                                  ; load; *i0ptr7590800
  %fptr7590801 = inttoptr i64 %f7590802 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590801(i64 %a7581138, i64 %rva7584775)             ; tail call
  ret void
}


define void @lam7586031(i64 %env7586032, i64 %rvp7584774) {
  %envptr7590803 = inttoptr i64 %env7586032 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590804 = getelementptr inbounds i64, i64* %envptr7590803, i64 5            ; &envptr7590803[5]
  %cont7581327 = load i64, i64* %envptr7590804, align 8                              ; load; *envptr7590804
  %envptr7590805 = inttoptr i64 %env7586032 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590806 = getelementptr inbounds i64, i64* %envptr7590805, i64 4            ; &envptr7590805[4]
  %tdU$z = load i64, i64* %envptr7590806, align 8                                    ; load; *envptr7590806
  %envptr7590807 = inttoptr i64 %env7586032 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590808 = getelementptr inbounds i64, i64* %envptr7590807, i64 3            ; &envptr7590807[3]
  %DNM$my_45try = load i64, i64* %envptr7590808, align 8                             ; load; *envptr7590808
  %envptr7590809 = inttoptr i64 %env7586032 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590810 = getelementptr inbounds i64, i64* %envptr7590809, i64 2            ; &envptr7590809[2]
  %tx0$y = load i64, i64* %envptr7590810, align 8                                    ; load; *envptr7590810
  %envptr7590811 = inttoptr i64 %env7586032 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590812 = getelementptr inbounds i64, i64* %envptr7590811, i64 1            ; &envptr7590811[1]
  %K7C$x = load i64, i64* %envptr7590812, align 8                                    ; load; *envptr7590812
  %_957581329 = call i64 @prim_car(i64 %rvp7584774)                                  ; call prim_car
  %rvp7584773 = call i64 @prim_cdr(i64 %rvp7584774)                                  ; call prim_cdr
  %a7581144 = call i64 @prim_car(i64 %rvp7584773)                                    ; call prim_car
  %na7584750 = call i64 @prim_cdr(i64 %rvp7584773)                                   ; call prim_cdr
  %arg7582795 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581145 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582795)        ; call prim_vector_45ref
  %a7581146 = call i64 @prim_procedure_63(i64 %a7581145)                             ; call prim_procedure_63
  %cmp7590813 = icmp eq i64 %a7581146, 15                                            ; false?
  br i1 %cmp7590813, label %else7590815, label %then7590814                          ; if

then7590814:
  %arg7582798 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581147 = call i64 @prim_vector_45ref(i64 %DNM$my_45try, i64 %arg7582798)        ; call prim_vector_45ref
  %a7581148 = call i64 @prim_cdr(i64 %K7C$x)                                         ; call prim_cdr
  %a7581149 = call i64 @prim_car(i64 %K7C$x)                                         ; call prim_car
  %a7581150 = call i64 @prim_cons(i64 %a7581149, i64 %tx0$y)                         ; call prim_cons
  %cloptr7590816 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590818 = getelementptr inbounds i64, i64* %cloptr7590816, i64 1              ; &eptr7590818[1]
  %eptr7590819 = getelementptr inbounds i64, i64* %cloptr7590816, i64 2              ; &eptr7590819[2]
  store i64 %a7581144, i64* %eptr7590818                                             ; *eptr7590818 = %a7581144
  store i64 %cont7581327, i64* %eptr7590819                                          ; *eptr7590819 = %cont7581327
  %eptr7590817 = getelementptr inbounds i64, i64* %cloptr7590816, i64 0              ; &cloptr7590816[0]
  %f7590820 = ptrtoint void(i64,i64)* @lam7586020 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590820, i64* %eptr7590817                                             ; store fptr
  %arg7582807 = ptrtoint i64* %cloptr7590816 to i64                                  ; closure cast; i64* -> i64
  %rva7584762 = add i64 0, 0                                                         ; quoted ()
  %rva7584761 = call i64 @prim_cons(i64 %tdU$z, i64 %rva7584762)                     ; call prim_cons
  %rva7584760 = call i64 @prim_cons(i64 %a7581150, i64 %rva7584761)                  ; call prim_cons
  %rva7584759 = call i64 @prim_cons(i64 %a7581148, i64 %rva7584760)                  ; call prim_cons
  %rva7584758 = call i64 @prim_cons(i64 %arg7582807, i64 %rva7584759)                ; call prim_cons
  %cloptr7590821 = inttoptr i64 %a7581147 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7590822 = getelementptr inbounds i64, i64* %cloptr7590821, i64 0             ; &cloptr7590821[0]
  %f7590824 = load i64, i64* %i0ptr7590822, align 8                                  ; load; *i0ptr7590822
  %fptr7590823 = inttoptr i64 %f7590824 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590823(i64 %a7581147, i64 %rva7584758)             ; tail call
  ret void

else7590815:
  %arg7582814 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590825, i32 0, i32 0)); quoted string
  %retprim7581332 = call i64 @prim_halt(i64 %arg7582814)                             ; call prim_halt
  %cloptr7590826 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7590828 = getelementptr inbounds i64, i64* %cloptr7590826, i64 1              ; &eptr7590828[1]
  %eptr7590829 = getelementptr inbounds i64, i64* %cloptr7590826, i64 2              ; &eptr7590829[2]
  store i64 %a7581144, i64* %eptr7590828                                             ; *eptr7590828 = %a7581144
  store i64 %cont7581327, i64* %eptr7590829                                          ; *eptr7590829 = %cont7581327
  %eptr7590827 = getelementptr inbounds i64, i64* %cloptr7590826, i64 0              ; &cloptr7590826[0]
  %f7590830 = ptrtoint void(i64,i64)* @lam7586027 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590830, i64* %eptr7590827                                             ; store fptr
  %arg7582817 = ptrtoint i64* %cloptr7590826 to i64                                  ; closure cast; i64* -> i64
  %arg7582816 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584772 = add i64 0, 0                                                         ; quoted ()
  %rva7584771 = call i64 @prim_cons(i64 %retprim7581332, i64 %rva7584772)            ; call prim_cons
  %rva7584770 = call i64 @prim_cons(i64 %arg7582816, i64 %rva7584771)                ; call prim_cons
  %cloptr7590831 = inttoptr i64 %arg7582817 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590832 = getelementptr inbounds i64, i64* %cloptr7590831, i64 0             ; &cloptr7590831[0]
  %f7590834 = load i64, i64* %i0ptr7590832, align 8                                  ; load; *i0ptr7590832
  %fptr7590833 = inttoptr i64 %f7590834 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590833(i64 %arg7582817, i64 %rva7584770)           ; tail call
  ret void
}


define void @lam7586027(i64 %env7586028, i64 %rvp7584769) {
  %envptr7590835 = inttoptr i64 %env7586028 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590836 = getelementptr inbounds i64, i64* %envptr7590835, i64 2            ; &envptr7590835[2]
  %cont7581327 = load i64, i64* %envptr7590836, align 8                              ; load; *envptr7590836
  %envptr7590837 = inttoptr i64 %env7586028 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590838 = getelementptr inbounds i64, i64* %envptr7590837, i64 1            ; &envptr7590837[1]
  %a7581144 = load i64, i64* %envptr7590838, align 8                                 ; load; *envptr7590838
  %_957581330 = call i64 @prim_car(i64 %rvp7584769)                                  ; call prim_car
  %rvp7584768 = call i64 @prim_cdr(i64 %rvp7584769)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584768)                                    ; call prim_car
  %na7584764 = call i64 @prim_cdr(i64 %rvp7584768)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582821 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584767 = add i64 0, 0                                                         ; quoted ()
  %rva7584766 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584767)            ; call prim_cons
  %rva7584765 = call i64 @prim_cons(i64 %arg7582821, i64 %rva7584766)                ; call prim_cons
  %cloptr7590839 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590840 = getelementptr inbounds i64, i64* %cloptr7590839, i64 0             ; &cloptr7590839[0]
  %f7590842 = load i64, i64* %i0ptr7590840, align 8                                  ; load; *i0ptr7590840
  %fptr7590841 = inttoptr i64 %f7590842 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590841(i64 %cont7581327, i64 %rva7584765)          ; tail call
  ret void
}


define void @lam7586020(i64 %env7586021, i64 %rvp7584757) {
  %envptr7590843 = inttoptr i64 %env7586021 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590844 = getelementptr inbounds i64, i64* %envptr7590843, i64 2            ; &envptr7590843[2]
  %cont7581327 = load i64, i64* %envptr7590844, align 8                              ; load; *envptr7590844
  %envptr7590845 = inttoptr i64 %env7586021 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590846 = getelementptr inbounds i64, i64* %envptr7590845, i64 1            ; &envptr7590845[1]
  %a7581144 = load i64, i64* %envptr7590846, align 8                                 ; load; *envptr7590846
  %_957581330 = call i64 @prim_car(i64 %rvp7584757)                                  ; call prim_car
  %rvp7584756 = call i64 @prim_cdr(i64 %rvp7584757)                                  ; call prim_cdr
  %a7581151 = call i64 @prim_car(i64 %rvp7584756)                                    ; call prim_car
  %na7584752 = call i64 @prim_cdr(i64 %rvp7584756)                                   ; call prim_cdr
  %retprim7581331 = call i64 @prim__43(i64 %a7581144, i64 %a7581151)                 ; call prim__43
  %arg7582812 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584755 = add i64 0, 0                                                         ; quoted ()
  %rva7584754 = call i64 @prim_cons(i64 %retprim7581331, i64 %rva7584755)            ; call prim_cons
  %rva7584753 = call i64 @prim_cons(i64 %arg7582812, i64 %rva7584754)                ; call prim_cons
  %cloptr7590847 = inttoptr i64 %cont7581327 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590848 = getelementptr inbounds i64, i64* %cloptr7590847, i64 0             ; &cloptr7590847[0]
  %f7590850 = load i64, i64* %i0ptr7590848, align 8                                  ; load; *i0ptr7590848
  %fptr7590849 = inttoptr i64 %f7590850 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590849(i64 %cont7581327, i64 %rva7584753)          ; tail call
  ret void
}


define void @lam7586003(i64 %env7586004, i64 %rvp7585097) {
  %envptr7590851 = inttoptr i64 %env7586004 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590852 = getelementptr inbounds i64, i64* %envptr7590851, i64 3            ; &envptr7590851[3]
  %m0I$_37_47 = load i64, i64* %envptr7590852, align 8                               ; load; *envptr7590852
  %envptr7590853 = inttoptr i64 %env7586004 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590854 = getelementptr inbounds i64, i64* %envptr7590853, i64 2            ; &envptr7590853[2]
  %E10$ok_63 = load i64, i64* %envptr7590854, align 8                                ; load; *envptr7590854
  %envptr7590855 = inttoptr i64 %env7586004 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590856 = getelementptr inbounds i64, i64* %envptr7590855, i64 1            ; &envptr7590855[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590856, align 8                            ; load; *envptr7590856
  %cont7581339 = call i64 @prim_car(i64 %rvp7585097)                                 ; call prim_car
  %rvp7585096 = call i64 @prim_cdr(i64 %rvp7585097)                                  ; call prim_cdr
  %TWq$row = call i64 @prim_car(i64 %rvp7585096)                                     ; call prim_car
  %rvp7585095 = call i64 @prim_cdr(i64 %rvp7585096)                                  ; call prim_cdr
  %Whg$dist = call i64 @prim_car(i64 %rvp7585095)                                    ; call prim_car
  %rvp7585094 = call i64 @prim_cdr(i64 %rvp7585095)                                  ; call prim_cdr
  %eLB$placed = call i64 @prim_car(i64 %rvp7585094)                                  ; call prim_car
  %na7584973 = call i64 @prim_cdr(i64 %rvp7585094)                                   ; call prim_cdr
  %a7581152 = call i64 @prim_null_63(i64 %eLB$placed)                                ; call prim_null_63
  %cmp7590857 = icmp eq i64 %a7581152, 15                                            ; false?
  br i1 %cmp7590857, label %else7590859, label %then7590858                          ; if

then7590858:
  %arg7583011 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583010 = call i64 @const_init_true()                                          ; quoted #t
  %rva7584976 = add i64 0, 0                                                         ; quoted ()
  %rva7584975 = call i64 @prim_cons(i64 %arg7583010, i64 %rva7584976)                ; call prim_cons
  %rva7584974 = call i64 @prim_cons(i64 %arg7583011, i64 %rva7584975)                ; call prim_cons
  %cloptr7590860 = inttoptr i64 %cont7581339 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590861 = getelementptr inbounds i64, i64* %cloptr7590860, i64 0             ; &cloptr7590860[0]
  %f7590863 = load i64, i64* %i0ptr7590861, align 8                                  ; load; *i0ptr7590861
  %fptr7590862 = inttoptr i64 %f7590863 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590862(i64 %cont7581339, i64 %rva7584974)          ; tail call
  ret void

else7590859:
  %a7581153 = call i64 @prim_car(i64 %eLB$placed)                                    ; call prim_car
  %cloptr7590864 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590865 = getelementptr inbounds i64, i64* %cloptr7590864, i64 0              ; &cloptr7590864[0]
  %f7590866 = ptrtoint void(i64,i64)* @lam7586001 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590866, i64* %eptr7590865                                             ; store fptr
  %arg7583015 = ptrtoint i64* %cloptr7590864 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590867 = call i64* @alloc(i64 72)                                          ; malloc
  %eptr7590869 = getelementptr inbounds i64, i64* %cloptr7590867, i64 1              ; &eptr7590869[1]
  %eptr7590870 = getelementptr inbounds i64, i64* %cloptr7590867, i64 2              ; &eptr7590870[2]
  %eptr7590871 = getelementptr inbounds i64, i64* %cloptr7590867, i64 3              ; &eptr7590871[3]
  %eptr7590872 = getelementptr inbounds i64, i64* %cloptr7590867, i64 4              ; &eptr7590872[4]
  %eptr7590873 = getelementptr inbounds i64, i64* %cloptr7590867, i64 5              ; &eptr7590873[5]
  %eptr7590874 = getelementptr inbounds i64, i64* %cloptr7590867, i64 6              ; &eptr7590874[6]
  %eptr7590875 = getelementptr inbounds i64, i64* %cloptr7590867, i64 7              ; &eptr7590875[7]
  %eptr7590876 = getelementptr inbounds i64, i64* %cloptr7590867, i64 8              ; &eptr7590876[8]
  store i64 %ajE$_37foldl1, i64* %eptr7590869                                        ; *eptr7590869 = %ajE$_37foldl1
  store i64 %Whg$dist, i64* %eptr7590870                                             ; *eptr7590870 = %Whg$dist
  store i64 %E10$ok_63, i64* %eptr7590871                                            ; *eptr7590871 = %E10$ok_63
  store i64 %cont7581339, i64* %eptr7590872                                          ; *eptr7590872 = %cont7581339
  store i64 %a7581153, i64* %eptr7590873                                             ; *eptr7590873 = %a7581153
  store i64 %eLB$placed, i64* %eptr7590874                                           ; *eptr7590874 = %eLB$placed
  store i64 %m0I$_37_47, i64* %eptr7590875                                           ; *eptr7590875 = %m0I$_37_47
  store i64 %TWq$row, i64* %eptr7590876                                              ; *eptr7590876 = %TWq$row
  %eptr7590868 = getelementptr inbounds i64, i64* %cloptr7590867, i64 0              ; &cloptr7590867[0]
  %f7590877 = ptrtoint void(i64,i64)* @lam7585997 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590877, i64* %eptr7590868                                             ; store fptr
  %arg7583014 = ptrtoint i64* %cloptr7590867 to i64                                  ; closure cast; i64* -> i64
  %rva7585093 = add i64 0, 0                                                         ; quoted ()
  %rva7585092 = call i64 @prim_cons(i64 %arg7583014, i64 %rva7585093)                ; call prim_cons
  %cloptr7590878 = inttoptr i64 %arg7583015 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590879 = getelementptr inbounds i64, i64* %cloptr7590878, i64 0             ; &cloptr7590878[0]
  %f7590881 = load i64, i64* %i0ptr7590879, align 8                                  ; load; *i0ptr7590879
  %fptr7590880 = inttoptr i64 %f7590881 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590880(i64 %arg7583015, i64 %rva7585092)           ; tail call
  ret void
}


define void @lam7586001(i64 %env7586002, i64 %AEC$lst7581357) {
  %cont7581356 = call i64 @prim_car(i64 %AEC$lst7581357)                             ; call prim_car
  %AEC$lst = call i64 @prim_cdr(i64 %AEC$lst7581357)                                 ; call prim_cdr
  %arg7583019 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584979 = add i64 0, 0                                                         ; quoted ()
  %rva7584978 = call i64 @prim_cons(i64 %AEC$lst, i64 %rva7584979)                   ; call prim_cons
  %rva7584977 = call i64 @prim_cons(i64 %arg7583019, i64 %rva7584978)                ; call prim_cons
  %cloptr7590882 = inttoptr i64 %cont7581356 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590883 = getelementptr inbounds i64, i64* %cloptr7590882, i64 0             ; &cloptr7590882[0]
  %f7590885 = load i64, i64* %i0ptr7590883, align 8                                  ; load; *i0ptr7590883
  %fptr7590884 = inttoptr i64 %f7590885 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590884(i64 %cont7581356, i64 %rva7584977)          ; tail call
  ret void
}


define void @lam7585997(i64 %env7585998, i64 %rvp7585091) {
  %envptr7590886 = inttoptr i64 %env7585998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590887 = getelementptr inbounds i64, i64* %envptr7590886, i64 8            ; &envptr7590886[8]
  %TWq$row = load i64, i64* %envptr7590887, align 8                                  ; load; *envptr7590887
  %envptr7590888 = inttoptr i64 %env7585998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590889 = getelementptr inbounds i64, i64* %envptr7590888, i64 7            ; &envptr7590888[7]
  %m0I$_37_47 = load i64, i64* %envptr7590889, align 8                               ; load; *envptr7590889
  %envptr7590890 = inttoptr i64 %env7585998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590891 = getelementptr inbounds i64, i64* %envptr7590890, i64 6            ; &envptr7590890[6]
  %eLB$placed = load i64, i64* %envptr7590891, align 8                               ; load; *envptr7590891
  %envptr7590892 = inttoptr i64 %env7585998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590893 = getelementptr inbounds i64, i64* %envptr7590892, i64 5            ; &envptr7590892[5]
  %a7581153 = load i64, i64* %envptr7590893, align 8                                 ; load; *envptr7590893
  %envptr7590894 = inttoptr i64 %env7585998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590895 = getelementptr inbounds i64, i64* %envptr7590894, i64 4            ; &envptr7590894[4]
  %cont7581339 = load i64, i64* %envptr7590895, align 8                              ; load; *envptr7590895
  %envptr7590896 = inttoptr i64 %env7585998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590897 = getelementptr inbounds i64, i64* %envptr7590896, i64 3            ; &envptr7590896[3]
  %E10$ok_63 = load i64, i64* %envptr7590897, align 8                                ; load; *envptr7590897
  %envptr7590898 = inttoptr i64 %env7585998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590899 = getelementptr inbounds i64, i64* %envptr7590898, i64 2            ; &envptr7590898[2]
  %Whg$dist = load i64, i64* %envptr7590899, align 8                                 ; load; *envptr7590899
  %envptr7590900 = inttoptr i64 %env7585998 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590901 = getelementptr inbounds i64, i64* %envptr7590900, i64 1            ; &envptr7590900[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590901, align 8                            ; load; *envptr7590901
  %_957581354 = call i64 @prim_car(i64 %rvp7585091)                                  ; call prim_car
  %rvp7585090 = call i64 @prim_cdr(i64 %rvp7585091)                                  ; call prim_cdr
  %a7581154 = call i64 @prim_car(i64 %rvp7585090)                                    ; call prim_car
  %na7584981 = call i64 @prim_cdr(i64 %rvp7585090)                                   ; call prim_cdr
  %arg7583022 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581355 = call i64 @prim_make_45vector(i64 %arg7583022, i64 %a7581154)     ; call prim_make_45vector
  %cloptr7590902 = call i64* @alloc(i64 72)                                          ; malloc
  %eptr7590904 = getelementptr inbounds i64, i64* %cloptr7590902, i64 1              ; &eptr7590904[1]
  %eptr7590905 = getelementptr inbounds i64, i64* %cloptr7590902, i64 2              ; &eptr7590905[2]
  %eptr7590906 = getelementptr inbounds i64, i64* %cloptr7590902, i64 3              ; &eptr7590906[3]
  %eptr7590907 = getelementptr inbounds i64, i64* %cloptr7590902, i64 4              ; &eptr7590907[4]
  %eptr7590908 = getelementptr inbounds i64, i64* %cloptr7590902, i64 5              ; &eptr7590908[5]
  %eptr7590909 = getelementptr inbounds i64, i64* %cloptr7590902, i64 6              ; &eptr7590909[6]
  %eptr7590910 = getelementptr inbounds i64, i64* %cloptr7590902, i64 7              ; &eptr7590910[7]
  %eptr7590911 = getelementptr inbounds i64, i64* %cloptr7590902, i64 8              ; &eptr7590911[8]
  store i64 %ajE$_37foldl1, i64* %eptr7590904                                        ; *eptr7590904 = %ajE$_37foldl1
  store i64 %Whg$dist, i64* %eptr7590905                                             ; *eptr7590905 = %Whg$dist
  store i64 %E10$ok_63, i64* %eptr7590906                                            ; *eptr7590906 = %E10$ok_63
  store i64 %cont7581339, i64* %eptr7590907                                          ; *eptr7590907 = %cont7581339
  store i64 %a7581153, i64* %eptr7590908                                             ; *eptr7590908 = %a7581153
  store i64 %eLB$placed, i64* %eptr7590909                                           ; *eptr7590909 = %eLB$placed
  store i64 %m0I$_37_47, i64* %eptr7590910                                           ; *eptr7590910 = %m0I$_37_47
  store i64 %TWq$row, i64* %eptr7590911                                              ; *eptr7590911 = %TWq$row
  %eptr7590903 = getelementptr inbounds i64, i64* %cloptr7590902, i64 0              ; &cloptr7590902[0]
  %f7590912 = ptrtoint void(i64,i64)* @lam7585994 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590912, i64* %eptr7590903                                             ; store fptr
  %arg7583025 = ptrtoint i64* %cloptr7590902 to i64                                  ; closure cast; i64* -> i64
  %arg7583024 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585089 = add i64 0, 0                                                         ; quoted ()
  %rva7585088 = call i64 @prim_cons(i64 %retprim7581355, i64 %rva7585089)            ; call prim_cons
  %rva7585087 = call i64 @prim_cons(i64 %arg7583024, i64 %rva7585088)                ; call prim_cons
  %cloptr7590913 = inttoptr i64 %arg7583025 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590914 = getelementptr inbounds i64, i64* %cloptr7590913, i64 0             ; &cloptr7590913[0]
  %f7590916 = load i64, i64* %i0ptr7590914, align 8                                  ; load; *i0ptr7590914
  %fptr7590915 = inttoptr i64 %f7590916 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590915(i64 %arg7583025, i64 %rva7585087)           ; tail call
  ret void
}


define void @lam7585994(i64 %env7585995, i64 %rvp7585086) {
  %envptr7590917 = inttoptr i64 %env7585995 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590918 = getelementptr inbounds i64, i64* %envptr7590917, i64 8            ; &envptr7590917[8]
  %TWq$row = load i64, i64* %envptr7590918, align 8                                  ; load; *envptr7590918
  %envptr7590919 = inttoptr i64 %env7585995 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590920 = getelementptr inbounds i64, i64* %envptr7590919, i64 7            ; &envptr7590919[7]
  %m0I$_37_47 = load i64, i64* %envptr7590920, align 8                               ; load; *envptr7590920
  %envptr7590921 = inttoptr i64 %env7585995 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590922 = getelementptr inbounds i64, i64* %envptr7590921, i64 6            ; &envptr7590921[6]
  %eLB$placed = load i64, i64* %envptr7590922, align 8                               ; load; *envptr7590922
  %envptr7590923 = inttoptr i64 %env7585995 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590924 = getelementptr inbounds i64, i64* %envptr7590923, i64 5            ; &envptr7590923[5]
  %a7581153 = load i64, i64* %envptr7590924, align 8                                 ; load; *envptr7590924
  %envptr7590925 = inttoptr i64 %env7585995 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590926 = getelementptr inbounds i64, i64* %envptr7590925, i64 4            ; &envptr7590925[4]
  %cont7581339 = load i64, i64* %envptr7590926, align 8                              ; load; *envptr7590926
  %envptr7590927 = inttoptr i64 %env7585995 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590928 = getelementptr inbounds i64, i64* %envptr7590927, i64 3            ; &envptr7590927[3]
  %E10$ok_63 = load i64, i64* %envptr7590928, align 8                                ; load; *envptr7590928
  %envptr7590929 = inttoptr i64 %env7585995 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590930 = getelementptr inbounds i64, i64* %envptr7590929, i64 2            ; &envptr7590929[2]
  %Whg$dist = load i64, i64* %envptr7590930, align 8                                 ; load; *envptr7590930
  %envptr7590931 = inttoptr i64 %env7585995 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590932 = getelementptr inbounds i64, i64* %envptr7590931, i64 1            ; &envptr7590931[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590932, align 8                            ; load; *envptr7590932
  %_957581342 = call i64 @prim_car(i64 %rvp7585086)                                  ; call prim_car
  %rvp7585085 = call i64 @prim_cdr(i64 %rvp7585086)                                  ; call prim_cdr
  %OPh$div_45zero = call i64 @prim_car(i64 %rvp7585085)                              ; call prim_car
  %na7584983 = call i64 @prim_cdr(i64 %rvp7585085)                                   ; call prim_cdr
  %arg7583027 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7590933 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7590935 = getelementptr inbounds i64, i64* %cloptr7590933, i64 1              ; &eptr7590935[1]
  store i64 %ajE$_37foldl1, i64* %eptr7590935                                        ; *eptr7590935 = %ajE$_37foldl1
  %eptr7590934 = getelementptr inbounds i64, i64* %cloptr7590933, i64 0              ; &cloptr7590933[0]
  %f7590936 = ptrtoint void(i64,i64)* @lam7585991 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590936, i64* %eptr7590934                                             ; store fptr
  %arg7583026 = ptrtoint i64* %cloptr7590933 to i64                                  ; closure cast; i64* -> i64
  %OsL$_95t = call i64 @prim_vector_45set_33(i64 %OPh$div_45zero, i64 %arg7583027, i64 %arg7583026); call prim_vector_45set_33
  %arg7583051 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581158 = call i64 @prim_vector_45ref(i64 %OPh$div_45zero, i64 %arg7583051)      ; call prim_vector_45ref
  %a7581159 = call i64 @prim_procedure_63(i64 %a7581158)                             ; call prim_procedure_63
  %cmp7590937 = icmp eq i64 %a7581159, 15                                            ; false?
  br i1 %cmp7590937, label %else7590939, label %then7590938                          ; if

then7590938:
  %arg7583054 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581160 = call i64 @prim_vector_45ref(i64 %OPh$div_45zero, i64 %arg7583054)      ; call prim_vector_45ref
  %cloptr7590940 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590941 = getelementptr inbounds i64, i64* %cloptr7590940, i64 0              ; &cloptr7590940[0]
  %f7590942 = ptrtoint void(i64,i64)* @lam7585947 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590942, i64* %eptr7590941                                             ; store fptr
  %arg7583060 = ptrtoint i64* %cloptr7590940 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590943 = call i64* @alloc(i64 72)                                          ; malloc
  %eptr7590945 = getelementptr inbounds i64, i64* %cloptr7590943, i64 1              ; &eptr7590945[1]
  %eptr7590946 = getelementptr inbounds i64, i64* %cloptr7590943, i64 2              ; &eptr7590946[2]
  %eptr7590947 = getelementptr inbounds i64, i64* %cloptr7590943, i64 3              ; &eptr7590947[3]
  %eptr7590948 = getelementptr inbounds i64, i64* %cloptr7590943, i64 4              ; &eptr7590948[4]
  %eptr7590949 = getelementptr inbounds i64, i64* %cloptr7590943, i64 5              ; &eptr7590949[5]
  %eptr7590950 = getelementptr inbounds i64, i64* %cloptr7590943, i64 6              ; &eptr7590950[6]
  %eptr7590951 = getelementptr inbounds i64, i64* %cloptr7590943, i64 7              ; &eptr7590951[7]
  %eptr7590952 = getelementptr inbounds i64, i64* %cloptr7590943, i64 8              ; &eptr7590952[8]
  store i64 %Whg$dist, i64* %eptr7590945                                             ; *eptr7590945 = %Whg$dist
  store i64 %E10$ok_63, i64* %eptr7590946                                            ; *eptr7590946 = %E10$ok_63
  store i64 %cont7581339, i64* %eptr7590947                                          ; *eptr7590947 = %cont7581339
  store i64 %a7581153, i64* %eptr7590948                                             ; *eptr7590948 = %a7581153
  store i64 %eLB$placed, i64* %eptr7590949                                           ; *eptr7590949 = %eLB$placed
  store i64 %m0I$_37_47, i64* %eptr7590950                                           ; *eptr7590950 = %m0I$_37_47
  store i64 %TWq$row, i64* %eptr7590951                                              ; *eptr7590951 = %TWq$row
  store i64 %a7581160, i64* %eptr7590952                                             ; *eptr7590952 = %a7581160
  %eptr7590944 = getelementptr inbounds i64, i64* %cloptr7590943, i64 0              ; &cloptr7590943[0]
  %f7590953 = ptrtoint void(i64,i64)* @lam7585943 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590953, i64* %eptr7590944                                             ; store fptr
  %arg7583059 = ptrtoint i64* %cloptr7590943 to i64                                  ; closure cast; i64* -> i64
  %arg7583058 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %arg7583057 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583056 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %rva7585054 = add i64 0, 0                                                         ; quoted ()
  %rva7585053 = call i64 @prim_cons(i64 %arg7583056, i64 %rva7585054)                ; call prim_cons
  %rva7585052 = call i64 @prim_cons(i64 %arg7583057, i64 %rva7585053)                ; call prim_cons
  %rva7585051 = call i64 @prim_cons(i64 %arg7583058, i64 %rva7585052)                ; call prim_cons
  %rva7585050 = call i64 @prim_cons(i64 %arg7583059, i64 %rva7585051)                ; call prim_cons
  %cloptr7590954 = inttoptr i64 %arg7583060 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590955 = getelementptr inbounds i64, i64* %cloptr7590954, i64 0             ; &cloptr7590954[0]
  %f7590957 = load i64, i64* %i0ptr7590955, align 8                                  ; load; *i0ptr7590955
  %fptr7590956 = inttoptr i64 %f7590957 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590956(i64 %arg7583060, i64 %rva7585050)           ; tail call
  ret void

else7590939:
  %arg7583106 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7590958, i32 0, i32 0)); quoted string
  %retprim7581353 = call i64 @prim_halt(i64 %arg7583106)                             ; call prim_halt
  %cloptr7590959 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7590961 = getelementptr inbounds i64, i64* %cloptr7590959, i64 1              ; &eptr7590961[1]
  %eptr7590962 = getelementptr inbounds i64, i64* %cloptr7590959, i64 2              ; &eptr7590962[2]
  %eptr7590963 = getelementptr inbounds i64, i64* %cloptr7590959, i64 3              ; &eptr7590963[3]
  %eptr7590964 = getelementptr inbounds i64, i64* %cloptr7590959, i64 4              ; &eptr7590964[4]
  %eptr7590965 = getelementptr inbounds i64, i64* %cloptr7590959, i64 5              ; &eptr7590965[5]
  %eptr7590966 = getelementptr inbounds i64, i64* %cloptr7590959, i64 6              ; &eptr7590966[6]
  %eptr7590967 = getelementptr inbounds i64, i64* %cloptr7590959, i64 7              ; &eptr7590967[7]
  store i64 %Whg$dist, i64* %eptr7590961                                             ; *eptr7590961 = %Whg$dist
  store i64 %E10$ok_63, i64* %eptr7590962                                            ; *eptr7590962 = %E10$ok_63
  store i64 %cont7581339, i64* %eptr7590963                                          ; *eptr7590963 = %cont7581339
  store i64 %a7581153, i64* %eptr7590964                                             ; *eptr7590964 = %a7581153
  store i64 %eLB$placed, i64* %eptr7590965                                           ; *eptr7590965 = %eLB$placed
  store i64 %m0I$_37_47, i64* %eptr7590966                                           ; *eptr7590966 = %m0I$_37_47
  store i64 %TWq$row, i64* %eptr7590967                                              ; *eptr7590967 = %TWq$row
  %eptr7590960 = getelementptr inbounds i64, i64* %cloptr7590959, i64 0              ; &cloptr7590959[0]
  %f7590968 = ptrtoint void(i64,i64)* @lam7585971 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590968, i64* %eptr7590960                                             ; store fptr
  %arg7583109 = ptrtoint i64* %cloptr7590959 to i64                                  ; closure cast; i64* -> i64
  %arg7583108 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585084 = add i64 0, 0                                                         ; quoted ()
  %rva7585083 = call i64 @prim_cons(i64 %retprim7581353, i64 %rva7585084)            ; call prim_cons
  %rva7585082 = call i64 @prim_cons(i64 %arg7583108, i64 %rva7585083)                ; call prim_cons
  %cloptr7590969 = inttoptr i64 %arg7583109 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590970 = getelementptr inbounds i64, i64* %cloptr7590969, i64 0             ; &cloptr7590969[0]
  %f7590972 = load i64, i64* %i0ptr7590970, align 8                                  ; load; *i0ptr7590970
  %fptr7590971 = inttoptr i64 %f7590972 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590971(i64 %arg7583109, i64 %rva7585082)           ; tail call
  ret void
}


define void @lam7585991(i64 %env7585992, i64 %rvp7585012) {
  %envptr7590973 = inttoptr i64 %env7585992 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590974 = getelementptr inbounds i64, i64* %envptr7590973, i64 1            ; &envptr7590973[1]
  %ajE$_37foldl1 = load i64, i64* %envptr7590974, align 8                            ; load; *envptr7590974
  %cont7581343 = call i64 @prim_car(i64 %rvp7585012)                                 ; call prim_car
  %rvp7585011 = call i64 @prim_cdr(i64 %rvp7585012)                                  ; call prim_cdr
  %iAd$lst = call i64 @prim_car(i64 %rvp7585011)                                     ; call prim_car
  %na7584985 = call i64 @prim_cdr(i64 %rvp7585011)                                   ; call prim_cdr
  %cloptr7590975 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590976 = getelementptr inbounds i64, i64* %cloptr7590975, i64 0              ; &cloptr7590975[0]
  %f7590977 = ptrtoint void(i64,i64)* @lam7585989 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590977, i64* %eptr7590976                                             ; store fptr
  %arg7583030 = ptrtoint i64* %cloptr7590975 to i64                                  ; closure cast; i64* -> i64
  %cloptr7590978 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7590980 = getelementptr inbounds i64, i64* %cloptr7590978, i64 1              ; &eptr7590980[1]
  %eptr7590981 = getelementptr inbounds i64, i64* %cloptr7590978, i64 2              ; &eptr7590981[2]
  %eptr7590982 = getelementptr inbounds i64, i64* %cloptr7590978, i64 3              ; &eptr7590982[3]
  store i64 %iAd$lst, i64* %eptr7590980                                              ; *eptr7590980 = %iAd$lst
  store i64 %ajE$_37foldl1, i64* %eptr7590981                                        ; *eptr7590981 = %ajE$_37foldl1
  store i64 %cont7581343, i64* %eptr7590982                                          ; *eptr7590982 = %cont7581343
  %eptr7590979 = getelementptr inbounds i64, i64* %cloptr7590978, i64 0              ; &cloptr7590978[0]
  %f7590983 = ptrtoint void(i64,i64)* @lam7585985 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7590983, i64* %eptr7590979                                             ; store fptr
  %arg7583029 = ptrtoint i64* %cloptr7590978 to i64                                  ; closure cast; i64* -> i64
  %rva7585010 = add i64 0, 0                                                         ; quoted ()
  %rva7585009 = call i64 @prim_cons(i64 %arg7583029, i64 %rva7585010)                ; call prim_cons
  %cloptr7590984 = inttoptr i64 %arg7583030 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7590985 = getelementptr inbounds i64, i64* %cloptr7590984, i64 0             ; &cloptr7590984[0]
  %f7590987 = load i64, i64* %i0ptr7590985, align 8                                  ; load; *i0ptr7590985
  %fptr7590986 = inttoptr i64 %f7590987 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590986(i64 %arg7583030, i64 %rva7585009)           ; tail call
  ret void
}


define void @lam7585989(i64 %env7585990, i64 %STU$lst7581348) {
  %cont7581347 = call i64 @prim_car(i64 %STU$lst7581348)                             ; call prim_car
  %STU$lst = call i64 @prim_cdr(i64 %STU$lst7581348)                                 ; call prim_cdr
  %arg7583034 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584988 = add i64 0, 0                                                         ; quoted ()
  %rva7584987 = call i64 @prim_cons(i64 %STU$lst, i64 %rva7584988)                   ; call prim_cons
  %rva7584986 = call i64 @prim_cons(i64 %arg7583034, i64 %rva7584987)                ; call prim_cons
  %cloptr7590988 = inttoptr i64 %cont7581347 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7590989 = getelementptr inbounds i64, i64* %cloptr7590988, i64 0             ; &cloptr7590988[0]
  %f7590991 = load i64, i64* %i0ptr7590989, align 8                                  ; load; *i0ptr7590989
  %fptr7590990 = inttoptr i64 %f7590991 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7590990(i64 %cont7581347, i64 %rva7584986)          ; tail call
  ret void
}


define void @lam7585985(i64 %env7585986, i64 %rvp7585008) {
  %envptr7590992 = inttoptr i64 %env7585986 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590993 = getelementptr inbounds i64, i64* %envptr7590992, i64 3            ; &envptr7590992[3]
  %cont7581343 = load i64, i64* %envptr7590993, align 8                              ; load; *envptr7590993
  %envptr7590994 = inttoptr i64 %env7585986 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590995 = getelementptr inbounds i64, i64* %envptr7590994, i64 2            ; &envptr7590994[2]
  %ajE$_37foldl1 = load i64, i64* %envptr7590995, align 8                            ; load; *envptr7590995
  %envptr7590996 = inttoptr i64 %env7585986 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7590997 = getelementptr inbounds i64, i64* %envptr7590996, i64 1            ; &envptr7590996[1]
  %iAd$lst = load i64, i64* %envptr7590997, align 8                                  ; load; *envptr7590997
  %_957581344 = call i64 @prim_car(i64 %rvp7585008)                                  ; call prim_car
  %rvp7585007 = call i64 @prim_cdr(i64 %rvp7585008)                                  ; call prim_cdr
  %a7581156 = call i64 @prim_car(i64 %rvp7585007)                                    ; call prim_car
  %na7584990 = call i64 @prim_cdr(i64 %rvp7585007)                                   ; call prim_cdr
  %a7581157 = call i64 @prim_cdr(i64 %iAd$lst)                                       ; call prim_cdr
  %cloptr7590998 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7590999 = getelementptr inbounds i64, i64* %cloptr7590998, i64 0              ; &cloptr7590998[0]
  %f7591000 = ptrtoint void(i64,i64)* @lam7585983 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591000, i64* %eptr7590999                                             ; store fptr
  %arg7583039 = ptrtoint i64* %cloptr7590998 to i64                                  ; closure cast; i64* -> i64
  %rva7585006 = add i64 0, 0                                                         ; quoted ()
  %rva7585005 = call i64 @prim_cons(i64 %a7581157, i64 %rva7585006)                  ; call prim_cons
  %rva7585004 = call i64 @prim_cons(i64 %a7581156, i64 %rva7585005)                  ; call prim_cons
  %rva7585003 = call i64 @prim_cons(i64 %arg7583039, i64 %rva7585004)                ; call prim_cons
  %rva7585002 = call i64 @prim_cons(i64 %cont7581343, i64 %rva7585003)               ; call prim_cons
  %cloptr7591001 = inttoptr i64 %ajE$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7591002 = getelementptr inbounds i64, i64* %cloptr7591001, i64 0             ; &cloptr7591001[0]
  %f7591004 = load i64, i64* %i0ptr7591002, align 8                                  ; load; *i0ptr7591002
  %fptr7591003 = inttoptr i64 %f7591004 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591003(i64 %ajE$_37foldl1, i64 %rva7585002)        ; tail call
  ret void
}


define void @lam7585983(i64 %env7585984, i64 %rvp7585001) {
  %cont7581345 = call i64 @prim_car(i64 %rvp7585001)                                 ; call prim_car
  %rvp7585000 = call i64 @prim_cdr(i64 %rvp7585001)                                  ; call prim_cdr
  %b0q$x = call i64 @prim_car(i64 %rvp7585000)                                       ; call prim_car
  %rvp7584999 = call i64 @prim_cdr(i64 %rvp7585000)                                  ; call prim_cdr
  %IvY$lst = call i64 @prim_car(i64 %rvp7584999)                                     ; call prim_car
  %na7584992 = call i64 @prim_cdr(i64 %rvp7584999)                                   ; call prim_cdr
  %arg7583042 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581155 = call i64 @prim__61(i64 %b0q$x, i64 %arg7583042)                        ; call prim__61
  %cmp7591005 = icmp eq i64 %a7581155, 15                                            ; false?
  br i1 %cmp7591005, label %else7591007, label %then7591006                          ; if

then7591006:
  %arg7583044 = call i64 @const_init_symbol(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @sym7591008, i32 0, i32 0)); quoted string
  %retprim7581346 = call i64 @prim_halt(i64 %arg7583044)                             ; call prim_halt
  %arg7583046 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584995 = add i64 0, 0                                                         ; quoted ()
  %rva7584994 = call i64 @prim_cons(i64 %retprim7581346, i64 %rva7584995)            ; call prim_cons
  %rva7584993 = call i64 @prim_cons(i64 %arg7583046, i64 %rva7584994)                ; call prim_cons
  %cloptr7591009 = inttoptr i64 %cont7581345 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591010 = getelementptr inbounds i64, i64* %cloptr7591009, i64 0             ; &cloptr7591009[0]
  %f7591012 = load i64, i64* %i0ptr7591010, align 8                                  ; load; *i0ptr7591010
  %fptr7591011 = inttoptr i64 %f7591012 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591011(i64 %cont7581345, i64 %rva7584993)          ; tail call
  ret void

else7591007:
  %arg7583049 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7584998 = add i64 0, 0                                                         ; quoted ()
  %rva7584997 = call i64 @prim_cons(i64 %IvY$lst, i64 %rva7584998)                   ; call prim_cons
  %rva7584996 = call i64 @prim_cons(i64 %arg7583049, i64 %rva7584997)                ; call prim_cons
  %cloptr7591013 = inttoptr i64 %cont7581345 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591014 = getelementptr inbounds i64, i64* %cloptr7591013, i64 0             ; &cloptr7591013[0]
  %f7591016 = load i64, i64* %i0ptr7591014, align 8                                  ; load; *i0ptr7591014
  %fptr7591015 = inttoptr i64 %f7591016 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591015(i64 %cont7581345, i64 %rva7584996)          ; tail call
  ret void
}


define void @lam7585971(i64 %env7585972, i64 %rvp7585081) {
  %envptr7591017 = inttoptr i64 %env7585972 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591018 = getelementptr inbounds i64, i64* %envptr7591017, i64 7            ; &envptr7591017[7]
  %TWq$row = load i64, i64* %envptr7591018, align 8                                  ; load; *envptr7591018
  %envptr7591019 = inttoptr i64 %env7585972 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591020 = getelementptr inbounds i64, i64* %envptr7591019, i64 6            ; &envptr7591019[6]
  %m0I$_37_47 = load i64, i64* %envptr7591020, align 8                               ; load; *envptr7591020
  %envptr7591021 = inttoptr i64 %env7585972 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591022 = getelementptr inbounds i64, i64* %envptr7591021, i64 5            ; &envptr7591021[5]
  %eLB$placed = load i64, i64* %envptr7591022, align 8                               ; load; *envptr7591022
  %envptr7591023 = inttoptr i64 %env7585972 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591024 = getelementptr inbounds i64, i64* %envptr7591023, i64 4            ; &envptr7591023[4]
  %a7581153 = load i64, i64* %envptr7591024, align 8                                 ; load; *envptr7591024
  %envptr7591025 = inttoptr i64 %env7585972 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591026 = getelementptr inbounds i64, i64* %envptr7591025, i64 3            ; &envptr7591025[3]
  %cont7581339 = load i64, i64* %envptr7591026, align 8                              ; load; *envptr7591026
  %envptr7591027 = inttoptr i64 %env7585972 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591028 = getelementptr inbounds i64, i64* %envptr7591027, i64 2            ; &envptr7591027[2]
  %E10$ok_63 = load i64, i64* %envptr7591028, align 8                                ; load; *envptr7591028
  %envptr7591029 = inttoptr i64 %env7585972 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591030 = getelementptr inbounds i64, i64* %envptr7591029, i64 1            ; &envptr7591029[1]
  %Whg$dist = load i64, i64* %envptr7591030, align 8                                 ; load; *envptr7591030
  %_957581349 = call i64 @prim_car(i64 %rvp7585081)                                  ; call prim_car
  %rvp7585080 = call i64 @prim_cdr(i64 %rvp7585081)                                  ; call prim_cdr
  %C2o$_95t = call i64 @prim_car(i64 %rvp7585080)                                    ; call prim_car
  %na7585056 = call i64 @prim_cdr(i64 %rvp7585080)                                   ; call prim_cdr
  %cloptr7591031 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7591033 = getelementptr inbounds i64, i64* %cloptr7591031, i64 1              ; &eptr7591033[1]
  %eptr7591034 = getelementptr inbounds i64, i64* %cloptr7591031, i64 2              ; &eptr7591034[2]
  %eptr7591035 = getelementptr inbounds i64, i64* %cloptr7591031, i64 3              ; &eptr7591035[3]
  %eptr7591036 = getelementptr inbounds i64, i64* %cloptr7591031, i64 4              ; &eptr7591036[4]
  %eptr7591037 = getelementptr inbounds i64, i64* %cloptr7591031, i64 5              ; &eptr7591037[5]
  %eptr7591038 = getelementptr inbounds i64, i64* %cloptr7591031, i64 6              ; &eptr7591038[6]
  store i64 %Whg$dist, i64* %eptr7591033                                             ; *eptr7591033 = %Whg$dist
  store i64 %E10$ok_63, i64* %eptr7591034                                            ; *eptr7591034 = %E10$ok_63
  store i64 %cont7581339, i64* %eptr7591035                                          ; *eptr7591035 = %cont7581339
  store i64 %a7581153, i64* %eptr7591036                                             ; *eptr7591036 = %a7581153
  store i64 %eLB$placed, i64* %eptr7591037                                           ; *eptr7591037 = %eLB$placed
  store i64 %TWq$row, i64* %eptr7591038                                              ; *eptr7591038 = %TWq$row
  %eptr7591032 = getelementptr inbounds i64, i64* %cloptr7591031, i64 0              ; &cloptr7591031[0]
  %f7591039 = ptrtoint void(i64,i64)* @lam7585969 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591039, i64* %eptr7591032                                             ; store fptr
  %arg7583113 = ptrtoint i64* %cloptr7591031 to i64                                  ; closure cast; i64* -> i64
  %arg7583112 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %arg7583111 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583110 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %rva7585079 = add i64 0, 0                                                         ; quoted ()
  %rva7585078 = call i64 @prim_cons(i64 %arg7583110, i64 %rva7585079)                ; call prim_cons
  %rva7585077 = call i64 @prim_cons(i64 %arg7583111, i64 %rva7585078)                ; call prim_cons
  %rva7585076 = call i64 @prim_cons(i64 %arg7583112, i64 %rva7585077)                ; call prim_cons
  %rva7585075 = call i64 @prim_cons(i64 %arg7583113, i64 %rva7585076)                ; call prim_cons
  %cloptr7591040 = inttoptr i64 %m0I$_37_47 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591041 = getelementptr inbounds i64, i64* %cloptr7591040, i64 0             ; &cloptr7591040[0]
  %f7591043 = load i64, i64* %i0ptr7591041, align 8                                  ; load; *i0ptr7591041
  %fptr7591042 = inttoptr i64 %f7591043 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591042(i64 %m0I$_37_47, i64 %rva7585075)           ; tail call
  ret void
}


define void @lam7585969(i64 %env7585970, i64 %rvp7585074) {
  %envptr7591044 = inttoptr i64 %env7585970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591045 = getelementptr inbounds i64, i64* %envptr7591044, i64 6            ; &envptr7591044[6]
  %TWq$row = load i64, i64* %envptr7591045, align 8                                  ; load; *envptr7591045
  %envptr7591046 = inttoptr i64 %env7585970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591047 = getelementptr inbounds i64, i64* %envptr7591046, i64 5            ; &envptr7591046[5]
  %eLB$placed = load i64, i64* %envptr7591047, align 8                               ; load; *envptr7591047
  %envptr7591048 = inttoptr i64 %env7585970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591049 = getelementptr inbounds i64, i64* %envptr7591048, i64 4            ; &envptr7591048[4]
  %a7581153 = load i64, i64* %envptr7591049, align 8                                 ; load; *envptr7591049
  %envptr7591050 = inttoptr i64 %env7585970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591051 = getelementptr inbounds i64, i64* %envptr7591050, i64 3            ; &envptr7591050[3]
  %cont7581339 = load i64, i64* %envptr7591051, align 8                              ; load; *envptr7591051
  %envptr7591052 = inttoptr i64 %env7585970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591053 = getelementptr inbounds i64, i64* %envptr7591052, i64 2            ; &envptr7591052[2]
  %E10$ok_63 = load i64, i64* %envptr7591053, align 8                                ; load; *envptr7591053
  %envptr7591054 = inttoptr i64 %env7585970 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591055 = getelementptr inbounds i64, i64* %envptr7591054, i64 1            ; &envptr7591054[1]
  %Whg$dist = load i64, i64* %envptr7591055, align 8                                 ; load; *envptr7591055
  %_957581340 = call i64 @prim_car(i64 %rvp7585074)                                  ; call prim_car
  %rvp7585073 = call i64 @prim_cdr(i64 %rvp7585074)                                  ; call prim_cdr
  %a7581162 = call i64 @prim_car(i64 %rvp7585073)                                    ; call prim_car
  %na7585058 = call i64 @prim_cdr(i64 %rvp7585073)                                   ; call prim_cdr
  %a7581163 = call i64 @prim__61(i64 %a7581153, i64 %a7581162)                       ; call prim__61
  %a7581164 = call i64 @prim_not(i64 %a7581163)                                      ; call prim_not
  %cmp7591056 = icmp eq i64 %a7581164, 15                                            ; false?
  br i1 %cmp7591056, label %else7591058, label %then7591057                          ; if

then7591057:
  %a7581165 = call i64 @prim_car(i64 %eLB$placed)                                    ; call prim_car
  %a7581166 = call i64 @prim__45(i64 %TWq$row, i64 %Whg$dist)                        ; call prim__45
  %a7581167 = call i64 @prim__61(i64 %a7581165, i64 %a7581166)                       ; call prim__61
  %a7581168 = call i64 @prim_not(i64 %a7581167)                                      ; call prim_not
  %cmp7591059 = icmp eq i64 %a7581168, 15                                            ; false?
  br i1 %cmp7591059, label %else7591061, label %then7591060                          ; if

then7591060:
  %arg7583124 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581169 = call i64 @prim_vector_45ref(i64 %E10$ok_63, i64 %arg7583124)           ; call prim_vector_45ref
  %a7581170 = call i64 @prim_procedure_63(i64 %a7581169)                             ; call prim_procedure_63
  %cmp7591062 = icmp eq i64 %a7581170, 15                                            ; false?
  br i1 %cmp7591062, label %else7591064, label %then7591063                          ; if

then7591063:
  %arg7583127 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581171 = call i64 @prim_vector_45ref(i64 %E10$ok_63, i64 %arg7583127)           ; call prim_vector_45ref
  %arg7583129 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a7581172 = call i64 @prim__43(i64 %Whg$dist, i64 %arg7583129)                     ; call prim__43
  %a7581173 = call i64 @prim_cdr(i64 %eLB$placed)                                    ; call prim_cdr
  %rva7585063 = add i64 0, 0                                                         ; quoted ()
  %rva7585062 = call i64 @prim_cons(i64 %a7581173, i64 %rva7585063)                  ; call prim_cons
  %rva7585061 = call i64 @prim_cons(i64 %a7581172, i64 %rva7585062)                  ; call prim_cons
  %rva7585060 = call i64 @prim_cons(i64 %TWq$row, i64 %rva7585061)                   ; call prim_cons
  %rva7585059 = call i64 @prim_cons(i64 %cont7581339, i64 %rva7585060)               ; call prim_cons
  %cloptr7591065 = inttoptr i64 %a7581171 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7591066 = getelementptr inbounds i64, i64* %cloptr7591065, i64 0             ; &cloptr7591065[0]
  %f7591068 = load i64, i64* %i0ptr7591066, align 8                                  ; load; *i0ptr7591066
  %fptr7591067 = inttoptr i64 %f7591068 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591067(i64 %a7581171, i64 %rva7585059)             ; tail call
  ret void

else7591064:
  %arg7583137 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7591069, i32 0, i32 0)); quoted string
  %retprim7581341 = call i64 @prim_halt(i64 %arg7583137)                             ; call prim_halt
  %arg7583139 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585066 = add i64 0, 0                                                         ; quoted ()
  %rva7585065 = call i64 @prim_cons(i64 %retprim7581341, i64 %rva7585066)            ; call prim_cons
  %rva7585064 = call i64 @prim_cons(i64 %arg7583139, i64 %rva7585065)                ; call prim_cons
  %cloptr7591070 = inttoptr i64 %cont7581339 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591071 = getelementptr inbounds i64, i64* %cloptr7591070, i64 0             ; &cloptr7591070[0]
  %f7591073 = load i64, i64* %i0ptr7591071, align 8                                  ; load; *i0ptr7591071
  %fptr7591072 = inttoptr i64 %f7591073 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591072(i64 %cont7581339, i64 %rva7585064)          ; tail call
  ret void

else7591061:
  %arg7583142 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583141 = call i64 @const_init_false()                                         ; quoted #f
  %rva7585069 = add i64 0, 0                                                         ; quoted ()
  %rva7585068 = call i64 @prim_cons(i64 %arg7583141, i64 %rva7585069)                ; call prim_cons
  %rva7585067 = call i64 @prim_cons(i64 %arg7583142, i64 %rva7585068)                ; call prim_cons
  %cloptr7591074 = inttoptr i64 %cont7581339 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591075 = getelementptr inbounds i64, i64* %cloptr7591074, i64 0             ; &cloptr7591074[0]
  %f7591077 = load i64, i64* %i0ptr7591075, align 8                                  ; load; *i0ptr7591075
  %fptr7591076 = inttoptr i64 %f7591077 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591076(i64 %cont7581339, i64 %rva7585067)          ; tail call
  ret void

else7591058:
  %arg7583145 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583144 = call i64 @const_init_false()                                         ; quoted #f
  %rva7585072 = add i64 0, 0                                                         ; quoted ()
  %rva7585071 = call i64 @prim_cons(i64 %arg7583144, i64 %rva7585072)                ; call prim_cons
  %rva7585070 = call i64 @prim_cons(i64 %arg7583145, i64 %rva7585071)                ; call prim_cons
  %cloptr7591078 = inttoptr i64 %cont7581339 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591079 = getelementptr inbounds i64, i64* %cloptr7591078, i64 0             ; &cloptr7591078[0]
  %f7591081 = load i64, i64* %i0ptr7591079, align 8                                  ; load; *i0ptr7591079
  %fptr7591080 = inttoptr i64 %f7591081 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591080(i64 %cont7581339, i64 %rva7585070)          ; tail call
  ret void
}


define void @lam7585947(i64 %env7585948, i64 %ho2$lst7581352) {
  %cont7581351 = call i64 @prim_car(i64 %ho2$lst7581352)                             ; call prim_car
  %ho2$lst = call i64 @prim_cdr(i64 %ho2$lst7581352)                                 ; call prim_cdr
  %arg7583064 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585015 = add i64 0, 0                                                         ; quoted ()
  %rva7585014 = call i64 @prim_cons(i64 %ho2$lst, i64 %rva7585015)                   ; call prim_cons
  %rva7585013 = call i64 @prim_cons(i64 %arg7583064, i64 %rva7585014)                ; call prim_cons
  %cloptr7591082 = inttoptr i64 %cont7581351 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591083 = getelementptr inbounds i64, i64* %cloptr7591082, i64 0             ; &cloptr7591082[0]
  %f7591085 = load i64, i64* %i0ptr7591083, align 8                                  ; load; *i0ptr7591083
  %fptr7591084 = inttoptr i64 %f7591085 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591084(i64 %cont7581351, i64 %rva7585013)          ; tail call
  ret void
}


define void @lam7585943(i64 %env7585944, i64 %rvp7585049) {
  %envptr7591086 = inttoptr i64 %env7585944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591087 = getelementptr inbounds i64, i64* %envptr7591086, i64 8            ; &envptr7591086[8]
  %a7581160 = load i64, i64* %envptr7591087, align 8                                 ; load; *envptr7591087
  %envptr7591088 = inttoptr i64 %env7585944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591089 = getelementptr inbounds i64, i64* %envptr7591088, i64 7            ; &envptr7591088[7]
  %TWq$row = load i64, i64* %envptr7591089, align 8                                  ; load; *envptr7591089
  %envptr7591090 = inttoptr i64 %env7585944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591091 = getelementptr inbounds i64, i64* %envptr7591090, i64 6            ; &envptr7591090[6]
  %m0I$_37_47 = load i64, i64* %envptr7591091, align 8                               ; load; *envptr7591091
  %envptr7591092 = inttoptr i64 %env7585944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591093 = getelementptr inbounds i64, i64* %envptr7591092, i64 5            ; &envptr7591092[5]
  %eLB$placed = load i64, i64* %envptr7591093, align 8                               ; load; *envptr7591093
  %envptr7591094 = inttoptr i64 %env7585944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591095 = getelementptr inbounds i64, i64* %envptr7591094, i64 4            ; &envptr7591094[4]
  %a7581153 = load i64, i64* %envptr7591095, align 8                                 ; load; *envptr7591095
  %envptr7591096 = inttoptr i64 %env7585944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591097 = getelementptr inbounds i64, i64* %envptr7591096, i64 3            ; &envptr7591096[3]
  %cont7581339 = load i64, i64* %envptr7591097, align 8                              ; load; *envptr7591097
  %envptr7591098 = inttoptr i64 %env7585944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591099 = getelementptr inbounds i64, i64* %envptr7591098, i64 2            ; &envptr7591098[2]
  %E10$ok_63 = load i64, i64* %envptr7591099, align 8                                ; load; *envptr7591099
  %envptr7591100 = inttoptr i64 %env7585944 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591101 = getelementptr inbounds i64, i64* %envptr7591100, i64 1            ; &envptr7591100[1]
  %Whg$dist = load i64, i64* %envptr7591101, align 8                                 ; load; *envptr7591101
  %_957581350 = call i64 @prim_car(i64 %rvp7585049)                                  ; call prim_car
  %rvp7585048 = call i64 @prim_cdr(i64 %rvp7585049)                                  ; call prim_cdr
  %a7581161 = call i64 @prim_car(i64 %rvp7585048)                                    ; call prim_car
  %na7585017 = call i64 @prim_cdr(i64 %rvp7585048)                                   ; call prim_cdr
  %cloptr7591102 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7591104 = getelementptr inbounds i64, i64* %cloptr7591102, i64 1              ; &eptr7591104[1]
  %eptr7591105 = getelementptr inbounds i64, i64* %cloptr7591102, i64 2              ; &eptr7591105[2]
  %eptr7591106 = getelementptr inbounds i64, i64* %cloptr7591102, i64 3              ; &eptr7591106[3]
  %eptr7591107 = getelementptr inbounds i64, i64* %cloptr7591102, i64 4              ; &eptr7591107[4]
  %eptr7591108 = getelementptr inbounds i64, i64* %cloptr7591102, i64 5              ; &eptr7591108[5]
  %eptr7591109 = getelementptr inbounds i64, i64* %cloptr7591102, i64 6              ; &eptr7591109[6]
  %eptr7591110 = getelementptr inbounds i64, i64* %cloptr7591102, i64 7              ; &eptr7591110[7]
  store i64 %Whg$dist, i64* %eptr7591104                                             ; *eptr7591104 = %Whg$dist
  store i64 %E10$ok_63, i64* %eptr7591105                                            ; *eptr7591105 = %E10$ok_63
  store i64 %cont7581339, i64* %eptr7591106                                          ; *eptr7591106 = %cont7581339
  store i64 %a7581153, i64* %eptr7591107                                             ; *eptr7591107 = %a7581153
  store i64 %eLB$placed, i64* %eptr7591108                                           ; *eptr7591108 = %eLB$placed
  store i64 %m0I$_37_47, i64* %eptr7591109                                           ; *eptr7591109 = %m0I$_37_47
  store i64 %TWq$row, i64* %eptr7591110                                              ; *eptr7591110 = %TWq$row
  %eptr7591103 = getelementptr inbounds i64, i64* %cloptr7591102, i64 0              ; &cloptr7591102[0]
  %f7591111 = ptrtoint void(i64,i64)* @lam7585941 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591111, i64* %eptr7591103                                             ; store fptr
  %arg7583067 = ptrtoint i64* %cloptr7591102 to i64                                  ; closure cast; i64* -> i64
  %rva7585047 = add i64 0, 0                                                         ; quoted ()
  %rva7585046 = call i64 @prim_cons(i64 %a7581161, i64 %rva7585047)                  ; call prim_cons
  %rva7585045 = call i64 @prim_cons(i64 %arg7583067, i64 %rva7585046)                ; call prim_cons
  %cloptr7591112 = inttoptr i64 %a7581160 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7591113 = getelementptr inbounds i64, i64* %cloptr7591112, i64 0             ; &cloptr7591112[0]
  %f7591115 = load i64, i64* %i0ptr7591113, align 8                                  ; load; *i0ptr7591113
  %fptr7591114 = inttoptr i64 %f7591115 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591114(i64 %a7581160, i64 %rva7585045)             ; tail call
  ret void
}


define void @lam7585941(i64 %env7585942, i64 %rvp7585044) {
  %envptr7591116 = inttoptr i64 %env7585942 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591117 = getelementptr inbounds i64, i64* %envptr7591116, i64 7            ; &envptr7591116[7]
  %TWq$row = load i64, i64* %envptr7591117, align 8                                  ; load; *envptr7591117
  %envptr7591118 = inttoptr i64 %env7585942 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591119 = getelementptr inbounds i64, i64* %envptr7591118, i64 6            ; &envptr7591118[6]
  %m0I$_37_47 = load i64, i64* %envptr7591119, align 8                               ; load; *envptr7591119
  %envptr7591120 = inttoptr i64 %env7585942 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591121 = getelementptr inbounds i64, i64* %envptr7591120, i64 5            ; &envptr7591120[5]
  %eLB$placed = load i64, i64* %envptr7591121, align 8                               ; load; *envptr7591121
  %envptr7591122 = inttoptr i64 %env7585942 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591123 = getelementptr inbounds i64, i64* %envptr7591122, i64 4            ; &envptr7591122[4]
  %a7581153 = load i64, i64* %envptr7591123, align 8                                 ; load; *envptr7591123
  %envptr7591124 = inttoptr i64 %env7585942 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591125 = getelementptr inbounds i64, i64* %envptr7591124, i64 3            ; &envptr7591124[3]
  %cont7581339 = load i64, i64* %envptr7591125, align 8                              ; load; *envptr7591125
  %envptr7591126 = inttoptr i64 %env7585942 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591127 = getelementptr inbounds i64, i64* %envptr7591126, i64 2            ; &envptr7591126[2]
  %E10$ok_63 = load i64, i64* %envptr7591127, align 8                                ; load; *envptr7591127
  %envptr7591128 = inttoptr i64 %env7585942 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591129 = getelementptr inbounds i64, i64* %envptr7591128, i64 1            ; &envptr7591128[1]
  %Whg$dist = load i64, i64* %envptr7591129, align 8                                 ; load; *envptr7591129
  %_957581349 = call i64 @prim_car(i64 %rvp7585044)                                  ; call prim_car
  %rvp7585043 = call i64 @prim_cdr(i64 %rvp7585044)                                  ; call prim_cdr
  %C2o$_95t = call i64 @prim_car(i64 %rvp7585043)                                    ; call prim_car
  %na7585019 = call i64 @prim_cdr(i64 %rvp7585043)                                   ; call prim_cdr
  %cloptr7591130 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7591132 = getelementptr inbounds i64, i64* %cloptr7591130, i64 1              ; &eptr7591132[1]
  %eptr7591133 = getelementptr inbounds i64, i64* %cloptr7591130, i64 2              ; &eptr7591133[2]
  %eptr7591134 = getelementptr inbounds i64, i64* %cloptr7591130, i64 3              ; &eptr7591134[3]
  %eptr7591135 = getelementptr inbounds i64, i64* %cloptr7591130, i64 4              ; &eptr7591135[4]
  %eptr7591136 = getelementptr inbounds i64, i64* %cloptr7591130, i64 5              ; &eptr7591136[5]
  %eptr7591137 = getelementptr inbounds i64, i64* %cloptr7591130, i64 6              ; &eptr7591137[6]
  store i64 %Whg$dist, i64* %eptr7591132                                             ; *eptr7591132 = %Whg$dist
  store i64 %E10$ok_63, i64* %eptr7591133                                            ; *eptr7591133 = %E10$ok_63
  store i64 %cont7581339, i64* %eptr7591134                                          ; *eptr7591134 = %cont7581339
  store i64 %a7581153, i64* %eptr7591135                                             ; *eptr7591135 = %a7581153
  store i64 %eLB$placed, i64* %eptr7591136                                           ; *eptr7591136 = %eLB$placed
  store i64 %TWq$row, i64* %eptr7591137                                              ; *eptr7591137 = %TWq$row
  %eptr7591131 = getelementptr inbounds i64, i64* %cloptr7591130, i64 0              ; &cloptr7591130[0]
  %f7591138 = ptrtoint void(i64,i64)* @lam7585939 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591138, i64* %eptr7591131                                             ; store fptr
  %arg7583072 = ptrtoint i64* %cloptr7591130 to i64                                  ; closure cast; i64* -> i64
  %arg7583071 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %arg7583070 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583069 = call i64 @const_init_int(i64 3)                                      ; quoted int
  %rva7585042 = add i64 0, 0                                                         ; quoted ()
  %rva7585041 = call i64 @prim_cons(i64 %arg7583069, i64 %rva7585042)                ; call prim_cons
  %rva7585040 = call i64 @prim_cons(i64 %arg7583070, i64 %rva7585041)                ; call prim_cons
  %rva7585039 = call i64 @prim_cons(i64 %arg7583071, i64 %rva7585040)                ; call prim_cons
  %rva7585038 = call i64 @prim_cons(i64 %arg7583072, i64 %rva7585039)                ; call prim_cons
  %cloptr7591139 = inttoptr i64 %m0I$_37_47 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591140 = getelementptr inbounds i64, i64* %cloptr7591139, i64 0             ; &cloptr7591139[0]
  %f7591142 = load i64, i64* %i0ptr7591140, align 8                                  ; load; *i0ptr7591140
  %fptr7591141 = inttoptr i64 %f7591142 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591141(i64 %m0I$_37_47, i64 %rva7585038)           ; tail call
  ret void
}


define void @lam7585939(i64 %env7585940, i64 %rvp7585037) {
  %envptr7591143 = inttoptr i64 %env7585940 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591144 = getelementptr inbounds i64, i64* %envptr7591143, i64 6            ; &envptr7591143[6]
  %TWq$row = load i64, i64* %envptr7591144, align 8                                  ; load; *envptr7591144
  %envptr7591145 = inttoptr i64 %env7585940 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591146 = getelementptr inbounds i64, i64* %envptr7591145, i64 5            ; &envptr7591145[5]
  %eLB$placed = load i64, i64* %envptr7591146, align 8                               ; load; *envptr7591146
  %envptr7591147 = inttoptr i64 %env7585940 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591148 = getelementptr inbounds i64, i64* %envptr7591147, i64 4            ; &envptr7591147[4]
  %a7581153 = load i64, i64* %envptr7591148, align 8                                 ; load; *envptr7591148
  %envptr7591149 = inttoptr i64 %env7585940 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591150 = getelementptr inbounds i64, i64* %envptr7591149, i64 3            ; &envptr7591149[3]
  %cont7581339 = load i64, i64* %envptr7591150, align 8                              ; load; *envptr7591150
  %envptr7591151 = inttoptr i64 %env7585940 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591152 = getelementptr inbounds i64, i64* %envptr7591151, i64 2            ; &envptr7591151[2]
  %E10$ok_63 = load i64, i64* %envptr7591152, align 8                                ; load; *envptr7591152
  %envptr7591153 = inttoptr i64 %env7585940 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591154 = getelementptr inbounds i64, i64* %envptr7591153, i64 1            ; &envptr7591153[1]
  %Whg$dist = load i64, i64* %envptr7591154, align 8                                 ; load; *envptr7591154
  %_957581340 = call i64 @prim_car(i64 %rvp7585037)                                  ; call prim_car
  %rvp7585036 = call i64 @prim_cdr(i64 %rvp7585037)                                  ; call prim_cdr
  %a7581162 = call i64 @prim_car(i64 %rvp7585036)                                    ; call prim_car
  %na7585021 = call i64 @prim_cdr(i64 %rvp7585036)                                   ; call prim_cdr
  %a7581163 = call i64 @prim__61(i64 %a7581153, i64 %a7581162)                       ; call prim__61
  %a7581164 = call i64 @prim_not(i64 %a7581163)                                      ; call prim_not
  %cmp7591155 = icmp eq i64 %a7581164, 15                                            ; false?
  br i1 %cmp7591155, label %else7591157, label %then7591156                          ; if

then7591156:
  %a7581165 = call i64 @prim_car(i64 %eLB$placed)                                    ; call prim_car
  %a7581166 = call i64 @prim__45(i64 %TWq$row, i64 %Whg$dist)                        ; call prim__45
  %a7581167 = call i64 @prim__61(i64 %a7581165, i64 %a7581166)                       ; call prim__61
  %a7581168 = call i64 @prim_not(i64 %a7581167)                                      ; call prim_not
  %cmp7591158 = icmp eq i64 %a7581168, 15                                            ; false?
  br i1 %cmp7591158, label %else7591160, label %then7591159                          ; if

then7591159:
  %arg7583083 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581169 = call i64 @prim_vector_45ref(i64 %E10$ok_63, i64 %arg7583083)           ; call prim_vector_45ref
  %a7581170 = call i64 @prim_procedure_63(i64 %a7581169)                             ; call prim_procedure_63
  %cmp7591161 = icmp eq i64 %a7581170, 15                                            ; false?
  br i1 %cmp7591161, label %else7591163, label %then7591162                          ; if

then7591162:
  %arg7583086 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7581171 = call i64 @prim_vector_45ref(i64 %E10$ok_63, i64 %arg7583086)           ; call prim_vector_45ref
  %arg7583088 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a7581172 = call i64 @prim__43(i64 %Whg$dist, i64 %arg7583088)                     ; call prim__43
  %a7581173 = call i64 @prim_cdr(i64 %eLB$placed)                                    ; call prim_cdr
  %rva7585026 = add i64 0, 0                                                         ; quoted ()
  %rva7585025 = call i64 @prim_cons(i64 %a7581173, i64 %rva7585026)                  ; call prim_cons
  %rva7585024 = call i64 @prim_cons(i64 %a7581172, i64 %rva7585025)                  ; call prim_cons
  %rva7585023 = call i64 @prim_cons(i64 %TWq$row, i64 %rva7585024)                   ; call prim_cons
  %rva7585022 = call i64 @prim_cons(i64 %cont7581339, i64 %rva7585023)               ; call prim_cons
  %cloptr7591164 = inttoptr i64 %a7581171 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7591165 = getelementptr inbounds i64, i64* %cloptr7591164, i64 0             ; &cloptr7591164[0]
  %f7591167 = load i64, i64* %i0ptr7591165, align 8                                  ; load; *i0ptr7591165
  %fptr7591166 = inttoptr i64 %f7591167 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591166(i64 %a7581171, i64 %rva7585022)             ; tail call
  ret void

else7591163:
  %arg7583096 = call i64 @const_init_symbol(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @sym7591168, i32 0, i32 0)); quoted string
  %retprim7581341 = call i64 @prim_halt(i64 %arg7583096)                             ; call prim_halt
  %arg7583098 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585029 = add i64 0, 0                                                         ; quoted ()
  %rva7585028 = call i64 @prim_cons(i64 %retprim7581341, i64 %rva7585029)            ; call prim_cons
  %rva7585027 = call i64 @prim_cons(i64 %arg7583098, i64 %rva7585028)                ; call prim_cons
  %cloptr7591169 = inttoptr i64 %cont7581339 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591170 = getelementptr inbounds i64, i64* %cloptr7591169, i64 0             ; &cloptr7591169[0]
  %f7591172 = load i64, i64* %i0ptr7591170, align 8                                  ; load; *i0ptr7591170
  %fptr7591171 = inttoptr i64 %f7591172 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591171(i64 %cont7581339, i64 %rva7585027)          ; tail call
  ret void

else7591160:
  %arg7583101 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583100 = call i64 @const_init_false()                                         ; quoted #f
  %rva7585032 = add i64 0, 0                                                         ; quoted ()
  %rva7585031 = call i64 @prim_cons(i64 %arg7583100, i64 %rva7585032)                ; call prim_cons
  %rva7585030 = call i64 @prim_cons(i64 %arg7583101, i64 %rva7585031)                ; call prim_cons
  %cloptr7591173 = inttoptr i64 %cont7581339 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591174 = getelementptr inbounds i64, i64* %cloptr7591173, i64 0             ; &cloptr7591173[0]
  %f7591176 = load i64, i64* %i0ptr7591174, align 8                                  ; load; *i0ptr7591174
  %fptr7591175 = inttoptr i64 %f7591176 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591175(i64 %cont7581339, i64 %rva7585030)          ; tail call
  ret void

else7591157:
  %arg7583104 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583103 = call i64 @const_init_false()                                         ; quoted #f
  %rva7585035 = add i64 0, 0                                                         ; quoted ()
  %rva7585034 = call i64 @prim_cons(i64 %arg7583103, i64 %rva7585035)                ; call prim_cons
  %rva7585033 = call i64 @prim_cons(i64 %arg7583104, i64 %rva7585034)                ; call prim_cons
  %cloptr7591177 = inttoptr i64 %cont7581339 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591178 = getelementptr inbounds i64, i64* %cloptr7591177, i64 0             ; &cloptr7591177[0]
  %f7591180 = load i64, i64* %i0ptr7591178, align 8                                  ; load; *i0ptr7591178
  %fptr7591179 = inttoptr i64 %f7591180 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591179(i64 %cont7581339, i64 %rva7585033)          ; tail call
  ret void
}


define void @lam7585902(i64 %env7585903, i64 %rvp7585154) {
  %envptr7591181 = inttoptr i64 %env7585903 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591182 = getelementptr inbounds i64, i64* %envptr7591181, i64 2            ; &envptr7591181[2]
  %cont7581311 = load i64, i64* %envptr7591182, align 8                              ; load; *envptr7591182
  %envptr7591183 = inttoptr i64 %env7585903 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591184 = getelementptr inbounds i64, i64* %envptr7591183, i64 1            ; &envptr7591183[1]
  %a7581176 = load i64, i64* %envptr7591184, align 8                                 ; load; *envptr7591184
  %_957581358 = call i64 @prim_car(i64 %rvp7585154)                                  ; call prim_car
  %rvp7585153 = call i64 @prim_cdr(i64 %rvp7585154)                                  ; call prim_cdr
  %a7581180 = call i64 @prim_car(i64 %rvp7585153)                                    ; call prim_car
  %na7585129 = call i64 @prim_cdr(i64 %rvp7585153)                                   ; call prim_cdr
  %cloptr7591185 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591186 = getelementptr inbounds i64, i64* %cloptr7591185, i64 0              ; &cloptr7591185[0]
  %f7591187 = ptrtoint void(i64,i64)* @lam7585900 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591187, i64* %eptr7591186                                             ; store fptr
  %arg7583184 = ptrtoint i64* %cloptr7591185 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591188 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7591190 = getelementptr inbounds i64, i64* %cloptr7591188, i64 1              ; &eptr7591190[1]
  %eptr7591191 = getelementptr inbounds i64, i64* %cloptr7591188, i64 2              ; &eptr7591191[2]
  %eptr7591192 = getelementptr inbounds i64, i64* %cloptr7591188, i64 3              ; &eptr7591192[3]
  store i64 %a7581176, i64* %eptr7591190                                             ; *eptr7591190 = %a7581176
  store i64 %a7581180, i64* %eptr7591191                                             ; *eptr7591191 = %a7581180
  store i64 %cont7581311, i64* %eptr7591192                                          ; *eptr7591192 = %cont7581311
  %eptr7591189 = getelementptr inbounds i64, i64* %cloptr7591188, i64 0              ; &cloptr7591188[0]
  %f7591193 = ptrtoint void(i64,i64)* @lam7585896 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591193, i64* %eptr7591189                                             ; store fptr
  %arg7583183 = ptrtoint i64* %cloptr7591188 to i64                                  ; closure cast; i64* -> i64
  %rva7585152 = add i64 0, 0                                                         ; quoted ()
  %rva7585151 = call i64 @prim_cons(i64 %arg7583183, i64 %rva7585152)                ; call prim_cons
  %cloptr7591194 = inttoptr i64 %arg7583184 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591195 = getelementptr inbounds i64, i64* %cloptr7591194, i64 0             ; &cloptr7591194[0]
  %f7591197 = load i64, i64* %i0ptr7591195, align 8                                  ; load; *i0ptr7591195
  %fptr7591196 = inttoptr i64 %f7591197 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591196(i64 %arg7583184, i64 %rva7585151)           ; tail call
  ret void
}


define void @lam7585900(i64 %env7585901, i64 %DzU$lst7581364) {
  %cont7581363 = call i64 @prim_car(i64 %DzU$lst7581364)                             ; call prim_car
  %DzU$lst = call i64 @prim_cdr(i64 %DzU$lst7581364)                                 ; call prim_cdr
  %arg7583188 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585132 = add i64 0, 0                                                         ; quoted ()
  %rva7585131 = call i64 @prim_cons(i64 %DzU$lst, i64 %rva7585132)                   ; call prim_cons
  %rva7585130 = call i64 @prim_cons(i64 %arg7583188, i64 %rva7585131)                ; call prim_cons
  %cloptr7591198 = inttoptr i64 %cont7581363 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591199 = getelementptr inbounds i64, i64* %cloptr7591198, i64 0             ; &cloptr7591198[0]
  %f7591201 = load i64, i64* %i0ptr7591199, align 8                                  ; load; *i0ptr7591199
  %fptr7591200 = inttoptr i64 %f7591201 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591200(i64 %cont7581363, i64 %rva7585130)          ; tail call
  ret void
}


define void @lam7585896(i64 %env7585897, i64 %rvp7585150) {
  %envptr7591202 = inttoptr i64 %env7585897 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591203 = getelementptr inbounds i64, i64* %envptr7591202, i64 3            ; &envptr7591202[3]
  %cont7581311 = load i64, i64* %envptr7591203, align 8                              ; load; *envptr7591203
  %envptr7591204 = inttoptr i64 %env7585897 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591205 = getelementptr inbounds i64, i64* %envptr7591204, i64 2            ; &envptr7591204[2]
  %a7581180 = load i64, i64* %envptr7591205, align 8                                 ; load; *envptr7591205
  %envptr7591206 = inttoptr i64 %env7585897 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591207 = getelementptr inbounds i64, i64* %envptr7591206, i64 1            ; &envptr7591206[1]
  %a7581176 = load i64, i64* %envptr7591207, align 8                                 ; load; *envptr7591207
  %_957581359 = call i64 @prim_car(i64 %rvp7585150)                                  ; call prim_car
  %rvp7585149 = call i64 @prim_cdr(i64 %rvp7585150)                                  ; call prim_cdr
  %a7581181 = call i64 @prim_car(i64 %rvp7585149)                                    ; call prim_car
  %na7585134 = call i64 @prim_cdr(i64 %rvp7585149)                                   ; call prim_cdr
  %cloptr7591208 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591209 = getelementptr inbounds i64, i64* %cloptr7591208, i64 0              ; &cloptr7591208[0]
  %f7591210 = ptrtoint void(i64,i64)* @lam7585894 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591210, i64* %eptr7591209                                             ; store fptr
  %arg7583191 = ptrtoint i64* %cloptr7591208 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591211 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7591213 = getelementptr inbounds i64, i64* %cloptr7591211, i64 1              ; &eptr7591213[1]
  %eptr7591214 = getelementptr inbounds i64, i64* %cloptr7591211, i64 2              ; &eptr7591214[2]
  %eptr7591215 = getelementptr inbounds i64, i64* %cloptr7591211, i64 3              ; &eptr7591215[3]
  %eptr7591216 = getelementptr inbounds i64, i64* %cloptr7591211, i64 4              ; &eptr7591216[4]
  store i64 %a7581176, i64* %eptr7591213                                             ; *eptr7591213 = %a7581176
  store i64 %a7581180, i64* %eptr7591214                                             ; *eptr7591214 = %a7581180
  store i64 %a7581181, i64* %eptr7591215                                             ; *eptr7591215 = %a7581181
  store i64 %cont7581311, i64* %eptr7591216                                          ; *eptr7591216 = %cont7581311
  %eptr7591212 = getelementptr inbounds i64, i64* %cloptr7591211, i64 0              ; &cloptr7591211[0]
  %f7591217 = ptrtoint void(i64,i64)* @lam7585890 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591217, i64* %eptr7591212                                             ; store fptr
  %arg7583190 = ptrtoint i64* %cloptr7591211 to i64                                  ; closure cast; i64* -> i64
  %rva7585148 = add i64 0, 0                                                         ; quoted ()
  %rva7585147 = call i64 @prim_cons(i64 %arg7583190, i64 %rva7585148)                ; call prim_cons
  %cloptr7591218 = inttoptr i64 %arg7583191 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591219 = getelementptr inbounds i64, i64* %cloptr7591218, i64 0             ; &cloptr7591218[0]
  %f7591221 = load i64, i64* %i0ptr7591219, align 8                                  ; load; *i0ptr7591219
  %fptr7591220 = inttoptr i64 %f7591221 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591220(i64 %arg7583191, i64 %rva7585147)           ; tail call
  ret void
}


define void @lam7585894(i64 %env7585895, i64 %emx$lst7581362) {
  %cont7581361 = call i64 @prim_car(i64 %emx$lst7581362)                             ; call prim_car
  %emx$lst = call i64 @prim_cdr(i64 %emx$lst7581362)                                 ; call prim_cdr
  %arg7583195 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585137 = add i64 0, 0                                                         ; quoted ()
  %rva7585136 = call i64 @prim_cons(i64 %emx$lst, i64 %rva7585137)                   ; call prim_cons
  %rva7585135 = call i64 @prim_cons(i64 %arg7583195, i64 %rva7585136)                ; call prim_cons
  %cloptr7591222 = inttoptr i64 %cont7581361 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591223 = getelementptr inbounds i64, i64* %cloptr7591222, i64 0             ; &cloptr7591222[0]
  %f7591225 = load i64, i64* %i0ptr7591223, align 8                                  ; load; *i0ptr7591223
  %fptr7591224 = inttoptr i64 %f7591225 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591224(i64 %cont7581361, i64 %rva7585135)          ; tail call
  ret void
}


define void @lam7585890(i64 %env7585891, i64 %rvp7585146) {
  %envptr7591226 = inttoptr i64 %env7585891 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591227 = getelementptr inbounds i64, i64* %envptr7591226, i64 4            ; &envptr7591226[4]
  %cont7581311 = load i64, i64* %envptr7591227, align 8                              ; load; *envptr7591227
  %envptr7591228 = inttoptr i64 %env7585891 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591229 = getelementptr inbounds i64, i64* %envptr7591228, i64 3            ; &envptr7591228[3]
  %a7581181 = load i64, i64* %envptr7591229, align 8                                 ; load; *envptr7591229
  %envptr7591230 = inttoptr i64 %env7585891 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591231 = getelementptr inbounds i64, i64* %envptr7591230, i64 2            ; &envptr7591230[2]
  %a7581180 = load i64, i64* %envptr7591231, align 8                                 ; load; *envptr7591231
  %envptr7591232 = inttoptr i64 %env7585891 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591233 = getelementptr inbounds i64, i64* %envptr7591232, i64 1            ; &envptr7591232[1]
  %a7581176 = load i64, i64* %envptr7591233, align 8                                 ; load; *envptr7591233
  %_957581360 = call i64 @prim_car(i64 %rvp7585146)                                  ; call prim_car
  %rvp7585145 = call i64 @prim_cdr(i64 %rvp7585146)                                  ; call prim_cdr
  %a7581182 = call i64 @prim_car(i64 %rvp7585145)                                    ; call prim_car
  %na7585139 = call i64 @prim_cdr(i64 %rvp7585145)                                   ; call prim_cdr
  %rva7585144 = add i64 0, 0                                                         ; quoted ()
  %rva7585143 = call i64 @prim_cons(i64 %a7581182, i64 %rva7585144)                  ; call prim_cons
  %rva7585142 = call i64 @prim_cons(i64 %a7581181, i64 %rva7585143)                  ; call prim_cons
  %rva7585141 = call i64 @prim_cons(i64 %a7581180, i64 %rva7585142)                  ; call prim_cons
  %rva7585140 = call i64 @prim_cons(i64 %cont7581311, i64 %rva7585141)               ; call prim_cons
  %cloptr7591234 = inttoptr i64 %a7581176 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7591235 = getelementptr inbounds i64, i64* %cloptr7591234, i64 0             ; &cloptr7591234[0]
  %f7591237 = load i64, i64* %i0ptr7591235, align 8                                  ; load; *i0ptr7591235
  %fptr7591236 = inttoptr i64 %f7591237 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591236(i64 %a7581176, i64 %rva7585140)             ; tail call
  ret void
}


define void @lam7585882(i64 %env7585883, i64 %rvp7585124) {
  %envptr7591238 = inttoptr i64 %env7585883 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591239 = getelementptr inbounds i64, i64* %envptr7591238, i64 2            ; &envptr7591238[2]
  %cont7581311 = load i64, i64* %envptr7591239, align 8                              ; load; *envptr7591239
  %envptr7591240 = inttoptr i64 %env7585883 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591241 = getelementptr inbounds i64, i64* %envptr7591240, i64 1            ; &envptr7591240[1]
  %a7581176 = load i64, i64* %envptr7591241, align 8                                 ; load; *envptr7591241
  %_957581358 = call i64 @prim_car(i64 %rvp7585124)                                  ; call prim_car
  %rvp7585123 = call i64 @prim_cdr(i64 %rvp7585124)                                  ; call prim_cdr
  %a7581180 = call i64 @prim_car(i64 %rvp7585123)                                    ; call prim_car
  %na7585099 = call i64 @prim_cdr(i64 %rvp7585123)                                   ; call prim_cdr
  %cloptr7591242 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591243 = getelementptr inbounds i64, i64* %cloptr7591242, i64 0              ; &cloptr7591242[0]
  %f7591244 = ptrtoint void(i64,i64)* @lam7585880 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591244, i64* %eptr7591243                                             ; store fptr
  %arg7583161 = ptrtoint i64* %cloptr7591242 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591245 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7591247 = getelementptr inbounds i64, i64* %cloptr7591245, i64 1              ; &eptr7591247[1]
  %eptr7591248 = getelementptr inbounds i64, i64* %cloptr7591245, i64 2              ; &eptr7591248[2]
  %eptr7591249 = getelementptr inbounds i64, i64* %cloptr7591245, i64 3              ; &eptr7591249[3]
  store i64 %a7581176, i64* %eptr7591247                                             ; *eptr7591247 = %a7581176
  store i64 %a7581180, i64* %eptr7591248                                             ; *eptr7591248 = %a7581180
  store i64 %cont7581311, i64* %eptr7591249                                          ; *eptr7591249 = %cont7581311
  %eptr7591246 = getelementptr inbounds i64, i64* %cloptr7591245, i64 0              ; &cloptr7591245[0]
  %f7591250 = ptrtoint void(i64,i64)* @lam7585876 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591250, i64* %eptr7591246                                             ; store fptr
  %arg7583160 = ptrtoint i64* %cloptr7591245 to i64                                  ; closure cast; i64* -> i64
  %rva7585122 = add i64 0, 0                                                         ; quoted ()
  %rva7585121 = call i64 @prim_cons(i64 %arg7583160, i64 %rva7585122)                ; call prim_cons
  %cloptr7591251 = inttoptr i64 %arg7583161 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591252 = getelementptr inbounds i64, i64* %cloptr7591251, i64 0             ; &cloptr7591251[0]
  %f7591254 = load i64, i64* %i0ptr7591252, align 8                                  ; load; *i0ptr7591252
  %fptr7591253 = inttoptr i64 %f7591254 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591253(i64 %arg7583161, i64 %rva7585121)           ; tail call
  ret void
}


define void @lam7585880(i64 %env7585881, i64 %DzU$lst7581364) {
  %cont7581363 = call i64 @prim_car(i64 %DzU$lst7581364)                             ; call prim_car
  %DzU$lst = call i64 @prim_cdr(i64 %DzU$lst7581364)                                 ; call prim_cdr
  %arg7583165 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585102 = add i64 0, 0                                                         ; quoted ()
  %rva7585101 = call i64 @prim_cons(i64 %DzU$lst, i64 %rva7585102)                   ; call prim_cons
  %rva7585100 = call i64 @prim_cons(i64 %arg7583165, i64 %rva7585101)                ; call prim_cons
  %cloptr7591255 = inttoptr i64 %cont7581363 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591256 = getelementptr inbounds i64, i64* %cloptr7591255, i64 0             ; &cloptr7591255[0]
  %f7591258 = load i64, i64* %i0ptr7591256, align 8                                  ; load; *i0ptr7591256
  %fptr7591257 = inttoptr i64 %f7591258 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591257(i64 %cont7581363, i64 %rva7585100)          ; tail call
  ret void
}


define void @lam7585876(i64 %env7585877, i64 %rvp7585120) {
  %envptr7591259 = inttoptr i64 %env7585877 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591260 = getelementptr inbounds i64, i64* %envptr7591259, i64 3            ; &envptr7591259[3]
  %cont7581311 = load i64, i64* %envptr7591260, align 8                              ; load; *envptr7591260
  %envptr7591261 = inttoptr i64 %env7585877 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591262 = getelementptr inbounds i64, i64* %envptr7591261, i64 2            ; &envptr7591261[2]
  %a7581180 = load i64, i64* %envptr7591262, align 8                                 ; load; *envptr7591262
  %envptr7591263 = inttoptr i64 %env7585877 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591264 = getelementptr inbounds i64, i64* %envptr7591263, i64 1            ; &envptr7591263[1]
  %a7581176 = load i64, i64* %envptr7591264, align 8                                 ; load; *envptr7591264
  %_957581359 = call i64 @prim_car(i64 %rvp7585120)                                  ; call prim_car
  %rvp7585119 = call i64 @prim_cdr(i64 %rvp7585120)                                  ; call prim_cdr
  %a7581181 = call i64 @prim_car(i64 %rvp7585119)                                    ; call prim_car
  %na7585104 = call i64 @prim_cdr(i64 %rvp7585119)                                   ; call prim_cdr
  %cloptr7591265 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591266 = getelementptr inbounds i64, i64* %cloptr7591265, i64 0              ; &cloptr7591265[0]
  %f7591267 = ptrtoint void(i64,i64)* @lam7585874 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591267, i64* %eptr7591266                                             ; store fptr
  %arg7583168 = ptrtoint i64* %cloptr7591265 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591268 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7591270 = getelementptr inbounds i64, i64* %cloptr7591268, i64 1              ; &eptr7591270[1]
  %eptr7591271 = getelementptr inbounds i64, i64* %cloptr7591268, i64 2              ; &eptr7591271[2]
  %eptr7591272 = getelementptr inbounds i64, i64* %cloptr7591268, i64 3              ; &eptr7591272[3]
  %eptr7591273 = getelementptr inbounds i64, i64* %cloptr7591268, i64 4              ; &eptr7591273[4]
  store i64 %a7581176, i64* %eptr7591270                                             ; *eptr7591270 = %a7581176
  store i64 %a7581180, i64* %eptr7591271                                             ; *eptr7591271 = %a7581180
  store i64 %a7581181, i64* %eptr7591272                                             ; *eptr7591272 = %a7581181
  store i64 %cont7581311, i64* %eptr7591273                                          ; *eptr7591273 = %cont7581311
  %eptr7591269 = getelementptr inbounds i64, i64* %cloptr7591268, i64 0              ; &cloptr7591268[0]
  %f7591274 = ptrtoint void(i64,i64)* @lam7585870 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591274, i64* %eptr7591269                                             ; store fptr
  %arg7583167 = ptrtoint i64* %cloptr7591268 to i64                                  ; closure cast; i64* -> i64
  %rva7585118 = add i64 0, 0                                                         ; quoted ()
  %rva7585117 = call i64 @prim_cons(i64 %arg7583167, i64 %rva7585118)                ; call prim_cons
  %cloptr7591275 = inttoptr i64 %arg7583168 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591276 = getelementptr inbounds i64, i64* %cloptr7591275, i64 0             ; &cloptr7591275[0]
  %f7591278 = load i64, i64* %i0ptr7591276, align 8                                  ; load; *i0ptr7591276
  %fptr7591277 = inttoptr i64 %f7591278 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591277(i64 %arg7583168, i64 %rva7585117)           ; tail call
  ret void
}


define void @lam7585874(i64 %env7585875, i64 %emx$lst7581362) {
  %cont7581361 = call i64 @prim_car(i64 %emx$lst7581362)                             ; call prim_car
  %emx$lst = call i64 @prim_cdr(i64 %emx$lst7581362)                                 ; call prim_cdr
  %arg7583172 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585107 = add i64 0, 0                                                         ; quoted ()
  %rva7585106 = call i64 @prim_cons(i64 %emx$lst, i64 %rva7585107)                   ; call prim_cons
  %rva7585105 = call i64 @prim_cons(i64 %arg7583172, i64 %rva7585106)                ; call prim_cons
  %cloptr7591279 = inttoptr i64 %cont7581361 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591280 = getelementptr inbounds i64, i64* %cloptr7591279, i64 0             ; &cloptr7591279[0]
  %f7591282 = load i64, i64* %i0ptr7591280, align 8                                  ; load; *i0ptr7591280
  %fptr7591281 = inttoptr i64 %f7591282 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591281(i64 %cont7581361, i64 %rva7585105)          ; tail call
  ret void
}


define void @lam7585870(i64 %env7585871, i64 %rvp7585116) {
  %envptr7591283 = inttoptr i64 %env7585871 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591284 = getelementptr inbounds i64, i64* %envptr7591283, i64 4            ; &envptr7591283[4]
  %cont7581311 = load i64, i64* %envptr7591284, align 8                              ; load; *envptr7591284
  %envptr7591285 = inttoptr i64 %env7585871 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591286 = getelementptr inbounds i64, i64* %envptr7591285, i64 3            ; &envptr7591285[3]
  %a7581181 = load i64, i64* %envptr7591286, align 8                                 ; load; *envptr7591286
  %envptr7591287 = inttoptr i64 %env7585871 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591288 = getelementptr inbounds i64, i64* %envptr7591287, i64 2            ; &envptr7591287[2]
  %a7581180 = load i64, i64* %envptr7591288, align 8                                 ; load; *envptr7591288
  %envptr7591289 = inttoptr i64 %env7585871 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591290 = getelementptr inbounds i64, i64* %envptr7591289, i64 1            ; &envptr7591289[1]
  %a7581176 = load i64, i64* %envptr7591290, align 8                                 ; load; *envptr7591290
  %_957581360 = call i64 @prim_car(i64 %rvp7585116)                                  ; call prim_car
  %rvp7585115 = call i64 @prim_cdr(i64 %rvp7585116)                                  ; call prim_cdr
  %a7581182 = call i64 @prim_car(i64 %rvp7585115)                                    ; call prim_car
  %na7585109 = call i64 @prim_cdr(i64 %rvp7585115)                                   ; call prim_cdr
  %rva7585114 = add i64 0, 0                                                         ; quoted ()
  %rva7585113 = call i64 @prim_cons(i64 %a7581182, i64 %rva7585114)                  ; call prim_cons
  %rva7585112 = call i64 @prim_cons(i64 %a7581181, i64 %rva7585113)                  ; call prim_cons
  %rva7585111 = call i64 @prim_cons(i64 %a7581180, i64 %rva7585112)                  ; call prim_cons
  %rva7585110 = call i64 @prim_cons(i64 %cont7581311, i64 %rva7585111)               ; call prim_cons
  %cloptr7591291 = inttoptr i64 %a7581176 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7591292 = getelementptr inbounds i64, i64* %cloptr7591291, i64 0             ; &cloptr7591291[0]
  %f7591294 = load i64, i64* %i0ptr7591292, align 8                                  ; load; *i0ptr7591292
  %fptr7591293 = inttoptr i64 %f7591294 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591293(i64 %a7581176, i64 %rva7585110)             ; tail call
  ret void
}


define void @lam7585853(i64 %env7585854, i64 %rvp7585204) {
  %_950 = call i64 @prim_car(i64 %rvp7585204)                                        ; call prim_car
  %rvp7585203 = call i64 @prim_cdr(i64 %rvp7585204)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp7585203)                                           ; call prim_car
  %na7585200 = call i64 @prim_cdr(i64 %rvp7585203)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva7585202 = add i64 0, 0                                                         ; quoted ()
  %rva7585201 = call i64 @prim_cons(i64 %_951, i64 %rva7585202)                      ; call prim_cons
  %cloptr7591295 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr7591296 = getelementptr inbounds i64, i64* %cloptr7591295, i64 0             ; &cloptr7591295[0]
  %f7591298 = load i64, i64* %i0ptr7591296, align 8                                  ; load; *i0ptr7591296
  %fptr7591297 = inttoptr i64 %f7591298 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591297(i64 %_951, i64 %rva7585201)                 ; tail call
  ret void
}


define void @lam7585847(i64 %env7585848, i64 %rvp7585195) {
  %_950 = call i64 @prim_car(i64 %rvp7585195)                                        ; call prim_car
  %rvp7585194 = call i64 @prim_cdr(i64 %rvp7585195)                                  ; call prim_cdr
  %x = call i64 @prim_car(i64 %rvp7585194)                                           ; call prim_car
  %na7585191 = call i64 @prim_cdr(i64 %rvp7585194)                                   ; call prim_cdr
  %_951 = call i64 @prim_halt(i64 %x)                                                ; call prim_halt
  %rva7585193 = add i64 0, 0                                                         ; quoted ()
  %rva7585192 = call i64 @prim_cons(i64 %_951, i64 %rva7585193)                      ; call prim_cons
  %cloptr7591299 = inttoptr i64 %_951 to i64*                                        ; closure/env cast; i64 -> i64*
  %i0ptr7591300 = getelementptr inbounds i64, i64* %cloptr7591299, i64 0             ; &cloptr7591299[0]
  %f7591302 = load i64, i64* %i0ptr7591300, align 8                                  ; load; *i0ptr7591300
  %fptr7591301 = inttoptr i64 %f7591302 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591301(i64 %_951, i64 %rva7585192)                 ; tail call
  ret void
}


define void @lam7585833(i64 %env7585834, i64 %rvp7585331) {
  %envptr7591303 = inttoptr i64 %env7585834 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591304 = getelementptr inbounds i64, i64* %envptr7591303, i64 3            ; &envptr7591303[3]
  %be3$_37foldr1 = load i64, i64* %envptr7591304, align 8                            ; load; *envptr7591304
  %envptr7591305 = inttoptr i64 %env7585834 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591306 = getelementptr inbounds i64, i64* %envptr7591305, i64 2            ; &envptr7591305[2]
  %dEj$_37map1 = load i64, i64* %envptr7591306, align 8                              ; load; *envptr7591306
  %envptr7591307 = inttoptr i64 %env7585834 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591308 = getelementptr inbounds i64, i64* %envptr7591307, i64 1            ; &envptr7591307[1]
  %zF0$_37foldr = load i64, i64* %envptr7591308, align 8                             ; load; *envptr7591308
  %cont7581394 = call i64 @prim_car(i64 %rvp7585331)                                 ; call prim_car
  %rvp7585330 = call i64 @prim_cdr(i64 %rvp7585331)                                  ; call prim_cdr
  %shD$_37foldl = call i64 @prim_car(i64 %rvp7585330)                                ; call prim_car
  %na7585238 = call i64 @prim_cdr(i64 %rvp7585330)                                   ; call prim_cdr
  %arg7583225 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7591309 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7591311 = getelementptr inbounds i64, i64* %cloptr7591309, i64 1              ; &eptr7591311[1]
  %eptr7591312 = getelementptr inbounds i64, i64* %cloptr7591309, i64 2              ; &eptr7591312[2]
  %eptr7591313 = getelementptr inbounds i64, i64* %cloptr7591309, i64 3              ; &eptr7591313[3]
  %eptr7591314 = getelementptr inbounds i64, i64* %cloptr7591309, i64 4              ; &eptr7591314[4]
  store i64 %zF0$_37foldr, i64* %eptr7591311                                         ; *eptr7591311 = %zF0$_37foldr
  store i64 %dEj$_37map1, i64* %eptr7591312                                          ; *eptr7591312 = %dEj$_37map1
  store i64 %be3$_37foldr1, i64* %eptr7591313                                        ; *eptr7591313 = %be3$_37foldr1
  store i64 %shD$_37foldl, i64* %eptr7591314                                         ; *eptr7591314 = %shD$_37foldl
  %eptr7591310 = getelementptr inbounds i64, i64* %cloptr7591309, i64 0              ; &cloptr7591309[0]
  %f7591315 = ptrtoint void(i64,i64)* @lam7585830 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591315, i64* %eptr7591310                                             ; store fptr
  %arg7583224 = ptrtoint i64* %cloptr7591309 to i64                                  ; closure cast; i64* -> i64
  %rva7585329 = add i64 0, 0                                                         ; quoted ()
  %rva7585328 = call i64 @prim_cons(i64 %arg7583224, i64 %rva7585329)                ; call prim_cons
  %rva7585327 = call i64 @prim_cons(i64 %arg7583225, i64 %rva7585328)                ; call prim_cons
  %cloptr7591316 = inttoptr i64 %cont7581394 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591317 = getelementptr inbounds i64, i64* %cloptr7591316, i64 0             ; &cloptr7591316[0]
  %f7591319 = load i64, i64* %i0ptr7591317, align 8                                  ; load; *i0ptr7591317
  %fptr7591318 = inttoptr i64 %f7591319 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591318(i64 %cont7581394, i64 %rva7585327)          ; tail call
  ret void
}


define void @lam7585830(i64 %env7585831, i64 %bYQ$args7581396) {
  %envptr7591320 = inttoptr i64 %env7585831 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591321 = getelementptr inbounds i64, i64* %envptr7591320, i64 4            ; &envptr7591320[4]
  %shD$_37foldl = load i64, i64* %envptr7591321, align 8                             ; load; *envptr7591321
  %envptr7591322 = inttoptr i64 %env7585831 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591323 = getelementptr inbounds i64, i64* %envptr7591322, i64 3            ; &envptr7591322[3]
  %be3$_37foldr1 = load i64, i64* %envptr7591323, align 8                            ; load; *envptr7591323
  %envptr7591324 = inttoptr i64 %env7585831 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591325 = getelementptr inbounds i64, i64* %envptr7591324, i64 2            ; &envptr7591324[2]
  %dEj$_37map1 = load i64, i64* %envptr7591325, align 8                              ; load; *envptr7591325
  %envptr7591326 = inttoptr i64 %env7585831 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591327 = getelementptr inbounds i64, i64* %envptr7591326, i64 1            ; &envptr7591326[1]
  %zF0$_37foldr = load i64, i64* %envptr7591327, align 8                             ; load; *envptr7591327
  %cont7581395 = call i64 @prim_car(i64 %bYQ$args7581396)                            ; call prim_car
  %bYQ$args = call i64 @prim_cdr(i64 %bYQ$args7581396)                               ; call prim_cdr
  %zhL$f = call i64 @prim_car(i64 %bYQ$args)                                         ; call prim_car
  %a7581008 = call i64 @prim_cdr(i64 %bYQ$args)                                      ; call prim_cdr
  %retprim7581415 = call i64 @prim_car(i64 %a7581008)                                ; call prim_car
  %cloptr7591328 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7591330 = getelementptr inbounds i64, i64* %cloptr7591328, i64 1              ; &eptr7591330[1]
  %eptr7591331 = getelementptr inbounds i64, i64* %cloptr7591328, i64 2              ; &eptr7591331[2]
  %eptr7591332 = getelementptr inbounds i64, i64* %cloptr7591328, i64 3              ; &eptr7591332[3]
  %eptr7591333 = getelementptr inbounds i64, i64* %cloptr7591328, i64 4              ; &eptr7591333[4]
  %eptr7591334 = getelementptr inbounds i64, i64* %cloptr7591328, i64 5              ; &eptr7591334[5]
  %eptr7591335 = getelementptr inbounds i64, i64* %cloptr7591328, i64 6              ; &eptr7591335[6]
  %eptr7591336 = getelementptr inbounds i64, i64* %cloptr7591328, i64 7              ; &eptr7591336[7]
  store i64 %bYQ$args, i64* %eptr7591330                                             ; *eptr7591330 = %bYQ$args
  store i64 %zF0$_37foldr, i64* %eptr7591331                                         ; *eptr7591331 = %zF0$_37foldr
  store i64 %dEj$_37map1, i64* %eptr7591332                                          ; *eptr7591332 = %dEj$_37map1
  store i64 %be3$_37foldr1, i64* %eptr7591333                                        ; *eptr7591333 = %be3$_37foldr1
  store i64 %cont7581395, i64* %eptr7591334                                          ; *eptr7591334 = %cont7581395
  store i64 %shD$_37foldl, i64* %eptr7591335                                         ; *eptr7591335 = %shD$_37foldl
  store i64 %zhL$f, i64* %eptr7591336                                                ; *eptr7591336 = %zhL$f
  %eptr7591329 = getelementptr inbounds i64, i64* %cloptr7591328, i64 0              ; &cloptr7591328[0]
  %f7591337 = ptrtoint void(i64,i64)* @lam7585828 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591337, i64* %eptr7591329                                             ; store fptr
  %arg7583234 = ptrtoint i64* %cloptr7591328 to i64                                  ; closure cast; i64* -> i64
  %arg7583233 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585326 = add i64 0, 0                                                         ; quoted ()
  %rva7585325 = call i64 @prim_cons(i64 %retprim7581415, i64 %rva7585326)            ; call prim_cons
  %rva7585324 = call i64 @prim_cons(i64 %arg7583233, i64 %rva7585325)                ; call prim_cons
  %cloptr7591338 = inttoptr i64 %arg7583234 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591339 = getelementptr inbounds i64, i64* %cloptr7591338, i64 0             ; &cloptr7591338[0]
  %f7591341 = load i64, i64* %i0ptr7591339, align 8                                  ; load; *i0ptr7591339
  %fptr7591340 = inttoptr i64 %f7591341 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591340(i64 %arg7583234, i64 %rva7585324)           ; tail call
  ret void
}


define void @lam7585828(i64 %env7585829, i64 %rvp7585323) {
  %envptr7591342 = inttoptr i64 %env7585829 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591343 = getelementptr inbounds i64, i64* %envptr7591342, i64 7            ; &envptr7591342[7]
  %zhL$f = load i64, i64* %envptr7591343, align 8                                    ; load; *envptr7591343
  %envptr7591344 = inttoptr i64 %env7585829 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591345 = getelementptr inbounds i64, i64* %envptr7591344, i64 6            ; &envptr7591344[6]
  %shD$_37foldl = load i64, i64* %envptr7591345, align 8                             ; load; *envptr7591345
  %envptr7591346 = inttoptr i64 %env7585829 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591347 = getelementptr inbounds i64, i64* %envptr7591346, i64 5            ; &envptr7591346[5]
  %cont7581395 = load i64, i64* %envptr7591347, align 8                              ; load; *envptr7591347
  %envptr7591348 = inttoptr i64 %env7585829 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591349 = getelementptr inbounds i64, i64* %envptr7591348, i64 4            ; &envptr7591348[4]
  %be3$_37foldr1 = load i64, i64* %envptr7591349, align 8                            ; load; *envptr7591349
  %envptr7591350 = inttoptr i64 %env7585829 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591351 = getelementptr inbounds i64, i64* %envptr7591350, i64 3            ; &envptr7591350[3]
  %dEj$_37map1 = load i64, i64* %envptr7591351, align 8                              ; load; *envptr7591351
  %envptr7591352 = inttoptr i64 %env7585829 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591353 = getelementptr inbounds i64, i64* %envptr7591352, i64 2            ; &envptr7591352[2]
  %zF0$_37foldr = load i64, i64* %envptr7591353, align 8                             ; load; *envptr7591353
  %envptr7591354 = inttoptr i64 %env7585829 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591355 = getelementptr inbounds i64, i64* %envptr7591354, i64 1            ; &envptr7591354[1]
  %bYQ$args = load i64, i64* %envptr7591355, align 8                                 ; load; *envptr7591355
  %_957581397 = call i64 @prim_car(i64 %rvp7585323)                                  ; call prim_car
  %rvp7585322 = call i64 @prim_cdr(i64 %rvp7585323)                                  ; call prim_cdr
  %c98$acc = call i64 @prim_car(i64 %rvp7585322)                                     ; call prim_car
  %na7585240 = call i64 @prim_cdr(i64 %rvp7585322)                                   ; call prim_cdr
  %a7581009 = call i64 @prim_cdr(i64 %bYQ$args)                                      ; call prim_cdr
  %retprim7581414 = call i64 @prim_cdr(i64 %a7581009)                                ; call prim_cdr
  %cloptr7591356 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7591358 = getelementptr inbounds i64, i64* %cloptr7591356, i64 1              ; &eptr7591358[1]
  %eptr7591359 = getelementptr inbounds i64, i64* %cloptr7591356, i64 2              ; &eptr7591359[2]
  %eptr7591360 = getelementptr inbounds i64, i64* %cloptr7591356, i64 3              ; &eptr7591360[3]
  %eptr7591361 = getelementptr inbounds i64, i64* %cloptr7591356, i64 4              ; &eptr7591361[4]
  %eptr7591362 = getelementptr inbounds i64, i64* %cloptr7591356, i64 5              ; &eptr7591362[5]
  %eptr7591363 = getelementptr inbounds i64, i64* %cloptr7591356, i64 6              ; &eptr7591363[6]
  %eptr7591364 = getelementptr inbounds i64, i64* %cloptr7591356, i64 7              ; &eptr7591364[7]
  store i64 %zF0$_37foldr, i64* %eptr7591358                                         ; *eptr7591358 = %zF0$_37foldr
  store i64 %dEj$_37map1, i64* %eptr7591359                                          ; *eptr7591359 = %dEj$_37map1
  store i64 %c98$acc, i64* %eptr7591360                                              ; *eptr7591360 = %c98$acc
  store i64 %be3$_37foldr1, i64* %eptr7591361                                        ; *eptr7591361 = %be3$_37foldr1
  store i64 %cont7581395, i64* %eptr7591362                                          ; *eptr7591362 = %cont7581395
  store i64 %shD$_37foldl, i64* %eptr7591363                                         ; *eptr7591363 = %shD$_37foldl
  store i64 %zhL$f, i64* %eptr7591364                                                ; *eptr7591364 = %zhL$f
  %eptr7591357 = getelementptr inbounds i64, i64* %cloptr7591356, i64 0              ; &cloptr7591356[0]
  %f7591365 = ptrtoint void(i64,i64)* @lam7585826 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591365, i64* %eptr7591357                                             ; store fptr
  %arg7583239 = ptrtoint i64* %cloptr7591356 to i64                                  ; closure cast; i64* -> i64
  %arg7583238 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585321 = add i64 0, 0                                                         ; quoted ()
  %rva7585320 = call i64 @prim_cons(i64 %retprim7581414, i64 %rva7585321)            ; call prim_cons
  %rva7585319 = call i64 @prim_cons(i64 %arg7583238, i64 %rva7585320)                ; call prim_cons
  %cloptr7591366 = inttoptr i64 %arg7583239 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591367 = getelementptr inbounds i64, i64* %cloptr7591366, i64 0             ; &cloptr7591366[0]
  %f7591369 = load i64, i64* %i0ptr7591367, align 8                                  ; load; *i0ptr7591367
  %fptr7591368 = inttoptr i64 %f7591369 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591368(i64 %arg7583239, i64 %rva7585319)           ; tail call
  ret void
}


define void @lam7585826(i64 %env7585827, i64 %rvp7585318) {
  %envptr7591370 = inttoptr i64 %env7585827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591371 = getelementptr inbounds i64, i64* %envptr7591370, i64 7            ; &envptr7591370[7]
  %zhL$f = load i64, i64* %envptr7591371, align 8                                    ; load; *envptr7591371
  %envptr7591372 = inttoptr i64 %env7585827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591373 = getelementptr inbounds i64, i64* %envptr7591372, i64 6            ; &envptr7591372[6]
  %shD$_37foldl = load i64, i64* %envptr7591373, align 8                             ; load; *envptr7591373
  %envptr7591374 = inttoptr i64 %env7585827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591375 = getelementptr inbounds i64, i64* %envptr7591374, i64 5            ; &envptr7591374[5]
  %cont7581395 = load i64, i64* %envptr7591375, align 8                              ; load; *envptr7591375
  %envptr7591376 = inttoptr i64 %env7585827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591377 = getelementptr inbounds i64, i64* %envptr7591376, i64 4            ; &envptr7591376[4]
  %be3$_37foldr1 = load i64, i64* %envptr7591377, align 8                            ; load; *envptr7591377
  %envptr7591378 = inttoptr i64 %env7585827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591379 = getelementptr inbounds i64, i64* %envptr7591378, i64 3            ; &envptr7591378[3]
  %c98$acc = load i64, i64* %envptr7591379, align 8                                  ; load; *envptr7591379
  %envptr7591380 = inttoptr i64 %env7585827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591381 = getelementptr inbounds i64, i64* %envptr7591380, i64 2            ; &envptr7591380[2]
  %dEj$_37map1 = load i64, i64* %envptr7591381, align 8                              ; load; *envptr7591381
  %envptr7591382 = inttoptr i64 %env7585827 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591383 = getelementptr inbounds i64, i64* %envptr7591382, i64 1            ; &envptr7591382[1]
  %zF0$_37foldr = load i64, i64* %envptr7591383, align 8                             ; load; *envptr7591383
  %_957581398 = call i64 @prim_car(i64 %rvp7585318)                                  ; call prim_car
  %rvp7585317 = call i64 @prim_cdr(i64 %rvp7585318)                                  ; call prim_cdr
  %G7d$lsts = call i64 @prim_car(i64 %rvp7585317)                                    ; call prim_car
  %na7585242 = call i64 @prim_cdr(i64 %rvp7585317)                                   ; call prim_cdr
  %cloptr7591384 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7591386 = getelementptr inbounds i64, i64* %cloptr7591384, i64 1              ; &eptr7591386[1]
  %eptr7591387 = getelementptr inbounds i64, i64* %cloptr7591384, i64 2              ; &eptr7591387[2]
  %eptr7591388 = getelementptr inbounds i64, i64* %cloptr7591384, i64 3              ; &eptr7591388[3]
  %eptr7591389 = getelementptr inbounds i64, i64* %cloptr7591384, i64 4              ; &eptr7591389[4]
  %eptr7591390 = getelementptr inbounds i64, i64* %cloptr7591384, i64 5              ; &eptr7591390[5]
  %eptr7591391 = getelementptr inbounds i64, i64* %cloptr7591384, i64 6              ; &eptr7591391[6]
  %eptr7591392 = getelementptr inbounds i64, i64* %cloptr7591384, i64 7              ; &eptr7591392[7]
  store i64 %zF0$_37foldr, i64* %eptr7591386                                         ; *eptr7591386 = %zF0$_37foldr
  store i64 %dEj$_37map1, i64* %eptr7591387                                          ; *eptr7591387 = %dEj$_37map1
  store i64 %c98$acc, i64* %eptr7591388                                              ; *eptr7591388 = %c98$acc
  store i64 %G7d$lsts, i64* %eptr7591389                                             ; *eptr7591389 = %G7d$lsts
  store i64 %cont7581395, i64* %eptr7591390                                          ; *eptr7591390 = %cont7581395
  store i64 %shD$_37foldl, i64* %eptr7591391                                         ; *eptr7591391 = %shD$_37foldl
  store i64 %zhL$f, i64* %eptr7591392                                                ; *eptr7591392 = %zhL$f
  %eptr7591385 = getelementptr inbounds i64, i64* %cloptr7591384, i64 0              ; &cloptr7591384[0]
  %f7591393 = ptrtoint void(i64,i64)* @lam7585824 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591393, i64* %eptr7591385                                             ; store fptr
  %arg7583243 = ptrtoint i64* %cloptr7591384 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591394 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591395 = getelementptr inbounds i64, i64* %cloptr7591394, i64 0              ; &cloptr7591394[0]
  %f7591396 = ptrtoint void(i64,i64)* @lam7585796 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591396, i64* %eptr7591395                                             ; store fptr
  %arg7583242 = ptrtoint i64* %cloptr7591394 to i64                                  ; closure cast; i64* -> i64
  %arg7583241 = call i64 @const_init_false()                                         ; quoted #f
  %rva7585316 = add i64 0, 0                                                         ; quoted ()
  %rva7585315 = call i64 @prim_cons(i64 %G7d$lsts, i64 %rva7585316)                  ; call prim_cons
  %rva7585314 = call i64 @prim_cons(i64 %arg7583241, i64 %rva7585315)                ; call prim_cons
  %rva7585313 = call i64 @prim_cons(i64 %arg7583242, i64 %rva7585314)                ; call prim_cons
  %rva7585312 = call i64 @prim_cons(i64 %arg7583243, i64 %rva7585313)                ; call prim_cons
  %cloptr7591397 = inttoptr i64 %be3$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7591398 = getelementptr inbounds i64, i64* %cloptr7591397, i64 0             ; &cloptr7591397[0]
  %f7591400 = load i64, i64* %i0ptr7591398, align 8                                  ; load; *i0ptr7591398
  %fptr7591399 = inttoptr i64 %f7591400 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591399(i64 %be3$_37foldr1, i64 %rva7585312)        ; tail call
  ret void
}


define void @lam7585824(i64 %env7585825, i64 %rvp7585300) {
  %envptr7591401 = inttoptr i64 %env7585825 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591402 = getelementptr inbounds i64, i64* %envptr7591401, i64 7            ; &envptr7591401[7]
  %zhL$f = load i64, i64* %envptr7591402, align 8                                    ; load; *envptr7591402
  %envptr7591403 = inttoptr i64 %env7585825 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591404 = getelementptr inbounds i64, i64* %envptr7591403, i64 6            ; &envptr7591403[6]
  %shD$_37foldl = load i64, i64* %envptr7591404, align 8                             ; load; *envptr7591404
  %envptr7591405 = inttoptr i64 %env7585825 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591406 = getelementptr inbounds i64, i64* %envptr7591405, i64 5            ; &envptr7591405[5]
  %cont7581395 = load i64, i64* %envptr7591406, align 8                              ; load; *envptr7591406
  %envptr7591407 = inttoptr i64 %env7585825 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591408 = getelementptr inbounds i64, i64* %envptr7591407, i64 4            ; &envptr7591407[4]
  %G7d$lsts = load i64, i64* %envptr7591408, align 8                                 ; load; *envptr7591408
  %envptr7591409 = inttoptr i64 %env7585825 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591410 = getelementptr inbounds i64, i64* %envptr7591409, i64 3            ; &envptr7591409[3]
  %c98$acc = load i64, i64* %envptr7591410, align 8                                  ; load; *envptr7591410
  %envptr7591411 = inttoptr i64 %env7585825 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591412 = getelementptr inbounds i64, i64* %envptr7591411, i64 2            ; &envptr7591411[2]
  %dEj$_37map1 = load i64, i64* %envptr7591412, align 8                              ; load; *envptr7591412
  %envptr7591413 = inttoptr i64 %env7585825 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591414 = getelementptr inbounds i64, i64* %envptr7591413, i64 1            ; &envptr7591413[1]
  %zF0$_37foldr = load i64, i64* %envptr7591414, align 8                             ; load; *envptr7591414
  %_957581399 = call i64 @prim_car(i64 %rvp7585300)                                  ; call prim_car
  %rvp7585299 = call i64 @prim_cdr(i64 %rvp7585300)                                  ; call prim_cdr
  %a7581010 = call i64 @prim_car(i64 %rvp7585299)                                    ; call prim_car
  %na7585244 = call i64 @prim_cdr(i64 %rvp7585299)                                   ; call prim_cdr
  %cmp7591415 = icmp eq i64 %a7581010, 15                                            ; false?
  br i1 %cmp7591415, label %else7591417, label %then7591416                          ; if

then7591416:
  %arg7583246 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585247 = add i64 0, 0                                                         ; quoted ()
  %rva7585246 = call i64 @prim_cons(i64 %c98$acc, i64 %rva7585247)                   ; call prim_cons
  %rva7585245 = call i64 @prim_cons(i64 %arg7583246, i64 %rva7585246)                ; call prim_cons
  %cloptr7591418 = inttoptr i64 %cont7581395 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591419 = getelementptr inbounds i64, i64* %cloptr7591418, i64 0             ; &cloptr7591418[0]
  %f7591421 = load i64, i64* %i0ptr7591419, align 8                                  ; load; *i0ptr7591419
  %fptr7591420 = inttoptr i64 %f7591421 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591420(i64 %cont7581395, i64 %rva7585245)          ; tail call
  ret void

else7591417:
  %cloptr7591422 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7591424 = getelementptr inbounds i64, i64* %cloptr7591422, i64 1              ; &eptr7591424[1]
  %eptr7591425 = getelementptr inbounds i64, i64* %cloptr7591422, i64 2              ; &eptr7591425[2]
  %eptr7591426 = getelementptr inbounds i64, i64* %cloptr7591422, i64 3              ; &eptr7591426[3]
  %eptr7591427 = getelementptr inbounds i64, i64* %cloptr7591422, i64 4              ; &eptr7591427[4]
  %eptr7591428 = getelementptr inbounds i64, i64* %cloptr7591422, i64 5              ; &eptr7591428[5]
  %eptr7591429 = getelementptr inbounds i64, i64* %cloptr7591422, i64 6              ; &eptr7591429[6]
  %eptr7591430 = getelementptr inbounds i64, i64* %cloptr7591422, i64 7              ; &eptr7591430[7]
  store i64 %zF0$_37foldr, i64* %eptr7591424                                         ; *eptr7591424 = %zF0$_37foldr
  store i64 %dEj$_37map1, i64* %eptr7591425                                          ; *eptr7591425 = %dEj$_37map1
  store i64 %c98$acc, i64* %eptr7591426                                              ; *eptr7591426 = %c98$acc
  store i64 %G7d$lsts, i64* %eptr7591427                                             ; *eptr7591427 = %G7d$lsts
  store i64 %cont7581395, i64* %eptr7591428                                          ; *eptr7591428 = %cont7581395
  store i64 %shD$_37foldl, i64* %eptr7591429                                         ; *eptr7591429 = %shD$_37foldl
  store i64 %zhL$f, i64* %eptr7591430                                                ; *eptr7591430 = %zhL$f
  %eptr7591423 = getelementptr inbounds i64, i64* %cloptr7591422, i64 0              ; &cloptr7591422[0]
  %f7591431 = ptrtoint void(i64,i64)* @lam7585822 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591431, i64* %eptr7591423                                             ; store fptr
  %arg7583250 = ptrtoint i64* %cloptr7591422 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591432 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591433 = getelementptr inbounds i64, i64* %cloptr7591432, i64 0              ; &cloptr7591432[0]
  %f7591434 = ptrtoint void(i64,i64)* @lam7585803 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591434, i64* %eptr7591433                                             ; store fptr
  %arg7583249 = ptrtoint i64* %cloptr7591432 to i64                                  ; closure cast; i64* -> i64
  %rva7585298 = add i64 0, 0                                                         ; quoted ()
  %rva7585297 = call i64 @prim_cons(i64 %G7d$lsts, i64 %rva7585298)                  ; call prim_cons
  %rva7585296 = call i64 @prim_cons(i64 %arg7583249, i64 %rva7585297)                ; call prim_cons
  %rva7585295 = call i64 @prim_cons(i64 %arg7583250, i64 %rva7585296)                ; call prim_cons
  %cloptr7591435 = inttoptr i64 %dEj$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591436 = getelementptr inbounds i64, i64* %cloptr7591435, i64 0             ; &cloptr7591435[0]
  %f7591438 = load i64, i64* %i0ptr7591436, align 8                                  ; load; *i0ptr7591436
  %fptr7591437 = inttoptr i64 %f7591438 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591437(i64 %dEj$_37map1, i64 %rva7585295)          ; tail call
  ret void
}


define void @lam7585822(i64 %env7585823, i64 %rvp7585287) {
  %envptr7591439 = inttoptr i64 %env7585823 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591440 = getelementptr inbounds i64, i64* %envptr7591439, i64 7            ; &envptr7591439[7]
  %zhL$f = load i64, i64* %envptr7591440, align 8                                    ; load; *envptr7591440
  %envptr7591441 = inttoptr i64 %env7585823 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591442 = getelementptr inbounds i64, i64* %envptr7591441, i64 6            ; &envptr7591441[6]
  %shD$_37foldl = load i64, i64* %envptr7591442, align 8                             ; load; *envptr7591442
  %envptr7591443 = inttoptr i64 %env7585823 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591444 = getelementptr inbounds i64, i64* %envptr7591443, i64 5            ; &envptr7591443[5]
  %cont7581395 = load i64, i64* %envptr7591444, align 8                              ; load; *envptr7591444
  %envptr7591445 = inttoptr i64 %env7585823 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591446 = getelementptr inbounds i64, i64* %envptr7591445, i64 4            ; &envptr7591445[4]
  %G7d$lsts = load i64, i64* %envptr7591446, align 8                                 ; load; *envptr7591446
  %envptr7591447 = inttoptr i64 %env7585823 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591448 = getelementptr inbounds i64, i64* %envptr7591447, i64 3            ; &envptr7591447[3]
  %c98$acc = load i64, i64* %envptr7591448, align 8                                  ; load; *envptr7591448
  %envptr7591449 = inttoptr i64 %env7585823 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591450 = getelementptr inbounds i64, i64* %envptr7591449, i64 2            ; &envptr7591449[2]
  %dEj$_37map1 = load i64, i64* %envptr7591450, align 8                              ; load; *envptr7591450
  %envptr7591451 = inttoptr i64 %env7585823 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591452 = getelementptr inbounds i64, i64* %envptr7591451, i64 1            ; &envptr7591451[1]
  %zF0$_37foldr = load i64, i64* %envptr7591452, align 8                             ; load; *envptr7591452
  %_957581400 = call i64 @prim_car(i64 %rvp7585287)                                  ; call prim_car
  %rvp7585286 = call i64 @prim_cdr(i64 %rvp7585287)                                  ; call prim_cdr
  %Scm$lsts_43 = call i64 @prim_car(i64 %rvp7585286)                                 ; call prim_car
  %na7585249 = call i64 @prim_cdr(i64 %rvp7585286)                                   ; call prim_cdr
  %cloptr7591453 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7591455 = getelementptr inbounds i64, i64* %cloptr7591453, i64 1              ; &eptr7591455[1]
  %eptr7591456 = getelementptr inbounds i64, i64* %cloptr7591453, i64 2              ; &eptr7591456[2]
  %eptr7591457 = getelementptr inbounds i64, i64* %cloptr7591453, i64 3              ; &eptr7591457[3]
  %eptr7591458 = getelementptr inbounds i64, i64* %cloptr7591453, i64 4              ; &eptr7591458[4]
  %eptr7591459 = getelementptr inbounds i64, i64* %cloptr7591453, i64 5              ; &eptr7591459[5]
  %eptr7591460 = getelementptr inbounds i64, i64* %cloptr7591453, i64 6              ; &eptr7591460[6]
  store i64 %Scm$lsts_43, i64* %eptr7591455                                          ; *eptr7591455 = %Scm$lsts_43
  store i64 %zF0$_37foldr, i64* %eptr7591456                                         ; *eptr7591456 = %zF0$_37foldr
  store i64 %c98$acc, i64* %eptr7591457                                              ; *eptr7591457 = %c98$acc
  store i64 %cont7581395, i64* %eptr7591458                                          ; *eptr7591458 = %cont7581395
  store i64 %shD$_37foldl, i64* %eptr7591459                                         ; *eptr7591459 = %shD$_37foldl
  store i64 %zhL$f, i64* %eptr7591460                                                ; *eptr7591460 = %zhL$f
  %eptr7591454 = getelementptr inbounds i64, i64* %cloptr7591453, i64 0              ; &cloptr7591453[0]
  %f7591461 = ptrtoint void(i64,i64)* @lam7585820 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591461, i64* %eptr7591454                                             ; store fptr
  %arg7583254 = ptrtoint i64* %cloptr7591453 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591462 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591463 = getelementptr inbounds i64, i64* %cloptr7591462, i64 0              ; &cloptr7591462[0]
  %f7591464 = ptrtoint void(i64,i64)* @lam7585808 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591464, i64* %eptr7591463                                             ; store fptr
  %arg7583253 = ptrtoint i64* %cloptr7591462 to i64                                  ; closure cast; i64* -> i64
  %rva7585285 = add i64 0, 0                                                         ; quoted ()
  %rva7585284 = call i64 @prim_cons(i64 %G7d$lsts, i64 %rva7585285)                  ; call prim_cons
  %rva7585283 = call i64 @prim_cons(i64 %arg7583253, i64 %rva7585284)                ; call prim_cons
  %rva7585282 = call i64 @prim_cons(i64 %arg7583254, i64 %rva7585283)                ; call prim_cons
  %cloptr7591465 = inttoptr i64 %dEj$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591466 = getelementptr inbounds i64, i64* %cloptr7591465, i64 0             ; &cloptr7591465[0]
  %f7591468 = load i64, i64* %i0ptr7591466, align 8                                  ; load; *i0ptr7591466
  %fptr7591467 = inttoptr i64 %f7591468 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591467(i64 %dEj$_37map1, i64 %rva7585282)          ; tail call
  ret void
}


define void @lam7585820(i64 %env7585821, i64 %rvp7585274) {
  %envptr7591469 = inttoptr i64 %env7585821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591470 = getelementptr inbounds i64, i64* %envptr7591469, i64 6            ; &envptr7591469[6]
  %zhL$f = load i64, i64* %envptr7591470, align 8                                    ; load; *envptr7591470
  %envptr7591471 = inttoptr i64 %env7585821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591472 = getelementptr inbounds i64, i64* %envptr7591471, i64 5            ; &envptr7591471[5]
  %shD$_37foldl = load i64, i64* %envptr7591472, align 8                             ; load; *envptr7591472
  %envptr7591473 = inttoptr i64 %env7585821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591474 = getelementptr inbounds i64, i64* %envptr7591473, i64 4            ; &envptr7591473[4]
  %cont7581395 = load i64, i64* %envptr7591474, align 8                              ; load; *envptr7591474
  %envptr7591475 = inttoptr i64 %env7585821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591476 = getelementptr inbounds i64, i64* %envptr7591475, i64 3            ; &envptr7591475[3]
  %c98$acc = load i64, i64* %envptr7591476, align 8                                  ; load; *envptr7591476
  %envptr7591477 = inttoptr i64 %env7585821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591478 = getelementptr inbounds i64, i64* %envptr7591477, i64 2            ; &envptr7591477[2]
  %zF0$_37foldr = load i64, i64* %envptr7591478, align 8                             ; load; *envptr7591478
  %envptr7591479 = inttoptr i64 %env7585821 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591480 = getelementptr inbounds i64, i64* %envptr7591479, i64 1            ; &envptr7591479[1]
  %Scm$lsts_43 = load i64, i64* %envptr7591480, align 8                              ; load; *envptr7591480
  %_957581401 = call i64 @prim_car(i64 %rvp7585274)                                  ; call prim_car
  %rvp7585273 = call i64 @prim_cdr(i64 %rvp7585274)                                  ; call prim_cdr
  %BgG$vs = call i64 @prim_car(i64 %rvp7585273)                                      ; call prim_car
  %na7585251 = call i64 @prim_cdr(i64 %rvp7585273)                                   ; call prim_cdr
  %arg7583256 = add i64 0, 0                                                         ; quoted ()
  %a7581011 = call i64 @prim_cons(i64 %c98$acc, i64 %arg7583256)                     ; call prim_cons
  %cloptr7591481 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7591483 = getelementptr inbounds i64, i64* %cloptr7591481, i64 1              ; &eptr7591483[1]
  %eptr7591484 = getelementptr inbounds i64, i64* %cloptr7591481, i64 2              ; &eptr7591484[2]
  %eptr7591485 = getelementptr inbounds i64, i64* %cloptr7591481, i64 3              ; &eptr7591485[3]
  %eptr7591486 = getelementptr inbounds i64, i64* %cloptr7591481, i64 4              ; &eptr7591486[4]
  store i64 %Scm$lsts_43, i64* %eptr7591483                                          ; *eptr7591483 = %Scm$lsts_43
  store i64 %cont7581395, i64* %eptr7591484                                          ; *eptr7591484 = %cont7581395
  store i64 %shD$_37foldl, i64* %eptr7591485                                         ; *eptr7591485 = %shD$_37foldl
  store i64 %zhL$f, i64* %eptr7591486                                                ; *eptr7591486 = %zhL$f
  %eptr7591482 = getelementptr inbounds i64, i64* %cloptr7591481, i64 0              ; &cloptr7591481[0]
  %f7591487 = ptrtoint void(i64,i64)* @lam7585817 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591487, i64* %eptr7591482                                             ; store fptr
  %arg7583261 = ptrtoint i64* %cloptr7591481 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591488 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591489 = getelementptr inbounds i64, i64* %cloptr7591488, i64 0              ; &cloptr7591488[0]
  %f7591490 = ptrtoint void(i64,i64)* @lam7585813 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591490, i64* %eptr7591489                                             ; store fptr
  %arg7583260 = ptrtoint i64* %cloptr7591488 to i64                                  ; closure cast; i64* -> i64
  %rva7585272 = add i64 0, 0                                                         ; quoted ()
  %rva7585271 = call i64 @prim_cons(i64 %BgG$vs, i64 %rva7585272)                    ; call prim_cons
  %rva7585270 = call i64 @prim_cons(i64 %a7581011, i64 %rva7585271)                  ; call prim_cons
  %rva7585269 = call i64 @prim_cons(i64 %arg7583260, i64 %rva7585270)                ; call prim_cons
  %rva7585268 = call i64 @prim_cons(i64 %arg7583261, i64 %rva7585269)                ; call prim_cons
  %cloptr7591491 = inttoptr i64 %zF0$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr7591492 = getelementptr inbounds i64, i64* %cloptr7591491, i64 0             ; &cloptr7591491[0]
  %f7591494 = load i64, i64* %i0ptr7591492, align 8                                  ; load; *i0ptr7591492
  %fptr7591493 = inttoptr i64 %f7591494 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591493(i64 %zF0$_37foldr, i64 %rva7585268)         ; tail call
  ret void
}


define void @lam7585817(i64 %env7585818, i64 %rvp7585259) {
  %envptr7591495 = inttoptr i64 %env7585818 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591496 = getelementptr inbounds i64, i64* %envptr7591495, i64 4            ; &envptr7591495[4]
  %zhL$f = load i64, i64* %envptr7591496, align 8                                    ; load; *envptr7591496
  %envptr7591497 = inttoptr i64 %env7585818 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591498 = getelementptr inbounds i64, i64* %envptr7591497, i64 3            ; &envptr7591497[3]
  %shD$_37foldl = load i64, i64* %envptr7591498, align 8                             ; load; *envptr7591498
  %envptr7591499 = inttoptr i64 %env7585818 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591500 = getelementptr inbounds i64, i64* %envptr7591499, i64 2            ; &envptr7591499[2]
  %cont7581395 = load i64, i64* %envptr7591500, align 8                              ; load; *envptr7591500
  %envptr7591501 = inttoptr i64 %env7585818 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591502 = getelementptr inbounds i64, i64* %envptr7591501, i64 1            ; &envptr7591501[1]
  %Scm$lsts_43 = load i64, i64* %envptr7591502, align 8                              ; load; *envptr7591502
  %_957581404 = call i64 @prim_car(i64 %rvp7585259)                                  ; call prim_car
  %rvp7585258 = call i64 @prim_cdr(i64 %rvp7585259)                                  ; call prim_cdr
  %a7581012 = call i64 @prim_car(i64 %rvp7585258)                                    ; call prim_car
  %na7585253 = call i64 @prim_cdr(i64 %rvp7585258)                                   ; call prim_cdr
  %cloptr7591503 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7591505 = getelementptr inbounds i64, i64* %cloptr7591503, i64 1              ; &eptr7591505[1]
  %eptr7591506 = getelementptr inbounds i64, i64* %cloptr7591503, i64 2              ; &eptr7591506[2]
  %eptr7591507 = getelementptr inbounds i64, i64* %cloptr7591503, i64 3              ; &eptr7591507[3]
  %eptr7591508 = getelementptr inbounds i64, i64* %cloptr7591503, i64 4              ; &eptr7591508[4]
  store i64 %Scm$lsts_43, i64* %eptr7591505                                          ; *eptr7591505 = %Scm$lsts_43
  store i64 %cont7581395, i64* %eptr7591506                                          ; *eptr7591506 = %cont7581395
  store i64 %shD$_37foldl, i64* %eptr7591507                                         ; *eptr7591507 = %shD$_37foldl
  store i64 %zhL$f, i64* %eptr7591508                                                ; *eptr7591508 = %zhL$f
  %eptr7591504 = getelementptr inbounds i64, i64* %cloptr7591503, i64 0              ; &cloptr7591503[0]
  %f7591509 = ptrtoint void(i64,i64)* @lam7585815 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591509, i64* %eptr7591504                                             ; store fptr
  %arg7583264 = ptrtoint i64* %cloptr7591503 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst7581405 = call i64 @prim_cons(i64 %arg7583264, i64 %a7581012)            ; call prim_cons
  %cloptr7591510 = inttoptr i64 %zhL$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7591511 = getelementptr inbounds i64, i64* %cloptr7591510, i64 0             ; &cloptr7591510[0]
  %f7591513 = load i64, i64* %i0ptr7591511, align 8                                  ; load; *i0ptr7591511
  %fptr7591512 = inttoptr i64 %f7591513 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591512(i64 %zhL$f, i64 %cps_45lst7581405)          ; tail call
  ret void
}


define void @lam7585815(i64 %env7585816, i64 %rvp7585257) {
  %envptr7591514 = inttoptr i64 %env7585816 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591515 = getelementptr inbounds i64, i64* %envptr7591514, i64 4            ; &envptr7591514[4]
  %zhL$f = load i64, i64* %envptr7591515, align 8                                    ; load; *envptr7591515
  %envptr7591516 = inttoptr i64 %env7585816 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591517 = getelementptr inbounds i64, i64* %envptr7591516, i64 3            ; &envptr7591516[3]
  %shD$_37foldl = load i64, i64* %envptr7591517, align 8                             ; load; *envptr7591517
  %envptr7591518 = inttoptr i64 %env7585816 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591519 = getelementptr inbounds i64, i64* %envptr7591518, i64 2            ; &envptr7591518[2]
  %cont7581395 = load i64, i64* %envptr7591519, align 8                              ; load; *envptr7591519
  %envptr7591520 = inttoptr i64 %env7585816 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591521 = getelementptr inbounds i64, i64* %envptr7591520, i64 1            ; &envptr7591520[1]
  %Scm$lsts_43 = load i64, i64* %envptr7591521, align 8                              ; load; *envptr7591521
  %_957581402 = call i64 @prim_car(i64 %rvp7585257)                                  ; call prim_car
  %rvp7585256 = call i64 @prim_cdr(i64 %rvp7585257)                                  ; call prim_cdr
  %J4R$acc_43 = call i64 @prim_car(i64 %rvp7585256)                                  ; call prim_car
  %na7585255 = call i64 @prim_cdr(i64 %rvp7585256)                                   ; call prim_cdr
  %a7581013 = call i64 @prim_cons(i64 %J4R$acc_43, i64 %Scm$lsts_43)                 ; call prim_cons
  %a7581014 = call i64 @prim_cons(i64 %zhL$f, i64 %a7581013)                         ; call prim_cons
  %cps_45lst7581403 = call i64 @prim_cons(i64 %cont7581395, i64 %a7581014)           ; call prim_cons
  %cloptr7591522 = inttoptr i64 %shD$_37foldl to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr7591523 = getelementptr inbounds i64, i64* %cloptr7591522, i64 0             ; &cloptr7591522[0]
  %f7591525 = load i64, i64* %i0ptr7591523, align 8                                  ; load; *i0ptr7591523
  %fptr7591524 = inttoptr i64 %f7591525 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591524(i64 %shD$_37foldl, i64 %cps_45lst7581403)   ; tail call
  ret void
}


define void @lam7585813(i64 %env7585814, i64 %rvp7585267) {
  %cont7581406 = call i64 @prim_car(i64 %rvp7585267)                                 ; call prim_car
  %rvp7585266 = call i64 @prim_cdr(i64 %rvp7585267)                                  ; call prim_cdr
  %BMu$a = call i64 @prim_car(i64 %rvp7585266)                                       ; call prim_car
  %rvp7585265 = call i64 @prim_cdr(i64 %rvp7585266)                                  ; call prim_cdr
  %lq2$b = call i64 @prim_car(i64 %rvp7585265)                                       ; call prim_car
  %na7585261 = call i64 @prim_cdr(i64 %rvp7585265)                                   ; call prim_cdr
  %retprim7581407 = call i64 @prim_cons(i64 %BMu$a, i64 %lq2$b)                      ; call prim_cons
  %arg7583274 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585264 = add i64 0, 0                                                         ; quoted ()
  %rva7585263 = call i64 @prim_cons(i64 %retprim7581407, i64 %rva7585264)            ; call prim_cons
  %rva7585262 = call i64 @prim_cons(i64 %arg7583274, i64 %rva7585263)                ; call prim_cons
  %cloptr7591526 = inttoptr i64 %cont7581406 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591527 = getelementptr inbounds i64, i64* %cloptr7591526, i64 0             ; &cloptr7591526[0]
  %f7591529 = load i64, i64* %i0ptr7591527, align 8                                  ; load; *i0ptr7591527
  %fptr7591528 = inttoptr i64 %f7591529 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591528(i64 %cont7581406, i64 %rva7585262)          ; tail call
  ret void
}


define void @lam7585808(i64 %env7585809, i64 %rvp7585281) {
  %cont7581408 = call i64 @prim_car(i64 %rvp7585281)                                 ; call prim_car
  %rvp7585280 = call i64 @prim_cdr(i64 %rvp7585281)                                  ; call prim_cdr
  %azV$x = call i64 @prim_car(i64 %rvp7585280)                                       ; call prim_car
  %na7585276 = call i64 @prim_cdr(i64 %rvp7585280)                                   ; call prim_cdr
  %retprim7581409 = call i64 @prim_car(i64 %azV$x)                                   ; call prim_car
  %arg7583278 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585279 = add i64 0, 0                                                         ; quoted ()
  %rva7585278 = call i64 @prim_cons(i64 %retprim7581409, i64 %rva7585279)            ; call prim_cons
  %rva7585277 = call i64 @prim_cons(i64 %arg7583278, i64 %rva7585278)                ; call prim_cons
  %cloptr7591530 = inttoptr i64 %cont7581408 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591531 = getelementptr inbounds i64, i64* %cloptr7591530, i64 0             ; &cloptr7591530[0]
  %f7591533 = load i64, i64* %i0ptr7591531, align 8                                  ; load; *i0ptr7591531
  %fptr7591532 = inttoptr i64 %f7591533 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591532(i64 %cont7581408, i64 %rva7585277)          ; tail call
  ret void
}


define void @lam7585803(i64 %env7585804, i64 %rvp7585294) {
  %cont7581410 = call i64 @prim_car(i64 %rvp7585294)                                 ; call prim_car
  %rvp7585293 = call i64 @prim_cdr(i64 %rvp7585294)                                  ; call prim_cdr
  %xJP$x = call i64 @prim_car(i64 %rvp7585293)                                       ; call prim_car
  %na7585289 = call i64 @prim_cdr(i64 %rvp7585293)                                   ; call prim_cdr
  %retprim7581411 = call i64 @prim_cdr(i64 %xJP$x)                                   ; call prim_cdr
  %arg7583282 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585292 = add i64 0, 0                                                         ; quoted ()
  %rva7585291 = call i64 @prim_cons(i64 %retprim7581411, i64 %rva7585292)            ; call prim_cons
  %rva7585290 = call i64 @prim_cons(i64 %arg7583282, i64 %rva7585291)                ; call prim_cons
  %cloptr7591534 = inttoptr i64 %cont7581410 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591535 = getelementptr inbounds i64, i64* %cloptr7591534, i64 0             ; &cloptr7591534[0]
  %f7591537 = load i64, i64* %i0ptr7591535, align 8                                  ; load; *i0ptr7591535
  %fptr7591536 = inttoptr i64 %f7591537 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591536(i64 %cont7581410, i64 %rva7585290)          ; tail call
  ret void
}


define void @lam7585796(i64 %env7585797, i64 %rvp7585311) {
  %cont7581412 = call i64 @prim_car(i64 %rvp7585311)                                 ; call prim_car
  %rvp7585310 = call i64 @prim_cdr(i64 %rvp7585311)                                  ; call prim_cdr
  %nFr$lst = call i64 @prim_car(i64 %rvp7585310)                                     ; call prim_car
  %rvp7585309 = call i64 @prim_cdr(i64 %rvp7585310)                                  ; call prim_cdr
  %Dwc$b = call i64 @prim_car(i64 %rvp7585309)                                       ; call prim_car
  %na7585302 = call i64 @prim_cdr(i64 %rvp7585309)                                   ; call prim_cdr
  %cmp7591538 = icmp eq i64 %Dwc$b, 15                                               ; false?
  br i1 %cmp7591538, label %else7591540, label %then7591539                          ; if

then7591539:
  %arg7583285 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585305 = add i64 0, 0                                                         ; quoted ()
  %rva7585304 = call i64 @prim_cons(i64 %Dwc$b, i64 %rva7585305)                     ; call prim_cons
  %rva7585303 = call i64 @prim_cons(i64 %arg7583285, i64 %rva7585304)                ; call prim_cons
  %cloptr7591541 = inttoptr i64 %cont7581412 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591542 = getelementptr inbounds i64, i64* %cloptr7591541, i64 0             ; &cloptr7591541[0]
  %f7591544 = load i64, i64* %i0ptr7591542, align 8                                  ; load; *i0ptr7591542
  %fptr7591543 = inttoptr i64 %f7591544 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591543(i64 %cont7581412, i64 %rva7585303)          ; tail call
  ret void

else7591540:
  %retprim7581413 = call i64 @prim_null_63(i64 %nFr$lst)                             ; call prim_null_63
  %arg7583289 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585308 = add i64 0, 0                                                         ; quoted ()
  %rva7585307 = call i64 @prim_cons(i64 %retprim7581413, i64 %rva7585308)            ; call prim_cons
  %rva7585306 = call i64 @prim_cons(i64 %arg7583289, i64 %rva7585307)                ; call prim_cons
  %cloptr7591545 = inttoptr i64 %cont7581412 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591546 = getelementptr inbounds i64, i64* %cloptr7591545, i64 0             ; &cloptr7591545[0]
  %f7591548 = load i64, i64* %i0ptr7591546, align 8                                  ; load; *i0ptr7591546
  %fptr7591547 = inttoptr i64 %f7591548 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591547(i64 %cont7581412, i64 %rva7585306)          ; tail call
  ret void
}


define void @lam7585782(i64 %env7585783, i64 %rvp7585431) {
  %envptr7591549 = inttoptr i64 %env7585783 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591550 = getelementptr inbounds i64, i64* %envptr7591549, i64 2            ; &envptr7591549[2]
  %be3$_37foldr1 = load i64, i64* %envptr7591550, align 8                            ; load; *envptr7591550
  %envptr7591551 = inttoptr i64 %env7585783 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591552 = getelementptr inbounds i64, i64* %envptr7591551, i64 1            ; &envptr7591551[1]
  %hXm$_37map1 = load i64, i64* %envptr7591552, align 8                              ; load; *envptr7591552
  %cont7581416 = call i64 @prim_car(i64 %rvp7585431)                                 ; call prim_car
  %rvp7585430 = call i64 @prim_cdr(i64 %rvp7585431)                                  ; call prim_cdr
  %QTD$_37foldr = call i64 @prim_car(i64 %rvp7585430)                                ; call prim_car
  %na7585338 = call i64 @prim_cdr(i64 %rvp7585430)                                   ; call prim_cdr
  %arg7583292 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7591553 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7591555 = getelementptr inbounds i64, i64* %cloptr7591553, i64 1              ; &eptr7591555[1]
  %eptr7591556 = getelementptr inbounds i64, i64* %cloptr7591553, i64 2              ; &eptr7591556[2]
  %eptr7591557 = getelementptr inbounds i64, i64* %cloptr7591553, i64 3              ; &eptr7591557[3]
  store i64 %hXm$_37map1, i64* %eptr7591555                                          ; *eptr7591555 = %hXm$_37map1
  store i64 %QTD$_37foldr, i64* %eptr7591556                                         ; *eptr7591556 = %QTD$_37foldr
  store i64 %be3$_37foldr1, i64* %eptr7591557                                        ; *eptr7591557 = %be3$_37foldr1
  %eptr7591554 = getelementptr inbounds i64, i64* %cloptr7591553, i64 0              ; &cloptr7591553[0]
  %f7591558 = ptrtoint void(i64,i64)* @lam7585779 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591558, i64* %eptr7591554                                             ; store fptr
  %arg7583291 = ptrtoint i64* %cloptr7591553 to i64                                  ; closure cast; i64* -> i64
  %rva7585429 = add i64 0, 0                                                         ; quoted ()
  %rva7585428 = call i64 @prim_cons(i64 %arg7583291, i64 %rva7585429)                ; call prim_cons
  %rva7585427 = call i64 @prim_cons(i64 %arg7583292, i64 %rva7585428)                ; call prim_cons
  %cloptr7591559 = inttoptr i64 %cont7581416 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591560 = getelementptr inbounds i64, i64* %cloptr7591559, i64 0             ; &cloptr7591559[0]
  %f7591562 = load i64, i64* %i0ptr7591560, align 8                                  ; load; *i0ptr7591560
  %fptr7591561 = inttoptr i64 %f7591562 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591561(i64 %cont7581416, i64 %rva7585427)          ; tail call
  ret void
}


define void @lam7585779(i64 %env7585780, i64 %J9V$args7581418) {
  %envptr7591563 = inttoptr i64 %env7585780 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591564 = getelementptr inbounds i64, i64* %envptr7591563, i64 3            ; &envptr7591563[3]
  %be3$_37foldr1 = load i64, i64* %envptr7591564, align 8                            ; load; *envptr7591564
  %envptr7591565 = inttoptr i64 %env7585780 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591566 = getelementptr inbounds i64, i64* %envptr7591565, i64 2            ; &envptr7591565[2]
  %QTD$_37foldr = load i64, i64* %envptr7591566, align 8                             ; load; *envptr7591566
  %envptr7591567 = inttoptr i64 %env7585780 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591568 = getelementptr inbounds i64, i64* %envptr7591567, i64 1            ; &envptr7591567[1]
  %hXm$_37map1 = load i64, i64* %envptr7591568, align 8                              ; load; *envptr7591568
  %cont7581417 = call i64 @prim_car(i64 %J9V$args7581418)                            ; call prim_car
  %J9V$args = call i64 @prim_cdr(i64 %J9V$args7581418)                               ; call prim_cdr
  %fZf$f = call i64 @prim_car(i64 %J9V$args)                                         ; call prim_car
  %a7580994 = call i64 @prim_cdr(i64 %J9V$args)                                      ; call prim_cdr
  %retprim7581437 = call i64 @prim_car(i64 %a7580994)                                ; call prim_car
  %cloptr7591569 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7591571 = getelementptr inbounds i64, i64* %cloptr7591569, i64 1              ; &eptr7591571[1]
  %eptr7591572 = getelementptr inbounds i64, i64* %cloptr7591569, i64 2              ; &eptr7591572[2]
  %eptr7591573 = getelementptr inbounds i64, i64* %cloptr7591569, i64 3              ; &eptr7591573[3]
  %eptr7591574 = getelementptr inbounds i64, i64* %cloptr7591569, i64 4              ; &eptr7591574[4]
  %eptr7591575 = getelementptr inbounds i64, i64* %cloptr7591569, i64 5              ; &eptr7591575[5]
  %eptr7591576 = getelementptr inbounds i64, i64* %cloptr7591569, i64 6              ; &eptr7591576[6]
  store i64 %fZf$f, i64* %eptr7591571                                                ; *eptr7591571 = %fZf$f
  store i64 %cont7581417, i64* %eptr7591572                                          ; *eptr7591572 = %cont7581417
  store i64 %hXm$_37map1, i64* %eptr7591573                                          ; *eptr7591573 = %hXm$_37map1
  store i64 %J9V$args, i64* %eptr7591574                                             ; *eptr7591574 = %J9V$args
  store i64 %QTD$_37foldr, i64* %eptr7591575                                         ; *eptr7591575 = %QTD$_37foldr
  store i64 %be3$_37foldr1, i64* %eptr7591576                                        ; *eptr7591576 = %be3$_37foldr1
  %eptr7591570 = getelementptr inbounds i64, i64* %cloptr7591569, i64 0              ; &cloptr7591569[0]
  %f7591577 = ptrtoint void(i64,i64)* @lam7585777 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591577, i64* %eptr7591570                                             ; store fptr
  %arg7583301 = ptrtoint i64* %cloptr7591569 to i64                                  ; closure cast; i64* -> i64
  %arg7583300 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585426 = add i64 0, 0                                                         ; quoted ()
  %rva7585425 = call i64 @prim_cons(i64 %retprim7581437, i64 %rva7585426)            ; call prim_cons
  %rva7585424 = call i64 @prim_cons(i64 %arg7583300, i64 %rva7585425)                ; call prim_cons
  %cloptr7591578 = inttoptr i64 %arg7583301 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591579 = getelementptr inbounds i64, i64* %cloptr7591578, i64 0             ; &cloptr7591578[0]
  %f7591581 = load i64, i64* %i0ptr7591579, align 8                                  ; load; *i0ptr7591579
  %fptr7591580 = inttoptr i64 %f7591581 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591580(i64 %arg7583301, i64 %rva7585424)           ; tail call
  ret void
}


define void @lam7585777(i64 %env7585778, i64 %rvp7585423) {
  %envptr7591582 = inttoptr i64 %env7585778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591583 = getelementptr inbounds i64, i64* %envptr7591582, i64 6            ; &envptr7591582[6]
  %be3$_37foldr1 = load i64, i64* %envptr7591583, align 8                            ; load; *envptr7591583
  %envptr7591584 = inttoptr i64 %env7585778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591585 = getelementptr inbounds i64, i64* %envptr7591584, i64 5            ; &envptr7591584[5]
  %QTD$_37foldr = load i64, i64* %envptr7591585, align 8                             ; load; *envptr7591585
  %envptr7591586 = inttoptr i64 %env7585778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591587 = getelementptr inbounds i64, i64* %envptr7591586, i64 4            ; &envptr7591586[4]
  %J9V$args = load i64, i64* %envptr7591587, align 8                                 ; load; *envptr7591587
  %envptr7591588 = inttoptr i64 %env7585778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591589 = getelementptr inbounds i64, i64* %envptr7591588, i64 3            ; &envptr7591588[3]
  %hXm$_37map1 = load i64, i64* %envptr7591589, align 8                              ; load; *envptr7591589
  %envptr7591590 = inttoptr i64 %env7585778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591591 = getelementptr inbounds i64, i64* %envptr7591590, i64 2            ; &envptr7591590[2]
  %cont7581417 = load i64, i64* %envptr7591591, align 8                              ; load; *envptr7591591
  %envptr7591592 = inttoptr i64 %env7585778 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591593 = getelementptr inbounds i64, i64* %envptr7591592, i64 1            ; &envptr7591592[1]
  %fZf$f = load i64, i64* %envptr7591593, align 8                                    ; load; *envptr7591593
  %_957581419 = call i64 @prim_car(i64 %rvp7585423)                                  ; call prim_car
  %rvp7585422 = call i64 @prim_cdr(i64 %rvp7585423)                                  ; call prim_cdr
  %MfJ$acc = call i64 @prim_car(i64 %rvp7585422)                                     ; call prim_car
  %na7585340 = call i64 @prim_cdr(i64 %rvp7585422)                                   ; call prim_cdr
  %a7580995 = call i64 @prim_cdr(i64 %J9V$args)                                      ; call prim_cdr
  %retprim7581436 = call i64 @prim_cdr(i64 %a7580995)                                ; call prim_cdr
  %cloptr7591594 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7591596 = getelementptr inbounds i64, i64* %cloptr7591594, i64 1              ; &eptr7591596[1]
  %eptr7591597 = getelementptr inbounds i64, i64* %cloptr7591594, i64 2              ; &eptr7591597[2]
  %eptr7591598 = getelementptr inbounds i64, i64* %cloptr7591594, i64 3              ; &eptr7591598[3]
  %eptr7591599 = getelementptr inbounds i64, i64* %cloptr7591594, i64 4              ; &eptr7591599[4]
  %eptr7591600 = getelementptr inbounds i64, i64* %cloptr7591594, i64 5              ; &eptr7591600[5]
  %eptr7591601 = getelementptr inbounds i64, i64* %cloptr7591594, i64 6              ; &eptr7591601[6]
  store i64 %fZf$f, i64* %eptr7591596                                                ; *eptr7591596 = %fZf$f
  store i64 %cont7581417, i64* %eptr7591597                                          ; *eptr7591597 = %cont7581417
  store i64 %hXm$_37map1, i64* %eptr7591598                                          ; *eptr7591598 = %hXm$_37map1
  store i64 %MfJ$acc, i64* %eptr7591599                                              ; *eptr7591599 = %MfJ$acc
  store i64 %QTD$_37foldr, i64* %eptr7591600                                         ; *eptr7591600 = %QTD$_37foldr
  store i64 %be3$_37foldr1, i64* %eptr7591601                                        ; *eptr7591601 = %be3$_37foldr1
  %eptr7591595 = getelementptr inbounds i64, i64* %cloptr7591594, i64 0              ; &cloptr7591594[0]
  %f7591602 = ptrtoint void(i64,i64)* @lam7585775 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591602, i64* %eptr7591595                                             ; store fptr
  %arg7583306 = ptrtoint i64* %cloptr7591594 to i64                                  ; closure cast; i64* -> i64
  %arg7583305 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585421 = add i64 0, 0                                                         ; quoted ()
  %rva7585420 = call i64 @prim_cons(i64 %retprim7581436, i64 %rva7585421)            ; call prim_cons
  %rva7585419 = call i64 @prim_cons(i64 %arg7583305, i64 %rva7585420)                ; call prim_cons
  %cloptr7591603 = inttoptr i64 %arg7583306 to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591604 = getelementptr inbounds i64, i64* %cloptr7591603, i64 0             ; &cloptr7591603[0]
  %f7591606 = load i64, i64* %i0ptr7591604, align 8                                  ; load; *i0ptr7591604
  %fptr7591605 = inttoptr i64 %f7591606 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591605(i64 %arg7583306, i64 %rva7585419)           ; tail call
  ret void
}


define void @lam7585775(i64 %env7585776, i64 %rvp7585418) {
  %envptr7591607 = inttoptr i64 %env7585776 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591608 = getelementptr inbounds i64, i64* %envptr7591607, i64 6            ; &envptr7591607[6]
  %be3$_37foldr1 = load i64, i64* %envptr7591608, align 8                            ; load; *envptr7591608
  %envptr7591609 = inttoptr i64 %env7585776 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591610 = getelementptr inbounds i64, i64* %envptr7591609, i64 5            ; &envptr7591609[5]
  %QTD$_37foldr = load i64, i64* %envptr7591610, align 8                             ; load; *envptr7591610
  %envptr7591611 = inttoptr i64 %env7585776 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591612 = getelementptr inbounds i64, i64* %envptr7591611, i64 4            ; &envptr7591611[4]
  %MfJ$acc = load i64, i64* %envptr7591612, align 8                                  ; load; *envptr7591612
  %envptr7591613 = inttoptr i64 %env7585776 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591614 = getelementptr inbounds i64, i64* %envptr7591613, i64 3            ; &envptr7591613[3]
  %hXm$_37map1 = load i64, i64* %envptr7591614, align 8                              ; load; *envptr7591614
  %envptr7591615 = inttoptr i64 %env7585776 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591616 = getelementptr inbounds i64, i64* %envptr7591615, i64 2            ; &envptr7591615[2]
  %cont7581417 = load i64, i64* %envptr7591616, align 8                              ; load; *envptr7591616
  %envptr7591617 = inttoptr i64 %env7585776 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591618 = getelementptr inbounds i64, i64* %envptr7591617, i64 1            ; &envptr7591617[1]
  %fZf$f = load i64, i64* %envptr7591618, align 8                                    ; load; *envptr7591618
  %_957581420 = call i64 @prim_car(i64 %rvp7585418)                                  ; call prim_car
  %rvp7585417 = call i64 @prim_cdr(i64 %rvp7585418)                                  ; call prim_cdr
  %cb3$lsts = call i64 @prim_car(i64 %rvp7585417)                                    ; call prim_car
  %na7585342 = call i64 @prim_cdr(i64 %rvp7585417)                                   ; call prim_cdr
  %cloptr7591619 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7591621 = getelementptr inbounds i64, i64* %cloptr7591619, i64 1              ; &eptr7591621[1]
  %eptr7591622 = getelementptr inbounds i64, i64* %cloptr7591619, i64 2              ; &eptr7591622[2]
  %eptr7591623 = getelementptr inbounds i64, i64* %cloptr7591619, i64 3              ; &eptr7591623[3]
  %eptr7591624 = getelementptr inbounds i64, i64* %cloptr7591619, i64 4              ; &eptr7591624[4]
  %eptr7591625 = getelementptr inbounds i64, i64* %cloptr7591619, i64 5              ; &eptr7591625[5]
  %eptr7591626 = getelementptr inbounds i64, i64* %cloptr7591619, i64 6              ; &eptr7591626[6]
  %eptr7591627 = getelementptr inbounds i64, i64* %cloptr7591619, i64 7              ; &eptr7591627[7]
  store i64 %cb3$lsts, i64* %eptr7591621                                             ; *eptr7591621 = %cb3$lsts
  store i64 %fZf$f, i64* %eptr7591622                                                ; *eptr7591622 = %fZf$f
  store i64 %cont7581417, i64* %eptr7591623                                          ; *eptr7591623 = %cont7581417
  store i64 %hXm$_37map1, i64* %eptr7591624                                          ; *eptr7591624 = %hXm$_37map1
  store i64 %MfJ$acc, i64* %eptr7591625                                              ; *eptr7591625 = %MfJ$acc
  store i64 %QTD$_37foldr, i64* %eptr7591626                                         ; *eptr7591626 = %QTD$_37foldr
  store i64 %be3$_37foldr1, i64* %eptr7591627                                        ; *eptr7591627 = %be3$_37foldr1
  %eptr7591620 = getelementptr inbounds i64, i64* %cloptr7591619, i64 0              ; &cloptr7591619[0]
  %f7591628 = ptrtoint void(i64,i64)* @lam7585773 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591628, i64* %eptr7591620                                             ; store fptr
  %arg7583310 = ptrtoint i64* %cloptr7591619 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591629 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591630 = getelementptr inbounds i64, i64* %cloptr7591629, i64 0              ; &cloptr7591629[0]
  %f7591631 = ptrtoint void(i64,i64)* @lam7585745 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591631, i64* %eptr7591630                                             ; store fptr
  %arg7583309 = ptrtoint i64* %cloptr7591629 to i64                                  ; closure cast; i64* -> i64
  %arg7583308 = call i64 @const_init_false()                                         ; quoted #f
  %rva7585416 = add i64 0, 0                                                         ; quoted ()
  %rva7585415 = call i64 @prim_cons(i64 %cb3$lsts, i64 %rva7585416)                  ; call prim_cons
  %rva7585414 = call i64 @prim_cons(i64 %arg7583308, i64 %rva7585415)                ; call prim_cons
  %rva7585413 = call i64 @prim_cons(i64 %arg7583309, i64 %rva7585414)                ; call prim_cons
  %rva7585412 = call i64 @prim_cons(i64 %arg7583310, i64 %rva7585413)                ; call prim_cons
  %cloptr7591632 = inttoptr i64 %be3$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7591633 = getelementptr inbounds i64, i64* %cloptr7591632, i64 0             ; &cloptr7591632[0]
  %f7591635 = load i64, i64* %i0ptr7591633, align 8                                  ; load; *i0ptr7591633
  %fptr7591634 = inttoptr i64 %f7591635 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591634(i64 %be3$_37foldr1, i64 %rva7585412)        ; tail call
  ret void
}


define void @lam7585773(i64 %env7585774, i64 %rvp7585400) {
  %envptr7591636 = inttoptr i64 %env7585774 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591637 = getelementptr inbounds i64, i64* %envptr7591636, i64 7            ; &envptr7591636[7]
  %be3$_37foldr1 = load i64, i64* %envptr7591637, align 8                            ; load; *envptr7591637
  %envptr7591638 = inttoptr i64 %env7585774 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591639 = getelementptr inbounds i64, i64* %envptr7591638, i64 6            ; &envptr7591638[6]
  %QTD$_37foldr = load i64, i64* %envptr7591639, align 8                             ; load; *envptr7591639
  %envptr7591640 = inttoptr i64 %env7585774 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591641 = getelementptr inbounds i64, i64* %envptr7591640, i64 5            ; &envptr7591640[5]
  %MfJ$acc = load i64, i64* %envptr7591641, align 8                                  ; load; *envptr7591641
  %envptr7591642 = inttoptr i64 %env7585774 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591643 = getelementptr inbounds i64, i64* %envptr7591642, i64 4            ; &envptr7591642[4]
  %hXm$_37map1 = load i64, i64* %envptr7591643, align 8                              ; load; *envptr7591643
  %envptr7591644 = inttoptr i64 %env7585774 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591645 = getelementptr inbounds i64, i64* %envptr7591644, i64 3            ; &envptr7591644[3]
  %cont7581417 = load i64, i64* %envptr7591645, align 8                              ; load; *envptr7591645
  %envptr7591646 = inttoptr i64 %env7585774 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591647 = getelementptr inbounds i64, i64* %envptr7591646, i64 2            ; &envptr7591646[2]
  %fZf$f = load i64, i64* %envptr7591647, align 8                                    ; load; *envptr7591647
  %envptr7591648 = inttoptr i64 %env7585774 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591649 = getelementptr inbounds i64, i64* %envptr7591648, i64 1            ; &envptr7591648[1]
  %cb3$lsts = load i64, i64* %envptr7591649, align 8                                 ; load; *envptr7591649
  %_957581421 = call i64 @prim_car(i64 %rvp7585400)                                  ; call prim_car
  %rvp7585399 = call i64 @prim_cdr(i64 %rvp7585400)                                  ; call prim_cdr
  %a7580996 = call i64 @prim_car(i64 %rvp7585399)                                    ; call prim_car
  %na7585344 = call i64 @prim_cdr(i64 %rvp7585399)                                   ; call prim_cdr
  %cmp7591650 = icmp eq i64 %a7580996, 15                                            ; false?
  br i1 %cmp7591650, label %else7591652, label %then7591651                          ; if

then7591651:
  %arg7583313 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585347 = add i64 0, 0                                                         ; quoted ()
  %rva7585346 = call i64 @prim_cons(i64 %MfJ$acc, i64 %rva7585347)                   ; call prim_cons
  %rva7585345 = call i64 @prim_cons(i64 %arg7583313, i64 %rva7585346)                ; call prim_cons
  %cloptr7591653 = inttoptr i64 %cont7581417 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591654 = getelementptr inbounds i64, i64* %cloptr7591653, i64 0             ; &cloptr7591653[0]
  %f7591656 = load i64, i64* %i0ptr7591654, align 8                                  ; load; *i0ptr7591654
  %fptr7591655 = inttoptr i64 %f7591656 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591655(i64 %cont7581417, i64 %rva7585345)          ; tail call
  ret void

else7591652:
  %cloptr7591657 = call i64* @alloc(i64 64)                                          ; malloc
  %eptr7591659 = getelementptr inbounds i64, i64* %cloptr7591657, i64 1              ; &eptr7591659[1]
  %eptr7591660 = getelementptr inbounds i64, i64* %cloptr7591657, i64 2              ; &eptr7591660[2]
  %eptr7591661 = getelementptr inbounds i64, i64* %cloptr7591657, i64 3              ; &eptr7591661[3]
  %eptr7591662 = getelementptr inbounds i64, i64* %cloptr7591657, i64 4              ; &eptr7591662[4]
  %eptr7591663 = getelementptr inbounds i64, i64* %cloptr7591657, i64 5              ; &eptr7591663[5]
  %eptr7591664 = getelementptr inbounds i64, i64* %cloptr7591657, i64 6              ; &eptr7591664[6]
  %eptr7591665 = getelementptr inbounds i64, i64* %cloptr7591657, i64 7              ; &eptr7591665[7]
  store i64 %cb3$lsts, i64* %eptr7591659                                             ; *eptr7591659 = %cb3$lsts
  store i64 %fZf$f, i64* %eptr7591660                                                ; *eptr7591660 = %fZf$f
  store i64 %cont7581417, i64* %eptr7591661                                          ; *eptr7591661 = %cont7581417
  store i64 %hXm$_37map1, i64* %eptr7591662                                          ; *eptr7591662 = %hXm$_37map1
  store i64 %MfJ$acc, i64* %eptr7591663                                              ; *eptr7591663 = %MfJ$acc
  store i64 %QTD$_37foldr, i64* %eptr7591664                                         ; *eptr7591664 = %QTD$_37foldr
  store i64 %be3$_37foldr1, i64* %eptr7591665                                        ; *eptr7591665 = %be3$_37foldr1
  %eptr7591658 = getelementptr inbounds i64, i64* %cloptr7591657, i64 0              ; &cloptr7591657[0]
  %f7591666 = ptrtoint void(i64,i64)* @lam7585771 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591666, i64* %eptr7591658                                             ; store fptr
  %arg7583317 = ptrtoint i64* %cloptr7591657 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591667 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591668 = getelementptr inbounds i64, i64* %cloptr7591667, i64 0              ; &cloptr7591667[0]
  %f7591669 = ptrtoint void(i64,i64)* @lam7585752 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591669, i64* %eptr7591668                                             ; store fptr
  %arg7583316 = ptrtoint i64* %cloptr7591667 to i64                                  ; closure cast; i64* -> i64
  %rva7585398 = add i64 0, 0                                                         ; quoted ()
  %rva7585397 = call i64 @prim_cons(i64 %cb3$lsts, i64 %rva7585398)                  ; call prim_cons
  %rva7585396 = call i64 @prim_cons(i64 %arg7583316, i64 %rva7585397)                ; call prim_cons
  %rva7585395 = call i64 @prim_cons(i64 %arg7583317, i64 %rva7585396)                ; call prim_cons
  %cloptr7591670 = inttoptr i64 %hXm$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591671 = getelementptr inbounds i64, i64* %cloptr7591670, i64 0             ; &cloptr7591670[0]
  %f7591673 = load i64, i64* %i0ptr7591671, align 8                                  ; load; *i0ptr7591671
  %fptr7591672 = inttoptr i64 %f7591673 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591672(i64 %hXm$_37map1, i64 %rva7585395)          ; tail call
  ret void
}


define void @lam7585771(i64 %env7585772, i64 %rvp7585387) {
  %envptr7591674 = inttoptr i64 %env7585772 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591675 = getelementptr inbounds i64, i64* %envptr7591674, i64 7            ; &envptr7591674[7]
  %be3$_37foldr1 = load i64, i64* %envptr7591675, align 8                            ; load; *envptr7591675
  %envptr7591676 = inttoptr i64 %env7585772 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591677 = getelementptr inbounds i64, i64* %envptr7591676, i64 6            ; &envptr7591676[6]
  %QTD$_37foldr = load i64, i64* %envptr7591677, align 8                             ; load; *envptr7591677
  %envptr7591678 = inttoptr i64 %env7585772 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591679 = getelementptr inbounds i64, i64* %envptr7591678, i64 5            ; &envptr7591678[5]
  %MfJ$acc = load i64, i64* %envptr7591679, align 8                                  ; load; *envptr7591679
  %envptr7591680 = inttoptr i64 %env7585772 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591681 = getelementptr inbounds i64, i64* %envptr7591680, i64 4            ; &envptr7591680[4]
  %hXm$_37map1 = load i64, i64* %envptr7591681, align 8                              ; load; *envptr7591681
  %envptr7591682 = inttoptr i64 %env7585772 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591683 = getelementptr inbounds i64, i64* %envptr7591682, i64 3            ; &envptr7591682[3]
  %cont7581417 = load i64, i64* %envptr7591683, align 8                              ; load; *envptr7591683
  %envptr7591684 = inttoptr i64 %env7585772 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591685 = getelementptr inbounds i64, i64* %envptr7591684, i64 2            ; &envptr7591684[2]
  %fZf$f = load i64, i64* %envptr7591685, align 8                                    ; load; *envptr7591685
  %envptr7591686 = inttoptr i64 %env7585772 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591687 = getelementptr inbounds i64, i64* %envptr7591686, i64 1            ; &envptr7591686[1]
  %cb3$lsts = load i64, i64* %envptr7591687, align 8                                 ; load; *envptr7591687
  %_957581422 = call i64 @prim_car(i64 %rvp7585387)                                  ; call prim_car
  %rvp7585386 = call i64 @prim_cdr(i64 %rvp7585387)                                  ; call prim_cdr
  %Qiq$lsts_43 = call i64 @prim_car(i64 %rvp7585386)                                 ; call prim_car
  %na7585349 = call i64 @prim_cdr(i64 %rvp7585386)                                   ; call prim_cdr
  %cloptr7591688 = call i64* @alloc(i64 56)                                          ; malloc
  %eptr7591690 = getelementptr inbounds i64, i64* %cloptr7591688, i64 1              ; &eptr7591690[1]
  %eptr7591691 = getelementptr inbounds i64, i64* %cloptr7591688, i64 2              ; &eptr7591691[2]
  %eptr7591692 = getelementptr inbounds i64, i64* %cloptr7591688, i64 3              ; &eptr7591692[3]
  %eptr7591693 = getelementptr inbounds i64, i64* %cloptr7591688, i64 4              ; &eptr7591693[4]
  %eptr7591694 = getelementptr inbounds i64, i64* %cloptr7591688, i64 5              ; &eptr7591694[5]
  %eptr7591695 = getelementptr inbounds i64, i64* %cloptr7591688, i64 6              ; &eptr7591695[6]
  store i64 %Qiq$lsts_43, i64* %eptr7591690                                          ; *eptr7591690 = %Qiq$lsts_43
  store i64 %fZf$f, i64* %eptr7591691                                                ; *eptr7591691 = %fZf$f
  store i64 %cont7581417, i64* %eptr7591692                                          ; *eptr7591692 = %cont7581417
  store i64 %MfJ$acc, i64* %eptr7591693                                              ; *eptr7591693 = %MfJ$acc
  store i64 %QTD$_37foldr, i64* %eptr7591694                                         ; *eptr7591694 = %QTD$_37foldr
  store i64 %be3$_37foldr1, i64* %eptr7591695                                        ; *eptr7591695 = %be3$_37foldr1
  %eptr7591689 = getelementptr inbounds i64, i64* %cloptr7591688, i64 0              ; &cloptr7591688[0]
  %f7591696 = ptrtoint void(i64,i64)* @lam7585769 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591696, i64* %eptr7591689                                             ; store fptr
  %arg7583321 = ptrtoint i64* %cloptr7591688 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591697 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591698 = getelementptr inbounds i64, i64* %cloptr7591697, i64 0              ; &cloptr7591697[0]
  %f7591699 = ptrtoint void(i64,i64)* @lam7585757 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591699, i64* %eptr7591698                                             ; store fptr
  %arg7583320 = ptrtoint i64* %cloptr7591697 to i64                                  ; closure cast; i64* -> i64
  %rva7585385 = add i64 0, 0                                                         ; quoted ()
  %rva7585384 = call i64 @prim_cons(i64 %cb3$lsts, i64 %rva7585385)                  ; call prim_cons
  %rva7585383 = call i64 @prim_cons(i64 %arg7583320, i64 %rva7585384)                ; call prim_cons
  %rva7585382 = call i64 @prim_cons(i64 %arg7583321, i64 %rva7585383)                ; call prim_cons
  %cloptr7591700 = inttoptr i64 %hXm$_37map1 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591701 = getelementptr inbounds i64, i64* %cloptr7591700, i64 0             ; &cloptr7591700[0]
  %f7591703 = load i64, i64* %i0ptr7591701, align 8                                  ; load; *i0ptr7591701
  %fptr7591702 = inttoptr i64 %f7591703 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591702(i64 %hXm$_37map1, i64 %rva7585382)          ; tail call
  ret void
}


define void @lam7585769(i64 %env7585770, i64 %rvp7585374) {
  %envptr7591704 = inttoptr i64 %env7585770 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591705 = getelementptr inbounds i64, i64* %envptr7591704, i64 6            ; &envptr7591704[6]
  %be3$_37foldr1 = load i64, i64* %envptr7591705, align 8                            ; load; *envptr7591705
  %envptr7591706 = inttoptr i64 %env7585770 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591707 = getelementptr inbounds i64, i64* %envptr7591706, i64 5            ; &envptr7591706[5]
  %QTD$_37foldr = load i64, i64* %envptr7591707, align 8                             ; load; *envptr7591707
  %envptr7591708 = inttoptr i64 %env7585770 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591709 = getelementptr inbounds i64, i64* %envptr7591708, i64 4            ; &envptr7591708[4]
  %MfJ$acc = load i64, i64* %envptr7591709, align 8                                  ; load; *envptr7591709
  %envptr7591710 = inttoptr i64 %env7585770 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591711 = getelementptr inbounds i64, i64* %envptr7591710, i64 3            ; &envptr7591710[3]
  %cont7581417 = load i64, i64* %envptr7591711, align 8                              ; load; *envptr7591711
  %envptr7591712 = inttoptr i64 %env7585770 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591713 = getelementptr inbounds i64, i64* %envptr7591712, i64 2            ; &envptr7591712[2]
  %fZf$f = load i64, i64* %envptr7591713, align 8                                    ; load; *envptr7591713
  %envptr7591714 = inttoptr i64 %env7585770 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591715 = getelementptr inbounds i64, i64* %envptr7591714, i64 1            ; &envptr7591714[1]
  %Qiq$lsts_43 = load i64, i64* %envptr7591715, align 8                              ; load; *envptr7591715
  %_957581423 = call i64 @prim_car(i64 %rvp7585374)                                  ; call prim_car
  %rvp7585373 = call i64 @prim_cdr(i64 %rvp7585374)                                  ; call prim_cdr
  %Ei9$vs = call i64 @prim_car(i64 %rvp7585373)                                      ; call prim_car
  %na7585351 = call i64 @prim_cdr(i64 %rvp7585373)                                   ; call prim_cdr
  %a7580997 = call i64 @prim_cons(i64 %MfJ$acc, i64 %Qiq$lsts_43)                    ; call prim_cons
  %a7580998 = call i64 @prim_cons(i64 %fZf$f, i64 %a7580997)                         ; call prim_cons
  %cloptr7591716 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7591718 = getelementptr inbounds i64, i64* %cloptr7591716, i64 1              ; &eptr7591718[1]
  %eptr7591719 = getelementptr inbounds i64, i64* %cloptr7591716, i64 2              ; &eptr7591719[2]
  %eptr7591720 = getelementptr inbounds i64, i64* %cloptr7591716, i64 3              ; &eptr7591720[3]
  %eptr7591721 = getelementptr inbounds i64, i64* %cloptr7591716, i64 4              ; &eptr7591721[4]
  store i64 %fZf$f, i64* %eptr7591718                                                ; *eptr7591718 = %fZf$f
  store i64 %Ei9$vs, i64* %eptr7591719                                               ; *eptr7591719 = %Ei9$vs
  store i64 %cont7581417, i64* %eptr7591720                                          ; *eptr7591720 = %cont7581417
  store i64 %be3$_37foldr1, i64* %eptr7591721                                        ; *eptr7591721 = %be3$_37foldr1
  %eptr7591717 = getelementptr inbounds i64, i64* %cloptr7591716, i64 0              ; &cloptr7591716[0]
  %f7591722 = ptrtoint void(i64,i64)* @lam7585767 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591722, i64* %eptr7591717                                             ; store fptr
  %arg7583328 = ptrtoint i64* %cloptr7591716 to i64                                  ; closure cast; i64* -> i64
  %cps_45lst7581429 = call i64 @prim_cons(i64 %arg7583328, i64 %a7580998)            ; call prim_cons
  %cloptr7591723 = inttoptr i64 %QTD$_37foldr to i64*                                ; closure/env cast; i64 -> i64*
  %i0ptr7591724 = getelementptr inbounds i64, i64* %cloptr7591723, i64 0             ; &cloptr7591723[0]
  %f7591726 = load i64, i64* %i0ptr7591724, align 8                                  ; load; *i0ptr7591724
  %fptr7591725 = inttoptr i64 %f7591726 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591725(i64 %QTD$_37foldr, i64 %cps_45lst7581429)   ; tail call
  ret void
}


define void @lam7585767(i64 %env7585768, i64 %rvp7585372) {
  %envptr7591727 = inttoptr i64 %env7585768 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591728 = getelementptr inbounds i64, i64* %envptr7591727, i64 4            ; &envptr7591727[4]
  %be3$_37foldr1 = load i64, i64* %envptr7591728, align 8                            ; load; *envptr7591728
  %envptr7591729 = inttoptr i64 %env7585768 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591730 = getelementptr inbounds i64, i64* %envptr7591729, i64 3            ; &envptr7591729[3]
  %cont7581417 = load i64, i64* %envptr7591730, align 8                              ; load; *envptr7591730
  %envptr7591731 = inttoptr i64 %env7585768 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591732 = getelementptr inbounds i64, i64* %envptr7591731, i64 2            ; &envptr7591731[2]
  %Ei9$vs = load i64, i64* %envptr7591732, align 8                                   ; load; *envptr7591732
  %envptr7591733 = inttoptr i64 %env7585768 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591734 = getelementptr inbounds i64, i64* %envptr7591733, i64 1            ; &envptr7591733[1]
  %fZf$f = load i64, i64* %envptr7591734, align 8                                    ; load; *envptr7591734
  %_957581424 = call i64 @prim_car(i64 %rvp7585372)                                  ; call prim_car
  %rvp7585371 = call i64 @prim_cdr(i64 %rvp7585372)                                  ; call prim_cdr
  %a7580999 = call i64 @prim_car(i64 %rvp7585371)                                    ; call prim_car
  %na7585353 = call i64 @prim_cdr(i64 %rvp7585371)                                   ; call prim_cdr
  %arg7583329 = add i64 0, 0                                                         ; quoted ()
  %a7581000 = call i64 @prim_cons(i64 %a7580999, i64 %arg7583329)                    ; call prim_cons
  %cloptr7591735 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7591737 = getelementptr inbounds i64, i64* %cloptr7591735, i64 1              ; &eptr7591737[1]
  %eptr7591738 = getelementptr inbounds i64, i64* %cloptr7591735, i64 2              ; &eptr7591738[2]
  store i64 %fZf$f, i64* %eptr7591737                                                ; *eptr7591737 = %fZf$f
  store i64 %cont7581417, i64* %eptr7591738                                          ; *eptr7591738 = %cont7581417
  %eptr7591736 = getelementptr inbounds i64, i64* %cloptr7591735, i64 0              ; &cloptr7591735[0]
  %f7591739 = ptrtoint void(i64,i64)* @lam7585764 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591739, i64* %eptr7591736                                             ; store fptr
  %arg7583334 = ptrtoint i64* %cloptr7591735 to i64                                  ; closure cast; i64* -> i64
  %cloptr7591740 = call i64* @alloc(i64 8)                                           ; malloc
  %eptr7591741 = getelementptr inbounds i64, i64* %cloptr7591740, i64 0              ; &cloptr7591740[0]
  %f7591742 = ptrtoint void(i64,i64)* @lam7585762 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591742, i64* %eptr7591741                                             ; store fptr
  %arg7583333 = ptrtoint i64* %cloptr7591740 to i64                                  ; closure cast; i64* -> i64
  %rva7585370 = add i64 0, 0                                                         ; quoted ()
  %rva7585369 = call i64 @prim_cons(i64 %Ei9$vs, i64 %rva7585370)                    ; call prim_cons
  %rva7585368 = call i64 @prim_cons(i64 %a7581000, i64 %rva7585369)                  ; call prim_cons
  %rva7585367 = call i64 @prim_cons(i64 %arg7583333, i64 %rva7585368)                ; call prim_cons
  %rva7585366 = call i64 @prim_cons(i64 %arg7583334, i64 %rva7585367)                ; call prim_cons
  %cloptr7591743 = inttoptr i64 %be3$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7591744 = getelementptr inbounds i64, i64* %cloptr7591743, i64 0             ; &cloptr7591743[0]
  %f7591746 = load i64, i64* %i0ptr7591744, align 8                                  ; load; *i0ptr7591744
  %fptr7591745 = inttoptr i64 %f7591746 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591745(i64 %be3$_37foldr1, i64 %rva7585366)        ; tail call
  ret void
}


define void @lam7585764(i64 %env7585765, i64 %rvp7585357) {
  %envptr7591747 = inttoptr i64 %env7585765 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591748 = getelementptr inbounds i64, i64* %envptr7591747, i64 2            ; &envptr7591747[2]
  %cont7581417 = load i64, i64* %envptr7591748, align 8                              ; load; *envptr7591748
  %envptr7591749 = inttoptr i64 %env7585765 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591750 = getelementptr inbounds i64, i64* %envptr7591749, i64 1            ; &envptr7591749[1]
  %fZf$f = load i64, i64* %envptr7591750, align 8                                    ; load; *envptr7591750
  %_957581425 = call i64 @prim_car(i64 %rvp7585357)                                  ; call prim_car
  %rvp7585356 = call i64 @prim_cdr(i64 %rvp7585357)                                  ; call prim_cdr
  %a7581001 = call i64 @prim_car(i64 %rvp7585356)                                    ; call prim_car
  %na7585355 = call i64 @prim_cdr(i64 %rvp7585356)                                   ; call prim_cdr
  %cps_45lst7581426 = call i64 @prim_cons(i64 %cont7581417, i64 %a7581001)           ; call prim_cons
  %cloptr7591751 = inttoptr i64 %fZf$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7591752 = getelementptr inbounds i64, i64* %cloptr7591751, i64 0             ; &cloptr7591751[0]
  %f7591754 = load i64, i64* %i0ptr7591752, align 8                                  ; load; *i0ptr7591752
  %fptr7591753 = inttoptr i64 %f7591754 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591753(i64 %fZf$f, i64 %cps_45lst7581426)          ; tail call
  ret void
}


define void @lam7585762(i64 %env7585763, i64 %rvp7585365) {
  %cont7581427 = call i64 @prim_car(i64 %rvp7585365)                                 ; call prim_car
  %rvp7585364 = call i64 @prim_cdr(i64 %rvp7585365)                                  ; call prim_cdr
  %fbJ$a = call i64 @prim_car(i64 %rvp7585364)                                       ; call prim_car
  %rvp7585363 = call i64 @prim_cdr(i64 %rvp7585364)                                  ; call prim_cdr
  %n1y$b = call i64 @prim_car(i64 %rvp7585363)                                       ; call prim_car
  %na7585359 = call i64 @prim_cdr(i64 %rvp7585363)                                   ; call prim_cdr
  %retprim7581428 = call i64 @prim_cons(i64 %fbJ$a, i64 %n1y$b)                      ; call prim_cons
  %arg7583341 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585362 = add i64 0, 0                                                         ; quoted ()
  %rva7585361 = call i64 @prim_cons(i64 %retprim7581428, i64 %rva7585362)            ; call prim_cons
  %rva7585360 = call i64 @prim_cons(i64 %arg7583341, i64 %rva7585361)                ; call prim_cons
  %cloptr7591755 = inttoptr i64 %cont7581427 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591756 = getelementptr inbounds i64, i64* %cloptr7591755, i64 0             ; &cloptr7591755[0]
  %f7591758 = load i64, i64* %i0ptr7591756, align 8                                  ; load; *i0ptr7591756
  %fptr7591757 = inttoptr i64 %f7591758 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591757(i64 %cont7581427, i64 %rva7585360)          ; tail call
  ret void
}


define void @lam7585757(i64 %env7585758, i64 %rvp7585381) {
  %cont7581430 = call i64 @prim_car(i64 %rvp7585381)                                 ; call prim_car
  %rvp7585380 = call i64 @prim_cdr(i64 %rvp7585381)                                  ; call prim_cdr
  %SeO$x = call i64 @prim_car(i64 %rvp7585380)                                       ; call prim_car
  %na7585376 = call i64 @prim_cdr(i64 %rvp7585380)                                   ; call prim_cdr
  %retprim7581431 = call i64 @prim_car(i64 %SeO$x)                                   ; call prim_car
  %arg7583345 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585379 = add i64 0, 0                                                         ; quoted ()
  %rva7585378 = call i64 @prim_cons(i64 %retprim7581431, i64 %rva7585379)            ; call prim_cons
  %rva7585377 = call i64 @prim_cons(i64 %arg7583345, i64 %rva7585378)                ; call prim_cons
  %cloptr7591759 = inttoptr i64 %cont7581430 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591760 = getelementptr inbounds i64, i64* %cloptr7591759, i64 0             ; &cloptr7591759[0]
  %f7591762 = load i64, i64* %i0ptr7591760, align 8                                  ; load; *i0ptr7591760
  %fptr7591761 = inttoptr i64 %f7591762 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591761(i64 %cont7581430, i64 %rva7585377)          ; tail call
  ret void
}


define void @lam7585752(i64 %env7585753, i64 %rvp7585394) {
  %cont7581432 = call i64 @prim_car(i64 %rvp7585394)                                 ; call prim_car
  %rvp7585393 = call i64 @prim_cdr(i64 %rvp7585394)                                  ; call prim_cdr
  %e2r$x = call i64 @prim_car(i64 %rvp7585393)                                       ; call prim_car
  %na7585389 = call i64 @prim_cdr(i64 %rvp7585393)                                   ; call prim_cdr
  %retprim7581433 = call i64 @prim_cdr(i64 %e2r$x)                                   ; call prim_cdr
  %arg7583349 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585392 = add i64 0, 0                                                         ; quoted ()
  %rva7585391 = call i64 @prim_cons(i64 %retprim7581433, i64 %rva7585392)            ; call prim_cons
  %rva7585390 = call i64 @prim_cons(i64 %arg7583349, i64 %rva7585391)                ; call prim_cons
  %cloptr7591763 = inttoptr i64 %cont7581432 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591764 = getelementptr inbounds i64, i64* %cloptr7591763, i64 0             ; &cloptr7591763[0]
  %f7591766 = load i64, i64* %i0ptr7591764, align 8                                  ; load; *i0ptr7591764
  %fptr7591765 = inttoptr i64 %f7591766 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591765(i64 %cont7581432, i64 %rva7585390)          ; tail call
  ret void
}


define void @lam7585745(i64 %env7585746, i64 %rvp7585411) {
  %cont7581434 = call i64 @prim_car(i64 %rvp7585411)                                 ; call prim_car
  %rvp7585410 = call i64 @prim_cdr(i64 %rvp7585411)                                  ; call prim_cdr
  %szU$lst = call i64 @prim_car(i64 %rvp7585410)                                     ; call prim_car
  %rvp7585409 = call i64 @prim_cdr(i64 %rvp7585410)                                  ; call prim_cdr
  %lJb$b = call i64 @prim_car(i64 %rvp7585409)                                       ; call prim_car
  %na7585402 = call i64 @prim_cdr(i64 %rvp7585409)                                   ; call prim_cdr
  %cmp7591767 = icmp eq i64 %lJb$b, 15                                               ; false?
  br i1 %cmp7591767, label %else7591769, label %then7591768                          ; if

then7591768:
  %arg7583352 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585405 = add i64 0, 0                                                         ; quoted ()
  %rva7585404 = call i64 @prim_cons(i64 %lJb$b, i64 %rva7585405)                     ; call prim_cons
  %rva7585403 = call i64 @prim_cons(i64 %arg7583352, i64 %rva7585404)                ; call prim_cons
  %cloptr7591770 = inttoptr i64 %cont7581434 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591771 = getelementptr inbounds i64, i64* %cloptr7591770, i64 0             ; &cloptr7591770[0]
  %f7591773 = load i64, i64* %i0ptr7591771, align 8                                  ; load; *i0ptr7591771
  %fptr7591772 = inttoptr i64 %f7591773 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591772(i64 %cont7581434, i64 %rva7585403)          ; tail call
  ret void

else7591769:
  %retprim7581435 = call i64 @prim_null_63(i64 %szU$lst)                             ; call prim_null_63
  %arg7583356 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585408 = add i64 0, 0                                                         ; quoted ()
  %rva7585407 = call i64 @prim_cons(i64 %retprim7581435, i64 %rva7585408)            ; call prim_cons
  %rva7585406 = call i64 @prim_cons(i64 %arg7583356, i64 %rva7585407)                ; call prim_cons
  %cloptr7591774 = inttoptr i64 %cont7581434 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591775 = getelementptr inbounds i64, i64* %cloptr7591774, i64 0             ; &cloptr7591774[0]
  %f7591777 = load i64, i64* %i0ptr7591775, align 8                                  ; load; *i0ptr7591775
  %fptr7591776 = inttoptr i64 %f7591777 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591776(i64 %cont7581434, i64 %rva7585406)          ; tail call
  ret void
}


define void @lam7585731(i64 %env7585732, i64 %rvp7585465) {
  %cont7581438 = call i64 @prim_car(i64 %rvp7585465)                                 ; call prim_car
  %rvp7585464 = call i64 @prim_cdr(i64 %rvp7585465)                                  ; call prim_cdr
  %Bru$_37foldl1 = call i64 @prim_car(i64 %rvp7585464)                               ; call prim_car
  %na7585438 = call i64 @prim_cdr(i64 %rvp7585464)                                   ; call prim_cdr
  %arg7583359 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7591778 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7591780 = getelementptr inbounds i64, i64* %cloptr7591778, i64 1              ; &eptr7591780[1]
  store i64 %Bru$_37foldl1, i64* %eptr7591780                                        ; *eptr7591780 = %Bru$_37foldl1
  %eptr7591779 = getelementptr inbounds i64, i64* %cloptr7591778, i64 0              ; &cloptr7591778[0]
  %f7591781 = ptrtoint void(i64,i64)* @lam7585728 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591781, i64* %eptr7591779                                             ; store fptr
  %arg7583358 = ptrtoint i64* %cloptr7591778 to i64                                  ; closure cast; i64* -> i64
  %rva7585463 = add i64 0, 0                                                         ; quoted ()
  %rva7585462 = call i64 @prim_cons(i64 %arg7583358, i64 %rva7585463)                ; call prim_cons
  %rva7585461 = call i64 @prim_cons(i64 %arg7583359, i64 %rva7585462)                ; call prim_cons
  %cloptr7591782 = inttoptr i64 %cont7581438 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591783 = getelementptr inbounds i64, i64* %cloptr7591782, i64 0             ; &cloptr7591782[0]
  %f7591785 = load i64, i64* %i0ptr7591783, align 8                                  ; load; *i0ptr7591783
  %fptr7591784 = inttoptr i64 %f7591785 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591784(i64 %cont7581438, i64 %rva7585461)          ; tail call
  ret void
}


define void @lam7585728(i64 %env7585729, i64 %rvp7585460) {
  %envptr7591786 = inttoptr i64 %env7585729 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591787 = getelementptr inbounds i64, i64* %envptr7591786, i64 1            ; &envptr7591786[1]
  %Bru$_37foldl1 = load i64, i64* %envptr7591787, align 8                            ; load; *envptr7591787
  %cont7581439 = call i64 @prim_car(i64 %rvp7585460)                                 ; call prim_car
  %rvp7585459 = call i64 @prim_cdr(i64 %rvp7585460)                                  ; call prim_cdr
  %ERB$f = call i64 @prim_car(i64 %rvp7585459)                                       ; call prim_car
  %rvp7585458 = call i64 @prim_cdr(i64 %rvp7585459)                                  ; call prim_cdr
  %MTo$acc = call i64 @prim_car(i64 %rvp7585458)                                     ; call prim_car
  %rvp7585457 = call i64 @prim_cdr(i64 %rvp7585458)                                  ; call prim_cdr
  %uYW$lst = call i64 @prim_car(i64 %rvp7585457)                                     ; call prim_car
  %na7585440 = call i64 @prim_cdr(i64 %rvp7585457)                                   ; call prim_cdr
  %a7580988 = call i64 @prim_null_63(i64 %uYW$lst)                                   ; call prim_null_63
  %cmp7591788 = icmp eq i64 %a7580988, 15                                            ; false?
  br i1 %cmp7591788, label %else7591790, label %then7591789                          ; if

then7591789:
  %arg7583363 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585443 = add i64 0, 0                                                         ; quoted ()
  %rva7585442 = call i64 @prim_cons(i64 %MTo$acc, i64 %rva7585443)                   ; call prim_cons
  %rva7585441 = call i64 @prim_cons(i64 %arg7583363, i64 %rva7585442)                ; call prim_cons
  %cloptr7591791 = inttoptr i64 %cont7581439 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591792 = getelementptr inbounds i64, i64* %cloptr7591791, i64 0             ; &cloptr7591791[0]
  %f7591794 = load i64, i64* %i0ptr7591792, align 8                                  ; load; *i0ptr7591792
  %fptr7591793 = inttoptr i64 %f7591794 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591793(i64 %cont7581439, i64 %rva7585441)          ; tail call
  ret void

else7591790:
  %a7580989 = call i64 @prim_car(i64 %uYW$lst)                                       ; call prim_car
  %cloptr7591795 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7591797 = getelementptr inbounds i64, i64* %cloptr7591795, i64 1              ; &eptr7591797[1]
  %eptr7591798 = getelementptr inbounds i64, i64* %cloptr7591795, i64 2              ; &eptr7591798[2]
  %eptr7591799 = getelementptr inbounds i64, i64* %cloptr7591795, i64 3              ; &eptr7591799[3]
  %eptr7591800 = getelementptr inbounds i64, i64* %cloptr7591795, i64 4              ; &eptr7591800[4]
  store i64 %Bru$_37foldl1, i64* %eptr7591797                                        ; *eptr7591797 = %Bru$_37foldl1
  store i64 %uYW$lst, i64* %eptr7591798                                              ; *eptr7591798 = %uYW$lst
  store i64 %ERB$f, i64* %eptr7591799                                                ; *eptr7591799 = %ERB$f
  store i64 %cont7581439, i64* %eptr7591800                                          ; *eptr7591800 = %cont7581439
  %eptr7591796 = getelementptr inbounds i64, i64* %cloptr7591795, i64 0              ; &cloptr7591795[0]
  %f7591801 = ptrtoint void(i64,i64)* @lam7585726 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591801, i64* %eptr7591796                                             ; store fptr
  %arg7583368 = ptrtoint i64* %cloptr7591795 to i64                                  ; closure cast; i64* -> i64
  %rva7585456 = add i64 0, 0                                                         ; quoted ()
  %rva7585455 = call i64 @prim_cons(i64 %MTo$acc, i64 %rva7585456)                   ; call prim_cons
  %rva7585454 = call i64 @prim_cons(i64 %a7580989, i64 %rva7585455)                  ; call prim_cons
  %rva7585453 = call i64 @prim_cons(i64 %arg7583368, i64 %rva7585454)                ; call prim_cons
  %cloptr7591802 = inttoptr i64 %ERB$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7591803 = getelementptr inbounds i64, i64* %cloptr7591802, i64 0             ; &cloptr7591802[0]
  %f7591805 = load i64, i64* %i0ptr7591803, align 8                                  ; load; *i0ptr7591803
  %fptr7591804 = inttoptr i64 %f7591805 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591804(i64 %ERB$f, i64 %rva7585453)                ; tail call
  ret void
}


define void @lam7585726(i64 %env7585727, i64 %rvp7585452) {
  %envptr7591806 = inttoptr i64 %env7585727 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591807 = getelementptr inbounds i64, i64* %envptr7591806, i64 4            ; &envptr7591806[4]
  %cont7581439 = load i64, i64* %envptr7591807, align 8                              ; load; *envptr7591807
  %envptr7591808 = inttoptr i64 %env7585727 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591809 = getelementptr inbounds i64, i64* %envptr7591808, i64 3            ; &envptr7591808[3]
  %ERB$f = load i64, i64* %envptr7591809, align 8                                    ; load; *envptr7591809
  %envptr7591810 = inttoptr i64 %env7585727 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591811 = getelementptr inbounds i64, i64* %envptr7591810, i64 2            ; &envptr7591810[2]
  %uYW$lst = load i64, i64* %envptr7591811, align 8                                  ; load; *envptr7591811
  %envptr7591812 = inttoptr i64 %env7585727 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591813 = getelementptr inbounds i64, i64* %envptr7591812, i64 1            ; &envptr7591812[1]
  %Bru$_37foldl1 = load i64, i64* %envptr7591813, align 8                            ; load; *envptr7591813
  %_957581440 = call i64 @prim_car(i64 %rvp7585452)                                  ; call prim_car
  %rvp7585451 = call i64 @prim_cdr(i64 %rvp7585452)                                  ; call prim_cdr
  %a7580990 = call i64 @prim_car(i64 %rvp7585451)                                    ; call prim_car
  %na7585445 = call i64 @prim_cdr(i64 %rvp7585451)                                   ; call prim_cdr
  %a7580991 = call i64 @prim_cdr(i64 %uYW$lst)                                       ; call prim_cdr
  %rva7585450 = add i64 0, 0                                                         ; quoted ()
  %rva7585449 = call i64 @prim_cons(i64 %a7580991, i64 %rva7585450)                  ; call prim_cons
  %rva7585448 = call i64 @prim_cons(i64 %a7580990, i64 %rva7585449)                  ; call prim_cons
  %rva7585447 = call i64 @prim_cons(i64 %ERB$f, i64 %rva7585448)                     ; call prim_cons
  %rva7585446 = call i64 @prim_cons(i64 %cont7581439, i64 %rva7585447)               ; call prim_cons
  %cloptr7591814 = inttoptr i64 %Bru$_37foldl1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7591815 = getelementptr inbounds i64, i64* %cloptr7591814, i64 0             ; &cloptr7591814[0]
  %f7591817 = load i64, i64* %i0ptr7591815, align 8                                  ; load; *i0ptr7591815
  %fptr7591816 = inttoptr i64 %f7591817 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591816(i64 %Bru$_37foldl1, i64 %rva7585446)        ; tail call
  ret void
}


define void @lam7585718(i64 %env7585719, i64 %rvp7585494) {
  %cont7581441 = call i64 @prim_car(i64 %rvp7585494)                                 ; call prim_car
  %rvp7585493 = call i64 @prim_cdr(i64 %rvp7585494)                                  ; call prim_cdr
  %YKB$_37length = call i64 @prim_car(i64 %rvp7585493)                               ; call prim_car
  %na7585472 = call i64 @prim_cdr(i64 %rvp7585493)                                   ; call prim_cdr
  %arg7583377 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7591818 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7591820 = getelementptr inbounds i64, i64* %cloptr7591818, i64 1              ; &eptr7591820[1]
  store i64 %YKB$_37length, i64* %eptr7591820                                        ; *eptr7591820 = %YKB$_37length
  %eptr7591819 = getelementptr inbounds i64, i64* %cloptr7591818, i64 0              ; &cloptr7591818[0]
  %f7591821 = ptrtoint void(i64,i64)* @lam7585715 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591821, i64* %eptr7591819                                             ; store fptr
  %arg7583376 = ptrtoint i64* %cloptr7591818 to i64                                  ; closure cast; i64* -> i64
  %rva7585492 = add i64 0, 0                                                         ; quoted ()
  %rva7585491 = call i64 @prim_cons(i64 %arg7583376, i64 %rva7585492)                ; call prim_cons
  %rva7585490 = call i64 @prim_cons(i64 %arg7583377, i64 %rva7585491)                ; call prim_cons
  %cloptr7591822 = inttoptr i64 %cont7581441 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591823 = getelementptr inbounds i64, i64* %cloptr7591822, i64 0             ; &cloptr7591822[0]
  %f7591825 = load i64, i64* %i0ptr7591823, align 8                                  ; load; *i0ptr7591823
  %fptr7591824 = inttoptr i64 %f7591825 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591824(i64 %cont7581441, i64 %rva7585490)          ; tail call
  ret void
}


define void @lam7585715(i64 %env7585716, i64 %rvp7585489) {
  %envptr7591826 = inttoptr i64 %env7585716 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591827 = getelementptr inbounds i64, i64* %envptr7591826, i64 1            ; &envptr7591826[1]
  %YKB$_37length = load i64, i64* %envptr7591827, align 8                            ; load; *envptr7591827
  %cont7581442 = call i64 @prim_car(i64 %rvp7585489)                                 ; call prim_car
  %rvp7585488 = call i64 @prim_cdr(i64 %rvp7585489)                                  ; call prim_cdr
  %rTe$lst = call i64 @prim_car(i64 %rvp7585488)                                     ; call prim_car
  %na7585474 = call i64 @prim_cdr(i64 %rvp7585488)                                   ; call prim_cdr
  %a7580985 = call i64 @prim_null_63(i64 %rTe$lst)                                   ; call prim_null_63
  %cmp7591828 = icmp eq i64 %a7580985, 15                                            ; false?
  br i1 %cmp7591828, label %else7591830, label %then7591829                          ; if

then7591829:
  %arg7583381 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583380 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585477 = add i64 0, 0                                                         ; quoted ()
  %rva7585476 = call i64 @prim_cons(i64 %arg7583380, i64 %rva7585477)                ; call prim_cons
  %rva7585475 = call i64 @prim_cons(i64 %arg7583381, i64 %rva7585476)                ; call prim_cons
  %cloptr7591831 = inttoptr i64 %cont7581442 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591832 = getelementptr inbounds i64, i64* %cloptr7591831, i64 0             ; &cloptr7591831[0]
  %f7591834 = load i64, i64* %i0ptr7591832, align 8                                  ; load; *i0ptr7591832
  %fptr7591833 = inttoptr i64 %f7591834 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591833(i64 %cont7581442, i64 %rva7585475)          ; tail call
  ret void

else7591830:
  %a7580986 = call i64 @prim_cdr(i64 %rTe$lst)                                       ; call prim_cdr
  %cloptr7591835 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7591837 = getelementptr inbounds i64, i64* %cloptr7591835, i64 1              ; &eptr7591837[1]
  store i64 %cont7581442, i64* %eptr7591837                                          ; *eptr7591837 = %cont7581442
  %eptr7591836 = getelementptr inbounds i64, i64* %cloptr7591835, i64 0              ; &cloptr7591835[0]
  %f7591838 = ptrtoint void(i64,i64)* @lam7585713 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591838, i64* %eptr7591836                                             ; store fptr
  %arg7583385 = ptrtoint i64* %cloptr7591835 to i64                                  ; closure cast; i64* -> i64
  %rva7585487 = add i64 0, 0                                                         ; quoted ()
  %rva7585486 = call i64 @prim_cons(i64 %a7580986, i64 %rva7585487)                  ; call prim_cons
  %rva7585485 = call i64 @prim_cons(i64 %arg7583385, i64 %rva7585486)                ; call prim_cons
  %cloptr7591839 = inttoptr i64 %YKB$_37length to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7591840 = getelementptr inbounds i64, i64* %cloptr7591839, i64 0             ; &cloptr7591839[0]
  %f7591842 = load i64, i64* %i0ptr7591840, align 8                                  ; load; *i0ptr7591840
  %fptr7591841 = inttoptr i64 %f7591842 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591841(i64 %YKB$_37length, i64 %rva7585485)        ; tail call
  ret void
}


define void @lam7585713(i64 %env7585714, i64 %rvp7585484) {
  %envptr7591843 = inttoptr i64 %env7585714 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591844 = getelementptr inbounds i64, i64* %envptr7591843, i64 1            ; &envptr7591843[1]
  %cont7581442 = load i64, i64* %envptr7591844, align 8                              ; load; *envptr7591844
  %_957581443 = call i64 @prim_car(i64 %rvp7585484)                                  ; call prim_car
  %rvp7585483 = call i64 @prim_cdr(i64 %rvp7585484)                                  ; call prim_cdr
  %a7580987 = call i64 @prim_car(i64 %rvp7585483)                                    ; call prim_car
  %na7585479 = call i64 @prim_cdr(i64 %rvp7585483)                                   ; call prim_cdr
  %arg7583388 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %retprim7581444 = call i64 @prim__43(i64 %arg7583388, i64 %a7580987)               ; call prim__43
  %arg7583390 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585482 = add i64 0, 0                                                         ; quoted ()
  %rva7585481 = call i64 @prim_cons(i64 %retprim7581444, i64 %rva7585482)            ; call prim_cons
  %rva7585480 = call i64 @prim_cons(i64 %arg7583390, i64 %rva7585481)                ; call prim_cons
  %cloptr7591845 = inttoptr i64 %cont7581442 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591846 = getelementptr inbounds i64, i64* %cloptr7591845, i64 0             ; &cloptr7591845[0]
  %f7591848 = load i64, i64* %i0ptr7591846, align 8                                  ; load; *i0ptr7591846
  %fptr7591847 = inttoptr i64 %f7591848 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591847(i64 %cont7581442, i64 %rva7585480)          ; tail call
  ret void
}


define void @lam7585702(i64 %env7585703, i64 %rvp7585528) {
  %cont7581445 = call i64 @prim_car(i64 %rvp7585528)                                 ; call prim_car
  %rvp7585527 = call i64 @prim_cdr(i64 %rvp7585528)                                  ; call prim_cdr
  %zJs$_37take = call i64 @prim_car(i64 %rvp7585527)                                 ; call prim_car
  %na7585501 = call i64 @prim_cdr(i64 %rvp7585527)                                   ; call prim_cdr
  %arg7583393 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7591849 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7591851 = getelementptr inbounds i64, i64* %cloptr7591849, i64 1              ; &eptr7591851[1]
  store i64 %zJs$_37take, i64* %eptr7591851                                          ; *eptr7591851 = %zJs$_37take
  %eptr7591850 = getelementptr inbounds i64, i64* %cloptr7591849, i64 0              ; &cloptr7591849[0]
  %f7591852 = ptrtoint void(i64,i64)* @lam7585699 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591852, i64* %eptr7591850                                             ; store fptr
  %arg7583392 = ptrtoint i64* %cloptr7591849 to i64                                  ; closure cast; i64* -> i64
  %rva7585526 = add i64 0, 0                                                         ; quoted ()
  %rva7585525 = call i64 @prim_cons(i64 %arg7583392, i64 %rva7585526)                ; call prim_cons
  %rva7585524 = call i64 @prim_cons(i64 %arg7583393, i64 %rva7585525)                ; call prim_cons
  %cloptr7591853 = inttoptr i64 %cont7581445 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591854 = getelementptr inbounds i64, i64* %cloptr7591853, i64 0             ; &cloptr7591853[0]
  %f7591856 = load i64, i64* %i0ptr7591854, align 8                                  ; load; *i0ptr7591854
  %fptr7591855 = inttoptr i64 %f7591856 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591855(i64 %cont7581445, i64 %rva7585524)          ; tail call
  ret void
}


define void @lam7585699(i64 %env7585700, i64 %rvp7585523) {
  %envptr7591857 = inttoptr i64 %env7585700 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591858 = getelementptr inbounds i64, i64* %envptr7591857, i64 1            ; &envptr7591857[1]
  %zJs$_37take = load i64, i64* %envptr7591858, align 8                              ; load; *envptr7591858
  %cont7581446 = call i64 @prim_car(i64 %rvp7585523)                                 ; call prim_car
  %rvp7585522 = call i64 @prim_cdr(i64 %rvp7585523)                                  ; call prim_cdr
  %Uv8$lst = call i64 @prim_car(i64 %rvp7585522)                                     ; call prim_car
  %rvp7585521 = call i64 @prim_cdr(i64 %rvp7585522)                                  ; call prim_cdr
  %eUm$n = call i64 @prim_car(i64 %rvp7585521)                                       ; call prim_car
  %na7585503 = call i64 @prim_cdr(i64 %rvp7585521)                                   ; call prim_cdr
  %arg7583395 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %a7580979 = call i64 @prim__61(i64 %eUm$n, i64 %arg7583395)                        ; call prim__61
  %cmp7591859 = icmp eq i64 %a7580979, 15                                            ; false?
  br i1 %cmp7591859, label %else7591861, label %then7591860                          ; if

then7591860:
  %arg7583398 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583397 = add i64 0, 0                                                         ; quoted ()
  %rva7585506 = add i64 0, 0                                                         ; quoted ()
  %rva7585505 = call i64 @prim_cons(i64 %arg7583397, i64 %rva7585506)                ; call prim_cons
  %rva7585504 = call i64 @prim_cons(i64 %arg7583398, i64 %rva7585505)                ; call prim_cons
  %cloptr7591862 = inttoptr i64 %cont7581446 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591863 = getelementptr inbounds i64, i64* %cloptr7591862, i64 0             ; &cloptr7591862[0]
  %f7591865 = load i64, i64* %i0ptr7591863, align 8                                  ; load; *i0ptr7591863
  %fptr7591864 = inttoptr i64 %f7591865 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591864(i64 %cont7581446, i64 %rva7585504)          ; tail call
  ret void

else7591861:
  %a7580980 = call i64 @prim_null_63(i64 %Uv8$lst)                                   ; call prim_null_63
  %cmp7591866 = icmp eq i64 %a7580980, 15                                            ; false?
  br i1 %cmp7591866, label %else7591868, label %then7591867                          ; if

then7591867:
  %arg7583402 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583401 = add i64 0, 0                                                         ; quoted ()
  %rva7585509 = add i64 0, 0                                                         ; quoted ()
  %rva7585508 = call i64 @prim_cons(i64 %arg7583401, i64 %rva7585509)                ; call prim_cons
  %rva7585507 = call i64 @prim_cons(i64 %arg7583402, i64 %rva7585508)                ; call prim_cons
  %cloptr7591869 = inttoptr i64 %cont7581446 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591870 = getelementptr inbounds i64, i64* %cloptr7591869, i64 0             ; &cloptr7591869[0]
  %f7591872 = load i64, i64* %i0ptr7591870, align 8                                  ; load; *i0ptr7591870
  %fptr7591871 = inttoptr i64 %f7591872 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591871(i64 %cont7581446, i64 %rva7585507)          ; tail call
  ret void

else7591868:
  %a7580981 = call i64 @prim_car(i64 %Uv8$lst)                                       ; call prim_car
  %a7580982 = call i64 @prim_cdr(i64 %Uv8$lst)                                       ; call prim_cdr
  %arg7583406 = call i64 @const_init_int(i64 1)                                      ; quoted int
  %a7580983 = call i64 @prim__45(i64 %eUm$n, i64 %arg7583406)                        ; call prim__45
  %cloptr7591873 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7591875 = getelementptr inbounds i64, i64* %cloptr7591873, i64 1              ; &eptr7591875[1]
  %eptr7591876 = getelementptr inbounds i64, i64* %cloptr7591873, i64 2              ; &eptr7591876[2]
  store i64 %a7580981, i64* %eptr7591875                                             ; *eptr7591875 = %a7580981
  store i64 %cont7581446, i64* %eptr7591876                                          ; *eptr7591876 = %cont7581446
  %eptr7591874 = getelementptr inbounds i64, i64* %cloptr7591873, i64 0              ; &cloptr7591873[0]
  %f7591877 = ptrtoint void(i64,i64)* @lam7585695 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591877, i64* %eptr7591874                                             ; store fptr
  %arg7583410 = ptrtoint i64* %cloptr7591873 to i64                                  ; closure cast; i64* -> i64
  %rva7585520 = add i64 0, 0                                                         ; quoted ()
  %rva7585519 = call i64 @prim_cons(i64 %a7580983, i64 %rva7585520)                  ; call prim_cons
  %rva7585518 = call i64 @prim_cons(i64 %a7580982, i64 %rva7585519)                  ; call prim_cons
  %rva7585517 = call i64 @prim_cons(i64 %arg7583410, i64 %rva7585518)                ; call prim_cons
  %cloptr7591878 = inttoptr i64 %zJs$_37take to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591879 = getelementptr inbounds i64, i64* %cloptr7591878, i64 0             ; &cloptr7591878[0]
  %f7591881 = load i64, i64* %i0ptr7591879, align 8                                  ; load; *i0ptr7591879
  %fptr7591880 = inttoptr i64 %f7591881 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591880(i64 %zJs$_37take, i64 %rva7585517)          ; tail call
  ret void
}


define void @lam7585695(i64 %env7585696, i64 %rvp7585516) {
  %envptr7591882 = inttoptr i64 %env7585696 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591883 = getelementptr inbounds i64, i64* %envptr7591882, i64 2            ; &envptr7591882[2]
  %cont7581446 = load i64, i64* %envptr7591883, align 8                              ; load; *envptr7591883
  %envptr7591884 = inttoptr i64 %env7585696 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591885 = getelementptr inbounds i64, i64* %envptr7591884, i64 1            ; &envptr7591884[1]
  %a7580981 = load i64, i64* %envptr7591885, align 8                                 ; load; *envptr7591885
  %_957581447 = call i64 @prim_car(i64 %rvp7585516)                                  ; call prim_car
  %rvp7585515 = call i64 @prim_cdr(i64 %rvp7585516)                                  ; call prim_cdr
  %a7580984 = call i64 @prim_car(i64 %rvp7585515)                                    ; call prim_car
  %na7585511 = call i64 @prim_cdr(i64 %rvp7585515)                                   ; call prim_cdr
  %retprim7581448 = call i64 @prim_cons(i64 %a7580981, i64 %a7580984)                ; call prim_cons
  %arg7583415 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585514 = add i64 0, 0                                                         ; quoted ()
  %rva7585513 = call i64 @prim_cons(i64 %retprim7581448, i64 %rva7585514)            ; call prim_cons
  %rva7585512 = call i64 @prim_cons(i64 %arg7583415, i64 %rva7585513)                ; call prim_cons
  %cloptr7591886 = inttoptr i64 %cont7581446 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591887 = getelementptr inbounds i64, i64* %cloptr7591886, i64 0             ; &cloptr7591886[0]
  %f7591889 = load i64, i64* %i0ptr7591887, align 8                                  ; load; *i0ptr7591887
  %fptr7591888 = inttoptr i64 %f7591889 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591888(i64 %cont7581446, i64 %rva7585512)          ; tail call
  ret void
}


define void @lam7585682(i64 %env7585683, i64 %rvp7585566) {
  %cont7581449 = call i64 @prim_car(i64 %rvp7585566)                                 ; call prim_car
  %rvp7585565 = call i64 @prim_cdr(i64 %rvp7585566)                                  ; call prim_cdr
  %j2T$_37map = call i64 @prim_car(i64 %rvp7585565)                                  ; call prim_car
  %na7585535 = call i64 @prim_cdr(i64 %rvp7585565)                                   ; call prim_cdr
  %arg7583418 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7591890 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7591892 = getelementptr inbounds i64, i64* %cloptr7591890, i64 1              ; &eptr7591892[1]
  store i64 %j2T$_37map, i64* %eptr7591892                                           ; *eptr7591892 = %j2T$_37map
  %eptr7591891 = getelementptr inbounds i64, i64* %cloptr7591890, i64 0              ; &cloptr7591890[0]
  %f7591893 = ptrtoint void(i64,i64)* @lam7585679 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591893, i64* %eptr7591891                                             ; store fptr
  %arg7583417 = ptrtoint i64* %cloptr7591890 to i64                                  ; closure cast; i64* -> i64
  %rva7585564 = add i64 0, 0                                                         ; quoted ()
  %rva7585563 = call i64 @prim_cons(i64 %arg7583417, i64 %rva7585564)                ; call prim_cons
  %rva7585562 = call i64 @prim_cons(i64 %arg7583418, i64 %rva7585563)                ; call prim_cons
  %cloptr7591894 = inttoptr i64 %cont7581449 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591895 = getelementptr inbounds i64, i64* %cloptr7591894, i64 0             ; &cloptr7591894[0]
  %f7591897 = load i64, i64* %i0ptr7591895, align 8                                  ; load; *i0ptr7591895
  %fptr7591896 = inttoptr i64 %f7591897 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591896(i64 %cont7581449, i64 %rva7585562)          ; tail call
  ret void
}


define void @lam7585679(i64 %env7585680, i64 %rvp7585561) {
  %envptr7591898 = inttoptr i64 %env7585680 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591899 = getelementptr inbounds i64, i64* %envptr7591898, i64 1            ; &envptr7591898[1]
  %j2T$_37map = load i64, i64* %envptr7591899, align 8                               ; load; *envptr7591899
  %cont7581450 = call i64 @prim_car(i64 %rvp7585561)                                 ; call prim_car
  %rvp7585560 = call i64 @prim_cdr(i64 %rvp7585561)                                  ; call prim_cdr
  %h1K$f = call i64 @prim_car(i64 %rvp7585560)                                       ; call prim_car
  %rvp7585559 = call i64 @prim_cdr(i64 %rvp7585560)                                  ; call prim_cdr
  %B8W$lst = call i64 @prim_car(i64 %rvp7585559)                                     ; call prim_car
  %na7585537 = call i64 @prim_cdr(i64 %rvp7585559)                                   ; call prim_cdr
  %a7580974 = call i64 @prim_null_63(i64 %B8W$lst)                                   ; call prim_null_63
  %cmp7591900 = icmp eq i64 %a7580974, 15                                            ; false?
  br i1 %cmp7591900, label %else7591902, label %then7591901                          ; if

then7591901:
  %arg7583422 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %arg7583421 = add i64 0, 0                                                         ; quoted ()
  %rva7585540 = add i64 0, 0                                                         ; quoted ()
  %rva7585539 = call i64 @prim_cons(i64 %arg7583421, i64 %rva7585540)                ; call prim_cons
  %rva7585538 = call i64 @prim_cons(i64 %arg7583422, i64 %rva7585539)                ; call prim_cons
  %cloptr7591903 = inttoptr i64 %cont7581450 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591904 = getelementptr inbounds i64, i64* %cloptr7591903, i64 0             ; &cloptr7591903[0]
  %f7591906 = load i64, i64* %i0ptr7591904, align 8                                  ; load; *i0ptr7591904
  %fptr7591905 = inttoptr i64 %f7591906 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591905(i64 %cont7581450, i64 %rva7585538)          ; tail call
  ret void

else7591902:
  %a7580975 = call i64 @prim_car(i64 %B8W$lst)                                       ; call prim_car
  %cloptr7591907 = call i64* @alloc(i64 40)                                          ; malloc
  %eptr7591909 = getelementptr inbounds i64, i64* %cloptr7591907, i64 1              ; &eptr7591909[1]
  %eptr7591910 = getelementptr inbounds i64, i64* %cloptr7591907, i64 2              ; &eptr7591910[2]
  %eptr7591911 = getelementptr inbounds i64, i64* %cloptr7591907, i64 3              ; &eptr7591911[3]
  %eptr7591912 = getelementptr inbounds i64, i64* %cloptr7591907, i64 4              ; &eptr7591912[4]
  store i64 %cont7581450, i64* %eptr7591909                                          ; *eptr7591909 = %cont7581450
  store i64 %h1K$f, i64* %eptr7591910                                                ; *eptr7591910 = %h1K$f
  store i64 %B8W$lst, i64* %eptr7591911                                              ; *eptr7591911 = %B8W$lst
  store i64 %j2T$_37map, i64* %eptr7591912                                           ; *eptr7591912 = %j2T$_37map
  %eptr7591908 = getelementptr inbounds i64, i64* %cloptr7591907, i64 0              ; &cloptr7591907[0]
  %f7591913 = ptrtoint void(i64,i64)* @lam7585677 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591913, i64* %eptr7591908                                             ; store fptr
  %arg7583426 = ptrtoint i64* %cloptr7591907 to i64                                  ; closure cast; i64* -> i64
  %rva7585558 = add i64 0, 0                                                         ; quoted ()
  %rva7585557 = call i64 @prim_cons(i64 %a7580975, i64 %rva7585558)                  ; call prim_cons
  %rva7585556 = call i64 @prim_cons(i64 %arg7583426, i64 %rva7585557)                ; call prim_cons
  %cloptr7591914 = inttoptr i64 %h1K$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7591915 = getelementptr inbounds i64, i64* %cloptr7591914, i64 0             ; &cloptr7591914[0]
  %f7591917 = load i64, i64* %i0ptr7591915, align 8                                  ; load; *i0ptr7591915
  %fptr7591916 = inttoptr i64 %f7591917 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591916(i64 %h1K$f, i64 %rva7585556)                ; tail call
  ret void
}


define void @lam7585677(i64 %env7585678, i64 %rvp7585555) {
  %envptr7591918 = inttoptr i64 %env7585678 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591919 = getelementptr inbounds i64, i64* %envptr7591918, i64 4            ; &envptr7591918[4]
  %j2T$_37map = load i64, i64* %envptr7591919, align 8                               ; load; *envptr7591919
  %envptr7591920 = inttoptr i64 %env7585678 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591921 = getelementptr inbounds i64, i64* %envptr7591920, i64 3            ; &envptr7591920[3]
  %B8W$lst = load i64, i64* %envptr7591921, align 8                                  ; load; *envptr7591921
  %envptr7591922 = inttoptr i64 %env7585678 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591923 = getelementptr inbounds i64, i64* %envptr7591922, i64 2            ; &envptr7591922[2]
  %h1K$f = load i64, i64* %envptr7591923, align 8                                    ; load; *envptr7591923
  %envptr7591924 = inttoptr i64 %env7585678 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591925 = getelementptr inbounds i64, i64* %envptr7591924, i64 1            ; &envptr7591924[1]
  %cont7581450 = load i64, i64* %envptr7591925, align 8                              ; load; *envptr7591925
  %_957581451 = call i64 @prim_car(i64 %rvp7585555)                                  ; call prim_car
  %rvp7585554 = call i64 @prim_cdr(i64 %rvp7585555)                                  ; call prim_cdr
  %a7580976 = call i64 @prim_car(i64 %rvp7585554)                                    ; call prim_car
  %na7585542 = call i64 @prim_cdr(i64 %rvp7585554)                                   ; call prim_cdr
  %a7580977 = call i64 @prim_cdr(i64 %B8W$lst)                                       ; call prim_cdr
  %cloptr7591926 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7591928 = getelementptr inbounds i64, i64* %cloptr7591926, i64 1              ; &eptr7591928[1]
  %eptr7591929 = getelementptr inbounds i64, i64* %cloptr7591926, i64 2              ; &eptr7591929[2]
  store i64 %cont7581450, i64* %eptr7591928                                          ; *eptr7591928 = %cont7581450
  store i64 %a7580976, i64* %eptr7591929                                             ; *eptr7591929 = %a7580976
  %eptr7591927 = getelementptr inbounds i64, i64* %cloptr7591926, i64 0              ; &cloptr7591926[0]
  %f7591930 = ptrtoint void(i64,i64)* @lam7585675 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591930, i64* %eptr7591927                                             ; store fptr
  %arg7583431 = ptrtoint i64* %cloptr7591926 to i64                                  ; closure cast; i64* -> i64
  %rva7585553 = add i64 0, 0                                                         ; quoted ()
  %rva7585552 = call i64 @prim_cons(i64 %a7580977, i64 %rva7585553)                  ; call prim_cons
  %rva7585551 = call i64 @prim_cons(i64 %h1K$f, i64 %rva7585552)                     ; call prim_cons
  %rva7585550 = call i64 @prim_cons(i64 %arg7583431, i64 %rva7585551)                ; call prim_cons
  %cloptr7591931 = inttoptr i64 %j2T$_37map to i64*                                  ; closure/env cast; i64 -> i64*
  %i0ptr7591932 = getelementptr inbounds i64, i64* %cloptr7591931, i64 0             ; &cloptr7591931[0]
  %f7591934 = load i64, i64* %i0ptr7591932, align 8                                  ; load; *i0ptr7591932
  %fptr7591933 = inttoptr i64 %f7591934 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591933(i64 %j2T$_37map, i64 %rva7585550)           ; tail call
  ret void
}


define void @lam7585675(i64 %env7585676, i64 %rvp7585549) {
  %envptr7591935 = inttoptr i64 %env7585676 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591936 = getelementptr inbounds i64, i64* %envptr7591935, i64 2            ; &envptr7591935[2]
  %a7580976 = load i64, i64* %envptr7591936, align 8                                 ; load; *envptr7591936
  %envptr7591937 = inttoptr i64 %env7585676 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591938 = getelementptr inbounds i64, i64* %envptr7591937, i64 1            ; &envptr7591937[1]
  %cont7581450 = load i64, i64* %envptr7591938, align 8                              ; load; *envptr7591938
  %_957581452 = call i64 @prim_car(i64 %rvp7585549)                                  ; call prim_car
  %rvp7585548 = call i64 @prim_cdr(i64 %rvp7585549)                                  ; call prim_cdr
  %a7580978 = call i64 @prim_car(i64 %rvp7585548)                                    ; call prim_car
  %na7585544 = call i64 @prim_cdr(i64 %rvp7585548)                                   ; call prim_cdr
  %retprim7581453 = call i64 @prim_cons(i64 %a7580976, i64 %a7580978)                ; call prim_cons
  %arg7583436 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585547 = add i64 0, 0                                                         ; quoted ()
  %rva7585546 = call i64 @prim_cons(i64 %retprim7581453, i64 %rva7585547)            ; call prim_cons
  %rva7585545 = call i64 @prim_cons(i64 %arg7583436, i64 %rva7585546)                ; call prim_cons
  %cloptr7591939 = inttoptr i64 %cont7581450 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591940 = getelementptr inbounds i64, i64* %cloptr7591939, i64 0             ; &cloptr7591939[0]
  %f7591942 = load i64, i64* %i0ptr7591940, align 8                                  ; load; *i0ptr7591940
  %fptr7591941 = inttoptr i64 %f7591942 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591941(i64 %cont7581450, i64 %rva7585545)          ; tail call
  ret void
}


define void @lam7585664(i64 %env7585665, i64 %rvp7585600) {
  %cont7581454 = call i64 @prim_car(i64 %rvp7585600)                                 ; call prim_car
  %rvp7585599 = call i64 @prim_cdr(i64 %rvp7585600)                                  ; call prim_cdr
  %vOc$_37foldr1 = call i64 @prim_car(i64 %rvp7585599)                               ; call prim_car
  %na7585573 = call i64 @prim_cdr(i64 %rvp7585599)                                   ; call prim_cdr
  %arg7583439 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7591943 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7591945 = getelementptr inbounds i64, i64* %cloptr7591943, i64 1              ; &eptr7591945[1]
  store i64 %vOc$_37foldr1, i64* %eptr7591945                                        ; *eptr7591945 = %vOc$_37foldr1
  %eptr7591944 = getelementptr inbounds i64, i64* %cloptr7591943, i64 0              ; &cloptr7591943[0]
  %f7591946 = ptrtoint void(i64,i64)* @lam7585661 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591946, i64* %eptr7591944                                             ; store fptr
  %arg7583438 = ptrtoint i64* %cloptr7591943 to i64                                  ; closure cast; i64* -> i64
  %rva7585598 = add i64 0, 0                                                         ; quoted ()
  %rva7585597 = call i64 @prim_cons(i64 %arg7583438, i64 %rva7585598)                ; call prim_cons
  %rva7585596 = call i64 @prim_cons(i64 %arg7583439, i64 %rva7585597)                ; call prim_cons
  %cloptr7591947 = inttoptr i64 %cont7581454 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591948 = getelementptr inbounds i64, i64* %cloptr7591947, i64 0             ; &cloptr7591947[0]
  %f7591950 = load i64, i64* %i0ptr7591948, align 8                                  ; load; *i0ptr7591948
  %fptr7591949 = inttoptr i64 %f7591950 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591949(i64 %cont7581454, i64 %rva7585596)          ; tail call
  ret void
}


define void @lam7585661(i64 %env7585662, i64 %rvp7585595) {
  %envptr7591951 = inttoptr i64 %env7585662 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591952 = getelementptr inbounds i64, i64* %envptr7591951, i64 1            ; &envptr7591951[1]
  %vOc$_37foldr1 = load i64, i64* %envptr7591952, align 8                            ; load; *envptr7591952
  %cont7581455 = call i64 @prim_car(i64 %rvp7585595)                                 ; call prim_car
  %rvp7585594 = call i64 @prim_cdr(i64 %rvp7585595)                                  ; call prim_cdr
  %MVW$f = call i64 @prim_car(i64 %rvp7585594)                                       ; call prim_car
  %rvp7585593 = call i64 @prim_cdr(i64 %rvp7585594)                                  ; call prim_cdr
  %Q7C$acc = call i64 @prim_car(i64 %rvp7585593)                                     ; call prim_car
  %rvp7585592 = call i64 @prim_cdr(i64 %rvp7585593)                                  ; call prim_cdr
  %nbV$lst = call i64 @prim_car(i64 %rvp7585592)                                     ; call prim_car
  %na7585575 = call i64 @prim_cdr(i64 %rvp7585592)                                   ; call prim_cdr
  %a7580970 = call i64 @prim_null_63(i64 %nbV$lst)                                   ; call prim_null_63
  %cmp7591953 = icmp eq i64 %a7580970, 15                                            ; false?
  br i1 %cmp7591953, label %else7591955, label %then7591954                          ; if

then7591954:
  %arg7583443 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %rva7585578 = add i64 0, 0                                                         ; quoted ()
  %rva7585577 = call i64 @prim_cons(i64 %Q7C$acc, i64 %rva7585578)                   ; call prim_cons
  %rva7585576 = call i64 @prim_cons(i64 %arg7583443, i64 %rva7585577)                ; call prim_cons
  %cloptr7591956 = inttoptr i64 %cont7581455 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591957 = getelementptr inbounds i64, i64* %cloptr7591956, i64 0             ; &cloptr7591956[0]
  %f7591959 = load i64, i64* %i0ptr7591957, align 8                                  ; load; *i0ptr7591957
  %fptr7591958 = inttoptr i64 %f7591959 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591958(i64 %cont7581455, i64 %rva7585576)          ; tail call
  ret void

else7591955:
  %a7580971 = call i64 @prim_car(i64 %nbV$lst)                                       ; call prim_car
  %a7580972 = call i64 @prim_cdr(i64 %nbV$lst)                                       ; call prim_cdr
  %cloptr7591960 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7591962 = getelementptr inbounds i64, i64* %cloptr7591960, i64 1              ; &eptr7591962[1]
  %eptr7591963 = getelementptr inbounds i64, i64* %cloptr7591960, i64 2              ; &eptr7591963[2]
  %eptr7591964 = getelementptr inbounds i64, i64* %cloptr7591960, i64 3              ; &eptr7591964[3]
  store i64 %MVW$f, i64* %eptr7591962                                                ; *eptr7591962 = %MVW$f
  store i64 %a7580971, i64* %eptr7591963                                             ; *eptr7591963 = %a7580971
  store i64 %cont7581455, i64* %eptr7591964                                          ; *eptr7591964 = %cont7581455
  %eptr7591961 = getelementptr inbounds i64, i64* %cloptr7591960, i64 0              ; &cloptr7591960[0]
  %f7591965 = ptrtoint void(i64,i64)* @lam7585659 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591965, i64* %eptr7591961                                             ; store fptr
  %arg7583450 = ptrtoint i64* %cloptr7591960 to i64                                  ; closure cast; i64* -> i64
  %rva7585591 = add i64 0, 0                                                         ; quoted ()
  %rva7585590 = call i64 @prim_cons(i64 %a7580972, i64 %rva7585591)                  ; call prim_cons
  %rva7585589 = call i64 @prim_cons(i64 %Q7C$acc, i64 %rva7585590)                   ; call prim_cons
  %rva7585588 = call i64 @prim_cons(i64 %MVW$f, i64 %rva7585589)                     ; call prim_cons
  %rva7585587 = call i64 @prim_cons(i64 %arg7583450, i64 %rva7585588)                ; call prim_cons
  %cloptr7591966 = inttoptr i64 %vOc$_37foldr1 to i64*                               ; closure/env cast; i64 -> i64*
  %i0ptr7591967 = getelementptr inbounds i64, i64* %cloptr7591966, i64 0             ; &cloptr7591966[0]
  %f7591969 = load i64, i64* %i0ptr7591967, align 8                                  ; load; *i0ptr7591967
  %fptr7591968 = inttoptr i64 %f7591969 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591968(i64 %vOc$_37foldr1, i64 %rva7585587)        ; tail call
  ret void
}


define void @lam7585659(i64 %env7585660, i64 %rvp7585586) {
  %envptr7591970 = inttoptr i64 %env7585660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591971 = getelementptr inbounds i64, i64* %envptr7591970, i64 3            ; &envptr7591970[3]
  %cont7581455 = load i64, i64* %envptr7591971, align 8                              ; load; *envptr7591971
  %envptr7591972 = inttoptr i64 %env7585660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591973 = getelementptr inbounds i64, i64* %envptr7591972, i64 2            ; &envptr7591972[2]
  %a7580971 = load i64, i64* %envptr7591973, align 8                                 ; load; *envptr7591973
  %envptr7591974 = inttoptr i64 %env7585660 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591975 = getelementptr inbounds i64, i64* %envptr7591974, i64 1            ; &envptr7591974[1]
  %MVW$f = load i64, i64* %envptr7591975, align 8                                    ; load; *envptr7591975
  %_957581456 = call i64 @prim_car(i64 %rvp7585586)                                  ; call prim_car
  %rvp7585585 = call i64 @prim_cdr(i64 %rvp7585586)                                  ; call prim_cdr
  %a7580973 = call i64 @prim_car(i64 %rvp7585585)                                    ; call prim_car
  %na7585580 = call i64 @prim_cdr(i64 %rvp7585585)                                   ; call prim_cdr
  %rva7585584 = add i64 0, 0                                                         ; quoted ()
  %rva7585583 = call i64 @prim_cons(i64 %a7580973, i64 %rva7585584)                  ; call prim_cons
  %rva7585582 = call i64 @prim_cons(i64 %a7580971, i64 %rva7585583)                  ; call prim_cons
  %rva7585581 = call i64 @prim_cons(i64 %cont7581455, i64 %rva7585582)               ; call prim_cons
  %cloptr7591976 = inttoptr i64 %MVW$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7591977 = getelementptr inbounds i64, i64* %cloptr7591976, i64 0             ; &cloptr7591976[0]
  %f7591979 = load i64, i64* %i0ptr7591977, align 8                                  ; load; *i0ptr7591977
  %fptr7591978 = inttoptr i64 %f7591979 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591978(i64 %MVW$f, i64 %rva7585581)                ; tail call
  ret void
}


define void @lam7585651(i64 %env7585652, i64 %rvp7585633) {
  %cont7581458 = call i64 @prim_car(i64 %rvp7585633)                                 ; call prim_car
  %rvp7585632 = call i64 @prim_cdr(i64 %rvp7585633)                                  ; call prim_cdr
  %Mk7$y = call i64 @prim_car(i64 %rvp7585632)                                       ; call prim_car
  %na7585607 = call i64 @prim_cdr(i64 %rvp7585632)                                   ; call prim_cdr
  %arg7583457 = call i64 @const_init_int(i64 0)                                      ; quoted int
  %cloptr7591980 = call i64* @alloc(i64 16)                                          ; malloc
  %eptr7591982 = getelementptr inbounds i64, i64* %cloptr7591980, i64 1              ; &eptr7591982[1]
  store i64 %Mk7$y, i64* %eptr7591982                                                ; *eptr7591982 = %Mk7$y
  %eptr7591981 = getelementptr inbounds i64, i64* %cloptr7591980, i64 0              ; &cloptr7591980[0]
  %f7591983 = ptrtoint void(i64,i64)* @lam7585648 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591983, i64* %eptr7591981                                             ; store fptr
  %arg7583456 = ptrtoint i64* %cloptr7591980 to i64                                  ; closure cast; i64* -> i64
  %rva7585631 = add i64 0, 0                                                         ; quoted ()
  %rva7585630 = call i64 @prim_cons(i64 %arg7583456, i64 %rva7585631)                ; call prim_cons
  %rva7585629 = call i64 @prim_cons(i64 %arg7583457, i64 %rva7585630)                ; call prim_cons
  %cloptr7591984 = inttoptr i64 %cont7581458 to i64*                                 ; closure/env cast; i64 -> i64*
  %i0ptr7591985 = getelementptr inbounds i64, i64* %cloptr7591984, i64 0             ; &cloptr7591984[0]
  %f7591987 = load i64, i64* %i0ptr7591985, align 8                                  ; load; *i0ptr7591985
  %fptr7591986 = inttoptr i64 %f7591987 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591986(i64 %cont7581458, i64 %rva7585629)          ; tail call
  ret void
}


define void @lam7585648(i64 %env7585649, i64 %rvp7585628) {
  %envptr7591988 = inttoptr i64 %env7585649 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7591989 = getelementptr inbounds i64, i64* %envptr7591988, i64 1            ; &envptr7591988[1]
  %Mk7$y = load i64, i64* %envptr7591989, align 8                                    ; load; *envptr7591989
  %cont7581459 = call i64 @prim_car(i64 %rvp7585628)                                 ; call prim_car
  %rvp7585627 = call i64 @prim_cdr(i64 %rvp7585628)                                  ; call prim_cdr
  %qYW$f = call i64 @prim_car(i64 %rvp7585627)                                       ; call prim_car
  %na7585609 = call i64 @prim_cdr(i64 %rvp7585627)                                   ; call prim_cdr
  %cloptr7591990 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7591992 = getelementptr inbounds i64, i64* %cloptr7591990, i64 1              ; &eptr7591992[1]
  %eptr7591993 = getelementptr inbounds i64, i64* %cloptr7591990, i64 2              ; &eptr7591993[2]
  store i64 %qYW$f, i64* %eptr7591992                                                ; *eptr7591992 = %qYW$f
  store i64 %Mk7$y, i64* %eptr7591993                                                ; *eptr7591993 = %Mk7$y
  %eptr7591991 = getelementptr inbounds i64, i64* %cloptr7591990, i64 0              ; &cloptr7591990[0]
  %f7591994 = ptrtoint void(i64,i64)* @lam7585646 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7591994, i64* %eptr7591991                                             ; store fptr
  %arg7583459 = ptrtoint i64* %cloptr7591990 to i64                                  ; closure cast; i64* -> i64
  %rva7585626 = add i64 0, 0                                                         ; quoted ()
  %rva7585625 = call i64 @prim_cons(i64 %arg7583459, i64 %rva7585626)                ; call prim_cons
  %rva7585624 = call i64 @prim_cons(i64 %cont7581459, i64 %rva7585625)               ; call prim_cons
  %cloptr7591995 = inttoptr i64 %qYW$f to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7591996 = getelementptr inbounds i64, i64* %cloptr7591995, i64 0             ; &cloptr7591995[0]
  %f7591998 = load i64, i64* %i0ptr7591996, align 8                                  ; load; *i0ptr7591996
  %fptr7591997 = inttoptr i64 %f7591998 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7591997(i64 %qYW$f, i64 %rva7585624)                ; tail call
  ret void
}


define void @lam7585646(i64 %env7585647, i64 %vzU$args7581461) {
  %envptr7591999 = inttoptr i64 %env7585647 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7592000 = getelementptr inbounds i64, i64* %envptr7591999, i64 2            ; &envptr7591999[2]
  %Mk7$y = load i64, i64* %envptr7592000, align 8                                    ; load; *envptr7592000
  %envptr7592001 = inttoptr i64 %env7585647 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7592002 = getelementptr inbounds i64, i64* %envptr7592001, i64 1            ; &envptr7592001[1]
  %qYW$f = load i64, i64* %envptr7592002, align 8                                    ; load; *envptr7592002
  %cont7581460 = call i64 @prim_car(i64 %vzU$args7581461)                            ; call prim_car
  %vzU$args = call i64 @prim_cdr(i64 %vzU$args7581461)                               ; call prim_cdr
  %cloptr7592003 = call i64* @alloc(i64 32)                                          ; malloc
  %eptr7592005 = getelementptr inbounds i64, i64* %cloptr7592003, i64 1              ; &eptr7592005[1]
  %eptr7592006 = getelementptr inbounds i64, i64* %cloptr7592003, i64 2              ; &eptr7592006[2]
  %eptr7592007 = getelementptr inbounds i64, i64* %cloptr7592003, i64 3              ; &eptr7592007[3]
  store i64 %vzU$args, i64* %eptr7592005                                             ; *eptr7592005 = %vzU$args
  store i64 %qYW$f, i64* %eptr7592006                                                ; *eptr7592006 = %qYW$f
  store i64 %cont7581460, i64* %eptr7592007                                          ; *eptr7592007 = %cont7581460
  %eptr7592004 = getelementptr inbounds i64, i64* %cloptr7592003, i64 0              ; &cloptr7592003[0]
  %f7592008 = ptrtoint void(i64,i64)* @lam7585644 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7592008, i64* %eptr7592004                                             ; store fptr
  %arg7583465 = ptrtoint i64* %cloptr7592003 to i64                                  ; closure cast; i64* -> i64
  %rva7585623 = add i64 0, 0                                                         ; quoted ()
  %rva7585622 = call i64 @prim_cons(i64 %Mk7$y, i64 %rva7585623)                     ; call prim_cons
  %rva7585621 = call i64 @prim_cons(i64 %arg7583465, i64 %rva7585622)                ; call prim_cons
  %cloptr7592009 = inttoptr i64 %Mk7$y to i64*                                       ; closure/env cast; i64 -> i64*
  %i0ptr7592010 = getelementptr inbounds i64, i64* %cloptr7592009, i64 0             ; &cloptr7592009[0]
  %f7592012 = load i64, i64* %i0ptr7592010, align 8                                  ; load; *i0ptr7592010
  %fptr7592011 = inttoptr i64 %f7592012 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7592011(i64 %Mk7$y, i64 %rva7585621)                ; tail call
  ret void
}


define void @lam7585644(i64 %env7585645, i64 %rvp7585620) {
  %envptr7592013 = inttoptr i64 %env7585645 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7592014 = getelementptr inbounds i64, i64* %envptr7592013, i64 3            ; &envptr7592013[3]
  %cont7581460 = load i64, i64* %envptr7592014, align 8                              ; load; *envptr7592014
  %envptr7592015 = inttoptr i64 %env7585645 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7592016 = getelementptr inbounds i64, i64* %envptr7592015, i64 2            ; &envptr7592015[2]
  %qYW$f = load i64, i64* %envptr7592016, align 8                                    ; load; *envptr7592016
  %envptr7592017 = inttoptr i64 %env7585645 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7592018 = getelementptr inbounds i64, i64* %envptr7592017, i64 1            ; &envptr7592017[1]
  %vzU$args = load i64, i64* %envptr7592018, align 8                                 ; load; *envptr7592018
  %_957581462 = call i64 @prim_car(i64 %rvp7585620)                                  ; call prim_car
  %rvp7585619 = call i64 @prim_cdr(i64 %rvp7585620)                                  ; call prim_cdr
  %a7580968 = call i64 @prim_car(i64 %rvp7585619)                                    ; call prim_car
  %na7585611 = call i64 @prim_cdr(i64 %rvp7585619)                                   ; call prim_cdr
  %cloptr7592019 = call i64* @alloc(i64 24)                                          ; malloc
  %eptr7592021 = getelementptr inbounds i64, i64* %cloptr7592019, i64 1              ; &eptr7592021[1]
  %eptr7592022 = getelementptr inbounds i64, i64* %cloptr7592019, i64 2              ; &eptr7592022[2]
  store i64 %vzU$args, i64* %eptr7592021                                             ; *eptr7592021 = %vzU$args
  store i64 %cont7581460, i64* %eptr7592022                                          ; *eptr7592022 = %cont7581460
  %eptr7592020 = getelementptr inbounds i64, i64* %cloptr7592019, i64 0              ; &cloptr7592019[0]
  %f7592023 = ptrtoint void(i64,i64)* @lam7585642 to i64                             ; fptr cast; i64(...)* -> i64
  store i64 %f7592023, i64* %eptr7592020                                             ; store fptr
  %arg7583468 = ptrtoint i64* %cloptr7592019 to i64                                  ; closure cast; i64* -> i64
  %rva7585618 = add i64 0, 0                                                         ; quoted ()
  %rva7585617 = call i64 @prim_cons(i64 %qYW$f, i64 %rva7585618)                     ; call prim_cons
  %rva7585616 = call i64 @prim_cons(i64 %arg7583468, i64 %rva7585617)                ; call prim_cons
  %cloptr7592024 = inttoptr i64 %a7580968 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7592025 = getelementptr inbounds i64, i64* %cloptr7592024, i64 0             ; &cloptr7592024[0]
  %f7592027 = load i64, i64* %i0ptr7592025, align 8                                  ; load; *i0ptr7592025
  %fptr7592026 = inttoptr i64 %f7592027 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7592026(i64 %a7580968, i64 %rva7585616)             ; tail call
  ret void
}


define void @lam7585642(i64 %env7585643, i64 %rvp7585615) {
  %envptr7592028 = inttoptr i64 %env7585643 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7592029 = getelementptr inbounds i64, i64* %envptr7592028, i64 2            ; &envptr7592028[2]
  %cont7581460 = load i64, i64* %envptr7592029, align 8                              ; load; *envptr7592029
  %envptr7592030 = inttoptr i64 %env7585643 to i64*                                  ; closure/env cast; i64 -> i64*
  %envptr7592031 = getelementptr inbounds i64, i64* %envptr7592030, i64 1            ; &envptr7592030[1]
  %vzU$args = load i64, i64* %envptr7592031, align 8                                 ; load; *envptr7592031
  %_957581463 = call i64 @prim_car(i64 %rvp7585615)                                  ; call prim_car
  %rvp7585614 = call i64 @prim_cdr(i64 %rvp7585615)                                  ; call prim_cdr
  %a7580969 = call i64 @prim_car(i64 %rvp7585614)                                    ; call prim_car
  %na7585613 = call i64 @prim_cdr(i64 %rvp7585614)                                   ; call prim_cdr
  %cps_45lst7581464 = call i64 @prim_cons(i64 %cont7581460, i64 %vzU$args)           ; call prim_cons
  %cloptr7592032 = inttoptr i64 %a7580969 to i64*                                    ; closure/env cast; i64 -> i64*
  %i0ptr7592033 = getelementptr inbounds i64, i64* %cloptr7592032, i64 0             ; &cloptr7592032[0]
  %f7592035 = load i64, i64* %i0ptr7592033, align 8                                  ; load; *i0ptr7592033
  %fptr7592034 = inttoptr i64 %f7592035 to void (i64,i64)*                           ; cast fptr; i64 -> void(...)*
  musttail call fastcc void %fptr7592034(i64 %a7580969, i64 %cps_45lst7581464)       ; tail call
  ret void
}





@sym7588065 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588086 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588328 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588414 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588468 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588492 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588510 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588581 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588608 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588642 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588692 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588789 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588816 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588850 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7588900 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589002 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589056 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589080 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589098 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589169 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589196 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589230 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589280 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589377 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589404 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589438 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589488 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589536 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589591 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589636 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589696 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589764 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589809 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589869 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7589960 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590175 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590185 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590243 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590264 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590319 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590364 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590411 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590459 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590566 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590623 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590670 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590718 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590825 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7590958 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7591008 = private unnamed_addr constant [17 x i8] c"division_by_zero\00", align 8
@sym7591069 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
@sym7591168 = private unnamed_addr constant [27 x i8] c"function_application_error\00", align 8
